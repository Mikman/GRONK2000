
CanReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08004568  08004568  00014568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045f0  080045f0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080045f0  080045f0  000145f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045f8  080045f8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045fc  080045fc  000145fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001140  2000007c  0800467c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200011bc  0800467c  000211bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5ed  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f95  00000000  00000000  0002d699  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  0002f630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009f8  00000000  00000000  000300f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020701  00000000  00000000  00030ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b524  00000000  00000000  000511e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c395e  00000000  00000000  0005c70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012006b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ed8  00000000  00000000  001200c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004550 	.word	0x08004550

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004550 	.word	0x08004550

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <QueueFull>:
 *  Created on: Mar 16, 2021
 *      Author: Mikkel
 */
#include "circle_queue.h"

int QueueFull(struct Queue *q){
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	return (((q->pointWR +1) % SIZE_OF_QUEUE) == q->pointRD);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	885b      	ldrh	r3, [r3, #2]
 8000584:	3301      	adds	r3, #1
 8000586:	425a      	negs	r2, r3
 8000588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800058c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000590:	bf58      	it	pl
 8000592:	4253      	negpl	r3, r2
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	8812      	ldrh	r2, [r2, #0]
 8000598:	4293      	cmp	r3, r2
 800059a:	bf0c      	ite	eq
 800059c:	2301      	moveq	r3, #1
 800059e:	2300      	movne	r3, #0
 80005a0:	b2db      	uxtb	r3, r3
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <QueueEmpty>:

int QueueEmpty(struct Queue *q){
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
	return (q->pointWR == q->pointRD);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	885a      	ldrh	r2, [r3, #2]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	429a      	cmp	r2, r3
 80005c0:	bf0c      	ite	eq
 80005c2:	2301      	moveq	r3, #1
 80005c4:	2300      	movne	r3, #0
 80005c6:	b2db      	uxtb	r3, r3
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <EnterQueue>:

int EnterQueue(struct Queue *q, uint8_t data) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]

	if (QueueFull(q)) {
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ffc9 	bl	8000578 <QueueFull>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <EnterQueue+0x1c>
		return 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	e017      	b.n	8000620 <EnterQueue+0x4c>
	}
	else {
		q->queue[q->pointWR] = data;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	885b      	ldrh	r3, [r3, #2]
 80005f4:	461a      	mov	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	78fa      	ldrb	r2, [r7, #3]
 80005fc:	711a      	strb	r2, [r3, #4]


		if ((q->pointWR + 1) == SIZE_OF_QUEUE){
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	885b      	ldrh	r3, [r3, #2]
 8000602:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000606:	4293      	cmp	r3, r2
 8000608:	d103      	bne.n	8000612 <EnterQueue+0x3e>
			q->pointWR = 0;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	2200      	movs	r2, #0
 800060e:	805a      	strh	r2, [r3, #2]
 8000610:	e005      	b.n	800061e <EnterQueue+0x4a>
		}
		else{
			q->pointWR += 1;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	885b      	ldrh	r3, [r3, #2]
 8000616:	3301      	adds	r3, #1
 8000618:	b29a      	uxth	r2, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	805a      	strh	r2, [r3, #2]
		}

	}
	return 1;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <LeaveQueue>:

int LeaveQueue(struct Queue *q, uint8_t *data) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	6039      	str	r1, [r7, #0]
	if (QueueEmpty(q)){
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f7ff ffbb 	bl	80005ae <QueueEmpty>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <LeaveQueue+0x1a>
		return 0;
 800063e:	2300      	movs	r3, #0
 8000640:	e018      	b.n	8000674 <LeaveQueue+0x4c>
	}
	else {
		*data = q->queue[q->pointRD];
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4413      	add	r3, r2
 800064c:	791a      	ldrb	r2, [r3, #4]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	701a      	strb	r2, [r3, #0]
		if((q->pointRD + 1) ==SIZE_OF_QUEUE){
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800065a:	4293      	cmp	r3, r2
 800065c:	d103      	bne.n	8000666 <LeaveQueue+0x3e>
			q->pointRD = 0;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	801a      	strh	r2, [r3, #0]
 8000664:	e005      	b.n	8000672 <LeaveQueue+0x4a>
		}
		else{
			q->pointRD +=1;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	3301      	adds	r3, #1
 800066c:	b29a      	uxth	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	801a      	strh	r2, [r3, #0]
		}
	}
	return 1;
 8000672:	2301      	movs	r3, #1
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000680:	f000 fc5d 	bl	8000f3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000684:	f000 f816 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000688:	f000 f958 	bl	800093c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800068c:	f000 f926 	bl	80008dc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000690:	f000 f892 	bl	80007b8 <MX_CAN1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <main+0x30>)
 8000698:	f001 fce4 	bl	8002064 <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d0f8      	beq.n	8000694 <main+0x18>
		 transmitData(&DCMOTOR);
 80006a2:	4803      	ldr	r0, [pc, #12]	; (80006b0 <main+0x34>)
 80006a4:	f000 fa5c 	bl	8000b60 <transmitData>
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 80006a8:	e7f4      	b.n	8000694 <main+0x18>
 80006aa:	bf00      	nop
 80006ac:	48000400 	.word	0x48000400
 80006b0:	20000ca4 	.word	0x20000ca4

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b0ac      	sub	sp, #176	; 0xb0
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80006be:	2244      	movs	r2, #68	; 0x44
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fb0e 	bl	8003ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2254      	movs	r2, #84	; 0x54
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 fb00 	bl	8003ce4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006e4:	f001 fcee 	bl	80020c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006e8:	4b32      	ldr	r3, [pc, #200]	; (80007b4 <SystemClock_Config+0x100>)
 80006ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006ee:	4a31      	ldr	r2, [pc, #196]	; (80007b4 <SystemClock_Config+0x100>)
 80006f0:	f023 0318 	bic.w	r3, r3, #24
 80006f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006f8:	2314      	movs	r3, #20
 80006fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800070c:	2360      	movs	r3, #96	; 0x60
 800070e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000718:	2301      	movs	r3, #1
 800071a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800071e:	2301      	movs	r3, #1
 8000720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000724:	2324      	movs	r3, #36	; 0x24
 8000726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800072a:	2307      	movs	r3, #7
 800072c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000730:	2302      	movs	r3, #2
 8000732:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fd33 	bl	80021ac <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800074c:	f000 fa66 	bl	8000c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000754:	2303      	movs	r3, #3
 8000756:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000764:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000768:	2104      	movs	r1, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f002 f93e 	bl	80029ec <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000776:	f000 fa51 	bl	8000c1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800077a:	2302      	movs	r3, #2
 800077c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fb37 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000790:	f000 fa44 	bl	8000c1c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000794:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000798:	f001 fcb2 	bl	8002100 <HAL_PWREx_ControlVoltageScaling>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80007a2:	f000 fa3b 	bl	8000c1c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007a6:	f002 fd1b 	bl	80031e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007aa:	bf00      	nop
 80007ac:	37b0      	adds	r7, #176	; 0xb0
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	  uint32_t ext_id = 0x00000000;							// Den største værdi der kan være på MSB er 1
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
	  uint32_t mask = 0xFFFFFFE0;
 80007c2:	f06f 031f 	mvn.w	r3, #31
 80007c6:	60bb      	str	r3, [r7, #8]
	  CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;			// Vi vælger at bruge mask mode
 80007c8:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <MX_CAN1_Init+0x110>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
	  CanFilter.FilterIdHigh = (ext_id & 0x1FFFFFFF) >> 13; // (ext_id << 3) >> 16;						// Da vi har 32 bit ID, er dette de 16 MSB af ID
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	0b5b      	lsrs	r3, r3, #13
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	4a3c      	ldr	r2, [pc, #240]	; (80008c8 <MX_CAN1_Init+0x110>)
 80007d6:	6013      	str	r3, [r2, #0]
	  CanFilter.FilterIdLow =  (ext_id << 3) | CAN_ID_EXT;	// Da vi har 32 bit ID, er dette de 16 LSB af ID
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	4a39      	ldr	r2, [pc, #228]	; (80008c8 <MX_CAN1_Init+0x110>)
 80007e2:	6053      	str	r3, [r2, #4]
	  CanFilter.FilterMaskIdHigh = (mask & 0x1FFFFFFF) >> 13;// << 5;					// Maskens 16 MSB
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	0b5b      	lsrs	r3, r3, #13
 80007e8:	b29b      	uxth	r3, r3
 80007ea:	4a37      	ldr	r2, [pc, #220]	; (80008c8 <MX_CAN1_Init+0x110>)
 80007ec:	6093      	str	r3, [r2, #8]
	  CanFilter.FilterMaskIdLow = (mask << 3);// << 5 | 0x10;					// Maskens 16 LSB
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	4a35      	ldr	r2, [pc, #212]	; (80008c8 <MX_CAN1_Init+0x110>)
 80007f4:	60d3      	str	r3, [r2, #12]
	  CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;		// ID er et 32 bit-tal
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <MX_CAN1_Init+0x110>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	61da      	str	r2, [r3, #28]
	  CanFilter.FilterActivation = ENABLE;					// Vi aktiverer filteret
 80007fc:	4b32      	ldr	r3, [pc, #200]	; (80008c8 <MX_CAN1_Init+0x110>)
 80007fe:	2201      	movs	r2, #1
 8000800:	621a      	str	r2, [r3, #32]
	  CanFilter.FilterBank = 0;								// Vi vælger filter 0 ud af 14 mulige filtre
 8000802:	4b31      	ldr	r3, [pc, #196]	; (80008c8 <MX_CAN1_Init+0x110>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
	  CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;	// Vi vælger FIFO0 til forskel for FIFO1
 8000808:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <MX_CAN1_Init+0x110>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]


	  CanRxHeader.DLC = PACKAGE_SIZE;
 800080e:	4b2f      	ldr	r3, [pc, #188]	; (80008cc <MX_CAN1_Init+0x114>)
 8000810:	2208      	movs	r2, #8
 8000812:	611a      	str	r2, [r3, #16]
	  CanRxHeader.ExtId = 0x0;
 8000814:	4b2d      	ldr	r3, [pc, #180]	; (80008cc <MX_CAN1_Init+0x114>)
 8000816:	2200      	movs	r2, #0
 8000818:	605a      	str	r2, [r3, #4]
	  CanRxHeader.IDE = CAN_ID_EXT;
 800081a:	4b2c      	ldr	r3, [pc, #176]	; (80008cc <MX_CAN1_Init+0x114>)
 800081c:	2204      	movs	r2, #4
 800081e:	609a      	str	r2, [r3, #8]
	  CanRxHeader.RTR = CAN_RTR_DATA;
 8000820:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <MX_CAN1_Init+0x114>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
	  CanRxHeader.FilterMatchIndex = 0x00;
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <MX_CAN1_Init+0x114>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
	  __HAL_RCC_CAN1_CLK_ENABLE();
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <MX_CAN1_Init+0x118>)
 800082e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000830:	4a27      	ldr	r2, [pc, #156]	; (80008d0 <MX_CAN1_Init+0x118>)
 8000832:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000836:	6593      	str	r3, [r2, #88]	; 0x58
 8000838:	4b25      	ldr	r3, [pc, #148]	; (80008d0 <MX_CAN1_Init+0x118>)
 800083a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000844:	4b23      	ldr	r3, [pc, #140]	; (80008d4 <MX_CAN1_Init+0x11c>)
 8000846:	4a24      	ldr	r2, [pc, #144]	; (80008d8 <MX_CAN1_Init+0x120>)
 8000848:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_CAN1_Init+0x11c>)
 800084c:	2212      	movs	r2, #18
 800084e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000850:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_CAN1_Init+0x11c>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000856:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_CAN1_Init+0x11c>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_CAN1_Init+0x11c>)
 800085e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000862:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_CAN1_Init+0x11c>)
 8000866:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800086a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_CAN1_Init+0x11c>)
 800086e:	2200      	movs	r2, #0
 8000870:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_CAN1_Init+0x11c>)
 8000874:	2200      	movs	r2, #0
 8000876:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_CAN1_Init+0x11c>)
 800087a:	2200      	movs	r2, #0
 800087c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_CAN1_Init+0x11c>)
 8000880:	2200      	movs	r2, #0
 8000882:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <MX_CAN1_Init+0x11c>)
 8000886:	2200      	movs	r2, #0
 8000888:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800088a:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_CAN1_Init+0x11c>)
 800088c:	2200      	movs	r2, #0
 800088e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000890:	4810      	ldr	r0, [pc, #64]	; (80008d4 <MX_CAN1_Init+0x11c>)
 8000892:	f000 fbc9 	bl	8001028 <HAL_CAN_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_CAN1_Init+0xe8>
  {
    Error_Handler();
 800089c:	f000 f9be 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

    while (HAL_CAN_ConfigFilter(&hcan1, &CanFilter) != HAL_OK) {}
 80008a0:	bf00      	nop
 80008a2:	4909      	ldr	r1, [pc, #36]	; (80008c8 <MX_CAN1_Init+0x110>)
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <MX_CAN1_Init+0x11c>)
 80008a6:	f000 fcba 	bl	800121e <HAL_CAN_ConfigFilter>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d1f8      	bne.n	80008a2 <MX_CAN1_Init+0xea>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80008b0:	2102      	movs	r1, #2
 80008b2:	4808      	ldr	r0, [pc, #32]	; (80008d4 <MX_CAN1_Init+0x11c>)
 80008b4:	f000 fefb 	bl	80016ae <HAL_CAN_ActivateNotification>
    HAL_CAN_Start(&hcan1);
 80008b8:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_CAN1_Init+0x11c>)
 80008ba:	f000 fd7a 	bl	80013b2 <HAL_CAN_Start>
  /* USER CODE END CAN1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200010b8 	.word	0x200010b8
 80008cc:	200010e0 	.word	0x200010e0
 80008d0:	40021000 	.word	0x40021000
 80008d4:	20001180 	.word	0x20001180
 80008d8:	40006400 	.word	0x40006400

080008dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008e2:	4a15      	ldr	r2, [pc, #84]	; (8000938 <MX_USART2_UART_Init+0x5c>)
 80008e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_USART2_UART_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_USART2_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_USART2_UART_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_USART2_UART_Init+0x58>)
 8000920:	f002 fd60 	bl	80033e4 <HAL_UART_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800092a:	f000 f977 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200010fc 	.word	0x200010fc
 8000938:	40004400 	.word	0x40004400

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b088      	sub	sp, #32
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <MX_GPIO_Init+0xc0>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a29      	ldr	r2, [pc, #164]	; (80009fc <MX_GPIO_Init+0xc0>)
 8000958:	f043 0304 	orr.w	r3, r3, #4
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <MX_GPIO_Init+0xc0>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0304 	and.w	r3, r3, #4
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096a:	4b24      	ldr	r3, [pc, #144]	; (80009fc <MX_GPIO_Init+0xc0>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a23      	ldr	r2, [pc, #140]	; (80009fc <MX_GPIO_Init+0xc0>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <MX_GPIO_Init+0xc0>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <MX_GPIO_Init+0xc0>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <MX_GPIO_Init+0xc0>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <MX_GPIO_Init+0xc0>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	2189      	movs	r1, #137	; 0x89
 800099e:	4818      	ldr	r0, [pc, #96]	; (8000a00 <MX_GPIO_Init+0xc4>)
 80009a0:	f001 fb78 	bl	8002094 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009a4:	2340      	movs	r3, #64	; 0x40
 80009a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a8:	2300      	movs	r3, #0
 80009aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ac:	2302      	movs	r3, #2
 80009ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4619      	mov	r1, r3
 80009b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ba:	f001 f9e9 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 80009be:	2389      	movs	r3, #137	; 0x89
 80009c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c2:	2301      	movs	r3, #1
 80009c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <MX_GPIO_Init+0xc4>)
 80009d6:	f001 f9db 	bl	8001d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009da:	2340      	movs	r3, #64	; 0x40
 80009dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009e2:	2302      	movs	r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4619      	mov	r1, r3
 80009ec:	4804      	ldr	r0, [pc, #16]	; (8000a00 <MX_GPIO_Init+0xc4>)
 80009ee:	f001 f9cf 	bl	8001d90 <HAL_GPIO_Init>

}
 80009f2:	bf00      	nop
 80009f4:	3720      	adds	r7, #32
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000400 	.word	0x48000400

08000a04 <receiveData>:

/* USER CODE BEGIN 4 */
void receiveData() {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
	uint8_t buffer[PACKAGE_SIZE] = {0};
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]

	while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8000a12:	e020      	b.n	8000a56 <receiveData+0x52>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2140      	movs	r1, #64	; 0x40
 8000a18:	4815      	ldr	r0, [pc, #84]	; (8000a70 <receiveData+0x6c>)
 8000a1a:	f001 fb3b 	bl	8002094 <HAL_GPIO_WritePin>
		if (!QueueFull(&queueCANRX)) { // Hvis køen ikke er fuld - Hvis der er en plads til at modtage en besked
 8000a1e:	4815      	ldr	r0, [pc, #84]	; (8000a74 <receiveData+0x70>)
 8000a20:	f7ff fdaa 	bl	8000578 <QueueFull>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d115      	bne.n	8000a56 <receiveData+0x52>
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CanRxHeader, buffer); // Modtag beskeden og læg den i buffer
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <receiveData+0x74>)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4812      	ldr	r0, [pc, #72]	; (8000a7c <receiveData+0x78>)
 8000a32:	f000 fd02 	bl	800143a <HAL_CAN_GetRxMessage>
			hej++;
 8000a36:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <receiveData+0x7c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <receiveData+0x7c>)
 8000a3e:	6013      	str	r3, [r2, #0]
			placeData(buffer);
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f81e 	bl	8000a84 <placeData>
			if (hej > 384) {
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <receiveData+0x7c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000a50:	dd01      	ble.n	8000a56 <receiveData+0x52>
				int dev = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
	while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8000a56:	2100      	movs	r1, #0
 8000a58:	4808      	ldr	r0, [pc, #32]	; (8000a7c <receiveData+0x78>)
 8000a5a:	f000 fe00 	bl	800165e <HAL_CAN_GetRxFifoFillLevel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1d7      	bne.n	8000a14 <receiveData+0x10>
			for(int i = 0; i < PACKAGE_SIZE; i++){
				EnterQueue(&queueCANRX, buffer[i]); // Læg buffer ind i modtager-queuen
			}*/
		}
	}
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	48000400 	.word	0x48000400
 8000a74:	20000098 	.word	0x20000098
 8000a78:	200010e0 	.word	0x200010e0
 8000a7c:	20001180 	.word	0x20001180
 8000a80:	200010a8 	.word	0x200010a8

08000a84 <placeData>:

void placeData(uint8_t *DataPass) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b086      	sub	sp, #24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	if (CanRxHeader.ExtId == GPSID)
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <placeData+0xc0>)
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <placeData+0xc4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d116      	bne.n	8000ac6 <placeData+0x42>
	{
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
 8000a9c:	e010      	b.n	8000ac0 <placeData+0x3c>
			if (!QueueFull(&GPSDATA)) {
 8000a9e:	482b      	ldr	r0, [pc, #172]	; (8000b4c <placeData+0xc8>)
 8000aa0:	f7ff fd6a 	bl	8000578 <QueueFull>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d107      	bne.n	8000aba <placeData+0x36>
				EnterQueue(&GPSDATA, *(DataPass + i));
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4825      	ldr	r0, [pc, #148]	; (8000b4c <placeData+0xc8>)
 8000ab6:	f7ff fd8d 	bl	80005d4 <EnterQueue>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	3301      	adds	r3, #1
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	2b07      	cmp	r3, #7
 8000ac4:	ddeb      	ble.n	8000a9e <placeData+0x1a>
			}

		}
	}
	if (CanRxHeader.ExtId == ACCELID) {
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	; (8000b44 <placeData+0xc0>)
 8000ac8:	685a      	ldr	r2, [r3, #4]
 8000aca:	4b21      	ldr	r3, [pc, #132]	; (8000b50 <placeData+0xcc>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d116      	bne.n	8000b00 <placeData+0x7c>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	e010      	b.n	8000afa <placeData+0x76>
			if (!QueueFull(&ACCEL)) {
 8000ad8:	481e      	ldr	r0, [pc, #120]	; (8000b54 <placeData+0xd0>)
 8000ada:	f7ff fd4d 	bl	8000578 <QueueFull>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d107      	bne.n	8000af4 <placeData+0x70>
				EnterQueue(&ACCEL, *(DataPass + i));
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	4819      	ldr	r0, [pc, #100]	; (8000b54 <placeData+0xd0>)
 8000af0:	f7ff fd70 	bl	80005d4 <EnterQueue>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	3301      	adds	r3, #1
 8000af8:	613b      	str	r3, [r7, #16]
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	2b07      	cmp	r3, #7
 8000afe:	ddeb      	ble.n	8000ad8 <placeData+0x54>
			}
		}
	}
	if (CanRxHeader.ExtId == DCMOTORID) {
 8000b00:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <placeData+0xc0>)
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <placeData+0xd4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d116      	bne.n	8000b3a <placeData+0xb6>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	e010      	b.n	8000b34 <placeData+0xb0>
			if (!QueueFull(&DCMOTOR)) {
 8000b12:	4812      	ldr	r0, [pc, #72]	; (8000b5c <placeData+0xd8>)
 8000b14:	f7ff fd30 	bl	8000578 <QueueFull>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d107      	bne.n	8000b2e <placeData+0xaa>
				EnterQueue(&DCMOTOR, *(DataPass + i));
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	4413      	add	r3, r2
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	480c      	ldr	r0, [pc, #48]	; (8000b5c <placeData+0xd8>)
 8000b2a:	f7ff fd53 	bl	80005d4 <EnterQueue>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	3301      	adds	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2b07      	cmp	r3, #7
 8000b38:	ddeb      	ble.n	8000b12 <placeData+0x8e>
			}
		}
	}

}
 8000b3a:	bf00      	nop
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200010e0 	.word	0x200010e0
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	2000049c 	.word	0x2000049c
 8000b50:	20000004 	.word	0x20000004
 8000b54:	200008a0 	.word	0x200008a0
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	20000ca4 	.word	0x20000ca4

08000b60 <transmitData>:

void transmitData(struct Queue *Data)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	int writePointer = Data -> pointWR;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	885b      	ldrh	r3, [r3, #2]
 8000b6c:	61bb      	str	r3, [r7, #24]
	int readPointer = Data -> pointRD;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	617b      	str	r3, [r7, #20]
	char str[3] = {0};
 8000b74:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <transmitData+0xa8>)
 8000b76:	881b      	ldrh	r3, [r3, #0]
 8000b78:	81bb      	strh	r3, [r7, #12]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	73bb      	strb	r3, [r7, #14]
	uint8_t tempo = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	72fb      	strb	r3, [r7, #11]
	int bytesToRead = writePointer - readPointer;
 8000b82:	69ba      	ldr	r2, [r7, #24]
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < bytesToRead ; i++){
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	e031      	b.n	8000bf4 <transmitData+0x94>
		if ((i % 255) == 0) HAL_UART_Transmit(&huart2, "___", 3, 100);
 8000b90:	69fa      	ldr	r2, [r7, #28]
 8000b92:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <transmitData+0xac>)
 8000b94:	fb83 1302 	smull	r1, r3, r3, r2
 8000b98:	4413      	add	r3, r2
 8000b9a:	11d9      	asrs	r1, r3, #7
 8000b9c:	17d3      	asrs	r3, r2, #31
 8000b9e:	1ac9      	subs	r1, r1, r3
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	1ad1      	subs	r1, r2, r3
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	d105      	bne.n	8000bb8 <transmitData+0x58>
 8000bac:	2364      	movs	r3, #100	; 0x64
 8000bae:	2203      	movs	r2, #3
 8000bb0:	4917      	ldr	r1, [pc, #92]	; (8000c10 <transmitData+0xb0>)
 8000bb2:	4818      	ldr	r0, [pc, #96]	; (8000c14 <transmitData+0xb4>)
 8000bb4:	f002 fc64 	bl	8003480 <HAL_UART_Transmit>
		LeaveQueue(Data, &tempo);
 8000bb8:	f107 030b 	add.w	r3, r7, #11
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fd32 	bl	8000628 <LeaveQueue>
		sprintf(str, "%d", tempo);
 8000bc4:	7afb      	ldrb	r3, [r7, #11]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	4912      	ldr	r1, [pc, #72]	; (8000c18 <transmitData+0xb8>)
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 f890 	bl	8003cf4 <siprintf>
		HAL_UART_Transmit(&huart2, &str, strlen(str), 100);
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff faf9 	bl	80001d0 <strlen>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	f107 010c 	add.w	r1, r7, #12
 8000be6:	2364      	movs	r3, #100	; 0x64
 8000be8:	480a      	ldr	r0, [pc, #40]	; (8000c14 <transmitData+0xb4>)
 8000bea:	f002 fc49 	bl	8003480 <HAL_UART_Transmit>
	for (int i = 0 ; i < bytesToRead ; i++){
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fa      	ldr	r2, [r7, #28]
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbc9      	blt.n	8000b90 <transmitData+0x30>
	}
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3720      	adds	r7, #32
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	08004570 	.word	0x08004570
 8000c0c:	80808081 	.word	0x80808081
 8000c10:	08004568 	.word	0x08004568
 8000c14:	200010fc 	.word	0x200010fc
 8000c18:	0800456c 	.word	0x0800456c

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_MspInit+0x44>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_MspInit+0x44>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_MspInit+0x44>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_MspInit+0x44>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_MspInit+0x44>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6593      	str	r3, [r2, #88]	; 0x58
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_MspInit+0x44>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40021000 	.word	0x40021000

08000c70 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <HAL_CAN_MspInit+0x90>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d131      	bne.n	8000cf6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_CAN_MspInit+0x94>)
 8000c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c96:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_CAN_MspInit+0x94>)
 8000c98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_CAN_MspInit+0x94>)
 8000ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <HAL_CAN_MspInit+0x94>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	4a15      	ldr	r2, [pc, #84]	; (8000d04 <HAL_CAN_MspInit+0x94>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <HAL_CAN_MspInit+0x94>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cd4:	2309      	movs	r3, #9
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f001 f855 	bl	8001d90 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2014      	movs	r0, #20
 8000cec:	f001 f819 	bl	8001d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cf0:	2014      	movs	r0, #20
 8000cf2:	f001 f832 	bl	8001d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40006400 	.word	0x40006400
 8000d04:	40021000 	.word	0x40021000

08000d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a20      	ldr	r2, [pc, #128]	; (8000da8 <HAL_UART_MspInit+0xa0>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d13a      	bne.n	8000da0 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d2a:	4b20      	ldr	r3, [pc, #128]	; (8000dac <HAL_UART_MspInit+0xa4>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	4a1f      	ldr	r2, [pc, #124]	; (8000dac <HAL_UART_MspInit+0xa4>)
 8000d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d34:	6593      	str	r3, [r2, #88]	; 0x58
 8000d36:	4b1d      	ldr	r3, [pc, #116]	; (8000dac <HAL_UART_MspInit+0xa4>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <HAL_UART_MspInit+0xa4>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_UART_MspInit+0xa4>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_UART_MspInit+0xa4>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d78:	f001 f80a 	bl	8001d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9c:	f000 fff8 	bl	8001d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40004400 	.word	0x40004400
 8000dac:	40021000 	.word	0x40021000

08000db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <NMI_Handler+0x4>

08000db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dba:	e7fe      	b.n	8000dba <HardFault_Handler+0x4>

08000dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <MemManage_Handler+0x4>

08000dc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <BusFault_Handler+0x4>

08000dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <UsageFault_Handler+0x4>

08000dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dfc:	f000 f8f4 	bl	8000fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <CAN1_RX0_IRQHandler+0x14>)
 8000e0a:	f000 fc76 	bl	80016fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  receiveData();
 8000e0e:	f7ff fdf9 	bl	8000a04 <receiveData>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20001180 	.word	0x20001180

08000e1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <_sbrk+0x5c>)
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <_sbrk+0x60>)
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e30:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <_sbrk+0x64>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d102      	bne.n	8000e3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e38:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <_sbrk+0x64>)
 8000e3a:	4a12      	ldr	r2, [pc, #72]	; (8000e84 <_sbrk+0x68>)
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d207      	bcs.n	8000e5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e4c:	f002 ff20 	bl	8003c90 <__errno>
 8000e50:	4603      	mov	r3, r0
 8000e52:	220c      	movs	r2, #12
 8000e54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e5a:	e009      	b.n	8000e70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <_sbrk+0x64>)
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a05      	ldr	r2, [pc, #20]	; (8000e80 <_sbrk+0x64>)
 8000e6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20010000 	.word	0x20010000
 8000e7c:	00000400 	.word	0x00000400
 8000e80:	200010ac 	.word	0x200010ac
 8000e84:	200011c0 	.word	0x200011c0

08000e88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <SystemInit+0x5c>)
 8000e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e92:	4a14      	ldr	r2, [pc, #80]	; (8000ee4 <SystemInit+0x5c>)
 8000e94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <SystemInit+0x60>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a11      	ldr	r2, [pc, #68]	; (8000ee8 <SystemInit+0x60>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <SystemInit+0x60>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <SystemInit+0x60>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a0d      	ldr	r2, [pc, #52]	; (8000ee8 <SystemInit+0x60>)
 8000eb4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000eb8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ebc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ebe:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <SystemInit+0x60>)
 8000ec0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ec4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <SystemInit+0x60>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <SystemInit+0x60>)
 8000ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <SystemInit+0x60>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	40021000 	.word	0x40021000

08000eec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ef0:	f7ff ffca 	bl	8000e88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ef4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ef6:	e003      	b.n	8000f00 <LoopCopyDataInit>

08000ef8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000efa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000efc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000efe:	3104      	adds	r1, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f00:	480a      	ldr	r0, [pc, #40]	; (8000f2c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f04:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f06:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f08:	d3f6      	bcc.n	8000ef8 <CopyDataInit>
	ldr	r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f0c:	e002      	b.n	8000f14 <LoopFillZerobss>

08000f0e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f0e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f10:	f842 3b04 	str.w	r3, [r2], #4

08000f14 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <LoopForever+0x16>)
	cmp	r2, r3
 8000f16:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f18:	d3f9      	bcc.n	8000f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f002 febf 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f1e:	f7ff fbad 	bl	800067c <main>

08000f22 <LoopForever>:

LoopForever:
    b LoopForever
 8000f22:	e7fe      	b.n	8000f22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f24:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000f28:	08004600 	.word	0x08004600
	ldr	r0, =_sdata
 8000f2c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f30:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8000f34:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 8000f38:	200011bc 	.word	0x200011bc

08000f3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC1_IRQHandler>

08000f3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f44:	2300      	movs	r3, #0
 8000f46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f48:	2003      	movs	r0, #3
 8000f4a:	f000 fedf 	bl	8001d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f000 f80e 	bl	8000f70 <HAL_InitTick>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	e001      	b.n	8000f64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f60:	f7ff fe62 	bl	8000c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f64:	79fb      	ldrb	r3, [r7, #7]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d023      	beq.n	8000fcc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <HAL_InitTick+0x70>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_InitTick+0x6c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 feeb 	bl	8001d76 <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10f      	bne.n	8000fc6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d809      	bhi.n	8000fc0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fac:	2200      	movs	r2, #0
 8000fae:	6879      	ldr	r1, [r7, #4]
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb4:	f000 feb5 	bl	8001d22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <HAL_InitTick+0x74>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e007      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	e004      	b.n	8000fd0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e001      	b.n	8000fd0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000014 	.word	0x20000014
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	20000010 	.word	0x20000010

08000fe8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x20>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x24>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	4a04      	ldr	r2, [pc, #16]	; (800100c <HAL_IncTick+0x24>)
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000014 	.word	0x20000014
 800100c:	200011a8 	.word	0x200011a8

08001010 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return uwTick;
 8001014:	4b03      	ldr	r3, [pc, #12]	; (8001024 <HAL_GetTick+0x14>)
 8001016:	681b      	ldr	r3, [r3, #0]
}
 8001018:	4618      	mov	r0, r3
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200011a8 	.word	0x200011a8

08001028 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e0ed      	b.n	8001216 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fe12 	bl	8000c70 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f022 0202 	bic.w	r2, r2, #2
 800105a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800105c:	f7ff ffd8 	bl	8001010 <HAL_GetTick>
 8001060:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001062:	e012      	b.n	800108a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001064:	f7ff ffd4 	bl	8001010 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b0a      	cmp	r3, #10
 8001070:	d90b      	bls.n	800108a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2205      	movs	r2, #5
 8001082:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0c5      	b.n	8001216 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1e5      	bne.n	8001064 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f042 0201 	orr.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a8:	f7ff ffb2 	bl	8001010 <HAL_GetTick>
 80010ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010ae:	e012      	b.n	80010d6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010b0:	f7ff ffae 	bl	8001010 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	2b0a      	cmp	r3, #10
 80010bc:	d90b      	bls.n	80010d6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2205      	movs	r2, #5
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e09f      	b.n	8001216 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0e5      	beq.n	80010b0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	7e1b      	ldrb	r3, [r3, #24]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d108      	bne.n	80010fe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	e007      	b.n	800110e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	7e5b      	ldrb	r3, [r3, #25]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d108      	bne.n	8001128 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	e007      	b.n	8001138 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001136:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	7e9b      	ldrb	r3, [r3, #26]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d108      	bne.n	8001152 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0220 	orr.w	r2, r2, #32
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	e007      	b.n	8001162 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f022 0220 	bic.w	r2, r2, #32
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7edb      	ldrb	r3, [r3, #27]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d108      	bne.n	800117c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0210 	bic.w	r2, r2, #16
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e007      	b.n	800118c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0210 	orr.w	r2, r2, #16
 800118a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7f1b      	ldrb	r3, [r3, #28]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d108      	bne.n	80011a6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0208 	orr.w	r2, r2, #8
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e007      	b.n	80011b6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0208 	bic.w	r2, r2, #8
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7f5b      	ldrb	r3, [r3, #29]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0204 	orr.w	r2, r2, #4
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e007      	b.n	80011e0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0204 	bic.w	r2, r2, #4
 80011de:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	431a      	orrs	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	ea42 0103 	orr.w	r1, r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	1e5a      	subs	r2, r3, #1
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800121e:	b480      	push	{r7}
 8001220:	b087      	sub	sp, #28
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001234:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001236:	7cfb      	ldrb	r3, [r7, #19]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d003      	beq.n	8001244 <HAL_CAN_ConfigFilter+0x26>
 800123c:	7cfb      	ldrb	r3, [r7, #19]
 800123e:	2b02      	cmp	r3, #2
 8001240:	f040 80aa 	bne.w	8001398 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800124a:	f043 0201 	orr.w	r2, r3, #1
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	2201      	movs	r2, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d123      	bne.n	80012c6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	43db      	mvns	r3, r3
 8001288:	401a      	ands	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012a0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	3248      	adds	r2, #72	; 0x48
 80012a6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012ba:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012bc:	6979      	ldr	r1, [r7, #20]
 80012be:	3348      	adds	r3, #72	; 0x48
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	440b      	add	r3, r1
 80012c4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d122      	bne.n	8001314 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	431a      	orrs	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80012ee:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	3248      	adds	r2, #72	; 0x48
 80012f4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001308:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800130a:	6979      	ldr	r1, [r7, #20]
 800130c:	3348      	adds	r3, #72	; 0x48
 800130e:	00db      	lsls	r3, r3, #3
 8001310:	440b      	add	r3, r1
 8001312:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d109      	bne.n	8001330 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	43db      	mvns	r3, r3
 8001326:	401a      	ands	r2, r3
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800132e:	e007      	b.n	8001340 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	431a      	orrs	r2, r3
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d109      	bne.n	800135c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	43db      	mvns	r3, r3
 8001352:	401a      	ands	r2, r3
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800135a:	e007      	b.n	800136c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	6a1b      	ldr	r3, [r3, #32]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d107      	bne.n	8001384 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	431a      	orrs	r2, r3
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800138a:	f023 0201 	bic.w	r2, r3, #1
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	e006      	b.n	80013a6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
  }
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d12e      	bne.n	8001424 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2202      	movs	r2, #2
 80013ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f022 0201 	bic.w	r2, r2, #1
 80013dc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80013de:	f7ff fe17 	bl	8001010 <HAL_GetTick>
 80013e2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80013e4:	e012      	b.n	800140c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013e6:	f7ff fe13 	bl	8001010 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b0a      	cmp	r3, #10
 80013f2:	d90b      	bls.n	800140c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2205      	movs	r2, #5
 8001404:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e012      	b.n	8001432 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1e5      	bne.n	80013e6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	e006      	b.n	8001432 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
  }
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800143a:	b480      	push	{r7}
 800143c:	b087      	sub	sp, #28
 800143e:	af00      	add	r7, sp, #0
 8001440:	60f8      	str	r0, [r7, #12]
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d003      	beq.n	800145e <HAL_CAN_GetRxMessage+0x24>
 8001456:	7dfb      	ldrb	r3, [r7, #23]
 8001458:	2b02      	cmp	r3, #2
 800145a:	f040 80f3 	bne.w	8001644 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10e      	bne.n	8001482 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d116      	bne.n	80014a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e0e7      	b.n	8001652 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b00      	cmp	r3, #0
 800148e:	d107      	bne.n	80014a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0d8      	b.n	8001652 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	331b      	adds	r3, #27
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	4413      	add	r3, r2
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0204 	and.w	r2, r3, #4
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	331b      	adds	r3, #27
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	0d5b      	lsrs	r3, r3, #21
 80014ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	e00b      	b.n	80014f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	331b      	adds	r3, #27
 80014e0:	011b      	lsls	r3, r3, #4
 80014e2:	4413      	add	r3, r2
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	08db      	lsrs	r3, r3, #3
 80014e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	331b      	adds	r3, #27
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	4413      	add	r3, r2
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0202 	and.w	r2, r3, #2
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	331b      	adds	r3, #27
 800150e:	011b      	lsls	r3, r3, #4
 8001510:	4413      	add	r3, r2
 8001512:	3304      	adds	r3, #4
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 020f 	and.w	r2, r3, #15
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	331b      	adds	r3, #27
 8001526:	011b      	lsls	r3, r3, #4
 8001528:	4413      	add	r3, r2
 800152a:	3304      	adds	r3, #4
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0a1b      	lsrs	r3, r3, #8
 8001530:	b2da      	uxtb	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	331b      	adds	r3, #27
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	3304      	adds	r3, #4
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	0c1b      	lsrs	r3, r3, #16
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	b2da      	uxtb	r2, r3
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	4413      	add	r3, r2
 800156e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	0a1a      	lsrs	r2, r3, #8
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4413      	add	r3, r2
 8001588:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0c1a      	lsrs	r2, r3, #16
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3302      	adds	r3, #2
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	0e1a      	lsrs	r2, r3, #24
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	3303      	adds	r3, #3
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	011b      	lsls	r3, r3, #4
 80015ba:	4413      	add	r3, r2
 80015bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	3304      	adds	r3, #4
 80015c6:	b2d2      	uxtb	r2, r2
 80015c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	011b      	lsls	r3, r3, #4
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	0a1a      	lsrs	r2, r3, #8
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	3305      	adds	r3, #5
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	4413      	add	r3, r2
 80015ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	0c1a      	lsrs	r2, r3, #16
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	3306      	adds	r3, #6
 80015fa:	b2d2      	uxtb	r2, r2
 80015fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4413      	add	r3, r2
 8001608:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	0e1a      	lsrs	r2, r3, #24
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	3307      	adds	r3, #7
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d108      	bne.n	8001630 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 0220 	orr.w	r2, r2, #32
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	e007      	b.n	8001640 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	691a      	ldr	r2, [r3, #16]
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0220 	orr.w	r2, r2, #32
 800163e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001640:	2300      	movs	r3, #0
 8001642:	e006      	b.n	8001652 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
  }
}
 8001652:	4618      	mov	r0, r3
 8001654:	371c      	adds	r7, #28
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800165e:	b480      	push	{r7}
 8001660:	b085      	sub	sp, #20
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001672:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001674:	7afb      	ldrb	r3, [r7, #11]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d002      	beq.n	8001680 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800167a:	7afb      	ldrb	r3, [r7, #11]
 800167c:	2b02      	cmp	r3, #2
 800167e:	d10f      	bne.n	80016a0 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	e005      	b.n	80016a0 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80016a0:	68fb      	ldr	r3, [r7, #12]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d002      	beq.n	80016cc <HAL_CAN_ActivateNotification+0x1e>
 80016c6:	7bfb      	ldrb	r3, [r7, #15]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d109      	bne.n	80016e0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6959      	ldr	r1, [r3, #20]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	e006      	b.n	80016ee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
  }
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b08a      	sub	sp, #40	; 0x28
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001736:	6a3b      	ldr	r3, [r7, #32]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d07c      	beq.n	800183a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d023      	beq.n	8001792 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f983 	bl	8001a68 <HAL_CAN_TxMailbox0CompleteCallback>
 8001762:	e016      	b.n	8001792 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d004      	beq.n	8001778 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
 8001776:	e00c      	b.n	8001792 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	f003 0308 	and.w	r3, r3, #8
 800177e:	2b00      	cmp	r3, #0
 8001780:	d004      	beq.n	800178c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
 800178a:	e002      	b.n	8001792 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f989 	bl	8001aa4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d024      	beq.n	80017e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f963 	bl	8001a7c <HAL_CAN_TxMailbox1CompleteCallback>
 80017b6:	e016      	b.n	80017e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d004      	beq.n	80017cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ca:	e00c      	b.n	80017e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d004      	beq.n	80017e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
 80017de:	e002      	b.n	80017e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80017e0:	6878      	ldr	r0, [r7, #4]
 80017e2:	f000 f969 	bl	8001ab8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d024      	beq.n	800183a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d003      	beq.n	800180c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f943 	bl	8001a90 <HAL_CAN_TxMailbox2CompleteCallback>
 800180a:	e016      	b.n	800183a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d004      	beq.n	8001820 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
 800181e:	e00c      	b.n	800183a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d004      	beq.n	8001834 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
 8001832:	e002      	b.n	800183a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 f949 	bl	8001acc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800183a:	6a3b      	ldr	r3, [r7, #32]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00c      	beq.n	800185e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	2b00      	cmp	r3, #0
 800184c:	d007      	beq.n	800185e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001854:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2210      	movs	r2, #16
 800185c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00b      	beq.n	8001880 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0308 	and.w	r3, r3, #8
 800186e:	2b00      	cmp	r3, #0
 8001870:	d006      	beq.n	8001880 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2208      	movs	r2, #8
 8001878:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f93a 	bl	8001af4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d009      	beq.n	800189e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f921 	bl	8001ae0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00c      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2210      	movs	r2, #16
 80018c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80018c2:	6a3b      	ldr	r3, [r7, #32]
 80018c4:	f003 0320 	and.w	r3, r3, #32
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00b      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2208      	movs	r2, #8
 80018dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f91c 	bl	8001b1c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	f003 0303 	and.w	r3, r3, #3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f903 	bl	8001b08 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00b      	beq.n	8001924 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2210      	movs	r2, #16
 800191c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f906 	bl	8001b30 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d006      	beq.n	8001946 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2208      	movs	r2, #8
 800193e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f000 f8ff 	bl	8001b44 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d07b      	beq.n	8001a48 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f003 0304 	and.w	r3, r3, #4
 8001956:	2b00      	cmp	r3, #0
 8001958:	d072      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001960:	2b00      	cmp	r3, #0
 8001962:	d008      	beq.n	8001976 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001976:	6a3b      	ldr	r3, [r7, #32]
 8001978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001992:	6a3b      	ldr	r3, [r7, #32]
 8001994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d043      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d03e      	beq.n	8001a40 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019c8:	2b60      	cmp	r3, #96	; 0x60
 80019ca:	d02b      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x32a>
 80019cc:	2b60      	cmp	r3, #96	; 0x60
 80019ce:	d82e      	bhi.n	8001a2e <HAL_CAN_IRQHandler+0x334>
 80019d0:	2b50      	cmp	r3, #80	; 0x50
 80019d2:	d022      	beq.n	8001a1a <HAL_CAN_IRQHandler+0x320>
 80019d4:	2b50      	cmp	r3, #80	; 0x50
 80019d6:	d82a      	bhi.n	8001a2e <HAL_CAN_IRQHandler+0x334>
 80019d8:	2b40      	cmp	r3, #64	; 0x40
 80019da:	d019      	beq.n	8001a10 <HAL_CAN_IRQHandler+0x316>
 80019dc:	2b40      	cmp	r3, #64	; 0x40
 80019de:	d826      	bhi.n	8001a2e <HAL_CAN_IRQHandler+0x334>
 80019e0:	2b30      	cmp	r3, #48	; 0x30
 80019e2:	d010      	beq.n	8001a06 <HAL_CAN_IRQHandler+0x30c>
 80019e4:	2b30      	cmp	r3, #48	; 0x30
 80019e6:	d822      	bhi.n	8001a2e <HAL_CAN_IRQHandler+0x334>
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d002      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x2f8>
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	d005      	beq.n	80019fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80019f0:	e01d      	b.n	8001a2e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80019fa:	e019      	b.n	8001a30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	f043 0310 	orr.w	r3, r3, #16
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a04:	e014      	b.n	8001a30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f043 0320 	orr.w	r3, r3, #32
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a0e:	e00f      	b.n	8001a30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a18:	e00a      	b.n	8001a30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a22:	e005      	b.n	8001a30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001a2c:	e000      	b.n	8001a30 <HAL_CAN_IRQHandler+0x336>
            break;
 8001a2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	699a      	ldr	r2, [r3, #24]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001a3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2204      	movs	r2, #4
 8001a46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d008      	beq.n	8001a60 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f000 f87c 	bl	8001b58 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	60d3      	str	r3, [r2, #12]
}
 8001ba4:	bf00      	nop
 8001ba6:	3714      	adds	r7, #20
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <__NVIC_GetPriorityGrouping+0x18>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	f003 0307 	and.w	r3, r3, #7
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	db0b      	blt.n	8001bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	4907      	ldr	r1, [pc, #28]	; (8001c08 <__NVIC_EnableIRQ+0x38>)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	095b      	lsrs	r3, r3, #5
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	db0a      	blt.n	8001c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	490c      	ldr	r1, [pc, #48]	; (8001c58 <__NVIC_SetPriority+0x4c>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	0112      	lsls	r2, r2, #4
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c34:	e00a      	b.n	8001c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4908      	ldr	r1, [pc, #32]	; (8001c5c <__NVIC_SetPriority+0x50>)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	3b04      	subs	r3, #4
 8001c44:	0112      	lsls	r2, r2, #4
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	440b      	add	r3, r1
 8001c4a:	761a      	strb	r2, [r3, #24]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000e100 	.word	0xe000e100
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b089      	sub	sp, #36	; 0x24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f1c3 0307 	rsb	r3, r3, #7
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	bf28      	it	cs
 8001c7e:	2304      	movcs	r3, #4
 8001c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	3304      	adds	r3, #4
 8001c86:	2b06      	cmp	r3, #6
 8001c88:	d902      	bls.n	8001c90 <NVIC_EncodePriority+0x30>
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3b03      	subs	r3, #3
 8001c8e:	e000      	b.n	8001c92 <NVIC_EncodePriority+0x32>
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43da      	mvns	r2, r3
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ca8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb2:	43d9      	mvns	r1, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cb8:	4313      	orrs	r3, r2
         );
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3724      	adds	r7, #36	; 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cd8:	d301      	bcc.n	8001cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e00f      	b.n	8001cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <SysTick_Config+0x40>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cec:	f7ff ff8e 	bl	8001c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SysTick_Config+0x40>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cf6:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <SysTick_Config+0x40>)
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	e000e010 	.word	0xe000e010

08001d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff29 	bl	8001b6c <__NVIC_SetPriorityGrouping>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b086      	sub	sp, #24
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
 8001d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d34:	f7ff ff3e 	bl	8001bb4 <__NVIC_GetPriorityGrouping>
 8001d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f7ff ff8e 	bl	8001c60 <NVIC_EncodePriority>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff5d 	bl	8001c0c <__NVIC_SetPriority>
}
 8001d52:	bf00      	nop
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ff31 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b082      	sub	sp, #8
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff ffa2 	bl	8001cc8 <SysTick_Config>
 8001d84:	4603      	mov	r3, r0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b087      	sub	sp, #28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9e:	e148      	b.n	8002032 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2101      	movs	r1, #1
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 813a 	beq.w	800202c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_GPIO_Init+0x48>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d007      	beq.n	8001dd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dcc:	2b11      	cmp	r3, #17
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b12      	cmp	r3, #18
 8001dd6:	d130      	bne.n	8001e3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e0e:	2201      	movs	r2, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 0201 	and.w	r2, r3, #1
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	689a      	ldr	r2, [r3, #8]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0xea>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d123      	bne.n	8001ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	08da      	lsrs	r2, r3, #3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3208      	adds	r2, #8
 8001ebc:	6939      	ldr	r1, [r7, #16]
 8001ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0203 	and.w	r2, r3, #3
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8094 	beq.w	800202c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f04:	4b52      	ldr	r3, [pc, #328]	; (8002050 <HAL_GPIO_Init+0x2c0>)
 8001f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f08:	4a51      	ldr	r2, [pc, #324]	; (8002050 <HAL_GPIO_Init+0x2c0>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f10:	4b4f      	ldr	r3, [pc, #316]	; (8002050 <HAL_GPIO_Init+0x2c0>)
 8001f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	60bb      	str	r3, [r7, #8]
 8001f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f1c:	4a4d      	ldr	r2, [pc, #308]	; (8002054 <HAL_GPIO_Init+0x2c4>)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	3302      	adds	r3, #2
 8001f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	220f      	movs	r2, #15
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f46:	d00d      	beq.n	8001f64 <HAL_GPIO_Init+0x1d4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a43      	ldr	r2, [pc, #268]	; (8002058 <HAL_GPIO_Init+0x2c8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d007      	beq.n	8001f60 <HAL_GPIO_Init+0x1d0>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a42      	ldr	r2, [pc, #264]	; (800205c <HAL_GPIO_Init+0x2cc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_GPIO_Init+0x1cc>
 8001f58:	2302      	movs	r3, #2
 8001f5a:	e004      	b.n	8001f66 <HAL_GPIO_Init+0x1d6>
 8001f5c:	2307      	movs	r3, #7
 8001f5e:	e002      	b.n	8001f66 <HAL_GPIO_Init+0x1d6>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_GPIO_Init+0x1d6>
 8001f64:	2300      	movs	r3, #0
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	f002 0203 	and.w	r2, r2, #3
 8001f6c:	0092      	lsls	r2, r2, #2
 8001f6e:	4093      	lsls	r3, r2
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f76:	4937      	ldr	r1, [pc, #220]	; (8002054 <HAL_GPIO_Init+0x2c4>)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f84:	4b36      	ldr	r3, [pc, #216]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001fae:	4b2c      	ldr	r3, [pc, #176]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fd2:	4a23      	ldr	r2, [pc, #140]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ffc:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002026:	4a0e      	ldr	r2, [pc, #56]	; (8002060 <HAL_GPIO_Init+0x2d0>)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	3301      	adds	r3, #1
 8002030:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	fa22 f303 	lsr.w	r3, r2, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	f47f aeaf 	bne.w	8001da0 <HAL_GPIO_Init+0x10>
  }
}
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	40021000 	.word	0x40021000
 8002054:	40010000 	.word	0x40010000
 8002058:	48000400 	.word	0x48000400
 800205c:	48000800 	.word	0x48000800
 8002060:	40010400 	.word	0x40010400

08002064 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	887b      	ldrh	r3, [r7, #2]
 8002076:	4013      	ands	r3, r2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800207c:	2301      	movs	r3, #1
 800207e:	73fb      	strb	r3, [r7, #15]
 8002080:	e001      	b.n	8002086 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	807b      	strh	r3, [r7, #2]
 80020a0:	4613      	mov	r3, r2
 80020a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a4:	787b      	ldrb	r3, [r7, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020aa:	887a      	ldrh	r2, [r7, #2]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020b0:	e002      	b.n	80020b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020b2:	887a      	ldrh	r2, [r7, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	40007000 	.word	0x40007000

080020e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <HAL_PWREx_GetVoltageRange+0x18>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40007000 	.word	0x40007000

08002100 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800210e:	d130      	bne.n	8002172 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800211c:	d038      	beq.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800211e:	4b20      	ldr	r3, [pc, #128]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002126:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002128:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800212e:	4b1d      	ldr	r3, [pc, #116]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2232      	movs	r2, #50	; 0x32
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0c9b      	lsrs	r3, r3, #18
 8002140:	3301      	adds	r3, #1
 8002142:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002144:	e002      	b.n	800214c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3b01      	subs	r3, #1
 800214a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214c:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214e:	695b      	ldr	r3, [r3, #20]
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002154:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002158:	d102      	bne.n	8002160 <HAL_PWREx_ControlVoltageScaling+0x60>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f2      	bne.n	8002146 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002160:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002168:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216c:	d110      	bne.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e00f      	b.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002172:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800217a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800217e:	d007      	beq.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002188:	4a05      	ldr	r2, [pc, #20]	; (80021a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800218a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800218e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40007000 	.word	0x40007000
 80021a4:	2000000c 	.word	0x2000000c
 80021a8:	431bde83 	.word	0x431bde83

080021ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b088      	sub	sp, #32
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f000 bc11 	b.w	80029e2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c0:	4ba0      	ldr	r3, [pc, #640]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ca:	4b9e      	ldr	r3, [pc, #632]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0310 	and.w	r3, r3, #16
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80e4 	beq.w	80023aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_RCC_OscConfig+0x4c>
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2b0c      	cmp	r3, #12
 80021ec:	f040 808b 	bne.w	8002306 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	f040 8087 	bne.w	8002306 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021f8:	4b92      	ldr	r3, [pc, #584]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_OscConfig+0x64>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e3e8      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a1a      	ldr	r2, [r3, #32]
 8002214:	4b8b      	ldr	r3, [pc, #556]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d004      	beq.n	800222a <HAL_RCC_OscConfig+0x7e>
 8002220:	4b88      	ldr	r3, [pc, #544]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002228:	e005      	b.n	8002236 <HAL_RCC_OscConfig+0x8a>
 800222a:	4b86      	ldr	r3, [pc, #536]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800222c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002236:	4293      	cmp	r3, r2
 8002238:	d223      	bcs.n	8002282 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4618      	mov	r0, r3
 8002240:	f000 fd7a 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e3c9      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224e:	4b7d      	ldr	r3, [pc, #500]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7c      	ldr	r2, [pc, #496]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	4b7a      	ldr	r3, [pc, #488]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4977      	ldr	r1, [pc, #476]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800226c:	4b75      	ldr	r3, [pc, #468]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	4972      	ldr	r1, [pc, #456]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
 8002280:	e025      	b.n	80022ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002282:	4b70      	ldr	r3, [pc, #448]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a6f      	ldr	r2, [pc, #444]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002288:	f043 0308 	orr.w	r3, r3, #8
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b6d      	ldr	r3, [pc, #436]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	496a      	ldr	r1, [pc, #424]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800229c:	4313      	orrs	r3, r2
 800229e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a0:	4b68      	ldr	r3, [pc, #416]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	69db      	ldr	r3, [r3, #28]
 80022ac:	021b      	lsls	r3, r3, #8
 80022ae:	4965      	ldr	r1, [pc, #404]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 fd3a 	bl	8002d38 <RCC_SetFlashLatencyFromMSIRange>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e389      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ce:	f000 fc6f 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 80022d2:	4602      	mov	r2, r0
 80022d4:	4b5b      	ldr	r3, [pc, #364]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	091b      	lsrs	r3, r3, #4
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	495a      	ldr	r1, [pc, #360]	; (8002448 <HAL_RCC_OscConfig+0x29c>)
 80022e0:	5ccb      	ldrb	r3, [r1, r3]
 80022e2:	f003 031f 	and.w	r3, r3, #31
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	4a58      	ldr	r2, [pc, #352]	; (800244c <HAL_RCC_OscConfig+0x2a0>)
 80022ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022ee:	4b58      	ldr	r3, [pc, #352]	; (8002450 <HAL_RCC_OscConfig+0x2a4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fe3c 	bl	8000f70 <HAL_InitTick>
 80022f8:	4603      	mov	r3, r0
 80022fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d052      	beq.n	80023a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	e36d      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d032      	beq.n	8002374 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800230e:	4b4d      	ldr	r3, [pc, #308]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a4c      	ldr	r2, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800231a:	f7fe fe79 	bl	8001010 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002322:	f7fe fe75 	bl	8001010 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e356      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002334:	4b43      	ldr	r3, [pc, #268]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002340:	4b40      	ldr	r3, [pc, #256]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a3f      	ldr	r2, [pc, #252]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002346:	f043 0308 	orr.w	r3, r3, #8
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	493a      	ldr	r1, [pc, #232]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800235e:	4b39      	ldr	r3, [pc, #228]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	4935      	ldr	r1, [pc, #212]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
 8002372:	e01a      	b.n	80023aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002374:	4b33      	ldr	r3, [pc, #204]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a32      	ldr	r2, [pc, #200]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002380:	f7fe fe46 	bl	8001010 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002388:	f7fe fe42 	bl	8001010 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e323      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800239a:	4b2a      	ldr	r3, [pc, #168]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x1dc>
 80023a6:	e000      	b.n	80023aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d073      	beq.n	800249e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_OscConfig+0x21c>
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d10e      	bne.n	80023e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d10b      	bne.n	80023e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	4b1e      	ldr	r3, [pc, #120]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d063      	beq.n	800249c <HAL_RCC_OscConfig+0x2f0>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d15f      	bne.n	800249c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e300      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e8:	d106      	bne.n	80023f8 <HAL_RCC_OscConfig+0x24c>
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a15      	ldr	r2, [pc, #84]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	e01d      	b.n	8002434 <HAL_RCC_OscConfig+0x288>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x270>
 8002402:	4b10      	ldr	r3, [pc, #64]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a0f      	ldr	r2, [pc, #60]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a0c      	ldr	r2, [pc, #48]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0x288>
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a08      	ldr	r2, [pc, #32]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 8002422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a05      	ldr	r2, [pc, #20]	; (8002444 <HAL_RCC_OscConfig+0x298>)
 800242e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002432:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d01b      	beq.n	8002474 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fde8 	bl	8001010 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002442:	e010      	b.n	8002466 <HAL_RCC_OscConfig+0x2ba>
 8002444:	40021000 	.word	0x40021000
 8002448:	08004574 	.word	0x08004574
 800244c:	2000000c 	.word	0x2000000c
 8002450:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe fddc 	bl	8001010 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e2bd      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002466:	4baf      	ldr	r3, [pc, #700]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d0f0      	beq.n	8002454 <HAL_RCC_OscConfig+0x2a8>
 8002472:	e014      	b.n	800249e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7fe fdcc 	bl	8001010 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800247c:	f7fe fdc8 	bl	8001010 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b64      	cmp	r3, #100	; 0x64
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e2a9      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800248e:	4ba5      	ldr	r3, [pc, #660]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x2d0>
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800249c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d060      	beq.n	800256c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d005      	beq.n	80024bc <HAL_RCC_OscConfig+0x310>
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d119      	bne.n	80024ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d116      	bne.n	80024ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024bc:	4b99      	ldr	r3, [pc, #612]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_OscConfig+0x328>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e286      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b93      	ldr	r3, [pc, #588]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	4990      	ldr	r1, [pc, #576]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024e8:	e040      	b.n	800256c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d023      	beq.n	800253a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f2:	4b8c      	ldr	r3, [pc, #560]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a8b      	ldr	r2, [pc, #556]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fe:	f7fe fd87 	bl	8001010 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002506:	f7fe fd83 	bl	8001010 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e264      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002518:	4b82      	ldr	r3, [pc, #520]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	497c      	ldr	r1, [pc, #496]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
 8002538:	e018      	b.n	800256c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253a:	4b7a      	ldr	r3, [pc, #488]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a79      	ldr	r2, [pc, #484]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7fe fd63 	bl	8001010 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800254e:	f7fe fd5f 	bl	8001010 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e240      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002560:	4b70      	ldr	r3, [pc, #448]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f0      	bne.n	800254e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d03c      	beq.n	80025f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01c      	beq.n	80025ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002580:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002586:	4a67      	ldr	r2, [pc, #412]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002590:	f7fe fd3e 	bl	8001010 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002598:	f7fe fd3a 	bl	8001010 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e21b      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025aa:	4b5e      	ldr	r3, [pc, #376]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80025ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0ef      	beq.n	8002598 <HAL_RCC_OscConfig+0x3ec>
 80025b8:	e01b      	b.n	80025f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ba:	4b5a      	ldr	r3, [pc, #360]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80025bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c0:	4a58      	ldr	r2, [pc, #352]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80025c2:	f023 0301 	bic.w	r3, r3, #1
 80025c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7fe fd21 	bl	8001010 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d2:	f7fe fd1d 	bl	8001010 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e1fe      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e4:	4b4f      	ldr	r3, [pc, #316]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80025e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1ef      	bne.n	80025d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80a6 	beq.w	800274c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002600:	2300      	movs	r3, #0
 8002602:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002604:	4b47      	ldr	r3, [pc, #284]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10d      	bne.n	800262c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002610:	4b44      	ldr	r3, [pc, #272]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002614:	4a43      	ldr	r2, [pc, #268]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261a:	6593      	str	r3, [r2, #88]	; 0x58
 800261c:	4b41      	ldr	r3, [pc, #260]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002628:	2301      	movs	r3, #1
 800262a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800262c:	4b3e      	ldr	r3, [pc, #248]	; (8002728 <HAL_RCC_OscConfig+0x57c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d118      	bne.n	800266a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <HAL_RCC_OscConfig+0x57c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a3a      	ldr	r2, [pc, #232]	; (8002728 <HAL_RCC_OscConfig+0x57c>)
 800263e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002642:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002644:	f7fe fce4 	bl	8001010 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800264c:	f7fe fce0 	bl	8001010 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e1c1      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800265e:	4b32      	ldr	r3, [pc, #200]	; (8002728 <HAL_RCC_OscConfig+0x57c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d108      	bne.n	8002684 <HAL_RCC_OscConfig+0x4d8>
 8002672:	4b2c      	ldr	r3, [pc, #176]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002682:	e024      	b.n	80026ce <HAL_RCC_OscConfig+0x522>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b05      	cmp	r3, #5
 800268a:	d110      	bne.n	80026ae <HAL_RCC_OscConfig+0x502>
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	4a24      	ldr	r2, [pc, #144]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800269c:	4b21      	ldr	r3, [pc, #132]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 800269e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a2:	4a20      	ldr	r2, [pc, #128]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ac:	e00f      	b.n	80026ce <HAL_RCC_OscConfig+0x522>
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	4a1b      	ldr	r2, [pc, #108]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c4:	4a17      	ldr	r2, [pc, #92]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026c6:	f023 0304 	bic.w	r3, r3, #4
 80026ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d016      	beq.n	8002704 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe fc9b 	bl	8001010 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe fc97 	bl	8001010 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e176      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_OscConfig+0x578>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ed      	beq.n	80026de <HAL_RCC_OscConfig+0x532>
 8002702:	e01a      	b.n	800273a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe fc84 	bl	8001010 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800270a:	e00f      	b.n	800272c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7fe fc80 	bl	8001010 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d906      	bls.n	800272c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e15f      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800272c:	4baa      	ldr	r3, [pc, #680]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 800272e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1e8      	bne.n	800270c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273a:	7ffb      	ldrb	r3, [r7, #31]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d105      	bne.n	800274c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002740:	4ba5      	ldr	r3, [pc, #660]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	4aa4      	ldr	r2, [pc, #656]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d03c      	beq.n	80027d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2b00      	cmp	r3, #0
 800275e:	d01c      	beq.n	800279a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002760:	4b9d      	ldr	r3, [pc, #628]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002766:	4a9c      	ldr	r2, [pc, #624]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7fe fc4e 	bl	8001010 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002778:	f7fe fc4a 	bl	8001010 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e12b      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800278a:	4b93      	ldr	r3, [pc, #588]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 800278c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ef      	beq.n	8002778 <HAL_RCC_OscConfig+0x5cc>
 8002798:	e01b      	b.n	80027d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800279a:	4b8f      	ldr	r3, [pc, #572]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 800279c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a0:	4a8d      	ldr	r2, [pc, #564]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 80027a2:	f023 0301 	bic.w	r3, r3, #1
 80027a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7fe fc31 	bl	8001010 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027b0:	e008      	b.n	80027c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b2:	f7fe fc2d 	bl	8001010 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d901      	bls.n	80027c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e10e      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027c4:	4b84      	ldr	r3, [pc, #528]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 80027c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1ef      	bne.n	80027b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 8102 	beq.w	80029e0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	f040 80c5 	bne.w	8002970 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027e6:	4b7c      	ldr	r3, [pc, #496]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f003 0203 	and.w	r2, r3, #3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d12c      	bne.n	8002854 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	3b01      	subs	r3, #1
 8002806:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d123      	bne.n	8002854 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002816:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d11b      	bne.n	8002854 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002826:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d113      	bne.n	8002854 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	3b01      	subs	r3, #1
 800283a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d109      	bne.n	8002854 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	085b      	lsrs	r3, r3, #1
 800284c:	3b01      	subs	r3, #1
 800284e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d067      	beq.n	8002924 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b0c      	cmp	r3, #12
 8002858:	d062      	beq.n	8002920 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800285a:	4b5f      	ldr	r3, [pc, #380]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0bb      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800286a:	4b5b      	ldr	r3, [pc, #364]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a5a      	ldr	r2, [pc, #360]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002870:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002874:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002876:	f7fe fbcb 	bl	8001010 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe fbc7 	bl	8001010 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e0a8      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	4b51      	ldr	r3, [pc, #324]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f0      	bne.n	800287e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289c:	4b4e      	ldr	r3, [pc, #312]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	4b4e      	ldr	r3, [pc, #312]	; (80029dc <HAL_RCC_OscConfig+0x830>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028ac:	3a01      	subs	r2, #1
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	4311      	orrs	r1, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028b6:	0212      	lsls	r2, r2, #8
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028be:	0852      	lsrs	r2, r2, #1
 80028c0:	3a01      	subs	r2, #1
 80028c2:	0552      	lsls	r2, r2, #21
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028ca:	0852      	lsrs	r2, r2, #1
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0652      	lsls	r2, r2, #25
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028d6:	06d2      	lsls	r2, r2, #27
 80028d8:	430a      	orrs	r2, r1
 80028da:	493f      	ldr	r1, [pc, #252]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028e0:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a3c      	ldr	r2, [pc, #240]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ec:	4b3a      	ldr	r3, [pc, #232]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a39      	ldr	r2, [pc, #228]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f8:	f7fe fb8a 	bl	8001010 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fb86 	bl	8001010 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e067      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800291e:	e05f      	b.n	80029e0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e05e      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002924:	4b2c      	ldr	r3, [pc, #176]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d157      	bne.n	80029e0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002930:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a28      	ldr	r2, [pc, #160]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800293c:	4b26      	ldr	r3, [pc, #152]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a25      	ldr	r2, [pc, #148]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002946:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002948:	f7fe fb62 	bl	8001010 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fb5e 	bl	8001010 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e03f      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d0f0      	beq.n	8002950 <HAL_RCC_OscConfig+0x7a4>
 800296e:	e037      	b.n	80029e0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b0c      	cmp	r3, #12
 8002974:	d02d      	beq.n	80029d2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002976:	4b18      	ldr	r3, [pc, #96]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 800297c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002980:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002982:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d105      	bne.n	800299a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	4a11      	ldr	r2, [pc, #68]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 8002994:	f023 0303 	bic.w	r3, r3, #3
 8002998:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	4a0e      	ldr	r2, [pc, #56]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 80029a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80029a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe fb31 	bl	8001010 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe fb2d 	bl	8001010 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e00e      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c4:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <HAL_RCC_OscConfig+0x82c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x806>
 80029d0:	e006      	b.n	80029e0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e005      	b.n	80029e2 <HAL_RCC_OscConfig+0x836>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop

080029ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0c8      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a00:	4b66      	ldr	r3, [pc, #408]	; (8002b9c <HAL_RCC_ClockConfig+0x1b0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d910      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0e:	4b63      	ldr	r3, [pc, #396]	; (8002b9c <HAL_RCC_ClockConfig+0x1b0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f023 0207 	bic.w	r2, r3, #7
 8002a16:	4961      	ldr	r1, [pc, #388]	; (8002b9c <HAL_RCC_ClockConfig+0x1b0>)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b5f      	ldr	r3, [pc, #380]	; (8002b9c <HAL_RCC_ClockConfig+0x1b0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b0      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d04c      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a44:	4b56      	ldr	r3, [pc, #344]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d121      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e09e      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5c:	4b50      	ldr	r3, [pc, #320]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d115      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e092      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a74:	4b4a      	ldr	r3, [pc, #296]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e086      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a84:	4b46      	ldr	r3, [pc, #280]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e07e      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a94:	4b42      	ldr	r3, [pc, #264]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 0203 	bic.w	r2, r3, #3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	493f      	ldr	r1, [pc, #252]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa6:	f7fe fab3 	bl	8001010 <HAL_GetTick>
 8002aaa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aae:	f7fe faaf 	bl	8001010 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e066      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac4:	4b36      	ldr	r3, [pc, #216]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 020c 	and.w	r2, r3, #12
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d1eb      	bne.n	8002aae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	492c      	ldr	r1, [pc, #176]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_RCC_ClockConfig+0x1b0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d210      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_RCC_ClockConfig+0x1b0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 0207 	bic.w	r2, r3, #7
 8002b0a:	4924      	ldr	r1, [pc, #144]	; (8002b9c <HAL_RCC_ClockConfig+0x1b0>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <HAL_RCC_ClockConfig+0x1b0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e036      	b.n	8002b92 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4918      	ldr	r1, [pc, #96]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b4e:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4910      	ldr	r1, [pc, #64]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b62:	f000 f825 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <HAL_RCC_ClockConfig+0x1b4>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	490c      	ldr	r1, [pc, #48]	; (8002ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7fe f9f2 	bl	8000f70 <HAL_InitTick>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b90:	7afb      	ldrb	r3, [r7, #11]
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40022000 	.word	0x40022000
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	08004574 	.word	0x08004574
 8002ba8:	2000000c 	.word	0x2000000c
 8002bac:	20000010 	.word	0x20000010

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbe:	4b3e      	ldr	r3, [pc, #248]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d121      	bne.n	8002c22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d11e      	bne.n	8002c22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002be4:	4b34      	ldr	r3, [pc, #208]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0308 	and.w	r3, r3, #8
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d107      	bne.n	8002c00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bf0:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bf6:	0a1b      	lsrs	r3, r3, #8
 8002bf8:	f003 030f 	and.w	r3, r3, #15
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	e005      	b.n	8002c0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c00:	4b2d      	ldr	r3, [pc, #180]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c0c:	4a2b      	ldr	r2, [pc, #172]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d10d      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b04      	cmp	r3, #4
 8002c26:	d102      	bne.n	8002c2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	e004      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d101      	bne.n	8002c38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c34:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	2b0c      	cmp	r3, #12
 8002c3c:	d134      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c3e:	4b1e      	ldr	r3, [pc, #120]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d003      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0xac>
 8002c54:	e005      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c58:	617b      	str	r3, [r7, #20]
      break;
 8002c5a:	e005      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c5e:	617b      	str	r3, [r7, #20]
      break;
 8002c60:	e002      	b.n	8002c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	617b      	str	r3, [r7, #20]
      break;
 8002c66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c68:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	091b      	lsrs	r3, r3, #4
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	3301      	adds	r3, #1
 8002c74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c76:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	0a1b      	lsrs	r3, r3, #8
 8002c7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	fb02 f203 	mul.w	r2, r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	0e5b      	lsrs	r3, r3, #25
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	0800458c 	.word	0x0800458c
 8002cc0:	00f42400 	.word	0x00f42400
 8002cc4:	007a1200 	.word	0x007a1200

08002cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b03      	ldr	r3, [pc, #12]	; (8002cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	2000000c 	.word	0x2000000c

08002ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ce4:	f7ff fff0 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	0a1b      	lsrs	r3, r3, #8
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	4904      	ldr	r1, [pc, #16]	; (8002d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cf6:	5ccb      	ldrb	r3, [r1, r3]
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	08004584 	.word	0x08004584

08002d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d10:	f7ff ffda 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b06      	ldr	r3, [pc, #24]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	0adb      	lsrs	r3, r3, #11
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4904      	ldr	r1, [pc, #16]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	08004584 	.word	0x08004584

08002d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d44:	4b2a      	ldr	r3, [pc, #168]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d50:	f7ff f9c8 	bl	80020e4 <HAL_PWREx_GetVoltageRange>
 8002d54:	6178      	str	r0, [r7, #20]
 8002d56:	e014      	b.n	8002d82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d58:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	4a24      	ldr	r2, [pc, #144]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6593      	str	r3, [r2, #88]	; 0x58
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d70:	f7ff f9b8 	bl	80020e4 <HAL_PWREx_GetVoltageRange>
 8002d74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d88:	d10b      	bne.n	8002da2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2b80      	cmp	r3, #128	; 0x80
 8002d8e:	d919      	bls.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2ba0      	cmp	r3, #160	; 0xa0
 8002d94:	d902      	bls.n	8002d9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d96:	2302      	movs	r3, #2
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	e013      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	e010      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d902      	bls.n	8002dae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002da8:	2303      	movs	r3, #3
 8002daa:	613b      	str	r3, [r7, #16]
 8002dac:	e00a      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b80      	cmp	r3, #128	; 0x80
 8002db2:	d102      	bne.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002db4:	2302      	movs	r3, #2
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	e004      	b.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b70      	cmp	r3, #112	; 0x70
 8002dbe:	d101      	bne.n	8002dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002dc4:	4b0b      	ldr	r3, [pc, #44]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 0207 	bic.w	r2, r3, #7
 8002dcc:	4909      	ldr	r1, [pc, #36]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dd4:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40022000 	.word	0x40022000

08002df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e00:	2300      	movs	r3, #0
 8002e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e04:	2300      	movs	r3, #0
 8002e06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d031      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e1c:	d01a      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e22:	d814      	bhi.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d009      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e2c:	d10f      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e2e:	4bac      	ldr	r3, [pc, #688]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	4aab      	ldr	r2, [pc, #684]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e38:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e3a:	e00c      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f9dc 	bl	8003200 <RCCEx_PLLSAI1_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e4c:	e003      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	74fb      	strb	r3, [r7, #19]
      break;
 8002e52:	e000      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e56:	7cfb      	ldrb	r3, [r7, #19]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e5c:	4ba0      	ldr	r3, [pc, #640]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6a:	499d      	ldr	r1, [pc, #628]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e72:	e001      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e74:	7cfb      	ldrb	r3, [r7, #19]
 8002e76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8099 	beq.w	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e8a:	4b95      	ldr	r3, [pc, #596]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea0:	4b8f      	ldr	r3, [pc, #572]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	4a8e      	ldr	r2, [pc, #568]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8002eac:	4b8c      	ldr	r3, [pc, #560]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ebc:	4b89      	ldr	r3, [pc, #548]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a88      	ldr	r2, [pc, #544]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ec8:	f7fe f8a2 	bl	8001010 <HAL_GetTick>
 8002ecc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ece:	e009      	b.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed0:	f7fe f89e 	bl	8001010 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d902      	bls.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ee2:	e005      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ee4:	4b7f      	ldr	r3, [pc, #508]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0ef      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d155      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ef6:	4b7a      	ldr	r3, [pc, #488]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01e      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d019      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f12:	4b73      	ldr	r3, [pc, #460]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f1e:	4b70      	ldr	r3, [pc, #448]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	4a6e      	ldr	r2, [pc, #440]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f2e:	4b6c      	ldr	r3, [pc, #432]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f34:	4a6a      	ldr	r2, [pc, #424]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f3e:	4a68      	ldr	r2, [pc, #416]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d016      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f50:	f7fe f85e 	bl	8001010 <HAL_GetTick>
 8002f54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f56:	e00b      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f58:	f7fe f85a 	bl	8001010 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d902      	bls.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	74fb      	strb	r3, [r7, #19]
            break;
 8002f6e:	e006      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f70:	4b5b      	ldr	r3, [pc, #364]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0ec      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f7e:	7cfb      	ldrb	r3, [r7, #19]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f84:	4b56      	ldr	r3, [pc, #344]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f92:	4953      	ldr	r1, [pc, #332]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f9a:	e004      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f9c:	7cfb      	ldrb	r3, [r7, #19]
 8002f9e:	74bb      	strb	r3, [r7, #18]
 8002fa0:	e001      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa6:	7c7b      	ldrb	r3, [r7, #17]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fac:	4b4c      	ldr	r3, [pc, #304]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	4a4b      	ldr	r2, [pc, #300]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fc4:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f023 0203 	bic.w	r2, r3, #3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4943      	ldr	r1, [pc, #268]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00a      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fe6:	4b3e      	ldr	r3, [pc, #248]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fec:	f023 020c 	bic.w	r2, r3, #12
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	493a      	ldr	r1, [pc, #232]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0320 	and.w	r3, r3, #32
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003008:	4b35      	ldr	r3, [pc, #212]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	4932      	ldr	r1, [pc, #200]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00a      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800302a:	4b2d      	ldr	r3, [pc, #180]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800302c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003030:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003038:	4929      	ldr	r1, [pc, #164]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00a      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	4921      	ldr	r1, [pc, #132]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800306e:	4b1c      	ldr	r3, [pc, #112]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003074:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	4918      	ldr	r1, [pc, #96]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003090:	4b13      	ldr	r3, [pc, #76]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309e:	4910      	ldr	r1, [pc, #64]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d02c      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b2:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	4907      	ldr	r1, [pc, #28]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d0:	d10a      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d2:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	4a02      	ldr	r2, [pc, #8]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030dc:	60d3      	str	r3, [r2, #12]
 80030de:	e015      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x314>
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030f0:	d10c      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2101      	movs	r1, #1
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 f881 	bl	8003200 <RCCEx_PLLSAI1_Config>
 80030fe:	4603      	mov	r3, r0
 8003100:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003102:	7cfb      	ldrb	r3, [r7, #19]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d028      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800311a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	492d      	ldr	r1, [pc, #180]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003136:	d106      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003138:	4b28      	ldr	r3, [pc, #160]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a27      	ldr	r2, [pc, #156]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800313e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003142:	60d3      	str	r3, [r2, #12]
 8003144:	e011      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800314e:	d10c      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3304      	adds	r3, #4
 8003154:	2101      	movs	r1, #1
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f852 	bl	8003200 <RCCEx_PLLSAI1_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003166:	7cfb      	ldrb	r3, [r7, #19]
 8003168:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01c      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003176:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003184:	4915      	ldr	r1, [pc, #84]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003194:	d10c      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3304      	adds	r3, #4
 800319a:	2102      	movs	r1, #2
 800319c:	4618      	mov	r0, r3
 800319e:	f000 f82f 	bl	8003200 <RCCEx_PLLSAI1_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031bc:	4b07      	ldr	r3, [pc, #28]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ca:	4904      	ldr	r1, [pc, #16]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000

080031e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a04      	ldr	r2, [pc, #16]	; (80031fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80031ea:	f043 0304 	orr.w	r3, r3, #4
 80031ee:	6013      	str	r3, [r2, #0]
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40021000 	.word	0x40021000

08003200 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800320e:	4b74      	ldr	r3, [pc, #464]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d018      	beq.n	800324c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800321a:	4b71      	ldr	r3, [pc, #452]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0203 	and.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d10d      	bne.n	8003246 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
       ||
 800322e:	2b00      	cmp	r3, #0
 8003230:	d009      	beq.n	8003246 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003232:	4b6b      	ldr	r3, [pc, #428]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	1c5a      	adds	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	685b      	ldr	r3, [r3, #4]
       ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d047      	beq.n	80032d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
 800324a:	e044      	b.n	80032d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b03      	cmp	r3, #3
 8003252:	d018      	beq.n	8003286 <RCCEx_PLLSAI1_Config+0x86>
 8003254:	2b03      	cmp	r3, #3
 8003256:	d825      	bhi.n	80032a4 <RCCEx_PLLSAI1_Config+0xa4>
 8003258:	2b01      	cmp	r3, #1
 800325a:	d002      	beq.n	8003262 <RCCEx_PLLSAI1_Config+0x62>
 800325c:	2b02      	cmp	r3, #2
 800325e:	d009      	beq.n	8003274 <RCCEx_PLLSAI1_Config+0x74>
 8003260:	e020      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003262:	4b5f      	ldr	r3, [pc, #380]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d11d      	bne.n	80032aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003272:	e01a      	b.n	80032aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003274:	4b5a      	ldr	r3, [pc, #360]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327c:	2b00      	cmp	r3, #0
 800327e:	d116      	bne.n	80032ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003284:	e013      	b.n	80032ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003286:	4b56      	ldr	r3, [pc, #344]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10f      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003292:	4b53      	ldr	r3, [pc, #332]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d109      	bne.n	80032b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032a2:	e006      	b.n	80032b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
      break;
 80032a8:	e004      	b.n	80032b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032aa:	bf00      	nop
 80032ac:	e002      	b.n	80032b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10d      	bne.n	80032d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032ba:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6819      	ldr	r1, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	430b      	orrs	r3, r1
 80032d0:	4943      	ldr	r1, [pc, #268]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d17c      	bne.n	80033d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032dc:	4b40      	ldr	r3, [pc, #256]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a3f      	ldr	r2, [pc, #252]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032e8:	f7fd fe92 	bl	8001010 <HAL_GetTick>
 80032ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032ee:	e009      	b.n	8003304 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032f0:	f7fd fe8e 	bl	8001010 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d902      	bls.n	8003304 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	73fb      	strb	r3, [r7, #15]
        break;
 8003302:	e005      	b.n	8003310 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003304:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ef      	bne.n	80032f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d15f      	bne.n	80033d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d110      	bne.n	800333e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800331c:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003324:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6892      	ldr	r2, [r2, #8]
 800332c:	0211      	lsls	r1, r2, #8
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	68d2      	ldr	r2, [r2, #12]
 8003332:	06d2      	lsls	r2, r2, #27
 8003334:	430a      	orrs	r2, r1
 8003336:	492a      	ldr	r1, [pc, #168]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003338:	4313      	orrs	r3, r2
 800333a:	610b      	str	r3, [r1, #16]
 800333c:	e027      	b.n	800338e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d112      	bne.n	800336a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003344:	4b26      	ldr	r3, [pc, #152]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800334c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6892      	ldr	r2, [r2, #8]
 8003354:	0211      	lsls	r1, r2, #8
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6912      	ldr	r2, [r2, #16]
 800335a:	0852      	lsrs	r2, r2, #1
 800335c:	3a01      	subs	r2, #1
 800335e:	0552      	lsls	r2, r2, #21
 8003360:	430a      	orrs	r2, r1
 8003362:	491f      	ldr	r1, [pc, #124]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003364:	4313      	orrs	r3, r2
 8003366:	610b      	str	r3, [r1, #16]
 8003368:	e011      	b.n	800338e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003372:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6892      	ldr	r2, [r2, #8]
 800337a:	0211      	lsls	r1, r2, #8
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6952      	ldr	r2, [r2, #20]
 8003380:	0852      	lsrs	r2, r2, #1
 8003382:	3a01      	subs	r2, #1
 8003384:	0652      	lsls	r2, r2, #25
 8003386:	430a      	orrs	r2, r1
 8003388:	4915      	ldr	r1, [pc, #84]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800338a:	4313      	orrs	r3, r2
 800338c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800338e:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a13      	ldr	r2, [pc, #76]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003394:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003398:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339a:	f7fd fe39 	bl	8001010 <HAL_GetTick>
 800339e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033a0:	e009      	b.n	80033b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033a2:	f7fd fe35 	bl	8001010 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d902      	bls.n	80033b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	73fb      	strb	r3, [r7, #15]
          break;
 80033b4:	e005      	b.n	80033c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0ef      	beq.n	80033a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80033c2:	7bfb      	ldrb	r3, [r7, #15]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	4903      	ldr	r1, [pc, #12]	; (80033e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000

080033e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e040      	b.n	8003478 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd fc7e 	bl	8000d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	; 0x24
 8003410:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0201 	bic.w	r2, r2, #1
 8003420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8c0 	bl	80035a8 <UART_SetConfig>
 8003428:	4603      	mov	r3, r0
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e022      	b.n	8003478 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d002      	beq.n	8003440 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fac0 	bl	80039c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800344e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800345e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f000 fb47 	bl	8003b04 <UART_CheckIdleState>
 8003476:	4603      	mov	r3, r0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08a      	sub	sp, #40	; 0x28
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	4613      	mov	r3, r2
 800348e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003494:	2b20      	cmp	r3, #32
 8003496:	f040 8082 	bne.w	800359e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <HAL_UART_Transmit+0x26>
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e07a      	b.n	80035a0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_UART_Transmit+0x38>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e073      	b.n	80035a0 <HAL_UART_Transmit+0x120>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2221      	movs	r2, #33	; 0x21
 80034cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ce:	f7fd fd9f 	bl	8001010 <HAL_GetTick>
 80034d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	88fa      	ldrh	r2, [r7, #6]
 80034d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	88fa      	ldrh	r2, [r7, #6]
 80034e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034ec:	d108      	bne.n	8003500 <HAL_UART_Transmit+0x80>
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d104      	bne.n	8003500 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	61bb      	str	r3, [r7, #24]
 80034fe:	e003      	b.n	8003508 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003504:	2300      	movs	r3, #0
 8003506:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003510:	e02d      	b.n	800356e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	2180      	movs	r1, #128	; 0x80
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 fb3a 	bl	8003b96 <UART_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e039      	b.n	80035a0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10b      	bne.n	800354a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	881a      	ldrh	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800353e:	b292      	uxth	r2, r2
 8003540:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	3302      	adds	r3, #2
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	e008      	b.n	800355c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	b292      	uxth	r2, r2
 8003554:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	3301      	adds	r3, #1
 800355a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003574:	b29b      	uxth	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1cb      	bne.n	8003512 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2200      	movs	r2, #0
 8003582:	2140      	movs	r1, #64	; 0x40
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 fb06 	bl	8003b96 <UART_WaitOnFlagUntilTimeout>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e005      	b.n	80035a0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	e000      	b.n	80035a0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800359e:	2302      	movs	r3, #2
  }
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3720      	adds	r7, #32
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a8:	b5b0      	push	{r4, r5, r7, lr}
 80035aa:	b088      	sub	sp, #32
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4baf      	ldr	r3, [pc, #700]	; (8003890 <UART_SetConfig+0x2e8>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	69f9      	ldr	r1, [r7, #28]
 80035dc:	430b      	orrs	r3, r1
 80035de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4aa4      	ldr	r2, [pc, #656]	; (8003894 <UART_SetConfig+0x2ec>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	69fa      	ldr	r2, [r7, #28]
 800360c:	4313      	orrs	r3, r2
 800360e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69fa      	ldr	r2, [r7, #28]
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a9b      	ldr	r2, [pc, #620]	; (8003898 <UART_SetConfig+0x2f0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d121      	bne.n	8003672 <UART_SetConfig+0xca>
 800362e:	4b9b      	ldr	r3, [pc, #620]	; (800389c <UART_SetConfig+0x2f4>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003634:	f003 0303 	and.w	r3, r3, #3
 8003638:	2b03      	cmp	r3, #3
 800363a:	d817      	bhi.n	800366c <UART_SetConfig+0xc4>
 800363c:	a201      	add	r2, pc, #4	; (adr r2, 8003644 <UART_SetConfig+0x9c>)
 800363e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003642:	bf00      	nop
 8003644:	08003655 	.word	0x08003655
 8003648:	08003661 	.word	0x08003661
 800364c:	0800365b 	.word	0x0800365b
 8003650:	08003667 	.word	0x08003667
 8003654:	2301      	movs	r3, #1
 8003656:	76fb      	strb	r3, [r7, #27]
 8003658:	e070      	b.n	800373c <UART_SetConfig+0x194>
 800365a:	2302      	movs	r3, #2
 800365c:	76fb      	strb	r3, [r7, #27]
 800365e:	e06d      	b.n	800373c <UART_SetConfig+0x194>
 8003660:	2304      	movs	r3, #4
 8003662:	76fb      	strb	r3, [r7, #27]
 8003664:	e06a      	b.n	800373c <UART_SetConfig+0x194>
 8003666:	2308      	movs	r3, #8
 8003668:	76fb      	strb	r3, [r7, #27]
 800366a:	e067      	b.n	800373c <UART_SetConfig+0x194>
 800366c:	2310      	movs	r3, #16
 800366e:	76fb      	strb	r3, [r7, #27]
 8003670:	e064      	b.n	800373c <UART_SetConfig+0x194>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a8a      	ldr	r2, [pc, #552]	; (80038a0 <UART_SetConfig+0x2f8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d132      	bne.n	80036e2 <UART_SetConfig+0x13a>
 800367c:	4b87      	ldr	r3, [pc, #540]	; (800389c <UART_SetConfig+0x2f4>)
 800367e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d828      	bhi.n	80036dc <UART_SetConfig+0x134>
 800368a:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <UART_SetConfig+0xe8>)
 800368c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003690:	080036c5 	.word	0x080036c5
 8003694:	080036dd 	.word	0x080036dd
 8003698:	080036dd 	.word	0x080036dd
 800369c:	080036dd 	.word	0x080036dd
 80036a0:	080036d1 	.word	0x080036d1
 80036a4:	080036dd 	.word	0x080036dd
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	080036dd 	.word	0x080036dd
 80036b0:	080036cb 	.word	0x080036cb
 80036b4:	080036dd 	.word	0x080036dd
 80036b8:	080036dd 	.word	0x080036dd
 80036bc:	080036dd 	.word	0x080036dd
 80036c0:	080036d7 	.word	0x080036d7
 80036c4:	2300      	movs	r3, #0
 80036c6:	76fb      	strb	r3, [r7, #27]
 80036c8:	e038      	b.n	800373c <UART_SetConfig+0x194>
 80036ca:	2302      	movs	r3, #2
 80036cc:	76fb      	strb	r3, [r7, #27]
 80036ce:	e035      	b.n	800373c <UART_SetConfig+0x194>
 80036d0:	2304      	movs	r3, #4
 80036d2:	76fb      	strb	r3, [r7, #27]
 80036d4:	e032      	b.n	800373c <UART_SetConfig+0x194>
 80036d6:	2308      	movs	r3, #8
 80036d8:	76fb      	strb	r3, [r7, #27]
 80036da:	e02f      	b.n	800373c <UART_SetConfig+0x194>
 80036dc:	2310      	movs	r3, #16
 80036de:	76fb      	strb	r3, [r7, #27]
 80036e0:	e02c      	b.n	800373c <UART_SetConfig+0x194>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a6b      	ldr	r2, [pc, #428]	; (8003894 <UART_SetConfig+0x2ec>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d125      	bne.n	8003738 <UART_SetConfig+0x190>
 80036ec:	4b6b      	ldr	r3, [pc, #428]	; (800389c <UART_SetConfig+0x2f4>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036fa:	d017      	beq.n	800372c <UART_SetConfig+0x184>
 80036fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003700:	d817      	bhi.n	8003732 <UART_SetConfig+0x18a>
 8003702:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003706:	d00b      	beq.n	8003720 <UART_SetConfig+0x178>
 8003708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800370c:	d811      	bhi.n	8003732 <UART_SetConfig+0x18a>
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <UART_SetConfig+0x172>
 8003712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003716:	d006      	beq.n	8003726 <UART_SetConfig+0x17e>
 8003718:	e00b      	b.n	8003732 <UART_SetConfig+0x18a>
 800371a:	2300      	movs	r3, #0
 800371c:	76fb      	strb	r3, [r7, #27]
 800371e:	e00d      	b.n	800373c <UART_SetConfig+0x194>
 8003720:	2302      	movs	r3, #2
 8003722:	76fb      	strb	r3, [r7, #27]
 8003724:	e00a      	b.n	800373c <UART_SetConfig+0x194>
 8003726:	2304      	movs	r3, #4
 8003728:	76fb      	strb	r3, [r7, #27]
 800372a:	e007      	b.n	800373c <UART_SetConfig+0x194>
 800372c:	2308      	movs	r3, #8
 800372e:	76fb      	strb	r3, [r7, #27]
 8003730:	e004      	b.n	800373c <UART_SetConfig+0x194>
 8003732:	2310      	movs	r3, #16
 8003734:	76fb      	strb	r3, [r7, #27]
 8003736:	e001      	b.n	800373c <UART_SetConfig+0x194>
 8003738:	2310      	movs	r3, #16
 800373a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a54      	ldr	r2, [pc, #336]	; (8003894 <UART_SetConfig+0x2ec>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d173      	bne.n	800382e <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003746:	7efb      	ldrb	r3, [r7, #27]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d824      	bhi.n	8003796 <UART_SetConfig+0x1ee>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <UART_SetConfig+0x1ac>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003779 	.word	0x08003779
 8003758:	08003797 	.word	0x08003797
 800375c:	08003781 	.word	0x08003781
 8003760:	08003797 	.word	0x08003797
 8003764:	08003787 	.word	0x08003787
 8003768:	08003797 	.word	0x08003797
 800376c:	08003797 	.word	0x08003797
 8003770:	08003797 	.word	0x08003797
 8003774:	0800378f 	.word	0x0800378f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003778:	f7ff fab2 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 800377c:	6178      	str	r0, [r7, #20]
        break;
 800377e:	e00f      	b.n	80037a0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003780:	4b48      	ldr	r3, [pc, #288]	; (80038a4 <UART_SetConfig+0x2fc>)
 8003782:	617b      	str	r3, [r7, #20]
        break;
 8003784:	e00c      	b.n	80037a0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003786:	f7ff fa13 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 800378a:	6178      	str	r0, [r7, #20]
        break;
 800378c:	e008      	b.n	80037a0 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003792:	617b      	str	r3, [r7, #20]
        break;
 8003794:	e004      	b.n	80037a0 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	76bb      	strb	r3, [r7, #26]
        break;
 800379e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 80fe 	beq.w	80039a4 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	005b      	lsls	r3, r3, #1
 80037b0:	4413      	add	r3, r2
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d305      	bcc.n	80037c4 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d902      	bls.n	80037ca <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	76bb      	strb	r3, [r7, #26]
 80037c8:	e0ec      	b.n	80039a4 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	f04f 0200 	mov.w	r2, #0
 80037d6:	f04f 0300 	mov.w	r3, #0
 80037da:	020b      	lsls	r3, r1, #8
 80037dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80037e0:	0202      	lsls	r2, r0, #8
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	6849      	ldr	r1, [r1, #4]
 80037e6:	0849      	lsrs	r1, r1, #1
 80037e8:	4608      	mov	r0, r1
 80037ea:	f04f 0100 	mov.w	r1, #0
 80037ee:	1814      	adds	r4, r2, r0
 80037f0:	eb43 0501 	adc.w	r5, r3, r1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	461a      	mov	r2, r3
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	4620      	mov	r0, r4
 8003800:	4629      	mov	r1, r5
 8003802:	f7fc fd3d 	bl	8000280 <__aeabi_uldivmod>
 8003806:	4602      	mov	r2, r0
 8003808:	460b      	mov	r3, r1
 800380a:	4613      	mov	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003814:	d308      	bcc.n	8003828 <UART_SetConfig+0x280>
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800381c:	d204      	bcs.n	8003828 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	e0bd      	b.n	80039a4 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	76bb      	strb	r3, [r7, #26]
 800382c:	e0ba      	b.n	80039a4 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003836:	d168      	bne.n	800390a <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8003838:	7efb      	ldrb	r3, [r7, #27]
 800383a:	2b08      	cmp	r3, #8
 800383c:	d834      	bhi.n	80038a8 <UART_SetConfig+0x300>
 800383e:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <UART_SetConfig+0x29c>)
 8003840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003844:	08003869 	.word	0x08003869
 8003848:	08003871 	.word	0x08003871
 800384c:	08003879 	.word	0x08003879
 8003850:	080038a9 	.word	0x080038a9
 8003854:	0800387f 	.word	0x0800387f
 8003858:	080038a9 	.word	0x080038a9
 800385c:	080038a9 	.word	0x080038a9
 8003860:	080038a9 	.word	0x080038a9
 8003864:	08003887 	.word	0x08003887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003868:	f7ff fa3a 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 800386c:	6178      	str	r0, [r7, #20]
        break;
 800386e:	e020      	b.n	80038b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003870:	f7ff fa4c 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 8003874:	6178      	str	r0, [r7, #20]
        break;
 8003876:	e01c      	b.n	80038b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <UART_SetConfig+0x2fc>)
 800387a:	617b      	str	r3, [r7, #20]
        break;
 800387c:	e019      	b.n	80038b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800387e:	f7ff f997 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8003882:	6178      	str	r0, [r7, #20]
        break;
 8003884:	e015      	b.n	80038b2 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800388a:	617b      	str	r3, [r7, #20]
        break;
 800388c:	e011      	b.n	80038b2 <UART_SetConfig+0x30a>
 800388e:	bf00      	nop
 8003890:	efff69f3 	.word	0xefff69f3
 8003894:	40008000 	.word	0x40008000
 8003898:	40013800 	.word	0x40013800
 800389c:	40021000 	.word	0x40021000
 80038a0:	40004400 	.word	0x40004400
 80038a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	76bb      	strb	r3, [r7, #26]
        break;
 80038b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d075      	beq.n	80039a4 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005a      	lsls	r2, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	441a      	add	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b0f      	cmp	r3, #15
 80038d4:	d916      	bls.n	8003904 <UART_SetConfig+0x35c>
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038dc:	d212      	bcs.n	8003904 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f023 030f 	bic.w	r3, r3, #15
 80038e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	89fb      	ldrh	r3, [r7, #14]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	89fa      	ldrh	r2, [r7, #14]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	e04f      	b.n	80039a4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	76bb      	strb	r3, [r7, #26]
 8003908:	e04c      	b.n	80039a4 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 800390a:	7efb      	ldrb	r3, [r7, #27]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d828      	bhi.n	8003962 <UART_SetConfig+0x3ba>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <UART_SetConfig+0x370>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	0800393d 	.word	0x0800393d
 800391c:	08003945 	.word	0x08003945
 8003920:	0800394d 	.word	0x0800394d
 8003924:	08003963 	.word	0x08003963
 8003928:	08003953 	.word	0x08003953
 800392c:	08003963 	.word	0x08003963
 8003930:	08003963 	.word	0x08003963
 8003934:	08003963 	.word	0x08003963
 8003938:	0800395b 	.word	0x0800395b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800393c:	f7ff f9d0 	bl	8002ce0 <HAL_RCC_GetPCLK1Freq>
 8003940:	6178      	str	r0, [r7, #20]
        break;
 8003942:	e013      	b.n	800396c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003944:	f7ff f9e2 	bl	8002d0c <HAL_RCC_GetPCLK2Freq>
 8003948:	6178      	str	r0, [r7, #20]
        break;
 800394a:	e00f      	b.n	800396c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <UART_SetConfig+0x414>)
 800394e:	617b      	str	r3, [r7, #20]
        break;
 8003950:	e00c      	b.n	800396c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003952:	f7ff f92d 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8003956:	6178      	str	r0, [r7, #20]
        break;
 8003958:	e008      	b.n	800396c <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800395a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800395e:	617b      	str	r3, [r7, #20]
        break;
 8003960:	e004      	b.n	800396c <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	76bb      	strb	r3, [r7, #26]
        break;
 800396a:	bf00      	nop
    }

    if (pclk != 0U)
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d018      	beq.n	80039a4 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	085a      	lsrs	r2, r3, #1
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	441a      	add	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	b29b      	uxth	r3, r3
 8003986:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	2b0f      	cmp	r3, #15
 800398c:	d908      	bls.n	80039a0 <UART_SetConfig+0x3f8>
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003994:	d204      	bcs.n	80039a0 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	e001      	b.n	80039a4 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bdb0      	pop	{r4, r5, r7, pc}
 80039ba:	bf00      	nop
 80039bc:	00f42400 	.word	0x00f42400

080039c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01a      	beq.n	8003ad6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003abe:	d10a      	bne.n	8003ad6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	605a      	str	r2, [r3, #4]
  }
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b14:	f7fd fa7c 	bl	8001010 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d10e      	bne.n	8003b46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f82d 	bl	8003b96 <UART_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e023      	b.n	8003b8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d10e      	bne.n	8003b72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f817 	bl	8003b96 <UART_WaitOnFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e00d      	b.n	8003b8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	60f8      	str	r0, [r7, #12]
 8003b9e:	60b9      	str	r1, [r7, #8]
 8003ba0:	603b      	str	r3, [r7, #0]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba6:	e05e      	b.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bae:	d05a      	beq.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb0:	f7fd fa2e 	bl	8001010 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d302      	bcc.n	8003bc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d11b      	bne.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bd4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 0201 	bic.w	r2, r2, #1
 8003be4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2220      	movs	r2, #32
 8003bea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e043      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d02c      	beq.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c1a:	d124      	bne.n	8003c66 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c24:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c34:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0201 	bic.w	r2, r2, #1
 8003c44:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e00f      	b.n	8003c86 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d091      	beq.n	8003ba8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
	...

08003c90 <__errno>:
 8003c90:	4b01      	ldr	r3, [pc, #4]	; (8003c98 <__errno+0x8>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000018 	.word	0x20000018

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	4d0d      	ldr	r5, [pc, #52]	; (8003cd4 <__libc_init_array+0x38>)
 8003ca0:	4c0d      	ldr	r4, [pc, #52]	; (8003cd8 <__libc_init_array+0x3c>)
 8003ca2:	1b64      	subs	r4, r4, r5
 8003ca4:	10a4      	asrs	r4, r4, #2
 8003ca6:	2600      	movs	r6, #0
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	4d0b      	ldr	r5, [pc, #44]	; (8003cdc <__libc_init_array+0x40>)
 8003cae:	4c0c      	ldr	r4, [pc, #48]	; (8003ce0 <__libc_init_array+0x44>)
 8003cb0:	f000 fc4e 	bl	8004550 <_init>
 8003cb4:	1b64      	subs	r4, r4, r5
 8003cb6:	10a4      	asrs	r4, r4, #2
 8003cb8:	2600      	movs	r6, #0
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	080045f8 	.word	0x080045f8
 8003cd8:	080045f8 	.word	0x080045f8
 8003cdc:	080045f8 	.word	0x080045f8
 8003ce0:	080045fc 	.word	0x080045fc

08003ce4 <memset>:
 8003ce4:	4402      	add	r2, r0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <siprintf>:
 8003cf4:	b40e      	push	{r1, r2, r3}
 8003cf6:	b500      	push	{lr}
 8003cf8:	b09c      	sub	sp, #112	; 0x70
 8003cfa:	ab1d      	add	r3, sp, #116	; 0x74
 8003cfc:	9002      	str	r0, [sp, #8]
 8003cfe:	9006      	str	r0, [sp, #24]
 8003d00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d04:	4809      	ldr	r0, [pc, #36]	; (8003d2c <siprintf+0x38>)
 8003d06:	9107      	str	r1, [sp, #28]
 8003d08:	9104      	str	r1, [sp, #16]
 8003d0a:	4909      	ldr	r1, [pc, #36]	; (8003d30 <siprintf+0x3c>)
 8003d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d10:	9105      	str	r1, [sp, #20]
 8003d12:	6800      	ldr	r0, [r0, #0]
 8003d14:	9301      	str	r3, [sp, #4]
 8003d16:	a902      	add	r1, sp, #8
 8003d18:	f000 f868 	bl	8003dec <_svfiprintf_r>
 8003d1c:	9b02      	ldr	r3, [sp, #8]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	b01c      	add	sp, #112	; 0x70
 8003d24:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d28:	b003      	add	sp, #12
 8003d2a:	4770      	bx	lr
 8003d2c:	20000018 	.word	0x20000018
 8003d30:	ffff0208 	.word	0xffff0208

08003d34 <__ssputs_r>:
 8003d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d38:	688e      	ldr	r6, [r1, #8]
 8003d3a:	429e      	cmp	r6, r3
 8003d3c:	4682      	mov	sl, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	4690      	mov	r8, r2
 8003d42:	461f      	mov	r7, r3
 8003d44:	d838      	bhi.n	8003db8 <__ssputs_r+0x84>
 8003d46:	898a      	ldrh	r2, [r1, #12]
 8003d48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d4c:	d032      	beq.n	8003db4 <__ssputs_r+0x80>
 8003d4e:	6825      	ldr	r5, [r4, #0]
 8003d50:	6909      	ldr	r1, [r1, #16]
 8003d52:	eba5 0901 	sub.w	r9, r5, r1
 8003d56:	6965      	ldr	r5, [r4, #20]
 8003d58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d60:	3301      	adds	r3, #1
 8003d62:	444b      	add	r3, r9
 8003d64:	106d      	asrs	r5, r5, #1
 8003d66:	429d      	cmp	r5, r3
 8003d68:	bf38      	it	cc
 8003d6a:	461d      	movcc	r5, r3
 8003d6c:	0553      	lsls	r3, r2, #21
 8003d6e:	d531      	bpl.n	8003dd4 <__ssputs_r+0xa0>
 8003d70:	4629      	mov	r1, r5
 8003d72:	f000 fb47 	bl	8004404 <_malloc_r>
 8003d76:	4606      	mov	r6, r0
 8003d78:	b950      	cbnz	r0, 8003d90 <__ssputs_r+0x5c>
 8003d7a:	230c      	movs	r3, #12
 8003d7c:	f8ca 3000 	str.w	r3, [sl]
 8003d80:	89a3      	ldrh	r3, [r4, #12]
 8003d82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d86:	81a3      	strh	r3, [r4, #12]
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d90:	6921      	ldr	r1, [r4, #16]
 8003d92:	464a      	mov	r2, r9
 8003d94:	f000 fabe 	bl	8004314 <memcpy>
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da2:	81a3      	strh	r3, [r4, #12]
 8003da4:	6126      	str	r6, [r4, #16]
 8003da6:	6165      	str	r5, [r4, #20]
 8003da8:	444e      	add	r6, r9
 8003daa:	eba5 0509 	sub.w	r5, r5, r9
 8003dae:	6026      	str	r6, [r4, #0]
 8003db0:	60a5      	str	r5, [r4, #8]
 8003db2:	463e      	mov	r6, r7
 8003db4:	42be      	cmp	r6, r7
 8003db6:	d900      	bls.n	8003dba <__ssputs_r+0x86>
 8003db8:	463e      	mov	r6, r7
 8003dba:	4632      	mov	r2, r6
 8003dbc:	6820      	ldr	r0, [r4, #0]
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	f000 fab6 	bl	8004330 <memmove>
 8003dc4:	68a3      	ldr	r3, [r4, #8]
 8003dc6:	6822      	ldr	r2, [r4, #0]
 8003dc8:	1b9b      	subs	r3, r3, r6
 8003dca:	4432      	add	r2, r6
 8003dcc:	60a3      	str	r3, [r4, #8]
 8003dce:	6022      	str	r2, [r4, #0]
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	e7db      	b.n	8003d8c <__ssputs_r+0x58>
 8003dd4:	462a      	mov	r2, r5
 8003dd6:	f000 fb6f 	bl	80044b8 <_realloc_r>
 8003dda:	4606      	mov	r6, r0
 8003ddc:	2800      	cmp	r0, #0
 8003dde:	d1e1      	bne.n	8003da4 <__ssputs_r+0x70>
 8003de0:	6921      	ldr	r1, [r4, #16]
 8003de2:	4650      	mov	r0, sl
 8003de4:	f000 fabe 	bl	8004364 <_free_r>
 8003de8:	e7c7      	b.n	8003d7a <__ssputs_r+0x46>
	...

08003dec <_svfiprintf_r>:
 8003dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003df0:	4698      	mov	r8, r3
 8003df2:	898b      	ldrh	r3, [r1, #12]
 8003df4:	061b      	lsls	r3, r3, #24
 8003df6:	b09d      	sub	sp, #116	; 0x74
 8003df8:	4607      	mov	r7, r0
 8003dfa:	460d      	mov	r5, r1
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	d50e      	bpl.n	8003e1e <_svfiprintf_r+0x32>
 8003e00:	690b      	ldr	r3, [r1, #16]
 8003e02:	b963      	cbnz	r3, 8003e1e <_svfiprintf_r+0x32>
 8003e04:	2140      	movs	r1, #64	; 0x40
 8003e06:	f000 fafd 	bl	8004404 <_malloc_r>
 8003e0a:	6028      	str	r0, [r5, #0]
 8003e0c:	6128      	str	r0, [r5, #16]
 8003e0e:	b920      	cbnz	r0, 8003e1a <_svfiprintf_r+0x2e>
 8003e10:	230c      	movs	r3, #12
 8003e12:	603b      	str	r3, [r7, #0]
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e18:	e0d1      	b.n	8003fbe <_svfiprintf_r+0x1d2>
 8003e1a:	2340      	movs	r3, #64	; 0x40
 8003e1c:	616b      	str	r3, [r5, #20]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	9309      	str	r3, [sp, #36]	; 0x24
 8003e22:	2320      	movs	r3, #32
 8003e24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e28:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e2c:	2330      	movs	r3, #48	; 0x30
 8003e2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003fd8 <_svfiprintf_r+0x1ec>
 8003e32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e36:	f04f 0901 	mov.w	r9, #1
 8003e3a:	4623      	mov	r3, r4
 8003e3c:	469a      	mov	sl, r3
 8003e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e42:	b10a      	cbz	r2, 8003e48 <_svfiprintf_r+0x5c>
 8003e44:	2a25      	cmp	r2, #37	; 0x25
 8003e46:	d1f9      	bne.n	8003e3c <_svfiprintf_r+0x50>
 8003e48:	ebba 0b04 	subs.w	fp, sl, r4
 8003e4c:	d00b      	beq.n	8003e66 <_svfiprintf_r+0x7a>
 8003e4e:	465b      	mov	r3, fp
 8003e50:	4622      	mov	r2, r4
 8003e52:	4629      	mov	r1, r5
 8003e54:	4638      	mov	r0, r7
 8003e56:	f7ff ff6d 	bl	8003d34 <__ssputs_r>
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	f000 80aa 	beq.w	8003fb4 <_svfiprintf_r+0x1c8>
 8003e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e62:	445a      	add	r2, fp
 8003e64:	9209      	str	r2, [sp, #36]	; 0x24
 8003e66:	f89a 3000 	ldrb.w	r3, [sl]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 80a2 	beq.w	8003fb4 <_svfiprintf_r+0x1c8>
 8003e70:	2300      	movs	r3, #0
 8003e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e7a:	f10a 0a01 	add.w	sl, sl, #1
 8003e7e:	9304      	str	r3, [sp, #16]
 8003e80:	9307      	str	r3, [sp, #28]
 8003e82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e86:	931a      	str	r3, [sp, #104]	; 0x68
 8003e88:	4654      	mov	r4, sl
 8003e8a:	2205      	movs	r2, #5
 8003e8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e90:	4851      	ldr	r0, [pc, #324]	; (8003fd8 <_svfiprintf_r+0x1ec>)
 8003e92:	f7fc f9a5 	bl	80001e0 <memchr>
 8003e96:	9a04      	ldr	r2, [sp, #16]
 8003e98:	b9d8      	cbnz	r0, 8003ed2 <_svfiprintf_r+0xe6>
 8003e9a:	06d0      	lsls	r0, r2, #27
 8003e9c:	bf44      	itt	mi
 8003e9e:	2320      	movmi	r3, #32
 8003ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ea4:	0711      	lsls	r1, r2, #28
 8003ea6:	bf44      	itt	mi
 8003ea8:	232b      	movmi	r3, #43	; 0x2b
 8003eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003eae:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8003eb4:	d015      	beq.n	8003ee2 <_svfiprintf_r+0xf6>
 8003eb6:	9a07      	ldr	r2, [sp, #28]
 8003eb8:	4654      	mov	r4, sl
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f04f 0c0a 	mov.w	ip, #10
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ec6:	3b30      	subs	r3, #48	; 0x30
 8003ec8:	2b09      	cmp	r3, #9
 8003eca:	d94e      	bls.n	8003f6a <_svfiprintf_r+0x17e>
 8003ecc:	b1b0      	cbz	r0, 8003efc <_svfiprintf_r+0x110>
 8003ece:	9207      	str	r2, [sp, #28]
 8003ed0:	e014      	b.n	8003efc <_svfiprintf_r+0x110>
 8003ed2:	eba0 0308 	sub.w	r3, r0, r8
 8003ed6:	fa09 f303 	lsl.w	r3, r9, r3
 8003eda:	4313      	orrs	r3, r2
 8003edc:	9304      	str	r3, [sp, #16]
 8003ede:	46a2      	mov	sl, r4
 8003ee0:	e7d2      	b.n	8003e88 <_svfiprintf_r+0x9c>
 8003ee2:	9b03      	ldr	r3, [sp, #12]
 8003ee4:	1d19      	adds	r1, r3, #4
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	9103      	str	r1, [sp, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bfbb      	ittet	lt
 8003eee:	425b      	neglt	r3, r3
 8003ef0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ef4:	9307      	strge	r3, [sp, #28]
 8003ef6:	9307      	strlt	r3, [sp, #28]
 8003ef8:	bfb8      	it	lt
 8003efa:	9204      	strlt	r2, [sp, #16]
 8003efc:	7823      	ldrb	r3, [r4, #0]
 8003efe:	2b2e      	cmp	r3, #46	; 0x2e
 8003f00:	d10c      	bne.n	8003f1c <_svfiprintf_r+0x130>
 8003f02:	7863      	ldrb	r3, [r4, #1]
 8003f04:	2b2a      	cmp	r3, #42	; 0x2a
 8003f06:	d135      	bne.n	8003f74 <_svfiprintf_r+0x188>
 8003f08:	9b03      	ldr	r3, [sp, #12]
 8003f0a:	1d1a      	adds	r2, r3, #4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	9203      	str	r2, [sp, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	bfb8      	it	lt
 8003f14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003f18:	3402      	adds	r4, #2
 8003f1a:	9305      	str	r3, [sp, #20]
 8003f1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003fe8 <_svfiprintf_r+0x1fc>
 8003f20:	7821      	ldrb	r1, [r4, #0]
 8003f22:	2203      	movs	r2, #3
 8003f24:	4650      	mov	r0, sl
 8003f26:	f7fc f95b 	bl	80001e0 <memchr>
 8003f2a:	b140      	cbz	r0, 8003f3e <_svfiprintf_r+0x152>
 8003f2c:	2340      	movs	r3, #64	; 0x40
 8003f2e:	eba0 000a 	sub.w	r0, r0, sl
 8003f32:	fa03 f000 	lsl.w	r0, r3, r0
 8003f36:	9b04      	ldr	r3, [sp, #16]
 8003f38:	4303      	orrs	r3, r0
 8003f3a:	3401      	adds	r4, #1
 8003f3c:	9304      	str	r3, [sp, #16]
 8003f3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f42:	4826      	ldr	r0, [pc, #152]	; (8003fdc <_svfiprintf_r+0x1f0>)
 8003f44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f48:	2206      	movs	r2, #6
 8003f4a:	f7fc f949 	bl	80001e0 <memchr>
 8003f4e:	2800      	cmp	r0, #0
 8003f50:	d038      	beq.n	8003fc4 <_svfiprintf_r+0x1d8>
 8003f52:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <_svfiprintf_r+0x1f4>)
 8003f54:	bb1b      	cbnz	r3, 8003f9e <_svfiprintf_r+0x1b2>
 8003f56:	9b03      	ldr	r3, [sp, #12]
 8003f58:	3307      	adds	r3, #7
 8003f5a:	f023 0307 	bic.w	r3, r3, #7
 8003f5e:	3308      	adds	r3, #8
 8003f60:	9303      	str	r3, [sp, #12]
 8003f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f64:	4433      	add	r3, r6
 8003f66:	9309      	str	r3, [sp, #36]	; 0x24
 8003f68:	e767      	b.n	8003e3a <_svfiprintf_r+0x4e>
 8003f6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f6e:	460c      	mov	r4, r1
 8003f70:	2001      	movs	r0, #1
 8003f72:	e7a5      	b.n	8003ec0 <_svfiprintf_r+0xd4>
 8003f74:	2300      	movs	r3, #0
 8003f76:	3401      	adds	r4, #1
 8003f78:	9305      	str	r3, [sp, #20]
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	f04f 0c0a 	mov.w	ip, #10
 8003f80:	4620      	mov	r0, r4
 8003f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f86:	3a30      	subs	r2, #48	; 0x30
 8003f88:	2a09      	cmp	r2, #9
 8003f8a:	d903      	bls.n	8003f94 <_svfiprintf_r+0x1a8>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0c5      	beq.n	8003f1c <_svfiprintf_r+0x130>
 8003f90:	9105      	str	r1, [sp, #20]
 8003f92:	e7c3      	b.n	8003f1c <_svfiprintf_r+0x130>
 8003f94:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f98:	4604      	mov	r4, r0
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e7f0      	b.n	8003f80 <_svfiprintf_r+0x194>
 8003f9e:	ab03      	add	r3, sp, #12
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	462a      	mov	r2, r5
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <_svfiprintf_r+0x1f8>)
 8003fa6:	a904      	add	r1, sp, #16
 8003fa8:	4638      	mov	r0, r7
 8003faa:	f3af 8000 	nop.w
 8003fae:	1c42      	adds	r2, r0, #1
 8003fb0:	4606      	mov	r6, r0
 8003fb2:	d1d6      	bne.n	8003f62 <_svfiprintf_r+0x176>
 8003fb4:	89ab      	ldrh	r3, [r5, #12]
 8003fb6:	065b      	lsls	r3, r3, #25
 8003fb8:	f53f af2c 	bmi.w	8003e14 <_svfiprintf_r+0x28>
 8003fbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fbe:	b01d      	add	sp, #116	; 0x74
 8003fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc4:	ab03      	add	r3, sp, #12
 8003fc6:	9300      	str	r3, [sp, #0]
 8003fc8:	462a      	mov	r2, r5
 8003fca:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <_svfiprintf_r+0x1f8>)
 8003fcc:	a904      	add	r1, sp, #16
 8003fce:	4638      	mov	r0, r7
 8003fd0:	f000 f87a 	bl	80040c8 <_printf_i>
 8003fd4:	e7eb      	b.n	8003fae <_svfiprintf_r+0x1c2>
 8003fd6:	bf00      	nop
 8003fd8:	080045bc 	.word	0x080045bc
 8003fdc:	080045c6 	.word	0x080045c6
 8003fe0:	00000000 	.word	0x00000000
 8003fe4:	08003d35 	.word	0x08003d35
 8003fe8:	080045c2 	.word	0x080045c2

08003fec <_printf_common>:
 8003fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff0:	4616      	mov	r6, r2
 8003ff2:	4699      	mov	r9, r3
 8003ff4:	688a      	ldr	r2, [r1, #8]
 8003ff6:	690b      	ldr	r3, [r1, #16]
 8003ff8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	bfb8      	it	lt
 8004000:	4613      	movlt	r3, r2
 8004002:	6033      	str	r3, [r6, #0]
 8004004:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004008:	4607      	mov	r7, r0
 800400a:	460c      	mov	r4, r1
 800400c:	b10a      	cbz	r2, 8004012 <_printf_common+0x26>
 800400e:	3301      	adds	r3, #1
 8004010:	6033      	str	r3, [r6, #0]
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	0699      	lsls	r1, r3, #26
 8004016:	bf42      	ittt	mi
 8004018:	6833      	ldrmi	r3, [r6, #0]
 800401a:	3302      	addmi	r3, #2
 800401c:	6033      	strmi	r3, [r6, #0]
 800401e:	6825      	ldr	r5, [r4, #0]
 8004020:	f015 0506 	ands.w	r5, r5, #6
 8004024:	d106      	bne.n	8004034 <_printf_common+0x48>
 8004026:	f104 0a19 	add.w	sl, r4, #25
 800402a:	68e3      	ldr	r3, [r4, #12]
 800402c:	6832      	ldr	r2, [r6, #0]
 800402e:	1a9b      	subs	r3, r3, r2
 8004030:	42ab      	cmp	r3, r5
 8004032:	dc26      	bgt.n	8004082 <_printf_common+0x96>
 8004034:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004038:	1e13      	subs	r3, r2, #0
 800403a:	6822      	ldr	r2, [r4, #0]
 800403c:	bf18      	it	ne
 800403e:	2301      	movne	r3, #1
 8004040:	0692      	lsls	r2, r2, #26
 8004042:	d42b      	bmi.n	800409c <_printf_common+0xb0>
 8004044:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004048:	4649      	mov	r1, r9
 800404a:	4638      	mov	r0, r7
 800404c:	47c0      	blx	r8
 800404e:	3001      	adds	r0, #1
 8004050:	d01e      	beq.n	8004090 <_printf_common+0xa4>
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	68e5      	ldr	r5, [r4, #12]
 8004056:	6832      	ldr	r2, [r6, #0]
 8004058:	f003 0306 	and.w	r3, r3, #6
 800405c:	2b04      	cmp	r3, #4
 800405e:	bf08      	it	eq
 8004060:	1aad      	subeq	r5, r5, r2
 8004062:	68a3      	ldr	r3, [r4, #8]
 8004064:	6922      	ldr	r2, [r4, #16]
 8004066:	bf0c      	ite	eq
 8004068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800406c:	2500      	movne	r5, #0
 800406e:	4293      	cmp	r3, r2
 8004070:	bfc4      	itt	gt
 8004072:	1a9b      	subgt	r3, r3, r2
 8004074:	18ed      	addgt	r5, r5, r3
 8004076:	2600      	movs	r6, #0
 8004078:	341a      	adds	r4, #26
 800407a:	42b5      	cmp	r5, r6
 800407c:	d11a      	bne.n	80040b4 <_printf_common+0xc8>
 800407e:	2000      	movs	r0, #0
 8004080:	e008      	b.n	8004094 <_printf_common+0xa8>
 8004082:	2301      	movs	r3, #1
 8004084:	4652      	mov	r2, sl
 8004086:	4649      	mov	r1, r9
 8004088:	4638      	mov	r0, r7
 800408a:	47c0      	blx	r8
 800408c:	3001      	adds	r0, #1
 800408e:	d103      	bne.n	8004098 <_printf_common+0xac>
 8004090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004098:	3501      	adds	r5, #1
 800409a:	e7c6      	b.n	800402a <_printf_common+0x3e>
 800409c:	18e1      	adds	r1, r4, r3
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	2030      	movs	r0, #48	; 0x30
 80040a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040a6:	4422      	add	r2, r4
 80040a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040b0:	3302      	adds	r3, #2
 80040b2:	e7c7      	b.n	8004044 <_printf_common+0x58>
 80040b4:	2301      	movs	r3, #1
 80040b6:	4622      	mov	r2, r4
 80040b8:	4649      	mov	r1, r9
 80040ba:	4638      	mov	r0, r7
 80040bc:	47c0      	blx	r8
 80040be:	3001      	adds	r0, #1
 80040c0:	d0e6      	beq.n	8004090 <_printf_common+0xa4>
 80040c2:	3601      	adds	r6, #1
 80040c4:	e7d9      	b.n	800407a <_printf_common+0x8e>
	...

080040c8 <_printf_i>:
 80040c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040cc:	460c      	mov	r4, r1
 80040ce:	4691      	mov	r9, r2
 80040d0:	7e27      	ldrb	r7, [r4, #24]
 80040d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80040d4:	2f78      	cmp	r7, #120	; 0x78
 80040d6:	4680      	mov	r8, r0
 80040d8:	469a      	mov	sl, r3
 80040da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040de:	d807      	bhi.n	80040f0 <_printf_i+0x28>
 80040e0:	2f62      	cmp	r7, #98	; 0x62
 80040e2:	d80a      	bhi.n	80040fa <_printf_i+0x32>
 80040e4:	2f00      	cmp	r7, #0
 80040e6:	f000 80d8 	beq.w	800429a <_printf_i+0x1d2>
 80040ea:	2f58      	cmp	r7, #88	; 0x58
 80040ec:	f000 80a3 	beq.w	8004236 <_printf_i+0x16e>
 80040f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80040f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040f8:	e03a      	b.n	8004170 <_printf_i+0xa8>
 80040fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040fe:	2b15      	cmp	r3, #21
 8004100:	d8f6      	bhi.n	80040f0 <_printf_i+0x28>
 8004102:	a001      	add	r0, pc, #4	; (adr r0, 8004108 <_printf_i+0x40>)
 8004104:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004108:	08004161 	.word	0x08004161
 800410c:	08004175 	.word	0x08004175
 8004110:	080040f1 	.word	0x080040f1
 8004114:	080040f1 	.word	0x080040f1
 8004118:	080040f1 	.word	0x080040f1
 800411c:	080040f1 	.word	0x080040f1
 8004120:	08004175 	.word	0x08004175
 8004124:	080040f1 	.word	0x080040f1
 8004128:	080040f1 	.word	0x080040f1
 800412c:	080040f1 	.word	0x080040f1
 8004130:	080040f1 	.word	0x080040f1
 8004134:	08004281 	.word	0x08004281
 8004138:	080041a5 	.word	0x080041a5
 800413c:	08004263 	.word	0x08004263
 8004140:	080040f1 	.word	0x080040f1
 8004144:	080040f1 	.word	0x080040f1
 8004148:	080042a3 	.word	0x080042a3
 800414c:	080040f1 	.word	0x080040f1
 8004150:	080041a5 	.word	0x080041a5
 8004154:	080040f1 	.word	0x080040f1
 8004158:	080040f1 	.word	0x080040f1
 800415c:	0800426b 	.word	0x0800426b
 8004160:	680b      	ldr	r3, [r1, #0]
 8004162:	1d1a      	adds	r2, r3, #4
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	600a      	str	r2, [r1, #0]
 8004168:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800416c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004170:	2301      	movs	r3, #1
 8004172:	e0a3      	b.n	80042bc <_printf_i+0x1f4>
 8004174:	6825      	ldr	r5, [r4, #0]
 8004176:	6808      	ldr	r0, [r1, #0]
 8004178:	062e      	lsls	r6, r5, #24
 800417a:	f100 0304 	add.w	r3, r0, #4
 800417e:	d50a      	bpl.n	8004196 <_printf_i+0xce>
 8004180:	6805      	ldr	r5, [r0, #0]
 8004182:	600b      	str	r3, [r1, #0]
 8004184:	2d00      	cmp	r5, #0
 8004186:	da03      	bge.n	8004190 <_printf_i+0xc8>
 8004188:	232d      	movs	r3, #45	; 0x2d
 800418a:	426d      	negs	r5, r5
 800418c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004190:	485e      	ldr	r0, [pc, #376]	; (800430c <_printf_i+0x244>)
 8004192:	230a      	movs	r3, #10
 8004194:	e019      	b.n	80041ca <_printf_i+0x102>
 8004196:	f015 0f40 	tst.w	r5, #64	; 0x40
 800419a:	6805      	ldr	r5, [r0, #0]
 800419c:	600b      	str	r3, [r1, #0]
 800419e:	bf18      	it	ne
 80041a0:	b22d      	sxthne	r5, r5
 80041a2:	e7ef      	b.n	8004184 <_printf_i+0xbc>
 80041a4:	680b      	ldr	r3, [r1, #0]
 80041a6:	6825      	ldr	r5, [r4, #0]
 80041a8:	1d18      	adds	r0, r3, #4
 80041aa:	6008      	str	r0, [r1, #0]
 80041ac:	0628      	lsls	r0, r5, #24
 80041ae:	d501      	bpl.n	80041b4 <_printf_i+0xec>
 80041b0:	681d      	ldr	r5, [r3, #0]
 80041b2:	e002      	b.n	80041ba <_printf_i+0xf2>
 80041b4:	0669      	lsls	r1, r5, #25
 80041b6:	d5fb      	bpl.n	80041b0 <_printf_i+0xe8>
 80041b8:	881d      	ldrh	r5, [r3, #0]
 80041ba:	4854      	ldr	r0, [pc, #336]	; (800430c <_printf_i+0x244>)
 80041bc:	2f6f      	cmp	r7, #111	; 0x6f
 80041be:	bf0c      	ite	eq
 80041c0:	2308      	moveq	r3, #8
 80041c2:	230a      	movne	r3, #10
 80041c4:	2100      	movs	r1, #0
 80041c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ca:	6866      	ldr	r6, [r4, #4]
 80041cc:	60a6      	str	r6, [r4, #8]
 80041ce:	2e00      	cmp	r6, #0
 80041d0:	bfa2      	ittt	ge
 80041d2:	6821      	ldrge	r1, [r4, #0]
 80041d4:	f021 0104 	bicge.w	r1, r1, #4
 80041d8:	6021      	strge	r1, [r4, #0]
 80041da:	b90d      	cbnz	r5, 80041e0 <_printf_i+0x118>
 80041dc:	2e00      	cmp	r6, #0
 80041de:	d04d      	beq.n	800427c <_printf_i+0x1b4>
 80041e0:	4616      	mov	r6, r2
 80041e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80041e6:	fb03 5711 	mls	r7, r3, r1, r5
 80041ea:	5dc7      	ldrb	r7, [r0, r7]
 80041ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041f0:	462f      	mov	r7, r5
 80041f2:	42bb      	cmp	r3, r7
 80041f4:	460d      	mov	r5, r1
 80041f6:	d9f4      	bls.n	80041e2 <_printf_i+0x11a>
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d10b      	bne.n	8004214 <_printf_i+0x14c>
 80041fc:	6823      	ldr	r3, [r4, #0]
 80041fe:	07df      	lsls	r7, r3, #31
 8004200:	d508      	bpl.n	8004214 <_printf_i+0x14c>
 8004202:	6923      	ldr	r3, [r4, #16]
 8004204:	6861      	ldr	r1, [r4, #4]
 8004206:	4299      	cmp	r1, r3
 8004208:	bfde      	ittt	le
 800420a:	2330      	movle	r3, #48	; 0x30
 800420c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004210:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004214:	1b92      	subs	r2, r2, r6
 8004216:	6122      	str	r2, [r4, #16]
 8004218:	f8cd a000 	str.w	sl, [sp]
 800421c:	464b      	mov	r3, r9
 800421e:	aa03      	add	r2, sp, #12
 8004220:	4621      	mov	r1, r4
 8004222:	4640      	mov	r0, r8
 8004224:	f7ff fee2 	bl	8003fec <_printf_common>
 8004228:	3001      	adds	r0, #1
 800422a:	d14c      	bne.n	80042c6 <_printf_i+0x1fe>
 800422c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004230:	b004      	add	sp, #16
 8004232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004236:	4835      	ldr	r0, [pc, #212]	; (800430c <_printf_i+0x244>)
 8004238:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	680e      	ldr	r6, [r1, #0]
 8004240:	061f      	lsls	r7, r3, #24
 8004242:	f856 5b04 	ldr.w	r5, [r6], #4
 8004246:	600e      	str	r6, [r1, #0]
 8004248:	d514      	bpl.n	8004274 <_printf_i+0x1ac>
 800424a:	07d9      	lsls	r1, r3, #31
 800424c:	bf44      	itt	mi
 800424e:	f043 0320 	orrmi.w	r3, r3, #32
 8004252:	6023      	strmi	r3, [r4, #0]
 8004254:	b91d      	cbnz	r5, 800425e <_printf_i+0x196>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	f023 0320 	bic.w	r3, r3, #32
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	2310      	movs	r3, #16
 8004260:	e7b0      	b.n	80041c4 <_printf_i+0xfc>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	f043 0320 	orr.w	r3, r3, #32
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	2378      	movs	r3, #120	; 0x78
 800426c:	4828      	ldr	r0, [pc, #160]	; (8004310 <_printf_i+0x248>)
 800426e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004272:	e7e3      	b.n	800423c <_printf_i+0x174>
 8004274:	065e      	lsls	r6, r3, #25
 8004276:	bf48      	it	mi
 8004278:	b2ad      	uxthmi	r5, r5
 800427a:	e7e6      	b.n	800424a <_printf_i+0x182>
 800427c:	4616      	mov	r6, r2
 800427e:	e7bb      	b.n	80041f8 <_printf_i+0x130>
 8004280:	680b      	ldr	r3, [r1, #0]
 8004282:	6826      	ldr	r6, [r4, #0]
 8004284:	6960      	ldr	r0, [r4, #20]
 8004286:	1d1d      	adds	r5, r3, #4
 8004288:	600d      	str	r5, [r1, #0]
 800428a:	0635      	lsls	r5, r6, #24
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	d501      	bpl.n	8004294 <_printf_i+0x1cc>
 8004290:	6018      	str	r0, [r3, #0]
 8004292:	e002      	b.n	800429a <_printf_i+0x1d2>
 8004294:	0671      	lsls	r1, r6, #25
 8004296:	d5fb      	bpl.n	8004290 <_printf_i+0x1c8>
 8004298:	8018      	strh	r0, [r3, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	6123      	str	r3, [r4, #16]
 800429e:	4616      	mov	r6, r2
 80042a0:	e7ba      	b.n	8004218 <_printf_i+0x150>
 80042a2:	680b      	ldr	r3, [r1, #0]
 80042a4:	1d1a      	adds	r2, r3, #4
 80042a6:	600a      	str	r2, [r1, #0]
 80042a8:	681e      	ldr	r6, [r3, #0]
 80042aa:	6862      	ldr	r2, [r4, #4]
 80042ac:	2100      	movs	r1, #0
 80042ae:	4630      	mov	r0, r6
 80042b0:	f7fb ff96 	bl	80001e0 <memchr>
 80042b4:	b108      	cbz	r0, 80042ba <_printf_i+0x1f2>
 80042b6:	1b80      	subs	r0, r0, r6
 80042b8:	6060      	str	r0, [r4, #4]
 80042ba:	6863      	ldr	r3, [r4, #4]
 80042bc:	6123      	str	r3, [r4, #16]
 80042be:	2300      	movs	r3, #0
 80042c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042c4:	e7a8      	b.n	8004218 <_printf_i+0x150>
 80042c6:	6923      	ldr	r3, [r4, #16]
 80042c8:	4632      	mov	r2, r6
 80042ca:	4649      	mov	r1, r9
 80042cc:	4640      	mov	r0, r8
 80042ce:	47d0      	blx	sl
 80042d0:	3001      	adds	r0, #1
 80042d2:	d0ab      	beq.n	800422c <_printf_i+0x164>
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	079b      	lsls	r3, r3, #30
 80042d8:	d413      	bmi.n	8004302 <_printf_i+0x23a>
 80042da:	68e0      	ldr	r0, [r4, #12]
 80042dc:	9b03      	ldr	r3, [sp, #12]
 80042de:	4298      	cmp	r0, r3
 80042e0:	bfb8      	it	lt
 80042e2:	4618      	movlt	r0, r3
 80042e4:	e7a4      	b.n	8004230 <_printf_i+0x168>
 80042e6:	2301      	movs	r3, #1
 80042e8:	4632      	mov	r2, r6
 80042ea:	4649      	mov	r1, r9
 80042ec:	4640      	mov	r0, r8
 80042ee:	47d0      	blx	sl
 80042f0:	3001      	adds	r0, #1
 80042f2:	d09b      	beq.n	800422c <_printf_i+0x164>
 80042f4:	3501      	adds	r5, #1
 80042f6:	68e3      	ldr	r3, [r4, #12]
 80042f8:	9903      	ldr	r1, [sp, #12]
 80042fa:	1a5b      	subs	r3, r3, r1
 80042fc:	42ab      	cmp	r3, r5
 80042fe:	dcf2      	bgt.n	80042e6 <_printf_i+0x21e>
 8004300:	e7eb      	b.n	80042da <_printf_i+0x212>
 8004302:	2500      	movs	r5, #0
 8004304:	f104 0619 	add.w	r6, r4, #25
 8004308:	e7f5      	b.n	80042f6 <_printf_i+0x22e>
 800430a:	bf00      	nop
 800430c:	080045cd 	.word	0x080045cd
 8004310:	080045de 	.word	0x080045de

08004314 <memcpy>:
 8004314:	440a      	add	r2, r1
 8004316:	4291      	cmp	r1, r2
 8004318:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800431c:	d100      	bne.n	8004320 <memcpy+0xc>
 800431e:	4770      	bx	lr
 8004320:	b510      	push	{r4, lr}
 8004322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800432a:	4291      	cmp	r1, r2
 800432c:	d1f9      	bne.n	8004322 <memcpy+0xe>
 800432e:	bd10      	pop	{r4, pc}

08004330 <memmove>:
 8004330:	4288      	cmp	r0, r1
 8004332:	b510      	push	{r4, lr}
 8004334:	eb01 0402 	add.w	r4, r1, r2
 8004338:	d902      	bls.n	8004340 <memmove+0x10>
 800433a:	4284      	cmp	r4, r0
 800433c:	4623      	mov	r3, r4
 800433e:	d807      	bhi.n	8004350 <memmove+0x20>
 8004340:	1e43      	subs	r3, r0, #1
 8004342:	42a1      	cmp	r1, r4
 8004344:	d008      	beq.n	8004358 <memmove+0x28>
 8004346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800434a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800434e:	e7f8      	b.n	8004342 <memmove+0x12>
 8004350:	4402      	add	r2, r0
 8004352:	4601      	mov	r1, r0
 8004354:	428a      	cmp	r2, r1
 8004356:	d100      	bne.n	800435a <memmove+0x2a>
 8004358:	bd10      	pop	{r4, pc}
 800435a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800435e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004362:	e7f7      	b.n	8004354 <memmove+0x24>

08004364 <_free_r>:
 8004364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004366:	2900      	cmp	r1, #0
 8004368:	d048      	beq.n	80043fc <_free_r+0x98>
 800436a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800436e:	9001      	str	r0, [sp, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f1a1 0404 	sub.w	r4, r1, #4
 8004376:	bfb8      	it	lt
 8004378:	18e4      	addlt	r4, r4, r3
 800437a:	f000 f8d3 	bl	8004524 <__malloc_lock>
 800437e:	4a20      	ldr	r2, [pc, #128]	; (8004400 <_free_r+0x9c>)
 8004380:	9801      	ldr	r0, [sp, #4]
 8004382:	6813      	ldr	r3, [r2, #0]
 8004384:	4615      	mov	r5, r2
 8004386:	b933      	cbnz	r3, 8004396 <_free_r+0x32>
 8004388:	6063      	str	r3, [r4, #4]
 800438a:	6014      	str	r4, [r2, #0]
 800438c:	b003      	add	sp, #12
 800438e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004392:	f000 b8cd 	b.w	8004530 <__malloc_unlock>
 8004396:	42a3      	cmp	r3, r4
 8004398:	d90b      	bls.n	80043b2 <_free_r+0x4e>
 800439a:	6821      	ldr	r1, [r4, #0]
 800439c:	1862      	adds	r2, r4, r1
 800439e:	4293      	cmp	r3, r2
 80043a0:	bf04      	itt	eq
 80043a2:	681a      	ldreq	r2, [r3, #0]
 80043a4:	685b      	ldreq	r3, [r3, #4]
 80043a6:	6063      	str	r3, [r4, #4]
 80043a8:	bf04      	itt	eq
 80043aa:	1852      	addeq	r2, r2, r1
 80043ac:	6022      	streq	r2, [r4, #0]
 80043ae:	602c      	str	r4, [r5, #0]
 80043b0:	e7ec      	b.n	800438c <_free_r+0x28>
 80043b2:	461a      	mov	r2, r3
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	b10b      	cbz	r3, 80043bc <_free_r+0x58>
 80043b8:	42a3      	cmp	r3, r4
 80043ba:	d9fa      	bls.n	80043b2 <_free_r+0x4e>
 80043bc:	6811      	ldr	r1, [r2, #0]
 80043be:	1855      	adds	r5, r2, r1
 80043c0:	42a5      	cmp	r5, r4
 80043c2:	d10b      	bne.n	80043dc <_free_r+0x78>
 80043c4:	6824      	ldr	r4, [r4, #0]
 80043c6:	4421      	add	r1, r4
 80043c8:	1854      	adds	r4, r2, r1
 80043ca:	42a3      	cmp	r3, r4
 80043cc:	6011      	str	r1, [r2, #0]
 80043ce:	d1dd      	bne.n	800438c <_free_r+0x28>
 80043d0:	681c      	ldr	r4, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	6053      	str	r3, [r2, #4]
 80043d6:	4421      	add	r1, r4
 80043d8:	6011      	str	r1, [r2, #0]
 80043da:	e7d7      	b.n	800438c <_free_r+0x28>
 80043dc:	d902      	bls.n	80043e4 <_free_r+0x80>
 80043de:	230c      	movs	r3, #12
 80043e0:	6003      	str	r3, [r0, #0]
 80043e2:	e7d3      	b.n	800438c <_free_r+0x28>
 80043e4:	6825      	ldr	r5, [r4, #0]
 80043e6:	1961      	adds	r1, r4, r5
 80043e8:	428b      	cmp	r3, r1
 80043ea:	bf04      	itt	eq
 80043ec:	6819      	ldreq	r1, [r3, #0]
 80043ee:	685b      	ldreq	r3, [r3, #4]
 80043f0:	6063      	str	r3, [r4, #4]
 80043f2:	bf04      	itt	eq
 80043f4:	1949      	addeq	r1, r1, r5
 80043f6:	6021      	streq	r1, [r4, #0]
 80043f8:	6054      	str	r4, [r2, #4]
 80043fa:	e7c7      	b.n	800438c <_free_r+0x28>
 80043fc:	b003      	add	sp, #12
 80043fe:	bd30      	pop	{r4, r5, pc}
 8004400:	200010b0 	.word	0x200010b0

08004404 <_malloc_r>:
 8004404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004406:	1ccd      	adds	r5, r1, #3
 8004408:	f025 0503 	bic.w	r5, r5, #3
 800440c:	3508      	adds	r5, #8
 800440e:	2d0c      	cmp	r5, #12
 8004410:	bf38      	it	cc
 8004412:	250c      	movcc	r5, #12
 8004414:	2d00      	cmp	r5, #0
 8004416:	4606      	mov	r6, r0
 8004418:	db01      	blt.n	800441e <_malloc_r+0x1a>
 800441a:	42a9      	cmp	r1, r5
 800441c:	d903      	bls.n	8004426 <_malloc_r+0x22>
 800441e:	230c      	movs	r3, #12
 8004420:	6033      	str	r3, [r6, #0]
 8004422:	2000      	movs	r0, #0
 8004424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004426:	f000 f87d 	bl	8004524 <__malloc_lock>
 800442a:	4921      	ldr	r1, [pc, #132]	; (80044b0 <_malloc_r+0xac>)
 800442c:	680a      	ldr	r2, [r1, #0]
 800442e:	4614      	mov	r4, r2
 8004430:	b99c      	cbnz	r4, 800445a <_malloc_r+0x56>
 8004432:	4f20      	ldr	r7, [pc, #128]	; (80044b4 <_malloc_r+0xb0>)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	b923      	cbnz	r3, 8004442 <_malloc_r+0x3e>
 8004438:	4621      	mov	r1, r4
 800443a:	4630      	mov	r0, r6
 800443c:	f000 f862 	bl	8004504 <_sbrk_r>
 8004440:	6038      	str	r0, [r7, #0]
 8004442:	4629      	mov	r1, r5
 8004444:	4630      	mov	r0, r6
 8004446:	f000 f85d 	bl	8004504 <_sbrk_r>
 800444a:	1c43      	adds	r3, r0, #1
 800444c:	d123      	bne.n	8004496 <_malloc_r+0x92>
 800444e:	230c      	movs	r3, #12
 8004450:	6033      	str	r3, [r6, #0]
 8004452:	4630      	mov	r0, r6
 8004454:	f000 f86c 	bl	8004530 <__malloc_unlock>
 8004458:	e7e3      	b.n	8004422 <_malloc_r+0x1e>
 800445a:	6823      	ldr	r3, [r4, #0]
 800445c:	1b5b      	subs	r3, r3, r5
 800445e:	d417      	bmi.n	8004490 <_malloc_r+0x8c>
 8004460:	2b0b      	cmp	r3, #11
 8004462:	d903      	bls.n	800446c <_malloc_r+0x68>
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	441c      	add	r4, r3
 8004468:	6025      	str	r5, [r4, #0]
 800446a:	e004      	b.n	8004476 <_malloc_r+0x72>
 800446c:	6863      	ldr	r3, [r4, #4]
 800446e:	42a2      	cmp	r2, r4
 8004470:	bf0c      	ite	eq
 8004472:	600b      	streq	r3, [r1, #0]
 8004474:	6053      	strne	r3, [r2, #4]
 8004476:	4630      	mov	r0, r6
 8004478:	f000 f85a 	bl	8004530 <__malloc_unlock>
 800447c:	f104 000b 	add.w	r0, r4, #11
 8004480:	1d23      	adds	r3, r4, #4
 8004482:	f020 0007 	bic.w	r0, r0, #7
 8004486:	1ac2      	subs	r2, r0, r3
 8004488:	d0cc      	beq.n	8004424 <_malloc_r+0x20>
 800448a:	1a1b      	subs	r3, r3, r0
 800448c:	50a3      	str	r3, [r4, r2]
 800448e:	e7c9      	b.n	8004424 <_malloc_r+0x20>
 8004490:	4622      	mov	r2, r4
 8004492:	6864      	ldr	r4, [r4, #4]
 8004494:	e7cc      	b.n	8004430 <_malloc_r+0x2c>
 8004496:	1cc4      	adds	r4, r0, #3
 8004498:	f024 0403 	bic.w	r4, r4, #3
 800449c:	42a0      	cmp	r0, r4
 800449e:	d0e3      	beq.n	8004468 <_malloc_r+0x64>
 80044a0:	1a21      	subs	r1, r4, r0
 80044a2:	4630      	mov	r0, r6
 80044a4:	f000 f82e 	bl	8004504 <_sbrk_r>
 80044a8:	3001      	adds	r0, #1
 80044aa:	d1dd      	bne.n	8004468 <_malloc_r+0x64>
 80044ac:	e7cf      	b.n	800444e <_malloc_r+0x4a>
 80044ae:	bf00      	nop
 80044b0:	200010b0 	.word	0x200010b0
 80044b4:	200010b4 	.word	0x200010b4

080044b8 <_realloc_r>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	4607      	mov	r7, r0
 80044bc:	4614      	mov	r4, r2
 80044be:	460e      	mov	r6, r1
 80044c0:	b921      	cbnz	r1, 80044cc <_realloc_r+0x14>
 80044c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044c6:	4611      	mov	r1, r2
 80044c8:	f7ff bf9c 	b.w	8004404 <_malloc_r>
 80044cc:	b922      	cbnz	r2, 80044d8 <_realloc_r+0x20>
 80044ce:	f7ff ff49 	bl	8004364 <_free_r>
 80044d2:	4625      	mov	r5, r4
 80044d4:	4628      	mov	r0, r5
 80044d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044d8:	f000 f830 	bl	800453c <_malloc_usable_size_r>
 80044dc:	42a0      	cmp	r0, r4
 80044de:	d20f      	bcs.n	8004500 <_realloc_r+0x48>
 80044e0:	4621      	mov	r1, r4
 80044e2:	4638      	mov	r0, r7
 80044e4:	f7ff ff8e 	bl	8004404 <_malloc_r>
 80044e8:	4605      	mov	r5, r0
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d0f2      	beq.n	80044d4 <_realloc_r+0x1c>
 80044ee:	4631      	mov	r1, r6
 80044f0:	4622      	mov	r2, r4
 80044f2:	f7ff ff0f 	bl	8004314 <memcpy>
 80044f6:	4631      	mov	r1, r6
 80044f8:	4638      	mov	r0, r7
 80044fa:	f7ff ff33 	bl	8004364 <_free_r>
 80044fe:	e7e9      	b.n	80044d4 <_realloc_r+0x1c>
 8004500:	4635      	mov	r5, r6
 8004502:	e7e7      	b.n	80044d4 <_realloc_r+0x1c>

08004504 <_sbrk_r>:
 8004504:	b538      	push	{r3, r4, r5, lr}
 8004506:	4d06      	ldr	r5, [pc, #24]	; (8004520 <_sbrk_r+0x1c>)
 8004508:	2300      	movs	r3, #0
 800450a:	4604      	mov	r4, r0
 800450c:	4608      	mov	r0, r1
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	f7fc fc84 	bl	8000e1c <_sbrk>
 8004514:	1c43      	adds	r3, r0, #1
 8004516:	d102      	bne.n	800451e <_sbrk_r+0x1a>
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	b103      	cbz	r3, 800451e <_sbrk_r+0x1a>
 800451c:	6023      	str	r3, [r4, #0]
 800451e:	bd38      	pop	{r3, r4, r5, pc}
 8004520:	200011ac 	.word	0x200011ac

08004524 <__malloc_lock>:
 8004524:	4801      	ldr	r0, [pc, #4]	; (800452c <__malloc_lock+0x8>)
 8004526:	f000 b811 	b.w	800454c <__retarget_lock_acquire_recursive>
 800452a:	bf00      	nop
 800452c:	200011b4 	.word	0x200011b4

08004530 <__malloc_unlock>:
 8004530:	4801      	ldr	r0, [pc, #4]	; (8004538 <__malloc_unlock+0x8>)
 8004532:	f000 b80c 	b.w	800454e <__retarget_lock_release_recursive>
 8004536:	bf00      	nop
 8004538:	200011b4 	.word	0x200011b4

0800453c <_malloc_usable_size_r>:
 800453c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004540:	1f18      	subs	r0, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	bfbc      	itt	lt
 8004546:	580b      	ldrlt	r3, [r1, r0]
 8004548:	18c0      	addlt	r0, r0, r3
 800454a:	4770      	bx	lr

0800454c <__retarget_lock_acquire_recursive>:
 800454c:	4770      	bx	lr

0800454e <__retarget_lock_release_recursive>:
 800454e:	4770      	bx	lr

08004550 <_init>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr

0800455c <_fini>:
 800455c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800455e:	bf00      	nop
 8004560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004562:	bc08      	pop	{r3}
 8004564:	469e      	mov	lr, r3
 8004566:	4770      	bx	lr
