
CanReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000775c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  080078f0  080078f0  000178f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e14  08007e14  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e1c  08007e1c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e1c  08007e1c  00017e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08007e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d10  2000020c  08008030  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f1c  08008030  00020f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff16  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002582  00000000  00000000  00030152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c08  00000000  00000000  000326d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  000332e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021931  00000000  00000000  00033df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb11  00000000  00000000  00055721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5093  00000000  00000000  00062232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001272c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004168  00000000  00000000  00127318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080078d4 	.word	0x080078d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	080078d4 	.word	0x080078d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <sendData>:
#define PACKAGE_SIZE 8


/* USER CODE END PV */

void sendData(CAN_HandleTypeDef *handler, uint32_t TxID, uint16_t numOfBytes, uint8_t *dataArray, CAN_TxHeaderTypeDef *transmitHeader) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	4613      	mov	r3, r2
 8000eae:	80fb      	strh	r3, [r7, #6]
	uint8_t dataToMB[PACKAGE_SIZE] = {0};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
	uint32_t randoMailBox;
	transmitHeader->ExtId = TxID;
 8000eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	605a      	str	r2, [r3, #4]

if (numOfBytes % PACKAGE_SIZE == 0)
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d131      	bne.n	8000f2e <sendData+0x8e>
{
	for (int i = 0; i < numOfBytes/PACKAGE_SIZE; i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8000ece:	e026      	b.n	8000f1e <sendData+0x7e>
		 HAL_CAN_StateTypeDef state = handler->State;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		while (HAL_CAN_GetTxMailboxesFreeLevel(handler) == 0) {}
 8000eda:	bf00      	nop
 8000edc:	68f8      	ldr	r0, [r7, #12]
 8000ede:	f001 f9ef 	bl	80022c0 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d0f9      	beq.n	8000edc <sendData+0x3c>
		if (messageSplitter(dataArray, dataToMB, i)) {
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	f107 0318 	add.w	r3, r7, #24
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6838      	ldr	r0, [r7, #0]
 8000ef4:	f000 f81f 	bl	8000f36 <messageSplitter>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d00c      	beq.n	8000f18 <sendData+0x78>
			if (HAL_CAN_AddTxMessage(handler, transmitHeader, dataToMB, &randoMailBox) != HAL_OK) {
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	f107 0218 	add.w	r2, r7, #24
 8000f06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f001 f8fe 	bl	800210a <HAL_CAN_AddTxMessage>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <sendData+0x78>
				Error_Handler();
 8000f14:	f000 fc36 	bl	8001784 <Error_Handler>
	for (int i = 0; i < numOfBytes/PACKAGE_SIZE; i++) {
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8000f1e:	88fb      	ldrh	r3, [r7, #6]
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	461a      	mov	r2, r3
 8000f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	dbd1      	blt.n	8000ed0 <sendData+0x30>
 8000f2c:	e000      	b.n	8000f30 <sendData+0x90>
			}
		}
	}

}
else {return 0;}
 8000f2e:	bf00      	nop

}
 8000f30:	3728      	adds	r7, #40	; 0x28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <messageSplitter>:

int messageSplitter(uint8_t *sourceArray, uint8_t *destinationArray, uint8_t position)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b087      	sub	sp, #28
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	4613      	mov	r3, r2
 8000f42:	71fb      	strb	r3, [r7, #7]



	for(int i=0 ; i < PACKAGE_SIZE; i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	e00e      	b.n	8000f68 <messageSplitter+0x32>
	{
		*(destinationArray + i) = *(sourceArray + (position * 8) + i);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	4413      	add	r3, r2
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	441a      	add	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	68b9      	ldr	r1, [r7, #8]
 8000f5c:	440b      	add	r3, r1
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	701a      	strb	r2, [r3, #0]
	for(int i=0 ; i < PACKAGE_SIZE; i++)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	dded      	ble.n	8000f4a <messageSplitter+0x14>


}
return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	371c      	adds	r7, #28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <QueueFull>:
 *  Created on: Mar 16, 2021
 *      Author: Mikkel
 */
#include "circle_queue.h"

int QueueFull(struct Queue *q){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	return (((q->pointWR +1) % SIZE_OF_QUEUE) == q->pointRD);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	885b      	ldrh	r3, [r3, #2]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	425a      	negs	r2, r3
 8000f8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f90:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000f94:	bf58      	it	pl
 8000f96:	4253      	negpl	r3, r2
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	8812      	ldrh	r2, [r2, #0]
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	bf0c      	ite	eq
 8000fa0:	2301      	moveq	r3, #1
 8000fa2:	2300      	movne	r3, #0
 8000fa4:	b2db      	uxtb	r3, r3
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr

08000fb2 <StructQueueEmpty>:

int StructQueueFull(struct StructQueue *q){
	return (((q->pointWR +1) % SIZE_OF_STRUCTQUEUE) == q->pointRD);
}

int StructQueueEmpty(struct StructQueue *q){
 8000fb2:	b480      	push	{r7}
 8000fb4:	b083      	sub	sp, #12
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
	return (q->pointWR == q->pointRD);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	885a      	ldrh	r2, [r3, #2]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	881b      	ldrh	r3, [r3, #0]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	bf0c      	ite	eq
 8000fc6:	2301      	moveq	r3, #1
 8000fc8:	2300      	movne	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <LeaveStructQueue>:

	}
	return 1;
}

int LeaveStructQueue(struct StructQueue *q, struct CAN_QUEUE_DATA *data) {
 8000fd8:	b590      	push	{r4, r7, lr}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	if (StructQueueEmpty(q)){
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffe5 	bl	8000fb2 <StructQueueEmpty>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <LeaveStructQueue+0x1a>
		return 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e01e      	b.n	8001030 <LeaveStructQueue+0x58>
	}
	else {
		*data = q->queue[q->pointRD];
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	6838      	ldr	r0, [r7, #0]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	440b      	add	r3, r1
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	4604      	mov	r4, r0
 8001008:	3304      	adds	r3, #4
 800100a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800100e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if((q->pointRD + 1) ==SIZE_OF_STRUCTQUEUE){
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	881b      	ldrh	r3, [r3, #0]
 8001016:	2b9f      	cmp	r3, #159	; 0x9f
 8001018:	d103      	bne.n	8001022 <LeaveStructQueue+0x4a>
			q->pointRD = 0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	801a      	strh	r2, [r3, #0]
 8001020:	e005      	b.n	800102e <LeaveStructQueue+0x56>
		}
		else{
			q->pointRD +=1;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	b29a      	uxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	801a      	strh	r2, [r3, #0]
		}
	}
	return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bd90      	pop	{r4, r7, pc}

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f000 fdc2 	bl	8001bc6 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 f827 	bl	8001094 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f000 f979 	bl	800133c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800104a:	f000 f947 	bl	80012dc <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800104e:	f000 f8a3 	bl	8001198 <MX_CAN1_Init>
 // HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t sendDataArray[PACKAGE_SIZE] = {1, 2, 4, 8, 16, 32, 64, 128};
 8001052:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <main+0x4c>)
 8001054:	463b      	mov	r3, r7
 8001056:	e892 0003 	ldmia.w	r2, {r0, r1}
 800105a:	e883 0003 	stmia.w	r3, {r0, r1}

  while (1)
  {
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 800105e:	2140      	movs	r1, #64	; 0x40
 8001060:	4809      	ldr	r0, [pc, #36]	; (8001088 <main+0x50>)
 8001062:	f001 ff59 	bl	8002f18 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f8      	beq.n	800105e <main+0x26>
		 //transmitData(&GPSDATA);
		 HAL_Delay(200);
 800106c:	20c8      	movs	r0, #200	; 0xc8
 800106e:	f000 fe1f 	bl	8001cb0 <HAL_Delay>
		 sendData(&hcan1, 0x5, PACKAGE_SIZE, sendDataArray, &CanTxHeader);
 8001072:	463b      	mov	r3, r7
 8001074:	4a05      	ldr	r2, [pc, #20]	; (800108c <main+0x54>)
 8001076:	9200      	str	r2, [sp, #0]
 8001078:	2208      	movs	r2, #8
 800107a:	2105      	movs	r1, #5
 800107c:	4804      	ldr	r0, [pc, #16]	; (8001090 <main+0x58>)
 800107e:	f7ff ff0f 	bl	8000ea0 <sendData>
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8001082:	e7ec      	b.n	800105e <main+0x26>
 8001084:	080078f0 	.word	0x080078f0
 8001088:	48000400 	.word	0x48000400
 800108c:	20000e28 	.word	0x20000e28
 8001090:	20000ee0 	.word	0x20000ee0

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b0ac      	sub	sp, #176	; 0xb0
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800109e:	2244      	movs	r2, #68	; 0x44
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f003 fd78 	bl	8004b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	1d3b      	adds	r3, r7, #4
 80010ba:	2254      	movs	r2, #84	; 0x54
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f003 fd6a 	bl	8004b98 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010c4:	f001 ff58 	bl	8002f78 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010c8:	4b32      	ldr	r3, [pc, #200]	; (8001194 <SystemClock_Config+0x100>)
 80010ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010ce:	4a31      	ldr	r2, [pc, #196]	; (8001194 <SystemClock_Config+0x100>)
 80010d0:	f023 0318 	bic.w	r3, r3, #24
 80010d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010d8:	2314      	movs	r3, #20
 80010da:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010dc:	2301      	movs	r3, #1
 80010de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e0:	2301      	movs	r3, #1
 80010e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010ec:	2360      	movs	r3, #96	; 0x60
 80010ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f2:	2302      	movs	r3, #2
 80010f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010f8:	2301      	movs	r3, #1
 80010fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010fe:	2301      	movs	r3, #1
 8001100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001104:	2324      	movs	r3, #36	; 0x24
 8001106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800110a:	2307      	movs	r3, #7
 800110c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001110:	2302      	movs	r3, #2
 8001112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001120:	4618      	mov	r0, r3
 8001122:	f001 ff9d 	bl	8003060 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800112c:	f000 fb2a 	bl	8001784 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2303      	movs	r3, #3
 8001136:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001144:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001148:	2104      	movs	r1, #4
 800114a:	4618      	mov	r0, r3
 800114c:	f002 fba8 	bl	80038a0 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001156:	f000 fb15 	bl	8001784 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800115a:	2302      	movs	r3, #2
 800115c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800115e:	2300      	movs	r3, #0
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	4618      	mov	r0, r3
 8001166:	f002 fda1 	bl	8003cac <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001170:	f000 fb08 	bl	8001784 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001174:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001178:	f001 ff1c 	bl	8002fb4 <HAL_PWREx_ControlVoltageScaling>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001182:	f000 faff 	bl	8001784 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001186:	f002 ff85 	bl	8004094 <HAL_RCCEx_EnableMSIPLLMode>
}
 800118a:	bf00      	nop
 800118c:	37b0      	adds	r7, #176	; 0xb0
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40021000 	.word	0x40021000

08001198 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	  uint32_t ext_id = 0x00000000;							// Den største værdi der kan være på MSB er 1
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
	  uint32_t mask = 0xFFFFFFE0;
 80011a2:	f06f 031f 	mvn.w	r3, #31
 80011a6:	60bb      	str	r3, [r7, #8]
	  CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;			// Vi vælger at bruge mask mode
 80011a8:	4b46      	ldr	r3, [pc, #280]	; (80012c4 <MX_CAN1_Init+0x12c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	619a      	str	r2, [r3, #24]
	  CanFilter.FilterIdHigh = (ext_id & 0x1FFFFFFF) >> 13; // (ext_id << 3) >> 16;						// Da vi har 32 bit ID, er dette de 16 MSB af ID
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	0b5b      	lsrs	r3, r3, #13
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	4a43      	ldr	r2, [pc, #268]	; (80012c4 <MX_CAN1_Init+0x12c>)
 80011b6:	6013      	str	r3, [r2, #0]
	  CanFilter.FilterIdLow =  (ext_id << 3) | CAN_ID_EXT;	// Da vi har 32 bit ID, er dette de 16 LSB af ID
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	4a40      	ldr	r2, [pc, #256]	; (80012c4 <MX_CAN1_Init+0x12c>)
 80011c2:	6053      	str	r3, [r2, #4]
	  CanFilter.FilterMaskIdHigh = (mask & 0x1FFFFFFF) >> 13;// << 5;					// Maskens 16 MSB
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	0b5b      	lsrs	r3, r3, #13
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4a3e      	ldr	r2, [pc, #248]	; (80012c4 <MX_CAN1_Init+0x12c>)
 80011cc:	6093      	str	r3, [r2, #8]
	  CanFilter.FilterMaskIdLow = (mask << 3);// << 5 | 0x10;					// Maskens 16 LSB
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	4a3c      	ldr	r2, [pc, #240]	; (80012c4 <MX_CAN1_Init+0x12c>)
 80011d4:	60d3      	str	r3, [r2, #12]
	  CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;		// ID er et 32 bit-tal
 80011d6:	4b3b      	ldr	r3, [pc, #236]	; (80012c4 <MX_CAN1_Init+0x12c>)
 80011d8:	2201      	movs	r2, #1
 80011da:	61da      	str	r2, [r3, #28]
	  CanFilter.FilterActivation = ENABLE;					// Vi aktiverer filteret
 80011dc:	4b39      	ldr	r3, [pc, #228]	; (80012c4 <MX_CAN1_Init+0x12c>)
 80011de:	2201      	movs	r2, #1
 80011e0:	621a      	str	r2, [r3, #32]
	  CanFilter.FilterBank = 0;								// Vi vælger filter 0 ud af 14 mulige filtre
 80011e2:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <MX_CAN1_Init+0x12c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	615a      	str	r2, [r3, #20]
	  CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;	// Vi vælger FIFO0 til forskel for FIFO1
 80011e8:	4b36      	ldr	r3, [pc, #216]	; (80012c4 <MX_CAN1_Init+0x12c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]


	  CanRxHeader.DLC = PACKAGE_SIZE;
 80011ee:	4b36      	ldr	r3, [pc, #216]	; (80012c8 <MX_CAN1_Init+0x130>)
 80011f0:	2208      	movs	r2, #8
 80011f2:	611a      	str	r2, [r3, #16]
	  CanRxHeader.ExtId = 0x0;
 80011f4:	4b34      	ldr	r3, [pc, #208]	; (80012c8 <MX_CAN1_Init+0x130>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	605a      	str	r2, [r3, #4]
	  CanRxHeader.IDE = CAN_ID_EXT;
 80011fa:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <MX_CAN1_Init+0x130>)
 80011fc:	2204      	movs	r2, #4
 80011fe:	609a      	str	r2, [r3, #8]
	  CanRxHeader.RTR = CAN_RTR_DATA;
 8001200:	4b31      	ldr	r3, [pc, #196]	; (80012c8 <MX_CAN1_Init+0x130>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
	  CanRxHeader.FilterMatchIndex = 0x00;
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <MX_CAN1_Init+0x130>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]

	  CanTxHeader.DLC = PACKAGE_SIZE;                        // Der kommer 8 byte som data i beskeden
 800120c:	4b2f      	ldr	r3, [pc, #188]	; (80012cc <MX_CAN1_Init+0x134>)
 800120e:	2208      	movs	r2, #8
 8001210:	611a      	str	r2, [r3, #16]
	  CanTxHeader.ExtId = 0x00000000;                        // 32 bit ID (29 er identifier)
 8001212:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <MX_CAN1_Init+0x134>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
	  CanTxHeader.IDE = CAN_ID_EXT;                            // Vi har et extended ID = 32 bit til forskel fra standard på 16 bit (11 er identifier)
 8001218:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <MX_CAN1_Init+0x134>)
 800121a:	2204      	movs	r2, #4
 800121c:	609a      	str	r2, [r3, #8]
	  CanTxHeader.RTR = CAN_RTR_DATA;                        // Vi sender data
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <MX_CAN1_Init+0x134>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
	  CanTxHeader.TransmitGlobalTime = DISABLE;                // Der skal IKKE sendes et timestamp med hver besked
 8001224:	4b29      	ldr	r3, [pc, #164]	; (80012cc <MX_CAN1_Init+0x134>)
 8001226:	2200      	movs	r2, #0
 8001228:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
	  __HAL_RCC_CAN1_CLK_ENABLE();
 800122a:	4b29      	ldr	r3, [pc, #164]	; (80012d0 <MX_CAN1_Init+0x138>)
 800122c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122e:	4a28      	ldr	r2, [pc, #160]	; (80012d0 <MX_CAN1_Init+0x138>)
 8001230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
 8001236:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <MX_CAN1_Init+0x138>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001242:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <MX_CAN1_Init+0x13c>)
 8001244:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <MX_CAN1_Init+0x140>)
 8001246:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <MX_CAN1_Init+0x13c>)
 800124a:	2212      	movs	r2, #18
 800124c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_CAN1_Init+0x13c>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <MX_CAN1_Init+0x13c>)
 8001256:	2200      	movs	r2, #0
 8001258:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_CAN1_Init+0x13c>)
 800125c:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001260:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_CAN1_Init+0x13c>)
 8001264:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001268:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <MX_CAN1_Init+0x13c>)
 800126c:	2200      	movs	r2, #0
 800126e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001270:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_CAN1_Init+0x13c>)
 8001272:	2200      	movs	r2, #0
 8001274:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001276:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <MX_CAN1_Init+0x13c>)
 8001278:	2200      	movs	r2, #0
 800127a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_CAN1_Init+0x13c>)
 800127e:	2201      	movs	r2, #1
 8001280:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <MX_CAN1_Init+0x13c>)
 8001284:	2200      	movs	r2, #0
 8001286:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001288:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <MX_CAN1_Init+0x13c>)
 800128a:	2201      	movs	r2, #1
 800128c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800128e:	4811      	ldr	r0, [pc, #68]	; (80012d4 <MX_CAN1_Init+0x13c>)
 8001290:	f000 fd32 	bl	8001cf8 <HAL_CAN_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_CAN1_Init+0x106>
  {
    Error_Handler();
 800129a:	f000 fa73 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

    while (HAL_CAN_ConfigFilter(&hcan1, &CanFilter) != HAL_OK) {}
 800129e:	bf00      	nop
 80012a0:	4908      	ldr	r1, [pc, #32]	; (80012c4 <MX_CAN1_Init+0x12c>)
 80012a2:	480c      	ldr	r0, [pc, #48]	; (80012d4 <MX_CAN1_Init+0x13c>)
 80012a4:	f000 fe23 	bl	8001eee <HAL_CAN_ConfigFilter>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f8      	bne.n	80012a0 <MX_CAN1_Init+0x108>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80012ae:	2102      	movs	r1, #2
 80012b0:	4808      	ldr	r0, [pc, #32]	; (80012d4 <MX_CAN1_Init+0x13c>)
 80012b2:	f001 f974 	bl	800259e <HAL_CAN_ActivateNotification>
    HAL_CAN_Start(&hcan1);
 80012b6:	4807      	ldr	r0, [pc, #28]	; (80012d4 <MX_CAN1_Init+0x13c>)
 80012b8:	f000 fee3 	bl	8002082 <HAL_CAN_Start>
  /* USER CODE END CAN1_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000e00 	.word	0x20000e00
 80012c8:	20000e40 	.word	0x20000e40
 80012cc:	20000e28 	.word	0x20000e28
 80012d0:	40021000 	.word	0x40021000
 80012d4:	20000ee0 	.word	0x20000ee0
 80012d8:	40006400 	.word	0x40006400

080012dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <MX_USART2_UART_Init+0x58>)
 80012e2:	4a15      	ldr	r2, [pc, #84]	; (8001338 <MX_USART2_UART_Init+0x5c>)
 80012e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <MX_USART2_UART_Init+0x58>)
 80012e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <MX_USART2_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <MX_USART2_UART_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_USART2_UART_Init+0x58>)
 8001302:	220c      	movs	r2, #12
 8001304:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_USART2_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_USART2_UART_Init+0x58>)
 8001314:	2200      	movs	r2, #0
 8001316:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_USART2_UART_Init+0x58>)
 800131a:	2200      	movs	r2, #0
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_USART2_UART_Init+0x58>)
 8001320:	f002 ffba 	bl	8004298 <HAL_UART_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800132a:	f000 fa2b 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000e5c 	.word	0x20000e5c
 8001338:	40004400 	.word	0x40004400

0800133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	f107 030c 	add.w	r3, r7, #12
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <MX_GPIO_Init+0xc0>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a29      	ldr	r2, [pc, #164]	; (80013fc <MX_GPIO_Init+0xc0>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <MX_GPIO_Init+0xc0>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <MX_GPIO_Init+0xc0>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a23      	ldr	r2, [pc, #140]	; (80013fc <MX_GPIO_Init+0xc0>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <MX_GPIO_Init+0xc0>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_GPIO_Init+0xc0>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <MX_GPIO_Init+0xc0>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_GPIO_Init+0xc0>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2189      	movs	r1, #137	; 0x89
 800139e:	4818      	ldr	r0, [pc, #96]	; (8001400 <MX_GPIO_Init+0xc4>)
 80013a0:	f001 fdd2 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013a4:	2340      	movs	r3, #64	; 0x40
 80013a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ac:	2302      	movs	r3, #2
 80013ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f001 fc43 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 80013be:	2389      	movs	r3, #137	; 0x89
 80013c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 030c 	add.w	r3, r7, #12
 80013d2:	4619      	mov	r1, r3
 80013d4:	480a      	ldr	r0, [pc, #40]	; (8001400 <MX_GPIO_Init+0xc4>)
 80013d6:	f001 fc35 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013e2:	2302      	movs	r3, #2
 80013e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_GPIO_Init+0xc4>)
 80013ee:	f001 fc29 	bl	8002c44 <HAL_GPIO_Init>

}
 80013f2:	bf00      	nop
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000400 	.word	0x48000400

08001404 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af02      	add	r7, sp, #8
 800140a:	6078      	str	r0, [r7, #4]
	if (CAN_TX_QUEUE.pointRD == CAN_TX_QUEUE.pointWR){
 800140c:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 800140e:	881a      	ldrh	r2, [r3, #0]
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 8001412:	885b      	ldrh	r3, [r3, #2]
 8001414:	429a      	cmp	r2, r3
 8001416:	d103      	bne.n	8001420 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>
		CAN_Mailbox0Empty = true;
 8001418:	4b0b      	ldr	r3, [pc, #44]	; (8001448 <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 800141a:	2201      	movs	r2, #1
 800141c:	701a      	strb	r2, [r3, #0]
	}else {
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
		sendData(&hcan1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, &CanTxHeader);
	}
}
 800141e:	e00c      	b.n	800143a <HAL_CAN_TxMailbox0CompleteCallback+0x36>
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
 8001420:	490a      	ldr	r1, [pc, #40]	; (800144c <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 8001422:	4808      	ldr	r0, [pc, #32]	; (8001444 <HAL_CAN_TxMailbox0CompleteCallback+0x40>)
 8001424:	f7ff fdd8 	bl	8000fd8 <LeaveStructQueue>
		sendData(&hcan1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, &CanTxHeader);
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 800142a:	6819      	ldr	r1, [r3, #0]
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_CAN_TxMailbox0CompleteCallback+0x4c>)
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_CAN_TxMailbox0CompleteCallback+0x50>)
 8001432:	2208      	movs	r2, #8
 8001434:	4808      	ldr	r0, [pc, #32]	; (8001458 <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 8001436:	f7ff fd33 	bl	8000ea0 <sendData>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000062c 	.word	0x2000062c
 8001448:	20000000 	.word	0x20000000
 800144c:	20000db0 	.word	0x20000db0
 8001450:	20000e28 	.word	0x20000e28
 8001454:	20000db4 	.word	0x20000db4
 8001458:	20000ee0 	.word	0x20000ee0

0800145c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af02      	add	r7, sp, #8
 8001462:	6078      	str	r0, [r7, #4]
	if (CAN_TX_QUEUE.pointRD == CAN_TX_QUEUE.pointWR){
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <HAL_CAN_TxMailbox1CompleteCallback+0x40>)
 8001466:	881a      	ldrh	r2, [r3, #0]
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_CAN_TxMailbox1CompleteCallback+0x40>)
 800146a:	885b      	ldrh	r3, [r3, #2]
 800146c:	429a      	cmp	r2, r3
 800146e:	d103      	bne.n	8001478 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>
		CAN_Mailbox1Empty = true;
 8001470:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <HAL_CAN_TxMailbox1CompleteCallback+0x44>)
 8001472:	2201      	movs	r2, #1
 8001474:	701a      	strb	r2, [r3, #0]
	}else {
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
		sendData(&hcan1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, &CanTxHeader);
	}
}
 8001476:	e00c      	b.n	8001492 <HAL_CAN_TxMailbox1CompleteCallback+0x36>
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
 8001478:	490a      	ldr	r1, [pc, #40]	; (80014a4 <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 800147a:	4808      	ldr	r0, [pc, #32]	; (800149c <HAL_CAN_TxMailbox1CompleteCallback+0x40>)
 800147c:	f7ff fdac 	bl	8000fd8 <LeaveStructQueue>
		sendData(&hcan1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, &CanTxHeader);
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_CAN_TxMailbox1CompleteCallback+0x4c>)
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <HAL_CAN_TxMailbox1CompleteCallback+0x50>)
 800148a:	2208      	movs	r2, #8
 800148c:	4808      	ldr	r0, [pc, #32]	; (80014b0 <HAL_CAN_TxMailbox1CompleteCallback+0x54>)
 800148e:	f7ff fd07 	bl	8000ea0 <sendData>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000062c 	.word	0x2000062c
 80014a0:	20000001 	.word	0x20000001
 80014a4:	20000db0 	.word	0x20000db0
 80014a8:	20000e28 	.word	0x20000e28
 80014ac:	20000db4 	.word	0x20000db4
 80014b0:	20000ee0 	.word	0x20000ee0

080014b4 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	6078      	str	r0, [r7, #4]
	if (CAN_TX_QUEUE.pointRD == CAN_TX_QUEUE.pointWR){
 80014bc:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_CAN_TxMailbox2CompleteCallback+0x40>)
 80014be:	881a      	ldrh	r2, [r3, #0]
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <HAL_CAN_TxMailbox2CompleteCallback+0x40>)
 80014c2:	885b      	ldrh	r3, [r3, #2]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d103      	bne.n	80014d0 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>
		CAN_Mailbox2Empty = true;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_CAN_TxMailbox2CompleteCallback+0x44>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	701a      	strb	r2, [r3, #0]
	}else {
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
		sendData(&hcan1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, &CanTxHeader);
	}
}
 80014ce:	e00c      	b.n	80014ea <HAL_CAN_TxMailbox2CompleteCallback+0x36>
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
 80014d0:	490a      	ldr	r1, [pc, #40]	; (80014fc <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 80014d2:	4808      	ldr	r0, [pc, #32]	; (80014f4 <HAL_CAN_TxMailbox2CompleteCallback+0x40>)
 80014d4:	f7ff fd80 	bl	8000fd8 <LeaveStructQueue>
		sendData(&hcan1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, &CanTxHeader);
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 80014da:	6819      	ldr	r1, [r3, #0]
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <HAL_CAN_TxMailbox2CompleteCallback+0x4c>)
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_CAN_TxMailbox2CompleteCallback+0x50>)
 80014e2:	2208      	movs	r2, #8
 80014e4:	4808      	ldr	r0, [pc, #32]	; (8001508 <HAL_CAN_TxMailbox2CompleteCallback+0x54>)
 80014e6:	f7ff fcdb 	bl	8000ea0 <sendData>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000062c 	.word	0x2000062c
 80014f8:	20000002 	.word	0x20000002
 80014fc:	20000db0 	.word	0x20000db0
 8001500:	20000e28 	.word	0x20000e28
 8001504:	20000db4 	.word	0x20000db4
 8001508:	20000ee0 	.word	0x20000ee0

0800150c <receiveData>:

void receiveData() {
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
    uint8_t buffer[PACKAGE_SIZE] = {0};
 8001512:	2300      	movs	r3, #0
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]

    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 800151a:	e00f      	b.n	800153c <receiveData+0x30>
        if (!QueueFull(&queueCANRX)) { // Hvis køen ikke er fuld - Hvis der er en plads til at modtage en besked
 800151c:	480d      	ldr	r0, [pc, #52]	; (8001554 <receiveData+0x48>)
 800151e:	f7ff fd2d 	bl	8000f7c <QueueFull>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d109      	bne.n	800153c <receiveData+0x30>
            HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CanRxHeader, buffer); // Modtag beskeden og læg den i buffer
 8001528:	463b      	mov	r3, r7
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <receiveData+0x4c>)
 800152c:	2100      	movs	r1, #0
 800152e:	480b      	ldr	r0, [pc, #44]	; (800155c <receiveData+0x50>)
 8001530:	f000 fefb 	bl	800232a <HAL_CAN_GetRxMessage>
            placeData_1(buffer);
 8001534:	463b      	mov	r3, r7
 8001536:	4618      	mov	r0, r3
 8001538:	f000 f812 	bl	8001560 <placeData_1>
    while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 800153c:	2100      	movs	r1, #0
 800153e:	4807      	ldr	r0, [pc, #28]	; (800155c <receiveData+0x50>)
 8001540:	f001 f805 	bl	800254e <HAL_CAN_GetRxFifoFillLevel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1e8      	bne.n	800151c <receiveData+0x10>
            for(int i = 0; i < PACKAGE_SIZE; i++){
                EnterQueue(&queueCANRX, buffer[i]); // Læg buffer ind i modtager-queuen
            }*/
        }
    }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000228 	.word	0x20000228
 8001558:	20000e40 	.word	0x20000e40
 800155c:	20000ee0 	.word	0x20000ee0

08001560 <placeData_1>:
	HAL_UART_Transmit(&huart2, "\n", 2, 100);				//Newline
	HAL_UART_Transmit(&huart2, "\r", 2, 100);				//Carriage return

}

void placeData_1( uint8_t *DataPass){
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

	//PLACE GPS DATA

		if(CanRxHeader.ExtId == GPS_ID1){ // [LAT_DIR, LAT]
 8001568:	4b63      	ldr	r3, [pc, #396]	; (80016f8 <placeData_1+0x198>)
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4b63      	ldr	r3, [pc, #396]	; (80016fc <placeData_1+0x19c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d109      	bne.n	8001588 <placeData_1+0x28>
		    memcpy(&GPS_LAT, &DataPass[1], sizeof(GPS_LAT));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3301      	adds	r3, #1
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b60      	ldr	r3, [pc, #384]	; (8001700 <placeData_1+0x1a0>)
 800157e:	601a      	str	r2, [r3, #0]
		    GPS_LAT_DIR = DataPass[0];
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	781a      	ldrb	r2, [r3, #0]
 8001584:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <placeData_1+0x1a4>)
 8001586:	701a      	strb	r2, [r3, #0]
		}

		if(CanRxHeader.ExtId == GPS_ID2){ // [LON_DIR, LON]
 8001588:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <placeData_1+0x198>)
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4b5e      	ldr	r3, [pc, #376]	; (8001708 <placeData_1+0x1a8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d109      	bne.n	80015a8 <placeData_1+0x48>
			memcpy(&GPS_LON, &DataPass[1], sizeof(GPS_LON));
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3301      	adds	r3, #1
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	4b5b      	ldr	r3, [pc, #364]	; (800170c <placeData_1+0x1ac>)
 800159e:	601a      	str	r2, [r3, #0]
			GPS_LON_DIR = DataPass[0];
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	781a      	ldrb	r2, [r3, #0]
 80015a4:	4b5a      	ldr	r3, [pc, #360]	; (8001710 <placeData_1+0x1b0>)
 80015a6:	701a      	strb	r2, [r3, #0]
		}

		if(CanRxHeader.ExtId == GPS_ID3){// [QUALITY, HOURS, MINUTES, SEC, HDOP]
 80015a8:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <placeData_1+0x198>)
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <placeData_1+0x1b4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d115      	bne.n	80015e0 <placeData_1+0x80>
			GPS_QUALITY = DataPass[0];
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	781a      	ldrb	r2, [r3, #0]
 80015b8:	4b57      	ldr	r3, [pc, #348]	; (8001718 <placeData_1+0x1b8>)
 80015ba:	701a      	strb	r2, [r3, #0]
			GPS_HOURS = DataPass[1];
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	785a      	ldrb	r2, [r3, #1]
 80015c0:	4b56      	ldr	r3, [pc, #344]	; (800171c <placeData_1+0x1bc>)
 80015c2:	701a      	strb	r2, [r3, #0]
			GPS_MINUTES = DataPass[2];
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	789a      	ldrb	r2, [r3, #2]
 80015c8:	4b55      	ldr	r3, [pc, #340]	; (8001720 <placeData_1+0x1c0>)
 80015ca:	701a      	strb	r2, [r3, #0]
			GPS_SEC = DataPass[3];
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	78da      	ldrb	r2, [r3, #3]
 80015d0:	4b54      	ldr	r3, [pc, #336]	; (8001724 <placeData_1+0x1c4>)
 80015d2:	701a      	strb	r2, [r3, #0]
			memcpy(&GPS_HDOP, &DataPass[4], sizeof(GPS_HDOP));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3304      	adds	r3, #4
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b52      	ldr	r3, [pc, #328]	; (8001728 <placeData_1+0x1c8>)
 80015de:	601a      	str	r2, [r3, #0]
		}

		if(CanRxHeader.ExtId == GPS_ID4){// [ALTITUDE, H_GEOID]
 80015e0:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <placeData_1+0x198>)
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4b51      	ldr	r3, [pc, #324]	; (800172c <placeData_1+0x1cc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d10a      	bne.n	8001602 <placeData_1+0xa2>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
			memcpy(&GPS_ALTITUDE, &DataPass[0], sizeof(GPS_ALTITUDE));
 80015f2:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <placeData_1+0x1d0>)
 80015f4:	601a      	str	r2, [r3, #0]
			memcpy(&GPS_H_GEOID, &DataPass[4], sizeof(GPS_H_GEOID));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3304      	adds	r3, #4
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b4d      	ldr	r3, [pc, #308]	; (8001734 <placeData_1+0x1d4>)
 8001600:	601a      	str	r2, [r3, #0]
		}

	// PLACE MPU DATA
		if(CanRxHeader.ExtId == MPU_ID5){// [ACCELX, ACCELY]
 8001602:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <placeData_1+0x198>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	4b4c      	ldr	r3, [pc, #304]	; (8001738 <placeData_1+0x1d8>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d10a      	bne.n	8001624 <placeData_1+0xc4>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	461a      	mov	r2, r3
			memcpy(&MPU_ACCELX, &DataPass[0], sizeof(MPU_ACCELX));
 8001614:	4b49      	ldr	r3, [pc, #292]	; (800173c <placeData_1+0x1dc>)
 8001616:	601a      	str	r2, [r3, #0]
			memcpy(&MPU_ACCELY, &DataPass[4], sizeof(MPU_ACCELY));
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3304      	adds	r3, #4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b47      	ldr	r3, [pc, #284]	; (8001740 <placeData_1+0x1e0>)
 8001622:	601a      	str	r2, [r3, #0]
		}
		if(CanRxHeader.ExtId == MPU_ID6){// [ACCELZ, GYROX]
 8001624:	4b34      	ldr	r3, [pc, #208]	; (80016f8 <placeData_1+0x198>)
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4b46      	ldr	r3, [pc, #280]	; (8001744 <placeData_1+0x1e4>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	429a      	cmp	r2, r3
 800162e:	d10a      	bne.n	8001646 <placeData_1+0xe6>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
			memcpy(&MPU_ACCELZ, &DataPass[0], sizeof(MPU_ACCELZ));
 8001636:	4b44      	ldr	r3, [pc, #272]	; (8001748 <placeData_1+0x1e8>)
 8001638:	601a      	str	r2, [r3, #0]
			memcpy(&MPU_GYROX, &DataPass[4], sizeof(MPU_GYROX));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3304      	adds	r3, #4
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b42      	ldr	r3, [pc, #264]	; (800174c <placeData_1+0x1ec>)
 8001644:	601a      	str	r2, [r3, #0]
		}
		if(CanRxHeader.ExtId == MPU_ID7){// [GYROY, GYROZ]
 8001646:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <placeData_1+0x198>)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4b41      	ldr	r3, [pc, #260]	; (8001750 <placeData_1+0x1f0>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d10a      	bne.n	8001668 <placeData_1+0x108>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
			memcpy(&MPU_GYROY, &DataPass[0], sizeof(MPU_GYROY));
 8001658:	4b3e      	ldr	r3, [pc, #248]	; (8001754 <placeData_1+0x1f4>)
 800165a:	601a      	str	r2, [r3, #0]
			memcpy(&MPU_GYROZ, &DataPass[4], sizeof(MPU_GYROZ));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3304      	adds	r3, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	4b3c      	ldr	r3, [pc, #240]	; (8001758 <placeData_1+0x1f8>)
 8001666:	601a      	str	r2, [r3, #0]
		}
		if(CanRxHeader.ExtId == MPU_ID8){// [TEMP]
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <placeData_1+0x198>)
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	4b3b      	ldr	r3, [pc, #236]	; (800175c <placeData_1+0x1fc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d104      	bne.n	800167e <placeData_1+0x11e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
			memcpy(&MPU_TEMP, &DataPass[0], sizeof(MPU_TEMP));
 800167a:	4b39      	ldr	r3, [pc, #228]	; (8001760 <placeData_1+0x200>)
 800167c:	601a      	str	r2, [r3, #0]
		}

	// PLACE DUTY CYCLE
		if(CanRxHeader.ExtId == MOTOR_ID9){// [DUTYCYCLE]
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <placeData_1+0x198>)
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	4b38      	ldr	r3, [pc, #224]	; (8001764 <placeData_1+0x204>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d103      	bne.n	8001692 <placeData_1+0x132>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	781a      	ldrb	r2, [r3, #0]
			memcpy(&MOTOR_DUTYCYCLE, &DataPass[0], sizeof(MOTOR_DUTYCYCLE));
 800168e:	4b36      	ldr	r3, [pc, #216]	; (8001768 <placeData_1+0x208>)
 8001690:	701a      	strb	r2, [r3, #0]
		}


	//WATCHDOG
		if(CanRxHeader.ExtId == WATCHDOG_ID10){// [WATCHDOG]
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <placeData_1+0x198>)
 8001694:	685a      	ldr	r2, [r3, #4]
 8001696:	4b35      	ldr	r3, [pc, #212]	; (800176c <placeData_1+0x20c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d128      	bne.n	80016f0 <placeData_1+0x190>
			char str[15] = {0};
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	f8c3 2007 	str.w	r2, [r3, #7]
			sprintf(str, "%s", "WATCHDOG" );
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	4a2e      	ldr	r2, [pc, #184]	; (8001770 <placeData_1+0x210>)
 80016b6:	492f      	ldr	r1, [pc, #188]	; (8001774 <placeData_1+0x214>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 fedf 	bl	800547c <siprintf>
			HAL_UART_Transmit(&huart2, &str, strlen(str), 100);
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fd84 	bl	80001d0 <strlen>
 80016c8:	4603      	mov	r3, r0
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	f107 0108 	add.w	r1, r7, #8
 80016d0:	2364      	movs	r3, #100	; 0x64
 80016d2:	4829      	ldr	r0, [pc, #164]	; (8001778 <placeData_1+0x218>)
 80016d4:	f002 fe2e 	bl	8004334 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "\n", 2, 100);				//Newline
 80016d8:	2364      	movs	r3, #100	; 0x64
 80016da:	2202      	movs	r2, #2
 80016dc:	4927      	ldr	r1, [pc, #156]	; (800177c <placeData_1+0x21c>)
 80016de:	4826      	ldr	r0, [pc, #152]	; (8001778 <placeData_1+0x218>)
 80016e0:	f002 fe28 	bl	8004334 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "\r", 2, 100);				//Carriage return
 80016e4:	2364      	movs	r3, #100	; 0x64
 80016e6:	2202      	movs	r2, #2
 80016e8:	4925      	ldr	r1, [pc, #148]	; (8001780 <placeData_1+0x220>)
 80016ea:	4823      	ldr	r0, [pc, #140]	; (8001778 <placeData_1+0x218>)
 80016ec:	f002 fe22 	bl	8004334 <HAL_UART_Transmit>
		}

}
 80016f0:	bf00      	nop
 80016f2:	3718      	adds	r7, #24
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000e40 	.word	0x20000e40
 80016fc:	20000004 	.word	0x20000004
 8001700:	20000dbc 	.word	0x20000dbc
 8001704:	2000002c 	.word	0x2000002c
 8001708:	20000008 	.word	0x20000008
 800170c:	20000dc0 	.word	0x20000dc0
 8001710:	2000002d 	.word	0x2000002d
 8001714:	2000000c 	.word	0x2000000c
 8001718:	20000dc4 	.word	0x20000dc4
 800171c:	20000dc5 	.word	0x20000dc5
 8001720:	20000dc6 	.word	0x20000dc6
 8001724:	20000dc7 	.word	0x20000dc7
 8001728:	20000dc8 	.word	0x20000dc8
 800172c:	20000010 	.word	0x20000010
 8001730:	20000dcc 	.word	0x20000dcc
 8001734:	20000dd0 	.word	0x20000dd0
 8001738:	20000014 	.word	0x20000014
 800173c:	20000dd4 	.word	0x20000dd4
 8001740:	20000dd8 	.word	0x20000dd8
 8001744:	20000018 	.word	0x20000018
 8001748:	20000ddc 	.word	0x20000ddc
 800174c:	20000de0 	.word	0x20000de0
 8001750:	2000001c 	.word	0x2000001c
 8001754:	20000de4 	.word	0x20000de4
 8001758:	20000de8 	.word	0x20000de8
 800175c:	20000020 	.word	0x20000020
 8001760:	20000dec 	.word	0x20000dec
 8001764:	20000024 	.word	0x20000024
 8001768:	20000df0 	.word	0x20000df0
 800176c:	20000028 	.word	0x20000028
 8001770:	080079d8 	.word	0x080079d8
 8001774:	08007918 	.word	0x08007918
 8001778:	20000e5c 	.word	0x20000e5c
 800177c:	08007920 	.word	0x08007920
 8001780:	08007924 	.word	0x08007924

08001784 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>
	...

08001790 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_MspInit+0x44>)
 8001798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179a:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <HAL_MspInit+0x44>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6613      	str	r3, [r2, #96]	; 0x60
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_MspInit+0x44>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <HAL_MspInit+0x44>)
 80017b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b2:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_MspInit+0x44>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_MspInit+0x44>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	603b      	str	r3, [r7, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_CAN_MspInit+0x90>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d131      	bne.n	800185e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_CAN_MspInit+0x94>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_CAN_MspInit+0x94>)
 8001800:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001804:	6593      	str	r3, [r2, #88]	; 0x58
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_CAN_MspInit+0x94>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_CAN_MspInit+0x94>)
 8001814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <HAL_CAN_MspInit+0x94>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_CAN_MspInit+0x94>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800182a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800182e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001830:	2302      	movs	r3, #2
 8001832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800183c:	2309      	movs	r3, #9
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184a:	f001 f9fb 	bl	8002c44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	2014      	movs	r0, #20
 8001854:	f001 f9bf 	bl	8002bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001858:	2014      	movs	r0, #20
 800185a:	f001 f9d8 	bl	8002c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800185e:	bf00      	nop
 8001860:	3728      	adds	r7, #40	; 0x28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40006400 	.word	0x40006400
 800186c:	40021000 	.word	0x40021000

08001870 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a20      	ldr	r2, [pc, #128]	; (8001910 <HAL_UART_MspInit+0xa0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d13a      	bne.n	8001908 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_UART_MspInit+0xa4>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	4a1f      	ldr	r2, [pc, #124]	; (8001914 <HAL_UART_MspInit+0xa4>)
 8001898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800189c:	6593      	str	r3, [r2, #88]	; 0x58
 800189e:	4b1d      	ldr	r3, [pc, #116]	; (8001914 <HAL_UART_MspInit+0xa4>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_UART_MspInit+0xa4>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_UART_MspInit+0xa4>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_UART_MspInit+0xa4>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80018c2:	2304      	movs	r3, #4
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018d2:	2307      	movs	r3, #7
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e0:	f001 f9b0 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80018e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80018f6:	2303      	movs	r3, #3
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001904:	f001 f99e 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001908:	bf00      	nop
 800190a:	3728      	adds	r7, #40	; 0x28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40004400 	.word	0x40004400
 8001914:	40021000 	.word	0x40021000

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 f984 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <CAN1_RX0_IRQHandler+0x14>)
 8001972:	f000 fe3a 	bl	80025ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  receiveData();
 8001976:	f7ff fdc9 	bl	800150c <receiveData>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000ee0 	.word	0x20000ee0

08001984 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
	return 1;
 8001988:	2301      	movs	r3, #1
}
 800198a:	4618      	mov	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_kill>:

int _kill(int pid, int sig)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800199e:	f003 f8d1 	bl	8004b44 <__errno>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2216      	movs	r2, #22
 80019a6:	601a      	str	r2, [r3, #0]
	return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <_exit>:

void _exit (int status)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ffe7 	bl	8001994 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019c6:	e7fe      	b.n	80019c6 <_exit+0x12>

080019c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	e00a      	b.n	80019f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019da:	f3af 8000 	nop.w
 80019de:	4601      	mov	r1, r0
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	60ba      	str	r2, [r7, #8]
 80019e6:	b2ca      	uxtb	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	3301      	adds	r3, #1
 80019ee:	617b      	str	r3, [r7, #20]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	dbf0      	blt.n	80019da <_read+0x12>
	}

return len;
 80019f8:	687b      	ldr	r3, [r7, #4]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b086      	sub	sp, #24
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	e009      	b.n	8001a28 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	60ba      	str	r2, [r7, #8]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf1      	blt.n	8001a14 <_write+0x12>
	}
	return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_close>:

int _close(int file)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
	return -1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a62:	605a      	str	r2, [r3, #4]
	return 0;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_isatty>:

int _isatty(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
	return 1;
 8001a7a:	2301      	movs	r3, #1
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
	return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
	...

08001aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aac:	4a14      	ldr	r2, [pc, #80]	; (8001b00 <_sbrk+0x5c>)
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <_sbrk+0x60>)
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d102      	bne.n	8001ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <_sbrk+0x64>)
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <_sbrk+0x68>)
 8001ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <_sbrk+0x64>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4413      	add	r3, r2
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d207      	bcs.n	8001ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad4:	f003 f836 	bl	8004b44 <__errno>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	220c      	movs	r2, #12
 8001adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	e009      	b.n	8001af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <_sbrk+0x64>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <_sbrk+0x64>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <_sbrk+0x64>)
 8001af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001af6:	68fb      	ldr	r3, [r7, #12]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20010000 	.word	0x20010000
 8001b04:	00000400 	.word	0x00000400
 8001b08:	20000df4 	.word	0x20000df4
 8001b0c:	20000f20 	.word	0x20000f20

08001b10 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <SystemInit+0x5c>)
 8001b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1a:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <SystemInit+0x5c>)
 8001b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <SystemInit+0x60>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <SystemInit+0x60>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <SystemInit+0x60>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <SystemInit+0x60>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <SystemInit+0x60>)
 8001b3c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b40:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b44:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <SystemInit+0x60>)
 8001b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b4c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <SystemInit+0x60>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <SystemInit+0x60>)
 8001b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b58:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <SystemInit+0x60>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	619a      	str	r2, [r3, #24]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00
 8001b70:	40021000 	.word	0x40021000

08001b74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b78:	f7ff ffca 	bl	8001b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b7c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b7e:	e003      	b.n	8001b88 <LoopCopyDataInit>

08001b80 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b82:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001b84:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001b86:	3104      	adds	r1, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001b88:	480a      	ldr	r0, [pc, #40]	; (8001bb4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001b8c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001b8e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001b90:	d3f6      	bcc.n	8001b80 <CopyDataInit>
	ldr	r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	; (8001bbc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001b94:	e002      	b.n	8001b9c <LoopFillZerobss>

08001b96 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001b96:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001b98:	f842 3b04 	str.w	r3, [r2], #4

08001b9c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <LoopForever+0x16>)
	cmp	r2, r3
 8001b9e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ba0:	d3f9      	bcc.n	8001b96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f002 ffd5 	bl	8004b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ba6:	f7ff fa47 	bl	8001038 <main>

08001baa <LoopForever>:

LoopForever:
    b LoopForever
 8001baa:	e7fe      	b.n	8001baa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bac:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001bb0:	08007e24 	.word	0x08007e24
	ldr	r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bb8:	2000020c 	.word	0x2000020c
	ldr	r2, =_sbss
 8001bbc:	2000020c 	.word	0x2000020c
	ldr	r3, = _ebss
 8001bc0:	20000f1c 	.word	0x20000f1c

08001bc4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC1_IRQHandler>

08001bc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd0:	2003      	movs	r0, #3
 8001bd2:	f000 fff5 	bl	8002bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 f80e 	bl	8001bf8 <HAL_InitTick>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	71fb      	strb	r3, [r7, #7]
 8001be6:	e001      	b.n	8001bec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be8:	f7ff fdd2 	bl	8001790 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bec:	79fb      	ldrb	r3, [r7, #7]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_InitTick+0x6c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d023      	beq.n	8001c54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <HAL_InitTick+0x70>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_InitTick+0x6c>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f001 f801 	bl	8002c2a <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10f      	bne.n	8001c4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b0f      	cmp	r3, #15
 8001c32:	d809      	bhi.n	8001c48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c34:	2200      	movs	r2, #0
 8001c36:	6879      	ldr	r1, [r7, #4]
 8001c38:	f04f 30ff 	mov.w	r0, #4294967295
 8001c3c:	f000 ffcb 	bl	8002bd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c40:	4a0a      	ldr	r2, [pc, #40]	; (8001c6c <HAL_InitTick+0x74>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	e007      	b.n	8001c58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e004      	b.n	8001c58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e001      	b.n	8001c58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000038 	.word	0x20000038
 8001c68:	20000030 	.word	0x20000030
 8001c6c:	20000034 	.word	0x20000034

08001c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x20>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_IncTick+0x24>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_IncTick+0x24>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000038 	.word	0x20000038
 8001c94:	20000f08 	.word	0x20000f08

08001c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_GetTick+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000f08 	.word	0x20000f08

08001cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff ffee 	bl	8001c98 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d005      	beq.n	8001cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_Delay+0x44>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd6:	bf00      	nop
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d8f7      	bhi.n	8001cd8 <HAL_Delay+0x28>
  {
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000038 	.word	0x20000038

08001cf8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e0ed      	b.n	8001ee6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d102      	bne.n	8001d1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7ff fd5e 	bl	80017d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0202 	bic.w	r2, r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d2c:	f7ff ffb4 	bl	8001c98 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d32:	e012      	b.n	8001d5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d34:	f7ff ffb0 	bl	8001c98 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b0a      	cmp	r3, #10
 8001d40:	d90b      	bls.n	8001d5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2205      	movs	r2, #5
 8001d52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0c5      	b.n	8001ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e5      	bne.n	8001d34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d78:	f7ff ff8e 	bl	8001c98 <HAL_GetTick>
 8001d7c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d7e:	e012      	b.n	8001da6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d80:	f7ff ff8a 	bl	8001c98 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b0a      	cmp	r3, #10
 8001d8c:	d90b      	bls.n	8001da6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2205      	movs	r2, #5
 8001d9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e09f      	b.n	8001ee6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0301 	and.w	r3, r3, #1
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0e5      	beq.n	8001d80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	7e1b      	ldrb	r3, [r3, #24]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d108      	bne.n	8001dce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e007      	b.n	8001dde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7e5b      	ldrb	r3, [r3, #25]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d108      	bne.n	8001df8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e007      	b.n	8001e08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	7e9b      	ldrb	r3, [r3, #26]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d108      	bne.n	8001e22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0220 	orr.w	r2, r2, #32
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e007      	b.n	8001e32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0220 	bic.w	r2, r2, #32
 8001e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	7edb      	ldrb	r3, [r3, #27]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d108      	bne.n	8001e4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0210 	bic.w	r2, r2, #16
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	e007      	b.n	8001e5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0210 	orr.w	r2, r2, #16
 8001e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7f1b      	ldrb	r3, [r3, #28]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d108      	bne.n	8001e76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0208 	orr.w	r2, r2, #8
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e007      	b.n	8001e86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0208 	bic.w	r2, r2, #8
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	7f5b      	ldrb	r3, [r3, #29]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d108      	bne.n	8001ea0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f042 0204 	orr.w	r2, r2, #4
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	e007      	b.n	8001eb0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f022 0204 	bic.w	r2, r2, #4
 8001eae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	ea42 0103 	orr.w	r1, r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	1e5a      	subs	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b087      	sub	sp, #28
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
 8001ef6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f04:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001f06:	7cfb      	ldrb	r3, [r7, #19]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d003      	beq.n	8001f14 <HAL_CAN_ConfigFilter+0x26>
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	f040 80aa 	bne.w	8002068 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f1a:	f043 0201 	orr.w	r2, r3, #1
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	f003 031f 	and.w	r3, r3, #31
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d123      	bne.n	8001f96 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	401a      	ands	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3248      	adds	r2, #72	; 0x48
 8001f76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f8c:	6979      	ldr	r1, [r7, #20]
 8001f8e:	3348      	adds	r3, #72	; 0x48
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d122      	bne.n	8001fe4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fbe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	3248      	adds	r2, #72	; 0x48
 8001fc4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fd8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fda:	6979      	ldr	r1, [r7, #20]
 8001fdc:	3348      	adds	r3, #72	; 0x48
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	440b      	add	r3, r1
 8001fe2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d109      	bne.n	8002000 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	401a      	ands	r2, r3
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ffe:	e007      	b.n	8002010 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	431a      	orrs	r2, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d109      	bne.n	800202c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	43db      	mvns	r3, r3
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800202a:	e007      	b.n	800203c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	431a      	orrs	r2, r3
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d107      	bne.n	8002054 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	431a      	orrs	r2, r3
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800205a:	f023 0201 	bic.w	r2, r3, #1
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	e006      	b.n	8002076 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b01      	cmp	r3, #1
 8002094:	d12e      	bne.n	80020f4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020ae:	f7ff fdf3 	bl	8001c98 <HAL_GetTick>
 80020b2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020b4:	e012      	b.n	80020dc <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020b6:	f7ff fdef 	bl	8001c98 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b0a      	cmp	r3, #10
 80020c2:	d90b      	bls.n	80020dc <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2205      	movs	r2, #5
 80020d4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e012      	b.n	8002102 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1e5      	bne.n	80020b6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e006      	b.n	8002102 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
  }
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800210a:	b480      	push	{r7}
 800210c:	b089      	sub	sp, #36	; 0x24
 800210e:	af00      	add	r7, sp, #0
 8002110:	60f8      	str	r0, [r7, #12]
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800211e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002128:	7ffb      	ldrb	r3, [r7, #31]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d003      	beq.n	8002136 <HAL_CAN_AddTxMessage+0x2c>
 800212e:	7ffb      	ldrb	r3, [r7, #31]
 8002130:	2b02      	cmp	r3, #2
 8002132:	f040 80b8 	bne.w	80022a6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10a      	bne.n	8002156 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a0 	beq.w	8002296 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	0e1b      	lsrs	r3, r3, #24
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d907      	bls.n	8002176 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e09e      	b.n	80022b4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002176:	2201      	movs	r2, #1
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	409a      	lsls	r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10d      	bne.n	80021a4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002192:	68f9      	ldr	r1, [r7, #12]
 8002194:	6809      	ldr	r1, [r1, #0]
 8002196:	431a      	orrs	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	3318      	adds	r3, #24
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	440b      	add	r3, r1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	e00f      	b.n	80021c4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021b4:	68f9      	ldr	r1, [r7, #12]
 80021b6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80021b8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	3318      	adds	r3, #24
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	440b      	add	r3, r1
 80021c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6819      	ldr	r1, [r3, #0]
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	691a      	ldr	r2, [r3, #16]
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	3318      	adds	r3, #24
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	440b      	add	r3, r1
 80021d4:	3304      	adds	r3, #4
 80021d6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	7d1b      	ldrb	r3, [r3, #20]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d111      	bne.n	8002204 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	3318      	adds	r3, #24
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	4413      	add	r3, r2
 80021ec:	3304      	adds	r3, #4
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	6811      	ldr	r1, [r2, #0]
 80021f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	3318      	adds	r3, #24
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	440b      	add	r3, r1
 8002200:	3304      	adds	r3, #4
 8002202:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3307      	adds	r3, #7
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	061a      	lsls	r2, r3, #24
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3306      	adds	r3, #6
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	041b      	lsls	r3, r3, #16
 8002214:	431a      	orrs	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	3305      	adds	r3, #5
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	021b      	lsls	r3, r3, #8
 800221e:	4313      	orrs	r3, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	3204      	adds	r2, #4
 8002224:	7812      	ldrb	r2, [r2, #0]
 8002226:	4610      	mov	r0, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	6811      	ldr	r1, [r2, #0]
 800222c:	ea43 0200 	orr.w	r2, r3, r0
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	440b      	add	r3, r1
 8002236:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800223a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3303      	adds	r3, #3
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	061a      	lsls	r2, r3, #24
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3302      	adds	r3, #2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3301      	adds	r3, #1
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	021b      	lsls	r3, r3, #8
 8002256:	4313      	orrs	r3, r2
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	4610      	mov	r0, r2
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	6811      	ldr	r1, [r2, #0]
 8002262:	ea43 0200 	orr.w	r2, r3, r0
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	440b      	add	r3, r1
 800226c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002270:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3318      	adds	r3, #24
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	4413      	add	r3, r2
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	6811      	ldr	r1, [r2, #0]
 8002284:	f043 0201 	orr.w	r2, r3, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3318      	adds	r3, #24
 800228c:	011b      	lsls	r3, r3, #4
 800228e:	440b      	add	r3, r1
 8002290:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002292:	2300      	movs	r3, #0
 8002294:	e00e      	b.n	80022b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e006      	b.n	80022b4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
  }
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3724      	adds	r7, #36	; 0x24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022d2:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80022d4:	7afb      	ldrb	r3, [r7, #11]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d002      	beq.n	80022e0 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80022da:	7afb      	ldrb	r3, [r7, #11]
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d11d      	bne.n	800231c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3301      	adds	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	3301      	adds	r3, #1
 8002306:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	3301      	adds	r3, #1
 800231a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800231c:	68fb      	ldr	r3, [r7, #12]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800232a:	b480      	push	{r7}
 800232c:	b087      	sub	sp, #28
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800233e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d003      	beq.n	800234e <HAL_CAN_GetRxMessage+0x24>
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	2b02      	cmp	r3, #2
 800234a:	f040 80f3 	bne.w	8002534 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10e      	bne.n	8002372 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0e7      	b.n	8002542 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d107      	bne.n	8002390 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0d8      	b.n	8002542 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	331b      	adds	r3, #27
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	4413      	add	r3, r2
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0204 	and.w	r2, r3, #4
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	331b      	adds	r3, #27
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4413      	add	r3, r2
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0d5b      	lsrs	r3, r3, #21
 80023be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e00b      	b.n	80023e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	331b      	adds	r3, #27
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	08db      	lsrs	r3, r3, #3
 80023d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	331b      	adds	r3, #27
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	4413      	add	r3, r2
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0202 	and.w	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	331b      	adds	r3, #27
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4413      	add	r3, r2
 8002402:	3304      	adds	r3, #4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	331b      	adds	r3, #27
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	b2da      	uxtb	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	331b      	adds	r3, #27
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0c1b      	lsrs	r3, r3, #16
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	4413      	add	r3, r2
 8002448:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	4413      	add	r3, r2
 800245e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0a1a      	lsrs	r2, r3, #8
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	4413      	add	r3, r2
 8002478:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	0c1a      	lsrs	r2, r3, #16
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	3302      	adds	r3, #2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	4413      	add	r3, r2
 8002492:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e1a      	lsrs	r2, r3, #24
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	3303      	adds	r3, #3
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	3304      	adds	r3, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	0a1a      	lsrs	r2, r3, #8
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	3305      	adds	r3, #5
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	4413      	add	r3, r2
 80024de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0c1a      	lsrs	r2, r3, #16
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	3306      	adds	r3, #6
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0e1a      	lsrs	r2, r3, #24
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	3307      	adds	r3, #7
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d108      	bne.n	8002520 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	e007      	b.n	8002530 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0220 	orr.w	r2, r2, #32
 800252e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	e006      	b.n	8002542 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002562:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002564:	7afb      	ldrb	r3, [r7, #11]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d002      	beq.n	8002570 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d10f      	bne.n	8002590 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	e005      	b.n	8002590 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002590:	68fb      	ldr	r3, [r7, #12]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d002      	beq.n	80025bc <HAL_CAN_ActivateNotification+0x1e>
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d109      	bne.n	80025d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6959      	ldr	r1, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	430a      	orrs	r2, r1
 80025ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e006      	b.n	80025de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b08a      	sub	sp, #40	; 0x28
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025f2:	2300      	movs	r3, #0
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d07c      	beq.n	800272a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d023      	beq.n	8002682 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2201      	movs	r2, #1
 8002640:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7fe fed9 	bl	8001404 <HAL_CAN_TxMailbox0CompleteCallback>
 8002652:	e016      	b.n	8002682 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d004      	beq.n	8002668 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
 8002666:	e00c      	b.n	8002682 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d004      	beq.n	800267c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	e002      	b.n	8002682 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f96b 	bl	8002958 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d024      	beq.n	80026d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002694:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7fe fedb 	bl	800145c <HAL_CAN_TxMailbox1CompleteCallback>
 80026a6:	e016      	b.n	80026d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d004      	beq.n	80026bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	e00c      	b.n	80026d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d004      	beq.n	80026d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	e002      	b.n	80026d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f94b 	bl	800296c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d024      	beq.n	800272a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7fe fedd 	bl	80014b4 <HAL_CAN_TxMailbox2CompleteCallback>
 80026fa:	e016      	b.n	800272a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d004      	beq.n	8002710 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	e00c      	b.n	800272a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
 8002722:	e002      	b.n	800272a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f92b 	bl	8002980 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00c      	beq.n	800274e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002744:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2210      	movs	r2, #16
 800274c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00b      	beq.n	8002770 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2208      	movs	r2, #8
 8002768:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f91c 	bl	80029a8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f903 	bl	8002994 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00c      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d007      	beq.n	80027b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2210      	movs	r2, #16
 80027b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027b2:	6a3b      	ldr	r3, [r7, #32]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00b      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2208      	movs	r2, #8
 80027cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8fe 	bl	80029d0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d009      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f8e5 	bl	80029bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0310 	and.w	r3, r3, #16
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2210      	movs	r2, #16
 800280c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8e8 	bl	80029e4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00b      	beq.n	8002836 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2208      	movs	r2, #8
 800282e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f8e1 	bl	80029f8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d07b      	beq.n	8002938 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b00      	cmp	r3, #0
 8002848:	d072      	beq.n	8002930 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	f043 0302 	orr.w	r3, r3, #2
 8002880:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002882:	6a3b      	ldr	r3, [r7, #32]
 8002884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	f043 0304 	orr.w	r3, r3, #4
 800289c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d043      	beq.n	8002930 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d03e      	beq.n	8002930 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80028b8:	2b60      	cmp	r3, #96	; 0x60
 80028ba:	d02b      	beq.n	8002914 <HAL_CAN_IRQHandler+0x32a>
 80028bc:	2b60      	cmp	r3, #96	; 0x60
 80028be:	d82e      	bhi.n	800291e <HAL_CAN_IRQHandler+0x334>
 80028c0:	2b50      	cmp	r3, #80	; 0x50
 80028c2:	d022      	beq.n	800290a <HAL_CAN_IRQHandler+0x320>
 80028c4:	2b50      	cmp	r3, #80	; 0x50
 80028c6:	d82a      	bhi.n	800291e <HAL_CAN_IRQHandler+0x334>
 80028c8:	2b40      	cmp	r3, #64	; 0x40
 80028ca:	d019      	beq.n	8002900 <HAL_CAN_IRQHandler+0x316>
 80028cc:	2b40      	cmp	r3, #64	; 0x40
 80028ce:	d826      	bhi.n	800291e <HAL_CAN_IRQHandler+0x334>
 80028d0:	2b30      	cmp	r3, #48	; 0x30
 80028d2:	d010      	beq.n	80028f6 <HAL_CAN_IRQHandler+0x30c>
 80028d4:	2b30      	cmp	r3, #48	; 0x30
 80028d6:	d822      	bhi.n	800291e <HAL_CAN_IRQHandler+0x334>
 80028d8:	2b10      	cmp	r3, #16
 80028da:	d002      	beq.n	80028e2 <HAL_CAN_IRQHandler+0x2f8>
 80028dc:	2b20      	cmp	r3, #32
 80028de:	d005      	beq.n	80028ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028e0:	e01d      	b.n	800291e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	f043 0308 	orr.w	r3, r3, #8
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028ea:	e019      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	f043 0310 	orr.w	r3, r3, #16
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028f4:	e014      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	f043 0320 	orr.w	r3, r3, #32
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80028fe:	e00f      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002908:	e00a      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002912:	e005      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800291c:	e000      	b.n	8002920 <HAL_CAN_IRQHandler+0x336>
            break;
 800291e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800292e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2204      	movs	r2, #4
 8002936:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d008      	beq.n	8002950 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	431a      	orrs	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f85e 	bl	8002a0c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a30:	4b0c      	ldr	r3, [pc, #48]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a52:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <__NVIC_SetPriorityGrouping+0x44>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60d3      	str	r3, [r2, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6c:	4b04      	ldr	r3, [pc, #16]	; (8002a80 <__NVIC_GetPriorityGrouping+0x18>)
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	0a1b      	lsrs	r3, r3, #8
 8002a72:	f003 0307 	and.w	r3, r3, #7
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	db0b      	blt.n	8002aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	f003 021f 	and.w	r2, r3, #31
 8002a9c:	4907      	ldr	r1, [pc, #28]	; (8002abc <__NVIC_EnableIRQ+0x38>)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	e000e100 	.word	0xe000e100

08002ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	6039      	str	r1, [r7, #0]
 8002aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	db0a      	blt.n	8002aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	490c      	ldr	r1, [pc, #48]	; (8002b0c <__NVIC_SetPriority+0x4c>)
 8002ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ade:	0112      	lsls	r2, r2, #4
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae8:	e00a      	b.n	8002b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	4908      	ldr	r1, [pc, #32]	; (8002b10 <__NVIC_SetPriority+0x50>)
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	3b04      	subs	r3, #4
 8002af8:	0112      	lsls	r2, r2, #4
 8002afa:	b2d2      	uxtb	r2, r2
 8002afc:	440b      	add	r3, r1
 8002afe:	761a      	strb	r2, [r3, #24]
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100
 8002b10:	e000ed00 	.word	0xe000ed00

08002b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	f1c3 0307 	rsb	r3, r3, #7
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	bf28      	it	cs
 8002b32:	2304      	movcs	r3, #4
 8002b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3304      	adds	r3, #4
 8002b3a:	2b06      	cmp	r3, #6
 8002b3c:	d902      	bls.n	8002b44 <NVIC_EncodePriority+0x30>
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3b03      	subs	r3, #3
 8002b42:	e000      	b.n	8002b46 <NVIC_EncodePriority+0x32>
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	401a      	ands	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	fa01 f303 	lsl.w	r3, r1, r3
 8002b66:	43d9      	mvns	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b6c:	4313      	orrs	r3, r2
         );
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3724      	adds	r7, #36	; 0x24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b8c:	d301      	bcc.n	8002b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e00f      	b.n	8002bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <SysTick_Config+0x40>)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9a:	210f      	movs	r1, #15
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	f7ff ff8e 	bl	8002ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <SysTick_Config+0x40>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <SysTick_Config+0x40>)
 8002bac:	2207      	movs	r2, #7
 8002bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	e000e010 	.word	0xe000e010

08002bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ff29 	bl	8002a20 <__NVIC_SetPriorityGrouping>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b086      	sub	sp, #24
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	60b9      	str	r1, [r7, #8]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002be8:	f7ff ff3e 	bl	8002a68 <__NVIC_GetPriorityGrouping>
 8002bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7ff ff8e 	bl	8002b14 <NVIC_EncodePriority>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff5d 	bl	8002ac0 <__NVIC_SetPriority>
}
 8002c06:	bf00      	nop
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff31 	bl	8002a84 <__NVIC_EnableIRQ>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffa2 	bl	8002b7c <SysTick_Config>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c52:	e148      	b.n	8002ee6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 813a 	beq.w	8002ee0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d00b      	beq.n	8002c8c <HAL_GPIO_Init+0x48>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d007      	beq.n	8002c8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c80:	2b11      	cmp	r3, #17
 8002c82:	d003      	beq.n	8002c8c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b12      	cmp	r3, #18
 8002c8a:	d130      	bne.n	8002cee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 0201 	and.w	r2, r3, #1
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	2203      	movs	r2, #3
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4013      	ands	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0xea>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b12      	cmp	r3, #18
 8002d2c:	d123      	bne.n	8002d76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	08da      	lsrs	r2, r3, #3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3208      	adds	r2, #8
 8002d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	220f      	movs	r2, #15
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	693a      	ldr	r2, [r7, #16]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	08da      	lsrs	r2, r3, #3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3208      	adds	r2, #8
 8002d70:	6939      	ldr	r1, [r7, #16]
 8002d72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	2203      	movs	r2, #3
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0203 	and.w	r2, r3, #3
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	f000 8094 	beq.w	8002ee0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db8:	4b52      	ldr	r3, [pc, #328]	; (8002f04 <HAL_GPIO_Init+0x2c0>)
 8002dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbc:	4a51      	ldr	r2, [pc, #324]	; (8002f04 <HAL_GPIO_Init+0x2c0>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6613      	str	r3, [r2, #96]	; 0x60
 8002dc4:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <HAL_GPIO_Init+0x2c0>)
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dd0:	4a4d      	ldr	r2, [pc, #308]	; (8002f08 <HAL_GPIO_Init+0x2c4>)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	089b      	lsrs	r3, r3, #2
 8002dd6:	3302      	adds	r3, #2
 8002dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	4013      	ands	r3, r2
 8002df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dfa:	d00d      	beq.n	8002e18 <HAL_GPIO_Init+0x1d4>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a43      	ldr	r2, [pc, #268]	; (8002f0c <HAL_GPIO_Init+0x2c8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <HAL_GPIO_Init+0x1d0>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a42      	ldr	r2, [pc, #264]	; (8002f10 <HAL_GPIO_Init+0x2cc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d101      	bne.n	8002e10 <HAL_GPIO_Init+0x1cc>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e004      	b.n	8002e1a <HAL_GPIO_Init+0x1d6>
 8002e10:	2307      	movs	r3, #7
 8002e12:	e002      	b.n	8002e1a <HAL_GPIO_Init+0x1d6>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_GPIO_Init+0x1d6>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	f002 0203 	and.w	r2, r2, #3
 8002e20:	0092      	lsls	r2, r2, #2
 8002e22:	4093      	lsls	r3, r2
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e2a:	4937      	ldr	r1, [pc, #220]	; (8002f08 <HAL_GPIO_Init+0x2c4>)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	089b      	lsrs	r3, r3, #2
 8002e30:	3302      	adds	r3, #2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e38:	4b36      	ldr	r3, [pc, #216]	; (8002f14 <HAL_GPIO_Init+0x2d0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e5c:	4a2d      	ldr	r2, [pc, #180]	; (8002f14 <HAL_GPIO_Init+0x2d0>)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002e62:	4b2c      	ldr	r3, [pc, #176]	; (8002f14 <HAL_GPIO_Init+0x2d0>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e86:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <HAL_GPIO_Init+0x2d0>)
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e8c:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <HAL_GPIO_Init+0x2d0>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eb0:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <HAL_GPIO_Init+0x2d0>)
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_GPIO_Init+0x2d0>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <HAL_GPIO_Init+0x2d0>)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f47f aeaf 	bne.w	8002c54 <HAL_GPIO_Init+0x10>
  }
}
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
 8002efa:	371c      	adds	r7, #28
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	48000400 	.word	0x48000400
 8002f10:	48000800 	.word	0x48000800
 8002f14:	40010400 	.word	0x40010400

08002f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	e001      	b.n	8002f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f86:	6013      	str	r3, [r2, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40007000 	.word	0x40007000

08002f98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40007000 	.word	0x40007000

08002fb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc2:	d130      	bne.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc4:	4b23      	ldr	r3, [pc, #140]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d038      	beq.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fda:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fe0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2232      	movs	r2, #50	; 0x32
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	0c9b      	lsrs	r3, r3, #18
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ff8:	e002      	b.n	8003000 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300c:	d102      	bne.n	8003014 <HAL_PWREx_ControlVoltageScaling+0x60>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f2      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003020:	d110      	bne.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e00f      	b.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003032:	d007      	beq.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003034:	4b07      	ldr	r3, [pc, #28]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800303c:	4a05      	ldr	r2, [pc, #20]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800303e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003042:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40007000 	.word	0x40007000
 8003058:	20000030 	.word	0x20000030
 800305c:	431bde83 	.word	0x431bde83

08003060 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	f000 bc11 	b.w	8003896 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003074:	4ba0      	ldr	r3, [pc, #640]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f003 030c 	and.w	r3, r3, #12
 800307c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800307e:	4b9e      	ldr	r3, [pc, #632]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0310 	and.w	r3, r3, #16
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80e4 	beq.w	800325e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <HAL_RCC_OscConfig+0x4c>
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b0c      	cmp	r3, #12
 80030a0:	f040 808b 	bne.w	80031ba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	f040 8087 	bne.w	80031ba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030ac:	4b92      	ldr	r3, [pc, #584]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d005      	beq.n	80030c4 <HAL_RCC_OscConfig+0x64>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e3e8      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1a      	ldr	r2, [r3, #32]
 80030c8:	4b8b      	ldr	r3, [pc, #556]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0308 	and.w	r3, r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d004      	beq.n	80030de <HAL_RCC_OscConfig+0x7e>
 80030d4:	4b88      	ldr	r3, [pc, #544]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030dc:	e005      	b.n	80030ea <HAL_RCC_OscConfig+0x8a>
 80030de:	4b86      	ldr	r3, [pc, #536]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d223      	bcs.n	8003136 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fd7a 	bl	8003bec <RCC_SetFlashLatencyFromMSIRange>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e3c9      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003102:	4b7d      	ldr	r3, [pc, #500]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a7c      	ldr	r2, [pc, #496]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003108:	f043 0308 	orr.w	r3, r3, #8
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	4b7a      	ldr	r3, [pc, #488]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	4977      	ldr	r1, [pc, #476]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 800311c:	4313      	orrs	r3, r2
 800311e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003120:	4b75      	ldr	r3, [pc, #468]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	021b      	lsls	r3, r3, #8
 800312e:	4972      	ldr	r1, [pc, #456]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
 8003134:	e025      	b.n	8003182 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003136:	4b70      	ldr	r3, [pc, #448]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a6f      	ldr	r2, [pc, #444]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 800313c:	f043 0308 	orr.w	r3, r3, #8
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b6d      	ldr	r3, [pc, #436]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	496a      	ldr	r1, [pc, #424]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003154:	4b68      	ldr	r3, [pc, #416]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	021b      	lsls	r3, r3, #8
 8003162:	4965      	ldr	r1, [pc, #404]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fd3a 	bl	8003bec <RCC_SetFlashLatencyFromMSIRange>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e389      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003182:	f000 fc6f 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003186:	4602      	mov	r2, r0
 8003188:	4b5b      	ldr	r3, [pc, #364]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	495a      	ldr	r1, [pc, #360]	; (80032fc <HAL_RCC_OscConfig+0x29c>)
 8003194:	5ccb      	ldrb	r3, [r1, r3]
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	4a58      	ldr	r2, [pc, #352]	; (8003300 <HAL_RCC_OscConfig+0x2a0>)
 80031a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031a2:	4b58      	ldr	r3, [pc, #352]	; (8003304 <HAL_RCC_OscConfig+0x2a4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe fd26 	bl	8001bf8 <HAL_InitTick>
 80031ac:	4603      	mov	r3, r0
 80031ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d052      	beq.n	800325c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
 80031b8:	e36d      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d032      	beq.n	8003228 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031c2:	4b4d      	ldr	r3, [pc, #308]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a4c      	ldr	r2, [pc, #304]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031ce:	f7fe fd63 	bl	8001c98 <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031d6:	f7fe fd5f 	bl	8001c98 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e356      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031e8:	4b43      	ldr	r3, [pc, #268]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031f4:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80031fa:	f043 0308 	orr.w	r3, r3, #8
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	4b3d      	ldr	r3, [pc, #244]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	493a      	ldr	r1, [pc, #232]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003212:	4b39      	ldr	r3, [pc, #228]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	021b      	lsls	r3, r3, #8
 8003220:	4935      	ldr	r1, [pc, #212]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003222:	4313      	orrs	r3, r2
 8003224:	604b      	str	r3, [r1, #4]
 8003226:	e01a      	b.n	800325e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003228:	4b33      	ldr	r3, [pc, #204]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a32      	ldr	r2, [pc, #200]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 800322e:	f023 0301 	bic.w	r3, r3, #1
 8003232:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003234:	f7fe fd30 	bl	8001c98 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800323c:	f7fe fd2c 	bl	8001c98 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e323      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800324e:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x1dc>
 800325a:	e000      	b.n	800325e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800325c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d073      	beq.n	8003352 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d005      	beq.n	800327c <HAL_RCC_OscConfig+0x21c>
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d10e      	bne.n	8003294 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b03      	cmp	r3, #3
 800327a:	d10b      	bne.n	8003294 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327c:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d063      	beq.n	8003350 <HAL_RCC_OscConfig+0x2f0>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d15f      	bne.n	8003350 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e300      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329c:	d106      	bne.n	80032ac <HAL_RCC_OscConfig+0x24c>
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a15      	ldr	r2, [pc, #84]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e01d      	b.n	80032e8 <HAL_RCC_OscConfig+0x288>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x270>
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80032bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a0c      	ldr	r2, [pc, #48]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e00b      	b.n	80032e8 <HAL_RCC_OscConfig+0x288>
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80032d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032da:	6013      	str	r3, [r2, #0]
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a05      	ldr	r2, [pc, #20]	; (80032f8 <HAL_RCC_OscConfig+0x298>)
 80032e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01b      	beq.n	8003328 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fe fcd2 	bl	8001c98 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f6:	e010      	b.n	800331a <HAL_RCC_OscConfig+0x2ba>
 80032f8:	40021000 	.word	0x40021000
 80032fc:	080079ec 	.word	0x080079ec
 8003300:	20000030 	.word	0x20000030
 8003304:	20000034 	.word	0x20000034
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003308:	f7fe fcc6 	bl	8001c98 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e2bd      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331a:	4baf      	ldr	r3, [pc, #700]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x2a8>
 8003326:	e014      	b.n	8003352 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fcb6 	bl	8001c98 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe fcb2 	bl	8001c98 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e2a9      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003342:	4ba5      	ldr	r3, [pc, #660]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x2d0>
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d060      	beq.n	8003420 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d005      	beq.n	8003370 <HAL_RCC_OscConfig+0x310>
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d119      	bne.n	800339e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d116      	bne.n	800339e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003370:	4b99      	ldr	r3, [pc, #612]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_OscConfig+0x328>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e286      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003388:	4b93      	ldr	r3, [pc, #588]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	061b      	lsls	r3, r3, #24
 8003396:	4990      	ldr	r1, [pc, #576]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339c:	e040      	b.n	8003420 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d023      	beq.n	80033ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a6:	4b8c      	ldr	r3, [pc, #560]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a8b      	ldr	r2, [pc, #556]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fe fc71 	bl	8001c98 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ba:	f7fe fc6d 	bl	8001c98 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e264      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033cc:	4b82      	ldr	r3, [pc, #520]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d8:	4b7f      	ldr	r3, [pc, #508]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	497c      	ldr	r1, [pc, #496]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
 80033ec:	e018      	b.n	8003420 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ee:	4b7a      	ldr	r3, [pc, #488]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a79      	ldr	r2, [pc, #484]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80033f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fe fc4d 	bl	8001c98 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003402:	f7fe fc49 	bl	8001c98 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e240      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003414:	4b70      	ldr	r3, [pc, #448]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d03c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01c      	beq.n	800346e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003434:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800343a:	4a67      	ldr	r2, [pc, #412]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fe fc28 	bl	8001c98 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344c:	f7fe fc24 	bl	8001c98 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e21b      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800345e:	4b5e      	ldr	r3, [pc, #376]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ef      	beq.n	800344c <HAL_RCC_OscConfig+0x3ec>
 800346c:	e01b      	b.n	80034a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346e:	4b5a      	ldr	r3, [pc, #360]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003474:	4a58      	ldr	r2, [pc, #352]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7fe fc0b 	bl	8001c98 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003486:	f7fe fc07 	bl	8001c98 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1fe      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003498:	4b4f      	ldr	r3, [pc, #316]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1ef      	bne.n	8003486 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80a6 	beq.w	8003600 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b4:	2300      	movs	r3, #0
 80034b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034b8:	4b47      	ldr	r3, [pc, #284]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10d      	bne.n	80034e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	4a43      	ldr	r2, [pc, #268]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ce:	6593      	str	r3, [r2, #88]	; 0x58
 80034d0:	4b41      	ldr	r3, [pc, #260]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034dc:	2301      	movs	r3, #1
 80034de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e0:	4b3e      	ldr	r3, [pc, #248]	; (80035dc <HAL_RCC_OscConfig+0x57c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d118      	bne.n	800351e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ec:	4b3b      	ldr	r3, [pc, #236]	; (80035dc <HAL_RCC_OscConfig+0x57c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a3a      	ldr	r2, [pc, #232]	; (80035dc <HAL_RCC_OscConfig+0x57c>)
 80034f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f8:	f7fe fbce 	bl	8001c98 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003500:	f7fe fbca 	bl	8001c98 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e1c1      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003512:	4b32      	ldr	r3, [pc, #200]	; (80035dc <HAL_RCC_OscConfig+0x57c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d108      	bne.n	8003538 <HAL_RCC_OscConfig+0x4d8>
 8003526:	4b2c      	ldr	r3, [pc, #176]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	4a2a      	ldr	r2, [pc, #168]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003536:	e024      	b.n	8003582 <HAL_RCC_OscConfig+0x522>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b05      	cmp	r3, #5
 800353e:	d110      	bne.n	8003562 <HAL_RCC_OscConfig+0x502>
 8003540:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003546:	4a24      	ldr	r2, [pc, #144]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003548:	f043 0304 	orr.w	r3, r3, #4
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003550:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003560:	e00f      	b.n	8003582 <HAL_RCC_OscConfig+0x522>
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003568:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003572:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003578:	4a17      	ldr	r2, [pc, #92]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 800357a:	f023 0304 	bic.w	r3, r3, #4
 800357e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358a:	f7fe fb85 	bl	8001c98 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003590:	e00a      	b.n	80035a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003592:	f7fe fb81 	bl	8001c98 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e176      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a8:	4b0b      	ldr	r3, [pc, #44]	; (80035d8 <HAL_RCC_OscConfig+0x578>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0ed      	beq.n	8003592 <HAL_RCC_OscConfig+0x532>
 80035b6:	e01a      	b.n	80035ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b8:	f7fe fb6e 	bl	8001c98 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035be:	e00f      	b.n	80035e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fe fb6a 	bl	8001c98 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d906      	bls.n	80035e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e15f      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
 80035d6:	bf00      	nop
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035e0:	4baa      	ldr	r3, [pc, #680]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1e8      	bne.n	80035c0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ee:	7ffb      	ldrb	r3, [r7, #31]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d105      	bne.n	8003600 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f4:	4ba5      	ldr	r3, [pc, #660]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	4aa4      	ldr	r2, [pc, #656]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 80035fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0320 	and.w	r3, r3, #32
 8003608:	2b00      	cmp	r3, #0
 800360a:	d03c      	beq.n	8003686 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01c      	beq.n	800364e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003614:	4b9d      	ldr	r3, [pc, #628]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003616:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800361a:	4a9c      	ldr	r2, [pc, #624]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003624:	f7fe fb38 	bl	8001c98 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800362c:	f7fe fb34 	bl	8001c98 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b02      	cmp	r3, #2
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e12b      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800363e:	4b93      	ldr	r3, [pc, #588]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003640:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003644:	f003 0302 	and.w	r3, r3, #2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0ef      	beq.n	800362c <HAL_RCC_OscConfig+0x5cc>
 800364c:	e01b      	b.n	8003686 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800364e:	4b8f      	ldr	r3, [pc, #572]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003650:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003654:	4a8d      	ldr	r2, [pc, #564]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003656:	f023 0301 	bic.w	r3, r3, #1
 800365a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7fe fb1b 	bl	8001c98 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003666:	f7fe fb17 	bl	8001c98 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e10e      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003678:	4b84      	ldr	r3, [pc, #528]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 800367a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1ef      	bne.n	8003666 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8102 	beq.w	8003894 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003694:	2b02      	cmp	r3, #2
 8003696:	f040 80c5 	bne.w	8003824 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800369a:	4b7c      	ldr	r3, [pc, #496]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f003 0203 	and.w	r2, r3, #3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d12c      	bne.n	8003708 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	3b01      	subs	r3, #1
 80036ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036bc:	429a      	cmp	r2, r3
 80036be:	d123      	bne.n	8003708 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d11b      	bne.n	8003708 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036dc:	429a      	cmp	r2, r3
 80036de:	d113      	bne.n	8003708 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	3b01      	subs	r3, #1
 80036ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d109      	bne.n	8003708 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	085b      	lsrs	r3, r3, #1
 8003700:	3b01      	subs	r3, #1
 8003702:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003704:	429a      	cmp	r2, r3
 8003706:	d067      	beq.n	80037d8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	2b0c      	cmp	r3, #12
 800370c:	d062      	beq.n	80037d4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e0bb      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a5a      	ldr	r2, [pc, #360]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003724:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003728:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800372a:	f7fe fab5 	bl	8001c98 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003732:	f7fe fab1 	bl	8001c98 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b02      	cmp	r3, #2
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e0a8      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003744:	4b51      	ldr	r3, [pc, #324]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f0      	bne.n	8003732 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003750:	4b4e      	ldr	r3, [pc, #312]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003752:	68da      	ldr	r2, [r3, #12]
 8003754:	4b4e      	ldr	r3, [pc, #312]	; (8003890 <HAL_RCC_OscConfig+0x830>)
 8003756:	4013      	ands	r3, r2
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003760:	3a01      	subs	r2, #1
 8003762:	0112      	lsls	r2, r2, #4
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800376a:	0212      	lsls	r2, r2, #8
 800376c:	4311      	orrs	r1, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003772:	0852      	lsrs	r2, r2, #1
 8003774:	3a01      	subs	r2, #1
 8003776:	0552      	lsls	r2, r2, #21
 8003778:	4311      	orrs	r1, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800377e:	0852      	lsrs	r2, r2, #1
 8003780:	3a01      	subs	r2, #1
 8003782:	0652      	lsls	r2, r2, #25
 8003784:	4311      	orrs	r1, r2
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800378a:	06d2      	lsls	r2, r2, #27
 800378c:	430a      	orrs	r2, r1
 800378e:	493f      	ldr	r1, [pc, #252]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003790:	4313      	orrs	r3, r2
 8003792:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003794:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a3c      	ldr	r2, [pc, #240]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 800379a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800379e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037a0:	4b3a      	ldr	r3, [pc, #232]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	4a39      	ldr	r2, [pc, #228]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 80037a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037ac:	f7fe fa74 	bl	8001c98 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b4:	f7fe fa70 	bl	8001c98 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e067      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037c6:	4b31      	ldr	r3, [pc, #196]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037d2:	e05f      	b.n	8003894 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e05e      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d8:	4b2c      	ldr	r3, [pc, #176]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d157      	bne.n	8003894 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037e4:	4b29      	ldr	r3, [pc, #164]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a28      	ldr	r2, [pc, #160]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 80037ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037f0:	4b26      	ldr	r3, [pc, #152]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a25      	ldr	r2, [pc, #148]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037fc:	f7fe fa4c 	bl	8001c98 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fe fa48 	bl	8001c98 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e03f      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x7a4>
 8003822:	e037      	b.n	8003894 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	2b0c      	cmp	r3, #12
 8003828:	d02d      	beq.n	8003886 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800382a:	4b18      	ldr	r3, [pc, #96]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a17      	ldr	r2, [pc, #92]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003834:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003836:	4b15      	ldr	r3, [pc, #84]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d105      	bne.n	800384e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003842:	4b12      	ldr	r3, [pc, #72]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4a11      	ldr	r2, [pc, #68]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003848:	f023 0303 	bic.w	r3, r3, #3
 800384c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	4a0e      	ldr	r2, [pc, #56]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 8003854:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fe fa1b 	bl	8001c98 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003866:	f7fe fa17 	bl	8001c98 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e00e      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <HAL_RCC_OscConfig+0x82c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f0      	bne.n	8003866 <HAL_RCC_OscConfig+0x806>
 8003884:	e006      	b.n	8003894 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e005      	b.n	8003896 <HAL_RCC_OscConfig+0x836>
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop

080038a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0c8      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b4:	4b66      	ldr	r3, [pc, #408]	; (8003a50 <HAL_RCC_ClockConfig+0x1b0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d910      	bls.n	80038e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b63      	ldr	r3, [pc, #396]	; (8003a50 <HAL_RCC_ClockConfig+0x1b0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 0207 	bic.w	r2, r3, #7
 80038ca:	4961      	ldr	r1, [pc, #388]	; (8003a50 <HAL_RCC_ClockConfig+0x1b0>)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d2:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <HAL_RCC_ClockConfig+0x1b0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e0b0      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d04c      	beq.n	800398a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f8:	4b56      	ldr	r3, [pc, #344]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d121      	bne.n	8003948 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e09e      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b02      	cmp	r3, #2
 800390e:	d107      	bne.n	8003920 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003910:	4b50      	ldr	r3, [pc, #320]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d115      	bne.n	8003948 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e092      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d107      	bne.n	8003938 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003928:	4b4a      	ldr	r3, [pc, #296]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d109      	bne.n	8003948 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e086      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003938:	4b46      	ldr	r3, [pc, #280]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e07e      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003948:	4b42      	ldr	r3, [pc, #264]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f023 0203 	bic.w	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	493f      	ldr	r1, [pc, #252]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395a:	f7fe f99d 	bl	8001c98 <HAL_GetTick>
 800395e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003960:	e00a      	b.n	8003978 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003962:	f7fe f999 	bl	8001c98 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e066      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003978:	4b36      	ldr	r3, [pc, #216]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 020c 	and.w	r2, r3, #12
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	429a      	cmp	r2, r3
 8003988:	d1eb      	bne.n	8003962 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003996:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	492c      	ldr	r1, [pc, #176]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039a8:	4b29      	ldr	r3, [pc, #164]	; (8003a50 <HAL_RCC_ClockConfig+0x1b0>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d210      	bcs.n	80039d8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b6:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_RCC_ClockConfig+0x1b0>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f023 0207 	bic.w	r2, r3, #7
 80039be:	4924      	ldr	r1, [pc, #144]	; (8003a50 <HAL_RCC_ClockConfig+0x1b0>)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b22      	ldr	r3, [pc, #136]	; (8003a50 <HAL_RCC_ClockConfig+0x1b0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e036      	b.n	8003a46 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0304 	and.w	r3, r3, #4
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e4:	4b1b      	ldr	r3, [pc, #108]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	4918      	ldr	r1, [pc, #96]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d009      	beq.n	8003a16 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a02:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4910      	ldr	r1, [pc, #64]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a16:	f000 f825 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <HAL_RCC_ClockConfig+0x1b4>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	490c      	ldr	r1, [pc, #48]	; (8003a58 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	5ccb      	ldrb	r3, [r1, r3]
 8003a2a:	f003 031f 	and.w	r3, r3, #31
 8003a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a32:	4a0a      	ldr	r2, [pc, #40]	; (8003a5c <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <HAL_RCC_ClockConfig+0x1c0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f7fe f8dc 	bl	8001bf8 <HAL_InitTick>
 8003a40:	4603      	mov	r3, r0
 8003a42:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a44:	7afb      	ldrb	r3, [r7, #11]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40022000 	.word	0x40022000
 8003a54:	40021000 	.word	0x40021000
 8003a58:	080079ec 	.word	0x080079ec
 8003a5c:	20000030 	.word	0x20000030
 8003a60:	20000034 	.word	0x20000034

08003a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b089      	sub	sp, #36	; 0x24
 8003a68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a72:	4b3e      	ldr	r3, [pc, #248]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a7c:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0303 	and.w	r3, r3, #3
 8003a84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x34>
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b0c      	cmp	r3, #12
 8003a90:	d121      	bne.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d11e      	bne.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a98:	4b34      	ldr	r3, [pc, #208]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003aa4:	4b31      	ldr	r3, [pc, #196]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aaa:	0a1b      	lsrs	r3, r3, #8
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	e005      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ab4:	4b2d      	ldr	r3, [pc, #180]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	091b      	lsrs	r3, r3, #4
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ac0:	4a2b      	ldr	r2, [pc, #172]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ad4:	e00a      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d102      	bne.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003adc:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ade:	61bb      	str	r3, [r7, #24]
 8003ae0:	e004      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ae8:	4b23      	ldr	r3, [pc, #140]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x114>)
 8003aea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d134      	bne.n	8003b5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003af2:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d003      	beq.n	8003b0a <HAL_RCC_GetSysClockFreq+0xa6>
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d003      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0xac>
 8003b08:	e005      	b.n	8003b16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b0a:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b0c:	617b      	str	r3, [r7, #20]
      break;
 8003b0e:	e005      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b10:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b12:	617b      	str	r3, [r7, #20]
      break;
 8003b14:	e002      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	617b      	str	r3, [r7, #20]
      break;
 8003b1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b1c:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	091b      	lsrs	r3, r3, #4
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	3301      	adds	r3, #1
 8003b28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b2a:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	0a1b      	lsrs	r3, r3, #8
 8003b30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	fb02 f203 	mul.w	r2, r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b42:	4b0a      	ldr	r3, [pc, #40]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	0e5b      	lsrs	r3, r3, #25
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b5c:	69bb      	ldr	r3, [r7, #24]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3724      	adds	r7, #36	; 0x24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	08007a04 	.word	0x08007a04
 8003b74:	00f42400 	.word	0x00f42400
 8003b78:	007a1200 	.word	0x007a1200

08003b7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b82:	681b      	ldr	r3, [r3, #0]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	20000030 	.word	0x20000030

08003b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b98:	f7ff fff0 	bl	8003b7c <HAL_RCC_GetHCLKFreq>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	4904      	ldr	r1, [pc, #16]	; (8003bbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003baa:	5ccb      	ldrb	r3, [r1, r3]
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	080079fc 	.word	0x080079fc

08003bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bc4:	f7ff ffda 	bl	8003b7c <HAL_RCC_GetHCLKFreq>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	0adb      	lsrs	r3, r3, #11
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	4904      	ldr	r1, [pc, #16]	; (8003be8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bd6:	5ccb      	ldrb	r3, [r1, r3]
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000
 8003be8:	080079fc 	.word	0x080079fc

08003bec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bf8:	4b2a      	ldr	r3, [pc, #168]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c04:	f7ff f9c8 	bl	8002f98 <HAL_PWREx_GetVoltageRange>
 8003c08:	6178      	str	r0, [r7, #20]
 8003c0a:	e014      	b.n	8003c36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c0c:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c10:	4a24      	ldr	r2, [pc, #144]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c16:	6593      	str	r3, [r2, #88]	; 0x58
 8003c18:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c20:	60fb      	str	r3, [r7, #12]
 8003c22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c24:	f7ff f9b8 	bl	8002f98 <HAL_PWREx_GetVoltageRange>
 8003c28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c3c:	d10b      	bne.n	8003c56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b80      	cmp	r3, #128	; 0x80
 8003c42:	d919      	bls.n	8003c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2ba0      	cmp	r3, #160	; 0xa0
 8003c48:	d902      	bls.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	e013      	b.n	8003c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c50:	2301      	movs	r3, #1
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	e010      	b.n	8003c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b80      	cmp	r3, #128	; 0x80
 8003c5a:	d902      	bls.n	8003c62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	613b      	str	r3, [r7, #16]
 8003c60:	e00a      	b.n	8003c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2b80      	cmp	r3, #128	; 0x80
 8003c66:	d102      	bne.n	8003c6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c68:	2302      	movs	r3, #2
 8003c6a:	613b      	str	r3, [r7, #16]
 8003c6c:	e004      	b.n	8003c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b70      	cmp	r3, #112	; 0x70
 8003c72:	d101      	bne.n	8003c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c74:	2301      	movs	r3, #1
 8003c76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 0207 	bic.w	r2, r3, #7
 8003c80:	4909      	ldr	r1, [pc, #36]	; (8003ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c88:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d001      	beq.n	8003c9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e000      	b.n	8003c9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40022000 	.word	0x40022000

08003cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cb8:	2300      	movs	r3, #0
 8003cba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d031      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ccc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cd0:	d01a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003cd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cd6:	d814      	bhi.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d009      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ce0:	d10f      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003ce2:	4bac      	ldr	r3, [pc, #688]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	4aab      	ldr	r2, [pc, #684]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cee:	e00c      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f9dc 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d00:	e003      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	74fb      	strb	r3, [r7, #19]
      break;
 8003d06:	e000      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d0a:	7cfb      	ldrb	r3, [r7, #19]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d10:	4ba0      	ldr	r3, [pc, #640]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	499d      	ldr	r1, [pc, #628]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d26:	e001      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d28:	7cfb      	ldrb	r3, [r7, #19]
 8003d2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 8099 	beq.w	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d3e:	4b95      	ldr	r3, [pc, #596]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e000      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003d4e:	2300      	movs	r3, #0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00d      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d54:	4b8f      	ldr	r3, [pc, #572]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	4a8e      	ldr	r2, [pc, #568]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d60:	4b8c      	ldr	r3, [pc, #560]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d70:	4b89      	ldr	r3, [pc, #548]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a88      	ldr	r2, [pc, #544]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d7c:	f7fd ff8c 	bl	8001c98 <HAL_GetTick>
 8003d80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d82:	e009      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d84:	f7fd ff88 	bl	8001c98 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d902      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	74fb      	strb	r3, [r7, #19]
        break;
 8003d96:	e005      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003d98:	4b7f      	ldr	r3, [pc, #508]	; (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ef      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003da4:	7cfb      	ldrb	r3, [r7, #19]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d155      	bne.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003daa:	4b7a      	ldr	r3, [pc, #488]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01e      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d019      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003dc6:	4b73      	ldr	r3, [pc, #460]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dd2:	4b70      	ldr	r3, [pc, #448]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd8:	4a6e      	ldr	r2, [pc, #440]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003de2:	4b6c      	ldr	r3, [pc, #432]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de8:	4a6a      	ldr	r2, [pc, #424]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003df2:	4a68      	ldr	r2, [pc, #416]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d016      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd ff48 	bl	8001c98 <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e0a:	e00b      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0c:	f7fd ff44 	bl	8001c98 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d902      	bls.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	74fb      	strb	r3, [r7, #19]
            break;
 8003e22:	e006      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e24:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0ec      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003e32:	7cfb      	ldrb	r3, [r7, #19]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10b      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e38:	4b56      	ldr	r3, [pc, #344]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e46:	4953      	ldr	r1, [pc, #332]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e4e:	e004      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	74bb      	strb	r3, [r7, #18]
 8003e54:	e001      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e56:	7cfb      	ldrb	r3, [r7, #19]
 8003e58:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e5a:	7c7b      	ldrb	r3, [r7, #17]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d105      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e60:	4b4c      	ldr	r3, [pc, #304]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	4a4b      	ldr	r2, [pc, #300]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e78:	4b46      	ldr	r3, [pc, #280]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	4943      	ldr	r1, [pc, #268]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00a      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea0:	f023 020c 	bic.w	r2, r3, #12
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	493a      	ldr	r1, [pc, #232]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0320 	and.w	r3, r3, #32
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00a      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ebc:	4b35      	ldr	r3, [pc, #212]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	4932      	ldr	r1, [pc, #200]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ede:	4b2d      	ldr	r3, [pc, #180]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eec:	4929      	ldr	r1, [pc, #164]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f00:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	4921      	ldr	r1, [pc, #132]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f22:	4b1c      	ldr	r3, [pc, #112]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f30:	4918      	ldr	r1, [pc, #96]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00a      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f44:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	4910      	ldr	r1, [pc, #64]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d02c      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	4907      	ldr	r1, [pc, #28]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f84:	d10a      	bne.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f86:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	4a02      	ldr	r2, [pc, #8]	; (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f90:	60d3      	str	r3, [r2, #12]
 8003f92:	e015      	b.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fa4:	d10c      	bne.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2101      	movs	r1, #1
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 f881 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003fb6:	7cfb      	ldrb	r3, [r7, #19]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d028      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fcc:	4b30      	ldr	r3, [pc, #192]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	492d      	ldr	r1, [pc, #180]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003fea:	d106      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fec:	4b28      	ldr	r3, [pc, #160]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4a27      	ldr	r2, [pc, #156]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ff6:	60d3      	str	r3, [r2, #12]
 8003ff8:	e011      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004002:	d10c      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3304      	adds	r3, #4
 8004008:	2101      	movs	r1, #1
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f852 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800401a:	7cfb      	ldrb	r3, [r7, #19]
 800401c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d01c      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800402a:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800402c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004030:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004038:	4915      	ldr	r1, [pc, #84]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800403a:	4313      	orrs	r3, r2
 800403c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004044:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004048:	d10c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3304      	adds	r3, #4
 800404e:	2102      	movs	r1, #2
 8004050:	4618      	mov	r0, r3
 8004052:	f000 f82f 	bl	80040b4 <RCCEx_PLLSAI1_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800405a:	7cfb      	ldrb	r3, [r7, #19]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d001      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004070:	4b07      	ldr	r3, [pc, #28]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407e:	4904      	ldr	r1, [pc, #16]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004086:	7cbb      	ldrb	r3, [r7, #18]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	40021000 	.word	0x40021000

08004094 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004098:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800409e:	f043 0304 	orr.w	r3, r3, #4
 80040a2:	6013      	str	r3, [r2, #0]
}
 80040a4:	bf00      	nop
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	40021000 	.word	0x40021000

080040b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040c2:	4b74      	ldr	r3, [pc, #464]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d018      	beq.n	8004100 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80040ce:	4b71      	ldr	r3, [pc, #452]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0203 	and.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d10d      	bne.n	80040fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
       ||
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80040e6:	4b6b      	ldr	r3, [pc, #428]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	091b      	lsrs	r3, r3, #4
 80040ec:	f003 0307 	and.w	r3, r3, #7
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
       ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d047      	beq.n	800418a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
 80040fe:	e044      	b.n	800418a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d018      	beq.n	800413a <RCCEx_PLLSAI1_Config+0x86>
 8004108:	2b03      	cmp	r3, #3
 800410a:	d825      	bhi.n	8004158 <RCCEx_PLLSAI1_Config+0xa4>
 800410c:	2b01      	cmp	r3, #1
 800410e:	d002      	beq.n	8004116 <RCCEx_PLLSAI1_Config+0x62>
 8004110:	2b02      	cmp	r3, #2
 8004112:	d009      	beq.n	8004128 <RCCEx_PLLSAI1_Config+0x74>
 8004114:	e020      	b.n	8004158 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004116:	4b5f      	ldr	r3, [pc, #380]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d11d      	bne.n	800415e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004126:	e01a      	b.n	800415e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004128:	4b5a      	ldr	r3, [pc, #360]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004130:	2b00      	cmp	r3, #0
 8004132:	d116      	bne.n	8004162 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004138:	e013      	b.n	8004162 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800413a:	4b56      	ldr	r3, [pc, #344]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004146:	4b53      	ldr	r3, [pc, #332]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004156:	e006      	b.n	8004166 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
      break;
 800415c:	e004      	b.n	8004168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800415e:	bf00      	nop
 8004160:	e002      	b.n	8004168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004162:	bf00      	nop
 8004164:	e000      	b.n	8004168 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004166:	bf00      	nop
    }

    if(status == HAL_OK)
 8004168:	7bfb      	ldrb	r3, [r7, #15]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10d      	bne.n	800418a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800416e:	4b49      	ldr	r3, [pc, #292]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6819      	ldr	r1, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	3b01      	subs	r3, #1
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	430b      	orrs	r3, r1
 8004184:	4943      	ldr	r1, [pc, #268]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004186:	4313      	orrs	r3, r2
 8004188:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d17c      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004190:	4b40      	ldr	r3, [pc, #256]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a3f      	ldr	r2, [pc, #252]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004196:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800419a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419c:	f7fd fd7c 	bl	8001c98 <HAL_GetTick>
 80041a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041a2:	e009      	b.n	80041b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a4:	f7fd fd78 	bl	8001c98 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d902      	bls.n	80041b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	73fb      	strb	r3, [r7, #15]
        break;
 80041b6:	e005      	b.n	80041c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041b8:	4b36      	ldr	r3, [pc, #216]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1ef      	bne.n	80041a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d15f      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d110      	bne.n	80041f2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041d0:	4b30      	ldr	r3, [pc, #192]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80041d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6892      	ldr	r2, [r2, #8]
 80041e0:	0211      	lsls	r1, r2, #8
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	68d2      	ldr	r2, [r2, #12]
 80041e6:	06d2      	lsls	r2, r2, #27
 80041e8:	430a      	orrs	r2, r1
 80041ea:	492a      	ldr	r1, [pc, #168]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	610b      	str	r3, [r1, #16]
 80041f0:	e027      	b.n	8004242 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d112      	bne.n	800421e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041f8:	4b26      	ldr	r3, [pc, #152]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004200:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6892      	ldr	r2, [r2, #8]
 8004208:	0211      	lsls	r1, r2, #8
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6912      	ldr	r2, [r2, #16]
 800420e:	0852      	lsrs	r2, r2, #1
 8004210:	3a01      	subs	r2, #1
 8004212:	0552      	lsls	r2, r2, #21
 8004214:	430a      	orrs	r2, r1
 8004216:	491f      	ldr	r1, [pc, #124]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004218:	4313      	orrs	r3, r2
 800421a:	610b      	str	r3, [r1, #16]
 800421c:	e011      	b.n	8004242 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800421e:	4b1d      	ldr	r3, [pc, #116]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004226:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6892      	ldr	r2, [r2, #8]
 800422e:	0211      	lsls	r1, r2, #8
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6952      	ldr	r2, [r2, #20]
 8004234:	0852      	lsrs	r2, r2, #1
 8004236:	3a01      	subs	r2, #1
 8004238:	0652      	lsls	r2, r2, #25
 800423a:	430a      	orrs	r2, r1
 800423c:	4915      	ldr	r1, [pc, #84]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800423e:	4313      	orrs	r3, r2
 8004240:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a13      	ldr	r2, [pc, #76]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004248:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800424c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800424e:	f7fd fd23 	bl	8001c98 <HAL_GetTick>
 8004252:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004254:	e009      	b.n	800426a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004256:	f7fd fd1f 	bl	8001c98 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d902      	bls.n	800426a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	73fb      	strb	r3, [r7, #15]
          break;
 8004268:	e005      	b.n	8004276 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0ef      	beq.n	8004256 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d106      	bne.n	800428a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	4903      	ldr	r1, [pc, #12]	; (8004294 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004286:	4313      	orrs	r3, r2
 8004288:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800428a:	7bfb      	ldrb	r3, [r7, #15]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000

08004298 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e040      	b.n	800432c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d106      	bne.n	80042c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fd fad8 	bl	8001870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0201 	bic.w	r2, r2, #1
 80042d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f8c0 	bl	800445c <UART_SetConfig>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d101      	bne.n	80042e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e022      	b.n	800432c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 fac0 	bl	8004874 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004302:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004312:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0201 	orr.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 fb47 	bl	80049b8 <UART_CheckIdleState>
 800432a:	4603      	mov	r3, r0
}
 800432c:	4618      	mov	r0, r3
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b08a      	sub	sp, #40	; 0x28
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	4613      	mov	r3, r2
 8004342:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004348:	2b20      	cmp	r3, #32
 800434a:	f040 8082 	bne.w	8004452 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d002      	beq.n	800435a <HAL_UART_Transmit+0x26>
 8004354:	88fb      	ldrh	r3, [r7, #6]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07a      	b.n	8004454 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_UART_Transmit+0x38>
 8004368:	2302      	movs	r3, #2
 800436a:	e073      	b.n	8004454 <HAL_UART_Transmit+0x120>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004382:	f7fd fc89 	bl	8001c98 <HAL_GetTick>
 8004386:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	88fa      	ldrh	r2, [r7, #6]
 800438c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a0:	d108      	bne.n	80043b4 <HAL_UART_Transmit+0x80>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d104      	bne.n	80043b4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e003      	b.n	80043bc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80043c4:	e02d      	b.n	8004422 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2200      	movs	r2, #0
 80043ce:	2180      	movs	r1, #128	; 0x80
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fb3a 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d001      	beq.n	80043e0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e039      	b.n	8004454 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	881a      	ldrh	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043f2:	b292      	uxth	r2, r2
 80043f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	3302      	adds	r3, #2
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	e008      	b.n	8004410 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	b292      	uxth	r2, r2
 8004408:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3301      	adds	r3, #1
 800440e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004428:	b29b      	uxth	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1cb      	bne.n	80043c6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	9300      	str	r3, [sp, #0]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2200      	movs	r2, #0
 8004436:	2140      	movs	r1, #64	; 0x40
 8004438:	68f8      	ldr	r0, [r7, #12]
 800443a:	f000 fb06 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d001      	beq.n	8004448 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e005      	b.n	8004454 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800445c:	b5b0      	push	{r4, r5, r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	431a      	orrs	r2, r3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	4313      	orrs	r3, r2
 800447e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4baf      	ldr	r3, [pc, #700]	; (8004744 <UART_SetConfig+0x2e8>)
 8004488:	4013      	ands	r3, r2
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	69f9      	ldr	r1, [r7, #28]
 8004490:	430b      	orrs	r3, r1
 8004492:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	430a      	orrs	r2, r1
 80044a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4aa4      	ldr	r2, [pc, #656]	; (8004748 <UART_SetConfig+0x2ec>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a9b      	ldr	r2, [pc, #620]	; (800474c <UART_SetConfig+0x2f0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d121      	bne.n	8004526 <UART_SetConfig+0xca>
 80044e2:	4b9b      	ldr	r3, [pc, #620]	; (8004750 <UART_SetConfig+0x2f4>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d817      	bhi.n	8004520 <UART_SetConfig+0xc4>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <UART_SetConfig+0x9c>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	08004509 	.word	0x08004509
 80044fc:	08004515 	.word	0x08004515
 8004500:	0800450f 	.word	0x0800450f
 8004504:	0800451b 	.word	0x0800451b
 8004508:	2301      	movs	r3, #1
 800450a:	76fb      	strb	r3, [r7, #27]
 800450c:	e070      	b.n	80045f0 <UART_SetConfig+0x194>
 800450e:	2302      	movs	r3, #2
 8004510:	76fb      	strb	r3, [r7, #27]
 8004512:	e06d      	b.n	80045f0 <UART_SetConfig+0x194>
 8004514:	2304      	movs	r3, #4
 8004516:	76fb      	strb	r3, [r7, #27]
 8004518:	e06a      	b.n	80045f0 <UART_SetConfig+0x194>
 800451a:	2308      	movs	r3, #8
 800451c:	76fb      	strb	r3, [r7, #27]
 800451e:	e067      	b.n	80045f0 <UART_SetConfig+0x194>
 8004520:	2310      	movs	r3, #16
 8004522:	76fb      	strb	r3, [r7, #27]
 8004524:	e064      	b.n	80045f0 <UART_SetConfig+0x194>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a8a      	ldr	r2, [pc, #552]	; (8004754 <UART_SetConfig+0x2f8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d132      	bne.n	8004596 <UART_SetConfig+0x13a>
 8004530:	4b87      	ldr	r3, [pc, #540]	; (8004750 <UART_SetConfig+0x2f4>)
 8004532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b0c      	cmp	r3, #12
 800453c:	d828      	bhi.n	8004590 <UART_SetConfig+0x134>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0xe8>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	08004579 	.word	0x08004579
 8004548:	08004591 	.word	0x08004591
 800454c:	08004591 	.word	0x08004591
 8004550:	08004591 	.word	0x08004591
 8004554:	08004585 	.word	0x08004585
 8004558:	08004591 	.word	0x08004591
 800455c:	08004591 	.word	0x08004591
 8004560:	08004591 	.word	0x08004591
 8004564:	0800457f 	.word	0x0800457f
 8004568:	08004591 	.word	0x08004591
 800456c:	08004591 	.word	0x08004591
 8004570:	08004591 	.word	0x08004591
 8004574:	0800458b 	.word	0x0800458b
 8004578:	2300      	movs	r3, #0
 800457a:	76fb      	strb	r3, [r7, #27]
 800457c:	e038      	b.n	80045f0 <UART_SetConfig+0x194>
 800457e:	2302      	movs	r3, #2
 8004580:	76fb      	strb	r3, [r7, #27]
 8004582:	e035      	b.n	80045f0 <UART_SetConfig+0x194>
 8004584:	2304      	movs	r3, #4
 8004586:	76fb      	strb	r3, [r7, #27]
 8004588:	e032      	b.n	80045f0 <UART_SetConfig+0x194>
 800458a:	2308      	movs	r3, #8
 800458c:	76fb      	strb	r3, [r7, #27]
 800458e:	e02f      	b.n	80045f0 <UART_SetConfig+0x194>
 8004590:	2310      	movs	r3, #16
 8004592:	76fb      	strb	r3, [r7, #27]
 8004594:	e02c      	b.n	80045f0 <UART_SetConfig+0x194>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6b      	ldr	r2, [pc, #428]	; (8004748 <UART_SetConfig+0x2ec>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d125      	bne.n	80045ec <UART_SetConfig+0x190>
 80045a0:	4b6b      	ldr	r3, [pc, #428]	; (8004750 <UART_SetConfig+0x2f4>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045ae:	d017      	beq.n	80045e0 <UART_SetConfig+0x184>
 80045b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045b4:	d817      	bhi.n	80045e6 <UART_SetConfig+0x18a>
 80045b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045ba:	d00b      	beq.n	80045d4 <UART_SetConfig+0x178>
 80045bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045c0:	d811      	bhi.n	80045e6 <UART_SetConfig+0x18a>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d003      	beq.n	80045ce <UART_SetConfig+0x172>
 80045c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045ca:	d006      	beq.n	80045da <UART_SetConfig+0x17e>
 80045cc:	e00b      	b.n	80045e6 <UART_SetConfig+0x18a>
 80045ce:	2300      	movs	r3, #0
 80045d0:	76fb      	strb	r3, [r7, #27]
 80045d2:	e00d      	b.n	80045f0 <UART_SetConfig+0x194>
 80045d4:	2302      	movs	r3, #2
 80045d6:	76fb      	strb	r3, [r7, #27]
 80045d8:	e00a      	b.n	80045f0 <UART_SetConfig+0x194>
 80045da:	2304      	movs	r3, #4
 80045dc:	76fb      	strb	r3, [r7, #27]
 80045de:	e007      	b.n	80045f0 <UART_SetConfig+0x194>
 80045e0:	2308      	movs	r3, #8
 80045e2:	76fb      	strb	r3, [r7, #27]
 80045e4:	e004      	b.n	80045f0 <UART_SetConfig+0x194>
 80045e6:	2310      	movs	r3, #16
 80045e8:	76fb      	strb	r3, [r7, #27]
 80045ea:	e001      	b.n	80045f0 <UART_SetConfig+0x194>
 80045ec:	2310      	movs	r3, #16
 80045ee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a54      	ldr	r2, [pc, #336]	; (8004748 <UART_SetConfig+0x2ec>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d173      	bne.n	80046e2 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80045fa:	7efb      	ldrb	r3, [r7, #27]
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d824      	bhi.n	800464a <UART_SetConfig+0x1ee>
 8004600:	a201      	add	r2, pc, #4	; (adr r2, 8004608 <UART_SetConfig+0x1ac>)
 8004602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004606:	bf00      	nop
 8004608:	0800462d 	.word	0x0800462d
 800460c:	0800464b 	.word	0x0800464b
 8004610:	08004635 	.word	0x08004635
 8004614:	0800464b 	.word	0x0800464b
 8004618:	0800463b 	.word	0x0800463b
 800461c:	0800464b 	.word	0x0800464b
 8004620:	0800464b 	.word	0x0800464b
 8004624:	0800464b 	.word	0x0800464b
 8004628:	08004643 	.word	0x08004643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800462c:	f7ff fab2 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8004630:	6178      	str	r0, [r7, #20]
        break;
 8004632:	e00f      	b.n	8004654 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004634:	4b48      	ldr	r3, [pc, #288]	; (8004758 <UART_SetConfig+0x2fc>)
 8004636:	617b      	str	r3, [r7, #20]
        break;
 8004638:	e00c      	b.n	8004654 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800463a:	f7ff fa13 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 800463e:	6178      	str	r0, [r7, #20]
        break;
 8004640:	e008      	b.n	8004654 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004646:	617b      	str	r3, [r7, #20]
        break;
 8004648:	e004      	b.n	8004654 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800464a:	2300      	movs	r3, #0
 800464c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	76bb      	strb	r3, [r7, #26]
        break;
 8004652:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80fe 	beq.w	8004858 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	4613      	mov	r3, r2
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	4413      	add	r3, r2
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	429a      	cmp	r2, r3
 800466a:	d305      	bcc.n	8004678 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	429a      	cmp	r2, r3
 8004676:	d902      	bls.n	800467e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	76bb      	strb	r3, [r7, #26]
 800467c:	e0ec      	b.n	8004858 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	4618      	mov	r0, r3
 8004682:	f04f 0100 	mov.w	r1, #0
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	020b      	lsls	r3, r1, #8
 8004690:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004694:	0202      	lsls	r2, r0, #8
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	6849      	ldr	r1, [r1, #4]
 800469a:	0849      	lsrs	r1, r1, #1
 800469c:	4608      	mov	r0, r1
 800469e:	f04f 0100 	mov.w	r1, #0
 80046a2:	1814      	adds	r4, r2, r0
 80046a4:	eb43 0501 	adc.w	r5, r3, r1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	461a      	mov	r2, r3
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	4620      	mov	r0, r4
 80046b4:	4629      	mov	r1, r5
 80046b6:	f7fc fa77 	bl	8000ba8 <__aeabi_uldivmod>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4613      	mov	r3, r2
 80046c0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c8:	d308      	bcc.n	80046dc <UART_SetConfig+0x280>
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046d0:	d204      	bcs.n	80046dc <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	60da      	str	r2, [r3, #12]
 80046da:	e0bd      	b.n	8004858 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	76bb      	strb	r3, [r7, #26]
 80046e0:	e0ba      	b.n	8004858 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ea:	d168      	bne.n	80047be <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80046ec:	7efb      	ldrb	r3, [r7, #27]
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d834      	bhi.n	800475c <UART_SetConfig+0x300>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <UART_SetConfig+0x29c>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	0800471d 	.word	0x0800471d
 80046fc:	08004725 	.word	0x08004725
 8004700:	0800472d 	.word	0x0800472d
 8004704:	0800475d 	.word	0x0800475d
 8004708:	08004733 	.word	0x08004733
 800470c:	0800475d 	.word	0x0800475d
 8004710:	0800475d 	.word	0x0800475d
 8004714:	0800475d 	.word	0x0800475d
 8004718:	0800473b 	.word	0x0800473b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800471c:	f7ff fa3a 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 8004720:	6178      	str	r0, [r7, #20]
        break;
 8004722:	e020      	b.n	8004766 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004724:	f7ff fa4c 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 8004728:	6178      	str	r0, [r7, #20]
        break;
 800472a:	e01c      	b.n	8004766 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800472c:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <UART_SetConfig+0x2fc>)
 800472e:	617b      	str	r3, [r7, #20]
        break;
 8004730:	e019      	b.n	8004766 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004732:	f7ff f997 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 8004736:	6178      	str	r0, [r7, #20]
        break;
 8004738:	e015      	b.n	8004766 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800473a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473e:	617b      	str	r3, [r7, #20]
        break;
 8004740:	e011      	b.n	8004766 <UART_SetConfig+0x30a>
 8004742:	bf00      	nop
 8004744:	efff69f3 	.word	0xefff69f3
 8004748:	40008000 	.word	0x40008000
 800474c:	40013800 	.word	0x40013800
 8004750:	40021000 	.word	0x40021000
 8004754:	40004400 	.word	0x40004400
 8004758:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	76bb      	strb	r3, [r7, #26]
        break;
 8004764:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d075      	beq.n	8004858 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	005a      	lsls	r2, r3, #1
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	085b      	lsrs	r3, r3, #1
 8004776:	441a      	add	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004780:	b29b      	uxth	r3, r3
 8004782:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b0f      	cmp	r3, #15
 8004788:	d916      	bls.n	80047b8 <UART_SetConfig+0x35c>
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004790:	d212      	bcs.n	80047b8 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f023 030f 	bic.w	r3, r3, #15
 800479a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	085b      	lsrs	r3, r3, #1
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	89fb      	ldrh	r3, [r7, #14]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	89fa      	ldrh	r2, [r7, #14]
 80047b4:	60da      	str	r2, [r3, #12]
 80047b6:	e04f      	b.n	8004858 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	76bb      	strb	r3, [r7, #26]
 80047bc:	e04c      	b.n	8004858 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047be:	7efb      	ldrb	r3, [r7, #27]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d828      	bhi.n	8004816 <UART_SetConfig+0x3ba>
 80047c4:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <UART_SetConfig+0x370>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047f1 	.word	0x080047f1
 80047d0:	080047f9 	.word	0x080047f9
 80047d4:	08004801 	.word	0x08004801
 80047d8:	08004817 	.word	0x08004817
 80047dc:	08004807 	.word	0x08004807
 80047e0:	08004817 	.word	0x08004817
 80047e4:	08004817 	.word	0x08004817
 80047e8:	08004817 	.word	0x08004817
 80047ec:	0800480f 	.word	0x0800480f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f0:	f7ff f9d0 	bl	8003b94 <HAL_RCC_GetPCLK1Freq>
 80047f4:	6178      	str	r0, [r7, #20]
        break;
 80047f6:	e013      	b.n	8004820 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047f8:	f7ff f9e2 	bl	8003bc0 <HAL_RCC_GetPCLK2Freq>
 80047fc:	6178      	str	r0, [r7, #20]
        break;
 80047fe:	e00f      	b.n	8004820 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <UART_SetConfig+0x414>)
 8004802:	617b      	str	r3, [r7, #20]
        break;
 8004804:	e00c      	b.n	8004820 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004806:	f7ff f92d 	bl	8003a64 <HAL_RCC_GetSysClockFreq>
 800480a:	6178      	str	r0, [r7, #20]
        break;
 800480c:	e008      	b.n	8004820 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800480e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004812:	617b      	str	r3, [r7, #20]
        break;
 8004814:	e004      	b.n	8004820 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	76bb      	strb	r3, [r7, #26]
        break;
 800481e:	bf00      	nop
    }

    if (pclk != 0U)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d018      	beq.n	8004858 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	085a      	lsrs	r2, r3, #1
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	441a      	add	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	fbb2 f3f3 	udiv	r3, r2, r3
 8004838:	b29b      	uxth	r3, r3
 800483a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b0f      	cmp	r3, #15
 8004840:	d908      	bls.n	8004854 <UART_SetConfig+0x3f8>
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004848:	d204      	bcs.n	8004854 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	693a      	ldr	r2, [r7, #16]
 8004850:	60da      	str	r2, [r3, #12]
 8004852:	e001      	b.n	8004858 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004864:	7ebb      	ldrb	r3, [r7, #26]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3720      	adds	r7, #32
 800486a:	46bd      	mov	sp, r7
 800486c:	bdb0      	pop	{r4, r5, r7, pc}
 800486e:	bf00      	nop
 8004870:	00f42400 	.word	0x00f42400

08004874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01a      	beq.n	800498a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004972:	d10a      	bne.n	800498a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	430a      	orrs	r2, r1
 80049aa:	605a      	str	r2, [r3, #4]
  }
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af02      	add	r7, sp, #8
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049c8:	f7fd f966 	bl	8001c98 <HAL_GetTick>
 80049cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d10e      	bne.n	80049fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f82d 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 80049f0:	4603      	mov	r3, r0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e023      	b.n	8004a42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d10e      	bne.n	8004a26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f817 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e00d      	b.n	8004a42 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5a:	e05e      	b.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	d05a      	beq.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a64:	f7fd f918 	bl	8001c98 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d302      	bcc.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d11b      	bne.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a88:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e043      	b.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02c      	beq.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ace:	d124      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ad8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ae8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0201 	bic.w	r2, r2, #1
 8004af8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2220      	movs	r2, #32
 8004b04:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e00f      	b.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4013      	ands	r3, r2
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d091      	beq.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <__errno>:
 8004b44:	4b01      	ldr	r3, [pc, #4]	; (8004b4c <__errno+0x8>)
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	2000003c 	.word	0x2000003c

08004b50 <__libc_init_array>:
 8004b50:	b570      	push	{r4, r5, r6, lr}
 8004b52:	4d0d      	ldr	r5, [pc, #52]	; (8004b88 <__libc_init_array+0x38>)
 8004b54:	4c0d      	ldr	r4, [pc, #52]	; (8004b8c <__libc_init_array+0x3c>)
 8004b56:	1b64      	subs	r4, r4, r5
 8004b58:	10a4      	asrs	r4, r4, #2
 8004b5a:	2600      	movs	r6, #0
 8004b5c:	42a6      	cmp	r6, r4
 8004b5e:	d109      	bne.n	8004b74 <__libc_init_array+0x24>
 8004b60:	4d0b      	ldr	r5, [pc, #44]	; (8004b90 <__libc_init_array+0x40>)
 8004b62:	4c0c      	ldr	r4, [pc, #48]	; (8004b94 <__libc_init_array+0x44>)
 8004b64:	f002 feb6 	bl	80078d4 <_init>
 8004b68:	1b64      	subs	r4, r4, r5
 8004b6a:	10a4      	asrs	r4, r4, #2
 8004b6c:	2600      	movs	r6, #0
 8004b6e:	42a6      	cmp	r6, r4
 8004b70:	d105      	bne.n	8004b7e <__libc_init_array+0x2e>
 8004b72:	bd70      	pop	{r4, r5, r6, pc}
 8004b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b78:	4798      	blx	r3
 8004b7a:	3601      	adds	r6, #1
 8004b7c:	e7ee      	b.n	8004b5c <__libc_init_array+0xc>
 8004b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b82:	4798      	blx	r3
 8004b84:	3601      	adds	r6, #1
 8004b86:	e7f2      	b.n	8004b6e <__libc_init_array+0x1e>
 8004b88:	08007e1c 	.word	0x08007e1c
 8004b8c:	08007e1c 	.word	0x08007e1c
 8004b90:	08007e1c 	.word	0x08007e1c
 8004b94:	08007e20 	.word	0x08007e20

08004b98 <memset>:
 8004b98:	4402      	add	r2, r0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d100      	bne.n	8004ba2 <memset+0xa>
 8004ba0:	4770      	bx	lr
 8004ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ba6:	e7f9      	b.n	8004b9c <memset+0x4>

08004ba8 <__cvt>:
 8004ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bac:	ec55 4b10 	vmov	r4, r5, d0
 8004bb0:	2d00      	cmp	r5, #0
 8004bb2:	460e      	mov	r6, r1
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	bfbb      	ittet	lt
 8004bba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004bbe:	461d      	movlt	r5, r3
 8004bc0:	2300      	movge	r3, #0
 8004bc2:	232d      	movlt	r3, #45	; 0x2d
 8004bc4:	700b      	strb	r3, [r1, #0]
 8004bc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bc8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004bcc:	4691      	mov	r9, r2
 8004bce:	f023 0820 	bic.w	r8, r3, #32
 8004bd2:	bfbc      	itt	lt
 8004bd4:	4622      	movlt	r2, r4
 8004bd6:	4614      	movlt	r4, r2
 8004bd8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bdc:	d005      	beq.n	8004bea <__cvt+0x42>
 8004bde:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004be2:	d100      	bne.n	8004be6 <__cvt+0x3e>
 8004be4:	3601      	adds	r6, #1
 8004be6:	2102      	movs	r1, #2
 8004be8:	e000      	b.n	8004bec <__cvt+0x44>
 8004bea:	2103      	movs	r1, #3
 8004bec:	ab03      	add	r3, sp, #12
 8004bee:	9301      	str	r3, [sp, #4]
 8004bf0:	ab02      	add	r3, sp, #8
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	ec45 4b10 	vmov	d0, r4, r5
 8004bf8:	4653      	mov	r3, sl
 8004bfa:	4632      	mov	r2, r6
 8004bfc:	f000 fcec 	bl	80055d8 <_dtoa_r>
 8004c00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c04:	4607      	mov	r7, r0
 8004c06:	d102      	bne.n	8004c0e <__cvt+0x66>
 8004c08:	f019 0f01 	tst.w	r9, #1
 8004c0c:	d022      	beq.n	8004c54 <__cvt+0xac>
 8004c0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c12:	eb07 0906 	add.w	r9, r7, r6
 8004c16:	d110      	bne.n	8004c3a <__cvt+0x92>
 8004c18:	783b      	ldrb	r3, [r7, #0]
 8004c1a:	2b30      	cmp	r3, #48	; 0x30
 8004c1c:	d10a      	bne.n	8004c34 <__cvt+0x8c>
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2300      	movs	r3, #0
 8004c22:	4620      	mov	r0, r4
 8004c24:	4629      	mov	r1, r5
 8004c26:	f7fb ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c2a:	b918      	cbnz	r0, 8004c34 <__cvt+0x8c>
 8004c2c:	f1c6 0601 	rsb	r6, r6, #1
 8004c30:	f8ca 6000 	str.w	r6, [sl]
 8004c34:	f8da 3000 	ldr.w	r3, [sl]
 8004c38:	4499      	add	r9, r3
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	4620      	mov	r0, r4
 8004c40:	4629      	mov	r1, r5
 8004c42:	f7fb ff41 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c46:	b108      	cbz	r0, 8004c4c <__cvt+0xa4>
 8004c48:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c4c:	2230      	movs	r2, #48	; 0x30
 8004c4e:	9b03      	ldr	r3, [sp, #12]
 8004c50:	454b      	cmp	r3, r9
 8004c52:	d307      	bcc.n	8004c64 <__cvt+0xbc>
 8004c54:	9b03      	ldr	r3, [sp, #12]
 8004c56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c58:	1bdb      	subs	r3, r3, r7
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	b004      	add	sp, #16
 8004c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c64:	1c59      	adds	r1, r3, #1
 8004c66:	9103      	str	r1, [sp, #12]
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e7f0      	b.n	8004c4e <__cvt+0xa6>

08004c6c <__exponent>:
 8004c6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2900      	cmp	r1, #0
 8004c72:	bfb8      	it	lt
 8004c74:	4249      	neglt	r1, r1
 8004c76:	f803 2b02 	strb.w	r2, [r3], #2
 8004c7a:	bfb4      	ite	lt
 8004c7c:	222d      	movlt	r2, #45	; 0x2d
 8004c7e:	222b      	movge	r2, #43	; 0x2b
 8004c80:	2909      	cmp	r1, #9
 8004c82:	7042      	strb	r2, [r0, #1]
 8004c84:	dd2a      	ble.n	8004cdc <__exponent+0x70>
 8004c86:	f10d 0407 	add.w	r4, sp, #7
 8004c8a:	46a4      	mov	ip, r4
 8004c8c:	270a      	movs	r7, #10
 8004c8e:	46a6      	mov	lr, r4
 8004c90:	460a      	mov	r2, r1
 8004c92:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c96:	fb07 1516 	mls	r5, r7, r6, r1
 8004c9a:	3530      	adds	r5, #48	; 0x30
 8004c9c:	2a63      	cmp	r2, #99	; 0x63
 8004c9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004ca2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004ca6:	4631      	mov	r1, r6
 8004ca8:	dcf1      	bgt.n	8004c8e <__exponent+0x22>
 8004caa:	3130      	adds	r1, #48	; 0x30
 8004cac:	f1ae 0502 	sub.w	r5, lr, #2
 8004cb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004cb4:	1c44      	adds	r4, r0, #1
 8004cb6:	4629      	mov	r1, r5
 8004cb8:	4561      	cmp	r1, ip
 8004cba:	d30a      	bcc.n	8004cd2 <__exponent+0x66>
 8004cbc:	f10d 0209 	add.w	r2, sp, #9
 8004cc0:	eba2 020e 	sub.w	r2, r2, lr
 8004cc4:	4565      	cmp	r5, ip
 8004cc6:	bf88      	it	hi
 8004cc8:	2200      	movhi	r2, #0
 8004cca:	4413      	add	r3, r2
 8004ccc:	1a18      	subs	r0, r3, r0
 8004cce:	b003      	add	sp, #12
 8004cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004cda:	e7ed      	b.n	8004cb8 <__exponent+0x4c>
 8004cdc:	2330      	movs	r3, #48	; 0x30
 8004cde:	3130      	adds	r1, #48	; 0x30
 8004ce0:	7083      	strb	r3, [r0, #2]
 8004ce2:	70c1      	strb	r1, [r0, #3]
 8004ce4:	1d03      	adds	r3, r0, #4
 8004ce6:	e7f1      	b.n	8004ccc <__exponent+0x60>

08004ce8 <_printf_float>:
 8004ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cec:	ed2d 8b02 	vpush	{d8}
 8004cf0:	b08d      	sub	sp, #52	; 0x34
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004cf8:	4616      	mov	r6, r2
 8004cfa:	461f      	mov	r7, r3
 8004cfc:	4605      	mov	r5, r0
 8004cfe:	f001 fa57 	bl	80061b0 <_localeconv_r>
 8004d02:	f8d0 a000 	ldr.w	sl, [r0]
 8004d06:	4650      	mov	r0, sl
 8004d08:	f7fb fa62 	bl	80001d0 <strlen>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	9305      	str	r3, [sp, #20]
 8004d14:	f8d8 3000 	ldr.w	r3, [r8]
 8004d18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d1c:	3307      	adds	r3, #7
 8004d1e:	f023 0307 	bic.w	r3, r3, #7
 8004d22:	f103 0208 	add.w	r2, r3, #8
 8004d26:	f8c8 2000 	str.w	r2, [r8]
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d3a:	9307      	str	r3, [sp, #28]
 8004d3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d40:	ee08 0a10 	vmov	s16, r0
 8004d44:	4b9f      	ldr	r3, [pc, #636]	; (8004fc4 <_printf_float+0x2dc>)
 8004d46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4e:	f7fb feed 	bl	8000b2c <__aeabi_dcmpun>
 8004d52:	bb88      	cbnz	r0, 8004db8 <_printf_float+0xd0>
 8004d54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d58:	4b9a      	ldr	r3, [pc, #616]	; (8004fc4 <_printf_float+0x2dc>)
 8004d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5e:	f7fb fec7 	bl	8000af0 <__aeabi_dcmple>
 8004d62:	bb48      	cbnz	r0, 8004db8 <_printf_float+0xd0>
 8004d64:	2200      	movs	r2, #0
 8004d66:	2300      	movs	r3, #0
 8004d68:	4640      	mov	r0, r8
 8004d6a:	4649      	mov	r1, r9
 8004d6c:	f7fb feb6 	bl	8000adc <__aeabi_dcmplt>
 8004d70:	b110      	cbz	r0, 8004d78 <_printf_float+0x90>
 8004d72:	232d      	movs	r3, #45	; 0x2d
 8004d74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d78:	4b93      	ldr	r3, [pc, #588]	; (8004fc8 <_printf_float+0x2e0>)
 8004d7a:	4894      	ldr	r0, [pc, #592]	; (8004fcc <_printf_float+0x2e4>)
 8004d7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004d80:	bf94      	ite	ls
 8004d82:	4698      	movls	r8, r3
 8004d84:	4680      	movhi	r8, r0
 8004d86:	2303      	movs	r3, #3
 8004d88:	6123      	str	r3, [r4, #16]
 8004d8a:	9b05      	ldr	r3, [sp, #20]
 8004d8c:	f023 0204 	bic.w	r2, r3, #4
 8004d90:	6022      	str	r2, [r4, #0]
 8004d92:	f04f 0900 	mov.w	r9, #0
 8004d96:	9700      	str	r7, [sp, #0]
 8004d98:	4633      	mov	r3, r6
 8004d9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4628      	mov	r0, r5
 8004da0:	f000 f9d8 	bl	8005154 <_printf_common>
 8004da4:	3001      	adds	r0, #1
 8004da6:	f040 8090 	bne.w	8004eca <_printf_float+0x1e2>
 8004daa:	f04f 30ff 	mov.w	r0, #4294967295
 8004dae:	b00d      	add	sp, #52	; 0x34
 8004db0:	ecbd 8b02 	vpop	{d8}
 8004db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	f7fb feb4 	bl	8000b2c <__aeabi_dcmpun>
 8004dc4:	b140      	cbz	r0, 8004dd8 <_printf_float+0xf0>
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bfbc      	itt	lt
 8004dcc:	232d      	movlt	r3, #45	; 0x2d
 8004dce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004dd2:	487f      	ldr	r0, [pc, #508]	; (8004fd0 <_printf_float+0x2e8>)
 8004dd4:	4b7f      	ldr	r3, [pc, #508]	; (8004fd4 <_printf_float+0x2ec>)
 8004dd6:	e7d1      	b.n	8004d7c <_printf_float+0x94>
 8004dd8:	6863      	ldr	r3, [r4, #4]
 8004dda:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004dde:	9206      	str	r2, [sp, #24]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	d13f      	bne.n	8004e64 <_printf_float+0x17c>
 8004de4:	2306      	movs	r3, #6
 8004de6:	6063      	str	r3, [r4, #4]
 8004de8:	9b05      	ldr	r3, [sp, #20]
 8004dea:	6861      	ldr	r1, [r4, #4]
 8004dec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004df0:	2300      	movs	r3, #0
 8004df2:	9303      	str	r3, [sp, #12]
 8004df4:	ab0a      	add	r3, sp, #40	; 0x28
 8004df6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004dfa:	ab09      	add	r3, sp, #36	; 0x24
 8004dfc:	ec49 8b10 	vmov	d0, r8, r9
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	6022      	str	r2, [r4, #0]
 8004e04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f7ff fecd 	bl	8004ba8 <__cvt>
 8004e0e:	9b06      	ldr	r3, [sp, #24]
 8004e10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e12:	2b47      	cmp	r3, #71	; 0x47
 8004e14:	4680      	mov	r8, r0
 8004e16:	d108      	bne.n	8004e2a <_printf_float+0x142>
 8004e18:	1cc8      	adds	r0, r1, #3
 8004e1a:	db02      	blt.n	8004e22 <_printf_float+0x13a>
 8004e1c:	6863      	ldr	r3, [r4, #4]
 8004e1e:	4299      	cmp	r1, r3
 8004e20:	dd41      	ble.n	8004ea6 <_printf_float+0x1be>
 8004e22:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e26:	fa5f fb8b 	uxtb.w	fp, fp
 8004e2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e2e:	d820      	bhi.n	8004e72 <_printf_float+0x18a>
 8004e30:	3901      	subs	r1, #1
 8004e32:	465a      	mov	r2, fp
 8004e34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e38:	9109      	str	r1, [sp, #36]	; 0x24
 8004e3a:	f7ff ff17 	bl	8004c6c <__exponent>
 8004e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e40:	1813      	adds	r3, r2, r0
 8004e42:	2a01      	cmp	r2, #1
 8004e44:	4681      	mov	r9, r0
 8004e46:	6123      	str	r3, [r4, #16]
 8004e48:	dc02      	bgt.n	8004e50 <_printf_float+0x168>
 8004e4a:	6822      	ldr	r2, [r4, #0]
 8004e4c:	07d2      	lsls	r2, r2, #31
 8004e4e:	d501      	bpl.n	8004e54 <_printf_float+0x16c>
 8004e50:	3301      	adds	r3, #1
 8004e52:	6123      	str	r3, [r4, #16]
 8004e54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d09c      	beq.n	8004d96 <_printf_float+0xae>
 8004e5c:	232d      	movs	r3, #45	; 0x2d
 8004e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e62:	e798      	b.n	8004d96 <_printf_float+0xae>
 8004e64:	9a06      	ldr	r2, [sp, #24]
 8004e66:	2a47      	cmp	r2, #71	; 0x47
 8004e68:	d1be      	bne.n	8004de8 <_printf_float+0x100>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1bc      	bne.n	8004de8 <_printf_float+0x100>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e7b9      	b.n	8004de6 <_printf_float+0xfe>
 8004e72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e76:	d118      	bne.n	8004eaa <_printf_float+0x1c2>
 8004e78:	2900      	cmp	r1, #0
 8004e7a:	6863      	ldr	r3, [r4, #4]
 8004e7c:	dd0b      	ble.n	8004e96 <_printf_float+0x1ae>
 8004e7e:	6121      	str	r1, [r4, #16]
 8004e80:	b913      	cbnz	r3, 8004e88 <_printf_float+0x1a0>
 8004e82:	6822      	ldr	r2, [r4, #0]
 8004e84:	07d0      	lsls	r0, r2, #31
 8004e86:	d502      	bpl.n	8004e8e <_printf_float+0x1a6>
 8004e88:	3301      	adds	r3, #1
 8004e8a:	440b      	add	r3, r1
 8004e8c:	6123      	str	r3, [r4, #16]
 8004e8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e90:	f04f 0900 	mov.w	r9, #0
 8004e94:	e7de      	b.n	8004e54 <_printf_float+0x16c>
 8004e96:	b913      	cbnz	r3, 8004e9e <_printf_float+0x1b6>
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	07d2      	lsls	r2, r2, #31
 8004e9c:	d501      	bpl.n	8004ea2 <_printf_float+0x1ba>
 8004e9e:	3302      	adds	r3, #2
 8004ea0:	e7f4      	b.n	8004e8c <_printf_float+0x1a4>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e7f2      	b.n	8004e8c <_printf_float+0x1a4>
 8004ea6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eac:	4299      	cmp	r1, r3
 8004eae:	db05      	blt.n	8004ebc <_printf_float+0x1d4>
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	6121      	str	r1, [r4, #16]
 8004eb4:	07d8      	lsls	r0, r3, #31
 8004eb6:	d5ea      	bpl.n	8004e8e <_printf_float+0x1a6>
 8004eb8:	1c4b      	adds	r3, r1, #1
 8004eba:	e7e7      	b.n	8004e8c <_printf_float+0x1a4>
 8004ebc:	2900      	cmp	r1, #0
 8004ebe:	bfd4      	ite	le
 8004ec0:	f1c1 0202 	rsble	r2, r1, #2
 8004ec4:	2201      	movgt	r2, #1
 8004ec6:	4413      	add	r3, r2
 8004ec8:	e7e0      	b.n	8004e8c <_printf_float+0x1a4>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	055a      	lsls	r2, r3, #21
 8004ece:	d407      	bmi.n	8004ee0 <_printf_float+0x1f8>
 8004ed0:	6923      	ldr	r3, [r4, #16]
 8004ed2:	4642      	mov	r2, r8
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	47b8      	blx	r7
 8004eda:	3001      	adds	r0, #1
 8004edc:	d12c      	bne.n	8004f38 <_printf_float+0x250>
 8004ede:	e764      	b.n	8004daa <_printf_float+0xc2>
 8004ee0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ee4:	f240 80e0 	bls.w	80050a8 <_printf_float+0x3c0>
 8004ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004eec:	2200      	movs	r2, #0
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f7fb fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d034      	beq.n	8004f62 <_printf_float+0x27a>
 8004ef8:	4a37      	ldr	r2, [pc, #220]	; (8004fd8 <_printf_float+0x2f0>)
 8004efa:	2301      	movs	r3, #1
 8004efc:	4631      	mov	r1, r6
 8004efe:	4628      	mov	r0, r5
 8004f00:	47b8      	blx	r7
 8004f02:	3001      	adds	r0, #1
 8004f04:	f43f af51 	beq.w	8004daa <_printf_float+0xc2>
 8004f08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	db02      	blt.n	8004f16 <_printf_float+0x22e>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	07d8      	lsls	r0, r3, #31
 8004f14:	d510      	bpl.n	8004f38 <_printf_float+0x250>
 8004f16:	ee18 3a10 	vmov	r3, s16
 8004f1a:	4652      	mov	r2, sl
 8004f1c:	4631      	mov	r1, r6
 8004f1e:	4628      	mov	r0, r5
 8004f20:	47b8      	blx	r7
 8004f22:	3001      	adds	r0, #1
 8004f24:	f43f af41 	beq.w	8004daa <_printf_float+0xc2>
 8004f28:	f04f 0800 	mov.w	r8, #0
 8004f2c:	f104 091a 	add.w	r9, r4, #26
 8004f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f32:	3b01      	subs	r3, #1
 8004f34:	4543      	cmp	r3, r8
 8004f36:	dc09      	bgt.n	8004f4c <_printf_float+0x264>
 8004f38:	6823      	ldr	r3, [r4, #0]
 8004f3a:	079b      	lsls	r3, r3, #30
 8004f3c:	f100 8105 	bmi.w	800514a <_printf_float+0x462>
 8004f40:	68e0      	ldr	r0, [r4, #12]
 8004f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f44:	4298      	cmp	r0, r3
 8004f46:	bfb8      	it	lt
 8004f48:	4618      	movlt	r0, r3
 8004f4a:	e730      	b.n	8004dae <_printf_float+0xc6>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	464a      	mov	r2, r9
 8004f50:	4631      	mov	r1, r6
 8004f52:	4628      	mov	r0, r5
 8004f54:	47b8      	blx	r7
 8004f56:	3001      	adds	r0, #1
 8004f58:	f43f af27 	beq.w	8004daa <_printf_float+0xc2>
 8004f5c:	f108 0801 	add.w	r8, r8, #1
 8004f60:	e7e6      	b.n	8004f30 <_printf_float+0x248>
 8004f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	dc39      	bgt.n	8004fdc <_printf_float+0x2f4>
 8004f68:	4a1b      	ldr	r2, [pc, #108]	; (8004fd8 <_printf_float+0x2f0>)
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4631      	mov	r1, r6
 8004f6e:	4628      	mov	r0, r5
 8004f70:	47b8      	blx	r7
 8004f72:	3001      	adds	r0, #1
 8004f74:	f43f af19 	beq.w	8004daa <_printf_float+0xc2>
 8004f78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	d102      	bne.n	8004f86 <_printf_float+0x29e>
 8004f80:	6823      	ldr	r3, [r4, #0]
 8004f82:	07d9      	lsls	r1, r3, #31
 8004f84:	d5d8      	bpl.n	8004f38 <_printf_float+0x250>
 8004f86:	ee18 3a10 	vmov	r3, s16
 8004f8a:	4652      	mov	r2, sl
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b8      	blx	r7
 8004f92:	3001      	adds	r0, #1
 8004f94:	f43f af09 	beq.w	8004daa <_printf_float+0xc2>
 8004f98:	f04f 0900 	mov.w	r9, #0
 8004f9c:	f104 0a1a 	add.w	sl, r4, #26
 8004fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa2:	425b      	negs	r3, r3
 8004fa4:	454b      	cmp	r3, r9
 8004fa6:	dc01      	bgt.n	8004fac <_printf_float+0x2c4>
 8004fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004faa:	e792      	b.n	8004ed2 <_printf_float+0x1ea>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4652      	mov	r2, sl
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	f43f aef7 	beq.w	8004daa <_printf_float+0xc2>
 8004fbc:	f109 0901 	add.w	r9, r9, #1
 8004fc0:	e7ee      	b.n	8004fa0 <_printf_float+0x2b8>
 8004fc2:	bf00      	nop
 8004fc4:	7fefffff 	.word	0x7fefffff
 8004fc8:	08007a38 	.word	0x08007a38
 8004fcc:	08007a3c 	.word	0x08007a3c
 8004fd0:	08007a44 	.word	0x08007a44
 8004fd4:	08007a40 	.word	0x08007a40
 8004fd8:	08007a48 	.word	0x08007a48
 8004fdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	bfa8      	it	ge
 8004fe4:	461a      	movge	r2, r3
 8004fe6:	2a00      	cmp	r2, #0
 8004fe8:	4691      	mov	r9, r2
 8004fea:	dc37      	bgt.n	800505c <_printf_float+0x374>
 8004fec:	f04f 0b00 	mov.w	fp, #0
 8004ff0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ff4:	f104 021a 	add.w	r2, r4, #26
 8004ff8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ffa:	9305      	str	r3, [sp, #20]
 8004ffc:	eba3 0309 	sub.w	r3, r3, r9
 8005000:	455b      	cmp	r3, fp
 8005002:	dc33      	bgt.n	800506c <_printf_float+0x384>
 8005004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005008:	429a      	cmp	r2, r3
 800500a:	db3b      	blt.n	8005084 <_printf_float+0x39c>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	07da      	lsls	r2, r3, #31
 8005010:	d438      	bmi.n	8005084 <_printf_float+0x39c>
 8005012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005014:	9b05      	ldr	r3, [sp, #20]
 8005016:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	eba2 0901 	sub.w	r9, r2, r1
 800501e:	4599      	cmp	r9, r3
 8005020:	bfa8      	it	ge
 8005022:	4699      	movge	r9, r3
 8005024:	f1b9 0f00 	cmp.w	r9, #0
 8005028:	dc35      	bgt.n	8005096 <_printf_float+0x3ae>
 800502a:	f04f 0800 	mov.w	r8, #0
 800502e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005032:	f104 0a1a 	add.w	sl, r4, #26
 8005036:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800503a:	1a9b      	subs	r3, r3, r2
 800503c:	eba3 0309 	sub.w	r3, r3, r9
 8005040:	4543      	cmp	r3, r8
 8005042:	f77f af79 	ble.w	8004f38 <_printf_float+0x250>
 8005046:	2301      	movs	r3, #1
 8005048:	4652      	mov	r2, sl
 800504a:	4631      	mov	r1, r6
 800504c:	4628      	mov	r0, r5
 800504e:	47b8      	blx	r7
 8005050:	3001      	adds	r0, #1
 8005052:	f43f aeaa 	beq.w	8004daa <_printf_float+0xc2>
 8005056:	f108 0801 	add.w	r8, r8, #1
 800505a:	e7ec      	b.n	8005036 <_printf_float+0x34e>
 800505c:	4613      	mov	r3, r2
 800505e:	4631      	mov	r1, r6
 8005060:	4642      	mov	r2, r8
 8005062:	4628      	mov	r0, r5
 8005064:	47b8      	blx	r7
 8005066:	3001      	adds	r0, #1
 8005068:	d1c0      	bne.n	8004fec <_printf_float+0x304>
 800506a:	e69e      	b.n	8004daa <_printf_float+0xc2>
 800506c:	2301      	movs	r3, #1
 800506e:	4631      	mov	r1, r6
 8005070:	4628      	mov	r0, r5
 8005072:	9205      	str	r2, [sp, #20]
 8005074:	47b8      	blx	r7
 8005076:	3001      	adds	r0, #1
 8005078:	f43f ae97 	beq.w	8004daa <_printf_float+0xc2>
 800507c:	9a05      	ldr	r2, [sp, #20]
 800507e:	f10b 0b01 	add.w	fp, fp, #1
 8005082:	e7b9      	b.n	8004ff8 <_printf_float+0x310>
 8005084:	ee18 3a10 	vmov	r3, s16
 8005088:	4652      	mov	r2, sl
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	d1be      	bne.n	8005012 <_printf_float+0x32a>
 8005094:	e689      	b.n	8004daa <_printf_float+0xc2>
 8005096:	9a05      	ldr	r2, [sp, #20]
 8005098:	464b      	mov	r3, r9
 800509a:	4442      	add	r2, r8
 800509c:	4631      	mov	r1, r6
 800509e:	4628      	mov	r0, r5
 80050a0:	47b8      	blx	r7
 80050a2:	3001      	adds	r0, #1
 80050a4:	d1c1      	bne.n	800502a <_printf_float+0x342>
 80050a6:	e680      	b.n	8004daa <_printf_float+0xc2>
 80050a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050aa:	2a01      	cmp	r2, #1
 80050ac:	dc01      	bgt.n	80050b2 <_printf_float+0x3ca>
 80050ae:	07db      	lsls	r3, r3, #31
 80050b0:	d538      	bpl.n	8005124 <_printf_float+0x43c>
 80050b2:	2301      	movs	r3, #1
 80050b4:	4642      	mov	r2, r8
 80050b6:	4631      	mov	r1, r6
 80050b8:	4628      	mov	r0, r5
 80050ba:	47b8      	blx	r7
 80050bc:	3001      	adds	r0, #1
 80050be:	f43f ae74 	beq.w	8004daa <_printf_float+0xc2>
 80050c2:	ee18 3a10 	vmov	r3, s16
 80050c6:	4652      	mov	r2, sl
 80050c8:	4631      	mov	r1, r6
 80050ca:	4628      	mov	r0, r5
 80050cc:	47b8      	blx	r7
 80050ce:	3001      	adds	r0, #1
 80050d0:	f43f ae6b 	beq.w	8004daa <_printf_float+0xc2>
 80050d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050d8:	2200      	movs	r2, #0
 80050da:	2300      	movs	r3, #0
 80050dc:	f7fb fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80050e0:	b9d8      	cbnz	r0, 800511a <_printf_float+0x432>
 80050e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050e4:	f108 0201 	add.w	r2, r8, #1
 80050e8:	3b01      	subs	r3, #1
 80050ea:	4631      	mov	r1, r6
 80050ec:	4628      	mov	r0, r5
 80050ee:	47b8      	blx	r7
 80050f0:	3001      	adds	r0, #1
 80050f2:	d10e      	bne.n	8005112 <_printf_float+0x42a>
 80050f4:	e659      	b.n	8004daa <_printf_float+0xc2>
 80050f6:	2301      	movs	r3, #1
 80050f8:	4652      	mov	r2, sl
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b8      	blx	r7
 8005100:	3001      	adds	r0, #1
 8005102:	f43f ae52 	beq.w	8004daa <_printf_float+0xc2>
 8005106:	f108 0801 	add.w	r8, r8, #1
 800510a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800510c:	3b01      	subs	r3, #1
 800510e:	4543      	cmp	r3, r8
 8005110:	dcf1      	bgt.n	80050f6 <_printf_float+0x40e>
 8005112:	464b      	mov	r3, r9
 8005114:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005118:	e6dc      	b.n	8004ed4 <_printf_float+0x1ec>
 800511a:	f04f 0800 	mov.w	r8, #0
 800511e:	f104 0a1a 	add.w	sl, r4, #26
 8005122:	e7f2      	b.n	800510a <_printf_float+0x422>
 8005124:	2301      	movs	r3, #1
 8005126:	4642      	mov	r2, r8
 8005128:	e7df      	b.n	80050ea <_printf_float+0x402>
 800512a:	2301      	movs	r3, #1
 800512c:	464a      	mov	r2, r9
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	47b8      	blx	r7
 8005134:	3001      	adds	r0, #1
 8005136:	f43f ae38 	beq.w	8004daa <_printf_float+0xc2>
 800513a:	f108 0801 	add.w	r8, r8, #1
 800513e:	68e3      	ldr	r3, [r4, #12]
 8005140:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005142:	1a5b      	subs	r3, r3, r1
 8005144:	4543      	cmp	r3, r8
 8005146:	dcf0      	bgt.n	800512a <_printf_float+0x442>
 8005148:	e6fa      	b.n	8004f40 <_printf_float+0x258>
 800514a:	f04f 0800 	mov.w	r8, #0
 800514e:	f104 0919 	add.w	r9, r4, #25
 8005152:	e7f4      	b.n	800513e <_printf_float+0x456>

08005154 <_printf_common>:
 8005154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005158:	4616      	mov	r6, r2
 800515a:	4699      	mov	r9, r3
 800515c:	688a      	ldr	r2, [r1, #8]
 800515e:	690b      	ldr	r3, [r1, #16]
 8005160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005164:	4293      	cmp	r3, r2
 8005166:	bfb8      	it	lt
 8005168:	4613      	movlt	r3, r2
 800516a:	6033      	str	r3, [r6, #0]
 800516c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005170:	4607      	mov	r7, r0
 8005172:	460c      	mov	r4, r1
 8005174:	b10a      	cbz	r2, 800517a <_printf_common+0x26>
 8005176:	3301      	adds	r3, #1
 8005178:	6033      	str	r3, [r6, #0]
 800517a:	6823      	ldr	r3, [r4, #0]
 800517c:	0699      	lsls	r1, r3, #26
 800517e:	bf42      	ittt	mi
 8005180:	6833      	ldrmi	r3, [r6, #0]
 8005182:	3302      	addmi	r3, #2
 8005184:	6033      	strmi	r3, [r6, #0]
 8005186:	6825      	ldr	r5, [r4, #0]
 8005188:	f015 0506 	ands.w	r5, r5, #6
 800518c:	d106      	bne.n	800519c <_printf_common+0x48>
 800518e:	f104 0a19 	add.w	sl, r4, #25
 8005192:	68e3      	ldr	r3, [r4, #12]
 8005194:	6832      	ldr	r2, [r6, #0]
 8005196:	1a9b      	subs	r3, r3, r2
 8005198:	42ab      	cmp	r3, r5
 800519a:	dc26      	bgt.n	80051ea <_printf_common+0x96>
 800519c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051a0:	1e13      	subs	r3, r2, #0
 80051a2:	6822      	ldr	r2, [r4, #0]
 80051a4:	bf18      	it	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	0692      	lsls	r2, r2, #26
 80051aa:	d42b      	bmi.n	8005204 <_printf_common+0xb0>
 80051ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051b0:	4649      	mov	r1, r9
 80051b2:	4638      	mov	r0, r7
 80051b4:	47c0      	blx	r8
 80051b6:	3001      	adds	r0, #1
 80051b8:	d01e      	beq.n	80051f8 <_printf_common+0xa4>
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	68e5      	ldr	r5, [r4, #12]
 80051be:	6832      	ldr	r2, [r6, #0]
 80051c0:	f003 0306 	and.w	r3, r3, #6
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	bf08      	it	eq
 80051c8:	1aad      	subeq	r5, r5, r2
 80051ca:	68a3      	ldr	r3, [r4, #8]
 80051cc:	6922      	ldr	r2, [r4, #16]
 80051ce:	bf0c      	ite	eq
 80051d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051d4:	2500      	movne	r5, #0
 80051d6:	4293      	cmp	r3, r2
 80051d8:	bfc4      	itt	gt
 80051da:	1a9b      	subgt	r3, r3, r2
 80051dc:	18ed      	addgt	r5, r5, r3
 80051de:	2600      	movs	r6, #0
 80051e0:	341a      	adds	r4, #26
 80051e2:	42b5      	cmp	r5, r6
 80051e4:	d11a      	bne.n	800521c <_printf_common+0xc8>
 80051e6:	2000      	movs	r0, #0
 80051e8:	e008      	b.n	80051fc <_printf_common+0xa8>
 80051ea:	2301      	movs	r3, #1
 80051ec:	4652      	mov	r2, sl
 80051ee:	4649      	mov	r1, r9
 80051f0:	4638      	mov	r0, r7
 80051f2:	47c0      	blx	r8
 80051f4:	3001      	adds	r0, #1
 80051f6:	d103      	bne.n	8005200 <_printf_common+0xac>
 80051f8:	f04f 30ff 	mov.w	r0, #4294967295
 80051fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005200:	3501      	adds	r5, #1
 8005202:	e7c6      	b.n	8005192 <_printf_common+0x3e>
 8005204:	18e1      	adds	r1, r4, r3
 8005206:	1c5a      	adds	r2, r3, #1
 8005208:	2030      	movs	r0, #48	; 0x30
 800520a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800520e:	4422      	add	r2, r4
 8005210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005218:	3302      	adds	r3, #2
 800521a:	e7c7      	b.n	80051ac <_printf_common+0x58>
 800521c:	2301      	movs	r3, #1
 800521e:	4622      	mov	r2, r4
 8005220:	4649      	mov	r1, r9
 8005222:	4638      	mov	r0, r7
 8005224:	47c0      	blx	r8
 8005226:	3001      	adds	r0, #1
 8005228:	d0e6      	beq.n	80051f8 <_printf_common+0xa4>
 800522a:	3601      	adds	r6, #1
 800522c:	e7d9      	b.n	80051e2 <_printf_common+0x8e>
	...

08005230 <_printf_i>:
 8005230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005234:	460c      	mov	r4, r1
 8005236:	4691      	mov	r9, r2
 8005238:	7e27      	ldrb	r7, [r4, #24]
 800523a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800523c:	2f78      	cmp	r7, #120	; 0x78
 800523e:	4680      	mov	r8, r0
 8005240:	469a      	mov	sl, r3
 8005242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005246:	d807      	bhi.n	8005258 <_printf_i+0x28>
 8005248:	2f62      	cmp	r7, #98	; 0x62
 800524a:	d80a      	bhi.n	8005262 <_printf_i+0x32>
 800524c:	2f00      	cmp	r7, #0
 800524e:	f000 80d8 	beq.w	8005402 <_printf_i+0x1d2>
 8005252:	2f58      	cmp	r7, #88	; 0x58
 8005254:	f000 80a3 	beq.w	800539e <_printf_i+0x16e>
 8005258:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800525c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005260:	e03a      	b.n	80052d8 <_printf_i+0xa8>
 8005262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005266:	2b15      	cmp	r3, #21
 8005268:	d8f6      	bhi.n	8005258 <_printf_i+0x28>
 800526a:	a001      	add	r0, pc, #4	; (adr r0, 8005270 <_printf_i+0x40>)
 800526c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005270:	080052c9 	.word	0x080052c9
 8005274:	080052dd 	.word	0x080052dd
 8005278:	08005259 	.word	0x08005259
 800527c:	08005259 	.word	0x08005259
 8005280:	08005259 	.word	0x08005259
 8005284:	08005259 	.word	0x08005259
 8005288:	080052dd 	.word	0x080052dd
 800528c:	08005259 	.word	0x08005259
 8005290:	08005259 	.word	0x08005259
 8005294:	08005259 	.word	0x08005259
 8005298:	08005259 	.word	0x08005259
 800529c:	080053e9 	.word	0x080053e9
 80052a0:	0800530d 	.word	0x0800530d
 80052a4:	080053cb 	.word	0x080053cb
 80052a8:	08005259 	.word	0x08005259
 80052ac:	08005259 	.word	0x08005259
 80052b0:	0800540b 	.word	0x0800540b
 80052b4:	08005259 	.word	0x08005259
 80052b8:	0800530d 	.word	0x0800530d
 80052bc:	08005259 	.word	0x08005259
 80052c0:	08005259 	.word	0x08005259
 80052c4:	080053d3 	.word	0x080053d3
 80052c8:	680b      	ldr	r3, [r1, #0]
 80052ca:	1d1a      	adds	r2, r3, #4
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	600a      	str	r2, [r1, #0]
 80052d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80052d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052d8:	2301      	movs	r3, #1
 80052da:	e0a3      	b.n	8005424 <_printf_i+0x1f4>
 80052dc:	6825      	ldr	r5, [r4, #0]
 80052de:	6808      	ldr	r0, [r1, #0]
 80052e0:	062e      	lsls	r6, r5, #24
 80052e2:	f100 0304 	add.w	r3, r0, #4
 80052e6:	d50a      	bpl.n	80052fe <_printf_i+0xce>
 80052e8:	6805      	ldr	r5, [r0, #0]
 80052ea:	600b      	str	r3, [r1, #0]
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	da03      	bge.n	80052f8 <_printf_i+0xc8>
 80052f0:	232d      	movs	r3, #45	; 0x2d
 80052f2:	426d      	negs	r5, r5
 80052f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052f8:	485e      	ldr	r0, [pc, #376]	; (8005474 <_printf_i+0x244>)
 80052fa:	230a      	movs	r3, #10
 80052fc:	e019      	b.n	8005332 <_printf_i+0x102>
 80052fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005302:	6805      	ldr	r5, [r0, #0]
 8005304:	600b      	str	r3, [r1, #0]
 8005306:	bf18      	it	ne
 8005308:	b22d      	sxthne	r5, r5
 800530a:	e7ef      	b.n	80052ec <_printf_i+0xbc>
 800530c:	680b      	ldr	r3, [r1, #0]
 800530e:	6825      	ldr	r5, [r4, #0]
 8005310:	1d18      	adds	r0, r3, #4
 8005312:	6008      	str	r0, [r1, #0]
 8005314:	0628      	lsls	r0, r5, #24
 8005316:	d501      	bpl.n	800531c <_printf_i+0xec>
 8005318:	681d      	ldr	r5, [r3, #0]
 800531a:	e002      	b.n	8005322 <_printf_i+0xf2>
 800531c:	0669      	lsls	r1, r5, #25
 800531e:	d5fb      	bpl.n	8005318 <_printf_i+0xe8>
 8005320:	881d      	ldrh	r5, [r3, #0]
 8005322:	4854      	ldr	r0, [pc, #336]	; (8005474 <_printf_i+0x244>)
 8005324:	2f6f      	cmp	r7, #111	; 0x6f
 8005326:	bf0c      	ite	eq
 8005328:	2308      	moveq	r3, #8
 800532a:	230a      	movne	r3, #10
 800532c:	2100      	movs	r1, #0
 800532e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005332:	6866      	ldr	r6, [r4, #4]
 8005334:	60a6      	str	r6, [r4, #8]
 8005336:	2e00      	cmp	r6, #0
 8005338:	bfa2      	ittt	ge
 800533a:	6821      	ldrge	r1, [r4, #0]
 800533c:	f021 0104 	bicge.w	r1, r1, #4
 8005340:	6021      	strge	r1, [r4, #0]
 8005342:	b90d      	cbnz	r5, 8005348 <_printf_i+0x118>
 8005344:	2e00      	cmp	r6, #0
 8005346:	d04d      	beq.n	80053e4 <_printf_i+0x1b4>
 8005348:	4616      	mov	r6, r2
 800534a:	fbb5 f1f3 	udiv	r1, r5, r3
 800534e:	fb03 5711 	mls	r7, r3, r1, r5
 8005352:	5dc7      	ldrb	r7, [r0, r7]
 8005354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005358:	462f      	mov	r7, r5
 800535a:	42bb      	cmp	r3, r7
 800535c:	460d      	mov	r5, r1
 800535e:	d9f4      	bls.n	800534a <_printf_i+0x11a>
 8005360:	2b08      	cmp	r3, #8
 8005362:	d10b      	bne.n	800537c <_printf_i+0x14c>
 8005364:	6823      	ldr	r3, [r4, #0]
 8005366:	07df      	lsls	r7, r3, #31
 8005368:	d508      	bpl.n	800537c <_printf_i+0x14c>
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	6861      	ldr	r1, [r4, #4]
 800536e:	4299      	cmp	r1, r3
 8005370:	bfde      	ittt	le
 8005372:	2330      	movle	r3, #48	; 0x30
 8005374:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005378:	f106 36ff 	addle.w	r6, r6, #4294967295
 800537c:	1b92      	subs	r2, r2, r6
 800537e:	6122      	str	r2, [r4, #16]
 8005380:	f8cd a000 	str.w	sl, [sp]
 8005384:	464b      	mov	r3, r9
 8005386:	aa03      	add	r2, sp, #12
 8005388:	4621      	mov	r1, r4
 800538a:	4640      	mov	r0, r8
 800538c:	f7ff fee2 	bl	8005154 <_printf_common>
 8005390:	3001      	adds	r0, #1
 8005392:	d14c      	bne.n	800542e <_printf_i+0x1fe>
 8005394:	f04f 30ff 	mov.w	r0, #4294967295
 8005398:	b004      	add	sp, #16
 800539a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539e:	4835      	ldr	r0, [pc, #212]	; (8005474 <_printf_i+0x244>)
 80053a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80053a4:	6823      	ldr	r3, [r4, #0]
 80053a6:	680e      	ldr	r6, [r1, #0]
 80053a8:	061f      	lsls	r7, r3, #24
 80053aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80053ae:	600e      	str	r6, [r1, #0]
 80053b0:	d514      	bpl.n	80053dc <_printf_i+0x1ac>
 80053b2:	07d9      	lsls	r1, r3, #31
 80053b4:	bf44      	itt	mi
 80053b6:	f043 0320 	orrmi.w	r3, r3, #32
 80053ba:	6023      	strmi	r3, [r4, #0]
 80053bc:	b91d      	cbnz	r5, 80053c6 <_printf_i+0x196>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	f023 0320 	bic.w	r3, r3, #32
 80053c4:	6023      	str	r3, [r4, #0]
 80053c6:	2310      	movs	r3, #16
 80053c8:	e7b0      	b.n	800532c <_printf_i+0xfc>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	f043 0320 	orr.w	r3, r3, #32
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	2378      	movs	r3, #120	; 0x78
 80053d4:	4828      	ldr	r0, [pc, #160]	; (8005478 <_printf_i+0x248>)
 80053d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053da:	e7e3      	b.n	80053a4 <_printf_i+0x174>
 80053dc:	065e      	lsls	r6, r3, #25
 80053de:	bf48      	it	mi
 80053e0:	b2ad      	uxthmi	r5, r5
 80053e2:	e7e6      	b.n	80053b2 <_printf_i+0x182>
 80053e4:	4616      	mov	r6, r2
 80053e6:	e7bb      	b.n	8005360 <_printf_i+0x130>
 80053e8:	680b      	ldr	r3, [r1, #0]
 80053ea:	6826      	ldr	r6, [r4, #0]
 80053ec:	6960      	ldr	r0, [r4, #20]
 80053ee:	1d1d      	adds	r5, r3, #4
 80053f0:	600d      	str	r5, [r1, #0]
 80053f2:	0635      	lsls	r5, r6, #24
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	d501      	bpl.n	80053fc <_printf_i+0x1cc>
 80053f8:	6018      	str	r0, [r3, #0]
 80053fa:	e002      	b.n	8005402 <_printf_i+0x1d2>
 80053fc:	0671      	lsls	r1, r6, #25
 80053fe:	d5fb      	bpl.n	80053f8 <_printf_i+0x1c8>
 8005400:	8018      	strh	r0, [r3, #0]
 8005402:	2300      	movs	r3, #0
 8005404:	6123      	str	r3, [r4, #16]
 8005406:	4616      	mov	r6, r2
 8005408:	e7ba      	b.n	8005380 <_printf_i+0x150>
 800540a:	680b      	ldr	r3, [r1, #0]
 800540c:	1d1a      	adds	r2, r3, #4
 800540e:	600a      	str	r2, [r1, #0]
 8005410:	681e      	ldr	r6, [r3, #0]
 8005412:	6862      	ldr	r2, [r4, #4]
 8005414:	2100      	movs	r1, #0
 8005416:	4630      	mov	r0, r6
 8005418:	f7fa fee2 	bl	80001e0 <memchr>
 800541c:	b108      	cbz	r0, 8005422 <_printf_i+0x1f2>
 800541e:	1b80      	subs	r0, r0, r6
 8005420:	6060      	str	r0, [r4, #4]
 8005422:	6863      	ldr	r3, [r4, #4]
 8005424:	6123      	str	r3, [r4, #16]
 8005426:	2300      	movs	r3, #0
 8005428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800542c:	e7a8      	b.n	8005380 <_printf_i+0x150>
 800542e:	6923      	ldr	r3, [r4, #16]
 8005430:	4632      	mov	r2, r6
 8005432:	4649      	mov	r1, r9
 8005434:	4640      	mov	r0, r8
 8005436:	47d0      	blx	sl
 8005438:	3001      	adds	r0, #1
 800543a:	d0ab      	beq.n	8005394 <_printf_i+0x164>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	079b      	lsls	r3, r3, #30
 8005440:	d413      	bmi.n	800546a <_printf_i+0x23a>
 8005442:	68e0      	ldr	r0, [r4, #12]
 8005444:	9b03      	ldr	r3, [sp, #12]
 8005446:	4298      	cmp	r0, r3
 8005448:	bfb8      	it	lt
 800544a:	4618      	movlt	r0, r3
 800544c:	e7a4      	b.n	8005398 <_printf_i+0x168>
 800544e:	2301      	movs	r3, #1
 8005450:	4632      	mov	r2, r6
 8005452:	4649      	mov	r1, r9
 8005454:	4640      	mov	r0, r8
 8005456:	47d0      	blx	sl
 8005458:	3001      	adds	r0, #1
 800545a:	d09b      	beq.n	8005394 <_printf_i+0x164>
 800545c:	3501      	adds	r5, #1
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	9903      	ldr	r1, [sp, #12]
 8005462:	1a5b      	subs	r3, r3, r1
 8005464:	42ab      	cmp	r3, r5
 8005466:	dcf2      	bgt.n	800544e <_printf_i+0x21e>
 8005468:	e7eb      	b.n	8005442 <_printf_i+0x212>
 800546a:	2500      	movs	r5, #0
 800546c:	f104 0619 	add.w	r6, r4, #25
 8005470:	e7f5      	b.n	800545e <_printf_i+0x22e>
 8005472:	bf00      	nop
 8005474:	08007a4a 	.word	0x08007a4a
 8005478:	08007a5b 	.word	0x08007a5b

0800547c <siprintf>:
 800547c:	b40e      	push	{r1, r2, r3}
 800547e:	b500      	push	{lr}
 8005480:	b09c      	sub	sp, #112	; 0x70
 8005482:	ab1d      	add	r3, sp, #116	; 0x74
 8005484:	9002      	str	r0, [sp, #8]
 8005486:	9006      	str	r0, [sp, #24]
 8005488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800548c:	4809      	ldr	r0, [pc, #36]	; (80054b4 <siprintf+0x38>)
 800548e:	9107      	str	r1, [sp, #28]
 8005490:	9104      	str	r1, [sp, #16]
 8005492:	4909      	ldr	r1, [pc, #36]	; (80054b8 <siprintf+0x3c>)
 8005494:	f853 2b04 	ldr.w	r2, [r3], #4
 8005498:	9105      	str	r1, [sp, #20]
 800549a:	6800      	ldr	r0, [r0, #0]
 800549c:	9301      	str	r3, [sp, #4]
 800549e:	a902      	add	r1, sp, #8
 80054a0:	f001 fb34 	bl	8006b0c <_svfiprintf_r>
 80054a4:	9b02      	ldr	r3, [sp, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	b01c      	add	sp, #112	; 0x70
 80054ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80054b0:	b003      	add	sp, #12
 80054b2:	4770      	bx	lr
 80054b4:	2000003c 	.word	0x2000003c
 80054b8:	ffff0208 	.word	0xffff0208

080054bc <quorem>:
 80054bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c0:	6903      	ldr	r3, [r0, #16]
 80054c2:	690c      	ldr	r4, [r1, #16]
 80054c4:	42a3      	cmp	r3, r4
 80054c6:	4607      	mov	r7, r0
 80054c8:	f2c0 8081 	blt.w	80055ce <quorem+0x112>
 80054cc:	3c01      	subs	r4, #1
 80054ce:	f101 0814 	add.w	r8, r1, #20
 80054d2:	f100 0514 	add.w	r5, r0, #20
 80054d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054da:	9301      	str	r3, [sp, #4]
 80054dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054e4:	3301      	adds	r3, #1
 80054e6:	429a      	cmp	r2, r3
 80054e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80054f4:	d331      	bcc.n	800555a <quorem+0x9e>
 80054f6:	f04f 0e00 	mov.w	lr, #0
 80054fa:	4640      	mov	r0, r8
 80054fc:	46ac      	mov	ip, r5
 80054fe:	46f2      	mov	sl, lr
 8005500:	f850 2b04 	ldr.w	r2, [r0], #4
 8005504:	b293      	uxth	r3, r2
 8005506:	fb06 e303 	mla	r3, r6, r3, lr
 800550a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800550e:	b29b      	uxth	r3, r3
 8005510:	ebaa 0303 	sub.w	r3, sl, r3
 8005514:	0c12      	lsrs	r2, r2, #16
 8005516:	f8dc a000 	ldr.w	sl, [ip]
 800551a:	fb06 e202 	mla	r2, r6, r2, lr
 800551e:	fa13 f38a 	uxtah	r3, r3, sl
 8005522:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005526:	fa1f fa82 	uxth.w	sl, r2
 800552a:	f8dc 2000 	ldr.w	r2, [ip]
 800552e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005532:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005536:	b29b      	uxth	r3, r3
 8005538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800553c:	4581      	cmp	r9, r0
 800553e:	f84c 3b04 	str.w	r3, [ip], #4
 8005542:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005546:	d2db      	bcs.n	8005500 <quorem+0x44>
 8005548:	f855 300b 	ldr.w	r3, [r5, fp]
 800554c:	b92b      	cbnz	r3, 800555a <quorem+0x9e>
 800554e:	9b01      	ldr	r3, [sp, #4]
 8005550:	3b04      	subs	r3, #4
 8005552:	429d      	cmp	r5, r3
 8005554:	461a      	mov	r2, r3
 8005556:	d32e      	bcc.n	80055b6 <quorem+0xfa>
 8005558:	613c      	str	r4, [r7, #16]
 800555a:	4638      	mov	r0, r7
 800555c:	f001 f8c0 	bl	80066e0 <__mcmp>
 8005560:	2800      	cmp	r0, #0
 8005562:	db24      	blt.n	80055ae <quorem+0xf2>
 8005564:	3601      	adds	r6, #1
 8005566:	4628      	mov	r0, r5
 8005568:	f04f 0c00 	mov.w	ip, #0
 800556c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005570:	f8d0 e000 	ldr.w	lr, [r0]
 8005574:	b293      	uxth	r3, r2
 8005576:	ebac 0303 	sub.w	r3, ip, r3
 800557a:	0c12      	lsrs	r2, r2, #16
 800557c:	fa13 f38e 	uxtah	r3, r3, lr
 8005580:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005584:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005588:	b29b      	uxth	r3, r3
 800558a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800558e:	45c1      	cmp	r9, r8
 8005590:	f840 3b04 	str.w	r3, [r0], #4
 8005594:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005598:	d2e8      	bcs.n	800556c <quorem+0xb0>
 800559a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800559e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055a2:	b922      	cbnz	r2, 80055ae <quorem+0xf2>
 80055a4:	3b04      	subs	r3, #4
 80055a6:	429d      	cmp	r5, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	d30a      	bcc.n	80055c2 <quorem+0x106>
 80055ac:	613c      	str	r4, [r7, #16]
 80055ae:	4630      	mov	r0, r6
 80055b0:	b003      	add	sp, #12
 80055b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	3b04      	subs	r3, #4
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	d1cc      	bne.n	8005558 <quorem+0x9c>
 80055be:	3c01      	subs	r4, #1
 80055c0:	e7c7      	b.n	8005552 <quorem+0x96>
 80055c2:	6812      	ldr	r2, [r2, #0]
 80055c4:	3b04      	subs	r3, #4
 80055c6:	2a00      	cmp	r2, #0
 80055c8:	d1f0      	bne.n	80055ac <quorem+0xf0>
 80055ca:	3c01      	subs	r4, #1
 80055cc:	e7eb      	b.n	80055a6 <quorem+0xea>
 80055ce:	2000      	movs	r0, #0
 80055d0:	e7ee      	b.n	80055b0 <quorem+0xf4>
 80055d2:	0000      	movs	r0, r0
 80055d4:	0000      	movs	r0, r0
	...

080055d8 <_dtoa_r>:
 80055d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055dc:	ed2d 8b02 	vpush	{d8}
 80055e0:	ec57 6b10 	vmov	r6, r7, d0
 80055e4:	b095      	sub	sp, #84	; 0x54
 80055e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80055e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80055ec:	9105      	str	r1, [sp, #20]
 80055ee:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80055f2:	4604      	mov	r4, r0
 80055f4:	9209      	str	r2, [sp, #36]	; 0x24
 80055f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80055f8:	b975      	cbnz	r5, 8005618 <_dtoa_r+0x40>
 80055fa:	2010      	movs	r0, #16
 80055fc:	f000 fddc 	bl	80061b8 <malloc>
 8005600:	4602      	mov	r2, r0
 8005602:	6260      	str	r0, [r4, #36]	; 0x24
 8005604:	b920      	cbnz	r0, 8005610 <_dtoa_r+0x38>
 8005606:	4bb2      	ldr	r3, [pc, #712]	; (80058d0 <_dtoa_r+0x2f8>)
 8005608:	21ea      	movs	r1, #234	; 0xea
 800560a:	48b2      	ldr	r0, [pc, #712]	; (80058d4 <_dtoa_r+0x2fc>)
 800560c:	f001 fb8e 	bl	8006d2c <__assert_func>
 8005610:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005614:	6005      	str	r5, [r0, #0]
 8005616:	60c5      	str	r5, [r0, #12]
 8005618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800561a:	6819      	ldr	r1, [r3, #0]
 800561c:	b151      	cbz	r1, 8005634 <_dtoa_r+0x5c>
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	604a      	str	r2, [r1, #4]
 8005622:	2301      	movs	r3, #1
 8005624:	4093      	lsls	r3, r2
 8005626:	608b      	str	r3, [r1, #8]
 8005628:	4620      	mov	r0, r4
 800562a:	f000 fe1b 	bl	8006264 <_Bfree>
 800562e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	1e3b      	subs	r3, r7, #0
 8005636:	bfb9      	ittee	lt
 8005638:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800563c:	9303      	strlt	r3, [sp, #12]
 800563e:	2300      	movge	r3, #0
 8005640:	f8c8 3000 	strge.w	r3, [r8]
 8005644:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005648:	4ba3      	ldr	r3, [pc, #652]	; (80058d8 <_dtoa_r+0x300>)
 800564a:	bfbc      	itt	lt
 800564c:	2201      	movlt	r2, #1
 800564e:	f8c8 2000 	strlt.w	r2, [r8]
 8005652:	ea33 0309 	bics.w	r3, r3, r9
 8005656:	d11b      	bne.n	8005690 <_dtoa_r+0xb8>
 8005658:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800565a:	f242 730f 	movw	r3, #9999	; 0x270f
 800565e:	6013      	str	r3, [r2, #0]
 8005660:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005664:	4333      	orrs	r3, r6
 8005666:	f000 857a 	beq.w	800615e <_dtoa_r+0xb86>
 800566a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800566c:	b963      	cbnz	r3, 8005688 <_dtoa_r+0xb0>
 800566e:	4b9b      	ldr	r3, [pc, #620]	; (80058dc <_dtoa_r+0x304>)
 8005670:	e024      	b.n	80056bc <_dtoa_r+0xe4>
 8005672:	4b9b      	ldr	r3, [pc, #620]	; (80058e0 <_dtoa_r+0x308>)
 8005674:	9300      	str	r3, [sp, #0]
 8005676:	3308      	adds	r3, #8
 8005678:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	9800      	ldr	r0, [sp, #0]
 800567e:	b015      	add	sp, #84	; 0x54
 8005680:	ecbd 8b02 	vpop	{d8}
 8005684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005688:	4b94      	ldr	r3, [pc, #592]	; (80058dc <_dtoa_r+0x304>)
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	3303      	adds	r3, #3
 800568e:	e7f3      	b.n	8005678 <_dtoa_r+0xa0>
 8005690:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005694:	2200      	movs	r2, #0
 8005696:	ec51 0b17 	vmov	r0, r1, d7
 800569a:	2300      	movs	r3, #0
 800569c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80056a0:	f7fb fa12 	bl	8000ac8 <__aeabi_dcmpeq>
 80056a4:	4680      	mov	r8, r0
 80056a6:	b158      	cbz	r0, 80056c0 <_dtoa_r+0xe8>
 80056a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056aa:	2301      	movs	r3, #1
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8551 	beq.w	8006158 <_dtoa_r+0xb80>
 80056b6:	488b      	ldr	r0, [pc, #556]	; (80058e4 <_dtoa_r+0x30c>)
 80056b8:	6018      	str	r0, [r3, #0]
 80056ba:	1e43      	subs	r3, r0, #1
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	e7dd      	b.n	800567c <_dtoa_r+0xa4>
 80056c0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80056c4:	aa12      	add	r2, sp, #72	; 0x48
 80056c6:	a913      	add	r1, sp, #76	; 0x4c
 80056c8:	4620      	mov	r0, r4
 80056ca:	f001 f8ad 	bl	8006828 <__d2b>
 80056ce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80056d2:	4683      	mov	fp, r0
 80056d4:	2d00      	cmp	r5, #0
 80056d6:	d07c      	beq.n	80057d2 <_dtoa_r+0x1fa>
 80056d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056da:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80056de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056e2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80056e6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80056ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80056ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80056f2:	4b7d      	ldr	r3, [pc, #500]	; (80058e8 <_dtoa_r+0x310>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	4630      	mov	r0, r6
 80056f8:	4639      	mov	r1, r7
 80056fa:	f7fa fdc5 	bl	8000288 <__aeabi_dsub>
 80056fe:	a36e      	add	r3, pc, #440	; (adr r3, 80058b8 <_dtoa_r+0x2e0>)
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f7fa ff78 	bl	80005f8 <__aeabi_dmul>
 8005708:	a36d      	add	r3, pc, #436	; (adr r3, 80058c0 <_dtoa_r+0x2e8>)
 800570a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570e:	f7fa fdbd 	bl	800028c <__adddf3>
 8005712:	4606      	mov	r6, r0
 8005714:	4628      	mov	r0, r5
 8005716:	460f      	mov	r7, r1
 8005718:	f7fa ff04 	bl	8000524 <__aeabi_i2d>
 800571c:	a36a      	add	r3, pc, #424	; (adr r3, 80058c8 <_dtoa_r+0x2f0>)
 800571e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005722:	f7fa ff69 	bl	80005f8 <__aeabi_dmul>
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4630      	mov	r0, r6
 800572c:	4639      	mov	r1, r7
 800572e:	f7fa fdad 	bl	800028c <__adddf3>
 8005732:	4606      	mov	r6, r0
 8005734:	460f      	mov	r7, r1
 8005736:	f7fb fa0f 	bl	8000b58 <__aeabi_d2iz>
 800573a:	2200      	movs	r2, #0
 800573c:	4682      	mov	sl, r0
 800573e:	2300      	movs	r3, #0
 8005740:	4630      	mov	r0, r6
 8005742:	4639      	mov	r1, r7
 8005744:	f7fb f9ca 	bl	8000adc <__aeabi_dcmplt>
 8005748:	b148      	cbz	r0, 800575e <_dtoa_r+0x186>
 800574a:	4650      	mov	r0, sl
 800574c:	f7fa feea 	bl	8000524 <__aeabi_i2d>
 8005750:	4632      	mov	r2, r6
 8005752:	463b      	mov	r3, r7
 8005754:	f7fb f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8005758:	b908      	cbnz	r0, 800575e <_dtoa_r+0x186>
 800575a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800575e:	f1ba 0f16 	cmp.w	sl, #22
 8005762:	d854      	bhi.n	800580e <_dtoa_r+0x236>
 8005764:	4b61      	ldr	r3, [pc, #388]	; (80058ec <_dtoa_r+0x314>)
 8005766:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005772:	f7fb f9b3 	bl	8000adc <__aeabi_dcmplt>
 8005776:	2800      	cmp	r0, #0
 8005778:	d04b      	beq.n	8005812 <_dtoa_r+0x23a>
 800577a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800577e:	2300      	movs	r3, #0
 8005780:	930e      	str	r3, [sp, #56]	; 0x38
 8005782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005784:	1b5d      	subs	r5, r3, r5
 8005786:	1e6b      	subs	r3, r5, #1
 8005788:	9304      	str	r3, [sp, #16]
 800578a:	bf43      	ittte	mi
 800578c:	2300      	movmi	r3, #0
 800578e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005792:	9304      	strmi	r3, [sp, #16]
 8005794:	f04f 0800 	movpl.w	r8, #0
 8005798:	f1ba 0f00 	cmp.w	sl, #0
 800579c:	db3b      	blt.n	8005816 <_dtoa_r+0x23e>
 800579e:	9b04      	ldr	r3, [sp, #16]
 80057a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80057a4:	4453      	add	r3, sl
 80057a6:	9304      	str	r3, [sp, #16]
 80057a8:	2300      	movs	r3, #0
 80057aa:	9306      	str	r3, [sp, #24]
 80057ac:	9b05      	ldr	r3, [sp, #20]
 80057ae:	2b09      	cmp	r3, #9
 80057b0:	d869      	bhi.n	8005886 <_dtoa_r+0x2ae>
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	bfc4      	itt	gt
 80057b6:	3b04      	subgt	r3, #4
 80057b8:	9305      	strgt	r3, [sp, #20]
 80057ba:	9b05      	ldr	r3, [sp, #20]
 80057bc:	f1a3 0302 	sub.w	r3, r3, #2
 80057c0:	bfcc      	ite	gt
 80057c2:	2500      	movgt	r5, #0
 80057c4:	2501      	movle	r5, #1
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d869      	bhi.n	800589e <_dtoa_r+0x2c6>
 80057ca:	e8df f003 	tbb	[pc, r3]
 80057ce:	4e2c      	.short	0x4e2c
 80057d0:	5a4c      	.short	0x5a4c
 80057d2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80057d6:	441d      	add	r5, r3
 80057d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80057dc:	2b20      	cmp	r3, #32
 80057de:	bfc1      	itttt	gt
 80057e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057e4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80057e8:	fa09 f303 	lslgt.w	r3, r9, r3
 80057ec:	fa26 f000 	lsrgt.w	r0, r6, r0
 80057f0:	bfda      	itte	le
 80057f2:	f1c3 0320 	rsble	r3, r3, #32
 80057f6:	fa06 f003 	lslle.w	r0, r6, r3
 80057fa:	4318      	orrgt	r0, r3
 80057fc:	f7fa fe82 	bl	8000504 <__aeabi_ui2d>
 8005800:	2301      	movs	r3, #1
 8005802:	4606      	mov	r6, r0
 8005804:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005808:	3d01      	subs	r5, #1
 800580a:	9310      	str	r3, [sp, #64]	; 0x40
 800580c:	e771      	b.n	80056f2 <_dtoa_r+0x11a>
 800580e:	2301      	movs	r3, #1
 8005810:	e7b6      	b.n	8005780 <_dtoa_r+0x1a8>
 8005812:	900e      	str	r0, [sp, #56]	; 0x38
 8005814:	e7b5      	b.n	8005782 <_dtoa_r+0x1aa>
 8005816:	f1ca 0300 	rsb	r3, sl, #0
 800581a:	9306      	str	r3, [sp, #24]
 800581c:	2300      	movs	r3, #0
 800581e:	eba8 080a 	sub.w	r8, r8, sl
 8005822:	930d      	str	r3, [sp, #52]	; 0x34
 8005824:	e7c2      	b.n	80057ac <_dtoa_r+0x1d4>
 8005826:	2300      	movs	r3, #0
 8005828:	9308      	str	r3, [sp, #32]
 800582a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	dc39      	bgt.n	80058a4 <_dtoa_r+0x2cc>
 8005830:	f04f 0901 	mov.w	r9, #1
 8005834:	f8cd 9004 	str.w	r9, [sp, #4]
 8005838:	464b      	mov	r3, r9
 800583a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800583e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005840:	2200      	movs	r2, #0
 8005842:	6042      	str	r2, [r0, #4]
 8005844:	2204      	movs	r2, #4
 8005846:	f102 0614 	add.w	r6, r2, #20
 800584a:	429e      	cmp	r6, r3
 800584c:	6841      	ldr	r1, [r0, #4]
 800584e:	d92f      	bls.n	80058b0 <_dtoa_r+0x2d8>
 8005850:	4620      	mov	r0, r4
 8005852:	f000 fcc7 	bl	80061e4 <_Balloc>
 8005856:	9000      	str	r0, [sp, #0]
 8005858:	2800      	cmp	r0, #0
 800585a:	d14b      	bne.n	80058f4 <_dtoa_r+0x31c>
 800585c:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <_dtoa_r+0x318>)
 800585e:	4602      	mov	r2, r0
 8005860:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005864:	e6d1      	b.n	800560a <_dtoa_r+0x32>
 8005866:	2301      	movs	r3, #1
 8005868:	e7de      	b.n	8005828 <_dtoa_r+0x250>
 800586a:	2300      	movs	r3, #0
 800586c:	9308      	str	r3, [sp, #32]
 800586e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005870:	eb0a 0903 	add.w	r9, sl, r3
 8005874:	f109 0301 	add.w	r3, r9, #1
 8005878:	2b01      	cmp	r3, #1
 800587a:	9301      	str	r3, [sp, #4]
 800587c:	bfb8      	it	lt
 800587e:	2301      	movlt	r3, #1
 8005880:	e7dd      	b.n	800583e <_dtoa_r+0x266>
 8005882:	2301      	movs	r3, #1
 8005884:	e7f2      	b.n	800586c <_dtoa_r+0x294>
 8005886:	2501      	movs	r5, #1
 8005888:	2300      	movs	r3, #0
 800588a:	9305      	str	r3, [sp, #20]
 800588c:	9508      	str	r5, [sp, #32]
 800588e:	f04f 39ff 	mov.w	r9, #4294967295
 8005892:	2200      	movs	r2, #0
 8005894:	f8cd 9004 	str.w	r9, [sp, #4]
 8005898:	2312      	movs	r3, #18
 800589a:	9209      	str	r2, [sp, #36]	; 0x24
 800589c:	e7cf      	b.n	800583e <_dtoa_r+0x266>
 800589e:	2301      	movs	r3, #1
 80058a0:	9308      	str	r3, [sp, #32]
 80058a2:	e7f4      	b.n	800588e <_dtoa_r+0x2b6>
 80058a4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80058a8:	f8cd 9004 	str.w	r9, [sp, #4]
 80058ac:	464b      	mov	r3, r9
 80058ae:	e7c6      	b.n	800583e <_dtoa_r+0x266>
 80058b0:	3101      	adds	r1, #1
 80058b2:	6041      	str	r1, [r0, #4]
 80058b4:	0052      	lsls	r2, r2, #1
 80058b6:	e7c6      	b.n	8005846 <_dtoa_r+0x26e>
 80058b8:	636f4361 	.word	0x636f4361
 80058bc:	3fd287a7 	.word	0x3fd287a7
 80058c0:	8b60c8b3 	.word	0x8b60c8b3
 80058c4:	3fc68a28 	.word	0x3fc68a28
 80058c8:	509f79fb 	.word	0x509f79fb
 80058cc:	3fd34413 	.word	0x3fd34413
 80058d0:	08007a79 	.word	0x08007a79
 80058d4:	08007a90 	.word	0x08007a90
 80058d8:	7ff00000 	.word	0x7ff00000
 80058dc:	08007a75 	.word	0x08007a75
 80058e0:	08007a6c 	.word	0x08007a6c
 80058e4:	08007a49 	.word	0x08007a49
 80058e8:	3ff80000 	.word	0x3ff80000
 80058ec:	08007b88 	.word	0x08007b88
 80058f0:	08007aef 	.word	0x08007aef
 80058f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058f6:	9a00      	ldr	r2, [sp, #0]
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	9b01      	ldr	r3, [sp, #4]
 80058fc:	2b0e      	cmp	r3, #14
 80058fe:	f200 80ad 	bhi.w	8005a5c <_dtoa_r+0x484>
 8005902:	2d00      	cmp	r5, #0
 8005904:	f000 80aa 	beq.w	8005a5c <_dtoa_r+0x484>
 8005908:	f1ba 0f00 	cmp.w	sl, #0
 800590c:	dd36      	ble.n	800597c <_dtoa_r+0x3a4>
 800590e:	4ac3      	ldr	r2, [pc, #780]	; (8005c1c <_dtoa_r+0x644>)
 8005910:	f00a 030f 	and.w	r3, sl, #15
 8005914:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005918:	ed93 7b00 	vldr	d7, [r3]
 800591c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005920:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005924:	eeb0 8a47 	vmov.f32	s16, s14
 8005928:	eef0 8a67 	vmov.f32	s17, s15
 800592c:	d016      	beq.n	800595c <_dtoa_r+0x384>
 800592e:	4bbc      	ldr	r3, [pc, #752]	; (8005c20 <_dtoa_r+0x648>)
 8005930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005938:	f7fa ff88 	bl	800084c <__aeabi_ddiv>
 800593c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005940:	f007 070f 	and.w	r7, r7, #15
 8005944:	2503      	movs	r5, #3
 8005946:	4eb6      	ldr	r6, [pc, #728]	; (8005c20 <_dtoa_r+0x648>)
 8005948:	b957      	cbnz	r7, 8005960 <_dtoa_r+0x388>
 800594a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800594e:	ec53 2b18 	vmov	r2, r3, d8
 8005952:	f7fa ff7b 	bl	800084c <__aeabi_ddiv>
 8005956:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800595a:	e029      	b.n	80059b0 <_dtoa_r+0x3d8>
 800595c:	2502      	movs	r5, #2
 800595e:	e7f2      	b.n	8005946 <_dtoa_r+0x36e>
 8005960:	07f9      	lsls	r1, r7, #31
 8005962:	d508      	bpl.n	8005976 <_dtoa_r+0x39e>
 8005964:	ec51 0b18 	vmov	r0, r1, d8
 8005968:	e9d6 2300 	ldrd	r2, r3, [r6]
 800596c:	f7fa fe44 	bl	80005f8 <__aeabi_dmul>
 8005970:	ec41 0b18 	vmov	d8, r0, r1
 8005974:	3501      	adds	r5, #1
 8005976:	107f      	asrs	r7, r7, #1
 8005978:	3608      	adds	r6, #8
 800597a:	e7e5      	b.n	8005948 <_dtoa_r+0x370>
 800597c:	f000 80a6 	beq.w	8005acc <_dtoa_r+0x4f4>
 8005980:	f1ca 0600 	rsb	r6, sl, #0
 8005984:	4ba5      	ldr	r3, [pc, #660]	; (8005c1c <_dtoa_r+0x644>)
 8005986:	4fa6      	ldr	r7, [pc, #664]	; (8005c20 <_dtoa_r+0x648>)
 8005988:	f006 020f 	and.w	r2, r6, #15
 800598c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005994:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005998:	f7fa fe2e 	bl	80005f8 <__aeabi_dmul>
 800599c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059a0:	1136      	asrs	r6, r6, #4
 80059a2:	2300      	movs	r3, #0
 80059a4:	2502      	movs	r5, #2
 80059a6:	2e00      	cmp	r6, #0
 80059a8:	f040 8085 	bne.w	8005ab6 <_dtoa_r+0x4de>
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1d2      	bne.n	8005956 <_dtoa_r+0x37e>
 80059b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 808c 	beq.w	8005ad0 <_dtoa_r+0x4f8>
 80059b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059bc:	4b99      	ldr	r3, [pc, #612]	; (8005c24 <_dtoa_r+0x64c>)
 80059be:	2200      	movs	r2, #0
 80059c0:	4630      	mov	r0, r6
 80059c2:	4639      	mov	r1, r7
 80059c4:	f7fb f88a 	bl	8000adc <__aeabi_dcmplt>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	f000 8081 	beq.w	8005ad0 <_dtoa_r+0x4f8>
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d07d      	beq.n	8005ad0 <_dtoa_r+0x4f8>
 80059d4:	f1b9 0f00 	cmp.w	r9, #0
 80059d8:	dd3c      	ble.n	8005a54 <_dtoa_r+0x47c>
 80059da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80059de:	9307      	str	r3, [sp, #28]
 80059e0:	2200      	movs	r2, #0
 80059e2:	4b91      	ldr	r3, [pc, #580]	; (8005c28 <_dtoa_r+0x650>)
 80059e4:	4630      	mov	r0, r6
 80059e6:	4639      	mov	r1, r7
 80059e8:	f7fa fe06 	bl	80005f8 <__aeabi_dmul>
 80059ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059f0:	3501      	adds	r5, #1
 80059f2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80059f6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80059fa:	4628      	mov	r0, r5
 80059fc:	f7fa fd92 	bl	8000524 <__aeabi_i2d>
 8005a00:	4632      	mov	r2, r6
 8005a02:	463b      	mov	r3, r7
 8005a04:	f7fa fdf8 	bl	80005f8 <__aeabi_dmul>
 8005a08:	4b88      	ldr	r3, [pc, #544]	; (8005c2c <_dtoa_r+0x654>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f7fa fc3e 	bl	800028c <__adddf3>
 8005a10:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005a14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a18:	9303      	str	r3, [sp, #12]
 8005a1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d15c      	bne.n	8005ada <_dtoa_r+0x502>
 8005a20:	4b83      	ldr	r3, [pc, #524]	; (8005c30 <_dtoa_r+0x658>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	4630      	mov	r0, r6
 8005a26:	4639      	mov	r1, r7
 8005a28:	f7fa fc2e 	bl	8000288 <__aeabi_dsub>
 8005a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a30:	4606      	mov	r6, r0
 8005a32:	460f      	mov	r7, r1
 8005a34:	f7fb f870 	bl	8000b18 <__aeabi_dcmpgt>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f040 8296 	bne.w	8005f6a <_dtoa_r+0x992>
 8005a3e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005a42:	4630      	mov	r0, r6
 8005a44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a48:	4639      	mov	r1, r7
 8005a4a:	f7fb f847 	bl	8000adc <__aeabi_dcmplt>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	f040 8288 	bne.w	8005f64 <_dtoa_r+0x98c>
 8005a54:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005a58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f2c0 8158 	blt.w	8005d14 <_dtoa_r+0x73c>
 8005a64:	f1ba 0f0e 	cmp.w	sl, #14
 8005a68:	f300 8154 	bgt.w	8005d14 <_dtoa_r+0x73c>
 8005a6c:	4b6b      	ldr	r3, [pc, #428]	; (8005c1c <_dtoa_r+0x644>)
 8005a6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a72:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f280 80e3 	bge.w	8005c44 <_dtoa_r+0x66c>
 8005a7e:	9b01      	ldr	r3, [sp, #4]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f300 80df 	bgt.w	8005c44 <_dtoa_r+0x66c>
 8005a86:	f040 826d 	bne.w	8005f64 <_dtoa_r+0x98c>
 8005a8a:	4b69      	ldr	r3, [pc, #420]	; (8005c30 <_dtoa_r+0x658>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4640      	mov	r0, r8
 8005a90:	4649      	mov	r1, r9
 8005a92:	f7fa fdb1 	bl	80005f8 <__aeabi_dmul>
 8005a96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a9a:	f7fb f833 	bl	8000b04 <__aeabi_dcmpge>
 8005a9e:	9e01      	ldr	r6, [sp, #4]
 8005aa0:	4637      	mov	r7, r6
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	f040 8243 	bne.w	8005f2e <_dtoa_r+0x956>
 8005aa8:	9d00      	ldr	r5, [sp, #0]
 8005aaa:	2331      	movs	r3, #49	; 0x31
 8005aac:	f805 3b01 	strb.w	r3, [r5], #1
 8005ab0:	f10a 0a01 	add.w	sl, sl, #1
 8005ab4:	e23f      	b.n	8005f36 <_dtoa_r+0x95e>
 8005ab6:	07f2      	lsls	r2, r6, #31
 8005ab8:	d505      	bpl.n	8005ac6 <_dtoa_r+0x4ee>
 8005aba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005abe:	f7fa fd9b 	bl	80005f8 <__aeabi_dmul>
 8005ac2:	3501      	adds	r5, #1
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	1076      	asrs	r6, r6, #1
 8005ac8:	3708      	adds	r7, #8
 8005aca:	e76c      	b.n	80059a6 <_dtoa_r+0x3ce>
 8005acc:	2502      	movs	r5, #2
 8005ace:	e76f      	b.n	80059b0 <_dtoa_r+0x3d8>
 8005ad0:	9b01      	ldr	r3, [sp, #4]
 8005ad2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ad8:	e78d      	b.n	80059f6 <_dtoa_r+0x41e>
 8005ada:	9900      	ldr	r1, [sp, #0]
 8005adc:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ae0:	4b4e      	ldr	r3, [pc, #312]	; (8005c1c <_dtoa_r+0x644>)
 8005ae2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ae6:	4401      	add	r1, r0
 8005ae8:	9102      	str	r1, [sp, #8]
 8005aea:	9908      	ldr	r1, [sp, #32]
 8005aec:	eeb0 8a47 	vmov.f32	s16, s14
 8005af0:	eef0 8a67 	vmov.f32	s17, s15
 8005af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005af8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005afc:	2900      	cmp	r1, #0
 8005afe:	d045      	beq.n	8005b8c <_dtoa_r+0x5b4>
 8005b00:	494c      	ldr	r1, [pc, #304]	; (8005c34 <_dtoa_r+0x65c>)
 8005b02:	2000      	movs	r0, #0
 8005b04:	f7fa fea2 	bl	800084c <__aeabi_ddiv>
 8005b08:	ec53 2b18 	vmov	r2, r3, d8
 8005b0c:	f7fa fbbc 	bl	8000288 <__aeabi_dsub>
 8005b10:	9d00      	ldr	r5, [sp, #0]
 8005b12:	ec41 0b18 	vmov	d8, r0, r1
 8005b16:	4639      	mov	r1, r7
 8005b18:	4630      	mov	r0, r6
 8005b1a:	f7fb f81d 	bl	8000b58 <__aeabi_d2iz>
 8005b1e:	900c      	str	r0, [sp, #48]	; 0x30
 8005b20:	f7fa fd00 	bl	8000524 <__aeabi_i2d>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4630      	mov	r0, r6
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	f7fa fbac 	bl	8000288 <__aeabi_dsub>
 8005b30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b32:	3330      	adds	r3, #48	; 0x30
 8005b34:	f805 3b01 	strb.w	r3, [r5], #1
 8005b38:	ec53 2b18 	vmov	r2, r3, d8
 8005b3c:	4606      	mov	r6, r0
 8005b3e:	460f      	mov	r7, r1
 8005b40:	f7fa ffcc 	bl	8000adc <__aeabi_dcmplt>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d165      	bne.n	8005c14 <_dtoa_r+0x63c>
 8005b48:	4632      	mov	r2, r6
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	4935      	ldr	r1, [pc, #212]	; (8005c24 <_dtoa_r+0x64c>)
 8005b4e:	2000      	movs	r0, #0
 8005b50:	f7fa fb9a 	bl	8000288 <__aeabi_dsub>
 8005b54:	ec53 2b18 	vmov	r2, r3, d8
 8005b58:	f7fa ffc0 	bl	8000adc <__aeabi_dcmplt>
 8005b5c:	2800      	cmp	r0, #0
 8005b5e:	f040 80b9 	bne.w	8005cd4 <_dtoa_r+0x6fc>
 8005b62:	9b02      	ldr	r3, [sp, #8]
 8005b64:	429d      	cmp	r5, r3
 8005b66:	f43f af75 	beq.w	8005a54 <_dtoa_r+0x47c>
 8005b6a:	4b2f      	ldr	r3, [pc, #188]	; (8005c28 <_dtoa_r+0x650>)
 8005b6c:	ec51 0b18 	vmov	r0, r1, d8
 8005b70:	2200      	movs	r2, #0
 8005b72:	f7fa fd41 	bl	80005f8 <__aeabi_dmul>
 8005b76:	4b2c      	ldr	r3, [pc, #176]	; (8005c28 <_dtoa_r+0x650>)
 8005b78:	ec41 0b18 	vmov	d8, r0, r1
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	4630      	mov	r0, r6
 8005b80:	4639      	mov	r1, r7
 8005b82:	f7fa fd39 	bl	80005f8 <__aeabi_dmul>
 8005b86:	4606      	mov	r6, r0
 8005b88:	460f      	mov	r7, r1
 8005b8a:	e7c4      	b.n	8005b16 <_dtoa_r+0x53e>
 8005b8c:	ec51 0b17 	vmov	r0, r1, d7
 8005b90:	f7fa fd32 	bl	80005f8 <__aeabi_dmul>
 8005b94:	9b02      	ldr	r3, [sp, #8]
 8005b96:	9d00      	ldr	r5, [sp, #0]
 8005b98:	930c      	str	r3, [sp, #48]	; 0x30
 8005b9a:	ec41 0b18 	vmov	d8, r0, r1
 8005b9e:	4639      	mov	r1, r7
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f7fa ffd9 	bl	8000b58 <__aeabi_d2iz>
 8005ba6:	9011      	str	r0, [sp, #68]	; 0x44
 8005ba8:	f7fa fcbc 	bl	8000524 <__aeabi_i2d>
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa fb68 	bl	8000288 <__aeabi_dsub>
 8005bb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005bba:	3330      	adds	r3, #48	; 0x30
 8005bbc:	f805 3b01 	strb.w	r3, [r5], #1
 8005bc0:	9b02      	ldr	r3, [sp, #8]
 8005bc2:	429d      	cmp	r5, r3
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	460f      	mov	r7, r1
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	d134      	bne.n	8005c38 <_dtoa_r+0x660>
 8005bce:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <_dtoa_r+0x65c>)
 8005bd0:	ec51 0b18 	vmov	r0, r1, d8
 8005bd4:	f7fa fb5a 	bl	800028c <__adddf3>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4630      	mov	r0, r6
 8005bde:	4639      	mov	r1, r7
 8005be0:	f7fa ff9a 	bl	8000b18 <__aeabi_dcmpgt>
 8005be4:	2800      	cmp	r0, #0
 8005be6:	d175      	bne.n	8005cd4 <_dtoa_r+0x6fc>
 8005be8:	ec53 2b18 	vmov	r2, r3, d8
 8005bec:	4911      	ldr	r1, [pc, #68]	; (8005c34 <_dtoa_r+0x65c>)
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f7fa fb4a 	bl	8000288 <__aeabi_dsub>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4630      	mov	r0, r6
 8005bfa:	4639      	mov	r1, r7
 8005bfc:	f7fa ff6e 	bl	8000adc <__aeabi_dcmplt>
 8005c00:	2800      	cmp	r0, #0
 8005c02:	f43f af27 	beq.w	8005a54 <_dtoa_r+0x47c>
 8005c06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c08:	1e6b      	subs	r3, r5, #1
 8005c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8005c0c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c10:	2b30      	cmp	r3, #48	; 0x30
 8005c12:	d0f8      	beq.n	8005c06 <_dtoa_r+0x62e>
 8005c14:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005c18:	e04a      	b.n	8005cb0 <_dtoa_r+0x6d8>
 8005c1a:	bf00      	nop
 8005c1c:	08007b88 	.word	0x08007b88
 8005c20:	08007b60 	.word	0x08007b60
 8005c24:	3ff00000 	.word	0x3ff00000
 8005c28:	40240000 	.word	0x40240000
 8005c2c:	401c0000 	.word	0x401c0000
 8005c30:	40140000 	.word	0x40140000
 8005c34:	3fe00000 	.word	0x3fe00000
 8005c38:	4baf      	ldr	r3, [pc, #700]	; (8005ef8 <_dtoa_r+0x920>)
 8005c3a:	f7fa fcdd 	bl	80005f8 <__aeabi_dmul>
 8005c3e:	4606      	mov	r6, r0
 8005c40:	460f      	mov	r7, r1
 8005c42:	e7ac      	b.n	8005b9e <_dtoa_r+0x5c6>
 8005c44:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c48:	9d00      	ldr	r5, [sp, #0]
 8005c4a:	4642      	mov	r2, r8
 8005c4c:	464b      	mov	r3, r9
 8005c4e:	4630      	mov	r0, r6
 8005c50:	4639      	mov	r1, r7
 8005c52:	f7fa fdfb 	bl	800084c <__aeabi_ddiv>
 8005c56:	f7fa ff7f 	bl	8000b58 <__aeabi_d2iz>
 8005c5a:	9002      	str	r0, [sp, #8]
 8005c5c:	f7fa fc62 	bl	8000524 <__aeabi_i2d>
 8005c60:	4642      	mov	r2, r8
 8005c62:	464b      	mov	r3, r9
 8005c64:	f7fa fcc8 	bl	80005f8 <__aeabi_dmul>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	4639      	mov	r1, r7
 8005c70:	f7fa fb0a 	bl	8000288 <__aeabi_dsub>
 8005c74:	9e02      	ldr	r6, [sp, #8]
 8005c76:	9f01      	ldr	r7, [sp, #4]
 8005c78:	3630      	adds	r6, #48	; 0x30
 8005c7a:	f805 6b01 	strb.w	r6, [r5], #1
 8005c7e:	9e00      	ldr	r6, [sp, #0]
 8005c80:	1bae      	subs	r6, r5, r6
 8005c82:	42b7      	cmp	r7, r6
 8005c84:	4602      	mov	r2, r0
 8005c86:	460b      	mov	r3, r1
 8005c88:	d137      	bne.n	8005cfa <_dtoa_r+0x722>
 8005c8a:	f7fa faff 	bl	800028c <__adddf3>
 8005c8e:	4642      	mov	r2, r8
 8005c90:	464b      	mov	r3, r9
 8005c92:	4606      	mov	r6, r0
 8005c94:	460f      	mov	r7, r1
 8005c96:	f7fa ff3f 	bl	8000b18 <__aeabi_dcmpgt>
 8005c9a:	b9c8      	cbnz	r0, 8005cd0 <_dtoa_r+0x6f8>
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	4639      	mov	r1, r7
 8005ca4:	f7fa ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ca8:	b110      	cbz	r0, 8005cb0 <_dtoa_r+0x6d8>
 8005caa:	9b02      	ldr	r3, [sp, #8]
 8005cac:	07d9      	lsls	r1, r3, #31
 8005cae:	d40f      	bmi.n	8005cd0 <_dtoa_r+0x6f8>
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	4659      	mov	r1, fp
 8005cb4:	f000 fad6 	bl	8006264 <_Bfree>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	702b      	strb	r3, [r5, #0]
 8005cbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005cbe:	f10a 0001 	add.w	r0, sl, #1
 8005cc2:	6018      	str	r0, [r3, #0]
 8005cc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f43f acd8 	beq.w	800567c <_dtoa_r+0xa4>
 8005ccc:	601d      	str	r5, [r3, #0]
 8005cce:	e4d5      	b.n	800567c <_dtoa_r+0xa4>
 8005cd0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cdc:	2a39      	cmp	r2, #57	; 0x39
 8005cde:	d108      	bne.n	8005cf2 <_dtoa_r+0x71a>
 8005ce0:	9a00      	ldr	r2, [sp, #0]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d1f7      	bne.n	8005cd6 <_dtoa_r+0x6fe>
 8005ce6:	9a07      	ldr	r2, [sp, #28]
 8005ce8:	9900      	ldr	r1, [sp, #0]
 8005cea:	3201      	adds	r2, #1
 8005cec:	9207      	str	r2, [sp, #28]
 8005cee:	2230      	movs	r2, #48	; 0x30
 8005cf0:	700a      	strb	r2, [r1, #0]
 8005cf2:	781a      	ldrb	r2, [r3, #0]
 8005cf4:	3201      	adds	r2, #1
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	e78c      	b.n	8005c14 <_dtoa_r+0x63c>
 8005cfa:	4b7f      	ldr	r3, [pc, #508]	; (8005ef8 <_dtoa_r+0x920>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f7fa fc7b 	bl	80005f8 <__aeabi_dmul>
 8005d02:	2200      	movs	r2, #0
 8005d04:	2300      	movs	r3, #0
 8005d06:	4606      	mov	r6, r0
 8005d08:	460f      	mov	r7, r1
 8005d0a:	f7fa fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d09b      	beq.n	8005c4a <_dtoa_r+0x672>
 8005d12:	e7cd      	b.n	8005cb0 <_dtoa_r+0x6d8>
 8005d14:	9a08      	ldr	r2, [sp, #32]
 8005d16:	2a00      	cmp	r2, #0
 8005d18:	f000 80c4 	beq.w	8005ea4 <_dtoa_r+0x8cc>
 8005d1c:	9a05      	ldr	r2, [sp, #20]
 8005d1e:	2a01      	cmp	r2, #1
 8005d20:	f300 80a8 	bgt.w	8005e74 <_dtoa_r+0x89c>
 8005d24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d26:	2a00      	cmp	r2, #0
 8005d28:	f000 80a0 	beq.w	8005e6c <_dtoa_r+0x894>
 8005d2c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d30:	9e06      	ldr	r6, [sp, #24]
 8005d32:	4645      	mov	r5, r8
 8005d34:	9a04      	ldr	r2, [sp, #16]
 8005d36:	2101      	movs	r1, #1
 8005d38:	441a      	add	r2, r3
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	4498      	add	r8, r3
 8005d3e:	9204      	str	r2, [sp, #16]
 8005d40:	f000 fb4c 	bl	80063dc <__i2b>
 8005d44:	4607      	mov	r7, r0
 8005d46:	2d00      	cmp	r5, #0
 8005d48:	dd0b      	ble.n	8005d62 <_dtoa_r+0x78a>
 8005d4a:	9b04      	ldr	r3, [sp, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dd08      	ble.n	8005d62 <_dtoa_r+0x78a>
 8005d50:	42ab      	cmp	r3, r5
 8005d52:	9a04      	ldr	r2, [sp, #16]
 8005d54:	bfa8      	it	ge
 8005d56:	462b      	movge	r3, r5
 8005d58:	eba8 0803 	sub.w	r8, r8, r3
 8005d5c:	1aed      	subs	r5, r5, r3
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	9b06      	ldr	r3, [sp, #24]
 8005d64:	b1fb      	cbz	r3, 8005da6 <_dtoa_r+0x7ce>
 8005d66:	9b08      	ldr	r3, [sp, #32]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f000 809f 	beq.w	8005eac <_dtoa_r+0x8d4>
 8005d6e:	2e00      	cmp	r6, #0
 8005d70:	dd11      	ble.n	8005d96 <_dtoa_r+0x7be>
 8005d72:	4639      	mov	r1, r7
 8005d74:	4632      	mov	r2, r6
 8005d76:	4620      	mov	r0, r4
 8005d78:	f000 fbec 	bl	8006554 <__pow5mult>
 8005d7c:	465a      	mov	r2, fp
 8005d7e:	4601      	mov	r1, r0
 8005d80:	4607      	mov	r7, r0
 8005d82:	4620      	mov	r0, r4
 8005d84:	f000 fb40 	bl	8006408 <__multiply>
 8005d88:	4659      	mov	r1, fp
 8005d8a:	9007      	str	r0, [sp, #28]
 8005d8c:	4620      	mov	r0, r4
 8005d8e:	f000 fa69 	bl	8006264 <_Bfree>
 8005d92:	9b07      	ldr	r3, [sp, #28]
 8005d94:	469b      	mov	fp, r3
 8005d96:	9b06      	ldr	r3, [sp, #24]
 8005d98:	1b9a      	subs	r2, r3, r6
 8005d9a:	d004      	beq.n	8005da6 <_dtoa_r+0x7ce>
 8005d9c:	4659      	mov	r1, fp
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f000 fbd8 	bl	8006554 <__pow5mult>
 8005da4:	4683      	mov	fp, r0
 8005da6:	2101      	movs	r1, #1
 8005da8:	4620      	mov	r0, r4
 8005daa:	f000 fb17 	bl	80063dc <__i2b>
 8005dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	4606      	mov	r6, r0
 8005db4:	dd7c      	ble.n	8005eb0 <_dtoa_r+0x8d8>
 8005db6:	461a      	mov	r2, r3
 8005db8:	4601      	mov	r1, r0
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 fbca 	bl	8006554 <__pow5mult>
 8005dc0:	9b05      	ldr	r3, [sp, #20]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	4606      	mov	r6, r0
 8005dc6:	dd76      	ble.n	8005eb6 <_dtoa_r+0x8de>
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9306      	str	r3, [sp, #24]
 8005dcc:	6933      	ldr	r3, [r6, #16]
 8005dce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005dd2:	6918      	ldr	r0, [r3, #16]
 8005dd4:	f000 fab2 	bl	800633c <__hi0bits>
 8005dd8:	f1c0 0020 	rsb	r0, r0, #32
 8005ddc:	9b04      	ldr	r3, [sp, #16]
 8005dde:	4418      	add	r0, r3
 8005de0:	f010 001f 	ands.w	r0, r0, #31
 8005de4:	f000 8086 	beq.w	8005ef4 <_dtoa_r+0x91c>
 8005de8:	f1c0 0320 	rsb	r3, r0, #32
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	dd7f      	ble.n	8005ef0 <_dtoa_r+0x918>
 8005df0:	f1c0 001c 	rsb	r0, r0, #28
 8005df4:	9b04      	ldr	r3, [sp, #16]
 8005df6:	4403      	add	r3, r0
 8005df8:	4480      	add	r8, r0
 8005dfa:	4405      	add	r5, r0
 8005dfc:	9304      	str	r3, [sp, #16]
 8005dfe:	f1b8 0f00 	cmp.w	r8, #0
 8005e02:	dd05      	ble.n	8005e10 <_dtoa_r+0x838>
 8005e04:	4659      	mov	r1, fp
 8005e06:	4642      	mov	r2, r8
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fbfd 	bl	8006608 <__lshift>
 8005e0e:	4683      	mov	fp, r0
 8005e10:	9b04      	ldr	r3, [sp, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dd05      	ble.n	8005e22 <_dtoa_r+0x84a>
 8005e16:	4631      	mov	r1, r6
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4620      	mov	r0, r4
 8005e1c:	f000 fbf4 	bl	8006608 <__lshift>
 8005e20:	4606      	mov	r6, r0
 8005e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d069      	beq.n	8005efc <_dtoa_r+0x924>
 8005e28:	4631      	mov	r1, r6
 8005e2a:	4658      	mov	r0, fp
 8005e2c:	f000 fc58 	bl	80066e0 <__mcmp>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	da63      	bge.n	8005efc <_dtoa_r+0x924>
 8005e34:	2300      	movs	r3, #0
 8005e36:	4659      	mov	r1, fp
 8005e38:	220a      	movs	r2, #10
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f000 fa34 	bl	80062a8 <__multadd>
 8005e40:	9b08      	ldr	r3, [sp, #32]
 8005e42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e46:	4683      	mov	fp, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 818f 	beq.w	800616c <_dtoa_r+0xb94>
 8005e4e:	4639      	mov	r1, r7
 8005e50:	2300      	movs	r3, #0
 8005e52:	220a      	movs	r2, #10
 8005e54:	4620      	mov	r0, r4
 8005e56:	f000 fa27 	bl	80062a8 <__multadd>
 8005e5a:	f1b9 0f00 	cmp.w	r9, #0
 8005e5e:	4607      	mov	r7, r0
 8005e60:	f300 808e 	bgt.w	8005f80 <_dtoa_r+0x9a8>
 8005e64:	9b05      	ldr	r3, [sp, #20]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	dc50      	bgt.n	8005f0c <_dtoa_r+0x934>
 8005e6a:	e089      	b.n	8005f80 <_dtoa_r+0x9a8>
 8005e6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e72:	e75d      	b.n	8005d30 <_dtoa_r+0x758>
 8005e74:	9b01      	ldr	r3, [sp, #4]
 8005e76:	1e5e      	subs	r6, r3, #1
 8005e78:	9b06      	ldr	r3, [sp, #24]
 8005e7a:	42b3      	cmp	r3, r6
 8005e7c:	bfbf      	itttt	lt
 8005e7e:	9b06      	ldrlt	r3, [sp, #24]
 8005e80:	9606      	strlt	r6, [sp, #24]
 8005e82:	1af2      	sublt	r2, r6, r3
 8005e84:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005e86:	bfb6      	itet	lt
 8005e88:	189b      	addlt	r3, r3, r2
 8005e8a:	1b9e      	subge	r6, r3, r6
 8005e8c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005e8e:	9b01      	ldr	r3, [sp, #4]
 8005e90:	bfb8      	it	lt
 8005e92:	2600      	movlt	r6, #0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	bfb5      	itete	lt
 8005e98:	eba8 0503 	sublt.w	r5, r8, r3
 8005e9c:	9b01      	ldrge	r3, [sp, #4]
 8005e9e:	2300      	movlt	r3, #0
 8005ea0:	4645      	movge	r5, r8
 8005ea2:	e747      	b.n	8005d34 <_dtoa_r+0x75c>
 8005ea4:	9e06      	ldr	r6, [sp, #24]
 8005ea6:	9f08      	ldr	r7, [sp, #32]
 8005ea8:	4645      	mov	r5, r8
 8005eaa:	e74c      	b.n	8005d46 <_dtoa_r+0x76e>
 8005eac:	9a06      	ldr	r2, [sp, #24]
 8005eae:	e775      	b.n	8005d9c <_dtoa_r+0x7c4>
 8005eb0:	9b05      	ldr	r3, [sp, #20]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	dc18      	bgt.n	8005ee8 <_dtoa_r+0x910>
 8005eb6:	9b02      	ldr	r3, [sp, #8]
 8005eb8:	b9b3      	cbnz	r3, 8005ee8 <_dtoa_r+0x910>
 8005eba:	9b03      	ldr	r3, [sp, #12]
 8005ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ec0:	b9a3      	cbnz	r3, 8005eec <_dtoa_r+0x914>
 8005ec2:	9b03      	ldr	r3, [sp, #12]
 8005ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ec8:	0d1b      	lsrs	r3, r3, #20
 8005eca:	051b      	lsls	r3, r3, #20
 8005ecc:	b12b      	cbz	r3, 8005eda <_dtoa_r+0x902>
 8005ece:	9b04      	ldr	r3, [sp, #16]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	9304      	str	r3, [sp, #16]
 8005ed4:	f108 0801 	add.w	r8, r8, #1
 8005ed8:	2301      	movs	r3, #1
 8005eda:	9306      	str	r3, [sp, #24]
 8005edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f47f af74 	bne.w	8005dcc <_dtoa_r+0x7f4>
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	e779      	b.n	8005ddc <_dtoa_r+0x804>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	e7f6      	b.n	8005eda <_dtoa_r+0x902>
 8005eec:	9b02      	ldr	r3, [sp, #8]
 8005eee:	e7f4      	b.n	8005eda <_dtoa_r+0x902>
 8005ef0:	d085      	beq.n	8005dfe <_dtoa_r+0x826>
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	301c      	adds	r0, #28
 8005ef6:	e77d      	b.n	8005df4 <_dtoa_r+0x81c>
 8005ef8:	40240000 	.word	0x40240000
 8005efc:	9b01      	ldr	r3, [sp, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	dc38      	bgt.n	8005f74 <_dtoa_r+0x99c>
 8005f02:	9b05      	ldr	r3, [sp, #20]
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	dd35      	ble.n	8005f74 <_dtoa_r+0x99c>
 8005f08:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005f0c:	f1b9 0f00 	cmp.w	r9, #0
 8005f10:	d10d      	bne.n	8005f2e <_dtoa_r+0x956>
 8005f12:	4631      	mov	r1, r6
 8005f14:	464b      	mov	r3, r9
 8005f16:	2205      	movs	r2, #5
 8005f18:	4620      	mov	r0, r4
 8005f1a:	f000 f9c5 	bl	80062a8 <__multadd>
 8005f1e:	4601      	mov	r1, r0
 8005f20:	4606      	mov	r6, r0
 8005f22:	4658      	mov	r0, fp
 8005f24:	f000 fbdc 	bl	80066e0 <__mcmp>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	f73f adbd 	bgt.w	8005aa8 <_dtoa_r+0x4d0>
 8005f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f30:	9d00      	ldr	r5, [sp, #0]
 8005f32:	ea6f 0a03 	mvn.w	sl, r3
 8005f36:	f04f 0800 	mov.w	r8, #0
 8005f3a:	4631      	mov	r1, r6
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	f000 f991 	bl	8006264 <_Bfree>
 8005f42:	2f00      	cmp	r7, #0
 8005f44:	f43f aeb4 	beq.w	8005cb0 <_dtoa_r+0x6d8>
 8005f48:	f1b8 0f00 	cmp.w	r8, #0
 8005f4c:	d005      	beq.n	8005f5a <_dtoa_r+0x982>
 8005f4e:	45b8      	cmp	r8, r7
 8005f50:	d003      	beq.n	8005f5a <_dtoa_r+0x982>
 8005f52:	4641      	mov	r1, r8
 8005f54:	4620      	mov	r0, r4
 8005f56:	f000 f985 	bl	8006264 <_Bfree>
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	f000 f981 	bl	8006264 <_Bfree>
 8005f62:	e6a5      	b.n	8005cb0 <_dtoa_r+0x6d8>
 8005f64:	2600      	movs	r6, #0
 8005f66:	4637      	mov	r7, r6
 8005f68:	e7e1      	b.n	8005f2e <_dtoa_r+0x956>
 8005f6a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005f6c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005f70:	4637      	mov	r7, r6
 8005f72:	e599      	b.n	8005aa8 <_dtoa_r+0x4d0>
 8005f74:	9b08      	ldr	r3, [sp, #32]
 8005f76:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 80fd 	beq.w	800617a <_dtoa_r+0xba2>
 8005f80:	2d00      	cmp	r5, #0
 8005f82:	dd05      	ble.n	8005f90 <_dtoa_r+0x9b8>
 8005f84:	4639      	mov	r1, r7
 8005f86:	462a      	mov	r2, r5
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fb3d 	bl	8006608 <__lshift>
 8005f8e:	4607      	mov	r7, r0
 8005f90:	9b06      	ldr	r3, [sp, #24]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d05c      	beq.n	8006050 <_dtoa_r+0xa78>
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f000 f923 	bl	80061e4 <_Balloc>
 8005f9e:	4605      	mov	r5, r0
 8005fa0:	b928      	cbnz	r0, 8005fae <_dtoa_r+0x9d6>
 8005fa2:	4b80      	ldr	r3, [pc, #512]	; (80061a4 <_dtoa_r+0xbcc>)
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005faa:	f7ff bb2e 	b.w	800560a <_dtoa_r+0x32>
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	3202      	adds	r2, #2
 8005fb2:	0092      	lsls	r2, r2, #2
 8005fb4:	f107 010c 	add.w	r1, r7, #12
 8005fb8:	300c      	adds	r0, #12
 8005fba:	f000 f905 	bl	80061c8 <memcpy>
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 fb20 	bl	8006608 <__lshift>
 8005fc8:	9b00      	ldr	r3, [sp, #0]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	9b00      	ldr	r3, [sp, #0]
 8005fd0:	444b      	add	r3, r9
 8005fd2:	9307      	str	r3, [sp, #28]
 8005fd4:	9b02      	ldr	r3, [sp, #8]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	46b8      	mov	r8, r7
 8005fdc:	9306      	str	r3, [sp, #24]
 8005fde:	4607      	mov	r7, r0
 8005fe0:	9b01      	ldr	r3, [sp, #4]
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	4658      	mov	r0, fp
 8005fe8:	9302      	str	r3, [sp, #8]
 8005fea:	f7ff fa67 	bl	80054bc <quorem>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	3330      	adds	r3, #48	; 0x30
 8005ff2:	9004      	str	r0, [sp, #16]
 8005ff4:	4641      	mov	r1, r8
 8005ff6:	4658      	mov	r0, fp
 8005ff8:	9308      	str	r3, [sp, #32]
 8005ffa:	f000 fb71 	bl	80066e0 <__mcmp>
 8005ffe:	463a      	mov	r2, r7
 8006000:	4681      	mov	r9, r0
 8006002:	4631      	mov	r1, r6
 8006004:	4620      	mov	r0, r4
 8006006:	f000 fb87 	bl	8006718 <__mdiff>
 800600a:	68c2      	ldr	r2, [r0, #12]
 800600c:	9b08      	ldr	r3, [sp, #32]
 800600e:	4605      	mov	r5, r0
 8006010:	bb02      	cbnz	r2, 8006054 <_dtoa_r+0xa7c>
 8006012:	4601      	mov	r1, r0
 8006014:	4658      	mov	r0, fp
 8006016:	f000 fb63 	bl	80066e0 <__mcmp>
 800601a:	9b08      	ldr	r3, [sp, #32]
 800601c:	4602      	mov	r2, r0
 800601e:	4629      	mov	r1, r5
 8006020:	4620      	mov	r0, r4
 8006022:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006026:	f000 f91d 	bl	8006264 <_Bfree>
 800602a:	9b05      	ldr	r3, [sp, #20]
 800602c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800602e:	9d01      	ldr	r5, [sp, #4]
 8006030:	ea43 0102 	orr.w	r1, r3, r2
 8006034:	9b06      	ldr	r3, [sp, #24]
 8006036:	430b      	orrs	r3, r1
 8006038:	9b08      	ldr	r3, [sp, #32]
 800603a:	d10d      	bne.n	8006058 <_dtoa_r+0xa80>
 800603c:	2b39      	cmp	r3, #57	; 0x39
 800603e:	d029      	beq.n	8006094 <_dtoa_r+0xabc>
 8006040:	f1b9 0f00 	cmp.w	r9, #0
 8006044:	dd01      	ble.n	800604a <_dtoa_r+0xa72>
 8006046:	9b04      	ldr	r3, [sp, #16]
 8006048:	3331      	adds	r3, #49	; 0x31
 800604a:	9a02      	ldr	r2, [sp, #8]
 800604c:	7013      	strb	r3, [r2, #0]
 800604e:	e774      	b.n	8005f3a <_dtoa_r+0x962>
 8006050:	4638      	mov	r0, r7
 8006052:	e7b9      	b.n	8005fc8 <_dtoa_r+0x9f0>
 8006054:	2201      	movs	r2, #1
 8006056:	e7e2      	b.n	800601e <_dtoa_r+0xa46>
 8006058:	f1b9 0f00 	cmp.w	r9, #0
 800605c:	db06      	blt.n	800606c <_dtoa_r+0xa94>
 800605e:	9905      	ldr	r1, [sp, #20]
 8006060:	ea41 0909 	orr.w	r9, r1, r9
 8006064:	9906      	ldr	r1, [sp, #24]
 8006066:	ea59 0101 	orrs.w	r1, r9, r1
 800606a:	d120      	bne.n	80060ae <_dtoa_r+0xad6>
 800606c:	2a00      	cmp	r2, #0
 800606e:	ddec      	ble.n	800604a <_dtoa_r+0xa72>
 8006070:	4659      	mov	r1, fp
 8006072:	2201      	movs	r2, #1
 8006074:	4620      	mov	r0, r4
 8006076:	9301      	str	r3, [sp, #4]
 8006078:	f000 fac6 	bl	8006608 <__lshift>
 800607c:	4631      	mov	r1, r6
 800607e:	4683      	mov	fp, r0
 8006080:	f000 fb2e 	bl	80066e0 <__mcmp>
 8006084:	2800      	cmp	r0, #0
 8006086:	9b01      	ldr	r3, [sp, #4]
 8006088:	dc02      	bgt.n	8006090 <_dtoa_r+0xab8>
 800608a:	d1de      	bne.n	800604a <_dtoa_r+0xa72>
 800608c:	07da      	lsls	r2, r3, #31
 800608e:	d5dc      	bpl.n	800604a <_dtoa_r+0xa72>
 8006090:	2b39      	cmp	r3, #57	; 0x39
 8006092:	d1d8      	bne.n	8006046 <_dtoa_r+0xa6e>
 8006094:	9a02      	ldr	r2, [sp, #8]
 8006096:	2339      	movs	r3, #57	; 0x39
 8006098:	7013      	strb	r3, [r2, #0]
 800609a:	462b      	mov	r3, r5
 800609c:	461d      	mov	r5, r3
 800609e:	3b01      	subs	r3, #1
 80060a0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80060a4:	2a39      	cmp	r2, #57	; 0x39
 80060a6:	d050      	beq.n	800614a <_dtoa_r+0xb72>
 80060a8:	3201      	adds	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	e745      	b.n	8005f3a <_dtoa_r+0x962>
 80060ae:	2a00      	cmp	r2, #0
 80060b0:	dd03      	ble.n	80060ba <_dtoa_r+0xae2>
 80060b2:	2b39      	cmp	r3, #57	; 0x39
 80060b4:	d0ee      	beq.n	8006094 <_dtoa_r+0xabc>
 80060b6:	3301      	adds	r3, #1
 80060b8:	e7c7      	b.n	800604a <_dtoa_r+0xa72>
 80060ba:	9a01      	ldr	r2, [sp, #4]
 80060bc:	9907      	ldr	r1, [sp, #28]
 80060be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80060c2:	428a      	cmp	r2, r1
 80060c4:	d02a      	beq.n	800611c <_dtoa_r+0xb44>
 80060c6:	4659      	mov	r1, fp
 80060c8:	2300      	movs	r3, #0
 80060ca:	220a      	movs	r2, #10
 80060cc:	4620      	mov	r0, r4
 80060ce:	f000 f8eb 	bl	80062a8 <__multadd>
 80060d2:	45b8      	cmp	r8, r7
 80060d4:	4683      	mov	fp, r0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	f04f 020a 	mov.w	r2, #10
 80060de:	4641      	mov	r1, r8
 80060e0:	4620      	mov	r0, r4
 80060e2:	d107      	bne.n	80060f4 <_dtoa_r+0xb1c>
 80060e4:	f000 f8e0 	bl	80062a8 <__multadd>
 80060e8:	4680      	mov	r8, r0
 80060ea:	4607      	mov	r7, r0
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	3301      	adds	r3, #1
 80060f0:	9301      	str	r3, [sp, #4]
 80060f2:	e775      	b.n	8005fe0 <_dtoa_r+0xa08>
 80060f4:	f000 f8d8 	bl	80062a8 <__multadd>
 80060f8:	4639      	mov	r1, r7
 80060fa:	4680      	mov	r8, r0
 80060fc:	2300      	movs	r3, #0
 80060fe:	220a      	movs	r2, #10
 8006100:	4620      	mov	r0, r4
 8006102:	f000 f8d1 	bl	80062a8 <__multadd>
 8006106:	4607      	mov	r7, r0
 8006108:	e7f0      	b.n	80060ec <_dtoa_r+0xb14>
 800610a:	f1b9 0f00 	cmp.w	r9, #0
 800610e:	9a00      	ldr	r2, [sp, #0]
 8006110:	bfcc      	ite	gt
 8006112:	464d      	movgt	r5, r9
 8006114:	2501      	movle	r5, #1
 8006116:	4415      	add	r5, r2
 8006118:	f04f 0800 	mov.w	r8, #0
 800611c:	4659      	mov	r1, fp
 800611e:	2201      	movs	r2, #1
 8006120:	4620      	mov	r0, r4
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	f000 fa70 	bl	8006608 <__lshift>
 8006128:	4631      	mov	r1, r6
 800612a:	4683      	mov	fp, r0
 800612c:	f000 fad8 	bl	80066e0 <__mcmp>
 8006130:	2800      	cmp	r0, #0
 8006132:	dcb2      	bgt.n	800609a <_dtoa_r+0xac2>
 8006134:	d102      	bne.n	800613c <_dtoa_r+0xb64>
 8006136:	9b01      	ldr	r3, [sp, #4]
 8006138:	07db      	lsls	r3, r3, #31
 800613a:	d4ae      	bmi.n	800609a <_dtoa_r+0xac2>
 800613c:	462b      	mov	r3, r5
 800613e:	461d      	mov	r5, r3
 8006140:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006144:	2a30      	cmp	r2, #48	; 0x30
 8006146:	d0fa      	beq.n	800613e <_dtoa_r+0xb66>
 8006148:	e6f7      	b.n	8005f3a <_dtoa_r+0x962>
 800614a:	9a00      	ldr	r2, [sp, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d1a5      	bne.n	800609c <_dtoa_r+0xac4>
 8006150:	f10a 0a01 	add.w	sl, sl, #1
 8006154:	2331      	movs	r3, #49	; 0x31
 8006156:	e779      	b.n	800604c <_dtoa_r+0xa74>
 8006158:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <_dtoa_r+0xbd0>)
 800615a:	f7ff baaf 	b.w	80056bc <_dtoa_r+0xe4>
 800615e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006160:	2b00      	cmp	r3, #0
 8006162:	f47f aa86 	bne.w	8005672 <_dtoa_r+0x9a>
 8006166:	4b11      	ldr	r3, [pc, #68]	; (80061ac <_dtoa_r+0xbd4>)
 8006168:	f7ff baa8 	b.w	80056bc <_dtoa_r+0xe4>
 800616c:	f1b9 0f00 	cmp.w	r9, #0
 8006170:	dc03      	bgt.n	800617a <_dtoa_r+0xba2>
 8006172:	9b05      	ldr	r3, [sp, #20]
 8006174:	2b02      	cmp	r3, #2
 8006176:	f73f aec9 	bgt.w	8005f0c <_dtoa_r+0x934>
 800617a:	9d00      	ldr	r5, [sp, #0]
 800617c:	4631      	mov	r1, r6
 800617e:	4658      	mov	r0, fp
 8006180:	f7ff f99c 	bl	80054bc <quorem>
 8006184:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006188:	f805 3b01 	strb.w	r3, [r5], #1
 800618c:	9a00      	ldr	r2, [sp, #0]
 800618e:	1aaa      	subs	r2, r5, r2
 8006190:	4591      	cmp	r9, r2
 8006192:	ddba      	ble.n	800610a <_dtoa_r+0xb32>
 8006194:	4659      	mov	r1, fp
 8006196:	2300      	movs	r3, #0
 8006198:	220a      	movs	r2, #10
 800619a:	4620      	mov	r0, r4
 800619c:	f000 f884 	bl	80062a8 <__multadd>
 80061a0:	4683      	mov	fp, r0
 80061a2:	e7eb      	b.n	800617c <_dtoa_r+0xba4>
 80061a4:	08007aef 	.word	0x08007aef
 80061a8:	08007a48 	.word	0x08007a48
 80061ac:	08007a6c 	.word	0x08007a6c

080061b0 <_localeconv_r>:
 80061b0:	4800      	ldr	r0, [pc, #0]	; (80061b4 <_localeconv_r+0x4>)
 80061b2:	4770      	bx	lr
 80061b4:	20000190 	.word	0x20000190

080061b8 <malloc>:
 80061b8:	4b02      	ldr	r3, [pc, #8]	; (80061c4 <malloc+0xc>)
 80061ba:	4601      	mov	r1, r0
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	f000 bbef 	b.w	80069a0 <_malloc_r>
 80061c2:	bf00      	nop
 80061c4:	2000003c 	.word	0x2000003c

080061c8 <memcpy>:
 80061c8:	440a      	add	r2, r1
 80061ca:	4291      	cmp	r1, r2
 80061cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80061d0:	d100      	bne.n	80061d4 <memcpy+0xc>
 80061d2:	4770      	bx	lr
 80061d4:	b510      	push	{r4, lr}
 80061d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061de:	4291      	cmp	r1, r2
 80061e0:	d1f9      	bne.n	80061d6 <memcpy+0xe>
 80061e2:	bd10      	pop	{r4, pc}

080061e4 <_Balloc>:
 80061e4:	b570      	push	{r4, r5, r6, lr}
 80061e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061e8:	4604      	mov	r4, r0
 80061ea:	460d      	mov	r5, r1
 80061ec:	b976      	cbnz	r6, 800620c <_Balloc+0x28>
 80061ee:	2010      	movs	r0, #16
 80061f0:	f7ff ffe2 	bl	80061b8 <malloc>
 80061f4:	4602      	mov	r2, r0
 80061f6:	6260      	str	r0, [r4, #36]	; 0x24
 80061f8:	b920      	cbnz	r0, 8006204 <_Balloc+0x20>
 80061fa:	4b18      	ldr	r3, [pc, #96]	; (800625c <_Balloc+0x78>)
 80061fc:	4818      	ldr	r0, [pc, #96]	; (8006260 <_Balloc+0x7c>)
 80061fe:	2166      	movs	r1, #102	; 0x66
 8006200:	f000 fd94 	bl	8006d2c <__assert_func>
 8006204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006208:	6006      	str	r6, [r0, #0]
 800620a:	60c6      	str	r6, [r0, #12]
 800620c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800620e:	68f3      	ldr	r3, [r6, #12]
 8006210:	b183      	cbz	r3, 8006234 <_Balloc+0x50>
 8006212:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800621a:	b9b8      	cbnz	r0, 800624c <_Balloc+0x68>
 800621c:	2101      	movs	r1, #1
 800621e:	fa01 f605 	lsl.w	r6, r1, r5
 8006222:	1d72      	adds	r2, r6, #5
 8006224:	0092      	lsls	r2, r2, #2
 8006226:	4620      	mov	r0, r4
 8006228:	f000 fb5a 	bl	80068e0 <_calloc_r>
 800622c:	b160      	cbz	r0, 8006248 <_Balloc+0x64>
 800622e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006232:	e00e      	b.n	8006252 <_Balloc+0x6e>
 8006234:	2221      	movs	r2, #33	; 0x21
 8006236:	2104      	movs	r1, #4
 8006238:	4620      	mov	r0, r4
 800623a:	f000 fb51 	bl	80068e0 <_calloc_r>
 800623e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006240:	60f0      	str	r0, [r6, #12]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e4      	bne.n	8006212 <_Balloc+0x2e>
 8006248:	2000      	movs	r0, #0
 800624a:	bd70      	pop	{r4, r5, r6, pc}
 800624c:	6802      	ldr	r2, [r0, #0]
 800624e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006252:	2300      	movs	r3, #0
 8006254:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006258:	e7f7      	b.n	800624a <_Balloc+0x66>
 800625a:	bf00      	nop
 800625c:	08007a79 	.word	0x08007a79
 8006260:	08007b00 	.word	0x08007b00

08006264 <_Bfree>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006268:	4605      	mov	r5, r0
 800626a:	460c      	mov	r4, r1
 800626c:	b976      	cbnz	r6, 800628c <_Bfree+0x28>
 800626e:	2010      	movs	r0, #16
 8006270:	f7ff ffa2 	bl	80061b8 <malloc>
 8006274:	4602      	mov	r2, r0
 8006276:	6268      	str	r0, [r5, #36]	; 0x24
 8006278:	b920      	cbnz	r0, 8006284 <_Bfree+0x20>
 800627a:	4b09      	ldr	r3, [pc, #36]	; (80062a0 <_Bfree+0x3c>)
 800627c:	4809      	ldr	r0, [pc, #36]	; (80062a4 <_Bfree+0x40>)
 800627e:	218a      	movs	r1, #138	; 0x8a
 8006280:	f000 fd54 	bl	8006d2c <__assert_func>
 8006284:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006288:	6006      	str	r6, [r0, #0]
 800628a:	60c6      	str	r6, [r0, #12]
 800628c:	b13c      	cbz	r4, 800629e <_Bfree+0x3a>
 800628e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006290:	6862      	ldr	r2, [r4, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006298:	6021      	str	r1, [r4, #0]
 800629a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	08007a79 	.word	0x08007a79
 80062a4:	08007b00 	.word	0x08007b00

080062a8 <__multadd>:
 80062a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ac:	690e      	ldr	r6, [r1, #16]
 80062ae:	4607      	mov	r7, r0
 80062b0:	4698      	mov	r8, r3
 80062b2:	460c      	mov	r4, r1
 80062b4:	f101 0014 	add.w	r0, r1, #20
 80062b8:	2300      	movs	r3, #0
 80062ba:	6805      	ldr	r5, [r0, #0]
 80062bc:	b2a9      	uxth	r1, r5
 80062be:	fb02 8101 	mla	r1, r2, r1, r8
 80062c2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80062c6:	0c2d      	lsrs	r5, r5, #16
 80062c8:	fb02 c505 	mla	r5, r2, r5, ip
 80062cc:	b289      	uxth	r1, r1
 80062ce:	3301      	adds	r3, #1
 80062d0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80062d4:	429e      	cmp	r6, r3
 80062d6:	f840 1b04 	str.w	r1, [r0], #4
 80062da:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80062de:	dcec      	bgt.n	80062ba <__multadd+0x12>
 80062e0:	f1b8 0f00 	cmp.w	r8, #0
 80062e4:	d022      	beq.n	800632c <__multadd+0x84>
 80062e6:	68a3      	ldr	r3, [r4, #8]
 80062e8:	42b3      	cmp	r3, r6
 80062ea:	dc19      	bgt.n	8006320 <__multadd+0x78>
 80062ec:	6861      	ldr	r1, [r4, #4]
 80062ee:	4638      	mov	r0, r7
 80062f0:	3101      	adds	r1, #1
 80062f2:	f7ff ff77 	bl	80061e4 <_Balloc>
 80062f6:	4605      	mov	r5, r0
 80062f8:	b928      	cbnz	r0, 8006306 <__multadd+0x5e>
 80062fa:	4602      	mov	r2, r0
 80062fc:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <__multadd+0x8c>)
 80062fe:	480e      	ldr	r0, [pc, #56]	; (8006338 <__multadd+0x90>)
 8006300:	21b5      	movs	r1, #181	; 0xb5
 8006302:	f000 fd13 	bl	8006d2c <__assert_func>
 8006306:	6922      	ldr	r2, [r4, #16]
 8006308:	3202      	adds	r2, #2
 800630a:	f104 010c 	add.w	r1, r4, #12
 800630e:	0092      	lsls	r2, r2, #2
 8006310:	300c      	adds	r0, #12
 8006312:	f7ff ff59 	bl	80061c8 <memcpy>
 8006316:	4621      	mov	r1, r4
 8006318:	4638      	mov	r0, r7
 800631a:	f7ff ffa3 	bl	8006264 <_Bfree>
 800631e:	462c      	mov	r4, r5
 8006320:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006324:	3601      	adds	r6, #1
 8006326:	f8c3 8014 	str.w	r8, [r3, #20]
 800632a:	6126      	str	r6, [r4, #16]
 800632c:	4620      	mov	r0, r4
 800632e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006332:	bf00      	nop
 8006334:	08007aef 	.word	0x08007aef
 8006338:	08007b00 	.word	0x08007b00

0800633c <__hi0bits>:
 800633c:	0c03      	lsrs	r3, r0, #16
 800633e:	041b      	lsls	r3, r3, #16
 8006340:	b9d3      	cbnz	r3, 8006378 <__hi0bits+0x3c>
 8006342:	0400      	lsls	r0, r0, #16
 8006344:	2310      	movs	r3, #16
 8006346:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800634a:	bf04      	itt	eq
 800634c:	0200      	lsleq	r0, r0, #8
 800634e:	3308      	addeq	r3, #8
 8006350:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006354:	bf04      	itt	eq
 8006356:	0100      	lsleq	r0, r0, #4
 8006358:	3304      	addeq	r3, #4
 800635a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800635e:	bf04      	itt	eq
 8006360:	0080      	lsleq	r0, r0, #2
 8006362:	3302      	addeq	r3, #2
 8006364:	2800      	cmp	r0, #0
 8006366:	db05      	blt.n	8006374 <__hi0bits+0x38>
 8006368:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800636c:	f103 0301 	add.w	r3, r3, #1
 8006370:	bf08      	it	eq
 8006372:	2320      	moveq	r3, #32
 8006374:	4618      	mov	r0, r3
 8006376:	4770      	bx	lr
 8006378:	2300      	movs	r3, #0
 800637a:	e7e4      	b.n	8006346 <__hi0bits+0xa>

0800637c <__lo0bits>:
 800637c:	6803      	ldr	r3, [r0, #0]
 800637e:	f013 0207 	ands.w	r2, r3, #7
 8006382:	4601      	mov	r1, r0
 8006384:	d00b      	beq.n	800639e <__lo0bits+0x22>
 8006386:	07da      	lsls	r2, r3, #31
 8006388:	d424      	bmi.n	80063d4 <__lo0bits+0x58>
 800638a:	0798      	lsls	r0, r3, #30
 800638c:	bf49      	itett	mi
 800638e:	085b      	lsrmi	r3, r3, #1
 8006390:	089b      	lsrpl	r3, r3, #2
 8006392:	2001      	movmi	r0, #1
 8006394:	600b      	strmi	r3, [r1, #0]
 8006396:	bf5c      	itt	pl
 8006398:	600b      	strpl	r3, [r1, #0]
 800639a:	2002      	movpl	r0, #2
 800639c:	4770      	bx	lr
 800639e:	b298      	uxth	r0, r3
 80063a0:	b9b0      	cbnz	r0, 80063d0 <__lo0bits+0x54>
 80063a2:	0c1b      	lsrs	r3, r3, #16
 80063a4:	2010      	movs	r0, #16
 80063a6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80063aa:	bf04      	itt	eq
 80063ac:	0a1b      	lsreq	r3, r3, #8
 80063ae:	3008      	addeq	r0, #8
 80063b0:	071a      	lsls	r2, r3, #28
 80063b2:	bf04      	itt	eq
 80063b4:	091b      	lsreq	r3, r3, #4
 80063b6:	3004      	addeq	r0, #4
 80063b8:	079a      	lsls	r2, r3, #30
 80063ba:	bf04      	itt	eq
 80063bc:	089b      	lsreq	r3, r3, #2
 80063be:	3002      	addeq	r0, #2
 80063c0:	07da      	lsls	r2, r3, #31
 80063c2:	d403      	bmi.n	80063cc <__lo0bits+0x50>
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	f100 0001 	add.w	r0, r0, #1
 80063ca:	d005      	beq.n	80063d8 <__lo0bits+0x5c>
 80063cc:	600b      	str	r3, [r1, #0]
 80063ce:	4770      	bx	lr
 80063d0:	4610      	mov	r0, r2
 80063d2:	e7e8      	b.n	80063a6 <__lo0bits+0x2a>
 80063d4:	2000      	movs	r0, #0
 80063d6:	4770      	bx	lr
 80063d8:	2020      	movs	r0, #32
 80063da:	4770      	bx	lr

080063dc <__i2b>:
 80063dc:	b510      	push	{r4, lr}
 80063de:	460c      	mov	r4, r1
 80063e0:	2101      	movs	r1, #1
 80063e2:	f7ff feff 	bl	80061e4 <_Balloc>
 80063e6:	4602      	mov	r2, r0
 80063e8:	b928      	cbnz	r0, 80063f6 <__i2b+0x1a>
 80063ea:	4b05      	ldr	r3, [pc, #20]	; (8006400 <__i2b+0x24>)
 80063ec:	4805      	ldr	r0, [pc, #20]	; (8006404 <__i2b+0x28>)
 80063ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80063f2:	f000 fc9b 	bl	8006d2c <__assert_func>
 80063f6:	2301      	movs	r3, #1
 80063f8:	6144      	str	r4, [r0, #20]
 80063fa:	6103      	str	r3, [r0, #16]
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	bf00      	nop
 8006400:	08007aef 	.word	0x08007aef
 8006404:	08007b00 	.word	0x08007b00

08006408 <__multiply>:
 8006408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640c:	4614      	mov	r4, r2
 800640e:	690a      	ldr	r2, [r1, #16]
 8006410:	6923      	ldr	r3, [r4, #16]
 8006412:	429a      	cmp	r2, r3
 8006414:	bfb8      	it	lt
 8006416:	460b      	movlt	r3, r1
 8006418:	460d      	mov	r5, r1
 800641a:	bfbc      	itt	lt
 800641c:	4625      	movlt	r5, r4
 800641e:	461c      	movlt	r4, r3
 8006420:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006424:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006428:	68ab      	ldr	r3, [r5, #8]
 800642a:	6869      	ldr	r1, [r5, #4]
 800642c:	eb0a 0709 	add.w	r7, sl, r9
 8006430:	42bb      	cmp	r3, r7
 8006432:	b085      	sub	sp, #20
 8006434:	bfb8      	it	lt
 8006436:	3101      	addlt	r1, #1
 8006438:	f7ff fed4 	bl	80061e4 <_Balloc>
 800643c:	b930      	cbnz	r0, 800644c <__multiply+0x44>
 800643e:	4602      	mov	r2, r0
 8006440:	4b42      	ldr	r3, [pc, #264]	; (800654c <__multiply+0x144>)
 8006442:	4843      	ldr	r0, [pc, #268]	; (8006550 <__multiply+0x148>)
 8006444:	f240 115d 	movw	r1, #349	; 0x15d
 8006448:	f000 fc70 	bl	8006d2c <__assert_func>
 800644c:	f100 0614 	add.w	r6, r0, #20
 8006450:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006454:	4633      	mov	r3, r6
 8006456:	2200      	movs	r2, #0
 8006458:	4543      	cmp	r3, r8
 800645a:	d31e      	bcc.n	800649a <__multiply+0x92>
 800645c:	f105 0c14 	add.w	ip, r5, #20
 8006460:	f104 0314 	add.w	r3, r4, #20
 8006464:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006468:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800646c:	9202      	str	r2, [sp, #8]
 800646e:	ebac 0205 	sub.w	r2, ip, r5
 8006472:	3a15      	subs	r2, #21
 8006474:	f022 0203 	bic.w	r2, r2, #3
 8006478:	3204      	adds	r2, #4
 800647a:	f105 0115 	add.w	r1, r5, #21
 800647e:	458c      	cmp	ip, r1
 8006480:	bf38      	it	cc
 8006482:	2204      	movcc	r2, #4
 8006484:	9201      	str	r2, [sp, #4]
 8006486:	9a02      	ldr	r2, [sp, #8]
 8006488:	9303      	str	r3, [sp, #12]
 800648a:	429a      	cmp	r2, r3
 800648c:	d808      	bhi.n	80064a0 <__multiply+0x98>
 800648e:	2f00      	cmp	r7, #0
 8006490:	dc55      	bgt.n	800653e <__multiply+0x136>
 8006492:	6107      	str	r7, [r0, #16]
 8006494:	b005      	add	sp, #20
 8006496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649a:	f843 2b04 	str.w	r2, [r3], #4
 800649e:	e7db      	b.n	8006458 <__multiply+0x50>
 80064a0:	f8b3 a000 	ldrh.w	sl, [r3]
 80064a4:	f1ba 0f00 	cmp.w	sl, #0
 80064a8:	d020      	beq.n	80064ec <__multiply+0xe4>
 80064aa:	f105 0e14 	add.w	lr, r5, #20
 80064ae:	46b1      	mov	r9, r6
 80064b0:	2200      	movs	r2, #0
 80064b2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80064b6:	f8d9 b000 	ldr.w	fp, [r9]
 80064ba:	b2a1      	uxth	r1, r4
 80064bc:	fa1f fb8b 	uxth.w	fp, fp
 80064c0:	fb0a b101 	mla	r1, sl, r1, fp
 80064c4:	4411      	add	r1, r2
 80064c6:	f8d9 2000 	ldr.w	r2, [r9]
 80064ca:	0c24      	lsrs	r4, r4, #16
 80064cc:	0c12      	lsrs	r2, r2, #16
 80064ce:	fb0a 2404 	mla	r4, sl, r4, r2
 80064d2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80064d6:	b289      	uxth	r1, r1
 80064d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80064dc:	45f4      	cmp	ip, lr
 80064de:	f849 1b04 	str.w	r1, [r9], #4
 80064e2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80064e6:	d8e4      	bhi.n	80064b2 <__multiply+0xaa>
 80064e8:	9901      	ldr	r1, [sp, #4]
 80064ea:	5072      	str	r2, [r6, r1]
 80064ec:	9a03      	ldr	r2, [sp, #12]
 80064ee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80064f2:	3304      	adds	r3, #4
 80064f4:	f1b9 0f00 	cmp.w	r9, #0
 80064f8:	d01f      	beq.n	800653a <__multiply+0x132>
 80064fa:	6834      	ldr	r4, [r6, #0]
 80064fc:	f105 0114 	add.w	r1, r5, #20
 8006500:	46b6      	mov	lr, r6
 8006502:	f04f 0a00 	mov.w	sl, #0
 8006506:	880a      	ldrh	r2, [r1, #0]
 8006508:	f8be b002 	ldrh.w	fp, [lr, #2]
 800650c:	fb09 b202 	mla	r2, r9, r2, fp
 8006510:	4492      	add	sl, r2
 8006512:	b2a4      	uxth	r4, r4
 8006514:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006518:	f84e 4b04 	str.w	r4, [lr], #4
 800651c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006520:	f8be 2000 	ldrh.w	r2, [lr]
 8006524:	0c24      	lsrs	r4, r4, #16
 8006526:	fb09 2404 	mla	r4, r9, r4, r2
 800652a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800652e:	458c      	cmp	ip, r1
 8006530:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006534:	d8e7      	bhi.n	8006506 <__multiply+0xfe>
 8006536:	9a01      	ldr	r2, [sp, #4]
 8006538:	50b4      	str	r4, [r6, r2]
 800653a:	3604      	adds	r6, #4
 800653c:	e7a3      	b.n	8006486 <__multiply+0x7e>
 800653e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1a5      	bne.n	8006492 <__multiply+0x8a>
 8006546:	3f01      	subs	r7, #1
 8006548:	e7a1      	b.n	800648e <__multiply+0x86>
 800654a:	bf00      	nop
 800654c:	08007aef 	.word	0x08007aef
 8006550:	08007b00 	.word	0x08007b00

08006554 <__pow5mult>:
 8006554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006558:	4615      	mov	r5, r2
 800655a:	f012 0203 	ands.w	r2, r2, #3
 800655e:	4606      	mov	r6, r0
 8006560:	460f      	mov	r7, r1
 8006562:	d007      	beq.n	8006574 <__pow5mult+0x20>
 8006564:	4c25      	ldr	r4, [pc, #148]	; (80065fc <__pow5mult+0xa8>)
 8006566:	3a01      	subs	r2, #1
 8006568:	2300      	movs	r3, #0
 800656a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800656e:	f7ff fe9b 	bl	80062a8 <__multadd>
 8006572:	4607      	mov	r7, r0
 8006574:	10ad      	asrs	r5, r5, #2
 8006576:	d03d      	beq.n	80065f4 <__pow5mult+0xa0>
 8006578:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800657a:	b97c      	cbnz	r4, 800659c <__pow5mult+0x48>
 800657c:	2010      	movs	r0, #16
 800657e:	f7ff fe1b 	bl	80061b8 <malloc>
 8006582:	4602      	mov	r2, r0
 8006584:	6270      	str	r0, [r6, #36]	; 0x24
 8006586:	b928      	cbnz	r0, 8006594 <__pow5mult+0x40>
 8006588:	4b1d      	ldr	r3, [pc, #116]	; (8006600 <__pow5mult+0xac>)
 800658a:	481e      	ldr	r0, [pc, #120]	; (8006604 <__pow5mult+0xb0>)
 800658c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006590:	f000 fbcc 	bl	8006d2c <__assert_func>
 8006594:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006598:	6004      	str	r4, [r0, #0]
 800659a:	60c4      	str	r4, [r0, #12]
 800659c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80065a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80065a4:	b94c      	cbnz	r4, 80065ba <__pow5mult+0x66>
 80065a6:	f240 2171 	movw	r1, #625	; 0x271
 80065aa:	4630      	mov	r0, r6
 80065ac:	f7ff ff16 	bl	80063dc <__i2b>
 80065b0:	2300      	movs	r3, #0
 80065b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80065b6:	4604      	mov	r4, r0
 80065b8:	6003      	str	r3, [r0, #0]
 80065ba:	f04f 0900 	mov.w	r9, #0
 80065be:	07eb      	lsls	r3, r5, #31
 80065c0:	d50a      	bpl.n	80065d8 <__pow5mult+0x84>
 80065c2:	4639      	mov	r1, r7
 80065c4:	4622      	mov	r2, r4
 80065c6:	4630      	mov	r0, r6
 80065c8:	f7ff ff1e 	bl	8006408 <__multiply>
 80065cc:	4639      	mov	r1, r7
 80065ce:	4680      	mov	r8, r0
 80065d0:	4630      	mov	r0, r6
 80065d2:	f7ff fe47 	bl	8006264 <_Bfree>
 80065d6:	4647      	mov	r7, r8
 80065d8:	106d      	asrs	r5, r5, #1
 80065da:	d00b      	beq.n	80065f4 <__pow5mult+0xa0>
 80065dc:	6820      	ldr	r0, [r4, #0]
 80065de:	b938      	cbnz	r0, 80065f0 <__pow5mult+0x9c>
 80065e0:	4622      	mov	r2, r4
 80065e2:	4621      	mov	r1, r4
 80065e4:	4630      	mov	r0, r6
 80065e6:	f7ff ff0f 	bl	8006408 <__multiply>
 80065ea:	6020      	str	r0, [r4, #0]
 80065ec:	f8c0 9000 	str.w	r9, [r0]
 80065f0:	4604      	mov	r4, r0
 80065f2:	e7e4      	b.n	80065be <__pow5mult+0x6a>
 80065f4:	4638      	mov	r0, r7
 80065f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065fa:	bf00      	nop
 80065fc:	08007c50 	.word	0x08007c50
 8006600:	08007a79 	.word	0x08007a79
 8006604:	08007b00 	.word	0x08007b00

08006608 <__lshift>:
 8006608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800660c:	460c      	mov	r4, r1
 800660e:	6849      	ldr	r1, [r1, #4]
 8006610:	6923      	ldr	r3, [r4, #16]
 8006612:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006616:	68a3      	ldr	r3, [r4, #8]
 8006618:	4607      	mov	r7, r0
 800661a:	4691      	mov	r9, r2
 800661c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006620:	f108 0601 	add.w	r6, r8, #1
 8006624:	42b3      	cmp	r3, r6
 8006626:	db0b      	blt.n	8006640 <__lshift+0x38>
 8006628:	4638      	mov	r0, r7
 800662a:	f7ff fddb 	bl	80061e4 <_Balloc>
 800662e:	4605      	mov	r5, r0
 8006630:	b948      	cbnz	r0, 8006646 <__lshift+0x3e>
 8006632:	4602      	mov	r2, r0
 8006634:	4b28      	ldr	r3, [pc, #160]	; (80066d8 <__lshift+0xd0>)
 8006636:	4829      	ldr	r0, [pc, #164]	; (80066dc <__lshift+0xd4>)
 8006638:	f240 11d9 	movw	r1, #473	; 0x1d9
 800663c:	f000 fb76 	bl	8006d2c <__assert_func>
 8006640:	3101      	adds	r1, #1
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	e7ee      	b.n	8006624 <__lshift+0x1c>
 8006646:	2300      	movs	r3, #0
 8006648:	f100 0114 	add.w	r1, r0, #20
 800664c:	f100 0210 	add.w	r2, r0, #16
 8006650:	4618      	mov	r0, r3
 8006652:	4553      	cmp	r3, sl
 8006654:	db33      	blt.n	80066be <__lshift+0xb6>
 8006656:	6920      	ldr	r0, [r4, #16]
 8006658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800665c:	f104 0314 	add.w	r3, r4, #20
 8006660:	f019 091f 	ands.w	r9, r9, #31
 8006664:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006668:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800666c:	d02b      	beq.n	80066c6 <__lshift+0xbe>
 800666e:	f1c9 0e20 	rsb	lr, r9, #32
 8006672:	468a      	mov	sl, r1
 8006674:	2200      	movs	r2, #0
 8006676:	6818      	ldr	r0, [r3, #0]
 8006678:	fa00 f009 	lsl.w	r0, r0, r9
 800667c:	4302      	orrs	r2, r0
 800667e:	f84a 2b04 	str.w	r2, [sl], #4
 8006682:	f853 2b04 	ldr.w	r2, [r3], #4
 8006686:	459c      	cmp	ip, r3
 8006688:	fa22 f20e 	lsr.w	r2, r2, lr
 800668c:	d8f3      	bhi.n	8006676 <__lshift+0x6e>
 800668e:	ebac 0304 	sub.w	r3, ip, r4
 8006692:	3b15      	subs	r3, #21
 8006694:	f023 0303 	bic.w	r3, r3, #3
 8006698:	3304      	adds	r3, #4
 800669a:	f104 0015 	add.w	r0, r4, #21
 800669e:	4584      	cmp	ip, r0
 80066a0:	bf38      	it	cc
 80066a2:	2304      	movcc	r3, #4
 80066a4:	50ca      	str	r2, [r1, r3]
 80066a6:	b10a      	cbz	r2, 80066ac <__lshift+0xa4>
 80066a8:	f108 0602 	add.w	r6, r8, #2
 80066ac:	3e01      	subs	r6, #1
 80066ae:	4638      	mov	r0, r7
 80066b0:	612e      	str	r6, [r5, #16]
 80066b2:	4621      	mov	r1, r4
 80066b4:	f7ff fdd6 	bl	8006264 <_Bfree>
 80066b8:	4628      	mov	r0, r5
 80066ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066be:	f842 0f04 	str.w	r0, [r2, #4]!
 80066c2:	3301      	adds	r3, #1
 80066c4:	e7c5      	b.n	8006652 <__lshift+0x4a>
 80066c6:	3904      	subs	r1, #4
 80066c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80066cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80066d0:	459c      	cmp	ip, r3
 80066d2:	d8f9      	bhi.n	80066c8 <__lshift+0xc0>
 80066d4:	e7ea      	b.n	80066ac <__lshift+0xa4>
 80066d6:	bf00      	nop
 80066d8:	08007aef 	.word	0x08007aef
 80066dc:	08007b00 	.word	0x08007b00

080066e0 <__mcmp>:
 80066e0:	b530      	push	{r4, r5, lr}
 80066e2:	6902      	ldr	r2, [r0, #16]
 80066e4:	690c      	ldr	r4, [r1, #16]
 80066e6:	1b12      	subs	r2, r2, r4
 80066e8:	d10e      	bne.n	8006708 <__mcmp+0x28>
 80066ea:	f100 0314 	add.w	r3, r0, #20
 80066ee:	3114      	adds	r1, #20
 80066f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80066f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80066f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80066fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006700:	42a5      	cmp	r5, r4
 8006702:	d003      	beq.n	800670c <__mcmp+0x2c>
 8006704:	d305      	bcc.n	8006712 <__mcmp+0x32>
 8006706:	2201      	movs	r2, #1
 8006708:	4610      	mov	r0, r2
 800670a:	bd30      	pop	{r4, r5, pc}
 800670c:	4283      	cmp	r3, r0
 800670e:	d3f3      	bcc.n	80066f8 <__mcmp+0x18>
 8006710:	e7fa      	b.n	8006708 <__mcmp+0x28>
 8006712:	f04f 32ff 	mov.w	r2, #4294967295
 8006716:	e7f7      	b.n	8006708 <__mcmp+0x28>

08006718 <__mdiff>:
 8006718:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	460c      	mov	r4, r1
 800671e:	4606      	mov	r6, r0
 8006720:	4611      	mov	r1, r2
 8006722:	4620      	mov	r0, r4
 8006724:	4617      	mov	r7, r2
 8006726:	f7ff ffdb 	bl	80066e0 <__mcmp>
 800672a:	1e05      	subs	r5, r0, #0
 800672c:	d110      	bne.n	8006750 <__mdiff+0x38>
 800672e:	4629      	mov	r1, r5
 8006730:	4630      	mov	r0, r6
 8006732:	f7ff fd57 	bl	80061e4 <_Balloc>
 8006736:	b930      	cbnz	r0, 8006746 <__mdiff+0x2e>
 8006738:	4b39      	ldr	r3, [pc, #228]	; (8006820 <__mdiff+0x108>)
 800673a:	4602      	mov	r2, r0
 800673c:	f240 2132 	movw	r1, #562	; 0x232
 8006740:	4838      	ldr	r0, [pc, #224]	; (8006824 <__mdiff+0x10c>)
 8006742:	f000 faf3 	bl	8006d2c <__assert_func>
 8006746:	2301      	movs	r3, #1
 8006748:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800674c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006750:	bfa4      	itt	ge
 8006752:	463b      	movge	r3, r7
 8006754:	4627      	movge	r7, r4
 8006756:	4630      	mov	r0, r6
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	bfa6      	itte	ge
 800675c:	461c      	movge	r4, r3
 800675e:	2500      	movge	r5, #0
 8006760:	2501      	movlt	r5, #1
 8006762:	f7ff fd3f 	bl	80061e4 <_Balloc>
 8006766:	b920      	cbnz	r0, 8006772 <__mdiff+0x5a>
 8006768:	4b2d      	ldr	r3, [pc, #180]	; (8006820 <__mdiff+0x108>)
 800676a:	4602      	mov	r2, r0
 800676c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006770:	e7e6      	b.n	8006740 <__mdiff+0x28>
 8006772:	693e      	ldr	r6, [r7, #16]
 8006774:	60c5      	str	r5, [r0, #12]
 8006776:	6925      	ldr	r5, [r4, #16]
 8006778:	f107 0114 	add.w	r1, r7, #20
 800677c:	f104 0914 	add.w	r9, r4, #20
 8006780:	f100 0e14 	add.w	lr, r0, #20
 8006784:	f107 0210 	add.w	r2, r7, #16
 8006788:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800678c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006790:	46f2      	mov	sl, lr
 8006792:	2700      	movs	r7, #0
 8006794:	f859 3b04 	ldr.w	r3, [r9], #4
 8006798:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800679c:	fa1f f883 	uxth.w	r8, r3
 80067a0:	fa17 f78b 	uxtah	r7, r7, fp
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	eba7 0808 	sub.w	r8, r7, r8
 80067aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80067ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80067b2:	fa1f f888 	uxth.w	r8, r8
 80067b6:	141f      	asrs	r7, r3, #16
 80067b8:	454d      	cmp	r5, r9
 80067ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80067be:	f84a 3b04 	str.w	r3, [sl], #4
 80067c2:	d8e7      	bhi.n	8006794 <__mdiff+0x7c>
 80067c4:	1b2b      	subs	r3, r5, r4
 80067c6:	3b15      	subs	r3, #21
 80067c8:	f023 0303 	bic.w	r3, r3, #3
 80067cc:	3304      	adds	r3, #4
 80067ce:	3415      	adds	r4, #21
 80067d0:	42a5      	cmp	r5, r4
 80067d2:	bf38      	it	cc
 80067d4:	2304      	movcc	r3, #4
 80067d6:	4419      	add	r1, r3
 80067d8:	4473      	add	r3, lr
 80067da:	469e      	mov	lr, r3
 80067dc:	460d      	mov	r5, r1
 80067de:	4565      	cmp	r5, ip
 80067e0:	d30e      	bcc.n	8006800 <__mdiff+0xe8>
 80067e2:	f10c 0203 	add.w	r2, ip, #3
 80067e6:	1a52      	subs	r2, r2, r1
 80067e8:	f022 0203 	bic.w	r2, r2, #3
 80067ec:	3903      	subs	r1, #3
 80067ee:	458c      	cmp	ip, r1
 80067f0:	bf38      	it	cc
 80067f2:	2200      	movcc	r2, #0
 80067f4:	441a      	add	r2, r3
 80067f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80067fa:	b17b      	cbz	r3, 800681c <__mdiff+0x104>
 80067fc:	6106      	str	r6, [r0, #16]
 80067fe:	e7a5      	b.n	800674c <__mdiff+0x34>
 8006800:	f855 8b04 	ldr.w	r8, [r5], #4
 8006804:	fa17 f488 	uxtah	r4, r7, r8
 8006808:	1422      	asrs	r2, r4, #16
 800680a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800680e:	b2a4      	uxth	r4, r4
 8006810:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006814:	f84e 4b04 	str.w	r4, [lr], #4
 8006818:	1417      	asrs	r7, r2, #16
 800681a:	e7e0      	b.n	80067de <__mdiff+0xc6>
 800681c:	3e01      	subs	r6, #1
 800681e:	e7ea      	b.n	80067f6 <__mdiff+0xde>
 8006820:	08007aef 	.word	0x08007aef
 8006824:	08007b00 	.word	0x08007b00

08006828 <__d2b>:
 8006828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800682c:	4689      	mov	r9, r1
 800682e:	2101      	movs	r1, #1
 8006830:	ec57 6b10 	vmov	r6, r7, d0
 8006834:	4690      	mov	r8, r2
 8006836:	f7ff fcd5 	bl	80061e4 <_Balloc>
 800683a:	4604      	mov	r4, r0
 800683c:	b930      	cbnz	r0, 800684c <__d2b+0x24>
 800683e:	4602      	mov	r2, r0
 8006840:	4b25      	ldr	r3, [pc, #148]	; (80068d8 <__d2b+0xb0>)
 8006842:	4826      	ldr	r0, [pc, #152]	; (80068dc <__d2b+0xb4>)
 8006844:	f240 310a 	movw	r1, #778	; 0x30a
 8006848:	f000 fa70 	bl	8006d2c <__assert_func>
 800684c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006854:	bb35      	cbnz	r5, 80068a4 <__d2b+0x7c>
 8006856:	2e00      	cmp	r6, #0
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	d028      	beq.n	80068ae <__d2b+0x86>
 800685c:	4668      	mov	r0, sp
 800685e:	9600      	str	r6, [sp, #0]
 8006860:	f7ff fd8c 	bl	800637c <__lo0bits>
 8006864:	9900      	ldr	r1, [sp, #0]
 8006866:	b300      	cbz	r0, 80068aa <__d2b+0x82>
 8006868:	9a01      	ldr	r2, [sp, #4]
 800686a:	f1c0 0320 	rsb	r3, r0, #32
 800686e:	fa02 f303 	lsl.w	r3, r2, r3
 8006872:	430b      	orrs	r3, r1
 8006874:	40c2      	lsrs	r2, r0
 8006876:	6163      	str	r3, [r4, #20]
 8006878:	9201      	str	r2, [sp, #4]
 800687a:	9b01      	ldr	r3, [sp, #4]
 800687c:	61a3      	str	r3, [r4, #24]
 800687e:	2b00      	cmp	r3, #0
 8006880:	bf14      	ite	ne
 8006882:	2202      	movne	r2, #2
 8006884:	2201      	moveq	r2, #1
 8006886:	6122      	str	r2, [r4, #16]
 8006888:	b1d5      	cbz	r5, 80068c0 <__d2b+0x98>
 800688a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800688e:	4405      	add	r5, r0
 8006890:	f8c9 5000 	str.w	r5, [r9]
 8006894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006898:	f8c8 0000 	str.w	r0, [r8]
 800689c:	4620      	mov	r0, r4
 800689e:	b003      	add	sp, #12
 80068a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068a8:	e7d5      	b.n	8006856 <__d2b+0x2e>
 80068aa:	6161      	str	r1, [r4, #20]
 80068ac:	e7e5      	b.n	800687a <__d2b+0x52>
 80068ae:	a801      	add	r0, sp, #4
 80068b0:	f7ff fd64 	bl	800637c <__lo0bits>
 80068b4:	9b01      	ldr	r3, [sp, #4]
 80068b6:	6163      	str	r3, [r4, #20]
 80068b8:	2201      	movs	r2, #1
 80068ba:	6122      	str	r2, [r4, #16]
 80068bc:	3020      	adds	r0, #32
 80068be:	e7e3      	b.n	8006888 <__d2b+0x60>
 80068c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068c8:	f8c9 0000 	str.w	r0, [r9]
 80068cc:	6918      	ldr	r0, [r3, #16]
 80068ce:	f7ff fd35 	bl	800633c <__hi0bits>
 80068d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068d6:	e7df      	b.n	8006898 <__d2b+0x70>
 80068d8:	08007aef 	.word	0x08007aef
 80068dc:	08007b00 	.word	0x08007b00

080068e0 <_calloc_r>:
 80068e0:	b513      	push	{r0, r1, r4, lr}
 80068e2:	434a      	muls	r2, r1
 80068e4:	4611      	mov	r1, r2
 80068e6:	9201      	str	r2, [sp, #4]
 80068e8:	f000 f85a 	bl	80069a0 <_malloc_r>
 80068ec:	4604      	mov	r4, r0
 80068ee:	b118      	cbz	r0, 80068f8 <_calloc_r+0x18>
 80068f0:	9a01      	ldr	r2, [sp, #4]
 80068f2:	2100      	movs	r1, #0
 80068f4:	f7fe f950 	bl	8004b98 <memset>
 80068f8:	4620      	mov	r0, r4
 80068fa:	b002      	add	sp, #8
 80068fc:	bd10      	pop	{r4, pc}
	...

08006900 <_free_r>:
 8006900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006902:	2900      	cmp	r1, #0
 8006904:	d048      	beq.n	8006998 <_free_r+0x98>
 8006906:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800690a:	9001      	str	r0, [sp, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	f1a1 0404 	sub.w	r4, r1, #4
 8006912:	bfb8      	it	lt
 8006914:	18e4      	addlt	r4, r4, r3
 8006916:	f000 fa65 	bl	8006de4 <__malloc_lock>
 800691a:	4a20      	ldr	r2, [pc, #128]	; (800699c <_free_r+0x9c>)
 800691c:	9801      	ldr	r0, [sp, #4]
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	4615      	mov	r5, r2
 8006922:	b933      	cbnz	r3, 8006932 <_free_r+0x32>
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	6014      	str	r4, [r2, #0]
 8006928:	b003      	add	sp, #12
 800692a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800692e:	f000 ba5f 	b.w	8006df0 <__malloc_unlock>
 8006932:	42a3      	cmp	r3, r4
 8006934:	d90b      	bls.n	800694e <_free_r+0x4e>
 8006936:	6821      	ldr	r1, [r4, #0]
 8006938:	1862      	adds	r2, r4, r1
 800693a:	4293      	cmp	r3, r2
 800693c:	bf04      	itt	eq
 800693e:	681a      	ldreq	r2, [r3, #0]
 8006940:	685b      	ldreq	r3, [r3, #4]
 8006942:	6063      	str	r3, [r4, #4]
 8006944:	bf04      	itt	eq
 8006946:	1852      	addeq	r2, r2, r1
 8006948:	6022      	streq	r2, [r4, #0]
 800694a:	602c      	str	r4, [r5, #0]
 800694c:	e7ec      	b.n	8006928 <_free_r+0x28>
 800694e:	461a      	mov	r2, r3
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	b10b      	cbz	r3, 8006958 <_free_r+0x58>
 8006954:	42a3      	cmp	r3, r4
 8006956:	d9fa      	bls.n	800694e <_free_r+0x4e>
 8006958:	6811      	ldr	r1, [r2, #0]
 800695a:	1855      	adds	r5, r2, r1
 800695c:	42a5      	cmp	r5, r4
 800695e:	d10b      	bne.n	8006978 <_free_r+0x78>
 8006960:	6824      	ldr	r4, [r4, #0]
 8006962:	4421      	add	r1, r4
 8006964:	1854      	adds	r4, r2, r1
 8006966:	42a3      	cmp	r3, r4
 8006968:	6011      	str	r1, [r2, #0]
 800696a:	d1dd      	bne.n	8006928 <_free_r+0x28>
 800696c:	681c      	ldr	r4, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	6053      	str	r3, [r2, #4]
 8006972:	4421      	add	r1, r4
 8006974:	6011      	str	r1, [r2, #0]
 8006976:	e7d7      	b.n	8006928 <_free_r+0x28>
 8006978:	d902      	bls.n	8006980 <_free_r+0x80>
 800697a:	230c      	movs	r3, #12
 800697c:	6003      	str	r3, [r0, #0]
 800697e:	e7d3      	b.n	8006928 <_free_r+0x28>
 8006980:	6825      	ldr	r5, [r4, #0]
 8006982:	1961      	adds	r1, r4, r5
 8006984:	428b      	cmp	r3, r1
 8006986:	bf04      	itt	eq
 8006988:	6819      	ldreq	r1, [r3, #0]
 800698a:	685b      	ldreq	r3, [r3, #4]
 800698c:	6063      	str	r3, [r4, #4]
 800698e:	bf04      	itt	eq
 8006990:	1949      	addeq	r1, r1, r5
 8006992:	6021      	streq	r1, [r4, #0]
 8006994:	6054      	str	r4, [r2, #4]
 8006996:	e7c7      	b.n	8006928 <_free_r+0x28>
 8006998:	b003      	add	sp, #12
 800699a:	bd30      	pop	{r4, r5, pc}
 800699c:	20000df8 	.word	0x20000df8

080069a0 <_malloc_r>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	1ccd      	adds	r5, r1, #3
 80069a4:	f025 0503 	bic.w	r5, r5, #3
 80069a8:	3508      	adds	r5, #8
 80069aa:	2d0c      	cmp	r5, #12
 80069ac:	bf38      	it	cc
 80069ae:	250c      	movcc	r5, #12
 80069b0:	2d00      	cmp	r5, #0
 80069b2:	4606      	mov	r6, r0
 80069b4:	db01      	blt.n	80069ba <_malloc_r+0x1a>
 80069b6:	42a9      	cmp	r1, r5
 80069b8:	d903      	bls.n	80069c2 <_malloc_r+0x22>
 80069ba:	230c      	movs	r3, #12
 80069bc:	6033      	str	r3, [r6, #0]
 80069be:	2000      	movs	r0, #0
 80069c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069c2:	f000 fa0f 	bl	8006de4 <__malloc_lock>
 80069c6:	4921      	ldr	r1, [pc, #132]	; (8006a4c <_malloc_r+0xac>)
 80069c8:	680a      	ldr	r2, [r1, #0]
 80069ca:	4614      	mov	r4, r2
 80069cc:	b99c      	cbnz	r4, 80069f6 <_malloc_r+0x56>
 80069ce:	4f20      	ldr	r7, [pc, #128]	; (8006a50 <_malloc_r+0xb0>)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	b923      	cbnz	r3, 80069de <_malloc_r+0x3e>
 80069d4:	4621      	mov	r1, r4
 80069d6:	4630      	mov	r0, r6
 80069d8:	f000 f998 	bl	8006d0c <_sbrk_r>
 80069dc:	6038      	str	r0, [r7, #0]
 80069de:	4629      	mov	r1, r5
 80069e0:	4630      	mov	r0, r6
 80069e2:	f000 f993 	bl	8006d0c <_sbrk_r>
 80069e6:	1c43      	adds	r3, r0, #1
 80069e8:	d123      	bne.n	8006a32 <_malloc_r+0x92>
 80069ea:	230c      	movs	r3, #12
 80069ec:	6033      	str	r3, [r6, #0]
 80069ee:	4630      	mov	r0, r6
 80069f0:	f000 f9fe 	bl	8006df0 <__malloc_unlock>
 80069f4:	e7e3      	b.n	80069be <_malloc_r+0x1e>
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	1b5b      	subs	r3, r3, r5
 80069fa:	d417      	bmi.n	8006a2c <_malloc_r+0x8c>
 80069fc:	2b0b      	cmp	r3, #11
 80069fe:	d903      	bls.n	8006a08 <_malloc_r+0x68>
 8006a00:	6023      	str	r3, [r4, #0]
 8006a02:	441c      	add	r4, r3
 8006a04:	6025      	str	r5, [r4, #0]
 8006a06:	e004      	b.n	8006a12 <_malloc_r+0x72>
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	42a2      	cmp	r2, r4
 8006a0c:	bf0c      	ite	eq
 8006a0e:	600b      	streq	r3, [r1, #0]
 8006a10:	6053      	strne	r3, [r2, #4]
 8006a12:	4630      	mov	r0, r6
 8006a14:	f000 f9ec 	bl	8006df0 <__malloc_unlock>
 8006a18:	f104 000b 	add.w	r0, r4, #11
 8006a1c:	1d23      	adds	r3, r4, #4
 8006a1e:	f020 0007 	bic.w	r0, r0, #7
 8006a22:	1ac2      	subs	r2, r0, r3
 8006a24:	d0cc      	beq.n	80069c0 <_malloc_r+0x20>
 8006a26:	1a1b      	subs	r3, r3, r0
 8006a28:	50a3      	str	r3, [r4, r2]
 8006a2a:	e7c9      	b.n	80069c0 <_malloc_r+0x20>
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	6864      	ldr	r4, [r4, #4]
 8006a30:	e7cc      	b.n	80069cc <_malloc_r+0x2c>
 8006a32:	1cc4      	adds	r4, r0, #3
 8006a34:	f024 0403 	bic.w	r4, r4, #3
 8006a38:	42a0      	cmp	r0, r4
 8006a3a:	d0e3      	beq.n	8006a04 <_malloc_r+0x64>
 8006a3c:	1a21      	subs	r1, r4, r0
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f000 f964 	bl	8006d0c <_sbrk_r>
 8006a44:	3001      	adds	r0, #1
 8006a46:	d1dd      	bne.n	8006a04 <_malloc_r+0x64>
 8006a48:	e7cf      	b.n	80069ea <_malloc_r+0x4a>
 8006a4a:	bf00      	nop
 8006a4c:	20000df8 	.word	0x20000df8
 8006a50:	20000dfc 	.word	0x20000dfc

08006a54 <__ssputs_r>:
 8006a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a58:	688e      	ldr	r6, [r1, #8]
 8006a5a:	429e      	cmp	r6, r3
 8006a5c:	4682      	mov	sl, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	4690      	mov	r8, r2
 8006a62:	461f      	mov	r7, r3
 8006a64:	d838      	bhi.n	8006ad8 <__ssputs_r+0x84>
 8006a66:	898a      	ldrh	r2, [r1, #12]
 8006a68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a6c:	d032      	beq.n	8006ad4 <__ssputs_r+0x80>
 8006a6e:	6825      	ldr	r5, [r4, #0]
 8006a70:	6909      	ldr	r1, [r1, #16]
 8006a72:	eba5 0901 	sub.w	r9, r5, r1
 8006a76:	6965      	ldr	r5, [r4, #20]
 8006a78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a80:	3301      	adds	r3, #1
 8006a82:	444b      	add	r3, r9
 8006a84:	106d      	asrs	r5, r5, #1
 8006a86:	429d      	cmp	r5, r3
 8006a88:	bf38      	it	cc
 8006a8a:	461d      	movcc	r5, r3
 8006a8c:	0553      	lsls	r3, r2, #21
 8006a8e:	d531      	bpl.n	8006af4 <__ssputs_r+0xa0>
 8006a90:	4629      	mov	r1, r5
 8006a92:	f7ff ff85 	bl	80069a0 <_malloc_r>
 8006a96:	4606      	mov	r6, r0
 8006a98:	b950      	cbnz	r0, 8006ab0 <__ssputs_r+0x5c>
 8006a9a:	230c      	movs	r3, #12
 8006a9c:	f8ca 3000 	str.w	r3, [sl]
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa6:	81a3      	strh	r3, [r4, #12]
 8006aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab0:	6921      	ldr	r1, [r4, #16]
 8006ab2:	464a      	mov	r2, r9
 8006ab4:	f7ff fb88 	bl	80061c8 <memcpy>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006abe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	6126      	str	r6, [r4, #16]
 8006ac6:	6165      	str	r5, [r4, #20]
 8006ac8:	444e      	add	r6, r9
 8006aca:	eba5 0509 	sub.w	r5, r5, r9
 8006ace:	6026      	str	r6, [r4, #0]
 8006ad0:	60a5      	str	r5, [r4, #8]
 8006ad2:	463e      	mov	r6, r7
 8006ad4:	42be      	cmp	r6, r7
 8006ad6:	d900      	bls.n	8006ada <__ssputs_r+0x86>
 8006ad8:	463e      	mov	r6, r7
 8006ada:	4632      	mov	r2, r6
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	4641      	mov	r1, r8
 8006ae0:	f000 f966 	bl	8006db0 <memmove>
 8006ae4:	68a3      	ldr	r3, [r4, #8]
 8006ae6:	6822      	ldr	r2, [r4, #0]
 8006ae8:	1b9b      	subs	r3, r3, r6
 8006aea:	4432      	add	r2, r6
 8006aec:	60a3      	str	r3, [r4, #8]
 8006aee:	6022      	str	r2, [r4, #0]
 8006af0:	2000      	movs	r0, #0
 8006af2:	e7db      	b.n	8006aac <__ssputs_r+0x58>
 8006af4:	462a      	mov	r2, r5
 8006af6:	f000 f981 	bl	8006dfc <_realloc_r>
 8006afa:	4606      	mov	r6, r0
 8006afc:	2800      	cmp	r0, #0
 8006afe:	d1e1      	bne.n	8006ac4 <__ssputs_r+0x70>
 8006b00:	6921      	ldr	r1, [r4, #16]
 8006b02:	4650      	mov	r0, sl
 8006b04:	f7ff fefc 	bl	8006900 <_free_r>
 8006b08:	e7c7      	b.n	8006a9a <__ssputs_r+0x46>
	...

08006b0c <_svfiprintf_r>:
 8006b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b10:	4698      	mov	r8, r3
 8006b12:	898b      	ldrh	r3, [r1, #12]
 8006b14:	061b      	lsls	r3, r3, #24
 8006b16:	b09d      	sub	sp, #116	; 0x74
 8006b18:	4607      	mov	r7, r0
 8006b1a:	460d      	mov	r5, r1
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	d50e      	bpl.n	8006b3e <_svfiprintf_r+0x32>
 8006b20:	690b      	ldr	r3, [r1, #16]
 8006b22:	b963      	cbnz	r3, 8006b3e <_svfiprintf_r+0x32>
 8006b24:	2140      	movs	r1, #64	; 0x40
 8006b26:	f7ff ff3b 	bl	80069a0 <_malloc_r>
 8006b2a:	6028      	str	r0, [r5, #0]
 8006b2c:	6128      	str	r0, [r5, #16]
 8006b2e:	b920      	cbnz	r0, 8006b3a <_svfiprintf_r+0x2e>
 8006b30:	230c      	movs	r3, #12
 8006b32:	603b      	str	r3, [r7, #0]
 8006b34:	f04f 30ff 	mov.w	r0, #4294967295
 8006b38:	e0d1      	b.n	8006cde <_svfiprintf_r+0x1d2>
 8006b3a:	2340      	movs	r3, #64	; 0x40
 8006b3c:	616b      	str	r3, [r5, #20]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	9309      	str	r3, [sp, #36]	; 0x24
 8006b42:	2320      	movs	r3, #32
 8006b44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b48:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b4c:	2330      	movs	r3, #48	; 0x30
 8006b4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006cf8 <_svfiprintf_r+0x1ec>
 8006b52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b56:	f04f 0901 	mov.w	r9, #1
 8006b5a:	4623      	mov	r3, r4
 8006b5c:	469a      	mov	sl, r3
 8006b5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b62:	b10a      	cbz	r2, 8006b68 <_svfiprintf_r+0x5c>
 8006b64:	2a25      	cmp	r2, #37	; 0x25
 8006b66:	d1f9      	bne.n	8006b5c <_svfiprintf_r+0x50>
 8006b68:	ebba 0b04 	subs.w	fp, sl, r4
 8006b6c:	d00b      	beq.n	8006b86 <_svfiprintf_r+0x7a>
 8006b6e:	465b      	mov	r3, fp
 8006b70:	4622      	mov	r2, r4
 8006b72:	4629      	mov	r1, r5
 8006b74:	4638      	mov	r0, r7
 8006b76:	f7ff ff6d 	bl	8006a54 <__ssputs_r>
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	f000 80aa 	beq.w	8006cd4 <_svfiprintf_r+0x1c8>
 8006b80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b82:	445a      	add	r2, fp
 8006b84:	9209      	str	r2, [sp, #36]	; 0x24
 8006b86:	f89a 3000 	ldrb.w	r3, [sl]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 80a2 	beq.w	8006cd4 <_svfiprintf_r+0x1c8>
 8006b90:	2300      	movs	r3, #0
 8006b92:	f04f 32ff 	mov.w	r2, #4294967295
 8006b96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b9a:	f10a 0a01 	add.w	sl, sl, #1
 8006b9e:	9304      	str	r3, [sp, #16]
 8006ba0:	9307      	str	r3, [sp, #28]
 8006ba2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ba6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ba8:	4654      	mov	r4, sl
 8006baa:	2205      	movs	r2, #5
 8006bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb0:	4851      	ldr	r0, [pc, #324]	; (8006cf8 <_svfiprintf_r+0x1ec>)
 8006bb2:	f7f9 fb15 	bl	80001e0 <memchr>
 8006bb6:	9a04      	ldr	r2, [sp, #16]
 8006bb8:	b9d8      	cbnz	r0, 8006bf2 <_svfiprintf_r+0xe6>
 8006bba:	06d0      	lsls	r0, r2, #27
 8006bbc:	bf44      	itt	mi
 8006bbe:	2320      	movmi	r3, #32
 8006bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bc4:	0711      	lsls	r1, r2, #28
 8006bc6:	bf44      	itt	mi
 8006bc8:	232b      	movmi	r3, #43	; 0x2b
 8006bca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006bce:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd4:	d015      	beq.n	8006c02 <_svfiprintf_r+0xf6>
 8006bd6:	9a07      	ldr	r2, [sp, #28]
 8006bd8:	4654      	mov	r4, sl
 8006bda:	2000      	movs	r0, #0
 8006bdc:	f04f 0c0a 	mov.w	ip, #10
 8006be0:	4621      	mov	r1, r4
 8006be2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006be6:	3b30      	subs	r3, #48	; 0x30
 8006be8:	2b09      	cmp	r3, #9
 8006bea:	d94e      	bls.n	8006c8a <_svfiprintf_r+0x17e>
 8006bec:	b1b0      	cbz	r0, 8006c1c <_svfiprintf_r+0x110>
 8006bee:	9207      	str	r2, [sp, #28]
 8006bf0:	e014      	b.n	8006c1c <_svfiprintf_r+0x110>
 8006bf2:	eba0 0308 	sub.w	r3, r0, r8
 8006bf6:	fa09 f303 	lsl.w	r3, r9, r3
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	9304      	str	r3, [sp, #16]
 8006bfe:	46a2      	mov	sl, r4
 8006c00:	e7d2      	b.n	8006ba8 <_svfiprintf_r+0x9c>
 8006c02:	9b03      	ldr	r3, [sp, #12]
 8006c04:	1d19      	adds	r1, r3, #4
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	9103      	str	r1, [sp, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	bfbb      	ittet	lt
 8006c0e:	425b      	neglt	r3, r3
 8006c10:	f042 0202 	orrlt.w	r2, r2, #2
 8006c14:	9307      	strge	r3, [sp, #28]
 8006c16:	9307      	strlt	r3, [sp, #28]
 8006c18:	bfb8      	it	lt
 8006c1a:	9204      	strlt	r2, [sp, #16]
 8006c1c:	7823      	ldrb	r3, [r4, #0]
 8006c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c20:	d10c      	bne.n	8006c3c <_svfiprintf_r+0x130>
 8006c22:	7863      	ldrb	r3, [r4, #1]
 8006c24:	2b2a      	cmp	r3, #42	; 0x2a
 8006c26:	d135      	bne.n	8006c94 <_svfiprintf_r+0x188>
 8006c28:	9b03      	ldr	r3, [sp, #12]
 8006c2a:	1d1a      	adds	r2, r3, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	9203      	str	r2, [sp, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	bfb8      	it	lt
 8006c34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c38:	3402      	adds	r4, #2
 8006c3a:	9305      	str	r3, [sp, #20]
 8006c3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d08 <_svfiprintf_r+0x1fc>
 8006c40:	7821      	ldrb	r1, [r4, #0]
 8006c42:	2203      	movs	r2, #3
 8006c44:	4650      	mov	r0, sl
 8006c46:	f7f9 facb 	bl	80001e0 <memchr>
 8006c4a:	b140      	cbz	r0, 8006c5e <_svfiprintf_r+0x152>
 8006c4c:	2340      	movs	r3, #64	; 0x40
 8006c4e:	eba0 000a 	sub.w	r0, r0, sl
 8006c52:	fa03 f000 	lsl.w	r0, r3, r0
 8006c56:	9b04      	ldr	r3, [sp, #16]
 8006c58:	4303      	orrs	r3, r0
 8006c5a:	3401      	adds	r4, #1
 8006c5c:	9304      	str	r3, [sp, #16]
 8006c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c62:	4826      	ldr	r0, [pc, #152]	; (8006cfc <_svfiprintf_r+0x1f0>)
 8006c64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c68:	2206      	movs	r2, #6
 8006c6a:	f7f9 fab9 	bl	80001e0 <memchr>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d038      	beq.n	8006ce4 <_svfiprintf_r+0x1d8>
 8006c72:	4b23      	ldr	r3, [pc, #140]	; (8006d00 <_svfiprintf_r+0x1f4>)
 8006c74:	bb1b      	cbnz	r3, 8006cbe <_svfiprintf_r+0x1b2>
 8006c76:	9b03      	ldr	r3, [sp, #12]
 8006c78:	3307      	adds	r3, #7
 8006c7a:	f023 0307 	bic.w	r3, r3, #7
 8006c7e:	3308      	adds	r3, #8
 8006c80:	9303      	str	r3, [sp, #12]
 8006c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c84:	4433      	add	r3, r6
 8006c86:	9309      	str	r3, [sp, #36]	; 0x24
 8006c88:	e767      	b.n	8006b5a <_svfiprintf_r+0x4e>
 8006c8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c8e:	460c      	mov	r4, r1
 8006c90:	2001      	movs	r0, #1
 8006c92:	e7a5      	b.n	8006be0 <_svfiprintf_r+0xd4>
 8006c94:	2300      	movs	r3, #0
 8006c96:	3401      	adds	r4, #1
 8006c98:	9305      	str	r3, [sp, #20]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	f04f 0c0a 	mov.w	ip, #10
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ca6:	3a30      	subs	r2, #48	; 0x30
 8006ca8:	2a09      	cmp	r2, #9
 8006caa:	d903      	bls.n	8006cb4 <_svfiprintf_r+0x1a8>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0c5      	beq.n	8006c3c <_svfiprintf_r+0x130>
 8006cb0:	9105      	str	r1, [sp, #20]
 8006cb2:	e7c3      	b.n	8006c3c <_svfiprintf_r+0x130>
 8006cb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cb8:	4604      	mov	r4, r0
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e7f0      	b.n	8006ca0 <_svfiprintf_r+0x194>
 8006cbe:	ab03      	add	r3, sp, #12
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	462a      	mov	r2, r5
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	; (8006d04 <_svfiprintf_r+0x1f8>)
 8006cc6:	a904      	add	r1, sp, #16
 8006cc8:	4638      	mov	r0, r7
 8006cca:	f7fe f80d 	bl	8004ce8 <_printf_float>
 8006cce:	1c42      	adds	r2, r0, #1
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	d1d6      	bne.n	8006c82 <_svfiprintf_r+0x176>
 8006cd4:	89ab      	ldrh	r3, [r5, #12]
 8006cd6:	065b      	lsls	r3, r3, #25
 8006cd8:	f53f af2c 	bmi.w	8006b34 <_svfiprintf_r+0x28>
 8006cdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cde:	b01d      	add	sp, #116	; 0x74
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce4:	ab03      	add	r3, sp, #12
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	462a      	mov	r2, r5
 8006cea:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <_svfiprintf_r+0x1f8>)
 8006cec:	a904      	add	r1, sp, #16
 8006cee:	4638      	mov	r0, r7
 8006cf0:	f7fe fa9e 	bl	8005230 <_printf_i>
 8006cf4:	e7eb      	b.n	8006cce <_svfiprintf_r+0x1c2>
 8006cf6:	bf00      	nop
 8006cf8:	08007c5c 	.word	0x08007c5c
 8006cfc:	08007c66 	.word	0x08007c66
 8006d00:	08004ce9 	.word	0x08004ce9
 8006d04:	08006a55 	.word	0x08006a55
 8006d08:	08007c62 	.word	0x08007c62

08006d0c <_sbrk_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d06      	ldr	r5, [pc, #24]	; (8006d28 <_sbrk_r+0x1c>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	f7fa fec4 	bl	8001aa4 <_sbrk>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_sbrk_r+0x1a>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_sbrk_r+0x1a>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	20000f0c 	.word	0x20000f0c

08006d2c <__assert_func>:
 8006d2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d2e:	4614      	mov	r4, r2
 8006d30:	461a      	mov	r2, r3
 8006d32:	4b09      	ldr	r3, [pc, #36]	; (8006d58 <__assert_func+0x2c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4605      	mov	r5, r0
 8006d38:	68d8      	ldr	r0, [r3, #12]
 8006d3a:	b14c      	cbz	r4, 8006d50 <__assert_func+0x24>
 8006d3c:	4b07      	ldr	r3, [pc, #28]	; (8006d5c <__assert_func+0x30>)
 8006d3e:	9100      	str	r1, [sp, #0]
 8006d40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d44:	4906      	ldr	r1, [pc, #24]	; (8006d60 <__assert_func+0x34>)
 8006d46:	462b      	mov	r3, r5
 8006d48:	f000 f80e 	bl	8006d68 <fiprintf>
 8006d4c:	f000 faa4 	bl	8007298 <abort>
 8006d50:	4b04      	ldr	r3, [pc, #16]	; (8006d64 <__assert_func+0x38>)
 8006d52:	461c      	mov	r4, r3
 8006d54:	e7f3      	b.n	8006d3e <__assert_func+0x12>
 8006d56:	bf00      	nop
 8006d58:	2000003c 	.word	0x2000003c
 8006d5c:	08007c6d 	.word	0x08007c6d
 8006d60:	08007c7a 	.word	0x08007c7a
 8006d64:	08007ca8 	.word	0x08007ca8

08006d68 <fiprintf>:
 8006d68:	b40e      	push	{r1, r2, r3}
 8006d6a:	b503      	push	{r0, r1, lr}
 8006d6c:	4601      	mov	r1, r0
 8006d6e:	ab03      	add	r3, sp, #12
 8006d70:	4805      	ldr	r0, [pc, #20]	; (8006d88 <fiprintf+0x20>)
 8006d72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d76:	6800      	ldr	r0, [r0, #0]
 8006d78:	9301      	str	r3, [sp, #4]
 8006d7a:	f000 f88f 	bl	8006e9c <_vfiprintf_r>
 8006d7e:	b002      	add	sp, #8
 8006d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d84:	b003      	add	sp, #12
 8006d86:	4770      	bx	lr
 8006d88:	2000003c 	.word	0x2000003c

08006d8c <__ascii_mbtowc>:
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	b901      	cbnz	r1, 8006d92 <__ascii_mbtowc+0x6>
 8006d90:	a901      	add	r1, sp, #4
 8006d92:	b142      	cbz	r2, 8006da6 <__ascii_mbtowc+0x1a>
 8006d94:	b14b      	cbz	r3, 8006daa <__ascii_mbtowc+0x1e>
 8006d96:	7813      	ldrb	r3, [r2, #0]
 8006d98:	600b      	str	r3, [r1, #0]
 8006d9a:	7812      	ldrb	r2, [r2, #0]
 8006d9c:	1e10      	subs	r0, r2, #0
 8006d9e:	bf18      	it	ne
 8006da0:	2001      	movne	r0, #1
 8006da2:	b002      	add	sp, #8
 8006da4:	4770      	bx	lr
 8006da6:	4610      	mov	r0, r2
 8006da8:	e7fb      	b.n	8006da2 <__ascii_mbtowc+0x16>
 8006daa:	f06f 0001 	mvn.w	r0, #1
 8006dae:	e7f8      	b.n	8006da2 <__ascii_mbtowc+0x16>

08006db0 <memmove>:
 8006db0:	4288      	cmp	r0, r1
 8006db2:	b510      	push	{r4, lr}
 8006db4:	eb01 0402 	add.w	r4, r1, r2
 8006db8:	d902      	bls.n	8006dc0 <memmove+0x10>
 8006dba:	4284      	cmp	r4, r0
 8006dbc:	4623      	mov	r3, r4
 8006dbe:	d807      	bhi.n	8006dd0 <memmove+0x20>
 8006dc0:	1e43      	subs	r3, r0, #1
 8006dc2:	42a1      	cmp	r1, r4
 8006dc4:	d008      	beq.n	8006dd8 <memmove+0x28>
 8006dc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dce:	e7f8      	b.n	8006dc2 <memmove+0x12>
 8006dd0:	4402      	add	r2, r0
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	428a      	cmp	r2, r1
 8006dd6:	d100      	bne.n	8006dda <memmove+0x2a>
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006de2:	e7f7      	b.n	8006dd4 <memmove+0x24>

08006de4 <__malloc_lock>:
 8006de4:	4801      	ldr	r0, [pc, #4]	; (8006dec <__malloc_lock+0x8>)
 8006de6:	f000 bc17 	b.w	8007618 <__retarget_lock_acquire_recursive>
 8006dea:	bf00      	nop
 8006dec:	20000f14 	.word	0x20000f14

08006df0 <__malloc_unlock>:
 8006df0:	4801      	ldr	r0, [pc, #4]	; (8006df8 <__malloc_unlock+0x8>)
 8006df2:	f000 bc12 	b.w	800761a <__retarget_lock_release_recursive>
 8006df6:	bf00      	nop
 8006df8:	20000f14 	.word	0x20000f14

08006dfc <_realloc_r>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	4607      	mov	r7, r0
 8006e00:	4614      	mov	r4, r2
 8006e02:	460e      	mov	r6, r1
 8006e04:	b921      	cbnz	r1, 8006e10 <_realloc_r+0x14>
 8006e06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	f7ff bdc8 	b.w	80069a0 <_malloc_r>
 8006e10:	b922      	cbnz	r2, 8006e1c <_realloc_r+0x20>
 8006e12:	f7ff fd75 	bl	8006900 <_free_r>
 8006e16:	4625      	mov	r5, r4
 8006e18:	4628      	mov	r0, r5
 8006e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e1c:	f000 fc62 	bl	80076e4 <_malloc_usable_size_r>
 8006e20:	42a0      	cmp	r0, r4
 8006e22:	d20f      	bcs.n	8006e44 <_realloc_r+0x48>
 8006e24:	4621      	mov	r1, r4
 8006e26:	4638      	mov	r0, r7
 8006e28:	f7ff fdba 	bl	80069a0 <_malloc_r>
 8006e2c:	4605      	mov	r5, r0
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d0f2      	beq.n	8006e18 <_realloc_r+0x1c>
 8006e32:	4631      	mov	r1, r6
 8006e34:	4622      	mov	r2, r4
 8006e36:	f7ff f9c7 	bl	80061c8 <memcpy>
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	f7ff fd5f 	bl	8006900 <_free_r>
 8006e42:	e7e9      	b.n	8006e18 <_realloc_r+0x1c>
 8006e44:	4635      	mov	r5, r6
 8006e46:	e7e7      	b.n	8006e18 <_realloc_r+0x1c>

08006e48 <__sfputc_r>:
 8006e48:	6893      	ldr	r3, [r2, #8]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	b410      	push	{r4}
 8006e50:	6093      	str	r3, [r2, #8]
 8006e52:	da08      	bge.n	8006e66 <__sfputc_r+0x1e>
 8006e54:	6994      	ldr	r4, [r2, #24]
 8006e56:	42a3      	cmp	r3, r4
 8006e58:	db01      	blt.n	8006e5e <__sfputc_r+0x16>
 8006e5a:	290a      	cmp	r1, #10
 8006e5c:	d103      	bne.n	8006e66 <__sfputc_r+0x1e>
 8006e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e62:	f000 b94b 	b.w	80070fc <__swbuf_r>
 8006e66:	6813      	ldr	r3, [r2, #0]
 8006e68:	1c58      	adds	r0, r3, #1
 8006e6a:	6010      	str	r0, [r2, #0]
 8006e6c:	7019      	strb	r1, [r3, #0]
 8006e6e:	4608      	mov	r0, r1
 8006e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <__sfputs_r>:
 8006e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e78:	4606      	mov	r6, r0
 8006e7a:	460f      	mov	r7, r1
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	18d5      	adds	r5, r2, r3
 8006e80:	42ac      	cmp	r4, r5
 8006e82:	d101      	bne.n	8006e88 <__sfputs_r+0x12>
 8006e84:	2000      	movs	r0, #0
 8006e86:	e007      	b.n	8006e98 <__sfputs_r+0x22>
 8006e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e8c:	463a      	mov	r2, r7
 8006e8e:	4630      	mov	r0, r6
 8006e90:	f7ff ffda 	bl	8006e48 <__sfputc_r>
 8006e94:	1c43      	adds	r3, r0, #1
 8006e96:	d1f3      	bne.n	8006e80 <__sfputs_r+0xa>
 8006e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e9c <_vfiprintf_r>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	460d      	mov	r5, r1
 8006ea2:	b09d      	sub	sp, #116	; 0x74
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	4698      	mov	r8, r3
 8006ea8:	4606      	mov	r6, r0
 8006eaa:	b118      	cbz	r0, 8006eb4 <_vfiprintf_r+0x18>
 8006eac:	6983      	ldr	r3, [r0, #24]
 8006eae:	b90b      	cbnz	r3, 8006eb4 <_vfiprintf_r+0x18>
 8006eb0:	f000 fb14 	bl	80074dc <__sinit>
 8006eb4:	4b89      	ldr	r3, [pc, #548]	; (80070dc <_vfiprintf_r+0x240>)
 8006eb6:	429d      	cmp	r5, r3
 8006eb8:	d11b      	bne.n	8006ef2 <_vfiprintf_r+0x56>
 8006eba:	6875      	ldr	r5, [r6, #4]
 8006ebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ebe:	07d9      	lsls	r1, r3, #31
 8006ec0:	d405      	bmi.n	8006ece <_vfiprintf_r+0x32>
 8006ec2:	89ab      	ldrh	r3, [r5, #12]
 8006ec4:	059a      	lsls	r2, r3, #22
 8006ec6:	d402      	bmi.n	8006ece <_vfiprintf_r+0x32>
 8006ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006eca:	f000 fba5 	bl	8007618 <__retarget_lock_acquire_recursive>
 8006ece:	89ab      	ldrh	r3, [r5, #12]
 8006ed0:	071b      	lsls	r3, r3, #28
 8006ed2:	d501      	bpl.n	8006ed8 <_vfiprintf_r+0x3c>
 8006ed4:	692b      	ldr	r3, [r5, #16]
 8006ed6:	b9eb      	cbnz	r3, 8006f14 <_vfiprintf_r+0x78>
 8006ed8:	4629      	mov	r1, r5
 8006eda:	4630      	mov	r0, r6
 8006edc:	f000 f96e 	bl	80071bc <__swsetup_r>
 8006ee0:	b1c0      	cbz	r0, 8006f14 <_vfiprintf_r+0x78>
 8006ee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ee4:	07dc      	lsls	r4, r3, #31
 8006ee6:	d50e      	bpl.n	8006f06 <_vfiprintf_r+0x6a>
 8006ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8006eec:	b01d      	add	sp, #116	; 0x74
 8006eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef2:	4b7b      	ldr	r3, [pc, #492]	; (80070e0 <_vfiprintf_r+0x244>)
 8006ef4:	429d      	cmp	r5, r3
 8006ef6:	d101      	bne.n	8006efc <_vfiprintf_r+0x60>
 8006ef8:	68b5      	ldr	r5, [r6, #8]
 8006efa:	e7df      	b.n	8006ebc <_vfiprintf_r+0x20>
 8006efc:	4b79      	ldr	r3, [pc, #484]	; (80070e4 <_vfiprintf_r+0x248>)
 8006efe:	429d      	cmp	r5, r3
 8006f00:	bf08      	it	eq
 8006f02:	68f5      	ldreq	r5, [r6, #12]
 8006f04:	e7da      	b.n	8006ebc <_vfiprintf_r+0x20>
 8006f06:	89ab      	ldrh	r3, [r5, #12]
 8006f08:	0598      	lsls	r0, r3, #22
 8006f0a:	d4ed      	bmi.n	8006ee8 <_vfiprintf_r+0x4c>
 8006f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f0e:	f000 fb84 	bl	800761a <__retarget_lock_release_recursive>
 8006f12:	e7e9      	b.n	8006ee8 <_vfiprintf_r+0x4c>
 8006f14:	2300      	movs	r3, #0
 8006f16:	9309      	str	r3, [sp, #36]	; 0x24
 8006f18:	2320      	movs	r3, #32
 8006f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f22:	2330      	movs	r3, #48	; 0x30
 8006f24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80070e8 <_vfiprintf_r+0x24c>
 8006f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f2c:	f04f 0901 	mov.w	r9, #1
 8006f30:	4623      	mov	r3, r4
 8006f32:	469a      	mov	sl, r3
 8006f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f38:	b10a      	cbz	r2, 8006f3e <_vfiprintf_r+0xa2>
 8006f3a:	2a25      	cmp	r2, #37	; 0x25
 8006f3c:	d1f9      	bne.n	8006f32 <_vfiprintf_r+0x96>
 8006f3e:	ebba 0b04 	subs.w	fp, sl, r4
 8006f42:	d00b      	beq.n	8006f5c <_vfiprintf_r+0xc0>
 8006f44:	465b      	mov	r3, fp
 8006f46:	4622      	mov	r2, r4
 8006f48:	4629      	mov	r1, r5
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	f7ff ff93 	bl	8006e76 <__sfputs_r>
 8006f50:	3001      	adds	r0, #1
 8006f52:	f000 80aa 	beq.w	80070aa <_vfiprintf_r+0x20e>
 8006f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f58:	445a      	add	r2, fp
 8006f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 80a2 	beq.w	80070aa <_vfiprintf_r+0x20e>
 8006f66:	2300      	movs	r3, #0
 8006f68:	f04f 32ff 	mov.w	r2, #4294967295
 8006f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f70:	f10a 0a01 	add.w	sl, sl, #1
 8006f74:	9304      	str	r3, [sp, #16]
 8006f76:	9307      	str	r3, [sp, #28]
 8006f78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f7e:	4654      	mov	r4, sl
 8006f80:	2205      	movs	r2, #5
 8006f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f86:	4858      	ldr	r0, [pc, #352]	; (80070e8 <_vfiprintf_r+0x24c>)
 8006f88:	f7f9 f92a 	bl	80001e0 <memchr>
 8006f8c:	9a04      	ldr	r2, [sp, #16]
 8006f8e:	b9d8      	cbnz	r0, 8006fc8 <_vfiprintf_r+0x12c>
 8006f90:	06d1      	lsls	r1, r2, #27
 8006f92:	bf44      	itt	mi
 8006f94:	2320      	movmi	r3, #32
 8006f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f9a:	0713      	lsls	r3, r2, #28
 8006f9c:	bf44      	itt	mi
 8006f9e:	232b      	movmi	r3, #43	; 0x2b
 8006fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8006faa:	d015      	beq.n	8006fd8 <_vfiprintf_r+0x13c>
 8006fac:	9a07      	ldr	r2, [sp, #28]
 8006fae:	4654      	mov	r4, sl
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	f04f 0c0a 	mov.w	ip, #10
 8006fb6:	4621      	mov	r1, r4
 8006fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006fbc:	3b30      	subs	r3, #48	; 0x30
 8006fbe:	2b09      	cmp	r3, #9
 8006fc0:	d94e      	bls.n	8007060 <_vfiprintf_r+0x1c4>
 8006fc2:	b1b0      	cbz	r0, 8006ff2 <_vfiprintf_r+0x156>
 8006fc4:	9207      	str	r2, [sp, #28]
 8006fc6:	e014      	b.n	8006ff2 <_vfiprintf_r+0x156>
 8006fc8:	eba0 0308 	sub.w	r3, r0, r8
 8006fcc:	fa09 f303 	lsl.w	r3, r9, r3
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	9304      	str	r3, [sp, #16]
 8006fd4:	46a2      	mov	sl, r4
 8006fd6:	e7d2      	b.n	8006f7e <_vfiprintf_r+0xe2>
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	1d19      	adds	r1, r3, #4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	9103      	str	r1, [sp, #12]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	bfbb      	ittet	lt
 8006fe4:	425b      	neglt	r3, r3
 8006fe6:	f042 0202 	orrlt.w	r2, r2, #2
 8006fea:	9307      	strge	r3, [sp, #28]
 8006fec:	9307      	strlt	r3, [sp, #28]
 8006fee:	bfb8      	it	lt
 8006ff0:	9204      	strlt	r2, [sp, #16]
 8006ff2:	7823      	ldrb	r3, [r4, #0]
 8006ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8006ff6:	d10c      	bne.n	8007012 <_vfiprintf_r+0x176>
 8006ff8:	7863      	ldrb	r3, [r4, #1]
 8006ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8006ffc:	d135      	bne.n	800706a <_vfiprintf_r+0x1ce>
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	1d1a      	adds	r2, r3, #4
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	9203      	str	r2, [sp, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	bfb8      	it	lt
 800700a:	f04f 33ff 	movlt.w	r3, #4294967295
 800700e:	3402      	adds	r4, #2
 8007010:	9305      	str	r3, [sp, #20]
 8007012:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80070f8 <_vfiprintf_r+0x25c>
 8007016:	7821      	ldrb	r1, [r4, #0]
 8007018:	2203      	movs	r2, #3
 800701a:	4650      	mov	r0, sl
 800701c:	f7f9 f8e0 	bl	80001e0 <memchr>
 8007020:	b140      	cbz	r0, 8007034 <_vfiprintf_r+0x198>
 8007022:	2340      	movs	r3, #64	; 0x40
 8007024:	eba0 000a 	sub.w	r0, r0, sl
 8007028:	fa03 f000 	lsl.w	r0, r3, r0
 800702c:	9b04      	ldr	r3, [sp, #16]
 800702e:	4303      	orrs	r3, r0
 8007030:	3401      	adds	r4, #1
 8007032:	9304      	str	r3, [sp, #16]
 8007034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007038:	482c      	ldr	r0, [pc, #176]	; (80070ec <_vfiprintf_r+0x250>)
 800703a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800703e:	2206      	movs	r2, #6
 8007040:	f7f9 f8ce 	bl	80001e0 <memchr>
 8007044:	2800      	cmp	r0, #0
 8007046:	d03f      	beq.n	80070c8 <_vfiprintf_r+0x22c>
 8007048:	4b29      	ldr	r3, [pc, #164]	; (80070f0 <_vfiprintf_r+0x254>)
 800704a:	bb1b      	cbnz	r3, 8007094 <_vfiprintf_r+0x1f8>
 800704c:	9b03      	ldr	r3, [sp, #12]
 800704e:	3307      	adds	r3, #7
 8007050:	f023 0307 	bic.w	r3, r3, #7
 8007054:	3308      	adds	r3, #8
 8007056:	9303      	str	r3, [sp, #12]
 8007058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800705a:	443b      	add	r3, r7
 800705c:	9309      	str	r3, [sp, #36]	; 0x24
 800705e:	e767      	b.n	8006f30 <_vfiprintf_r+0x94>
 8007060:	fb0c 3202 	mla	r2, ip, r2, r3
 8007064:	460c      	mov	r4, r1
 8007066:	2001      	movs	r0, #1
 8007068:	e7a5      	b.n	8006fb6 <_vfiprintf_r+0x11a>
 800706a:	2300      	movs	r3, #0
 800706c:	3401      	adds	r4, #1
 800706e:	9305      	str	r3, [sp, #20]
 8007070:	4619      	mov	r1, r3
 8007072:	f04f 0c0a 	mov.w	ip, #10
 8007076:	4620      	mov	r0, r4
 8007078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800707c:	3a30      	subs	r2, #48	; 0x30
 800707e:	2a09      	cmp	r2, #9
 8007080:	d903      	bls.n	800708a <_vfiprintf_r+0x1ee>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d0c5      	beq.n	8007012 <_vfiprintf_r+0x176>
 8007086:	9105      	str	r1, [sp, #20]
 8007088:	e7c3      	b.n	8007012 <_vfiprintf_r+0x176>
 800708a:	fb0c 2101 	mla	r1, ip, r1, r2
 800708e:	4604      	mov	r4, r0
 8007090:	2301      	movs	r3, #1
 8007092:	e7f0      	b.n	8007076 <_vfiprintf_r+0x1da>
 8007094:	ab03      	add	r3, sp, #12
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	462a      	mov	r2, r5
 800709a:	4b16      	ldr	r3, [pc, #88]	; (80070f4 <_vfiprintf_r+0x258>)
 800709c:	a904      	add	r1, sp, #16
 800709e:	4630      	mov	r0, r6
 80070a0:	f7fd fe22 	bl	8004ce8 <_printf_float>
 80070a4:	4607      	mov	r7, r0
 80070a6:	1c78      	adds	r0, r7, #1
 80070a8:	d1d6      	bne.n	8007058 <_vfiprintf_r+0x1bc>
 80070aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ac:	07d9      	lsls	r1, r3, #31
 80070ae:	d405      	bmi.n	80070bc <_vfiprintf_r+0x220>
 80070b0:	89ab      	ldrh	r3, [r5, #12]
 80070b2:	059a      	lsls	r2, r3, #22
 80070b4:	d402      	bmi.n	80070bc <_vfiprintf_r+0x220>
 80070b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070b8:	f000 faaf 	bl	800761a <__retarget_lock_release_recursive>
 80070bc:	89ab      	ldrh	r3, [r5, #12]
 80070be:	065b      	lsls	r3, r3, #25
 80070c0:	f53f af12 	bmi.w	8006ee8 <_vfiprintf_r+0x4c>
 80070c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070c6:	e711      	b.n	8006eec <_vfiprintf_r+0x50>
 80070c8:	ab03      	add	r3, sp, #12
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	462a      	mov	r2, r5
 80070ce:	4b09      	ldr	r3, [pc, #36]	; (80070f4 <_vfiprintf_r+0x258>)
 80070d0:	a904      	add	r1, sp, #16
 80070d2:	4630      	mov	r0, r6
 80070d4:	f7fe f8ac 	bl	8005230 <_printf_i>
 80070d8:	e7e4      	b.n	80070a4 <_vfiprintf_r+0x208>
 80070da:	bf00      	nop
 80070dc:	08007dd4 	.word	0x08007dd4
 80070e0:	08007df4 	.word	0x08007df4
 80070e4:	08007db4 	.word	0x08007db4
 80070e8:	08007c5c 	.word	0x08007c5c
 80070ec:	08007c66 	.word	0x08007c66
 80070f0:	08004ce9 	.word	0x08004ce9
 80070f4:	08006e77 	.word	0x08006e77
 80070f8:	08007c62 	.word	0x08007c62

080070fc <__swbuf_r>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	460e      	mov	r6, r1
 8007100:	4614      	mov	r4, r2
 8007102:	4605      	mov	r5, r0
 8007104:	b118      	cbz	r0, 800710e <__swbuf_r+0x12>
 8007106:	6983      	ldr	r3, [r0, #24]
 8007108:	b90b      	cbnz	r3, 800710e <__swbuf_r+0x12>
 800710a:	f000 f9e7 	bl	80074dc <__sinit>
 800710e:	4b21      	ldr	r3, [pc, #132]	; (8007194 <__swbuf_r+0x98>)
 8007110:	429c      	cmp	r4, r3
 8007112:	d12b      	bne.n	800716c <__swbuf_r+0x70>
 8007114:	686c      	ldr	r4, [r5, #4]
 8007116:	69a3      	ldr	r3, [r4, #24]
 8007118:	60a3      	str	r3, [r4, #8]
 800711a:	89a3      	ldrh	r3, [r4, #12]
 800711c:	071a      	lsls	r2, r3, #28
 800711e:	d52f      	bpl.n	8007180 <__swbuf_r+0x84>
 8007120:	6923      	ldr	r3, [r4, #16]
 8007122:	b36b      	cbz	r3, 8007180 <__swbuf_r+0x84>
 8007124:	6923      	ldr	r3, [r4, #16]
 8007126:	6820      	ldr	r0, [r4, #0]
 8007128:	1ac0      	subs	r0, r0, r3
 800712a:	6963      	ldr	r3, [r4, #20]
 800712c:	b2f6      	uxtb	r6, r6
 800712e:	4283      	cmp	r3, r0
 8007130:	4637      	mov	r7, r6
 8007132:	dc04      	bgt.n	800713e <__swbuf_r+0x42>
 8007134:	4621      	mov	r1, r4
 8007136:	4628      	mov	r0, r5
 8007138:	f000 f93c 	bl	80073b4 <_fflush_r>
 800713c:	bb30      	cbnz	r0, 800718c <__swbuf_r+0x90>
 800713e:	68a3      	ldr	r3, [r4, #8]
 8007140:	3b01      	subs	r3, #1
 8007142:	60a3      	str	r3, [r4, #8]
 8007144:	6823      	ldr	r3, [r4, #0]
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	6022      	str	r2, [r4, #0]
 800714a:	701e      	strb	r6, [r3, #0]
 800714c:	6963      	ldr	r3, [r4, #20]
 800714e:	3001      	adds	r0, #1
 8007150:	4283      	cmp	r3, r0
 8007152:	d004      	beq.n	800715e <__swbuf_r+0x62>
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	07db      	lsls	r3, r3, #31
 8007158:	d506      	bpl.n	8007168 <__swbuf_r+0x6c>
 800715a:	2e0a      	cmp	r6, #10
 800715c:	d104      	bne.n	8007168 <__swbuf_r+0x6c>
 800715e:	4621      	mov	r1, r4
 8007160:	4628      	mov	r0, r5
 8007162:	f000 f927 	bl	80073b4 <_fflush_r>
 8007166:	b988      	cbnz	r0, 800718c <__swbuf_r+0x90>
 8007168:	4638      	mov	r0, r7
 800716a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800716c:	4b0a      	ldr	r3, [pc, #40]	; (8007198 <__swbuf_r+0x9c>)
 800716e:	429c      	cmp	r4, r3
 8007170:	d101      	bne.n	8007176 <__swbuf_r+0x7a>
 8007172:	68ac      	ldr	r4, [r5, #8]
 8007174:	e7cf      	b.n	8007116 <__swbuf_r+0x1a>
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <__swbuf_r+0xa0>)
 8007178:	429c      	cmp	r4, r3
 800717a:	bf08      	it	eq
 800717c:	68ec      	ldreq	r4, [r5, #12]
 800717e:	e7ca      	b.n	8007116 <__swbuf_r+0x1a>
 8007180:	4621      	mov	r1, r4
 8007182:	4628      	mov	r0, r5
 8007184:	f000 f81a 	bl	80071bc <__swsetup_r>
 8007188:	2800      	cmp	r0, #0
 800718a:	d0cb      	beq.n	8007124 <__swbuf_r+0x28>
 800718c:	f04f 37ff 	mov.w	r7, #4294967295
 8007190:	e7ea      	b.n	8007168 <__swbuf_r+0x6c>
 8007192:	bf00      	nop
 8007194:	08007dd4 	.word	0x08007dd4
 8007198:	08007df4 	.word	0x08007df4
 800719c:	08007db4 	.word	0x08007db4

080071a0 <__ascii_wctomb>:
 80071a0:	b149      	cbz	r1, 80071b6 <__ascii_wctomb+0x16>
 80071a2:	2aff      	cmp	r2, #255	; 0xff
 80071a4:	bf85      	ittet	hi
 80071a6:	238a      	movhi	r3, #138	; 0x8a
 80071a8:	6003      	strhi	r3, [r0, #0]
 80071aa:	700a      	strbls	r2, [r1, #0]
 80071ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80071b0:	bf98      	it	ls
 80071b2:	2001      	movls	r0, #1
 80071b4:	4770      	bx	lr
 80071b6:	4608      	mov	r0, r1
 80071b8:	4770      	bx	lr
	...

080071bc <__swsetup_r>:
 80071bc:	4b32      	ldr	r3, [pc, #200]	; (8007288 <__swsetup_r+0xcc>)
 80071be:	b570      	push	{r4, r5, r6, lr}
 80071c0:	681d      	ldr	r5, [r3, #0]
 80071c2:	4606      	mov	r6, r0
 80071c4:	460c      	mov	r4, r1
 80071c6:	b125      	cbz	r5, 80071d2 <__swsetup_r+0x16>
 80071c8:	69ab      	ldr	r3, [r5, #24]
 80071ca:	b913      	cbnz	r3, 80071d2 <__swsetup_r+0x16>
 80071cc:	4628      	mov	r0, r5
 80071ce:	f000 f985 	bl	80074dc <__sinit>
 80071d2:	4b2e      	ldr	r3, [pc, #184]	; (800728c <__swsetup_r+0xd0>)
 80071d4:	429c      	cmp	r4, r3
 80071d6:	d10f      	bne.n	80071f8 <__swsetup_r+0x3c>
 80071d8:	686c      	ldr	r4, [r5, #4]
 80071da:	89a3      	ldrh	r3, [r4, #12]
 80071dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071e0:	0719      	lsls	r1, r3, #28
 80071e2:	d42c      	bmi.n	800723e <__swsetup_r+0x82>
 80071e4:	06dd      	lsls	r5, r3, #27
 80071e6:	d411      	bmi.n	800720c <__swsetup_r+0x50>
 80071e8:	2309      	movs	r3, #9
 80071ea:	6033      	str	r3, [r6, #0]
 80071ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071f0:	81a3      	strh	r3, [r4, #12]
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295
 80071f6:	e03e      	b.n	8007276 <__swsetup_r+0xba>
 80071f8:	4b25      	ldr	r3, [pc, #148]	; (8007290 <__swsetup_r+0xd4>)
 80071fa:	429c      	cmp	r4, r3
 80071fc:	d101      	bne.n	8007202 <__swsetup_r+0x46>
 80071fe:	68ac      	ldr	r4, [r5, #8]
 8007200:	e7eb      	b.n	80071da <__swsetup_r+0x1e>
 8007202:	4b24      	ldr	r3, [pc, #144]	; (8007294 <__swsetup_r+0xd8>)
 8007204:	429c      	cmp	r4, r3
 8007206:	bf08      	it	eq
 8007208:	68ec      	ldreq	r4, [r5, #12]
 800720a:	e7e6      	b.n	80071da <__swsetup_r+0x1e>
 800720c:	0758      	lsls	r0, r3, #29
 800720e:	d512      	bpl.n	8007236 <__swsetup_r+0x7a>
 8007210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007212:	b141      	cbz	r1, 8007226 <__swsetup_r+0x6a>
 8007214:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007218:	4299      	cmp	r1, r3
 800721a:	d002      	beq.n	8007222 <__swsetup_r+0x66>
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff fb6f 	bl	8006900 <_free_r>
 8007222:	2300      	movs	r3, #0
 8007224:	6363      	str	r3, [r4, #52]	; 0x34
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800722c:	81a3      	strh	r3, [r4, #12]
 800722e:	2300      	movs	r3, #0
 8007230:	6063      	str	r3, [r4, #4]
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	f043 0308 	orr.w	r3, r3, #8
 800723c:	81a3      	strh	r3, [r4, #12]
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	b94b      	cbnz	r3, 8007256 <__swsetup_r+0x9a>
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800724c:	d003      	beq.n	8007256 <__swsetup_r+0x9a>
 800724e:	4621      	mov	r1, r4
 8007250:	4630      	mov	r0, r6
 8007252:	f000 fa07 	bl	8007664 <__smakebuf_r>
 8007256:	89a0      	ldrh	r0, [r4, #12]
 8007258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800725c:	f010 0301 	ands.w	r3, r0, #1
 8007260:	d00a      	beq.n	8007278 <__swsetup_r+0xbc>
 8007262:	2300      	movs	r3, #0
 8007264:	60a3      	str	r3, [r4, #8]
 8007266:	6963      	ldr	r3, [r4, #20]
 8007268:	425b      	negs	r3, r3
 800726a:	61a3      	str	r3, [r4, #24]
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	b943      	cbnz	r3, 8007282 <__swsetup_r+0xc6>
 8007270:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007274:	d1ba      	bne.n	80071ec <__swsetup_r+0x30>
 8007276:	bd70      	pop	{r4, r5, r6, pc}
 8007278:	0781      	lsls	r1, r0, #30
 800727a:	bf58      	it	pl
 800727c:	6963      	ldrpl	r3, [r4, #20]
 800727e:	60a3      	str	r3, [r4, #8]
 8007280:	e7f4      	b.n	800726c <__swsetup_r+0xb0>
 8007282:	2000      	movs	r0, #0
 8007284:	e7f7      	b.n	8007276 <__swsetup_r+0xba>
 8007286:	bf00      	nop
 8007288:	2000003c 	.word	0x2000003c
 800728c:	08007dd4 	.word	0x08007dd4
 8007290:	08007df4 	.word	0x08007df4
 8007294:	08007db4 	.word	0x08007db4

08007298 <abort>:
 8007298:	b508      	push	{r3, lr}
 800729a:	2006      	movs	r0, #6
 800729c:	f000 fa52 	bl	8007744 <raise>
 80072a0:	2001      	movs	r0, #1
 80072a2:	f7fa fb87 	bl	80019b4 <_exit>
	...

080072a8 <__sflush_r>:
 80072a8:	898a      	ldrh	r2, [r1, #12]
 80072aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072ae:	4605      	mov	r5, r0
 80072b0:	0710      	lsls	r0, r2, #28
 80072b2:	460c      	mov	r4, r1
 80072b4:	d458      	bmi.n	8007368 <__sflush_r+0xc0>
 80072b6:	684b      	ldr	r3, [r1, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	dc05      	bgt.n	80072c8 <__sflush_r+0x20>
 80072bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072be:	2b00      	cmp	r3, #0
 80072c0:	dc02      	bgt.n	80072c8 <__sflush_r+0x20>
 80072c2:	2000      	movs	r0, #0
 80072c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ca:	2e00      	cmp	r6, #0
 80072cc:	d0f9      	beq.n	80072c2 <__sflush_r+0x1a>
 80072ce:	2300      	movs	r3, #0
 80072d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072d4:	682f      	ldr	r7, [r5, #0]
 80072d6:	602b      	str	r3, [r5, #0]
 80072d8:	d032      	beq.n	8007340 <__sflush_r+0x98>
 80072da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072dc:	89a3      	ldrh	r3, [r4, #12]
 80072de:	075a      	lsls	r2, r3, #29
 80072e0:	d505      	bpl.n	80072ee <__sflush_r+0x46>
 80072e2:	6863      	ldr	r3, [r4, #4]
 80072e4:	1ac0      	subs	r0, r0, r3
 80072e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072e8:	b10b      	cbz	r3, 80072ee <__sflush_r+0x46>
 80072ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072ec:	1ac0      	subs	r0, r0, r3
 80072ee:	2300      	movs	r3, #0
 80072f0:	4602      	mov	r2, r0
 80072f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072f4:	6a21      	ldr	r1, [r4, #32]
 80072f6:	4628      	mov	r0, r5
 80072f8:	47b0      	blx	r6
 80072fa:	1c43      	adds	r3, r0, #1
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	d106      	bne.n	800730e <__sflush_r+0x66>
 8007300:	6829      	ldr	r1, [r5, #0]
 8007302:	291d      	cmp	r1, #29
 8007304:	d82c      	bhi.n	8007360 <__sflush_r+0xb8>
 8007306:	4a2a      	ldr	r2, [pc, #168]	; (80073b0 <__sflush_r+0x108>)
 8007308:	40ca      	lsrs	r2, r1
 800730a:	07d6      	lsls	r6, r2, #31
 800730c:	d528      	bpl.n	8007360 <__sflush_r+0xb8>
 800730e:	2200      	movs	r2, #0
 8007310:	6062      	str	r2, [r4, #4]
 8007312:	04d9      	lsls	r1, r3, #19
 8007314:	6922      	ldr	r2, [r4, #16]
 8007316:	6022      	str	r2, [r4, #0]
 8007318:	d504      	bpl.n	8007324 <__sflush_r+0x7c>
 800731a:	1c42      	adds	r2, r0, #1
 800731c:	d101      	bne.n	8007322 <__sflush_r+0x7a>
 800731e:	682b      	ldr	r3, [r5, #0]
 8007320:	b903      	cbnz	r3, 8007324 <__sflush_r+0x7c>
 8007322:	6560      	str	r0, [r4, #84]	; 0x54
 8007324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007326:	602f      	str	r7, [r5, #0]
 8007328:	2900      	cmp	r1, #0
 800732a:	d0ca      	beq.n	80072c2 <__sflush_r+0x1a>
 800732c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007330:	4299      	cmp	r1, r3
 8007332:	d002      	beq.n	800733a <__sflush_r+0x92>
 8007334:	4628      	mov	r0, r5
 8007336:	f7ff fae3 	bl	8006900 <_free_r>
 800733a:	2000      	movs	r0, #0
 800733c:	6360      	str	r0, [r4, #52]	; 0x34
 800733e:	e7c1      	b.n	80072c4 <__sflush_r+0x1c>
 8007340:	6a21      	ldr	r1, [r4, #32]
 8007342:	2301      	movs	r3, #1
 8007344:	4628      	mov	r0, r5
 8007346:	47b0      	blx	r6
 8007348:	1c41      	adds	r1, r0, #1
 800734a:	d1c7      	bne.n	80072dc <__sflush_r+0x34>
 800734c:	682b      	ldr	r3, [r5, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0c4      	beq.n	80072dc <__sflush_r+0x34>
 8007352:	2b1d      	cmp	r3, #29
 8007354:	d001      	beq.n	800735a <__sflush_r+0xb2>
 8007356:	2b16      	cmp	r3, #22
 8007358:	d101      	bne.n	800735e <__sflush_r+0xb6>
 800735a:	602f      	str	r7, [r5, #0]
 800735c:	e7b1      	b.n	80072c2 <__sflush_r+0x1a>
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	e7ad      	b.n	80072c4 <__sflush_r+0x1c>
 8007368:	690f      	ldr	r7, [r1, #16]
 800736a:	2f00      	cmp	r7, #0
 800736c:	d0a9      	beq.n	80072c2 <__sflush_r+0x1a>
 800736e:	0793      	lsls	r3, r2, #30
 8007370:	680e      	ldr	r6, [r1, #0]
 8007372:	bf08      	it	eq
 8007374:	694b      	ldreq	r3, [r1, #20]
 8007376:	600f      	str	r7, [r1, #0]
 8007378:	bf18      	it	ne
 800737a:	2300      	movne	r3, #0
 800737c:	eba6 0807 	sub.w	r8, r6, r7
 8007380:	608b      	str	r3, [r1, #8]
 8007382:	f1b8 0f00 	cmp.w	r8, #0
 8007386:	dd9c      	ble.n	80072c2 <__sflush_r+0x1a>
 8007388:	6a21      	ldr	r1, [r4, #32]
 800738a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800738c:	4643      	mov	r3, r8
 800738e:	463a      	mov	r2, r7
 8007390:	4628      	mov	r0, r5
 8007392:	47b0      	blx	r6
 8007394:	2800      	cmp	r0, #0
 8007396:	dc06      	bgt.n	80073a6 <__sflush_r+0xfe>
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800739e:	81a3      	strh	r3, [r4, #12]
 80073a0:	f04f 30ff 	mov.w	r0, #4294967295
 80073a4:	e78e      	b.n	80072c4 <__sflush_r+0x1c>
 80073a6:	4407      	add	r7, r0
 80073a8:	eba8 0800 	sub.w	r8, r8, r0
 80073ac:	e7e9      	b.n	8007382 <__sflush_r+0xda>
 80073ae:	bf00      	nop
 80073b0:	20400001 	.word	0x20400001

080073b4 <_fflush_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	690b      	ldr	r3, [r1, #16]
 80073b8:	4605      	mov	r5, r0
 80073ba:	460c      	mov	r4, r1
 80073bc:	b913      	cbnz	r3, 80073c4 <_fflush_r+0x10>
 80073be:	2500      	movs	r5, #0
 80073c0:	4628      	mov	r0, r5
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	b118      	cbz	r0, 80073ce <_fflush_r+0x1a>
 80073c6:	6983      	ldr	r3, [r0, #24]
 80073c8:	b90b      	cbnz	r3, 80073ce <_fflush_r+0x1a>
 80073ca:	f000 f887 	bl	80074dc <__sinit>
 80073ce:	4b14      	ldr	r3, [pc, #80]	; (8007420 <_fflush_r+0x6c>)
 80073d0:	429c      	cmp	r4, r3
 80073d2:	d11b      	bne.n	800740c <_fflush_r+0x58>
 80073d4:	686c      	ldr	r4, [r5, #4]
 80073d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d0ef      	beq.n	80073be <_fflush_r+0xa>
 80073de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073e0:	07d0      	lsls	r0, r2, #31
 80073e2:	d404      	bmi.n	80073ee <_fflush_r+0x3a>
 80073e4:	0599      	lsls	r1, r3, #22
 80073e6:	d402      	bmi.n	80073ee <_fflush_r+0x3a>
 80073e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073ea:	f000 f915 	bl	8007618 <__retarget_lock_acquire_recursive>
 80073ee:	4628      	mov	r0, r5
 80073f0:	4621      	mov	r1, r4
 80073f2:	f7ff ff59 	bl	80072a8 <__sflush_r>
 80073f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073f8:	07da      	lsls	r2, r3, #31
 80073fa:	4605      	mov	r5, r0
 80073fc:	d4e0      	bmi.n	80073c0 <_fflush_r+0xc>
 80073fe:	89a3      	ldrh	r3, [r4, #12]
 8007400:	059b      	lsls	r3, r3, #22
 8007402:	d4dd      	bmi.n	80073c0 <_fflush_r+0xc>
 8007404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007406:	f000 f908 	bl	800761a <__retarget_lock_release_recursive>
 800740a:	e7d9      	b.n	80073c0 <_fflush_r+0xc>
 800740c:	4b05      	ldr	r3, [pc, #20]	; (8007424 <_fflush_r+0x70>)
 800740e:	429c      	cmp	r4, r3
 8007410:	d101      	bne.n	8007416 <_fflush_r+0x62>
 8007412:	68ac      	ldr	r4, [r5, #8]
 8007414:	e7df      	b.n	80073d6 <_fflush_r+0x22>
 8007416:	4b04      	ldr	r3, [pc, #16]	; (8007428 <_fflush_r+0x74>)
 8007418:	429c      	cmp	r4, r3
 800741a:	bf08      	it	eq
 800741c:	68ec      	ldreq	r4, [r5, #12]
 800741e:	e7da      	b.n	80073d6 <_fflush_r+0x22>
 8007420:	08007dd4 	.word	0x08007dd4
 8007424:	08007df4 	.word	0x08007df4
 8007428:	08007db4 	.word	0x08007db4

0800742c <std>:
 800742c:	2300      	movs	r3, #0
 800742e:	b510      	push	{r4, lr}
 8007430:	4604      	mov	r4, r0
 8007432:	e9c0 3300 	strd	r3, r3, [r0]
 8007436:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800743a:	6083      	str	r3, [r0, #8]
 800743c:	8181      	strh	r1, [r0, #12]
 800743e:	6643      	str	r3, [r0, #100]	; 0x64
 8007440:	81c2      	strh	r2, [r0, #14]
 8007442:	6183      	str	r3, [r0, #24]
 8007444:	4619      	mov	r1, r3
 8007446:	2208      	movs	r2, #8
 8007448:	305c      	adds	r0, #92	; 0x5c
 800744a:	f7fd fba5 	bl	8004b98 <memset>
 800744e:	4b05      	ldr	r3, [pc, #20]	; (8007464 <std+0x38>)
 8007450:	6263      	str	r3, [r4, #36]	; 0x24
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <std+0x3c>)
 8007454:	62a3      	str	r3, [r4, #40]	; 0x28
 8007456:	4b05      	ldr	r3, [pc, #20]	; (800746c <std+0x40>)
 8007458:	62e3      	str	r3, [r4, #44]	; 0x2c
 800745a:	4b05      	ldr	r3, [pc, #20]	; (8007470 <std+0x44>)
 800745c:	6224      	str	r4, [r4, #32]
 800745e:	6323      	str	r3, [r4, #48]	; 0x30
 8007460:	bd10      	pop	{r4, pc}
 8007462:	bf00      	nop
 8007464:	0800777d 	.word	0x0800777d
 8007468:	0800779f 	.word	0x0800779f
 800746c:	080077d7 	.word	0x080077d7
 8007470:	080077fb 	.word	0x080077fb

08007474 <_cleanup_r>:
 8007474:	4901      	ldr	r1, [pc, #4]	; (800747c <_cleanup_r+0x8>)
 8007476:	f000 b8af 	b.w	80075d8 <_fwalk_reent>
 800747a:	bf00      	nop
 800747c:	080073b5 	.word	0x080073b5

08007480 <__sfmoreglue>:
 8007480:	b570      	push	{r4, r5, r6, lr}
 8007482:	1e4a      	subs	r2, r1, #1
 8007484:	2568      	movs	r5, #104	; 0x68
 8007486:	4355      	muls	r5, r2
 8007488:	460e      	mov	r6, r1
 800748a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800748e:	f7ff fa87 	bl	80069a0 <_malloc_r>
 8007492:	4604      	mov	r4, r0
 8007494:	b140      	cbz	r0, 80074a8 <__sfmoreglue+0x28>
 8007496:	2100      	movs	r1, #0
 8007498:	e9c0 1600 	strd	r1, r6, [r0]
 800749c:	300c      	adds	r0, #12
 800749e:	60a0      	str	r0, [r4, #8]
 80074a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074a4:	f7fd fb78 	bl	8004b98 <memset>
 80074a8:	4620      	mov	r0, r4
 80074aa:	bd70      	pop	{r4, r5, r6, pc}

080074ac <__sfp_lock_acquire>:
 80074ac:	4801      	ldr	r0, [pc, #4]	; (80074b4 <__sfp_lock_acquire+0x8>)
 80074ae:	f000 b8b3 	b.w	8007618 <__retarget_lock_acquire_recursive>
 80074b2:	bf00      	nop
 80074b4:	20000f18 	.word	0x20000f18

080074b8 <__sfp_lock_release>:
 80074b8:	4801      	ldr	r0, [pc, #4]	; (80074c0 <__sfp_lock_release+0x8>)
 80074ba:	f000 b8ae 	b.w	800761a <__retarget_lock_release_recursive>
 80074be:	bf00      	nop
 80074c0:	20000f18 	.word	0x20000f18

080074c4 <__sinit_lock_acquire>:
 80074c4:	4801      	ldr	r0, [pc, #4]	; (80074cc <__sinit_lock_acquire+0x8>)
 80074c6:	f000 b8a7 	b.w	8007618 <__retarget_lock_acquire_recursive>
 80074ca:	bf00      	nop
 80074cc:	20000f13 	.word	0x20000f13

080074d0 <__sinit_lock_release>:
 80074d0:	4801      	ldr	r0, [pc, #4]	; (80074d8 <__sinit_lock_release+0x8>)
 80074d2:	f000 b8a2 	b.w	800761a <__retarget_lock_release_recursive>
 80074d6:	bf00      	nop
 80074d8:	20000f13 	.word	0x20000f13

080074dc <__sinit>:
 80074dc:	b510      	push	{r4, lr}
 80074de:	4604      	mov	r4, r0
 80074e0:	f7ff fff0 	bl	80074c4 <__sinit_lock_acquire>
 80074e4:	69a3      	ldr	r3, [r4, #24]
 80074e6:	b11b      	cbz	r3, 80074f0 <__sinit+0x14>
 80074e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074ec:	f7ff bff0 	b.w	80074d0 <__sinit_lock_release>
 80074f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074f4:	6523      	str	r3, [r4, #80]	; 0x50
 80074f6:	4b13      	ldr	r3, [pc, #76]	; (8007544 <__sinit+0x68>)
 80074f8:	4a13      	ldr	r2, [pc, #76]	; (8007548 <__sinit+0x6c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80074fe:	42a3      	cmp	r3, r4
 8007500:	bf04      	itt	eq
 8007502:	2301      	moveq	r3, #1
 8007504:	61a3      	streq	r3, [r4, #24]
 8007506:	4620      	mov	r0, r4
 8007508:	f000 f820 	bl	800754c <__sfp>
 800750c:	6060      	str	r0, [r4, #4]
 800750e:	4620      	mov	r0, r4
 8007510:	f000 f81c 	bl	800754c <__sfp>
 8007514:	60a0      	str	r0, [r4, #8]
 8007516:	4620      	mov	r0, r4
 8007518:	f000 f818 	bl	800754c <__sfp>
 800751c:	2200      	movs	r2, #0
 800751e:	60e0      	str	r0, [r4, #12]
 8007520:	2104      	movs	r1, #4
 8007522:	6860      	ldr	r0, [r4, #4]
 8007524:	f7ff ff82 	bl	800742c <std>
 8007528:	68a0      	ldr	r0, [r4, #8]
 800752a:	2201      	movs	r2, #1
 800752c:	2109      	movs	r1, #9
 800752e:	f7ff ff7d 	bl	800742c <std>
 8007532:	68e0      	ldr	r0, [r4, #12]
 8007534:	2202      	movs	r2, #2
 8007536:	2112      	movs	r1, #18
 8007538:	f7ff ff78 	bl	800742c <std>
 800753c:	2301      	movs	r3, #1
 800753e:	61a3      	str	r3, [r4, #24]
 8007540:	e7d2      	b.n	80074e8 <__sinit+0xc>
 8007542:	bf00      	nop
 8007544:	08007a34 	.word	0x08007a34
 8007548:	08007475 	.word	0x08007475

0800754c <__sfp>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	4607      	mov	r7, r0
 8007550:	f7ff ffac 	bl	80074ac <__sfp_lock_acquire>
 8007554:	4b1e      	ldr	r3, [pc, #120]	; (80075d0 <__sfp+0x84>)
 8007556:	681e      	ldr	r6, [r3, #0]
 8007558:	69b3      	ldr	r3, [r6, #24]
 800755a:	b913      	cbnz	r3, 8007562 <__sfp+0x16>
 800755c:	4630      	mov	r0, r6
 800755e:	f7ff ffbd 	bl	80074dc <__sinit>
 8007562:	3648      	adds	r6, #72	; 0x48
 8007564:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007568:	3b01      	subs	r3, #1
 800756a:	d503      	bpl.n	8007574 <__sfp+0x28>
 800756c:	6833      	ldr	r3, [r6, #0]
 800756e:	b30b      	cbz	r3, 80075b4 <__sfp+0x68>
 8007570:	6836      	ldr	r6, [r6, #0]
 8007572:	e7f7      	b.n	8007564 <__sfp+0x18>
 8007574:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007578:	b9d5      	cbnz	r5, 80075b0 <__sfp+0x64>
 800757a:	4b16      	ldr	r3, [pc, #88]	; (80075d4 <__sfp+0x88>)
 800757c:	60e3      	str	r3, [r4, #12]
 800757e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007582:	6665      	str	r5, [r4, #100]	; 0x64
 8007584:	f000 f847 	bl	8007616 <__retarget_lock_init_recursive>
 8007588:	f7ff ff96 	bl	80074b8 <__sfp_lock_release>
 800758c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007590:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007594:	6025      	str	r5, [r4, #0]
 8007596:	61a5      	str	r5, [r4, #24]
 8007598:	2208      	movs	r2, #8
 800759a:	4629      	mov	r1, r5
 800759c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075a0:	f7fd fafa 	bl	8004b98 <memset>
 80075a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075ac:	4620      	mov	r0, r4
 80075ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075b0:	3468      	adds	r4, #104	; 0x68
 80075b2:	e7d9      	b.n	8007568 <__sfp+0x1c>
 80075b4:	2104      	movs	r1, #4
 80075b6:	4638      	mov	r0, r7
 80075b8:	f7ff ff62 	bl	8007480 <__sfmoreglue>
 80075bc:	4604      	mov	r4, r0
 80075be:	6030      	str	r0, [r6, #0]
 80075c0:	2800      	cmp	r0, #0
 80075c2:	d1d5      	bne.n	8007570 <__sfp+0x24>
 80075c4:	f7ff ff78 	bl	80074b8 <__sfp_lock_release>
 80075c8:	230c      	movs	r3, #12
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	e7ee      	b.n	80075ac <__sfp+0x60>
 80075ce:	bf00      	nop
 80075d0:	08007a34 	.word	0x08007a34
 80075d4:	ffff0001 	.word	0xffff0001

080075d8 <_fwalk_reent>:
 80075d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075dc:	4606      	mov	r6, r0
 80075de:	4688      	mov	r8, r1
 80075e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075e4:	2700      	movs	r7, #0
 80075e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075ea:	f1b9 0901 	subs.w	r9, r9, #1
 80075ee:	d505      	bpl.n	80075fc <_fwalk_reent+0x24>
 80075f0:	6824      	ldr	r4, [r4, #0]
 80075f2:	2c00      	cmp	r4, #0
 80075f4:	d1f7      	bne.n	80075e6 <_fwalk_reent+0xe>
 80075f6:	4638      	mov	r0, r7
 80075f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075fc:	89ab      	ldrh	r3, [r5, #12]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d907      	bls.n	8007612 <_fwalk_reent+0x3a>
 8007602:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007606:	3301      	adds	r3, #1
 8007608:	d003      	beq.n	8007612 <_fwalk_reent+0x3a>
 800760a:	4629      	mov	r1, r5
 800760c:	4630      	mov	r0, r6
 800760e:	47c0      	blx	r8
 8007610:	4307      	orrs	r7, r0
 8007612:	3568      	adds	r5, #104	; 0x68
 8007614:	e7e9      	b.n	80075ea <_fwalk_reent+0x12>

08007616 <__retarget_lock_init_recursive>:
 8007616:	4770      	bx	lr

08007618 <__retarget_lock_acquire_recursive>:
 8007618:	4770      	bx	lr

0800761a <__retarget_lock_release_recursive>:
 800761a:	4770      	bx	lr

0800761c <__swhatbuf_r>:
 800761c:	b570      	push	{r4, r5, r6, lr}
 800761e:	460e      	mov	r6, r1
 8007620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007624:	2900      	cmp	r1, #0
 8007626:	b096      	sub	sp, #88	; 0x58
 8007628:	4614      	mov	r4, r2
 800762a:	461d      	mov	r5, r3
 800762c:	da07      	bge.n	800763e <__swhatbuf_r+0x22>
 800762e:	2300      	movs	r3, #0
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	89b3      	ldrh	r3, [r6, #12]
 8007634:	061a      	lsls	r2, r3, #24
 8007636:	d410      	bmi.n	800765a <__swhatbuf_r+0x3e>
 8007638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800763c:	e00e      	b.n	800765c <__swhatbuf_r+0x40>
 800763e:	466a      	mov	r2, sp
 8007640:	f000 f902 	bl	8007848 <_fstat_r>
 8007644:	2800      	cmp	r0, #0
 8007646:	dbf2      	blt.n	800762e <__swhatbuf_r+0x12>
 8007648:	9a01      	ldr	r2, [sp, #4]
 800764a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800764e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007652:	425a      	negs	r2, r3
 8007654:	415a      	adcs	r2, r3
 8007656:	602a      	str	r2, [r5, #0]
 8007658:	e7ee      	b.n	8007638 <__swhatbuf_r+0x1c>
 800765a:	2340      	movs	r3, #64	; 0x40
 800765c:	2000      	movs	r0, #0
 800765e:	6023      	str	r3, [r4, #0]
 8007660:	b016      	add	sp, #88	; 0x58
 8007662:	bd70      	pop	{r4, r5, r6, pc}

08007664 <__smakebuf_r>:
 8007664:	898b      	ldrh	r3, [r1, #12]
 8007666:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007668:	079d      	lsls	r5, r3, #30
 800766a:	4606      	mov	r6, r0
 800766c:	460c      	mov	r4, r1
 800766e:	d507      	bpl.n	8007680 <__smakebuf_r+0x1c>
 8007670:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	6123      	str	r3, [r4, #16]
 8007678:	2301      	movs	r3, #1
 800767a:	6163      	str	r3, [r4, #20]
 800767c:	b002      	add	sp, #8
 800767e:	bd70      	pop	{r4, r5, r6, pc}
 8007680:	ab01      	add	r3, sp, #4
 8007682:	466a      	mov	r2, sp
 8007684:	f7ff ffca 	bl	800761c <__swhatbuf_r>
 8007688:	9900      	ldr	r1, [sp, #0]
 800768a:	4605      	mov	r5, r0
 800768c:	4630      	mov	r0, r6
 800768e:	f7ff f987 	bl	80069a0 <_malloc_r>
 8007692:	b948      	cbnz	r0, 80076a8 <__smakebuf_r+0x44>
 8007694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007698:	059a      	lsls	r2, r3, #22
 800769a:	d4ef      	bmi.n	800767c <__smakebuf_r+0x18>
 800769c:	f023 0303 	bic.w	r3, r3, #3
 80076a0:	f043 0302 	orr.w	r3, r3, #2
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	e7e3      	b.n	8007670 <__smakebuf_r+0xc>
 80076a8:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <__smakebuf_r+0x7c>)
 80076aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	6020      	str	r0, [r4, #0]
 80076b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076b4:	81a3      	strh	r3, [r4, #12]
 80076b6:	9b00      	ldr	r3, [sp, #0]
 80076b8:	6163      	str	r3, [r4, #20]
 80076ba:	9b01      	ldr	r3, [sp, #4]
 80076bc:	6120      	str	r0, [r4, #16]
 80076be:	b15b      	cbz	r3, 80076d8 <__smakebuf_r+0x74>
 80076c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076c4:	4630      	mov	r0, r6
 80076c6:	f000 f8d1 	bl	800786c <_isatty_r>
 80076ca:	b128      	cbz	r0, 80076d8 <__smakebuf_r+0x74>
 80076cc:	89a3      	ldrh	r3, [r4, #12]
 80076ce:	f023 0303 	bic.w	r3, r3, #3
 80076d2:	f043 0301 	orr.w	r3, r3, #1
 80076d6:	81a3      	strh	r3, [r4, #12]
 80076d8:	89a0      	ldrh	r0, [r4, #12]
 80076da:	4305      	orrs	r5, r0
 80076dc:	81a5      	strh	r5, [r4, #12]
 80076de:	e7cd      	b.n	800767c <__smakebuf_r+0x18>
 80076e0:	08007475 	.word	0x08007475

080076e4 <_malloc_usable_size_r>:
 80076e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e8:	1f18      	subs	r0, r3, #4
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bfbc      	itt	lt
 80076ee:	580b      	ldrlt	r3, [r1, r0]
 80076f0:	18c0      	addlt	r0, r0, r3
 80076f2:	4770      	bx	lr

080076f4 <_raise_r>:
 80076f4:	291f      	cmp	r1, #31
 80076f6:	b538      	push	{r3, r4, r5, lr}
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	d904      	bls.n	8007708 <_raise_r+0x14>
 80076fe:	2316      	movs	r3, #22
 8007700:	6003      	str	r3, [r0, #0]
 8007702:	f04f 30ff 	mov.w	r0, #4294967295
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800770a:	b112      	cbz	r2, 8007712 <_raise_r+0x1e>
 800770c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007710:	b94b      	cbnz	r3, 8007726 <_raise_r+0x32>
 8007712:	4620      	mov	r0, r4
 8007714:	f000 f830 	bl	8007778 <_getpid_r>
 8007718:	462a      	mov	r2, r5
 800771a:	4601      	mov	r1, r0
 800771c:	4620      	mov	r0, r4
 800771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007722:	f000 b817 	b.w	8007754 <_kill_r>
 8007726:	2b01      	cmp	r3, #1
 8007728:	d00a      	beq.n	8007740 <_raise_r+0x4c>
 800772a:	1c59      	adds	r1, r3, #1
 800772c:	d103      	bne.n	8007736 <_raise_r+0x42>
 800772e:	2316      	movs	r3, #22
 8007730:	6003      	str	r3, [r0, #0]
 8007732:	2001      	movs	r0, #1
 8007734:	e7e7      	b.n	8007706 <_raise_r+0x12>
 8007736:	2400      	movs	r4, #0
 8007738:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800773c:	4628      	mov	r0, r5
 800773e:	4798      	blx	r3
 8007740:	2000      	movs	r0, #0
 8007742:	e7e0      	b.n	8007706 <_raise_r+0x12>

08007744 <raise>:
 8007744:	4b02      	ldr	r3, [pc, #8]	; (8007750 <raise+0xc>)
 8007746:	4601      	mov	r1, r0
 8007748:	6818      	ldr	r0, [r3, #0]
 800774a:	f7ff bfd3 	b.w	80076f4 <_raise_r>
 800774e:	bf00      	nop
 8007750:	2000003c 	.word	0x2000003c

08007754 <_kill_r>:
 8007754:	b538      	push	{r3, r4, r5, lr}
 8007756:	4d07      	ldr	r5, [pc, #28]	; (8007774 <_kill_r+0x20>)
 8007758:	2300      	movs	r3, #0
 800775a:	4604      	mov	r4, r0
 800775c:	4608      	mov	r0, r1
 800775e:	4611      	mov	r1, r2
 8007760:	602b      	str	r3, [r5, #0]
 8007762:	f7fa f917 	bl	8001994 <_kill>
 8007766:	1c43      	adds	r3, r0, #1
 8007768:	d102      	bne.n	8007770 <_kill_r+0x1c>
 800776a:	682b      	ldr	r3, [r5, #0]
 800776c:	b103      	cbz	r3, 8007770 <_kill_r+0x1c>
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	bd38      	pop	{r3, r4, r5, pc}
 8007772:	bf00      	nop
 8007774:	20000f0c 	.word	0x20000f0c

08007778 <_getpid_r>:
 8007778:	f7fa b904 	b.w	8001984 <_getpid>

0800777c <__sread>:
 800777c:	b510      	push	{r4, lr}
 800777e:	460c      	mov	r4, r1
 8007780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007784:	f000 f894 	bl	80078b0 <_read_r>
 8007788:	2800      	cmp	r0, #0
 800778a:	bfab      	itete	ge
 800778c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800778e:	89a3      	ldrhlt	r3, [r4, #12]
 8007790:	181b      	addge	r3, r3, r0
 8007792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007796:	bfac      	ite	ge
 8007798:	6563      	strge	r3, [r4, #84]	; 0x54
 800779a:	81a3      	strhlt	r3, [r4, #12]
 800779c:	bd10      	pop	{r4, pc}

0800779e <__swrite>:
 800779e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a2:	461f      	mov	r7, r3
 80077a4:	898b      	ldrh	r3, [r1, #12]
 80077a6:	05db      	lsls	r3, r3, #23
 80077a8:	4605      	mov	r5, r0
 80077aa:	460c      	mov	r4, r1
 80077ac:	4616      	mov	r6, r2
 80077ae:	d505      	bpl.n	80077bc <__swrite+0x1e>
 80077b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b4:	2302      	movs	r3, #2
 80077b6:	2200      	movs	r2, #0
 80077b8:	f000 f868 	bl	800788c <_lseek_r>
 80077bc:	89a3      	ldrh	r3, [r4, #12]
 80077be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077c6:	81a3      	strh	r3, [r4, #12]
 80077c8:	4632      	mov	r2, r6
 80077ca:	463b      	mov	r3, r7
 80077cc:	4628      	mov	r0, r5
 80077ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077d2:	f000 b817 	b.w	8007804 <_write_r>

080077d6 <__sseek>:
 80077d6:	b510      	push	{r4, lr}
 80077d8:	460c      	mov	r4, r1
 80077da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077de:	f000 f855 	bl	800788c <_lseek_r>
 80077e2:	1c43      	adds	r3, r0, #1
 80077e4:	89a3      	ldrh	r3, [r4, #12]
 80077e6:	bf15      	itete	ne
 80077e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80077ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077f2:	81a3      	strheq	r3, [r4, #12]
 80077f4:	bf18      	it	ne
 80077f6:	81a3      	strhne	r3, [r4, #12]
 80077f8:	bd10      	pop	{r4, pc}

080077fa <__sclose>:
 80077fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077fe:	f000 b813 	b.w	8007828 <_close_r>
	...

08007804 <_write_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4d07      	ldr	r5, [pc, #28]	; (8007824 <_write_r+0x20>)
 8007808:	4604      	mov	r4, r0
 800780a:	4608      	mov	r0, r1
 800780c:	4611      	mov	r1, r2
 800780e:	2200      	movs	r2, #0
 8007810:	602a      	str	r2, [r5, #0]
 8007812:	461a      	mov	r2, r3
 8007814:	f7fa f8f5 	bl	8001a02 <_write>
 8007818:	1c43      	adds	r3, r0, #1
 800781a:	d102      	bne.n	8007822 <_write_r+0x1e>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	b103      	cbz	r3, 8007822 <_write_r+0x1e>
 8007820:	6023      	str	r3, [r4, #0]
 8007822:	bd38      	pop	{r3, r4, r5, pc}
 8007824:	20000f0c 	.word	0x20000f0c

08007828 <_close_r>:
 8007828:	b538      	push	{r3, r4, r5, lr}
 800782a:	4d06      	ldr	r5, [pc, #24]	; (8007844 <_close_r+0x1c>)
 800782c:	2300      	movs	r3, #0
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	602b      	str	r3, [r5, #0]
 8007834:	f7fa f901 	bl	8001a3a <_close>
 8007838:	1c43      	adds	r3, r0, #1
 800783a:	d102      	bne.n	8007842 <_close_r+0x1a>
 800783c:	682b      	ldr	r3, [r5, #0]
 800783e:	b103      	cbz	r3, 8007842 <_close_r+0x1a>
 8007840:	6023      	str	r3, [r4, #0]
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	20000f0c 	.word	0x20000f0c

08007848 <_fstat_r>:
 8007848:	b538      	push	{r3, r4, r5, lr}
 800784a:	4d07      	ldr	r5, [pc, #28]	; (8007868 <_fstat_r+0x20>)
 800784c:	2300      	movs	r3, #0
 800784e:	4604      	mov	r4, r0
 8007850:	4608      	mov	r0, r1
 8007852:	4611      	mov	r1, r2
 8007854:	602b      	str	r3, [r5, #0]
 8007856:	f7fa f8fc 	bl	8001a52 <_fstat>
 800785a:	1c43      	adds	r3, r0, #1
 800785c:	d102      	bne.n	8007864 <_fstat_r+0x1c>
 800785e:	682b      	ldr	r3, [r5, #0]
 8007860:	b103      	cbz	r3, 8007864 <_fstat_r+0x1c>
 8007862:	6023      	str	r3, [r4, #0]
 8007864:	bd38      	pop	{r3, r4, r5, pc}
 8007866:	bf00      	nop
 8007868:	20000f0c 	.word	0x20000f0c

0800786c <_isatty_r>:
 800786c:	b538      	push	{r3, r4, r5, lr}
 800786e:	4d06      	ldr	r5, [pc, #24]	; (8007888 <_isatty_r+0x1c>)
 8007870:	2300      	movs	r3, #0
 8007872:	4604      	mov	r4, r0
 8007874:	4608      	mov	r0, r1
 8007876:	602b      	str	r3, [r5, #0]
 8007878:	f7fa f8fb 	bl	8001a72 <_isatty>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_isatty_r+0x1a>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_isatty_r+0x1a>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	20000f0c 	.word	0x20000f0c

0800788c <_lseek_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4d07      	ldr	r5, [pc, #28]	; (80078ac <_lseek_r+0x20>)
 8007890:	4604      	mov	r4, r0
 8007892:	4608      	mov	r0, r1
 8007894:	4611      	mov	r1, r2
 8007896:	2200      	movs	r2, #0
 8007898:	602a      	str	r2, [r5, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	f7fa f8f4 	bl	8001a88 <_lseek>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_lseek_r+0x1e>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_lseek_r+0x1e>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	20000f0c 	.word	0x20000f0c

080078b0 <_read_r>:
 80078b0:	b538      	push	{r3, r4, r5, lr}
 80078b2:	4d07      	ldr	r5, [pc, #28]	; (80078d0 <_read_r+0x20>)
 80078b4:	4604      	mov	r4, r0
 80078b6:	4608      	mov	r0, r1
 80078b8:	4611      	mov	r1, r2
 80078ba:	2200      	movs	r2, #0
 80078bc:	602a      	str	r2, [r5, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	f7fa f882 	bl	80019c8 <_read>
 80078c4:	1c43      	adds	r3, r0, #1
 80078c6:	d102      	bne.n	80078ce <_read_r+0x1e>
 80078c8:	682b      	ldr	r3, [r5, #0]
 80078ca:	b103      	cbz	r3, 80078ce <_read_r+0x1e>
 80078cc:	6023      	str	r3, [r4, #0]
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	20000f0c 	.word	0x20000f0c

080078d4 <_init>:
 80078d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d6:	bf00      	nop
 80078d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078da:	bc08      	pop	{r3}
 80078dc:	469e      	mov	lr, r3
 80078de:	4770      	bx	lr

080078e0 <_fini>:
 80078e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e2:	bf00      	nop
 80078e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078e6:	bc08      	pop	{r3}
 80078e8:	469e      	mov	lr, r3
 80078ea:	4770      	bx	lr
