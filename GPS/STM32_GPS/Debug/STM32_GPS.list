
STM32_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000589c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080059b0  080059b0  000159b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e14  08005e14  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08005e14  08005e14  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005e14  08005e14  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e14  08005e14  00015e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e18  08005e18  00015e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08005e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c0  200001e8  08006004  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  08006004  000206a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d9e  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bbb  00000000  00000000  00028faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0002ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000660  00000000  00000000  0002b2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018208  00000000  00000000  0002b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008473  00000000  00000000  00043b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083604  00000000  00000000  0004bf83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cf587  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002de4  00000000  00000000  000cf5dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005994 	.word	0x08005994

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08005994 	.word	0x08005994

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_d2uiz>:
 8000a20:	004a      	lsls	r2, r1, #1
 8000a22:	d211      	bcs.n	8000a48 <__aeabi_d2uiz+0x28>
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d211      	bcs.n	8000a4e <__aeabi_d2uiz+0x2e>
 8000a2a:	d50d      	bpl.n	8000a48 <__aeabi_d2uiz+0x28>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d40e      	bmi.n	8000a54 <__aeabi_d2uiz+0x34>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	4770      	bx	lr
 8000a48:	f04f 0000 	mov.w	r0, #0
 8000a4c:	4770      	bx	lr
 8000a4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_d2uiz+0x3a>
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0000 	mov.w	r0, #0
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2lz>:
 8000b00:	b538      	push	{r3, r4, r5, lr}
 8000b02:	460c      	mov	r4, r1
 8000b04:	4605      	mov	r5, r0
 8000b06:	4621      	mov	r1, r4
 8000b08:	4628      	mov	r0, r5
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f7ff ff5f 	bl	80009d0 <__aeabi_dcmplt>
 8000b12:	b928      	cbnz	r0, 8000b20 <__aeabi_d2lz+0x20>
 8000b14:	4628      	mov	r0, r5
 8000b16:	4621      	mov	r1, r4
 8000b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b1c:	f000 b80a 	b.w	8000b34 <__aeabi_d2ulz>
 8000b20:	4628      	mov	r0, r5
 8000b22:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b26:	f000 f805 	bl	8000b34 <__aeabi_d2ulz>
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2ulz>:
 8000b34:	b5d0      	push	{r4, r6, r7, lr}
 8000b36:	2200      	movs	r2, #0
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <__aeabi_d2ulz+0x34>)
 8000b3a:	4606      	mov	r6, r0
 8000b3c:	460f      	mov	r7, r1
 8000b3e:	f7ff fcd5 	bl	80004ec <__aeabi_dmul>
 8000b42:	f7ff ff6d 	bl	8000a20 <__aeabi_d2uiz>
 8000b46:	4604      	mov	r4, r0
 8000b48:	f7ff fc56 	bl	80003f8 <__aeabi_ui2d>
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <__aeabi_d2ulz+0x38>)
 8000b50:	f7ff fccc 	bl	80004ec <__aeabi_dmul>
 8000b54:	4602      	mov	r2, r0
 8000b56:	460b      	mov	r3, r1
 8000b58:	4630      	mov	r0, r6
 8000b5a:	4639      	mov	r1, r7
 8000b5c:	f7ff fb0e 	bl	800017c <__aeabi_dsub>
 8000b60:	f7ff ff5e 	bl	8000a20 <__aeabi_d2uiz>
 8000b64:	4621      	mov	r1, r4
 8000b66:	bdd0      	pop	{r4, r6, r7, pc}
 8000b68:	3df00000 	.word	0x3df00000
 8000b6c:	41f00000 	.word	0x41f00000

08000b70 <readGPS>:
char GPSFormat[6] = "$GPGGA";

uint8_t rawData[GPS_BUFSIZE] = {0};
uint8_t GPSData[GPS_BUFSIZE] = {0};

int8_t readGPS(UART_HandleTypeDef *uart, GPS_FIX_DATA *data){
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b0c9      	sub	sp, #292	; 0x124
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	6018      	str	r0, [r3, #0]
 8000b7a:	463b      	mov	r3, r7
 8000b7c:	6019      	str	r1, [r3, #0]

	int flag = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	//HAL_UART_Receive(uart, rawData , GPS_BUFSIZE, HAL_MAX_DELAY); // Reads incoming UART transmission and blocks the CPU until 255 bytes is received.

	HAL_UART_Receive_DMA(uart, rawData, GPS_BUFSIZE);
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b8a:	4980      	ldr	r1, [pc, #512]	; (8000d8c <readGPS+0x21c>)
 8000b8c:	6818      	ldr	r0, [r3, #0]
 8000b8e:	f001 fddd 	bl	800274c <HAL_UART_Receive_DMA>

	for (uint16_t i = 0 ; i < GPS_BUFSIZE && flag != 1 ; i = i + 1){ // Looking for start of data format indicated as '$'
 8000b92:	2300      	movs	r3, #0
 8000b94:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8000b98:	e065      	b.n	8000c66 <readGPS+0xf6>
		if (rawData[i] == '$') {
 8000b9a:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000b9e:	4a7b      	ldr	r2, [pc, #492]	; (8000d8c <readGPS+0x21c>)
 8000ba0:	5cd3      	ldrb	r3, [r2, r3]
 8000ba2:	2b24      	cmp	r3, #36	; 0x24
 8000ba4:	d15a      	bne.n	8000c5c <readGPS+0xec>
			char formatTest[6] = { 0 }; // String for format comparison, i.e. $GPGGA
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000bac:	2300      	movs	r3, #0
 8000bae:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
			int check = 5; // Something else than 0 just for safety, since 0 means correct match
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			for (uint8_t x = 0; x < 6; x = x + 1) {  // Loops over the next 6 characters and puts then in an array to check for the desired format
 8000bb8:	2300      	movs	r3, #0
 8000bba:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8000bbe:	e049      	b.n	8000c54 <readGPS+0xe4>
				formatTest[x] = rawData[i + x];
 8000bc0:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8000bc4:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8000bc8:	441a      	add	r2, r3
 8000bca:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8000bce:	496f      	ldr	r1, [pc, #444]	; (8000d8c <readGPS+0x21c>)
 8000bd0:	5c8a      	ldrb	r2, [r1, r2]
 8000bd2:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000bd6:	440b      	add	r3, r1
 8000bd8:	f803 2c1c 	strb.w	r2, [r3, #-28]
				check = strcmp(formatTest, GPSFormat);
 8000bdc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000be0:	496b      	ldr	r1, [pc, #428]	; (8000d90 <readGPS+0x220>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fab4 	bl	8000150 <strcmp>
 8000be8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c

				if (check == 0) {
 8000bec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d12a      	bne.n	8000c4a <readGPS+0xda>

					uint8_t counter = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
					for (i = i + 1; i < GPS_BUFSIZE; i = i + 1) { // loops until a '$' is found.
 8000bfa:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000bfe:	3301      	adds	r3, #1
 8000c00:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8000c04:	e01c      	b.n	8000c40 <readGPS+0xd0>
						if (rawData[i] != '$') {
 8000c06:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000c0a:	4a60      	ldr	r2, [pc, #384]	; (8000d8c <readGPS+0x21c>)
 8000c0c:	5cd3      	ldrb	r3, [r2, r3]
 8000c0e:	2b24      	cmp	r3, #36	; 0x24
 8000c10:	d00d      	beq.n	8000c2e <readGPS+0xbe>
							GPSData[counter] = rawData[i]; // Desired data format (GPGGA) is passed into another array
 8000c12:	f8b7 211a 	ldrh.w	r2, [r7, #282]	; 0x11a
 8000c16:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8000c1a:	495c      	ldr	r1, [pc, #368]	; (8000d8c <readGPS+0x21c>)
 8000c1c:	5c89      	ldrb	r1, [r1, r2]
 8000c1e:	4a5d      	ldr	r2, [pc, #372]	; (8000d94 <readGPS+0x224>)
 8000c20:	54d1      	strb	r1, [r2, r3]
							counter = counter + 1;
 8000c22:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 8000c26:	3301      	adds	r3, #1
 8000c28:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 8000c2c:	e003      	b.n	8000c36 <readGPS+0xc6>
						} else {
							flag = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
							break;
 8000c34:	e009      	b.n	8000c4a <readGPS+0xda>
					for (i = i + 1; i < GPS_BUFSIZE; i = i + 1) { // loops until a '$' is found.
 8000c36:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8000c40:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c48:	d3dd      	bcc.n	8000c06 <readGPS+0x96>
			for (uint8_t x = 0; x < 6; x = x + 1) {  // Loops over the next 6 characters and puts then in an array to check for the desired format
 8000c4a:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8000c4e:	3301      	adds	r3, #1
 8000c50:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8000c54:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8000c58:	2b05      	cmp	r3, #5
 8000c5a:	d9b1      	bls.n	8000bc0 <readGPS+0x50>
	for (uint16_t i = 0 ; i < GPS_BUFSIZE && flag != 1 ; i = i + 1){ // Looking for start of data format indicated as '$'
 8000c5c:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000c60:	3301      	adds	r3, #1
 8000c62:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
 8000c66:	f8b7 311a 	ldrh.w	r3, [r7, #282]	; 0x11a
 8000c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c6e:	d203      	bcs.n	8000c78 <readGPS+0x108>
 8000c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d190      	bne.n	8000b9a <readGPS+0x2a>
				}
			}
		}
	}

	if (flag != 1) {
 8000c78:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d001      	beq.n	8000c84 <readGPS+0x114>

		return 0; // No data available / Invalid data
 8000c80:	2300      	movs	r3, #0
 8000c82:	e14f      	b.n	8000f24 <readGPS+0x3b4>

	} else {

		uint8_t cksum_received = 0; // Check sum of received data
 8000c84:	2300      	movs	r3, #0
 8000c86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

		for (uint16_t i = 0; i < GPS_DATASIZE; i++) {
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8000c90:	e013      	b.n	8000cba <readGPS+0x14a>
			if (GPSData[i] == '*') break;
 8000c92:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000c96:	4a3f      	ldr	r2, [pc, #252]	; (8000d94 <readGPS+0x224>)
 8000c98:	5cd3      	ldrb	r3, [r2, r3]
 8000c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8000c9c:	d012      	beq.n	8000cc4 <readGPS+0x154>
			cksum_received ^= GPSData[i];
 8000c9e:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000ca2:	4a3c      	ldr	r2, [pc, #240]	; (8000d94 <readGPS+0x224>)
 8000ca4:	5cd2      	ldrb	r2, [r2, r3]
 8000ca6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000caa:	4053      	eors	r3, r2
 8000cac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		for (uint16_t i = 0; i < GPS_DATASIZE; i++) {
 8000cb0:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
 8000cba:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000cbe:	2b52      	cmp	r3, #82	; 0x52
 8000cc0:	d9e7      	bls.n	8000c92 <readGPS+0x122>
 8000cc2:	e000      	b.n	8000cc6 <readGPS+0x156>
			if (GPSData[i] == '*') break;
 8000cc4:	bf00      	nop
		}

		// Divide GPSData string up in individual sections, each one in its own array sections[i]
		uint8_t sectionNum = 0, sectionChar = 0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

		char sections[GPS_SECTIONS][GPS_SEC_LENGTH] = { 0 };
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	23e1      	movs	r3, #225	; 0xe1
 8000cda:	461a      	mov	r2, r3
 8000cdc:	2100      	movs	r1, #0
 8000cde:	f001 ff4f 	bl	8002b80 <memset>

		for (uint16_t i = 0; i < GPS_DATASIZE; i++) {
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8000ce8:	e029      	b.n	8000d3e <readGPS+0x1ce>

			if (GPSData[i] == ',') {
 8000cea:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8000cee:	4a29      	ldr	r2, [pc, #164]	; (8000d94 <readGPS+0x224>)
 8000cf0:	5cd3      	ldrb	r3, [r2, r3]
 8000cf2:	2b2c      	cmp	r3, #44	; 0x2c
 8000cf4:	d108      	bne.n	8000d08 <readGPS+0x198>
				sectionNum++;
 8000cf6:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
				sectionChar = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
 8000d06:	e015      	b.n	8000d34 <readGPS+0x1c4>
			}
			else {
				sections[sectionNum][sectionChar] = GPSData[i];
 8000d08:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8000d0c:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 8000d10:	f897 1112 	ldrb.w	r1, [r7, #274]	; 0x112
 8000d14:	481f      	ldr	r0, [pc, #124]	; (8000d94 <readGPS+0x224>)
 8000d16:	5cc4      	ldrb	r4, [r0, r3]
 8000d18:	f107 000c 	add.w	r0, r7, #12
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	1a9b      	subs	r3, r3, r2
 8000d22:	4403      	add	r3, r0
 8000d24:	440b      	add	r3, r1
 8000d26:	4622      	mov	r2, r4
 8000d28:	701a      	strb	r2, [r3, #0]
				sectionChar++;
 8000d2a:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8000d2e:	3301      	adds	r3, #1
 8000d30:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
		for (uint16_t i = 0; i < GPS_DATASIZE; i++) {
 8000d34:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8000d38:	3301      	adds	r3, #1
 8000d3a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
 8000d3e:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
 8000d42:	2b52      	cmp	r3, #82	; 0x52
 8000d44:	d9d1      	bls.n	8000cea <readGPS+0x17a>
			}
		}

		// Convert gps data from sections[i] into GPS_FIX_DATA struct
		char ck[3] = { sections[14][1], sections[14][2], 0};
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 8000d4e:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100
 8000d52:	f107 030c 	add.w	r3, r7, #12
 8000d56:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8000d5a:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102

		char *eptr;
		uint8_t cksum_sent	=	strtol(ck, &eptr, 16);
 8000d64:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 8000d68:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000d6c:	2210      	movs	r2, #16
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 fdc8 	bl	8003904 <strtol>
 8000d74:	4603      	mov	r3, r0
 8000d76:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b

		if (cksum_sent != cksum_received) return -1;
 8000d7a:	f897 210b 	ldrb.w	r2, [r7, #267]	; 0x10b
 8000d7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d008      	beq.n	8000d98 <readGPS+0x228>
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	e0cb      	b.n	8000f24 <readGPS+0x3b4>
 8000d8c:	20000204 	.word	0x20000204
 8000d90:	20000000 	.word	0x20000000
 8000d94:	20000404 	.word	0x20000404

		char h[3] = {0}, m[3] = {0}, s[3] = {0};
 8000d98:	4b65      	ldr	r3, [pc, #404]	; (8000f30 <readGPS+0x3c0>)
 8000d9a:	881b      	ldrh	r3, [r3, #0]
 8000d9c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8000da0:	2300      	movs	r3, #0
 8000da2:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 8000da6:	4b62      	ldr	r3, [pc, #392]	; (8000f30 <readGPS+0x3c0>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8000dae:	2300      	movs	r3, #0
 8000db0:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6
 8000db4:	4b5e      	ldr	r3, [pc, #376]	; (8000f30 <readGPS+0x3c0>)
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2

		strncpy(h, sections[1], 2);
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	f103 010f 	add.w	r1, r3, #15
 8000dca:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000dce:	2202      	movs	r2, #2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fedd 	bl	8002b90 <strncpy>
		strncpy(m, sections[1] + 2, 2);
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	330f      	adds	r3, #15
 8000ddc:	3302      	adds	r3, #2
 8000dde:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8000de2:	2202      	movs	r2, #2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f001 fed3 	bl	8002b90 <strncpy>
		strncpy(s, sections[1] + 4, 2);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	330f      	adds	r3, #15
 8000df0:	3304      	adds	r3, #4
 8000df2:	f107 00f0 	add.w	r0, r7, #240	; 0xf0
 8000df6:	2202      	movs	r2, #2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f001 fec9 	bl	8002b90 <strncpy>

		data->HOURS = 	atoi(h);
 8000dfe:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fe8d 	bl	8002b22 <atoi>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	701a      	strb	r2, [r3, #0]
		data->MIN = 	atoi(m);
 8000e12:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fe83 	bl	8002b22 <atoi>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	463b      	mov	r3, r7
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	705a      	strb	r2, [r3, #1]
		data->SEC = 	atoi(s);
 8000e26:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fe79 	bl	8002b22 <atoi>
 8000e30:	4603      	mov	r3, r0
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	463b      	mov	r3, r7
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	709a      	strb	r2, [r3, #2]

		data->LAT = 	atof(sections[2]);
 8000e3a:	f107 030c 	add.w	r3, r7, #12
 8000e3e:	331e      	adds	r3, #30
 8000e40:	4618      	mov	r0, r3
 8000e42:	f001 fe6b 	bl	8002b1c <atof>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f7ff fe07 	bl	8000a60 <__aeabi_d2f>
 8000e52:	4602      	mov	r2, r0
 8000e54:	463b      	mov	r3, r7
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
		data->LAT_DIR = sections[3][0];
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8000e62:	463b      	mov	r3, r7
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	721a      	strb	r2, [r3, #8]
		data->LON = 	atof(sections[4]);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	333c      	adds	r3, #60	; 0x3c
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fe54 	bl	8002b1c <atof>
 8000e74:	4602      	mov	r2, r0
 8000e76:	460b      	mov	r3, r1
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f7ff fdf0 	bl	8000a60 <__aeabi_d2f>
 8000e80:	4602      	mov	r2, r0
 8000e82:	463b      	mov	r3, r7
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	60da      	str	r2, [r3, #12]
		data->LON_DIR =	sections[5][0];
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8000e90:	463b      	mov	r3, r7
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	741a      	strb	r2, [r3, #16]
		data->QUALITY = atoi(sections[6]);
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	335a      	adds	r3, #90	; 0x5a
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 fe40 	bl	8002b22 <atoi>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	745a      	strb	r2, [r3, #17]
		data->SATS = 	atoi(sections[7]);
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	3369      	adds	r3, #105	; 0x69
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fe35 	bl	8002b22 <atoi>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	749a      	strb	r2, [r3, #18]
		data->HDOP = 	atof(sections[8]);
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	3378      	adds	r3, #120	; 0x78
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f001 fe27 	bl	8002b1c <atof>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	460b      	mov	r3, r1
 8000ed2:	4610      	mov	r0, r2
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f7ff fdc3 	bl	8000a60 <__aeabi_d2f>
 8000eda:	4602      	mov	r2, r0
 8000edc:	463b      	mov	r3, r7
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	615a      	str	r2, [r3, #20]
		data->ALTITUDE=	atof(sections[9]);
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	3387      	adds	r3, #135	; 0x87
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f001 fe17 	bl	8002b1c <atof>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fdb3 	bl	8000a60 <__aeabi_d2f>
 8000efa:	4602      	mov	r2, r0
 8000efc:	463b      	mov	r3, r7
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	619a      	str	r2, [r3, #24]
		data->H_GEOID =	atof(sections[11]);
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	33a5      	adds	r3, #165	; 0xa5
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 fe07 	bl	8002b1c <atof>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fda3 	bl	8000a60 <__aeabi_d2f>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61da      	str	r2, [r3, #28]
		return 1;
 8000f22:	2301      	movs	r3, #1
	}
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd90      	pop	{r4, r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	080059b0 	.word	0x080059b0

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 fa99 	bl	8001470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f81b 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f8a7 	bl	8001094 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f46:	f000 f887 	bl	8001058 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000f4a:	f000 f85b 	bl	8001004 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 GPS_FIX_DATA data = { 0 };
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2220      	movs	r2, #32
 8000f52:	2100      	movs	r1, #0
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fe13 	bl	8002b80 <memset>

	 int8_t result = readGPS(&huart1, &data);
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <main+0x40>)
 8000f60:	f7ff fe06 	bl	8000b70 <readGPS>
 8000f64:	4603      	mov	r3, r0
 8000f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	 HAL_Delay(1000);
 8000f6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6e:	f000 fae1 	bl	8001534 <HAL_Delay>
  {
 8000f72:	e7ec      	b.n	8000f4e <main+0x1a>
 8000f74:	20000654 	.word	0x20000654

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b090      	sub	sp, #64	; 0x40
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	2228      	movs	r2, #40	; 0x28
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f001 fdfa 	bl	8002b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fac:	2302      	movs	r3, #2
 8000fae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 ff5b 	bl	8001e7c <HAL_RCC_OscConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fcc:	f000 f884 	bl	80010d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2102      	movs	r1, #2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 f9c6 	bl	800237c <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ff6:	f000 f86f 	bl	80010d8 <Error_Handler>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3740      	adds	r7, #64	; 0x40
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001008:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 800100a:	4a12      	ldr	r2, [pc, #72]	; (8001054 <MX_USART1_UART_Init+0x50>)
 800100c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800100e:	4b10      	ldr	r3, [pc, #64]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 8001010:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001014:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 800102a:	220c      	movs	r2, #12
 800102c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_USART1_UART_Init+0x4c>)
 800103c:	f001 fb38 	bl	80026b0 <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001046:	f000 f847 	bl	80010d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000654 	.word	0x20000654
 8001054:	40013800 	.word	0x40013800

08001058 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <MX_DMA_Init+0x38>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <MX_DMA_Init+0x38>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6153      	str	r3, [r2, #20]
 800106a:	4b09      	ldr	r3, [pc, #36]	; (8001090 <MX_DMA_Init+0x38>)
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2100      	movs	r1, #0
 800107a:	200f      	movs	r0, #15
 800107c:	f000 fb55 	bl	800172a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001080:	200f      	movs	r0, #15
 8001082:	f000 fb6e 	bl	8001762 <HAL_NVIC_EnableIRQ>

}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_GPIO_Init+0x40>)
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <MX_GPIO_Init+0x40>)
 80010a0:	f043 0320 	orr.w	r3, r3, #32
 80010a4:	6193      	str	r3, [r2, #24]
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_GPIO_Init+0x40>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	f003 0320 	and.w	r3, r3, #32
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_GPIO_Init+0x40>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <MX_GPIO_Init+0x40>)
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	6193      	str	r3, [r2, #24]
 80010be:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <MX_GPIO_Init+0x40>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f003 0304 	and.w	r3, r3, #4
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000

080010d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010dc:	b672      	cpsid	i
}
 80010de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <Error_Handler+0x8>
	...

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <HAL_MspInit+0x5c>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <HAL_MspInit+0x5c>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6193      	str	r3, [r2, #24]
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_MspInit+0x5c>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_MspInit+0x5c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <HAL_MspInit+0x5c>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_MspInit+0x5c>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <HAL_MspInit+0x60>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <HAL_MspInit+0x60>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000

08001148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b088      	sub	sp, #32
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a2f      	ldr	r2, [pc, #188]	; (8001220 <HAL_UART_MspInit+0xd8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d157      	bne.n	8001218 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <HAL_UART_MspInit+0xdc>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a2d      	ldr	r2, [pc, #180]	; (8001224 <HAL_UART_MspInit+0xdc>)
 800116e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <HAL_UART_MspInit+0xdc>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b28      	ldr	r3, [pc, #160]	; (8001224 <HAL_UART_MspInit+0xdc>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a27      	ldr	r2, [pc, #156]	; (8001224 <HAL_UART_MspInit+0xdc>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <HAL_UART_MspInit+0xdc>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001198:	f44f 7300 	mov.w	r3, #512	; 0x200
 800119c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119e:	2302      	movs	r3, #2
 80011a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a2:	2303      	movs	r3, #3
 80011a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0310 	add.w	r3, r7, #16
 80011aa:	4619      	mov	r1, r3
 80011ac:	481e      	ldr	r0, [pc, #120]	; (8001228 <HAL_UART_MspInit+0xe0>)
 80011ae:	f000 fce1 	bl	8001b74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 0310 	add.w	r3, r7, #16
 80011c4:	4619      	mov	r1, r3
 80011c6:	4818      	ldr	r0, [pc, #96]	; (8001228 <HAL_UART_MspInit+0xe0>)
 80011c8:	f000 fcd4 	bl	8001b74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_UART_MspInit+0xe4>)
 80011ce:	4a18      	ldr	r2, [pc, #96]	; (8001230 <HAL_UART_MspInit+0xe8>)
 80011d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_UART_MspInit+0xe4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_UART_MspInit+0xe4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_UART_MspInit+0xe4>)
 80011e0:	2280      	movs	r2, #128	; 0x80
 80011e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_UART_MspInit+0xe4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <HAL_UART_MspInit+0xe4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <HAL_UART_MspInit+0xe4>)
 80011f2:	2220      	movs	r2, #32
 80011f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_UART_MspInit+0xe4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80011fc:	480b      	ldr	r0, [pc, #44]	; (800122c <HAL_UART_MspInit+0xe4>)
 80011fe:	f000 facb 	bl	8001798 <HAL_DMA_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001208:	f7ff ff66 	bl	80010d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a07      	ldr	r2, [pc, #28]	; (800122c <HAL_UART_MspInit+0xe4>)
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
 8001212:	4a06      	ldr	r2, [pc, #24]	; (800122c <HAL_UART_MspInit+0xe4>)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40013800 	.word	0x40013800
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800
 800122c:	20000610 	.word	0x20000610
 8001230:	40020058 	.word	0x40020058

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr

0800126a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr

08001276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127a:	f000 f93f 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <DMA1_Channel5_IRQHandler+0x10>)
 800128a:	f000 fb3f 	bl	800190c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000610 	.word	0x20000610

08001298 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
	return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <_kill>:

int _kill(int pid, int sig)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012b0:	f001 fc3c 	bl	8002b2c <__errno>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2216      	movs	r2, #22
 80012b8:	601a      	str	r2, [r3, #0]
	return -1;
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_exit>:

void _exit (int status)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012ce:	f04f 31ff 	mov.w	r1, #4294967295
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff ffe7 	bl	80012a6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012d8:	e7fe      	b.n	80012d8 <_exit+0x12>

080012da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	60f8      	str	r0, [r7, #12]
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	e00a      	b.n	8001302 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ec:	f3af 8000 	nop.w
 80012f0:	4601      	mov	r1, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1c5a      	adds	r2, r3, #1
 80012f6:	60ba      	str	r2, [r7, #8]
 80012f8:	b2ca      	uxtb	r2, r1
 80012fa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	3301      	adds	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	429a      	cmp	r2, r3
 8001308:	dbf0      	blt.n	80012ec <_read+0x12>
	}

return len;
 800130a:	687b      	ldr	r3, [r7, #4]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e009      	b.n	800133a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	60ba      	str	r2, [r7, #8]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	3301      	adds	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	429a      	cmp	r2, r3
 8001340:	dbf1      	blt.n	8001326 <_write+0x12>
	}
	return len;
 8001342:	687b      	ldr	r3, [r7, #4]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <_close>:

int _close(int file)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	return -1;
 8001354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001372:	605a      	str	r2, [r3, #4]
	return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <_isatty>:

int _isatty(int file)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	return 1;
 8001388:	2301      	movs	r3, #1
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
	return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f001 fba6 	bl	8002b2c <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20005000 	.word	0x20005000
 800140c:	00000400 	.word	0x00000400
 8001410:	20000604 	.word	0x20000604
 8001414:	200006a8 	.word	0x200006a8

08001418 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001424:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001426:	e003      	b.n	8001430 <LoopCopyDataInit>

08001428 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800142a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800142c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800142e:	3104      	adds	r1, #4

08001430 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001430:	480a      	ldr	r0, [pc, #40]	; (800145c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001432:	4b0b      	ldr	r3, [pc, #44]	; (8001460 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001434:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001436:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001438:	d3f6      	bcc.n	8001428 <CopyDataInit>
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800143c:	e002      	b.n	8001444 <LoopFillZerobss>

0800143e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001440:	f842 3b04 	str.w	r3, [r2], #4

08001444 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001446:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001448:	d3f9      	bcc.n	800143e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800144a:	f7ff ffe5 	bl	8001418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800144e:	f001 fb73 	bl	8002b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001452:	f7ff fd6f 	bl	8000f34 <main>
  bx lr
 8001456:	4770      	bx	lr
  ldr r3, =_sidata
 8001458:	08005e1c 	.word	0x08005e1c
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001460:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8001464:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8001468:	200006a8 	.word	0x200006a8

0800146c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC1_2_IRQHandler>
	...

08001470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_Init+0x28>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_Init+0x28>)
 800147a:	f043 0310 	orr.w	r3, r3, #16
 800147e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f947 	bl	8001714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	2000      	movs	r0, #0
 8001488:	f000 f808 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fe2a 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40022000 	.word	0x40022000

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x54>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f95f 	bl	800177e <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 f927 	bl	800172a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <HAL_InitTick+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000010 	.word	0x20000010
 80014f8:	2000000c 	.word	0x2000000c

080014fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <HAL_IncTick+0x1c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b05      	ldr	r3, [pc, #20]	; (800151c <HAL_IncTick+0x20>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a03      	ldr	r2, [pc, #12]	; (800151c <HAL_IncTick+0x20>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000010 	.word	0x20000010
 800151c:	20000694 	.word	0x20000694

08001520 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return uwTick;
 8001524:	4b02      	ldr	r3, [pc, #8]	; (8001530 <HAL_GetTick+0x10>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000694 	.word	0x20000694

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff fff0 	bl	8001520 <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b0a      	ldr	r3, [pc, #40]	; (8001578 <HAL_Delay+0x44>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffe0 	bl	8001520 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000010 	.word	0x20000010

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc80      	pop	{r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4906      	ldr	r1, [pc, #24]	; (8001614 <__NVIC_EnableIRQ+0x34>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e0:	d301      	bcc.n	80016e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e2:	2301      	movs	r3, #1
 80016e4:	e00f      	b.n	8001706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <SysTick_Config+0x40>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ee:	210f      	movs	r1, #15
 80016f0:	f04f 30ff 	mov.w	r0, #4294967295
 80016f4:	f7ff ff90 	bl	8001618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f8:	4b05      	ldr	r3, [pc, #20]	; (8001710 <SysTick_Config+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <SysTick_Config+0x40>)
 8001700:	2207      	movs	r2, #7
 8001702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	e000e010 	.word	0xe000e010

08001714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ff2d 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800173c:	f7ff ff42 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	68b9      	ldr	r1, [r7, #8]
 8001746:	6978      	ldr	r0, [r7, #20]
 8001748:	f7ff ff90 	bl	800166c <NVIC_EncodePriority>
 800174c:	4602      	mov	r2, r0
 800174e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff5f 	bl	8001618 <__NVIC_SetPriority>
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff35 	bl	80015e0 <__NVIC_EnableIRQ>
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffa2 	bl	80016d0 <SysTick_Config>
 800178c:	4603      	mov	r3, r0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
	...

08001798 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d101      	bne.n	80017ae <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e043      	b.n	8001836 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b22      	ldr	r3, [pc, #136]	; (8001840 <HAL_DMA_Init+0xa8>)
 80017b6:	4413      	add	r3, r2
 80017b8:	4a22      	ldr	r2, [pc, #136]	; (8001844 <HAL_DMA_Init+0xac>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	009a      	lsls	r2, r3, #2
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a1f      	ldr	r2, [pc, #124]	; (8001848 <HAL_DMA_Init+0xb0>)
 80017ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2202      	movs	r2, #2
 80017d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80017e2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80017e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69db      	ldr	r3, [r3, #28]
 800180e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68fa      	ldr	r2, [r7, #12]
 800181c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	bffdfff8 	.word	0xbffdfff8
 8001844:	cccccccd 	.word	0xcccccccd
 8001848:	40020000 	.word	0x40020000

0800184c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_DMA_Start_IT+0x20>
 8001868:	2302      	movs	r3, #2
 800186a:	e04a      	b.n	8001902 <HAL_DMA_Start_IT+0xb6>
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800187a:	2b01      	cmp	r3, #1
 800187c:	d13a      	bne.n	80018f4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2202      	movs	r2, #2
 8001882:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0201 	bic.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f938 	bl	8001b18 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 020e 	orr.w	r2, r2, #14
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	e00f      	b.n	80018e2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0204 	bic.w	r2, r2, #4
 80018d0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 020a 	orr.w	r2, r2, #10
 80018e0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e005      	b.n	8001900 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80018fc:	2302      	movs	r3, #2
 80018fe:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001900:	7dfb      	ldrb	r3, [r7, #23]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	2204      	movs	r2, #4
 800192a:	409a      	lsls	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d04f      	beq.n	80019d4 <HAL_DMA_IRQHandler+0xc8>
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d04a      	beq.n	80019d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0320 	and.w	r3, r3, #32
 8001948:	2b00      	cmp	r3, #0
 800194a:	d107      	bne.n	800195c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0204 	bic.w	r2, r2, #4
 800195a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a66      	ldr	r2, [pc, #408]	; (8001afc <HAL_DMA_IRQHandler+0x1f0>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d029      	beq.n	80019ba <HAL_DMA_IRQHandler+0xae>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a65      	ldr	r2, [pc, #404]	; (8001b00 <HAL_DMA_IRQHandler+0x1f4>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d022      	beq.n	80019b6 <HAL_DMA_IRQHandler+0xaa>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a63      	ldr	r2, [pc, #396]	; (8001b04 <HAL_DMA_IRQHandler+0x1f8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01a      	beq.n	80019b0 <HAL_DMA_IRQHandler+0xa4>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a62      	ldr	r2, [pc, #392]	; (8001b08 <HAL_DMA_IRQHandler+0x1fc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d012      	beq.n	80019aa <HAL_DMA_IRQHandler+0x9e>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a60      	ldr	r2, [pc, #384]	; (8001b0c <HAL_DMA_IRQHandler+0x200>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d00a      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x98>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a5f      	ldr	r2, [pc, #380]	; (8001b10 <HAL_DMA_IRQHandler+0x204>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d102      	bne.n	800199e <HAL_DMA_IRQHandler+0x92>
 8001998:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800199c:	e00e      	b.n	80019bc <HAL_DMA_IRQHandler+0xb0>
 800199e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80019a2:	e00b      	b.n	80019bc <HAL_DMA_IRQHandler+0xb0>
 80019a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80019a8:	e008      	b.n	80019bc <HAL_DMA_IRQHandler+0xb0>
 80019aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ae:	e005      	b.n	80019bc <HAL_DMA_IRQHandler+0xb0>
 80019b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b4:	e002      	b.n	80019bc <HAL_DMA_IRQHandler+0xb0>
 80019b6:	2340      	movs	r3, #64	; 0x40
 80019b8:	e000      	b.n	80019bc <HAL_DMA_IRQHandler+0xb0>
 80019ba:	2304      	movs	r3, #4
 80019bc:	4a55      	ldr	r2, [pc, #340]	; (8001b14 <HAL_DMA_IRQHandler+0x208>)
 80019be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 8094 	beq.w	8001af2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019d2:	e08e      	b.n	8001af2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	2202      	movs	r2, #2
 80019da:	409a      	lsls	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d056      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x186>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d051      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10b      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 020a 	bic.w	r2, r2, #10
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a38      	ldr	r2, [pc, #224]	; (8001afc <HAL_DMA_IRQHandler+0x1f0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d029      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x166>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a37      	ldr	r2, [pc, #220]	; (8001b00 <HAL_DMA_IRQHandler+0x1f4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d022      	beq.n	8001a6e <HAL_DMA_IRQHandler+0x162>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a35      	ldr	r2, [pc, #212]	; (8001b04 <HAL_DMA_IRQHandler+0x1f8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d01a      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x15c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a34      	ldr	r2, [pc, #208]	; (8001b08 <HAL_DMA_IRQHandler+0x1fc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d012      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x156>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a32      	ldr	r2, [pc, #200]	; (8001b0c <HAL_DMA_IRQHandler+0x200>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00a      	beq.n	8001a5c <HAL_DMA_IRQHandler+0x150>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a31      	ldr	r2, [pc, #196]	; (8001b10 <HAL_DMA_IRQHandler+0x204>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d102      	bne.n	8001a56 <HAL_DMA_IRQHandler+0x14a>
 8001a50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a54:	e00e      	b.n	8001a74 <HAL_DMA_IRQHandler+0x168>
 8001a56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a5a:	e00b      	b.n	8001a74 <HAL_DMA_IRQHandler+0x168>
 8001a5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a60:	e008      	b.n	8001a74 <HAL_DMA_IRQHandler+0x168>
 8001a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a66:	e005      	b.n	8001a74 <HAL_DMA_IRQHandler+0x168>
 8001a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a6c:	e002      	b.n	8001a74 <HAL_DMA_IRQHandler+0x168>
 8001a6e:	2320      	movs	r3, #32
 8001a70:	e000      	b.n	8001a74 <HAL_DMA_IRQHandler+0x168>
 8001a72:	2302      	movs	r3, #2
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_DMA_IRQHandler+0x208>)
 8001a76:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d034      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a90:	e02f      	b.n	8001af2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	2208      	movs	r2, #8
 8001a98:	409a      	lsls	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d028      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x1e8>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d023      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 020e 	bic.w	r2, r2, #14
 8001aba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8001aca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d004      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	4798      	blx	r3
    }
  }
  return;
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
}
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40020008 	.word	0x40020008
 8001b00:	4002001c 	.word	0x4002001c
 8001b04:	40020030 	.word	0x40020030
 8001b08:	40020044 	.word	0x40020044
 8001b0c:	40020058 	.word	0x40020058
 8001b10:	4002006c 	.word	0x4002006c
 8001b14:	40020000 	.word	0x40020000

08001b18 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b10      	cmp	r3, #16
 8001b44:	d108      	bne.n	8001b58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68ba      	ldr	r2, [r7, #8]
 8001b54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b56:	e007      	b.n	8001b68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]
}
 8001b68:	bf00      	nop
 8001b6a:	3714      	adds	r7, #20
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b08b      	sub	sp, #44	; 0x2c
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b86:	e169      	b.n	8001e5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	69fa      	ldr	r2, [r7, #28]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	f040 8158 	bne.w	8001e56 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	4a9a      	ldr	r2, [pc, #616]	; (8001e14 <HAL_GPIO_Init+0x2a0>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d05e      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bb0:	4a98      	ldr	r2, [pc, #608]	; (8001e14 <HAL_GPIO_Init+0x2a0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d875      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bb6:	4a98      	ldr	r2, [pc, #608]	; (8001e18 <HAL_GPIO_Init+0x2a4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d058      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bbc:	4a96      	ldr	r2, [pc, #600]	; (8001e18 <HAL_GPIO_Init+0x2a4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d86f      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bc2:	4a96      	ldr	r2, [pc, #600]	; (8001e1c <HAL_GPIO_Init+0x2a8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d052      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bc8:	4a94      	ldr	r2, [pc, #592]	; (8001e1c <HAL_GPIO_Init+0x2a8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d869      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bce:	4a94      	ldr	r2, [pc, #592]	; (8001e20 <HAL_GPIO_Init+0x2ac>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d04c      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001bd4:	4a92      	ldr	r2, [pc, #584]	; (8001e20 <HAL_GPIO_Init+0x2ac>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d863      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bda:	4a92      	ldr	r2, [pc, #584]	; (8001e24 <HAL_GPIO_Init+0x2b0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d046      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
 8001be0:	4a90      	ldr	r2, [pc, #576]	; (8001e24 <HAL_GPIO_Init+0x2b0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d85d      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d82a      	bhi.n	8001c40 <HAL_GPIO_Init+0xcc>
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d859      	bhi.n	8001ca2 <HAL_GPIO_Init+0x12e>
 8001bee:	a201      	add	r2, pc, #4	; (adr r2, 8001bf4 <HAL_GPIO_Init+0x80>)
 8001bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf4:	08001c6f 	.word	0x08001c6f
 8001bf8:	08001c49 	.word	0x08001c49
 8001bfc:	08001c5b 	.word	0x08001c5b
 8001c00:	08001c9d 	.word	0x08001c9d
 8001c04:	08001ca3 	.word	0x08001ca3
 8001c08:	08001ca3 	.word	0x08001ca3
 8001c0c:	08001ca3 	.word	0x08001ca3
 8001c10:	08001ca3 	.word	0x08001ca3
 8001c14:	08001ca3 	.word	0x08001ca3
 8001c18:	08001ca3 	.word	0x08001ca3
 8001c1c:	08001ca3 	.word	0x08001ca3
 8001c20:	08001ca3 	.word	0x08001ca3
 8001c24:	08001ca3 	.word	0x08001ca3
 8001c28:	08001ca3 	.word	0x08001ca3
 8001c2c:	08001ca3 	.word	0x08001ca3
 8001c30:	08001ca3 	.word	0x08001ca3
 8001c34:	08001ca3 	.word	0x08001ca3
 8001c38:	08001c51 	.word	0x08001c51
 8001c3c:	08001c65 	.word	0x08001c65
 8001c40:	4a79      	ldr	r2, [pc, #484]	; (8001e28 <HAL_GPIO_Init+0x2b4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d013      	beq.n	8001c6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c46:	e02c      	b.n	8001ca2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	623b      	str	r3, [r7, #32]
          break;
 8001c4e:	e029      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	3304      	adds	r3, #4
 8001c56:	623b      	str	r3, [r7, #32]
          break;
 8001c58:	e024      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	3308      	adds	r3, #8
 8001c60:	623b      	str	r3, [r7, #32]
          break;
 8001c62:	e01f      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	330c      	adds	r3, #12
 8001c6a:	623b      	str	r3, [r7, #32]
          break;
 8001c6c:	e01a      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c76:	2304      	movs	r3, #4
 8001c78:	623b      	str	r3, [r7, #32]
          break;
 8001c7a:	e013      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c84:	2308      	movs	r3, #8
 8001c86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	611a      	str	r2, [r3, #16]
          break;
 8001c8e:	e009      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c90:	2308      	movs	r3, #8
 8001c92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69fa      	ldr	r2, [r7, #28]
 8001c98:	615a      	str	r2, [r3, #20]
          break;
 8001c9a:	e003      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
          break;
 8001ca0:	e000      	b.n	8001ca4 <HAL_GPIO_Init+0x130>
          break;
 8001ca2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	2bff      	cmp	r3, #255	; 0xff
 8001ca8:	d801      	bhi.n	8001cae <HAL_GPIO_Init+0x13a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	e001      	b.n	8001cb2 <HAL_GPIO_Init+0x13e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	2bff      	cmp	r3, #255	; 0xff
 8001cb8:	d802      	bhi.n	8001cc0 <HAL_GPIO_Init+0x14c>
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x152>
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	3b08      	subs	r3, #8
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	210f      	movs	r1, #15
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	6a39      	ldr	r1, [r7, #32]
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80b1 	beq.w	8001e56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf4:	4b4d      	ldr	r3, [pc, #308]	; (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	4a4c      	ldr	r2, [pc, #304]	; (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6193      	str	r3, [r2, #24]
 8001d00:	4b4a      	ldr	r3, [pc, #296]	; (8001e2c <HAL_GPIO_Init+0x2b8>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d0c:	4a48      	ldr	r2, [pc, #288]	; (8001e30 <HAL_GPIO_Init+0x2bc>)
 8001d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	3302      	adds	r3, #2
 8001d14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d18:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	220f      	movs	r2, #15
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a40      	ldr	r2, [pc, #256]	; (8001e34 <HAL_GPIO_Init+0x2c0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d013      	beq.n	8001d60 <HAL_GPIO_Init+0x1ec>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a3f      	ldr	r2, [pc, #252]	; (8001e38 <HAL_GPIO_Init+0x2c4>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00d      	beq.n	8001d5c <HAL_GPIO_Init+0x1e8>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4a3e      	ldr	r2, [pc, #248]	; (8001e3c <HAL_GPIO_Init+0x2c8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d007      	beq.n	8001d58 <HAL_GPIO_Init+0x1e4>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a3d      	ldr	r2, [pc, #244]	; (8001e40 <HAL_GPIO_Init+0x2cc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d101      	bne.n	8001d54 <HAL_GPIO_Init+0x1e0>
 8001d50:	2303      	movs	r3, #3
 8001d52:	e006      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d54:	2304      	movs	r3, #4
 8001d56:	e004      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e002      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e000      	b.n	8001d62 <HAL_GPIO_Init+0x1ee>
 8001d60:	2300      	movs	r3, #0
 8001d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d64:	f002 0203 	and.w	r2, r2, #3
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	4093      	lsls	r3, r2
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d72:	492f      	ldr	r1, [pc, #188]	; (8001e30 <HAL_GPIO_Init+0x2bc>)
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d006      	beq.n	8001d9a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	492c      	ldr	r1, [pc, #176]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d9a:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4928      	ldr	r1, [pc, #160]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d006      	beq.n	8001dc2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001db4:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4922      	ldr	r1, [pc, #136]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	491e      	ldr	r1, [pc, #120]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dcc:	4013      	ands	r3, r2
 8001dce:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d006      	beq.n	8001dea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4918      	ldr	r1, [pc, #96]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dea:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	43db      	mvns	r3, r3
 8001df2:	4914      	ldr	r1, [pc, #80]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001df4:	4013      	ands	r3, r2
 8001df6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d021      	beq.n	8001e48 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	490e      	ldr	r1, [pc, #56]	; (8001e44 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60cb      	str	r3, [r1, #12]
 8001e10:	e021      	b.n	8001e56 <HAL_GPIO_Init+0x2e2>
 8001e12:	bf00      	nop
 8001e14:	10320000 	.word	0x10320000
 8001e18:	10310000 	.word	0x10310000
 8001e1c:	10220000 	.word	0x10220000
 8001e20:	10210000 	.word	0x10210000
 8001e24:	10120000 	.word	0x10120000
 8001e28:	10110000 	.word	0x10110000
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	40010000 	.word	0x40010000
 8001e34:	40010800 	.word	0x40010800
 8001e38:	40010c00 	.word	0x40010c00
 8001e3c:	40011000 	.word	0x40011000
 8001e40:	40011400 	.word	0x40011400
 8001e44:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_GPIO_Init+0x304>)
 8001e4a:	68da      	ldr	r2, [r3, #12]
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	4909      	ldr	r1, [pc, #36]	; (8001e78 <HAL_GPIO_Init+0x304>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	3301      	adds	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	fa22 f303 	lsr.w	r3, r2, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f47f ae8e 	bne.w	8001b88 <HAL_GPIO_Init+0x14>
  }
}
 8001e6c:	bf00      	nop
 8001e6e:	bf00      	nop
 8001e70:	372c      	adds	r7, #44	; 0x2c
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	40010400 	.word	0x40010400

08001e7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e26c      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f000 8087 	beq.w	8001faa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e9c:	4b92      	ldr	r3, [pc, #584]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 030c 	and.w	r3, r3, #12
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d00c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ea8:	4b8f      	ldr	r3, [pc, #572]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 030c 	and.w	r3, r3, #12
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d112      	bne.n	8001eda <HAL_RCC_OscConfig+0x5e>
 8001eb4:	4b8c      	ldr	r3, [pc, #560]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec0:	d10b      	bne.n	8001eda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec2:	4b89      	ldr	r3, [pc, #548]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d06c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x12c>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d168      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e246      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x76>
 8001ee4:	4b80      	ldr	r3, [pc, #512]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a7f      	ldr	r2, [pc, #508]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	e02e      	b.n	8001f50 <HAL_RCC_OscConfig+0xd4>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x98>
 8001efa:	4b7b      	ldr	r3, [pc, #492]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a7a      	ldr	r2, [pc, #488]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b78      	ldr	r3, [pc, #480]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a77      	ldr	r2, [pc, #476]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e01d      	b.n	8001f50 <HAL_RCC_OscConfig+0xd4>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f1c:	d10c      	bne.n	8001f38 <HAL_RCC_OscConfig+0xbc>
 8001f1e:	4b72      	ldr	r3, [pc, #456]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a71      	ldr	r2, [pc, #452]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f28:	6013      	str	r3, [r2, #0]
 8001f2a:	4b6f      	ldr	r3, [pc, #444]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a6e      	ldr	r2, [pc, #440]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f34:	6013      	str	r3, [r2, #0]
 8001f36:	e00b      	b.n	8001f50 <HAL_RCC_OscConfig+0xd4>
 8001f38:	4b6b      	ldr	r3, [pc, #428]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a6a      	ldr	r2, [pc, #424]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b68      	ldr	r3, [pc, #416]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a67      	ldr	r2, [pc, #412]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d013      	beq.n	8001f80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f58:	f7ff fae2 	bl	8001520 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5e:	e008      	b.n	8001f72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f60:	f7ff fade 	bl	8001520 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b64      	cmp	r3, #100	; 0x64
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1fa      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f72:	4b5d      	ldr	r3, [pc, #372]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0f0      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe4>
 8001f7e:	e014      	b.n	8001faa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff face 	bl	8001520 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff faca 	bl	8001520 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b64      	cmp	r3, #100	; 0x64
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1e6      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f9a:	4b53      	ldr	r3, [pc, #332]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x10c>
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d063      	beq.n	800207e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fb6:	4b4c      	ldr	r3, [pc, #304]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f003 030c 	and.w	r3, r3, #12
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00b      	beq.n	8001fda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fc2:	4b49      	ldr	r3, [pc, #292]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b08      	cmp	r3, #8
 8001fcc:	d11c      	bne.n	8002008 <HAL_RCC_OscConfig+0x18c>
 8001fce:	4b46      	ldr	r3, [pc, #280]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d116      	bne.n	8002008 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	4b43      	ldr	r3, [pc, #268]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x176>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e1ba      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4939      	ldr	r1, [pc, #228]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002006:	e03a      	b.n	800207e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002010:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_RCC_OscConfig+0x270>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff fa83 	bl	8001520 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800201e:	f7ff fa7f 	bl	8001520 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e19b      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002030:	4b2d      	ldr	r3, [pc, #180]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203c:	4b2a      	ldr	r3, [pc, #168]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4927      	ldr	r1, [pc, #156]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]
 8002050:	e015      	b.n	800207e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002052:	4b26      	ldr	r3, [pc, #152]	; (80020ec <HAL_RCC_OscConfig+0x270>)
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002058:	f7ff fa62 	bl	8001520 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002060:	f7ff fa5e 	bl	8001520 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e17a      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002072:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d03a      	beq.n	8002100 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d019      	beq.n	80020c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_RCC_OscConfig+0x274>)
 8002094:	2201      	movs	r2, #1
 8002096:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7ff fa42 	bl	8001520 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a0:	f7ff fa3e 	bl	8001520 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e15a      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020be:	2001      	movs	r0, #1
 80020c0:	f000 fad8 	bl	8002674 <RCC_Delay>
 80020c4:	e01c      	b.n	8002100 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_RCC_OscConfig+0x274>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020cc:	f7ff fa28 	bl	8001520 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d2:	e00f      	b.n	80020f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d4:	f7ff fa24 	bl	8001520 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d908      	bls.n	80020f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e140      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	42420000 	.word	0x42420000
 80020f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020f4:	4b9e      	ldr	r3, [pc, #632]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1e9      	bne.n	80020d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a6 	beq.w	800225a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210e:	2300      	movs	r3, #0
 8002110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002112:	4b97      	ldr	r3, [pc, #604]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10d      	bne.n	800213a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	4b94      	ldr	r3, [pc, #592]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	4a93      	ldr	r2, [pc, #588]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002128:	61d3      	str	r3, [r2, #28]
 800212a:	4b91      	ldr	r3, [pc, #580]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002136:	2301      	movs	r3, #1
 8002138:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213a:	4b8e      	ldr	r3, [pc, #568]	; (8002374 <HAL_RCC_OscConfig+0x4f8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d118      	bne.n	8002178 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002146:	4b8b      	ldr	r3, [pc, #556]	; (8002374 <HAL_RCC_OscConfig+0x4f8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a8a      	ldr	r2, [pc, #552]	; (8002374 <HAL_RCC_OscConfig+0x4f8>)
 800214c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002152:	f7ff f9e5 	bl	8001520 <HAL_GetTick>
 8002156:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800215a:	f7ff f9e1 	bl	8001520 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b64      	cmp	r3, #100	; 0x64
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e0fd      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216c:	4b81      	ldr	r3, [pc, #516]	; (8002374 <HAL_RCC_OscConfig+0x4f8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x312>
 8002180:	4b7b      	ldr	r3, [pc, #492]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4a7a      	ldr	r2, [pc, #488]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6213      	str	r3, [r2, #32]
 800218c:	e02d      	b.n	80021ea <HAL_RCC_OscConfig+0x36e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x334>
 8002196:	4b76      	ldr	r3, [pc, #472]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4a75      	ldr	r2, [pc, #468]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6213      	str	r3, [r2, #32]
 80021a2:	4b73      	ldr	r3, [pc, #460]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a72      	ldr	r2, [pc, #456]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	6213      	str	r3, [r2, #32]
 80021ae:	e01c      	b.n	80021ea <HAL_RCC_OscConfig+0x36e>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b05      	cmp	r3, #5
 80021b6:	d10c      	bne.n	80021d2 <HAL_RCC_OscConfig+0x356>
 80021b8:	4b6d      	ldr	r3, [pc, #436]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4a6c      	ldr	r2, [pc, #432]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	f043 0304 	orr.w	r3, r3, #4
 80021c2:	6213      	str	r3, [r2, #32]
 80021c4:	4b6a      	ldr	r3, [pc, #424]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4a69      	ldr	r2, [pc, #420]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6213      	str	r3, [r2, #32]
 80021d0:	e00b      	b.n	80021ea <HAL_RCC_OscConfig+0x36e>
 80021d2:	4b67      	ldr	r3, [pc, #412]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	4a66      	ldr	r2, [pc, #408]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	f023 0301 	bic.w	r3, r3, #1
 80021dc:	6213      	str	r3, [r2, #32]
 80021de:	4b64      	ldr	r3, [pc, #400]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a63      	ldr	r2, [pc, #396]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	f023 0304 	bic.w	r3, r3, #4
 80021e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d015      	beq.n	800221e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7ff f995 	bl	8001520 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7ff f991 	bl	8001520 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e0ab      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002210:	4b57      	ldr	r3, [pc, #348]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0ee      	beq.n	80021fa <HAL_RCC_OscConfig+0x37e>
 800221c:	e014      	b.n	8002248 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221e:	f7ff f97f 	bl	8001520 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002224:	e00a      	b.n	800223c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002226:	f7ff f97b 	bl	8001520 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f241 3288 	movw	r2, #5000	; 0x1388
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e095      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223c:	4b4c      	ldr	r3, [pc, #304]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 800223e:	6a1b      	ldr	r3, [r3, #32]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ee      	bne.n	8002226 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002248:	7dfb      	ldrb	r3, [r7, #23]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800224e:	4b48      	ldr	r3, [pc, #288]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	4a47      	ldr	r2, [pc, #284]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002258:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	2b00      	cmp	r3, #0
 8002260:	f000 8081 	beq.w	8002366 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002264:	4b42      	ldr	r3, [pc, #264]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 030c 	and.w	r3, r3, #12
 800226c:	2b08      	cmp	r3, #8
 800226e:	d061      	beq.n	8002334 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d146      	bne.n	8002306 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002278:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <HAL_RCC_OscConfig+0x4fc>)
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7ff f94f 	bl	8001520 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002286:	f7ff f94b 	bl	8001520 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e067      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002298:	4b35      	ldr	r3, [pc, #212]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1f0      	bne.n	8002286 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ac:	d108      	bne.n	80022c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022ae:	4b30      	ldr	r3, [pc, #192]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	492d      	ldr	r1, [pc, #180]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022c0:	4b2b      	ldr	r3, [pc, #172]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a19      	ldr	r1, [r3, #32]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	430b      	orrs	r3, r1
 80022d2:	4927      	ldr	r1, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022d8:	4b27      	ldr	r3, [pc, #156]	; (8002378 <HAL_RCC_OscConfig+0x4fc>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022de:	f7ff f91f 	bl	8001520 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e6:	f7ff f91b 	bl	8001520 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e037      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x46a>
 8002304:	e02f      	b.n	8002366 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b1c      	ldr	r3, [pc, #112]	; (8002378 <HAL_RCC_OscConfig+0x4fc>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff f908 	bl	8001520 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff f904 	bl	8001520 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e020      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x498>
 8002332:	e018      	b.n	8002366 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e013      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_OscConfig+0x4f4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	429a      	cmp	r2, r3
 8002352:	d106      	bne.n	8002362 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235e:	429a      	cmp	r2, r3
 8002360:	d001      	beq.n	8002366 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002366:	2300      	movs	r3, #0
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	40007000 	.word	0x40007000
 8002378:	42420060 	.word	0x42420060

0800237c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0d0      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002390:	4b6a      	ldr	r3, [pc, #424]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d910      	bls.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b67      	ldr	r3, [pc, #412]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 0207 	bic.w	r2, r3, #7
 80023a6:	4965      	ldr	r1, [pc, #404]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ae:	4b63      	ldr	r3, [pc, #396]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d001      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0b8      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d020      	beq.n	800240e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d8:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	4a58      	ldr	r2, [pc, #352]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	4a52      	ldr	r2, [pc, #328]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023fc:	4b50      	ldr	r3, [pc, #320]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	494d      	ldr	r1, [pc, #308]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d040      	beq.n	800249c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d115      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e07f      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d109      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e073      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244a:	4b3d      	ldr	r3, [pc, #244]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06b      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800245a:	4b39      	ldr	r3, [pc, #228]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f023 0203 	bic.w	r2, r3, #3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	4936      	ldr	r1, [pc, #216]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800246c:	f7ff f858 	bl	8001520 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	e00a      	b.n	800248a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002474:	f7ff f854 	bl	8001520 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002482:	4293      	cmp	r3, r2
 8002484:	d901      	bls.n	800248a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e053      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800248a:	4b2d      	ldr	r3, [pc, #180]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 020c 	and.w	r2, r3, #12
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	429a      	cmp	r2, r3
 800249a:	d1eb      	bne.n	8002474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800249c:	4b27      	ldr	r3, [pc, #156]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d210      	bcs.n	80024cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	4922      	ldr	r1, [pc, #136]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b20      	ldr	r3, [pc, #128]	; (800253c <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e032      	b.n	8002532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4916      	ldr	r1, [pc, #88]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d009      	beq.n	800250a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	490e      	ldr	r1, [pc, #56]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800250a:	f000 f821 	bl	8002550 <HAL_RCC_GetSysClockFreq>
 800250e:	4602      	mov	r2, r0
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	490a      	ldr	r1, [pc, #40]	; (8002544 <HAL_RCC_ClockConfig+0x1c8>)
 800251c:	5ccb      	ldrb	r3, [r1, r3]
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_RCC_ClockConfig+0x1cc>)
 8002524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002526:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_ClockConfig+0x1d0>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe ffb6 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40022000 	.word	0x40022000
 8002540:	40021000 	.word	0x40021000
 8002544:	080059c4 	.word	0x080059c4
 8002548:	20000008 	.word	0x20000008
 800254c:	2000000c 	.word	0x2000000c

08002550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002550:	b490      	push	{r4, r7}
 8002552:	b08a      	sub	sp, #40	; 0x28
 8002554:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002556:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002558:	1d3c      	adds	r4, r7, #4
 800255a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800255c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002560:	f240 2301 	movw	r3, #513	; 0x201
 8002564:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	2300      	movs	r3, #0
 800256c:	61bb      	str	r3, [r7, #24]
 800256e:	2300      	movs	r3, #0
 8002570:	627b      	str	r3, [r7, #36]	; 0x24
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b04      	cmp	r3, #4
 8002588:	d002      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x40>
 800258a:	2b08      	cmp	r3, #8
 800258c:	d003      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x46>
 800258e:	e02d      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002590:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002592:	623b      	str	r3, [r7, #32]
      break;
 8002594:	e02d      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	0c9b      	lsrs	r3, r3, #18
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025a2:	4413      	add	r3, r2
 80025a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80025a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_RCC_GetSysClockFreq+0xb4>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	0c5b      	lsrs	r3, r3, #17
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80025c2:	4413      	add	r3, r2
 80025c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80025c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ce:	fb02 f203 	mul.w	r2, r2, r3
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
 80025da:	e004      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	4a0b      	ldr	r2, [pc, #44]	; (800260c <HAL_RCC_GetSysClockFreq+0xbc>)
 80025e0:	fb02 f303 	mul.w	r3, r2, r3
 80025e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	623b      	str	r3, [r7, #32]
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ee:	623b      	str	r3, [r7, #32]
      break;
 80025f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f2:	6a3b      	ldr	r3, [r7, #32]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3728      	adds	r7, #40	; 0x28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bc90      	pop	{r4, r7}
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	080059b4 	.word	0x080059b4
 8002604:	40021000 	.word	0x40021000
 8002608:	007a1200 	.word	0x007a1200
 800260c:	003d0900 	.word	0x003d0900

08002610 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002614:	4b02      	ldr	r3, [pc, #8]	; (8002620 <HAL_RCC_GetHCLKFreq+0x10>)
 8002616:	681b      	ldr	r3, [r3, #0]
}
 8002618:	4618      	mov	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr
 8002620:	20000008 	.word	0x20000008

08002624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002628:	f7ff fff2 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4903      	ldr	r1, [pc, #12]	; (8002648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	080059d4 	.word	0x080059d4

0800264c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002650:	f7ff ffde 	bl	8002610 <HAL_RCC_GetHCLKFreq>
 8002654:	4602      	mov	r2, r0
 8002656:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	0adb      	lsrs	r3, r3, #11
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002662:	5ccb      	ldrb	r3, [r1, r3]
 8002664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002668:	4618      	mov	r0, r3
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	080059d4 	.word	0x080059d4

08002674 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800267c:	4b0a      	ldr	r3, [pc, #40]	; (80026a8 <RCC_Delay+0x34>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <RCC_Delay+0x38>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0a5b      	lsrs	r3, r3, #9
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	fb02 f303 	mul.w	r3, r2, r3
 800268e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002690:	bf00      	nop
  }
  while (Delay --);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1e5a      	subs	r2, r3, #1
 8002696:	60fa      	str	r2, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1f9      	bne.n	8002690 <RCC_Delay+0x1c>
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000008 	.word	0x20000008
 80026ac:	10624dd3 	.word	0x10624dd3

080026b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e03f      	b.n	8002742 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d106      	bne.n	80026dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7fe fd36 	bl	8001148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2224      	movs	r2, #36	; 0x24
 80026e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f983 	bl	8002a00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b20      	cmp	r3, #32
 8002764:	d166      	bne.n	8002834 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_UART_Receive_DMA+0x26>
 800276c:	88fb      	ldrh	r3, [r7, #6]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e05f      	b.n	8002836 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_UART_Receive_DMA+0x38>
 8002780:	2302      	movs	r3, #2
 8002782:	e058      	b.n	8002836 <HAL_UART_Receive_DMA+0xea>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	88fa      	ldrh	r2, [r7, #6]
 8002796:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2222      	movs	r2, #34	; 0x22
 80027a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027aa:	4a25      	ldr	r2, [pc, #148]	; (8002840 <HAL_UART_Receive_DMA+0xf4>)
 80027ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b2:	4a24      	ldr	r2, [pc, #144]	; (8002844 <HAL_UART_Receive_DMA+0xf8>)
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ba:	4a23      	ldr	r2, [pc, #140]	; (8002848 <HAL_UART_Receive_DMA+0xfc>)
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c2:	2200      	movs	r2, #0
 80027c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80027c6:	f107 0308 	add.w	r3, r7, #8
 80027ca:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3304      	adds	r3, #4
 80027d6:	4619      	mov	r1, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	88fb      	ldrh	r3, [r7, #6]
 80027de:	f7ff f835 	bl	800184c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80027e2:	2300      	movs	r3, #0
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800280e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800282e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	08002883 	.word	0x08002883
 8002844:	080028eb 	.word	0x080028eb
 8002848:	08002907 	.word	0x08002907

0800284c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0320 	and.w	r3, r3, #32
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11e      	bne.n	80028dc <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695a      	ldr	r2, [r3, #20]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	695a      	ldr	r2, [r3, #20]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028d2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f7ff ffb5 	bl	800284c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f7ff ffb0 	bl	800285e <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028fe:	bf00      	nop
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b00      	cmp	r3, #0
 8002924:	bf14      	ite	ne
 8002926:	2301      	movne	r3, #1
 8002928:	2300      	moveq	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b21      	cmp	r3, #33	; 0x21
 8002938:	d108      	bne.n	800294c <UART_DMAError+0x46>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2200      	movs	r2, #0
 8002944:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002946:	68b8      	ldr	r0, [r7, #8]
 8002948:	f000 f827 	bl	800299a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf14      	ite	ne
 800295a:	2301      	movne	r3, #1
 800295c:	2300      	moveq	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b22      	cmp	r3, #34	; 0x22
 800296c:	d108      	bne.n	8002980 <UART_DMAError+0x7a>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800297a:	68b8      	ldr	r0, [r7, #8]
 800297c:	f000 f822 	bl	80029c4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	f043 0210 	orr.w	r2, r3, #16
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800298c:	68b8      	ldr	r0, [r7, #8]
 800298e:	f7ff ff6f 	bl	8002870 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80029b0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80029da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2220      	movs	r2, #32
 80029f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc80      	pop	{r7}
 80029fc:	4770      	bx	lr
	...

08002a00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a3a:	f023 030c 	bic.w	r3, r3, #12
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6812      	ldr	r2, [r2, #0]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	430b      	orrs	r3, r1
 8002a46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a2c      	ldr	r2, [pc, #176]	; (8002b14 <UART_SetConfig+0x114>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d103      	bne.n	8002a70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a68:	f7ff fdf0 	bl	800264c <HAL_RCC_GetPCLK2Freq>
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	e002      	b.n	8002a76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a70:	f7ff fdd8 	bl	8002624 <HAL_RCC_GetPCLK1Freq>
 8002a74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	441a      	add	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <UART_SetConfig+0x118>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	0119      	lsls	r1, r3, #4
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009a      	lsls	r2, r3, #2
 8002aa0:	441a      	add	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <UART_SetConfig+0x118>)
 8002aae:	fba3 0302 	umull	r0, r3, r3, r2
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2064      	movs	r0, #100	; 0x64
 8002ab6:	fb00 f303 	mul.w	r3, r0, r3
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	3332      	adds	r3, #50	; 0x32
 8002ac0:	4a15      	ldr	r2, [pc, #84]	; (8002b18 <UART_SetConfig+0x118>)
 8002ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002acc:	4419      	add	r1, r3
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009a      	lsls	r2, r3, #2
 8002ad8:	441a      	add	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <UART_SetConfig+0x118>)
 8002ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8002aea:	095b      	lsrs	r3, r3, #5
 8002aec:	2064      	movs	r0, #100	; 0x64
 8002aee:	fb00 f303 	mul.w	r3, r0, r3
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	3332      	adds	r3, #50	; 0x32
 8002af8:	4a07      	ldr	r2, [pc, #28]	; (8002b18 <UART_SetConfig+0x118>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	f003 020f 	and.w	r2, r3, #15
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	440a      	add	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40013800 	.word	0x40013800
 8002b18:	51eb851f 	.word	0x51eb851f

08002b1c <atof>:
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	f000 be5f 	b.w	80037e0 <strtod>

08002b22 <atoi>:
 8002b22:	220a      	movs	r2, #10
 8002b24:	2100      	movs	r1, #0
 8002b26:	f000 beed 	b.w	8003904 <strtol>
	...

08002b2c <__errno>:
 8002b2c:	4b01      	ldr	r3, [pc, #4]	; (8002b34 <__errno+0x8>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	20000014 	.word	0x20000014

08002b38 <__libc_init_array>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	2600      	movs	r6, #0
 8002b3c:	4d0c      	ldr	r5, [pc, #48]	; (8002b70 <__libc_init_array+0x38>)
 8002b3e:	4c0d      	ldr	r4, [pc, #52]	; (8002b74 <__libc_init_array+0x3c>)
 8002b40:	1b64      	subs	r4, r4, r5
 8002b42:	10a4      	asrs	r4, r4, #2
 8002b44:	42a6      	cmp	r6, r4
 8002b46:	d109      	bne.n	8002b5c <__libc_init_array+0x24>
 8002b48:	f002 ff24 	bl	8005994 <_init>
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	4d0a      	ldr	r5, [pc, #40]	; (8002b78 <__libc_init_array+0x40>)
 8002b50:	4c0a      	ldr	r4, [pc, #40]	; (8002b7c <__libc_init_array+0x44>)
 8002b52:	1b64      	subs	r4, r4, r5
 8002b54:	10a4      	asrs	r4, r4, #2
 8002b56:	42a6      	cmp	r6, r4
 8002b58:	d105      	bne.n	8002b66 <__libc_init_array+0x2e>
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
 8002b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b60:	4798      	blx	r3
 8002b62:	3601      	adds	r6, #1
 8002b64:	e7ee      	b.n	8002b44 <__libc_init_array+0xc>
 8002b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6a:	4798      	blx	r3
 8002b6c:	3601      	adds	r6, #1
 8002b6e:	e7f2      	b.n	8002b56 <__libc_init_array+0x1e>
 8002b70:	08005e14 	.word	0x08005e14
 8002b74:	08005e14 	.word	0x08005e14
 8002b78:	08005e14 	.word	0x08005e14
 8002b7c:	08005e18 	.word	0x08005e18

08002b80 <memset>:
 8002b80:	4603      	mov	r3, r0
 8002b82:	4402      	add	r2, r0
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d100      	bne.n	8002b8a <memset+0xa>
 8002b88:	4770      	bx	lr
 8002b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b8e:	e7f9      	b.n	8002b84 <memset+0x4>

08002b90 <strncpy>:
 8002b90:	4603      	mov	r3, r0
 8002b92:	b510      	push	{r4, lr}
 8002b94:	3901      	subs	r1, #1
 8002b96:	b132      	cbz	r2, 8002ba6 <strncpy+0x16>
 8002b98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	f803 4b01 	strb.w	r4, [r3], #1
 8002ba2:	2c00      	cmp	r4, #0
 8002ba4:	d1f7      	bne.n	8002b96 <strncpy+0x6>
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	441a      	add	r2, r3
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d100      	bne.n	8002bb0 <strncpy+0x20>
 8002bae:	bd10      	pop	{r4, pc}
 8002bb0:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb4:	e7f9      	b.n	8002baa <strncpy+0x1a>

08002bb6 <sulp>:
 8002bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bba:	460f      	mov	r7, r1
 8002bbc:	4690      	mov	r8, r2
 8002bbe:	f001 fda1 	bl	8004704 <__ulp>
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	460d      	mov	r5, r1
 8002bc6:	f1b8 0f00 	cmp.w	r8, #0
 8002bca:	d011      	beq.n	8002bf0 <sulp+0x3a>
 8002bcc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8002bd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	dd0b      	ble.n	8002bf0 <sulp+0x3a>
 8002bd8:	2400      	movs	r4, #0
 8002bda:	051b      	lsls	r3, r3, #20
 8002bdc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8002be0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8002be4:	4622      	mov	r2, r4
 8002be6:	462b      	mov	r3, r5
 8002be8:	f7fd fc80 	bl	80004ec <__aeabi_dmul>
 8002bec:	4604      	mov	r4, r0
 8002bee:	460d      	mov	r5, r1
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	4629      	mov	r1, r5
 8002bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bf8 <_strtod_l>:
 8002bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bfc:	469b      	mov	fp, r3
 8002bfe:	2300      	movs	r3, #0
 8002c00:	b0a1      	sub	sp, #132	; 0x84
 8002c02:	931c      	str	r3, [sp, #112]	; 0x70
 8002c04:	4ba1      	ldr	r3, [pc, #644]	; (8002e8c <_strtod_l+0x294>)
 8002c06:	4682      	mov	sl, r0
 8002c08:	681f      	ldr	r7, [r3, #0]
 8002c0a:	460e      	mov	r6, r1
 8002c0c:	4638      	mov	r0, r7
 8002c0e:	9217      	str	r2, [sp, #92]	; 0x5c
 8002c10:	f7fd faa8 	bl	8000164 <strlen>
 8002c14:	f04f 0800 	mov.w	r8, #0
 8002c18:	4604      	mov	r4, r0
 8002c1a:	f04f 0900 	mov.w	r9, #0
 8002c1e:	961b      	str	r6, [sp, #108]	; 0x6c
 8002c20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	2a2b      	cmp	r2, #43	; 0x2b
 8002c26:	d04c      	beq.n	8002cc2 <_strtod_l+0xca>
 8002c28:	d83a      	bhi.n	8002ca0 <_strtod_l+0xa8>
 8002c2a:	2a0d      	cmp	r2, #13
 8002c2c:	d833      	bhi.n	8002c96 <_strtod_l+0x9e>
 8002c2e:	2a08      	cmp	r2, #8
 8002c30:	d833      	bhi.n	8002c9a <_strtod_l+0xa2>
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	d03d      	beq.n	8002cb2 <_strtod_l+0xba>
 8002c36:	2300      	movs	r3, #0
 8002c38:	930c      	str	r3, [sp, #48]	; 0x30
 8002c3a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002c3c:	782b      	ldrb	r3, [r5, #0]
 8002c3e:	2b30      	cmp	r3, #48	; 0x30
 8002c40:	f040 80af 	bne.w	8002da2 <_strtod_l+0x1aa>
 8002c44:	786b      	ldrb	r3, [r5, #1]
 8002c46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002c4a:	2b58      	cmp	r3, #88	; 0x58
 8002c4c:	d16c      	bne.n	8002d28 <_strtod_l+0x130>
 8002c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c50:	4650      	mov	r0, sl
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	ab1c      	add	r3, sp, #112	; 0x70
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	4a8d      	ldr	r2, [pc, #564]	; (8002e90 <_strtod_l+0x298>)
 8002c5a:	f8cd b008 	str.w	fp, [sp, #8]
 8002c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8002c60:	a91b      	add	r1, sp, #108	; 0x6c
 8002c62:	f000 fec1 	bl	80039e8 <__gethex>
 8002c66:	f010 0607 	ands.w	r6, r0, #7
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	d005      	beq.n	8002c7a <_strtod_l+0x82>
 8002c6e:	2e06      	cmp	r6, #6
 8002c70:	d129      	bne.n	8002cc6 <_strtod_l+0xce>
 8002c72:	2300      	movs	r3, #0
 8002c74:	3501      	adds	r5, #1
 8002c76:	951b      	str	r5, [sp, #108]	; 0x6c
 8002c78:	930c      	str	r3, [sp, #48]	; 0x30
 8002c7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f040 8596 	bne.w	80037ae <_strtod_l+0xbb6>
 8002c82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c84:	b1d3      	cbz	r3, 8002cbc <_strtod_l+0xc4>
 8002c86:	4642      	mov	r2, r8
 8002c88:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002c8c:	4610      	mov	r0, r2
 8002c8e:	4619      	mov	r1, r3
 8002c90:	b021      	add	sp, #132	; 0x84
 8002c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c96:	2a20      	cmp	r2, #32
 8002c98:	d1cd      	bne.n	8002c36 <_strtod_l+0x3e>
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	931b      	str	r3, [sp, #108]	; 0x6c
 8002c9e:	e7bf      	b.n	8002c20 <_strtod_l+0x28>
 8002ca0:	2a2d      	cmp	r2, #45	; 0x2d
 8002ca2:	d1c8      	bne.n	8002c36 <_strtod_l+0x3e>
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	920c      	str	r2, [sp, #48]	; 0x30
 8002ca8:	1c5a      	adds	r2, r3, #1
 8002caa:	921b      	str	r2, [sp, #108]	; 0x6c
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1c3      	bne.n	8002c3a <_strtod_l+0x42>
 8002cb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002cb4:	961b      	str	r6, [sp, #108]	; 0x6c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 8577 	bne.w	80037aa <_strtod_l+0xbb2>
 8002cbc:	4642      	mov	r2, r8
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	e7e4      	b.n	8002c8c <_strtod_l+0x94>
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	e7ef      	b.n	8002ca6 <_strtod_l+0xae>
 8002cc6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002cc8:	b13a      	cbz	r2, 8002cda <_strtod_l+0xe2>
 8002cca:	2135      	movs	r1, #53	; 0x35
 8002ccc:	a81e      	add	r0, sp, #120	; 0x78
 8002cce:	f001 fe1d 	bl	800490c <__copybits>
 8002cd2:	4650      	mov	r0, sl
 8002cd4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002cd6:	f001 f9e5 	bl	80040a4 <_Bfree>
 8002cda:	3e01      	subs	r6, #1
 8002cdc:	2e05      	cmp	r6, #5
 8002cde:	d807      	bhi.n	8002cf0 <_strtod_l+0xf8>
 8002ce0:	e8df f006 	tbb	[pc, r6]
 8002ce4:	1d180b0e 	.word	0x1d180b0e
 8002ce8:	030e      	.short	0x030e
 8002cea:	f04f 0900 	mov.w	r9, #0
 8002cee:	46c8      	mov	r8, r9
 8002cf0:	0721      	lsls	r1, r4, #28
 8002cf2:	d5c2      	bpl.n	8002c7a <_strtod_l+0x82>
 8002cf4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8002cf8:	e7bf      	b.n	8002c7a <_strtod_l+0x82>
 8002cfa:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8002cfe:	e7f7      	b.n	8002cf0 <_strtod_l+0xf8>
 8002d00:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002d02:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8002d06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8002d0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002d0e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8002d12:	e7ed      	b.n	8002cf0 <_strtod_l+0xf8>
 8002d14:	f04f 0800 	mov.w	r8, #0
 8002d18:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8002e94 <_strtod_l+0x29c>
 8002d1c:	e7e8      	b.n	8002cf0 <_strtod_l+0xf8>
 8002d1e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8002d22:	f04f 38ff 	mov.w	r8, #4294967295
 8002d26:	e7e3      	b.n	8002cf0 <_strtod_l+0xf8>
 8002d28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002d2a:	1c5a      	adds	r2, r3, #1
 8002d2c:	921b      	str	r2, [sp, #108]	; 0x6c
 8002d2e:	785b      	ldrb	r3, [r3, #1]
 8002d30:	2b30      	cmp	r3, #48	; 0x30
 8002d32:	d0f9      	beq.n	8002d28 <_strtod_l+0x130>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0a0      	beq.n	8002c7a <_strtod_l+0x82>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	9307      	str	r3, [sp, #28]
 8002d3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002d3e:	220a      	movs	r2, #10
 8002d40:	9308      	str	r3, [sp, #32]
 8002d42:	2300      	movs	r3, #0
 8002d44:	469b      	mov	fp, r3
 8002d46:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002d4a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002d4c:	7805      	ldrb	r5, [r0, #0]
 8002d4e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8002d52:	b2d9      	uxtb	r1, r3
 8002d54:	2909      	cmp	r1, #9
 8002d56:	d926      	bls.n	8002da6 <_strtod_l+0x1ae>
 8002d58:	4622      	mov	r2, r4
 8002d5a:	4639      	mov	r1, r7
 8002d5c:	f001 fe98 	bl	8004a90 <strncmp>
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d032      	beq.n	8002dca <_strtod_l+0x1d2>
 8002d64:	2000      	movs	r0, #0
 8002d66:	462b      	mov	r3, r5
 8002d68:	465c      	mov	r4, fp
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	9004      	str	r0, [sp, #16]
 8002d6e:	2b65      	cmp	r3, #101	; 0x65
 8002d70:	d001      	beq.n	8002d76 <_strtod_l+0x17e>
 8002d72:	2b45      	cmp	r3, #69	; 0x45
 8002d74:	d113      	bne.n	8002d9e <_strtod_l+0x1a6>
 8002d76:	b91c      	cbnz	r4, 8002d80 <_strtod_l+0x188>
 8002d78:	9b07      	ldr	r3, [sp, #28]
 8002d7a:	4303      	orrs	r3, r0
 8002d7c:	d099      	beq.n	8002cb2 <_strtod_l+0xba>
 8002d7e:	2400      	movs	r4, #0
 8002d80:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8002d82:	1c73      	adds	r3, r6, #1
 8002d84:	931b      	str	r3, [sp, #108]	; 0x6c
 8002d86:	7873      	ldrb	r3, [r6, #1]
 8002d88:	2b2b      	cmp	r3, #43	; 0x2b
 8002d8a:	d078      	beq.n	8002e7e <_strtod_l+0x286>
 8002d8c:	2b2d      	cmp	r3, #45	; 0x2d
 8002d8e:	d07b      	beq.n	8002e88 <_strtod_l+0x290>
 8002d90:	2700      	movs	r7, #0
 8002d92:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8002d96:	2909      	cmp	r1, #9
 8002d98:	f240 8082 	bls.w	8002ea0 <_strtod_l+0x2a8>
 8002d9c:	961b      	str	r6, [sp, #108]	; 0x6c
 8002d9e:	2500      	movs	r5, #0
 8002da0:	e09e      	b.n	8002ee0 <_strtod_l+0x2e8>
 8002da2:	2300      	movs	r3, #0
 8002da4:	e7c9      	b.n	8002d3a <_strtod_l+0x142>
 8002da6:	f1bb 0f08 	cmp.w	fp, #8
 8002daa:	bfd5      	itete	le
 8002dac:	9906      	ldrle	r1, [sp, #24]
 8002dae:	9905      	ldrgt	r1, [sp, #20]
 8002db0:	fb02 3301 	mlale	r3, r2, r1, r3
 8002db4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8002db8:	f100 0001 	add.w	r0, r0, #1
 8002dbc:	bfd4      	ite	le
 8002dbe:	9306      	strle	r3, [sp, #24]
 8002dc0:	9305      	strgt	r3, [sp, #20]
 8002dc2:	f10b 0b01 	add.w	fp, fp, #1
 8002dc6:	901b      	str	r0, [sp, #108]	; 0x6c
 8002dc8:	e7bf      	b.n	8002d4a <_strtod_l+0x152>
 8002dca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002dcc:	191a      	adds	r2, r3, r4
 8002dce:	921b      	str	r2, [sp, #108]	; 0x6c
 8002dd0:	5d1b      	ldrb	r3, [r3, r4]
 8002dd2:	f1bb 0f00 	cmp.w	fp, #0
 8002dd6:	d036      	beq.n	8002e46 <_strtod_l+0x24e>
 8002dd8:	465c      	mov	r4, fp
 8002dda:	9004      	str	r0, [sp, #16]
 8002ddc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002de0:	2a09      	cmp	r2, #9
 8002de2:	d912      	bls.n	8002e0a <_strtod_l+0x212>
 8002de4:	2201      	movs	r2, #1
 8002de6:	e7c2      	b.n	8002d6e <_strtod_l+0x176>
 8002de8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002dea:	3001      	adds	r0, #1
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	921b      	str	r2, [sp, #108]	; 0x6c
 8002df0:	785b      	ldrb	r3, [r3, #1]
 8002df2:	2b30      	cmp	r3, #48	; 0x30
 8002df4:	d0f8      	beq.n	8002de8 <_strtod_l+0x1f0>
 8002df6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8002dfa:	2a08      	cmp	r2, #8
 8002dfc:	f200 84dc 	bhi.w	80037b8 <_strtod_l+0xbc0>
 8002e00:	9004      	str	r0, [sp, #16]
 8002e02:	2000      	movs	r0, #0
 8002e04:	4604      	mov	r4, r0
 8002e06:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002e08:	9208      	str	r2, [sp, #32]
 8002e0a:	3b30      	subs	r3, #48	; 0x30
 8002e0c:	f100 0201 	add.w	r2, r0, #1
 8002e10:	d013      	beq.n	8002e3a <_strtod_l+0x242>
 8002e12:	9904      	ldr	r1, [sp, #16]
 8002e14:	1905      	adds	r5, r0, r4
 8002e16:	4411      	add	r1, r2
 8002e18:	9104      	str	r1, [sp, #16]
 8002e1a:	4622      	mov	r2, r4
 8002e1c:	210a      	movs	r1, #10
 8002e1e:	42aa      	cmp	r2, r5
 8002e20:	d113      	bne.n	8002e4a <_strtod_l+0x252>
 8002e22:	1822      	adds	r2, r4, r0
 8002e24:	2a08      	cmp	r2, #8
 8002e26:	f104 0401 	add.w	r4, r4, #1
 8002e2a:	4404      	add	r4, r0
 8002e2c:	dc1b      	bgt.n	8002e66 <_strtod_l+0x26e>
 8002e2e:	220a      	movs	r2, #10
 8002e30:	9906      	ldr	r1, [sp, #24]
 8002e32:	fb02 3301 	mla	r3, r2, r1, r3
 8002e36:	9306      	str	r3, [sp, #24]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	1c59      	adds	r1, r3, #1
 8002e40:	911b      	str	r1, [sp, #108]	; 0x6c
 8002e42:	785b      	ldrb	r3, [r3, #1]
 8002e44:	e7ca      	b.n	8002ddc <_strtod_l+0x1e4>
 8002e46:	4658      	mov	r0, fp
 8002e48:	e7d3      	b.n	8002df2 <_strtod_l+0x1fa>
 8002e4a:	2a08      	cmp	r2, #8
 8002e4c:	dc04      	bgt.n	8002e58 <_strtod_l+0x260>
 8002e4e:	9f06      	ldr	r7, [sp, #24]
 8002e50:	434f      	muls	r7, r1
 8002e52:	9706      	str	r7, [sp, #24]
 8002e54:	3201      	adds	r2, #1
 8002e56:	e7e2      	b.n	8002e1e <_strtod_l+0x226>
 8002e58:	1c57      	adds	r7, r2, #1
 8002e5a:	2f10      	cmp	r7, #16
 8002e5c:	bfde      	ittt	le
 8002e5e:	9f05      	ldrle	r7, [sp, #20]
 8002e60:	434f      	mulle	r7, r1
 8002e62:	9705      	strle	r7, [sp, #20]
 8002e64:	e7f6      	b.n	8002e54 <_strtod_l+0x25c>
 8002e66:	2c10      	cmp	r4, #16
 8002e68:	bfdf      	itttt	le
 8002e6a:	220a      	movle	r2, #10
 8002e6c:	9905      	ldrle	r1, [sp, #20]
 8002e6e:	fb02 3301 	mlale	r3, r2, r1, r3
 8002e72:	9305      	strle	r3, [sp, #20]
 8002e74:	e7e0      	b.n	8002e38 <_strtod_l+0x240>
 8002e76:	2300      	movs	r3, #0
 8002e78:	2201      	movs	r2, #1
 8002e7a:	9304      	str	r3, [sp, #16]
 8002e7c:	e77c      	b.n	8002d78 <_strtod_l+0x180>
 8002e7e:	2700      	movs	r7, #0
 8002e80:	1cb3      	adds	r3, r6, #2
 8002e82:	931b      	str	r3, [sp, #108]	; 0x6c
 8002e84:	78b3      	ldrb	r3, [r6, #2]
 8002e86:	e784      	b.n	8002d92 <_strtod_l+0x19a>
 8002e88:	2701      	movs	r7, #1
 8002e8a:	e7f9      	b.n	8002e80 <_strtod_l+0x288>
 8002e8c:	08005bbc 	.word	0x08005bbc
 8002e90:	080059ec 	.word	0x080059ec
 8002e94:	7ff00000 	.word	0x7ff00000
 8002e98:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002e9a:	1c59      	adds	r1, r3, #1
 8002e9c:	911b      	str	r1, [sp, #108]	; 0x6c
 8002e9e:	785b      	ldrb	r3, [r3, #1]
 8002ea0:	2b30      	cmp	r3, #48	; 0x30
 8002ea2:	d0f9      	beq.n	8002e98 <_strtod_l+0x2a0>
 8002ea4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8002ea8:	2908      	cmp	r1, #8
 8002eaa:	f63f af78 	bhi.w	8002d9e <_strtod_l+0x1a6>
 8002eae:	f04f 0e0a 	mov.w	lr, #10
 8002eb2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8002eb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8002eba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002ebc:	1c59      	adds	r1, r3, #1
 8002ebe:	911b      	str	r1, [sp, #108]	; 0x6c
 8002ec0:	785b      	ldrb	r3, [r3, #1]
 8002ec2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8002ec6:	2d09      	cmp	r5, #9
 8002ec8:	d935      	bls.n	8002f36 <_strtod_l+0x33e>
 8002eca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002ecc:	1b49      	subs	r1, r1, r5
 8002ece:	2908      	cmp	r1, #8
 8002ed0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8002ed4:	dc02      	bgt.n	8002edc <_strtod_l+0x2e4>
 8002ed6:	4565      	cmp	r5, ip
 8002ed8:	bfa8      	it	ge
 8002eda:	4665      	movge	r5, ip
 8002edc:	b107      	cbz	r7, 8002ee0 <_strtod_l+0x2e8>
 8002ede:	426d      	negs	r5, r5
 8002ee0:	2c00      	cmp	r4, #0
 8002ee2:	d14c      	bne.n	8002f7e <_strtod_l+0x386>
 8002ee4:	9907      	ldr	r1, [sp, #28]
 8002ee6:	4301      	orrs	r1, r0
 8002ee8:	f47f aec7 	bne.w	8002c7a <_strtod_l+0x82>
 8002eec:	2a00      	cmp	r2, #0
 8002eee:	f47f aee0 	bne.w	8002cb2 <_strtod_l+0xba>
 8002ef2:	2b69      	cmp	r3, #105	; 0x69
 8002ef4:	d026      	beq.n	8002f44 <_strtod_l+0x34c>
 8002ef6:	dc23      	bgt.n	8002f40 <_strtod_l+0x348>
 8002ef8:	2b49      	cmp	r3, #73	; 0x49
 8002efa:	d023      	beq.n	8002f44 <_strtod_l+0x34c>
 8002efc:	2b4e      	cmp	r3, #78	; 0x4e
 8002efe:	f47f aed8 	bne.w	8002cb2 <_strtod_l+0xba>
 8002f02:	499c      	ldr	r1, [pc, #624]	; (8003174 <_strtod_l+0x57c>)
 8002f04:	a81b      	add	r0, sp, #108	; 0x6c
 8002f06:	f000 ffbd 	bl	8003e84 <__match>
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	f43f aed1 	beq.w	8002cb2 <_strtod_l+0xba>
 8002f10:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b28      	cmp	r3, #40	; 0x28
 8002f16:	d12c      	bne.n	8002f72 <_strtod_l+0x37a>
 8002f18:	4997      	ldr	r1, [pc, #604]	; (8003178 <_strtod_l+0x580>)
 8002f1a:	aa1e      	add	r2, sp, #120	; 0x78
 8002f1c:	a81b      	add	r0, sp, #108	; 0x6c
 8002f1e:	f000 ffc5 	bl	8003eac <__hexnan>
 8002f22:	2805      	cmp	r0, #5
 8002f24:	d125      	bne.n	8002f72 <_strtod_l+0x37a>
 8002f26:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002f28:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8002f2c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8002f30:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8002f34:	e6a1      	b.n	8002c7a <_strtod_l+0x82>
 8002f36:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8002f3a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8002f3e:	e7bc      	b.n	8002eba <_strtod_l+0x2c2>
 8002f40:	2b6e      	cmp	r3, #110	; 0x6e
 8002f42:	e7dc      	b.n	8002efe <_strtod_l+0x306>
 8002f44:	498d      	ldr	r1, [pc, #564]	; (800317c <_strtod_l+0x584>)
 8002f46:	a81b      	add	r0, sp, #108	; 0x6c
 8002f48:	f000 ff9c 	bl	8003e84 <__match>
 8002f4c:	2800      	cmp	r0, #0
 8002f4e:	f43f aeb0 	beq.w	8002cb2 <_strtod_l+0xba>
 8002f52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002f54:	498a      	ldr	r1, [pc, #552]	; (8003180 <_strtod_l+0x588>)
 8002f56:	3b01      	subs	r3, #1
 8002f58:	a81b      	add	r0, sp, #108	; 0x6c
 8002f5a:	931b      	str	r3, [sp, #108]	; 0x6c
 8002f5c:	f000 ff92 	bl	8003e84 <__match>
 8002f60:	b910      	cbnz	r0, 8002f68 <_strtod_l+0x370>
 8002f62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002f64:	3301      	adds	r3, #1
 8002f66:	931b      	str	r3, [sp, #108]	; 0x6c
 8002f68:	f04f 0800 	mov.w	r8, #0
 8002f6c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8003190 <_strtod_l+0x598>
 8002f70:	e683      	b.n	8002c7a <_strtod_l+0x82>
 8002f72:	4884      	ldr	r0, [pc, #528]	; (8003184 <_strtod_l+0x58c>)
 8002f74:	f001 fd76 	bl	8004a64 <nan>
 8002f78:	4680      	mov	r8, r0
 8002f7a:	4689      	mov	r9, r1
 8002f7c:	e67d      	b.n	8002c7a <_strtod_l+0x82>
 8002f7e:	9b04      	ldr	r3, [sp, #16]
 8002f80:	f1bb 0f00 	cmp.w	fp, #0
 8002f84:	bf08      	it	eq
 8002f86:	46a3      	moveq	fp, r4
 8002f88:	1aeb      	subs	r3, r5, r3
 8002f8a:	2c10      	cmp	r4, #16
 8002f8c:	9806      	ldr	r0, [sp, #24]
 8002f8e:	4626      	mov	r6, r4
 8002f90:	9307      	str	r3, [sp, #28]
 8002f92:	bfa8      	it	ge
 8002f94:	2610      	movge	r6, #16
 8002f96:	f7fd fa2f 	bl	80003f8 <__aeabi_ui2d>
 8002f9a:	2c09      	cmp	r4, #9
 8002f9c:	4680      	mov	r8, r0
 8002f9e:	4689      	mov	r9, r1
 8002fa0:	dd13      	ble.n	8002fca <_strtod_l+0x3d2>
 8002fa2:	4b79      	ldr	r3, [pc, #484]	; (8003188 <_strtod_l+0x590>)
 8002fa4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002fa8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8002fac:	f7fd fa9e 	bl	80004ec <__aeabi_dmul>
 8002fb0:	4680      	mov	r8, r0
 8002fb2:	9805      	ldr	r0, [sp, #20]
 8002fb4:	4689      	mov	r9, r1
 8002fb6:	f7fd fa1f 	bl	80003f8 <__aeabi_ui2d>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	f7fd f8dd 	bl	8000180 <__adddf3>
 8002fc6:	4680      	mov	r8, r0
 8002fc8:	4689      	mov	r9, r1
 8002fca:	2c0f      	cmp	r4, #15
 8002fcc:	dc36      	bgt.n	800303c <_strtod_l+0x444>
 8002fce:	9b07      	ldr	r3, [sp, #28]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f43f ae52 	beq.w	8002c7a <_strtod_l+0x82>
 8002fd6:	dd22      	ble.n	800301e <_strtod_l+0x426>
 8002fd8:	2b16      	cmp	r3, #22
 8002fda:	dc09      	bgt.n	8002ff0 <_strtod_l+0x3f8>
 8002fdc:	4c6a      	ldr	r4, [pc, #424]	; (8003188 <_strtod_l+0x590>)
 8002fde:	4642      	mov	r2, r8
 8002fe0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8002fe4:	464b      	mov	r3, r9
 8002fe6:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002fea:	f7fd fa7f 	bl	80004ec <__aeabi_dmul>
 8002fee:	e7c3      	b.n	8002f78 <_strtod_l+0x380>
 8002ff0:	9a07      	ldr	r2, [sp, #28]
 8002ff2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	db20      	blt.n	800303c <_strtod_l+0x444>
 8002ffa:	4d63      	ldr	r5, [pc, #396]	; (8003188 <_strtod_l+0x590>)
 8002ffc:	f1c4 040f 	rsb	r4, r4, #15
 8003000:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003004:	4642      	mov	r2, r8
 8003006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800300a:	464b      	mov	r3, r9
 800300c:	f7fd fa6e 	bl	80004ec <__aeabi_dmul>
 8003010:	9b07      	ldr	r3, [sp, #28]
 8003012:	1b1c      	subs	r4, r3, r4
 8003014:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003018:	e9d5 2300 	ldrd	r2, r3, [r5]
 800301c:	e7e5      	b.n	8002fea <_strtod_l+0x3f2>
 800301e:	9b07      	ldr	r3, [sp, #28]
 8003020:	3316      	adds	r3, #22
 8003022:	db0b      	blt.n	800303c <_strtod_l+0x444>
 8003024:	9b04      	ldr	r3, [sp, #16]
 8003026:	4a58      	ldr	r2, [pc, #352]	; (8003188 <_strtod_l+0x590>)
 8003028:	1b5d      	subs	r5, r3, r5
 800302a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800302e:	4640      	mov	r0, r8
 8003030:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003034:	4649      	mov	r1, r9
 8003036:	f7fd fb83 	bl	8000740 <__aeabi_ddiv>
 800303a:	e79d      	b.n	8002f78 <_strtod_l+0x380>
 800303c:	9b07      	ldr	r3, [sp, #28]
 800303e:	1ba6      	subs	r6, r4, r6
 8003040:	441e      	add	r6, r3
 8003042:	2e00      	cmp	r6, #0
 8003044:	dd71      	ble.n	800312a <_strtod_l+0x532>
 8003046:	f016 030f 	ands.w	r3, r6, #15
 800304a:	d00a      	beq.n	8003062 <_strtod_l+0x46a>
 800304c:	494e      	ldr	r1, [pc, #312]	; (8003188 <_strtod_l+0x590>)
 800304e:	4642      	mov	r2, r8
 8003050:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003058:	464b      	mov	r3, r9
 800305a:	f7fd fa47 	bl	80004ec <__aeabi_dmul>
 800305e:	4680      	mov	r8, r0
 8003060:	4689      	mov	r9, r1
 8003062:	f036 060f 	bics.w	r6, r6, #15
 8003066:	d050      	beq.n	800310a <_strtod_l+0x512>
 8003068:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800306c:	dd27      	ble.n	80030be <_strtod_l+0x4c6>
 800306e:	f04f 0b00 	mov.w	fp, #0
 8003072:	f8cd b010 	str.w	fp, [sp, #16]
 8003076:	f8cd b020 	str.w	fp, [sp, #32]
 800307a:	f8cd b018 	str.w	fp, [sp, #24]
 800307e:	2322      	movs	r3, #34	; 0x22
 8003080:	f04f 0800 	mov.w	r8, #0
 8003084:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8003190 <_strtod_l+0x598>
 8003088:	f8ca 3000 	str.w	r3, [sl]
 800308c:	9b08      	ldr	r3, [sp, #32]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f43f adf3 	beq.w	8002c7a <_strtod_l+0x82>
 8003094:	4650      	mov	r0, sl
 8003096:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003098:	f001 f804 	bl	80040a4 <_Bfree>
 800309c:	4650      	mov	r0, sl
 800309e:	9906      	ldr	r1, [sp, #24]
 80030a0:	f001 f800 	bl	80040a4 <_Bfree>
 80030a4:	4650      	mov	r0, sl
 80030a6:	9904      	ldr	r1, [sp, #16]
 80030a8:	f000 fffc 	bl	80040a4 <_Bfree>
 80030ac:	4650      	mov	r0, sl
 80030ae:	9908      	ldr	r1, [sp, #32]
 80030b0:	f000 fff8 	bl	80040a4 <_Bfree>
 80030b4:	4659      	mov	r1, fp
 80030b6:	4650      	mov	r0, sl
 80030b8:	f000 fff4 	bl	80040a4 <_Bfree>
 80030bc:	e5dd      	b.n	8002c7a <_strtod_l+0x82>
 80030be:	2300      	movs	r3, #0
 80030c0:	4640      	mov	r0, r8
 80030c2:	4649      	mov	r1, r9
 80030c4:	461f      	mov	r7, r3
 80030c6:	1136      	asrs	r6, r6, #4
 80030c8:	2e01      	cmp	r6, #1
 80030ca:	dc21      	bgt.n	8003110 <_strtod_l+0x518>
 80030cc:	b10b      	cbz	r3, 80030d2 <_strtod_l+0x4da>
 80030ce:	4680      	mov	r8, r0
 80030d0:	4689      	mov	r9, r1
 80030d2:	4b2e      	ldr	r3, [pc, #184]	; (800318c <_strtod_l+0x594>)
 80030d4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80030d8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80030dc:	4642      	mov	r2, r8
 80030de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80030e2:	464b      	mov	r3, r9
 80030e4:	f7fd fa02 	bl	80004ec <__aeabi_dmul>
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <_strtod_l+0x598>)
 80030ea:	460a      	mov	r2, r1
 80030ec:	400b      	ands	r3, r1
 80030ee:	4929      	ldr	r1, [pc, #164]	; (8003194 <_strtod_l+0x59c>)
 80030f0:	4680      	mov	r8, r0
 80030f2:	428b      	cmp	r3, r1
 80030f4:	d8bb      	bhi.n	800306e <_strtod_l+0x476>
 80030f6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80030fa:	428b      	cmp	r3, r1
 80030fc:	bf86      	itte	hi
 80030fe:	f04f 38ff 	movhi.w	r8, #4294967295
 8003102:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8003198 <_strtod_l+0x5a0>
 8003106:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800310a:	2300      	movs	r3, #0
 800310c:	9305      	str	r3, [sp, #20]
 800310e:	e07e      	b.n	800320e <_strtod_l+0x616>
 8003110:	07f2      	lsls	r2, r6, #31
 8003112:	d507      	bpl.n	8003124 <_strtod_l+0x52c>
 8003114:	4b1d      	ldr	r3, [pc, #116]	; (800318c <_strtod_l+0x594>)
 8003116:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f7fd f9e5 	bl	80004ec <__aeabi_dmul>
 8003122:	2301      	movs	r3, #1
 8003124:	3701      	adds	r7, #1
 8003126:	1076      	asrs	r6, r6, #1
 8003128:	e7ce      	b.n	80030c8 <_strtod_l+0x4d0>
 800312a:	d0ee      	beq.n	800310a <_strtod_l+0x512>
 800312c:	4276      	negs	r6, r6
 800312e:	f016 020f 	ands.w	r2, r6, #15
 8003132:	d00a      	beq.n	800314a <_strtod_l+0x552>
 8003134:	4b14      	ldr	r3, [pc, #80]	; (8003188 <_strtod_l+0x590>)
 8003136:	4640      	mov	r0, r8
 8003138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800313c:	4649      	mov	r1, r9
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	f7fd fafd 	bl	8000740 <__aeabi_ddiv>
 8003146:	4680      	mov	r8, r0
 8003148:	4689      	mov	r9, r1
 800314a:	1136      	asrs	r6, r6, #4
 800314c:	d0dd      	beq.n	800310a <_strtod_l+0x512>
 800314e:	2e1f      	cmp	r6, #31
 8003150:	dd24      	ble.n	800319c <_strtod_l+0x5a4>
 8003152:	f04f 0b00 	mov.w	fp, #0
 8003156:	f8cd b010 	str.w	fp, [sp, #16]
 800315a:	f8cd b020 	str.w	fp, [sp, #32]
 800315e:	f8cd b018 	str.w	fp, [sp, #24]
 8003162:	2322      	movs	r3, #34	; 0x22
 8003164:	f04f 0800 	mov.w	r8, #0
 8003168:	f04f 0900 	mov.w	r9, #0
 800316c:	f8ca 3000 	str.w	r3, [sl]
 8003170:	e78c      	b.n	800308c <_strtod_l+0x494>
 8003172:	bf00      	nop
 8003174:	080059e9 	.word	0x080059e9
 8003178:	08005a00 	.word	0x08005a00
 800317c:	080059e0 	.word	0x080059e0
 8003180:	080059e3 	.word	0x080059e3
 8003184:	08005d7f 	.word	0x08005d7f
 8003188:	08005c70 	.word	0x08005c70
 800318c:	08005c48 	.word	0x08005c48
 8003190:	7ff00000 	.word	0x7ff00000
 8003194:	7ca00000 	.word	0x7ca00000
 8003198:	7fefffff 	.word	0x7fefffff
 800319c:	f016 0310 	ands.w	r3, r6, #16
 80031a0:	bf18      	it	ne
 80031a2:	236a      	movne	r3, #106	; 0x6a
 80031a4:	4640      	mov	r0, r8
 80031a6:	9305      	str	r3, [sp, #20]
 80031a8:	4649      	mov	r1, r9
 80031aa:	2300      	movs	r3, #0
 80031ac:	4fb2      	ldr	r7, [pc, #712]	; (8003478 <_strtod_l+0x880>)
 80031ae:	07f2      	lsls	r2, r6, #31
 80031b0:	d504      	bpl.n	80031bc <_strtod_l+0x5c4>
 80031b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031b6:	f7fd f999 	bl	80004ec <__aeabi_dmul>
 80031ba:	2301      	movs	r3, #1
 80031bc:	1076      	asrs	r6, r6, #1
 80031be:	f107 0708 	add.w	r7, r7, #8
 80031c2:	d1f4      	bne.n	80031ae <_strtod_l+0x5b6>
 80031c4:	b10b      	cbz	r3, 80031ca <_strtod_l+0x5d2>
 80031c6:	4680      	mov	r8, r0
 80031c8:	4689      	mov	r9, r1
 80031ca:	9b05      	ldr	r3, [sp, #20]
 80031cc:	b1bb      	cbz	r3, 80031fe <_strtod_l+0x606>
 80031ce:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80031d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	4649      	mov	r1, r9
 80031da:	dd10      	ble.n	80031fe <_strtod_l+0x606>
 80031dc:	2b1f      	cmp	r3, #31
 80031de:	f340 812b 	ble.w	8003438 <_strtod_l+0x840>
 80031e2:	2b34      	cmp	r3, #52	; 0x34
 80031e4:	bfd8      	it	le
 80031e6:	f04f 32ff 	movle.w	r2, #4294967295
 80031ea:	f04f 0800 	mov.w	r8, #0
 80031ee:	bfcf      	iteee	gt
 80031f0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80031f4:	3b20      	suble	r3, #32
 80031f6:	fa02 f303 	lslle.w	r3, r2, r3
 80031fa:	ea03 0901 	andle.w	r9, r3, r1
 80031fe:	2200      	movs	r2, #0
 8003200:	2300      	movs	r3, #0
 8003202:	4640      	mov	r0, r8
 8003204:	4649      	mov	r1, r9
 8003206:	f7fd fbd9 	bl	80009bc <__aeabi_dcmpeq>
 800320a:	2800      	cmp	r0, #0
 800320c:	d1a1      	bne.n	8003152 <_strtod_l+0x55a>
 800320e:	9b06      	ldr	r3, [sp, #24]
 8003210:	465a      	mov	r2, fp
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	4650      	mov	r0, sl
 8003216:	4623      	mov	r3, r4
 8003218:	9908      	ldr	r1, [sp, #32]
 800321a:	f000 ffaf 	bl	800417c <__s2b>
 800321e:	9008      	str	r0, [sp, #32]
 8003220:	2800      	cmp	r0, #0
 8003222:	f43f af24 	beq.w	800306e <_strtod_l+0x476>
 8003226:	9b04      	ldr	r3, [sp, #16]
 8003228:	f04f 0b00 	mov.w	fp, #0
 800322c:	1b5d      	subs	r5, r3, r5
 800322e:	9b07      	ldr	r3, [sp, #28]
 8003230:	f8cd b010 	str.w	fp, [sp, #16]
 8003234:	2b00      	cmp	r3, #0
 8003236:	bfb4      	ite	lt
 8003238:	462b      	movlt	r3, r5
 800323a:	2300      	movge	r3, #0
 800323c:	930e      	str	r3, [sp, #56]	; 0x38
 800323e:	9b07      	ldr	r3, [sp, #28]
 8003240:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003244:	9316      	str	r3, [sp, #88]	; 0x58
 8003246:	9b08      	ldr	r3, [sp, #32]
 8003248:	4650      	mov	r0, sl
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	f000 feea 	bl	8004024 <_Balloc>
 8003250:	9006      	str	r0, [sp, #24]
 8003252:	2800      	cmp	r0, #0
 8003254:	f43f af13 	beq.w	800307e <_strtod_l+0x486>
 8003258:	9b08      	ldr	r3, [sp, #32]
 800325a:	300c      	adds	r0, #12
 800325c:	691a      	ldr	r2, [r3, #16]
 800325e:	f103 010c 	add.w	r1, r3, #12
 8003262:	3202      	adds	r2, #2
 8003264:	0092      	lsls	r2, r2, #2
 8003266:	f000 fecf 	bl	8004008 <memcpy>
 800326a:	ab1e      	add	r3, sp, #120	; 0x78
 800326c:	9301      	str	r3, [sp, #4]
 800326e:	ab1d      	add	r3, sp, #116	; 0x74
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	4642      	mov	r2, r8
 8003274:	464b      	mov	r3, r9
 8003276:	4650      	mov	r0, sl
 8003278:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800327c:	f001 fabc 	bl	80047f8 <__d2b>
 8003280:	901c      	str	r0, [sp, #112]	; 0x70
 8003282:	2800      	cmp	r0, #0
 8003284:	f43f aefb 	beq.w	800307e <_strtod_l+0x486>
 8003288:	2101      	movs	r1, #1
 800328a:	4650      	mov	r0, sl
 800328c:	f001 f80e 	bl	80042ac <__i2b>
 8003290:	4603      	mov	r3, r0
 8003292:	9004      	str	r0, [sp, #16]
 8003294:	2800      	cmp	r0, #0
 8003296:	f43f aef2 	beq.w	800307e <_strtod_l+0x486>
 800329a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800329c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800329e:	2d00      	cmp	r5, #0
 80032a0:	bfab      	itete	ge
 80032a2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80032a4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80032a6:	18ee      	addge	r6, r5, r3
 80032a8:	1b5c      	sublt	r4, r3, r5
 80032aa:	9b05      	ldr	r3, [sp, #20]
 80032ac:	bfa8      	it	ge
 80032ae:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80032b0:	eba5 0503 	sub.w	r5, r5, r3
 80032b4:	4415      	add	r5, r2
 80032b6:	4b71      	ldr	r3, [pc, #452]	; (800347c <_strtod_l+0x884>)
 80032b8:	f105 35ff 	add.w	r5, r5, #4294967295
 80032bc:	bfb8      	it	lt
 80032be:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80032c0:	429d      	cmp	r5, r3
 80032c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80032c6:	f280 80c9 	bge.w	800345c <_strtod_l+0x864>
 80032ca:	1b5b      	subs	r3, r3, r5
 80032cc:	2b1f      	cmp	r3, #31
 80032ce:	f04f 0701 	mov.w	r7, #1
 80032d2:	eba2 0203 	sub.w	r2, r2, r3
 80032d6:	f300 80b6 	bgt.w	8003446 <_strtod_l+0x84e>
 80032da:	2500      	movs	r5, #0
 80032dc:	fa07 f303 	lsl.w	r3, r7, r3
 80032e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80032e2:	18b7      	adds	r7, r6, r2
 80032e4:	9b05      	ldr	r3, [sp, #20]
 80032e6:	42be      	cmp	r6, r7
 80032e8:	4414      	add	r4, r2
 80032ea:	441c      	add	r4, r3
 80032ec:	4633      	mov	r3, r6
 80032ee:	bfa8      	it	ge
 80032f0:	463b      	movge	r3, r7
 80032f2:	42a3      	cmp	r3, r4
 80032f4:	bfa8      	it	ge
 80032f6:	4623      	movge	r3, r4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bfc2      	ittt	gt
 80032fc:	1aff      	subgt	r7, r7, r3
 80032fe:	1ae4      	subgt	r4, r4, r3
 8003300:	1af6      	subgt	r6, r6, r3
 8003302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003304:	2b00      	cmp	r3, #0
 8003306:	dd17      	ble.n	8003338 <_strtod_l+0x740>
 8003308:	461a      	mov	r2, r3
 800330a:	4650      	mov	r0, sl
 800330c:	9904      	ldr	r1, [sp, #16]
 800330e:	f001 f887 	bl	8004420 <__pow5mult>
 8003312:	9004      	str	r0, [sp, #16]
 8003314:	2800      	cmp	r0, #0
 8003316:	f43f aeb2 	beq.w	800307e <_strtod_l+0x486>
 800331a:	4601      	mov	r1, r0
 800331c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800331e:	4650      	mov	r0, sl
 8003320:	f000 ffda 	bl	80042d8 <__multiply>
 8003324:	9009      	str	r0, [sp, #36]	; 0x24
 8003326:	2800      	cmp	r0, #0
 8003328:	f43f aea9 	beq.w	800307e <_strtod_l+0x486>
 800332c:	4650      	mov	r0, sl
 800332e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003330:	f000 feb8 	bl	80040a4 <_Bfree>
 8003334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003336:	931c      	str	r3, [sp, #112]	; 0x70
 8003338:	2f00      	cmp	r7, #0
 800333a:	f300 8093 	bgt.w	8003464 <_strtod_l+0x86c>
 800333e:	9b07      	ldr	r3, [sp, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	dd08      	ble.n	8003356 <_strtod_l+0x75e>
 8003344:	4650      	mov	r0, sl
 8003346:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8003348:	9906      	ldr	r1, [sp, #24]
 800334a:	f001 f869 	bl	8004420 <__pow5mult>
 800334e:	9006      	str	r0, [sp, #24]
 8003350:	2800      	cmp	r0, #0
 8003352:	f43f ae94 	beq.w	800307e <_strtod_l+0x486>
 8003356:	2c00      	cmp	r4, #0
 8003358:	dd08      	ble.n	800336c <_strtod_l+0x774>
 800335a:	4622      	mov	r2, r4
 800335c:	4650      	mov	r0, sl
 800335e:	9906      	ldr	r1, [sp, #24]
 8003360:	f001 f8b8 	bl	80044d4 <__lshift>
 8003364:	9006      	str	r0, [sp, #24]
 8003366:	2800      	cmp	r0, #0
 8003368:	f43f ae89 	beq.w	800307e <_strtod_l+0x486>
 800336c:	2e00      	cmp	r6, #0
 800336e:	dd08      	ble.n	8003382 <_strtod_l+0x78a>
 8003370:	4632      	mov	r2, r6
 8003372:	4650      	mov	r0, sl
 8003374:	9904      	ldr	r1, [sp, #16]
 8003376:	f001 f8ad 	bl	80044d4 <__lshift>
 800337a:	9004      	str	r0, [sp, #16]
 800337c:	2800      	cmp	r0, #0
 800337e:	f43f ae7e 	beq.w	800307e <_strtod_l+0x486>
 8003382:	4650      	mov	r0, sl
 8003384:	9a06      	ldr	r2, [sp, #24]
 8003386:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003388:	f001 f92c 	bl	80045e4 <__mdiff>
 800338c:	4683      	mov	fp, r0
 800338e:	2800      	cmp	r0, #0
 8003390:	f43f ae75 	beq.w	800307e <_strtod_l+0x486>
 8003394:	2400      	movs	r4, #0
 8003396:	68c3      	ldr	r3, [r0, #12]
 8003398:	9904      	ldr	r1, [sp, #16]
 800339a:	60c4      	str	r4, [r0, #12]
 800339c:	930d      	str	r3, [sp, #52]	; 0x34
 800339e:	f001 f905 	bl	80045ac <__mcmp>
 80033a2:	42a0      	cmp	r0, r4
 80033a4:	da70      	bge.n	8003488 <_strtod_l+0x890>
 80033a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033a8:	ea53 0308 	orrs.w	r3, r3, r8
 80033ac:	f040 8096 	bne.w	80034dc <_strtod_l+0x8e4>
 80033b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f040 8091 	bne.w	80034dc <_strtod_l+0x8e4>
 80033ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80033be:	0d1b      	lsrs	r3, r3, #20
 80033c0:	051b      	lsls	r3, r3, #20
 80033c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80033c6:	f240 8089 	bls.w	80034dc <_strtod_l+0x8e4>
 80033ca:	f8db 3014 	ldr.w	r3, [fp, #20]
 80033ce:	b923      	cbnz	r3, 80033da <_strtod_l+0x7e2>
 80033d0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	f340 8081 	ble.w	80034dc <_strtod_l+0x8e4>
 80033da:	4659      	mov	r1, fp
 80033dc:	2201      	movs	r2, #1
 80033de:	4650      	mov	r0, sl
 80033e0:	f001 f878 	bl	80044d4 <__lshift>
 80033e4:	9904      	ldr	r1, [sp, #16]
 80033e6:	4683      	mov	fp, r0
 80033e8:	f001 f8e0 	bl	80045ac <__mcmp>
 80033ec:	2800      	cmp	r0, #0
 80033ee:	dd75      	ble.n	80034dc <_strtod_l+0x8e4>
 80033f0:	9905      	ldr	r1, [sp, #20]
 80033f2:	464b      	mov	r3, r9
 80033f4:	4a22      	ldr	r2, [pc, #136]	; (8003480 <_strtod_l+0x888>)
 80033f6:	2900      	cmp	r1, #0
 80033f8:	f000 8091 	beq.w	800351e <_strtod_l+0x926>
 80033fc:	ea02 0109 	and.w	r1, r2, r9
 8003400:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8003404:	f300 808b 	bgt.w	800351e <_strtod_l+0x926>
 8003408:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800340c:	f77f aea9 	ble.w	8003162 <_strtod_l+0x56a>
 8003410:	2300      	movs	r3, #0
 8003412:	4a1c      	ldr	r2, [pc, #112]	; (8003484 <_strtod_l+0x88c>)
 8003414:	4640      	mov	r0, r8
 8003416:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800341a:	4649      	mov	r1, r9
 800341c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8003420:	f7fd f864 	bl	80004ec <__aeabi_dmul>
 8003424:	460b      	mov	r3, r1
 8003426:	4303      	orrs	r3, r0
 8003428:	bf08      	it	eq
 800342a:	2322      	moveq	r3, #34	; 0x22
 800342c:	4680      	mov	r8, r0
 800342e:	4689      	mov	r9, r1
 8003430:	bf08      	it	eq
 8003432:	f8ca 3000 	streq.w	r3, [sl]
 8003436:	e62d      	b.n	8003094 <_strtod_l+0x49c>
 8003438:	f04f 32ff 	mov.w	r2, #4294967295
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	ea03 0808 	and.w	r8, r3, r8
 8003444:	e6db      	b.n	80031fe <_strtod_l+0x606>
 8003446:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800344a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800344e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8003452:	35e2      	adds	r5, #226	; 0xe2
 8003454:	fa07 f505 	lsl.w	r5, r7, r5
 8003458:	970f      	str	r7, [sp, #60]	; 0x3c
 800345a:	e742      	b.n	80032e2 <_strtod_l+0x6ea>
 800345c:	2301      	movs	r3, #1
 800345e:	2500      	movs	r5, #0
 8003460:	930f      	str	r3, [sp, #60]	; 0x3c
 8003462:	e73e      	b.n	80032e2 <_strtod_l+0x6ea>
 8003464:	463a      	mov	r2, r7
 8003466:	4650      	mov	r0, sl
 8003468:	991c      	ldr	r1, [sp, #112]	; 0x70
 800346a:	f001 f833 	bl	80044d4 <__lshift>
 800346e:	901c      	str	r0, [sp, #112]	; 0x70
 8003470:	2800      	cmp	r0, #0
 8003472:	f47f af64 	bne.w	800333e <_strtod_l+0x746>
 8003476:	e602      	b.n	800307e <_strtod_l+0x486>
 8003478:	08005a18 	.word	0x08005a18
 800347c:	fffffc02 	.word	0xfffffc02
 8003480:	7ff00000 	.word	0x7ff00000
 8003484:	39500000 	.word	0x39500000
 8003488:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800348c:	d166      	bne.n	800355c <_strtod_l+0x964>
 800348e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003490:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003494:	b35a      	cbz	r2, 80034ee <_strtod_l+0x8f6>
 8003496:	4a9c      	ldr	r2, [pc, #624]	; (8003708 <_strtod_l+0xb10>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d12c      	bne.n	80034f6 <_strtod_l+0x8fe>
 800349c:	9b05      	ldr	r3, [sp, #20]
 800349e:	4640      	mov	r0, r8
 80034a0:	b303      	cbz	r3, 80034e4 <_strtod_l+0x8ec>
 80034a2:	464b      	mov	r3, r9
 80034a4:	4a99      	ldr	r2, [pc, #612]	; (800370c <_strtod_l+0xb14>)
 80034a6:	f04f 31ff 	mov.w	r1, #4294967295
 80034aa:	401a      	ands	r2, r3
 80034ac:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80034b0:	d81b      	bhi.n	80034ea <_strtod_l+0x8f2>
 80034b2:	0d12      	lsrs	r2, r2, #20
 80034b4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80034b8:	fa01 f303 	lsl.w	r3, r1, r3
 80034bc:	4298      	cmp	r0, r3
 80034be:	d11a      	bne.n	80034f6 <_strtod_l+0x8fe>
 80034c0:	4b93      	ldr	r3, [pc, #588]	; (8003710 <_strtod_l+0xb18>)
 80034c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d102      	bne.n	80034ce <_strtod_l+0x8d6>
 80034c8:	3001      	adds	r0, #1
 80034ca:	f43f add8 	beq.w	800307e <_strtod_l+0x486>
 80034ce:	f04f 0800 	mov.w	r8, #0
 80034d2:	4b8e      	ldr	r3, [pc, #568]	; (800370c <_strtod_l+0xb14>)
 80034d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80034d6:	401a      	ands	r2, r3
 80034d8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80034dc:	9b05      	ldr	r3, [sp, #20]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d196      	bne.n	8003410 <_strtod_l+0x818>
 80034e2:	e5d7      	b.n	8003094 <_strtod_l+0x49c>
 80034e4:	f04f 33ff 	mov.w	r3, #4294967295
 80034e8:	e7e8      	b.n	80034bc <_strtod_l+0x8c4>
 80034ea:	460b      	mov	r3, r1
 80034ec:	e7e6      	b.n	80034bc <_strtod_l+0x8c4>
 80034ee:	ea53 0308 	orrs.w	r3, r3, r8
 80034f2:	f43f af7d 	beq.w	80033f0 <_strtod_l+0x7f8>
 80034f6:	b1e5      	cbz	r5, 8003532 <_strtod_l+0x93a>
 80034f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034fa:	421d      	tst	r5, r3
 80034fc:	d0ee      	beq.n	80034dc <_strtod_l+0x8e4>
 80034fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003500:	4640      	mov	r0, r8
 8003502:	4649      	mov	r1, r9
 8003504:	9a05      	ldr	r2, [sp, #20]
 8003506:	b1c3      	cbz	r3, 800353a <_strtod_l+0x942>
 8003508:	f7ff fb55 	bl	8002bb6 <sulp>
 800350c:	4602      	mov	r2, r0
 800350e:	460b      	mov	r3, r1
 8003510:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003514:	f7fc fe34 	bl	8000180 <__adddf3>
 8003518:	4680      	mov	r8, r0
 800351a:	4689      	mov	r9, r1
 800351c:	e7de      	b.n	80034dc <_strtod_l+0x8e4>
 800351e:	4013      	ands	r3, r2
 8003520:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8003524:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8003528:	f04f 38ff 	mov.w	r8, #4294967295
 800352c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8003530:	e7d4      	b.n	80034dc <_strtod_l+0x8e4>
 8003532:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003534:	ea13 0f08 	tst.w	r3, r8
 8003538:	e7e0      	b.n	80034fc <_strtod_l+0x904>
 800353a:	f7ff fb3c 	bl	8002bb6 <sulp>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003546:	f7fc fe19 	bl	800017c <__aeabi_dsub>
 800354a:	2200      	movs	r2, #0
 800354c:	2300      	movs	r3, #0
 800354e:	4680      	mov	r8, r0
 8003550:	4689      	mov	r9, r1
 8003552:	f7fd fa33 	bl	80009bc <__aeabi_dcmpeq>
 8003556:	2800      	cmp	r0, #0
 8003558:	d0c0      	beq.n	80034dc <_strtod_l+0x8e4>
 800355a:	e602      	b.n	8003162 <_strtod_l+0x56a>
 800355c:	4658      	mov	r0, fp
 800355e:	9904      	ldr	r1, [sp, #16]
 8003560:	f001 f9a6 	bl	80048b0 <__ratio>
 8003564:	2200      	movs	r2, #0
 8003566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800356a:	4606      	mov	r6, r0
 800356c:	460f      	mov	r7, r1
 800356e:	f7fd fa39 	bl	80009e4 <__aeabi_dcmple>
 8003572:	2800      	cmp	r0, #0
 8003574:	d075      	beq.n	8003662 <_strtod_l+0xa6a>
 8003576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003578:	2b00      	cmp	r3, #0
 800357a:	d047      	beq.n	800360c <_strtod_l+0xa14>
 800357c:	2600      	movs	r6, #0
 800357e:	4f65      	ldr	r7, [pc, #404]	; (8003714 <_strtod_l+0xb1c>)
 8003580:	4d64      	ldr	r5, [pc, #400]	; (8003714 <_strtod_l+0xb1c>)
 8003582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003584:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003588:	0d1b      	lsrs	r3, r3, #20
 800358a:	051b      	lsls	r3, r3, #20
 800358c:	930f      	str	r3, [sp, #60]	; 0x3c
 800358e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003590:	4b61      	ldr	r3, [pc, #388]	; (8003718 <_strtod_l+0xb20>)
 8003592:	429a      	cmp	r2, r3
 8003594:	f040 80c8 	bne.w	8003728 <_strtod_l+0xb30>
 8003598:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800359c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80035a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035a2:	4640      	mov	r0, r8
 80035a4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80035a8:	4649      	mov	r1, r9
 80035aa:	f001 f8ab 	bl	8004704 <__ulp>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4630      	mov	r0, r6
 80035b4:	4639      	mov	r1, r7
 80035b6:	f7fc ff99 	bl	80004ec <__aeabi_dmul>
 80035ba:	4642      	mov	r2, r8
 80035bc:	464b      	mov	r3, r9
 80035be:	f7fc fddf 	bl	8000180 <__adddf3>
 80035c2:	460b      	mov	r3, r1
 80035c4:	4951      	ldr	r1, [pc, #324]	; (800370c <_strtod_l+0xb14>)
 80035c6:	4a55      	ldr	r2, [pc, #340]	; (800371c <_strtod_l+0xb24>)
 80035c8:	4019      	ands	r1, r3
 80035ca:	4291      	cmp	r1, r2
 80035cc:	4680      	mov	r8, r0
 80035ce:	d95e      	bls.n	800368e <_strtod_l+0xa96>
 80035d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80035d2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d103      	bne.n	80035e2 <_strtod_l+0x9ea>
 80035da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80035dc:	3301      	adds	r3, #1
 80035de:	f43f ad4e 	beq.w	800307e <_strtod_l+0x486>
 80035e2:	f04f 38ff 	mov.w	r8, #4294967295
 80035e6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8003710 <_strtod_l+0xb18>
 80035ea:	4650      	mov	r0, sl
 80035ec:	991c      	ldr	r1, [sp, #112]	; 0x70
 80035ee:	f000 fd59 	bl	80040a4 <_Bfree>
 80035f2:	4650      	mov	r0, sl
 80035f4:	9906      	ldr	r1, [sp, #24]
 80035f6:	f000 fd55 	bl	80040a4 <_Bfree>
 80035fa:	4650      	mov	r0, sl
 80035fc:	9904      	ldr	r1, [sp, #16]
 80035fe:	f000 fd51 	bl	80040a4 <_Bfree>
 8003602:	4659      	mov	r1, fp
 8003604:	4650      	mov	r0, sl
 8003606:	f000 fd4d 	bl	80040a4 <_Bfree>
 800360a:	e61c      	b.n	8003246 <_strtod_l+0x64e>
 800360c:	f1b8 0f00 	cmp.w	r8, #0
 8003610:	d119      	bne.n	8003646 <_strtod_l+0xa4e>
 8003612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003618:	b9e3      	cbnz	r3, 8003654 <_strtod_l+0xa5c>
 800361a:	2200      	movs	r2, #0
 800361c:	4630      	mov	r0, r6
 800361e:	4639      	mov	r1, r7
 8003620:	4b3c      	ldr	r3, [pc, #240]	; (8003714 <_strtod_l+0xb1c>)
 8003622:	f7fd f9d5 	bl	80009d0 <__aeabi_dcmplt>
 8003626:	b9c8      	cbnz	r0, 800365c <_strtod_l+0xa64>
 8003628:	2200      	movs	r2, #0
 800362a:	4630      	mov	r0, r6
 800362c:	4639      	mov	r1, r7
 800362e:	4b3c      	ldr	r3, [pc, #240]	; (8003720 <_strtod_l+0xb28>)
 8003630:	f7fc ff5c 	bl	80004ec <__aeabi_dmul>
 8003634:	4604      	mov	r4, r0
 8003636:	460d      	mov	r5, r1
 8003638:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800363c:	9418      	str	r4, [sp, #96]	; 0x60
 800363e:	9319      	str	r3, [sp, #100]	; 0x64
 8003640:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8003644:	e79d      	b.n	8003582 <_strtod_l+0x98a>
 8003646:	f1b8 0f01 	cmp.w	r8, #1
 800364a:	d103      	bne.n	8003654 <_strtod_l+0xa5c>
 800364c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	f43f ad87 	beq.w	8003162 <_strtod_l+0x56a>
 8003654:	2600      	movs	r6, #0
 8003656:	2400      	movs	r4, #0
 8003658:	4f32      	ldr	r7, [pc, #200]	; (8003724 <_strtod_l+0xb2c>)
 800365a:	e791      	b.n	8003580 <_strtod_l+0x988>
 800365c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800365e:	4d30      	ldr	r5, [pc, #192]	; (8003720 <_strtod_l+0xb28>)
 8003660:	e7ea      	b.n	8003638 <_strtod_l+0xa40>
 8003662:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <_strtod_l+0xb28>)
 8003664:	2200      	movs	r2, #0
 8003666:	4630      	mov	r0, r6
 8003668:	4639      	mov	r1, r7
 800366a:	f7fc ff3f 	bl	80004ec <__aeabi_dmul>
 800366e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003670:	4604      	mov	r4, r0
 8003672:	460d      	mov	r5, r1
 8003674:	b933      	cbnz	r3, 8003684 <_strtod_l+0xa8c>
 8003676:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800367a:	9010      	str	r0, [sp, #64]	; 0x40
 800367c:	9311      	str	r3, [sp, #68]	; 0x44
 800367e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8003682:	e77e      	b.n	8003582 <_strtod_l+0x98a>
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800368c:	e7f7      	b.n	800367e <_strtod_l+0xa86>
 800368e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8003692:	9b05      	ldr	r3, [sp, #20]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1a8      	bne.n	80035ea <_strtod_l+0x9f2>
 8003698:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800369c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800369e:	0d1b      	lsrs	r3, r3, #20
 80036a0:	051b      	lsls	r3, r3, #20
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d1a1      	bne.n	80035ea <_strtod_l+0x9f2>
 80036a6:	4620      	mov	r0, r4
 80036a8:	4629      	mov	r1, r5
 80036aa:	f7fd fa29 	bl	8000b00 <__aeabi_d2lz>
 80036ae:	f7fc feef 	bl	8000490 <__aeabi_l2d>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4620      	mov	r0, r4
 80036b8:	4629      	mov	r1, r5
 80036ba:	f7fc fd5f 	bl	800017c <__aeabi_dsub>
 80036be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80036c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80036c4:	ea43 0308 	orr.w	r3, r3, r8
 80036c8:	4313      	orrs	r3, r2
 80036ca:	4604      	mov	r4, r0
 80036cc:	460d      	mov	r5, r1
 80036ce:	d066      	beq.n	800379e <_strtod_l+0xba6>
 80036d0:	a309      	add	r3, pc, #36	; (adr r3, 80036f8 <_strtod_l+0xb00>)
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f7fd f97b 	bl	80009d0 <__aeabi_dcmplt>
 80036da:	2800      	cmp	r0, #0
 80036dc:	f47f acda 	bne.w	8003094 <_strtod_l+0x49c>
 80036e0:	a307      	add	r3, pc, #28	; (adr r3, 8003700 <_strtod_l+0xb08>)
 80036e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e6:	4620      	mov	r0, r4
 80036e8:	4629      	mov	r1, r5
 80036ea:	f7fd f98f 	bl	8000a0c <__aeabi_dcmpgt>
 80036ee:	2800      	cmp	r0, #0
 80036f0:	f43f af7b 	beq.w	80035ea <_strtod_l+0x9f2>
 80036f4:	e4ce      	b.n	8003094 <_strtod_l+0x49c>
 80036f6:	bf00      	nop
 80036f8:	94a03595 	.word	0x94a03595
 80036fc:	3fdfffff 	.word	0x3fdfffff
 8003700:	35afe535 	.word	0x35afe535
 8003704:	3fe00000 	.word	0x3fe00000
 8003708:	000fffff 	.word	0x000fffff
 800370c:	7ff00000 	.word	0x7ff00000
 8003710:	7fefffff 	.word	0x7fefffff
 8003714:	3ff00000 	.word	0x3ff00000
 8003718:	7fe00000 	.word	0x7fe00000
 800371c:	7c9fffff 	.word	0x7c9fffff
 8003720:	3fe00000 	.word	0x3fe00000
 8003724:	bff00000 	.word	0xbff00000
 8003728:	9b05      	ldr	r3, [sp, #20]
 800372a:	b313      	cbz	r3, 8003772 <_strtod_l+0xb7a>
 800372c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800372e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8003732:	d81e      	bhi.n	8003772 <_strtod_l+0xb7a>
 8003734:	a326      	add	r3, pc, #152	; (adr r3, 80037d0 <_strtod_l+0xbd8>)
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	4620      	mov	r0, r4
 800373c:	4629      	mov	r1, r5
 800373e:	f7fd f951 	bl	80009e4 <__aeabi_dcmple>
 8003742:	b190      	cbz	r0, 800376a <_strtod_l+0xb72>
 8003744:	4629      	mov	r1, r5
 8003746:	4620      	mov	r0, r4
 8003748:	f7fd f96a 	bl	8000a20 <__aeabi_d2uiz>
 800374c:	2801      	cmp	r0, #1
 800374e:	bf38      	it	cc
 8003750:	2001      	movcc	r0, #1
 8003752:	f7fc fe51 	bl	80003f8 <__aeabi_ui2d>
 8003756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003758:	4604      	mov	r4, r0
 800375a:	460d      	mov	r5, r1
 800375c:	b9d3      	cbnz	r3, 8003794 <_strtod_l+0xb9c>
 800375e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003762:	9012      	str	r0, [sp, #72]	; 0x48
 8003764:	9313      	str	r3, [sp, #76]	; 0x4c
 8003766:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800376a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800376c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8003770:	1a9f      	subs	r7, r3, r2
 8003772:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003776:	f000 ffc5 	bl	8004704 <__ulp>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4630      	mov	r0, r6
 8003780:	4639      	mov	r1, r7
 8003782:	f7fc feb3 	bl	80004ec <__aeabi_dmul>
 8003786:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800378a:	f7fc fcf9 	bl	8000180 <__adddf3>
 800378e:	4680      	mov	r8, r0
 8003790:	4689      	mov	r9, r1
 8003792:	e77e      	b.n	8003692 <_strtod_l+0xa9a>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800379c:	e7e3      	b.n	8003766 <_strtod_l+0xb6e>
 800379e:	a30e      	add	r3, pc, #56	; (adr r3, 80037d8 <_strtod_l+0xbe0>)
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f7fd f914 	bl	80009d0 <__aeabi_dcmplt>
 80037a8:	e7a1      	b.n	80036ee <_strtod_l+0xaf6>
 80037aa:	2300      	movs	r3, #0
 80037ac:	930c      	str	r3, [sp, #48]	; 0x30
 80037ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80037b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	f7ff ba65 	b.w	8002c82 <_strtod_l+0x8a>
 80037b8:	2b65      	cmp	r3, #101	; 0x65
 80037ba:	f43f ab5c 	beq.w	8002e76 <_strtod_l+0x27e>
 80037be:	2b45      	cmp	r3, #69	; 0x45
 80037c0:	f43f ab59 	beq.w	8002e76 <_strtod_l+0x27e>
 80037c4:	2201      	movs	r2, #1
 80037c6:	f7ff bb8d 	b.w	8002ee4 <_strtod_l+0x2ec>
 80037ca:	bf00      	nop
 80037cc:	f3af 8000 	nop.w
 80037d0:	ffc00000 	.word	0xffc00000
 80037d4:	41dfffff 	.word	0x41dfffff
 80037d8:	94a03595 	.word	0x94a03595
 80037dc:	3fcfffff 	.word	0x3fcfffff

080037e0 <strtod>:
 80037e0:	460a      	mov	r2, r1
 80037e2:	4601      	mov	r1, r0
 80037e4:	4802      	ldr	r0, [pc, #8]	; (80037f0 <strtod+0x10>)
 80037e6:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <strtod+0x14>)
 80037e8:	6800      	ldr	r0, [r0, #0]
 80037ea:	f7ff ba05 	b.w	8002bf8 <_strtod_l>
 80037ee:	bf00      	nop
 80037f0:	20000014 	.word	0x20000014
 80037f4:	2000007c 	.word	0x2000007c

080037f8 <_strtol_l.isra.0>:
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037fe:	4686      	mov	lr, r0
 8003800:	d001      	beq.n	8003806 <_strtol_l.isra.0+0xe>
 8003802:	2b24      	cmp	r3, #36	; 0x24
 8003804:	d906      	bls.n	8003814 <_strtol_l.isra.0+0x1c>
 8003806:	f7ff f991 	bl	8002b2c <__errno>
 800380a:	2316      	movs	r3, #22
 800380c:	6003      	str	r3, [r0, #0]
 800380e:	2000      	movs	r0, #0
 8003810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003814:	468c      	mov	ip, r1
 8003816:	4e3a      	ldr	r6, [pc, #232]	; (8003900 <_strtol_l.isra.0+0x108>)
 8003818:	4660      	mov	r0, ip
 800381a:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800381e:	5da5      	ldrb	r5, [r4, r6]
 8003820:	f015 0508 	ands.w	r5, r5, #8
 8003824:	d1f8      	bne.n	8003818 <_strtol_l.isra.0+0x20>
 8003826:	2c2d      	cmp	r4, #45	; 0x2d
 8003828:	d133      	bne.n	8003892 <_strtol_l.isra.0+0x9a>
 800382a:	f04f 0801 	mov.w	r8, #1
 800382e:	f89c 4000 	ldrb.w	r4, [ip]
 8003832:	f100 0c02 	add.w	ip, r0, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d05d      	beq.n	80038f6 <_strtol_l.isra.0+0xfe>
 800383a:	2b10      	cmp	r3, #16
 800383c:	d10c      	bne.n	8003858 <_strtol_l.isra.0+0x60>
 800383e:	2c30      	cmp	r4, #48	; 0x30
 8003840:	d10a      	bne.n	8003858 <_strtol_l.isra.0+0x60>
 8003842:	f89c 0000 	ldrb.w	r0, [ip]
 8003846:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800384a:	2858      	cmp	r0, #88	; 0x58
 800384c:	d14e      	bne.n	80038ec <_strtol_l.isra.0+0xf4>
 800384e:	2310      	movs	r3, #16
 8003850:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8003854:	f10c 0c02 	add.w	ip, ip, #2
 8003858:	2500      	movs	r5, #0
 800385a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800385e:	3f01      	subs	r7, #1
 8003860:	fbb7 f9f3 	udiv	r9, r7, r3
 8003864:	4628      	mov	r0, r5
 8003866:	fb03 7a19 	mls	sl, r3, r9, r7
 800386a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800386e:	2e09      	cmp	r6, #9
 8003870:	d818      	bhi.n	80038a4 <_strtol_l.isra.0+0xac>
 8003872:	4634      	mov	r4, r6
 8003874:	42a3      	cmp	r3, r4
 8003876:	dd24      	ble.n	80038c2 <_strtol_l.isra.0+0xca>
 8003878:	2d00      	cmp	r5, #0
 800387a:	db1f      	blt.n	80038bc <_strtol_l.isra.0+0xc4>
 800387c:	4581      	cmp	r9, r0
 800387e:	d31d      	bcc.n	80038bc <_strtol_l.isra.0+0xc4>
 8003880:	d101      	bne.n	8003886 <_strtol_l.isra.0+0x8e>
 8003882:	45a2      	cmp	sl, r4
 8003884:	db1a      	blt.n	80038bc <_strtol_l.isra.0+0xc4>
 8003886:	2501      	movs	r5, #1
 8003888:	fb00 4003 	mla	r0, r0, r3, r4
 800388c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003890:	e7eb      	b.n	800386a <_strtol_l.isra.0+0x72>
 8003892:	2c2b      	cmp	r4, #43	; 0x2b
 8003894:	bf08      	it	eq
 8003896:	f89c 4000 	ldrbeq.w	r4, [ip]
 800389a:	46a8      	mov	r8, r5
 800389c:	bf08      	it	eq
 800389e:	f100 0c02 	addeq.w	ip, r0, #2
 80038a2:	e7c8      	b.n	8003836 <_strtol_l.isra.0+0x3e>
 80038a4:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80038a8:	2e19      	cmp	r6, #25
 80038aa:	d801      	bhi.n	80038b0 <_strtol_l.isra.0+0xb8>
 80038ac:	3c37      	subs	r4, #55	; 0x37
 80038ae:	e7e1      	b.n	8003874 <_strtol_l.isra.0+0x7c>
 80038b0:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80038b4:	2e19      	cmp	r6, #25
 80038b6:	d804      	bhi.n	80038c2 <_strtol_l.isra.0+0xca>
 80038b8:	3c57      	subs	r4, #87	; 0x57
 80038ba:	e7db      	b.n	8003874 <_strtol_l.isra.0+0x7c>
 80038bc:	f04f 35ff 	mov.w	r5, #4294967295
 80038c0:	e7e4      	b.n	800388c <_strtol_l.isra.0+0x94>
 80038c2:	2d00      	cmp	r5, #0
 80038c4:	da08      	bge.n	80038d8 <_strtol_l.isra.0+0xe0>
 80038c6:	2322      	movs	r3, #34	; 0x22
 80038c8:	4638      	mov	r0, r7
 80038ca:	f8ce 3000 	str.w	r3, [lr]
 80038ce:	2a00      	cmp	r2, #0
 80038d0:	d09e      	beq.n	8003810 <_strtol_l.isra.0+0x18>
 80038d2:	f10c 31ff 	add.w	r1, ip, #4294967295
 80038d6:	e007      	b.n	80038e8 <_strtol_l.isra.0+0xf0>
 80038d8:	f1b8 0f00 	cmp.w	r8, #0
 80038dc:	d000      	beq.n	80038e0 <_strtol_l.isra.0+0xe8>
 80038de:	4240      	negs	r0, r0
 80038e0:	2a00      	cmp	r2, #0
 80038e2:	d095      	beq.n	8003810 <_strtol_l.isra.0+0x18>
 80038e4:	2d00      	cmp	r5, #0
 80038e6:	d1f4      	bne.n	80038d2 <_strtol_l.isra.0+0xda>
 80038e8:	6011      	str	r1, [r2, #0]
 80038ea:	e791      	b.n	8003810 <_strtol_l.isra.0+0x18>
 80038ec:	2430      	movs	r4, #48	; 0x30
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1b2      	bne.n	8003858 <_strtol_l.isra.0+0x60>
 80038f2:	2308      	movs	r3, #8
 80038f4:	e7b0      	b.n	8003858 <_strtol_l.isra.0+0x60>
 80038f6:	2c30      	cmp	r4, #48	; 0x30
 80038f8:	d0a3      	beq.n	8003842 <_strtol_l.isra.0+0x4a>
 80038fa:	230a      	movs	r3, #10
 80038fc:	e7ac      	b.n	8003858 <_strtol_l.isra.0+0x60>
 80038fe:	bf00      	nop
 8003900:	08005a41 	.word	0x08005a41

08003904 <strtol>:
 8003904:	4613      	mov	r3, r2
 8003906:	460a      	mov	r2, r1
 8003908:	4601      	mov	r1, r0
 800390a:	4802      	ldr	r0, [pc, #8]	; (8003914 <strtol+0x10>)
 800390c:	6800      	ldr	r0, [r0, #0]
 800390e:	f7ff bf73 	b.w	80037f8 <_strtol_l.isra.0>
 8003912:	bf00      	nop
 8003914:	20000014 	.word	0x20000014

08003918 <rshift>:
 8003918:	6903      	ldr	r3, [r0, #16]
 800391a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800391e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8003922:	f100 0414 	add.w	r4, r0, #20
 8003926:	ea4f 1261 	mov.w	r2, r1, asr #5
 800392a:	dd46      	ble.n	80039ba <rshift+0xa2>
 800392c:	f011 011f 	ands.w	r1, r1, #31
 8003930:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8003934:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8003938:	d10c      	bne.n	8003954 <rshift+0x3c>
 800393a:	4629      	mov	r1, r5
 800393c:	f100 0710 	add.w	r7, r0, #16
 8003940:	42b1      	cmp	r1, r6
 8003942:	d335      	bcc.n	80039b0 <rshift+0x98>
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	1eea      	subs	r2, r5, #3
 800394a:	4296      	cmp	r6, r2
 800394c:	bf38      	it	cc
 800394e:	2300      	movcc	r3, #0
 8003950:	4423      	add	r3, r4
 8003952:	e015      	b.n	8003980 <rshift+0x68>
 8003954:	46a1      	mov	r9, r4
 8003956:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800395a:	f1c1 0820 	rsb	r8, r1, #32
 800395e:	40cf      	lsrs	r7, r1
 8003960:	f105 0e04 	add.w	lr, r5, #4
 8003964:	4576      	cmp	r6, lr
 8003966:	46f4      	mov	ip, lr
 8003968:	d816      	bhi.n	8003998 <rshift+0x80>
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009a      	lsls	r2, r3, #2
 800396e:	3a04      	subs	r2, #4
 8003970:	3501      	adds	r5, #1
 8003972:	42ae      	cmp	r6, r5
 8003974:	bf38      	it	cc
 8003976:	2200      	movcc	r2, #0
 8003978:	18a3      	adds	r3, r4, r2
 800397a:	50a7      	str	r7, [r4, r2]
 800397c:	b107      	cbz	r7, 8003980 <rshift+0x68>
 800397e:	3304      	adds	r3, #4
 8003980:	42a3      	cmp	r3, r4
 8003982:	eba3 0204 	sub.w	r2, r3, r4
 8003986:	bf08      	it	eq
 8003988:	2300      	moveq	r3, #0
 800398a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800398e:	6102      	str	r2, [r0, #16]
 8003990:	bf08      	it	eq
 8003992:	6143      	streq	r3, [r0, #20]
 8003994:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003998:	f8dc c000 	ldr.w	ip, [ip]
 800399c:	fa0c fc08 	lsl.w	ip, ip, r8
 80039a0:	ea4c 0707 	orr.w	r7, ip, r7
 80039a4:	f849 7b04 	str.w	r7, [r9], #4
 80039a8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80039ac:	40cf      	lsrs	r7, r1
 80039ae:	e7d9      	b.n	8003964 <rshift+0x4c>
 80039b0:	f851 cb04 	ldr.w	ip, [r1], #4
 80039b4:	f847 cf04 	str.w	ip, [r7, #4]!
 80039b8:	e7c2      	b.n	8003940 <rshift+0x28>
 80039ba:	4623      	mov	r3, r4
 80039bc:	e7e0      	b.n	8003980 <rshift+0x68>

080039be <__hexdig_fun>:
 80039be:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80039c2:	2b09      	cmp	r3, #9
 80039c4:	d802      	bhi.n	80039cc <__hexdig_fun+0xe>
 80039c6:	3820      	subs	r0, #32
 80039c8:	b2c0      	uxtb	r0, r0
 80039ca:	4770      	bx	lr
 80039cc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80039d0:	2b05      	cmp	r3, #5
 80039d2:	d801      	bhi.n	80039d8 <__hexdig_fun+0x1a>
 80039d4:	3847      	subs	r0, #71	; 0x47
 80039d6:	e7f7      	b.n	80039c8 <__hexdig_fun+0xa>
 80039d8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80039dc:	2b05      	cmp	r3, #5
 80039de:	d801      	bhi.n	80039e4 <__hexdig_fun+0x26>
 80039e0:	3827      	subs	r0, #39	; 0x27
 80039e2:	e7f1      	b.n	80039c8 <__hexdig_fun+0xa>
 80039e4:	2000      	movs	r0, #0
 80039e6:	4770      	bx	lr

080039e8 <__gethex>:
 80039e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039ec:	b08b      	sub	sp, #44	; 0x2c
 80039ee:	9306      	str	r3, [sp, #24]
 80039f0:	4bb9      	ldr	r3, [pc, #740]	; (8003cd8 <__gethex+0x2f0>)
 80039f2:	9002      	str	r0, [sp, #8]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	468b      	mov	fp, r1
 80039f8:	4618      	mov	r0, r3
 80039fa:	4690      	mov	r8, r2
 80039fc:	9303      	str	r3, [sp, #12]
 80039fe:	f7fc fbb1 	bl	8000164 <strlen>
 8003a02:	4682      	mov	sl, r0
 8003a04:	9b03      	ldr	r3, [sp, #12]
 8003a06:	f8db 2000 	ldr.w	r2, [fp]
 8003a0a:	4403      	add	r3, r0
 8003a0c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003a10:	9307      	str	r3, [sp, #28]
 8003a12:	1c93      	adds	r3, r2, #2
 8003a14:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8003a18:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003a1c:	32fe      	adds	r2, #254	; 0xfe
 8003a1e:	18d1      	adds	r1, r2, r3
 8003a20:	461f      	mov	r7, r3
 8003a22:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003a26:	9101      	str	r1, [sp, #4]
 8003a28:	2830      	cmp	r0, #48	; 0x30
 8003a2a:	d0f8      	beq.n	8003a1e <__gethex+0x36>
 8003a2c:	f7ff ffc7 	bl	80039be <__hexdig_fun>
 8003a30:	4604      	mov	r4, r0
 8003a32:	2800      	cmp	r0, #0
 8003a34:	d13a      	bne.n	8003aac <__gethex+0xc4>
 8003a36:	4652      	mov	r2, sl
 8003a38:	4638      	mov	r0, r7
 8003a3a:	9903      	ldr	r1, [sp, #12]
 8003a3c:	f001 f828 	bl	8004a90 <strncmp>
 8003a40:	4605      	mov	r5, r0
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d166      	bne.n	8003b14 <__gethex+0x12c>
 8003a46:	f817 000a 	ldrb.w	r0, [r7, sl]
 8003a4a:	eb07 060a 	add.w	r6, r7, sl
 8003a4e:	f7ff ffb6 	bl	80039be <__hexdig_fun>
 8003a52:	2800      	cmp	r0, #0
 8003a54:	d060      	beq.n	8003b18 <__gethex+0x130>
 8003a56:	4633      	mov	r3, r6
 8003a58:	7818      	ldrb	r0, [r3, #0]
 8003a5a:	461f      	mov	r7, r3
 8003a5c:	2830      	cmp	r0, #48	; 0x30
 8003a5e:	f103 0301 	add.w	r3, r3, #1
 8003a62:	d0f9      	beq.n	8003a58 <__gethex+0x70>
 8003a64:	f7ff ffab 	bl	80039be <__hexdig_fun>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	fab0 f480 	clz	r4, r0
 8003a6e:	4635      	mov	r5, r6
 8003a70:	0964      	lsrs	r4, r4, #5
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	463a      	mov	r2, r7
 8003a76:	4616      	mov	r6, r2
 8003a78:	7830      	ldrb	r0, [r6, #0]
 8003a7a:	3201      	adds	r2, #1
 8003a7c:	f7ff ff9f 	bl	80039be <__hexdig_fun>
 8003a80:	2800      	cmp	r0, #0
 8003a82:	d1f8      	bne.n	8003a76 <__gethex+0x8e>
 8003a84:	4652      	mov	r2, sl
 8003a86:	4630      	mov	r0, r6
 8003a88:	9903      	ldr	r1, [sp, #12]
 8003a8a:	f001 f801 	bl	8004a90 <strncmp>
 8003a8e:	b980      	cbnz	r0, 8003ab2 <__gethex+0xca>
 8003a90:	b94d      	cbnz	r5, 8003aa6 <__gethex+0xbe>
 8003a92:	eb06 050a 	add.w	r5, r6, sl
 8003a96:	462a      	mov	r2, r5
 8003a98:	4616      	mov	r6, r2
 8003a9a:	7830      	ldrb	r0, [r6, #0]
 8003a9c:	3201      	adds	r2, #1
 8003a9e:	f7ff ff8e 	bl	80039be <__hexdig_fun>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d1f8      	bne.n	8003a98 <__gethex+0xb0>
 8003aa6:	1bad      	subs	r5, r5, r6
 8003aa8:	00ad      	lsls	r5, r5, #2
 8003aaa:	e004      	b.n	8003ab6 <__gethex+0xce>
 8003aac:	2400      	movs	r4, #0
 8003aae:	4625      	mov	r5, r4
 8003ab0:	e7e0      	b.n	8003a74 <__gethex+0x8c>
 8003ab2:	2d00      	cmp	r5, #0
 8003ab4:	d1f7      	bne.n	8003aa6 <__gethex+0xbe>
 8003ab6:	7833      	ldrb	r3, [r6, #0]
 8003ab8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003abc:	2b50      	cmp	r3, #80	; 0x50
 8003abe:	d139      	bne.n	8003b34 <__gethex+0x14c>
 8003ac0:	7873      	ldrb	r3, [r6, #1]
 8003ac2:	2b2b      	cmp	r3, #43	; 0x2b
 8003ac4:	d02a      	beq.n	8003b1c <__gethex+0x134>
 8003ac6:	2b2d      	cmp	r3, #45	; 0x2d
 8003ac8:	d02c      	beq.n	8003b24 <__gethex+0x13c>
 8003aca:	f04f 0900 	mov.w	r9, #0
 8003ace:	1c71      	adds	r1, r6, #1
 8003ad0:	7808      	ldrb	r0, [r1, #0]
 8003ad2:	f7ff ff74 	bl	80039be <__hexdig_fun>
 8003ad6:	1e43      	subs	r3, r0, #1
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b18      	cmp	r3, #24
 8003adc:	d82a      	bhi.n	8003b34 <__gethex+0x14c>
 8003ade:	f1a0 0210 	sub.w	r2, r0, #16
 8003ae2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003ae6:	f7ff ff6a 	bl	80039be <__hexdig_fun>
 8003aea:	1e43      	subs	r3, r0, #1
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b18      	cmp	r3, #24
 8003af0:	d91b      	bls.n	8003b2a <__gethex+0x142>
 8003af2:	f1b9 0f00 	cmp.w	r9, #0
 8003af6:	d000      	beq.n	8003afa <__gethex+0x112>
 8003af8:	4252      	negs	r2, r2
 8003afa:	4415      	add	r5, r2
 8003afc:	f8cb 1000 	str.w	r1, [fp]
 8003b00:	b1d4      	cbz	r4, 8003b38 <__gethex+0x150>
 8003b02:	9b01      	ldr	r3, [sp, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	bf14      	ite	ne
 8003b08:	2700      	movne	r7, #0
 8003b0a:	2706      	moveq	r7, #6
 8003b0c:	4638      	mov	r0, r7
 8003b0e:	b00b      	add	sp, #44	; 0x2c
 8003b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b14:	463e      	mov	r6, r7
 8003b16:	4625      	mov	r5, r4
 8003b18:	2401      	movs	r4, #1
 8003b1a:	e7cc      	b.n	8003ab6 <__gethex+0xce>
 8003b1c:	f04f 0900 	mov.w	r9, #0
 8003b20:	1cb1      	adds	r1, r6, #2
 8003b22:	e7d5      	b.n	8003ad0 <__gethex+0xe8>
 8003b24:	f04f 0901 	mov.w	r9, #1
 8003b28:	e7fa      	b.n	8003b20 <__gethex+0x138>
 8003b2a:	230a      	movs	r3, #10
 8003b2c:	fb03 0202 	mla	r2, r3, r2, r0
 8003b30:	3a10      	subs	r2, #16
 8003b32:	e7d6      	b.n	8003ae2 <__gethex+0xfa>
 8003b34:	4631      	mov	r1, r6
 8003b36:	e7e1      	b.n	8003afc <__gethex+0x114>
 8003b38:	4621      	mov	r1, r4
 8003b3a:	1bf3      	subs	r3, r6, r7
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	2b07      	cmp	r3, #7
 8003b40:	dc0a      	bgt.n	8003b58 <__gethex+0x170>
 8003b42:	9802      	ldr	r0, [sp, #8]
 8003b44:	f000 fa6e 	bl	8004024 <_Balloc>
 8003b48:	4604      	mov	r4, r0
 8003b4a:	b940      	cbnz	r0, 8003b5e <__gethex+0x176>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	21de      	movs	r1, #222	; 0xde
 8003b50:	4b62      	ldr	r3, [pc, #392]	; (8003cdc <__gethex+0x2f4>)
 8003b52:	4863      	ldr	r0, [pc, #396]	; (8003ce0 <__gethex+0x2f8>)
 8003b54:	f000 ffbc 	bl	8004ad0 <__assert_func>
 8003b58:	3101      	adds	r1, #1
 8003b5a:	105b      	asrs	r3, r3, #1
 8003b5c:	e7ef      	b.n	8003b3e <__gethex+0x156>
 8003b5e:	f04f 0b00 	mov.w	fp, #0
 8003b62:	f100 0914 	add.w	r9, r0, #20
 8003b66:	f1ca 0301 	rsb	r3, sl, #1
 8003b6a:	f8cd 9010 	str.w	r9, [sp, #16]
 8003b6e:	f8cd b004 	str.w	fp, [sp, #4]
 8003b72:	9308      	str	r3, [sp, #32]
 8003b74:	42b7      	cmp	r7, r6
 8003b76:	d33f      	bcc.n	8003bf8 <__gethex+0x210>
 8003b78:	9f04      	ldr	r7, [sp, #16]
 8003b7a:	9b01      	ldr	r3, [sp, #4]
 8003b7c:	f847 3b04 	str.w	r3, [r7], #4
 8003b80:	eba7 0709 	sub.w	r7, r7, r9
 8003b84:	10bf      	asrs	r7, r7, #2
 8003b86:	6127      	str	r7, [r4, #16]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fb41 	bl	8004210 <__hi0bits>
 8003b8e:	017f      	lsls	r7, r7, #5
 8003b90:	f8d8 6000 	ldr.w	r6, [r8]
 8003b94:	1a3f      	subs	r7, r7, r0
 8003b96:	42b7      	cmp	r7, r6
 8003b98:	dd62      	ble.n	8003c60 <__gethex+0x278>
 8003b9a:	1bbf      	subs	r7, r7, r6
 8003b9c:	4639      	mov	r1, r7
 8003b9e:	4620      	mov	r0, r4
 8003ba0:	f000 fed7 	bl	8004952 <__any_on>
 8003ba4:	4682      	mov	sl, r0
 8003ba6:	b1a8      	cbz	r0, 8003bd4 <__gethex+0x1ec>
 8003ba8:	f04f 0a01 	mov.w	sl, #1
 8003bac:	1e7b      	subs	r3, r7, #1
 8003bae:	1159      	asrs	r1, r3, #5
 8003bb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8003bb4:	f003 021f 	and.w	r2, r3, #31
 8003bb8:	fa0a f202 	lsl.w	r2, sl, r2
 8003bbc:	420a      	tst	r2, r1
 8003bbe:	d009      	beq.n	8003bd4 <__gethex+0x1ec>
 8003bc0:	4553      	cmp	r3, sl
 8003bc2:	dd05      	ble.n	8003bd0 <__gethex+0x1e8>
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	1eb9      	subs	r1, r7, #2
 8003bc8:	f000 fec3 	bl	8004952 <__any_on>
 8003bcc:	2800      	cmp	r0, #0
 8003bce:	d144      	bne.n	8003c5a <__gethex+0x272>
 8003bd0:	f04f 0a02 	mov.w	sl, #2
 8003bd4:	4639      	mov	r1, r7
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f7ff fe9e 	bl	8003918 <rshift>
 8003bdc:	443d      	add	r5, r7
 8003bde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003be2:	42ab      	cmp	r3, r5
 8003be4:	da4a      	bge.n	8003c7c <__gethex+0x294>
 8003be6:	4621      	mov	r1, r4
 8003be8:	9802      	ldr	r0, [sp, #8]
 8003bea:	f000 fa5b 	bl	80040a4 <_Bfree>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003bf2:	27a3      	movs	r7, #163	; 0xa3
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	e789      	b.n	8003b0c <__gethex+0x124>
 8003bf8:	1e73      	subs	r3, r6, #1
 8003bfa:	9a07      	ldr	r2, [sp, #28]
 8003bfc:	9305      	str	r3, [sp, #20]
 8003bfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d019      	beq.n	8003c3a <__gethex+0x252>
 8003c06:	f1bb 0f20 	cmp.w	fp, #32
 8003c0a:	d107      	bne.n	8003c1c <__gethex+0x234>
 8003c0c:	9b04      	ldr	r3, [sp, #16]
 8003c0e:	9a01      	ldr	r2, [sp, #4]
 8003c10:	f843 2b04 	str.w	r2, [r3], #4
 8003c14:	9304      	str	r3, [sp, #16]
 8003c16:	2300      	movs	r3, #0
 8003c18:	469b      	mov	fp, r3
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8003c20:	f7ff fecd 	bl	80039be <__hexdig_fun>
 8003c24:	9b01      	ldr	r3, [sp, #4]
 8003c26:	f000 000f 	and.w	r0, r0, #15
 8003c2a:	fa00 f00b 	lsl.w	r0, r0, fp
 8003c2e:	4303      	orrs	r3, r0
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	f10b 0b04 	add.w	fp, fp, #4
 8003c36:	9b05      	ldr	r3, [sp, #20]
 8003c38:	e00d      	b.n	8003c56 <__gethex+0x26e>
 8003c3a:	9b05      	ldr	r3, [sp, #20]
 8003c3c:	9a08      	ldr	r2, [sp, #32]
 8003c3e:	4413      	add	r3, r2
 8003c40:	42bb      	cmp	r3, r7
 8003c42:	d3e0      	bcc.n	8003c06 <__gethex+0x21e>
 8003c44:	4618      	mov	r0, r3
 8003c46:	4652      	mov	r2, sl
 8003c48:	9903      	ldr	r1, [sp, #12]
 8003c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c4c:	f000 ff20 	bl	8004a90 <strncmp>
 8003c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c52:	2800      	cmp	r0, #0
 8003c54:	d1d7      	bne.n	8003c06 <__gethex+0x21e>
 8003c56:	461e      	mov	r6, r3
 8003c58:	e78c      	b.n	8003b74 <__gethex+0x18c>
 8003c5a:	f04f 0a03 	mov.w	sl, #3
 8003c5e:	e7b9      	b.n	8003bd4 <__gethex+0x1ec>
 8003c60:	da09      	bge.n	8003c76 <__gethex+0x28e>
 8003c62:	1bf7      	subs	r7, r6, r7
 8003c64:	4621      	mov	r1, r4
 8003c66:	463a      	mov	r2, r7
 8003c68:	9802      	ldr	r0, [sp, #8]
 8003c6a:	f000 fc33 	bl	80044d4 <__lshift>
 8003c6e:	4604      	mov	r4, r0
 8003c70:	1bed      	subs	r5, r5, r7
 8003c72:	f100 0914 	add.w	r9, r0, #20
 8003c76:	f04f 0a00 	mov.w	sl, #0
 8003c7a:	e7b0      	b.n	8003bde <__gethex+0x1f6>
 8003c7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003c80:	42a8      	cmp	r0, r5
 8003c82:	dd71      	ble.n	8003d68 <__gethex+0x380>
 8003c84:	1b45      	subs	r5, r0, r5
 8003c86:	42ae      	cmp	r6, r5
 8003c88:	dc34      	bgt.n	8003cf4 <__gethex+0x30c>
 8003c8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d028      	beq.n	8003ce4 <__gethex+0x2fc>
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d02a      	beq.n	8003cec <__gethex+0x304>
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d115      	bne.n	8003cc6 <__gethex+0x2de>
 8003c9a:	42ae      	cmp	r6, r5
 8003c9c:	d113      	bne.n	8003cc6 <__gethex+0x2de>
 8003c9e:	2e01      	cmp	r6, #1
 8003ca0:	d10b      	bne.n	8003cba <__gethex+0x2d2>
 8003ca2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003ca6:	9a06      	ldr	r2, [sp, #24]
 8003ca8:	2762      	movs	r7, #98	; 0x62
 8003caa:	6013      	str	r3, [r2, #0]
 8003cac:	2301      	movs	r3, #1
 8003cae:	6123      	str	r3, [r4, #16]
 8003cb0:	f8c9 3000 	str.w	r3, [r9]
 8003cb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003cb6:	601c      	str	r4, [r3, #0]
 8003cb8:	e728      	b.n	8003b0c <__gethex+0x124>
 8003cba:	4620      	mov	r0, r4
 8003cbc:	1e71      	subs	r1, r6, #1
 8003cbe:	f000 fe48 	bl	8004952 <__any_on>
 8003cc2:	2800      	cmp	r0, #0
 8003cc4:	d1ed      	bne.n	8003ca2 <__gethex+0x2ba>
 8003cc6:	4621      	mov	r1, r4
 8003cc8:	9802      	ldr	r0, [sp, #8]
 8003cca:	f000 f9eb 	bl	80040a4 <_Bfree>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003cd2:	2750      	movs	r7, #80	; 0x50
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e719      	b.n	8003b0c <__gethex+0x124>
 8003cd8:	08005bbc 	.word	0x08005bbc
 8003cdc:	08005b41 	.word	0x08005b41
 8003ce0:	08005b52 	.word	0x08005b52
 8003ce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1ed      	bne.n	8003cc6 <__gethex+0x2de>
 8003cea:	e7da      	b.n	8003ca2 <__gethex+0x2ba>
 8003cec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1d7      	bne.n	8003ca2 <__gethex+0x2ba>
 8003cf2:	e7e8      	b.n	8003cc6 <__gethex+0x2de>
 8003cf4:	1e6f      	subs	r7, r5, #1
 8003cf6:	f1ba 0f00 	cmp.w	sl, #0
 8003cfa:	d132      	bne.n	8003d62 <__gethex+0x37a>
 8003cfc:	b127      	cbz	r7, 8003d08 <__gethex+0x320>
 8003cfe:	4639      	mov	r1, r7
 8003d00:	4620      	mov	r0, r4
 8003d02:	f000 fe26 	bl	8004952 <__any_on>
 8003d06:	4682      	mov	sl, r0
 8003d08:	2101      	movs	r1, #1
 8003d0a:	117b      	asrs	r3, r7, #5
 8003d0c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003d10:	f007 071f 	and.w	r7, r7, #31
 8003d14:	fa01 f707 	lsl.w	r7, r1, r7
 8003d18:	421f      	tst	r7, r3
 8003d1a:	f04f 0702 	mov.w	r7, #2
 8003d1e:	4629      	mov	r1, r5
 8003d20:	4620      	mov	r0, r4
 8003d22:	bf18      	it	ne
 8003d24:	f04a 0a02 	orrne.w	sl, sl, #2
 8003d28:	1b76      	subs	r6, r6, r5
 8003d2a:	f7ff fdf5 	bl	8003918 <rshift>
 8003d2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8003d32:	f1ba 0f00 	cmp.w	sl, #0
 8003d36:	d048      	beq.n	8003dca <__gethex+0x3e2>
 8003d38:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d015      	beq.n	8003d6c <__gethex+0x384>
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d017      	beq.n	8003d74 <__gethex+0x38c>
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d109      	bne.n	8003d5c <__gethex+0x374>
 8003d48:	f01a 0f02 	tst.w	sl, #2
 8003d4c:	d006      	beq.n	8003d5c <__gethex+0x374>
 8003d4e:	f8d9 0000 	ldr.w	r0, [r9]
 8003d52:	ea4a 0a00 	orr.w	sl, sl, r0
 8003d56:	f01a 0f01 	tst.w	sl, #1
 8003d5a:	d10e      	bne.n	8003d7a <__gethex+0x392>
 8003d5c:	f047 0710 	orr.w	r7, r7, #16
 8003d60:	e033      	b.n	8003dca <__gethex+0x3e2>
 8003d62:	f04f 0a01 	mov.w	sl, #1
 8003d66:	e7cf      	b.n	8003d08 <__gethex+0x320>
 8003d68:	2701      	movs	r7, #1
 8003d6a:	e7e2      	b.n	8003d32 <__gethex+0x34a>
 8003d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003d6e:	f1c3 0301 	rsb	r3, r3, #1
 8003d72:	9315      	str	r3, [sp, #84]	; 0x54
 8003d74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <__gethex+0x374>
 8003d7a:	f04f 0c00 	mov.w	ip, #0
 8003d7e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8003d82:	f104 0314 	add.w	r3, r4, #20
 8003d86:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8003d8a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d94:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003d98:	d01c      	beq.n	8003dd4 <__gethex+0x3ec>
 8003d9a:	3201      	adds	r2, #1
 8003d9c:	6002      	str	r2, [r0, #0]
 8003d9e:	2f02      	cmp	r7, #2
 8003da0:	f104 0314 	add.w	r3, r4, #20
 8003da4:	d13d      	bne.n	8003e22 <__gethex+0x43a>
 8003da6:	f8d8 2000 	ldr.w	r2, [r8]
 8003daa:	3a01      	subs	r2, #1
 8003dac:	42b2      	cmp	r2, r6
 8003dae:	d10a      	bne.n	8003dc6 <__gethex+0x3de>
 8003db0:	2201      	movs	r2, #1
 8003db2:	1171      	asrs	r1, r6, #5
 8003db4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003db8:	f006 061f 	and.w	r6, r6, #31
 8003dbc:	fa02 f606 	lsl.w	r6, r2, r6
 8003dc0:	421e      	tst	r6, r3
 8003dc2:	bf18      	it	ne
 8003dc4:	4617      	movne	r7, r2
 8003dc6:	f047 0720 	orr.w	r7, r7, #32
 8003dca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003dcc:	601c      	str	r4, [r3, #0]
 8003dce:	9b06      	ldr	r3, [sp, #24]
 8003dd0:	601d      	str	r5, [r3, #0]
 8003dd2:	e69b      	b.n	8003b0c <__gethex+0x124>
 8003dd4:	4299      	cmp	r1, r3
 8003dd6:	f843 cc04 	str.w	ip, [r3, #-4]
 8003dda:	d8d8      	bhi.n	8003d8e <__gethex+0x3a6>
 8003ddc:	68a3      	ldr	r3, [r4, #8]
 8003dde:	459b      	cmp	fp, r3
 8003de0:	db17      	blt.n	8003e12 <__gethex+0x42a>
 8003de2:	6861      	ldr	r1, [r4, #4]
 8003de4:	9802      	ldr	r0, [sp, #8]
 8003de6:	3101      	adds	r1, #1
 8003de8:	f000 f91c 	bl	8004024 <_Balloc>
 8003dec:	4681      	mov	r9, r0
 8003dee:	b918      	cbnz	r0, 8003df8 <__gethex+0x410>
 8003df0:	4602      	mov	r2, r0
 8003df2:	2184      	movs	r1, #132	; 0x84
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <__gethex+0x474>)
 8003df6:	e6ac      	b.n	8003b52 <__gethex+0x16a>
 8003df8:	6922      	ldr	r2, [r4, #16]
 8003dfa:	f104 010c 	add.w	r1, r4, #12
 8003dfe:	3202      	adds	r2, #2
 8003e00:	0092      	lsls	r2, r2, #2
 8003e02:	300c      	adds	r0, #12
 8003e04:	f000 f900 	bl	8004008 <memcpy>
 8003e08:	4621      	mov	r1, r4
 8003e0a:	9802      	ldr	r0, [sp, #8]
 8003e0c:	f000 f94a 	bl	80040a4 <_Bfree>
 8003e10:	464c      	mov	r4, r9
 8003e12:	6923      	ldr	r3, [r4, #16]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	6122      	str	r2, [r4, #16]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003e1e:	615a      	str	r2, [r3, #20]
 8003e20:	e7bd      	b.n	8003d9e <__gethex+0x3b6>
 8003e22:	6922      	ldr	r2, [r4, #16]
 8003e24:	455a      	cmp	r2, fp
 8003e26:	dd0b      	ble.n	8003e40 <__gethex+0x458>
 8003e28:	2101      	movs	r1, #1
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f7ff fd74 	bl	8003918 <rshift>
 8003e30:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003e34:	3501      	adds	r5, #1
 8003e36:	42ab      	cmp	r3, r5
 8003e38:	f6ff aed5 	blt.w	8003be6 <__gethex+0x1fe>
 8003e3c:	2701      	movs	r7, #1
 8003e3e:	e7c2      	b.n	8003dc6 <__gethex+0x3de>
 8003e40:	f016 061f 	ands.w	r6, r6, #31
 8003e44:	d0fa      	beq.n	8003e3c <__gethex+0x454>
 8003e46:	449a      	add	sl, r3
 8003e48:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8003e4c:	f000 f9e0 	bl	8004210 <__hi0bits>
 8003e50:	f1c6 0620 	rsb	r6, r6, #32
 8003e54:	42b0      	cmp	r0, r6
 8003e56:	dbe7      	blt.n	8003e28 <__gethex+0x440>
 8003e58:	e7f0      	b.n	8003e3c <__gethex+0x454>
 8003e5a:	bf00      	nop
 8003e5c:	08005b41 	.word	0x08005b41

08003e60 <L_shift>:
 8003e60:	f1c2 0208 	rsb	r2, r2, #8
 8003e64:	0092      	lsls	r2, r2, #2
 8003e66:	b570      	push	{r4, r5, r6, lr}
 8003e68:	f1c2 0620 	rsb	r6, r2, #32
 8003e6c:	6843      	ldr	r3, [r0, #4]
 8003e6e:	6804      	ldr	r4, [r0, #0]
 8003e70:	fa03 f506 	lsl.w	r5, r3, r6
 8003e74:	432c      	orrs	r4, r5
 8003e76:	40d3      	lsrs	r3, r2
 8003e78:	6004      	str	r4, [r0, #0]
 8003e7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8003e7e:	4288      	cmp	r0, r1
 8003e80:	d3f4      	bcc.n	8003e6c <L_shift+0xc>
 8003e82:	bd70      	pop	{r4, r5, r6, pc}

08003e84 <__match>:
 8003e84:	b530      	push	{r4, r5, lr}
 8003e86:	6803      	ldr	r3, [r0, #0]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e8e:	b914      	cbnz	r4, 8003e96 <__match+0x12>
 8003e90:	6003      	str	r3, [r0, #0]
 8003e92:	2001      	movs	r0, #1
 8003e94:	bd30      	pop	{r4, r5, pc}
 8003e96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e9a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8003e9e:	2d19      	cmp	r5, #25
 8003ea0:	bf98      	it	ls
 8003ea2:	3220      	addls	r2, #32
 8003ea4:	42a2      	cmp	r2, r4
 8003ea6:	d0f0      	beq.n	8003e8a <__match+0x6>
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	e7f3      	b.n	8003e94 <__match+0x10>

08003eac <__hexnan>:
 8003eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb0:	2500      	movs	r5, #0
 8003eb2:	680b      	ldr	r3, [r1, #0]
 8003eb4:	4682      	mov	sl, r0
 8003eb6:	115e      	asrs	r6, r3, #5
 8003eb8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003ebc:	f013 031f 	ands.w	r3, r3, #31
 8003ec0:	bf18      	it	ne
 8003ec2:	3604      	addne	r6, #4
 8003ec4:	1f37      	subs	r7, r6, #4
 8003ec6:	4690      	mov	r8, r2
 8003ec8:	46b9      	mov	r9, r7
 8003eca:	463c      	mov	r4, r7
 8003ecc:	46ab      	mov	fp, r5
 8003ece:	b087      	sub	sp, #28
 8003ed0:	6801      	ldr	r1, [r0, #0]
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	f846 5c04 	str.w	r5, [r6, #-4]
 8003ed8:	9502      	str	r5, [sp, #8]
 8003eda:	784a      	ldrb	r2, [r1, #1]
 8003edc:	1c4b      	adds	r3, r1, #1
 8003ede:	9303      	str	r3, [sp, #12]
 8003ee0:	b342      	cbz	r2, 8003f34 <__hexnan+0x88>
 8003ee2:	4610      	mov	r0, r2
 8003ee4:	9105      	str	r1, [sp, #20]
 8003ee6:	9204      	str	r2, [sp, #16]
 8003ee8:	f7ff fd69 	bl	80039be <__hexdig_fun>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d14f      	bne.n	8003f90 <__hexnan+0xe4>
 8003ef0:	9a04      	ldr	r2, [sp, #16]
 8003ef2:	9905      	ldr	r1, [sp, #20]
 8003ef4:	2a20      	cmp	r2, #32
 8003ef6:	d818      	bhi.n	8003f2a <__hexnan+0x7e>
 8003ef8:	9b02      	ldr	r3, [sp, #8]
 8003efa:	459b      	cmp	fp, r3
 8003efc:	dd13      	ble.n	8003f26 <__hexnan+0x7a>
 8003efe:	454c      	cmp	r4, r9
 8003f00:	d206      	bcs.n	8003f10 <__hexnan+0x64>
 8003f02:	2d07      	cmp	r5, #7
 8003f04:	dc04      	bgt.n	8003f10 <__hexnan+0x64>
 8003f06:	462a      	mov	r2, r5
 8003f08:	4649      	mov	r1, r9
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f7ff ffa8 	bl	8003e60 <L_shift>
 8003f10:	4544      	cmp	r4, r8
 8003f12:	d950      	bls.n	8003fb6 <__hexnan+0x10a>
 8003f14:	2300      	movs	r3, #0
 8003f16:	f1a4 0904 	sub.w	r9, r4, #4
 8003f1a:	f844 3c04 	str.w	r3, [r4, #-4]
 8003f1e:	461d      	mov	r5, r3
 8003f20:	464c      	mov	r4, r9
 8003f22:	f8cd b008 	str.w	fp, [sp, #8]
 8003f26:	9903      	ldr	r1, [sp, #12]
 8003f28:	e7d7      	b.n	8003eda <__hexnan+0x2e>
 8003f2a:	2a29      	cmp	r2, #41	; 0x29
 8003f2c:	d156      	bne.n	8003fdc <__hexnan+0x130>
 8003f2e:	3102      	adds	r1, #2
 8003f30:	f8ca 1000 	str.w	r1, [sl]
 8003f34:	f1bb 0f00 	cmp.w	fp, #0
 8003f38:	d050      	beq.n	8003fdc <__hexnan+0x130>
 8003f3a:	454c      	cmp	r4, r9
 8003f3c:	d206      	bcs.n	8003f4c <__hexnan+0xa0>
 8003f3e:	2d07      	cmp	r5, #7
 8003f40:	dc04      	bgt.n	8003f4c <__hexnan+0xa0>
 8003f42:	462a      	mov	r2, r5
 8003f44:	4649      	mov	r1, r9
 8003f46:	4620      	mov	r0, r4
 8003f48:	f7ff ff8a 	bl	8003e60 <L_shift>
 8003f4c:	4544      	cmp	r4, r8
 8003f4e:	d934      	bls.n	8003fba <__hexnan+0x10e>
 8003f50:	4623      	mov	r3, r4
 8003f52:	f1a8 0204 	sub.w	r2, r8, #4
 8003f56:	f853 1b04 	ldr.w	r1, [r3], #4
 8003f5a:	429f      	cmp	r7, r3
 8003f5c:	f842 1f04 	str.w	r1, [r2, #4]!
 8003f60:	d2f9      	bcs.n	8003f56 <__hexnan+0xaa>
 8003f62:	1b3b      	subs	r3, r7, r4
 8003f64:	f023 0303 	bic.w	r3, r3, #3
 8003f68:	3304      	adds	r3, #4
 8003f6a:	3401      	adds	r4, #1
 8003f6c:	3e03      	subs	r6, #3
 8003f6e:	42b4      	cmp	r4, r6
 8003f70:	bf88      	it	hi
 8003f72:	2304      	movhi	r3, #4
 8003f74:	2200      	movs	r2, #0
 8003f76:	4443      	add	r3, r8
 8003f78:	f843 2b04 	str.w	r2, [r3], #4
 8003f7c:	429f      	cmp	r7, r3
 8003f7e:	d2fb      	bcs.n	8003f78 <__hexnan+0xcc>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	b91b      	cbnz	r3, 8003f8c <__hexnan+0xe0>
 8003f84:	4547      	cmp	r7, r8
 8003f86:	d127      	bne.n	8003fd8 <__hexnan+0x12c>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	2005      	movs	r0, #5
 8003f8e:	e026      	b.n	8003fde <__hexnan+0x132>
 8003f90:	3501      	adds	r5, #1
 8003f92:	2d08      	cmp	r5, #8
 8003f94:	f10b 0b01 	add.w	fp, fp, #1
 8003f98:	dd06      	ble.n	8003fa8 <__hexnan+0xfc>
 8003f9a:	4544      	cmp	r4, r8
 8003f9c:	d9c3      	bls.n	8003f26 <__hexnan+0x7a>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	2501      	movs	r5, #1
 8003fa2:	f844 3c04 	str.w	r3, [r4, #-4]
 8003fa6:	3c04      	subs	r4, #4
 8003fa8:	6822      	ldr	r2, [r4, #0]
 8003faa:	f000 000f 	and.w	r0, r0, #15
 8003fae:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8003fb2:	6022      	str	r2, [r4, #0]
 8003fb4:	e7b7      	b.n	8003f26 <__hexnan+0x7a>
 8003fb6:	2508      	movs	r5, #8
 8003fb8:	e7b5      	b.n	8003f26 <__hexnan+0x7a>
 8003fba:	9b01      	ldr	r3, [sp, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0df      	beq.n	8003f80 <__hexnan+0xd4>
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	f1c3 0320 	rsb	r3, r3, #32
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8003fd0:	401a      	ands	r2, r3
 8003fd2:	f846 2c04 	str.w	r2, [r6, #-4]
 8003fd6:	e7d3      	b.n	8003f80 <__hexnan+0xd4>
 8003fd8:	3f04      	subs	r7, #4
 8003fda:	e7d1      	b.n	8003f80 <__hexnan+0xd4>
 8003fdc:	2004      	movs	r0, #4
 8003fde:	b007      	add	sp, #28
 8003fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003fe4 <__ascii_mbtowc>:
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	b901      	cbnz	r1, 8003fea <__ascii_mbtowc+0x6>
 8003fe8:	a901      	add	r1, sp, #4
 8003fea:	b142      	cbz	r2, 8003ffe <__ascii_mbtowc+0x1a>
 8003fec:	b14b      	cbz	r3, 8004002 <__ascii_mbtowc+0x1e>
 8003fee:	7813      	ldrb	r3, [r2, #0]
 8003ff0:	600b      	str	r3, [r1, #0]
 8003ff2:	7812      	ldrb	r2, [r2, #0]
 8003ff4:	1e10      	subs	r0, r2, #0
 8003ff6:	bf18      	it	ne
 8003ff8:	2001      	movne	r0, #1
 8003ffa:	b002      	add	sp, #8
 8003ffc:	4770      	bx	lr
 8003ffe:	4610      	mov	r0, r2
 8004000:	e7fb      	b.n	8003ffa <__ascii_mbtowc+0x16>
 8004002:	f06f 0001 	mvn.w	r0, #1
 8004006:	e7f8      	b.n	8003ffa <__ascii_mbtowc+0x16>

08004008 <memcpy>:
 8004008:	440a      	add	r2, r1
 800400a:	4291      	cmp	r1, r2
 800400c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004010:	d100      	bne.n	8004014 <memcpy+0xc>
 8004012:	4770      	bx	lr
 8004014:	b510      	push	{r4, lr}
 8004016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800401a:	4291      	cmp	r1, r2
 800401c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004020:	d1f9      	bne.n	8004016 <memcpy+0xe>
 8004022:	bd10      	pop	{r4, pc}

08004024 <_Balloc>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004028:	4604      	mov	r4, r0
 800402a:	460d      	mov	r5, r1
 800402c:	b976      	cbnz	r6, 800404c <_Balloc+0x28>
 800402e:	2010      	movs	r0, #16
 8004030:	f000 fd7e 	bl	8004b30 <malloc>
 8004034:	4602      	mov	r2, r0
 8004036:	6260      	str	r0, [r4, #36]	; 0x24
 8004038:	b920      	cbnz	r0, 8004044 <_Balloc+0x20>
 800403a:	2166      	movs	r1, #102	; 0x66
 800403c:	4b17      	ldr	r3, [pc, #92]	; (800409c <_Balloc+0x78>)
 800403e:	4818      	ldr	r0, [pc, #96]	; (80040a0 <_Balloc+0x7c>)
 8004040:	f000 fd46 	bl	8004ad0 <__assert_func>
 8004044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004048:	6006      	str	r6, [r0, #0]
 800404a:	60c6      	str	r6, [r0, #12]
 800404c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800404e:	68f3      	ldr	r3, [r6, #12]
 8004050:	b183      	cbz	r3, 8004074 <_Balloc+0x50>
 8004052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800405a:	b9b8      	cbnz	r0, 800408c <_Balloc+0x68>
 800405c:	2101      	movs	r1, #1
 800405e:	fa01 f605 	lsl.w	r6, r1, r5
 8004062:	1d72      	adds	r2, r6, #5
 8004064:	4620      	mov	r0, r4
 8004066:	0092      	lsls	r2, r2, #2
 8004068:	f000 fc94 	bl	8004994 <_calloc_r>
 800406c:	b160      	cbz	r0, 8004088 <_Balloc+0x64>
 800406e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004072:	e00e      	b.n	8004092 <_Balloc+0x6e>
 8004074:	2221      	movs	r2, #33	; 0x21
 8004076:	2104      	movs	r1, #4
 8004078:	4620      	mov	r0, r4
 800407a:	f000 fc8b 	bl	8004994 <_calloc_r>
 800407e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004080:	60f0      	str	r0, [r6, #12]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1e4      	bne.n	8004052 <_Balloc+0x2e>
 8004088:	2000      	movs	r0, #0
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	6802      	ldr	r2, [r0, #0]
 800408e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004092:	2300      	movs	r3, #0
 8004094:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004098:	e7f7      	b.n	800408a <_Balloc+0x66>
 800409a:	bf00      	nop
 800409c:	08005bd0 	.word	0x08005bd0
 80040a0:	08005be7 	.word	0x08005be7

080040a4 <_Bfree>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80040a8:	4605      	mov	r5, r0
 80040aa:	460c      	mov	r4, r1
 80040ac:	b976      	cbnz	r6, 80040cc <_Bfree+0x28>
 80040ae:	2010      	movs	r0, #16
 80040b0:	f000 fd3e 	bl	8004b30 <malloc>
 80040b4:	4602      	mov	r2, r0
 80040b6:	6268      	str	r0, [r5, #36]	; 0x24
 80040b8:	b920      	cbnz	r0, 80040c4 <_Bfree+0x20>
 80040ba:	218a      	movs	r1, #138	; 0x8a
 80040bc:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <_Bfree+0x3c>)
 80040be:	4809      	ldr	r0, [pc, #36]	; (80040e4 <_Bfree+0x40>)
 80040c0:	f000 fd06 	bl	8004ad0 <__assert_func>
 80040c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80040c8:	6006      	str	r6, [r0, #0]
 80040ca:	60c6      	str	r6, [r0, #12]
 80040cc:	b13c      	cbz	r4, 80040de <_Bfree+0x3a>
 80040ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80040d0:	6862      	ldr	r2, [r4, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040d8:	6021      	str	r1, [r4, #0]
 80040da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	08005bd0 	.word	0x08005bd0
 80040e4:	08005be7 	.word	0x08005be7

080040e8 <__multadd>:
 80040e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ec:	4698      	mov	r8, r3
 80040ee:	460c      	mov	r4, r1
 80040f0:	2300      	movs	r3, #0
 80040f2:	690e      	ldr	r6, [r1, #16]
 80040f4:	4607      	mov	r7, r0
 80040f6:	f101 0014 	add.w	r0, r1, #20
 80040fa:	6805      	ldr	r5, [r0, #0]
 80040fc:	3301      	adds	r3, #1
 80040fe:	b2a9      	uxth	r1, r5
 8004100:	fb02 8101 	mla	r1, r2, r1, r8
 8004104:	0c2d      	lsrs	r5, r5, #16
 8004106:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800410a:	fb02 c505 	mla	r5, r2, r5, ip
 800410e:	b289      	uxth	r1, r1
 8004110:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004114:	429e      	cmp	r6, r3
 8004116:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800411a:	f840 1b04 	str.w	r1, [r0], #4
 800411e:	dcec      	bgt.n	80040fa <__multadd+0x12>
 8004120:	f1b8 0f00 	cmp.w	r8, #0
 8004124:	d022      	beq.n	800416c <__multadd+0x84>
 8004126:	68a3      	ldr	r3, [r4, #8]
 8004128:	42b3      	cmp	r3, r6
 800412a:	dc19      	bgt.n	8004160 <__multadd+0x78>
 800412c:	6861      	ldr	r1, [r4, #4]
 800412e:	4638      	mov	r0, r7
 8004130:	3101      	adds	r1, #1
 8004132:	f7ff ff77 	bl	8004024 <_Balloc>
 8004136:	4605      	mov	r5, r0
 8004138:	b928      	cbnz	r0, 8004146 <__multadd+0x5e>
 800413a:	4602      	mov	r2, r0
 800413c:	21b5      	movs	r1, #181	; 0xb5
 800413e:	4b0d      	ldr	r3, [pc, #52]	; (8004174 <__multadd+0x8c>)
 8004140:	480d      	ldr	r0, [pc, #52]	; (8004178 <__multadd+0x90>)
 8004142:	f000 fcc5 	bl	8004ad0 <__assert_func>
 8004146:	6922      	ldr	r2, [r4, #16]
 8004148:	f104 010c 	add.w	r1, r4, #12
 800414c:	3202      	adds	r2, #2
 800414e:	0092      	lsls	r2, r2, #2
 8004150:	300c      	adds	r0, #12
 8004152:	f7ff ff59 	bl	8004008 <memcpy>
 8004156:	4621      	mov	r1, r4
 8004158:	4638      	mov	r0, r7
 800415a:	f7ff ffa3 	bl	80040a4 <_Bfree>
 800415e:	462c      	mov	r4, r5
 8004160:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004164:	3601      	adds	r6, #1
 8004166:	f8c3 8014 	str.w	r8, [r3, #20]
 800416a:	6126      	str	r6, [r4, #16]
 800416c:	4620      	mov	r0, r4
 800416e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004172:	bf00      	nop
 8004174:	08005b41 	.word	0x08005b41
 8004178:	08005be7 	.word	0x08005be7

0800417c <__s2b>:
 800417c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004180:	4615      	mov	r5, r2
 8004182:	2209      	movs	r2, #9
 8004184:	461f      	mov	r7, r3
 8004186:	3308      	adds	r3, #8
 8004188:	460c      	mov	r4, r1
 800418a:	fb93 f3f2 	sdiv	r3, r3, r2
 800418e:	4606      	mov	r6, r0
 8004190:	2201      	movs	r2, #1
 8004192:	2100      	movs	r1, #0
 8004194:	429a      	cmp	r2, r3
 8004196:	db09      	blt.n	80041ac <__s2b+0x30>
 8004198:	4630      	mov	r0, r6
 800419a:	f7ff ff43 	bl	8004024 <_Balloc>
 800419e:	b940      	cbnz	r0, 80041b2 <__s2b+0x36>
 80041a0:	4602      	mov	r2, r0
 80041a2:	21ce      	movs	r1, #206	; 0xce
 80041a4:	4b18      	ldr	r3, [pc, #96]	; (8004208 <__s2b+0x8c>)
 80041a6:	4819      	ldr	r0, [pc, #100]	; (800420c <__s2b+0x90>)
 80041a8:	f000 fc92 	bl	8004ad0 <__assert_func>
 80041ac:	0052      	lsls	r2, r2, #1
 80041ae:	3101      	adds	r1, #1
 80041b0:	e7f0      	b.n	8004194 <__s2b+0x18>
 80041b2:	9b08      	ldr	r3, [sp, #32]
 80041b4:	2d09      	cmp	r5, #9
 80041b6:	6143      	str	r3, [r0, #20]
 80041b8:	f04f 0301 	mov.w	r3, #1
 80041bc:	6103      	str	r3, [r0, #16]
 80041be:	dd16      	ble.n	80041ee <__s2b+0x72>
 80041c0:	f104 0909 	add.w	r9, r4, #9
 80041c4:	46c8      	mov	r8, r9
 80041c6:	442c      	add	r4, r5
 80041c8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80041cc:	4601      	mov	r1, r0
 80041ce:	220a      	movs	r2, #10
 80041d0:	4630      	mov	r0, r6
 80041d2:	3b30      	subs	r3, #48	; 0x30
 80041d4:	f7ff ff88 	bl	80040e8 <__multadd>
 80041d8:	45a0      	cmp	r8, r4
 80041da:	d1f5      	bne.n	80041c8 <__s2b+0x4c>
 80041dc:	f1a5 0408 	sub.w	r4, r5, #8
 80041e0:	444c      	add	r4, r9
 80041e2:	1b2d      	subs	r5, r5, r4
 80041e4:	1963      	adds	r3, r4, r5
 80041e6:	42bb      	cmp	r3, r7
 80041e8:	db04      	blt.n	80041f4 <__s2b+0x78>
 80041ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ee:	2509      	movs	r5, #9
 80041f0:	340a      	adds	r4, #10
 80041f2:	e7f6      	b.n	80041e2 <__s2b+0x66>
 80041f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80041f8:	4601      	mov	r1, r0
 80041fa:	220a      	movs	r2, #10
 80041fc:	4630      	mov	r0, r6
 80041fe:	3b30      	subs	r3, #48	; 0x30
 8004200:	f7ff ff72 	bl	80040e8 <__multadd>
 8004204:	e7ee      	b.n	80041e4 <__s2b+0x68>
 8004206:	bf00      	nop
 8004208:	08005b41 	.word	0x08005b41
 800420c:	08005be7 	.word	0x08005be7

08004210 <__hi0bits>:
 8004210:	0c02      	lsrs	r2, r0, #16
 8004212:	0412      	lsls	r2, r2, #16
 8004214:	4603      	mov	r3, r0
 8004216:	b9ca      	cbnz	r2, 800424c <__hi0bits+0x3c>
 8004218:	0403      	lsls	r3, r0, #16
 800421a:	2010      	movs	r0, #16
 800421c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004220:	bf04      	itt	eq
 8004222:	021b      	lsleq	r3, r3, #8
 8004224:	3008      	addeq	r0, #8
 8004226:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800422a:	bf04      	itt	eq
 800422c:	011b      	lsleq	r3, r3, #4
 800422e:	3004      	addeq	r0, #4
 8004230:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004234:	bf04      	itt	eq
 8004236:	009b      	lsleq	r3, r3, #2
 8004238:	3002      	addeq	r0, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	db05      	blt.n	800424a <__hi0bits+0x3a>
 800423e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004242:	f100 0001 	add.w	r0, r0, #1
 8004246:	bf08      	it	eq
 8004248:	2020      	moveq	r0, #32
 800424a:	4770      	bx	lr
 800424c:	2000      	movs	r0, #0
 800424e:	e7e5      	b.n	800421c <__hi0bits+0xc>

08004250 <__lo0bits>:
 8004250:	6803      	ldr	r3, [r0, #0]
 8004252:	4602      	mov	r2, r0
 8004254:	f013 0007 	ands.w	r0, r3, #7
 8004258:	d00b      	beq.n	8004272 <__lo0bits+0x22>
 800425a:	07d9      	lsls	r1, r3, #31
 800425c:	d422      	bmi.n	80042a4 <__lo0bits+0x54>
 800425e:	0798      	lsls	r0, r3, #30
 8004260:	bf49      	itett	mi
 8004262:	085b      	lsrmi	r3, r3, #1
 8004264:	089b      	lsrpl	r3, r3, #2
 8004266:	2001      	movmi	r0, #1
 8004268:	6013      	strmi	r3, [r2, #0]
 800426a:	bf5c      	itt	pl
 800426c:	2002      	movpl	r0, #2
 800426e:	6013      	strpl	r3, [r2, #0]
 8004270:	4770      	bx	lr
 8004272:	b299      	uxth	r1, r3
 8004274:	b909      	cbnz	r1, 800427a <__lo0bits+0x2a>
 8004276:	2010      	movs	r0, #16
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800427e:	bf04      	itt	eq
 8004280:	0a1b      	lsreq	r3, r3, #8
 8004282:	3008      	addeq	r0, #8
 8004284:	0719      	lsls	r1, r3, #28
 8004286:	bf04      	itt	eq
 8004288:	091b      	lsreq	r3, r3, #4
 800428a:	3004      	addeq	r0, #4
 800428c:	0799      	lsls	r1, r3, #30
 800428e:	bf04      	itt	eq
 8004290:	089b      	lsreq	r3, r3, #2
 8004292:	3002      	addeq	r0, #2
 8004294:	07d9      	lsls	r1, r3, #31
 8004296:	d403      	bmi.n	80042a0 <__lo0bits+0x50>
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	f100 0001 	add.w	r0, r0, #1
 800429e:	d003      	beq.n	80042a8 <__lo0bits+0x58>
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4770      	bx	lr
 80042a4:	2000      	movs	r0, #0
 80042a6:	4770      	bx	lr
 80042a8:	2020      	movs	r0, #32
 80042aa:	4770      	bx	lr

080042ac <__i2b>:
 80042ac:	b510      	push	{r4, lr}
 80042ae:	460c      	mov	r4, r1
 80042b0:	2101      	movs	r1, #1
 80042b2:	f7ff feb7 	bl	8004024 <_Balloc>
 80042b6:	4602      	mov	r2, r0
 80042b8:	b928      	cbnz	r0, 80042c6 <__i2b+0x1a>
 80042ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80042be:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <__i2b+0x24>)
 80042c0:	4804      	ldr	r0, [pc, #16]	; (80042d4 <__i2b+0x28>)
 80042c2:	f000 fc05 	bl	8004ad0 <__assert_func>
 80042c6:	2301      	movs	r3, #1
 80042c8:	6144      	str	r4, [r0, #20]
 80042ca:	6103      	str	r3, [r0, #16]
 80042cc:	bd10      	pop	{r4, pc}
 80042ce:	bf00      	nop
 80042d0:	08005b41 	.word	0x08005b41
 80042d4:	08005be7 	.word	0x08005be7

080042d8 <__multiply>:
 80042d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042dc:	4614      	mov	r4, r2
 80042de:	690a      	ldr	r2, [r1, #16]
 80042e0:	6923      	ldr	r3, [r4, #16]
 80042e2:	460d      	mov	r5, r1
 80042e4:	429a      	cmp	r2, r3
 80042e6:	bfbe      	ittt	lt
 80042e8:	460b      	movlt	r3, r1
 80042ea:	4625      	movlt	r5, r4
 80042ec:	461c      	movlt	r4, r3
 80042ee:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80042f2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80042f6:	68ab      	ldr	r3, [r5, #8]
 80042f8:	6869      	ldr	r1, [r5, #4]
 80042fa:	eb0a 0709 	add.w	r7, sl, r9
 80042fe:	42bb      	cmp	r3, r7
 8004300:	b085      	sub	sp, #20
 8004302:	bfb8      	it	lt
 8004304:	3101      	addlt	r1, #1
 8004306:	f7ff fe8d 	bl	8004024 <_Balloc>
 800430a:	b930      	cbnz	r0, 800431a <__multiply+0x42>
 800430c:	4602      	mov	r2, r0
 800430e:	f240 115d 	movw	r1, #349	; 0x15d
 8004312:	4b41      	ldr	r3, [pc, #260]	; (8004418 <__multiply+0x140>)
 8004314:	4841      	ldr	r0, [pc, #260]	; (800441c <__multiply+0x144>)
 8004316:	f000 fbdb 	bl	8004ad0 <__assert_func>
 800431a:	f100 0614 	add.w	r6, r0, #20
 800431e:	4633      	mov	r3, r6
 8004320:	2200      	movs	r2, #0
 8004322:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004326:	4543      	cmp	r3, r8
 8004328:	d31e      	bcc.n	8004368 <__multiply+0x90>
 800432a:	f105 0c14 	add.w	ip, r5, #20
 800432e:	f104 0314 	add.w	r3, r4, #20
 8004332:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004336:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800433a:	9202      	str	r2, [sp, #8]
 800433c:	ebac 0205 	sub.w	r2, ip, r5
 8004340:	3a15      	subs	r2, #21
 8004342:	f022 0203 	bic.w	r2, r2, #3
 8004346:	3204      	adds	r2, #4
 8004348:	f105 0115 	add.w	r1, r5, #21
 800434c:	458c      	cmp	ip, r1
 800434e:	bf38      	it	cc
 8004350:	2204      	movcc	r2, #4
 8004352:	9201      	str	r2, [sp, #4]
 8004354:	9a02      	ldr	r2, [sp, #8]
 8004356:	9303      	str	r3, [sp, #12]
 8004358:	429a      	cmp	r2, r3
 800435a:	d808      	bhi.n	800436e <__multiply+0x96>
 800435c:	2f00      	cmp	r7, #0
 800435e:	dc55      	bgt.n	800440c <__multiply+0x134>
 8004360:	6107      	str	r7, [r0, #16]
 8004362:	b005      	add	sp, #20
 8004364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004368:	f843 2b04 	str.w	r2, [r3], #4
 800436c:	e7db      	b.n	8004326 <__multiply+0x4e>
 800436e:	f8b3 a000 	ldrh.w	sl, [r3]
 8004372:	f1ba 0f00 	cmp.w	sl, #0
 8004376:	d020      	beq.n	80043ba <__multiply+0xe2>
 8004378:	46b1      	mov	r9, r6
 800437a:	2200      	movs	r2, #0
 800437c:	f105 0e14 	add.w	lr, r5, #20
 8004380:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004384:	f8d9 b000 	ldr.w	fp, [r9]
 8004388:	b2a1      	uxth	r1, r4
 800438a:	fa1f fb8b 	uxth.w	fp, fp
 800438e:	fb0a b101 	mla	r1, sl, r1, fp
 8004392:	4411      	add	r1, r2
 8004394:	f8d9 2000 	ldr.w	r2, [r9]
 8004398:	0c24      	lsrs	r4, r4, #16
 800439a:	0c12      	lsrs	r2, r2, #16
 800439c:	fb0a 2404 	mla	r4, sl, r4, r2
 80043a0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80043a4:	b289      	uxth	r1, r1
 80043a6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80043aa:	45f4      	cmp	ip, lr
 80043ac:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80043b0:	f849 1b04 	str.w	r1, [r9], #4
 80043b4:	d8e4      	bhi.n	8004380 <__multiply+0xa8>
 80043b6:	9901      	ldr	r1, [sp, #4]
 80043b8:	5072      	str	r2, [r6, r1]
 80043ba:	9a03      	ldr	r2, [sp, #12]
 80043bc:	3304      	adds	r3, #4
 80043be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80043c2:	f1b9 0f00 	cmp.w	r9, #0
 80043c6:	d01f      	beq.n	8004408 <__multiply+0x130>
 80043c8:	46b6      	mov	lr, r6
 80043ca:	f04f 0a00 	mov.w	sl, #0
 80043ce:	6834      	ldr	r4, [r6, #0]
 80043d0:	f105 0114 	add.w	r1, r5, #20
 80043d4:	880a      	ldrh	r2, [r1, #0]
 80043d6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80043da:	b2a4      	uxth	r4, r4
 80043dc:	fb09 b202 	mla	r2, r9, r2, fp
 80043e0:	4492      	add	sl, r2
 80043e2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80043e6:	f84e 4b04 	str.w	r4, [lr], #4
 80043ea:	f851 4b04 	ldr.w	r4, [r1], #4
 80043ee:	f8be 2000 	ldrh.w	r2, [lr]
 80043f2:	0c24      	lsrs	r4, r4, #16
 80043f4:	fb09 2404 	mla	r4, r9, r4, r2
 80043f8:	458c      	cmp	ip, r1
 80043fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80043fe:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004402:	d8e7      	bhi.n	80043d4 <__multiply+0xfc>
 8004404:	9a01      	ldr	r2, [sp, #4]
 8004406:	50b4      	str	r4, [r6, r2]
 8004408:	3604      	adds	r6, #4
 800440a:	e7a3      	b.n	8004354 <__multiply+0x7c>
 800440c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1a5      	bne.n	8004360 <__multiply+0x88>
 8004414:	3f01      	subs	r7, #1
 8004416:	e7a1      	b.n	800435c <__multiply+0x84>
 8004418:	08005b41 	.word	0x08005b41
 800441c:	08005be7 	.word	0x08005be7

08004420 <__pow5mult>:
 8004420:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004424:	4615      	mov	r5, r2
 8004426:	f012 0203 	ands.w	r2, r2, #3
 800442a:	4606      	mov	r6, r0
 800442c:	460f      	mov	r7, r1
 800442e:	d007      	beq.n	8004440 <__pow5mult+0x20>
 8004430:	4c25      	ldr	r4, [pc, #148]	; (80044c8 <__pow5mult+0xa8>)
 8004432:	3a01      	subs	r2, #1
 8004434:	2300      	movs	r3, #0
 8004436:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800443a:	f7ff fe55 	bl	80040e8 <__multadd>
 800443e:	4607      	mov	r7, r0
 8004440:	10ad      	asrs	r5, r5, #2
 8004442:	d03d      	beq.n	80044c0 <__pow5mult+0xa0>
 8004444:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004446:	b97c      	cbnz	r4, 8004468 <__pow5mult+0x48>
 8004448:	2010      	movs	r0, #16
 800444a:	f000 fb71 	bl	8004b30 <malloc>
 800444e:	4602      	mov	r2, r0
 8004450:	6270      	str	r0, [r6, #36]	; 0x24
 8004452:	b928      	cbnz	r0, 8004460 <__pow5mult+0x40>
 8004454:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004458:	4b1c      	ldr	r3, [pc, #112]	; (80044cc <__pow5mult+0xac>)
 800445a:	481d      	ldr	r0, [pc, #116]	; (80044d0 <__pow5mult+0xb0>)
 800445c:	f000 fb38 	bl	8004ad0 <__assert_func>
 8004460:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004464:	6004      	str	r4, [r0, #0]
 8004466:	60c4      	str	r4, [r0, #12]
 8004468:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800446c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004470:	b94c      	cbnz	r4, 8004486 <__pow5mult+0x66>
 8004472:	f240 2171 	movw	r1, #625	; 0x271
 8004476:	4630      	mov	r0, r6
 8004478:	f7ff ff18 	bl	80042ac <__i2b>
 800447c:	2300      	movs	r3, #0
 800447e:	4604      	mov	r4, r0
 8004480:	f8c8 0008 	str.w	r0, [r8, #8]
 8004484:	6003      	str	r3, [r0, #0]
 8004486:	f04f 0900 	mov.w	r9, #0
 800448a:	07eb      	lsls	r3, r5, #31
 800448c:	d50a      	bpl.n	80044a4 <__pow5mult+0x84>
 800448e:	4639      	mov	r1, r7
 8004490:	4622      	mov	r2, r4
 8004492:	4630      	mov	r0, r6
 8004494:	f7ff ff20 	bl	80042d8 <__multiply>
 8004498:	4680      	mov	r8, r0
 800449a:	4639      	mov	r1, r7
 800449c:	4630      	mov	r0, r6
 800449e:	f7ff fe01 	bl	80040a4 <_Bfree>
 80044a2:	4647      	mov	r7, r8
 80044a4:	106d      	asrs	r5, r5, #1
 80044a6:	d00b      	beq.n	80044c0 <__pow5mult+0xa0>
 80044a8:	6820      	ldr	r0, [r4, #0]
 80044aa:	b938      	cbnz	r0, 80044bc <__pow5mult+0x9c>
 80044ac:	4622      	mov	r2, r4
 80044ae:	4621      	mov	r1, r4
 80044b0:	4630      	mov	r0, r6
 80044b2:	f7ff ff11 	bl	80042d8 <__multiply>
 80044b6:	6020      	str	r0, [r4, #0]
 80044b8:	f8c0 9000 	str.w	r9, [r0]
 80044bc:	4604      	mov	r4, r0
 80044be:	e7e4      	b.n	800448a <__pow5mult+0x6a>
 80044c0:	4638      	mov	r0, r7
 80044c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044c6:	bf00      	nop
 80044c8:	08005d38 	.word	0x08005d38
 80044cc:	08005bd0 	.word	0x08005bd0
 80044d0:	08005be7 	.word	0x08005be7

080044d4 <__lshift>:
 80044d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d8:	460c      	mov	r4, r1
 80044da:	4607      	mov	r7, r0
 80044dc:	4691      	mov	r9, r2
 80044de:	6923      	ldr	r3, [r4, #16]
 80044e0:	6849      	ldr	r1, [r1, #4]
 80044e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80044e6:	68a3      	ldr	r3, [r4, #8]
 80044e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80044ec:	f108 0601 	add.w	r6, r8, #1
 80044f0:	42b3      	cmp	r3, r6
 80044f2:	db0b      	blt.n	800450c <__lshift+0x38>
 80044f4:	4638      	mov	r0, r7
 80044f6:	f7ff fd95 	bl	8004024 <_Balloc>
 80044fa:	4605      	mov	r5, r0
 80044fc:	b948      	cbnz	r0, 8004512 <__lshift+0x3e>
 80044fe:	4602      	mov	r2, r0
 8004500:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004504:	4b27      	ldr	r3, [pc, #156]	; (80045a4 <__lshift+0xd0>)
 8004506:	4828      	ldr	r0, [pc, #160]	; (80045a8 <__lshift+0xd4>)
 8004508:	f000 fae2 	bl	8004ad0 <__assert_func>
 800450c:	3101      	adds	r1, #1
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	e7ee      	b.n	80044f0 <__lshift+0x1c>
 8004512:	2300      	movs	r3, #0
 8004514:	f100 0114 	add.w	r1, r0, #20
 8004518:	f100 0210 	add.w	r2, r0, #16
 800451c:	4618      	mov	r0, r3
 800451e:	4553      	cmp	r3, sl
 8004520:	db33      	blt.n	800458a <__lshift+0xb6>
 8004522:	6920      	ldr	r0, [r4, #16]
 8004524:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004528:	f104 0314 	add.w	r3, r4, #20
 800452c:	f019 091f 	ands.w	r9, r9, #31
 8004530:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004534:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004538:	d02b      	beq.n	8004592 <__lshift+0xbe>
 800453a:	468a      	mov	sl, r1
 800453c:	2200      	movs	r2, #0
 800453e:	f1c9 0e20 	rsb	lr, r9, #32
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	fa00 f009 	lsl.w	r0, r0, r9
 8004548:	4302      	orrs	r2, r0
 800454a:	f84a 2b04 	str.w	r2, [sl], #4
 800454e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004552:	459c      	cmp	ip, r3
 8004554:	fa22 f20e 	lsr.w	r2, r2, lr
 8004558:	d8f3      	bhi.n	8004542 <__lshift+0x6e>
 800455a:	ebac 0304 	sub.w	r3, ip, r4
 800455e:	3b15      	subs	r3, #21
 8004560:	f023 0303 	bic.w	r3, r3, #3
 8004564:	3304      	adds	r3, #4
 8004566:	f104 0015 	add.w	r0, r4, #21
 800456a:	4584      	cmp	ip, r0
 800456c:	bf38      	it	cc
 800456e:	2304      	movcc	r3, #4
 8004570:	50ca      	str	r2, [r1, r3]
 8004572:	b10a      	cbz	r2, 8004578 <__lshift+0xa4>
 8004574:	f108 0602 	add.w	r6, r8, #2
 8004578:	3e01      	subs	r6, #1
 800457a:	4638      	mov	r0, r7
 800457c:	4621      	mov	r1, r4
 800457e:	612e      	str	r6, [r5, #16]
 8004580:	f7ff fd90 	bl	80040a4 <_Bfree>
 8004584:	4628      	mov	r0, r5
 8004586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800458a:	f842 0f04 	str.w	r0, [r2, #4]!
 800458e:	3301      	adds	r3, #1
 8004590:	e7c5      	b.n	800451e <__lshift+0x4a>
 8004592:	3904      	subs	r1, #4
 8004594:	f853 2b04 	ldr.w	r2, [r3], #4
 8004598:	459c      	cmp	ip, r3
 800459a:	f841 2f04 	str.w	r2, [r1, #4]!
 800459e:	d8f9      	bhi.n	8004594 <__lshift+0xc0>
 80045a0:	e7ea      	b.n	8004578 <__lshift+0xa4>
 80045a2:	bf00      	nop
 80045a4:	08005b41 	.word	0x08005b41
 80045a8:	08005be7 	.word	0x08005be7

080045ac <__mcmp>:
 80045ac:	4603      	mov	r3, r0
 80045ae:	690a      	ldr	r2, [r1, #16]
 80045b0:	6900      	ldr	r0, [r0, #16]
 80045b2:	b530      	push	{r4, r5, lr}
 80045b4:	1a80      	subs	r0, r0, r2
 80045b6:	d10d      	bne.n	80045d4 <__mcmp+0x28>
 80045b8:	3314      	adds	r3, #20
 80045ba:	3114      	adds	r1, #20
 80045bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80045c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80045c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80045c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80045cc:	4295      	cmp	r5, r2
 80045ce:	d002      	beq.n	80045d6 <__mcmp+0x2a>
 80045d0:	d304      	bcc.n	80045dc <__mcmp+0x30>
 80045d2:	2001      	movs	r0, #1
 80045d4:	bd30      	pop	{r4, r5, pc}
 80045d6:	42a3      	cmp	r3, r4
 80045d8:	d3f4      	bcc.n	80045c4 <__mcmp+0x18>
 80045da:	e7fb      	b.n	80045d4 <__mcmp+0x28>
 80045dc:	f04f 30ff 	mov.w	r0, #4294967295
 80045e0:	e7f8      	b.n	80045d4 <__mcmp+0x28>
	...

080045e4 <__mdiff>:
 80045e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e8:	460c      	mov	r4, r1
 80045ea:	4606      	mov	r6, r0
 80045ec:	4611      	mov	r1, r2
 80045ee:	4620      	mov	r0, r4
 80045f0:	4692      	mov	sl, r2
 80045f2:	f7ff ffdb 	bl	80045ac <__mcmp>
 80045f6:	1e05      	subs	r5, r0, #0
 80045f8:	d111      	bne.n	800461e <__mdiff+0x3a>
 80045fa:	4629      	mov	r1, r5
 80045fc:	4630      	mov	r0, r6
 80045fe:	f7ff fd11 	bl	8004024 <_Balloc>
 8004602:	4602      	mov	r2, r0
 8004604:	b928      	cbnz	r0, 8004612 <__mdiff+0x2e>
 8004606:	f240 2132 	movw	r1, #562	; 0x232
 800460a:	4b3c      	ldr	r3, [pc, #240]	; (80046fc <__mdiff+0x118>)
 800460c:	483c      	ldr	r0, [pc, #240]	; (8004700 <__mdiff+0x11c>)
 800460e:	f000 fa5f 	bl	8004ad0 <__assert_func>
 8004612:	2301      	movs	r3, #1
 8004614:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004618:	4610      	mov	r0, r2
 800461a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461e:	bfa4      	itt	ge
 8004620:	4653      	movge	r3, sl
 8004622:	46a2      	movge	sl, r4
 8004624:	4630      	mov	r0, r6
 8004626:	f8da 1004 	ldr.w	r1, [sl, #4]
 800462a:	bfa6      	itte	ge
 800462c:	461c      	movge	r4, r3
 800462e:	2500      	movge	r5, #0
 8004630:	2501      	movlt	r5, #1
 8004632:	f7ff fcf7 	bl	8004024 <_Balloc>
 8004636:	4602      	mov	r2, r0
 8004638:	b918      	cbnz	r0, 8004642 <__mdiff+0x5e>
 800463a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800463e:	4b2f      	ldr	r3, [pc, #188]	; (80046fc <__mdiff+0x118>)
 8004640:	e7e4      	b.n	800460c <__mdiff+0x28>
 8004642:	f100 0814 	add.w	r8, r0, #20
 8004646:	f8da 7010 	ldr.w	r7, [sl, #16]
 800464a:	60c5      	str	r5, [r0, #12]
 800464c:	f04f 0c00 	mov.w	ip, #0
 8004650:	f10a 0514 	add.w	r5, sl, #20
 8004654:	f10a 0010 	add.w	r0, sl, #16
 8004658:	46c2      	mov	sl, r8
 800465a:	6926      	ldr	r6, [r4, #16]
 800465c:	f104 0914 	add.w	r9, r4, #20
 8004660:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8004664:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004668:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800466c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004670:	fa1f f18b 	uxth.w	r1, fp
 8004674:	4461      	add	r1, ip
 8004676:	fa1f fc83 	uxth.w	ip, r3
 800467a:	0c1b      	lsrs	r3, r3, #16
 800467c:	eba1 010c 	sub.w	r1, r1, ip
 8004680:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004684:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004688:	b289      	uxth	r1, r1
 800468a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800468e:	454e      	cmp	r6, r9
 8004690:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004694:	f84a 3b04 	str.w	r3, [sl], #4
 8004698:	d8e6      	bhi.n	8004668 <__mdiff+0x84>
 800469a:	1b33      	subs	r3, r6, r4
 800469c:	3b15      	subs	r3, #21
 800469e:	f023 0303 	bic.w	r3, r3, #3
 80046a2:	3415      	adds	r4, #21
 80046a4:	3304      	adds	r3, #4
 80046a6:	42a6      	cmp	r6, r4
 80046a8:	bf38      	it	cc
 80046aa:	2304      	movcc	r3, #4
 80046ac:	441d      	add	r5, r3
 80046ae:	4443      	add	r3, r8
 80046b0:	461e      	mov	r6, r3
 80046b2:	462c      	mov	r4, r5
 80046b4:	4574      	cmp	r4, lr
 80046b6:	d30e      	bcc.n	80046d6 <__mdiff+0xf2>
 80046b8:	f10e 0103 	add.w	r1, lr, #3
 80046bc:	1b49      	subs	r1, r1, r5
 80046be:	f021 0103 	bic.w	r1, r1, #3
 80046c2:	3d03      	subs	r5, #3
 80046c4:	45ae      	cmp	lr, r5
 80046c6:	bf38      	it	cc
 80046c8:	2100      	movcc	r1, #0
 80046ca:	4419      	add	r1, r3
 80046cc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80046d0:	b18b      	cbz	r3, 80046f6 <__mdiff+0x112>
 80046d2:	6117      	str	r7, [r2, #16]
 80046d4:	e7a0      	b.n	8004618 <__mdiff+0x34>
 80046d6:	f854 8b04 	ldr.w	r8, [r4], #4
 80046da:	fa1f f188 	uxth.w	r1, r8
 80046de:	4461      	add	r1, ip
 80046e0:	1408      	asrs	r0, r1, #16
 80046e2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80046e6:	b289      	uxth	r1, r1
 80046e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80046ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80046f0:	f846 1b04 	str.w	r1, [r6], #4
 80046f4:	e7de      	b.n	80046b4 <__mdiff+0xd0>
 80046f6:	3f01      	subs	r7, #1
 80046f8:	e7e8      	b.n	80046cc <__mdiff+0xe8>
 80046fa:	bf00      	nop
 80046fc:	08005b41 	.word	0x08005b41
 8004700:	08005be7 	.word	0x08005be7

08004704 <__ulp>:
 8004704:	4b11      	ldr	r3, [pc, #68]	; (800474c <__ulp+0x48>)
 8004706:	400b      	ands	r3, r1
 8004708:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800470c:	2b00      	cmp	r3, #0
 800470e:	dd02      	ble.n	8004716 <__ulp+0x12>
 8004710:	2000      	movs	r0, #0
 8004712:	4619      	mov	r1, r3
 8004714:	4770      	bx	lr
 8004716:	425b      	negs	r3, r3
 8004718:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800471c:	f04f 0000 	mov.w	r0, #0
 8004720:	f04f 0100 	mov.w	r1, #0
 8004724:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004728:	da04      	bge.n	8004734 <__ulp+0x30>
 800472a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800472e:	fa43 f102 	asr.w	r1, r3, r2
 8004732:	4770      	bx	lr
 8004734:	f1a2 0314 	sub.w	r3, r2, #20
 8004738:	2b1e      	cmp	r3, #30
 800473a:	bfd6      	itet	le
 800473c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8004740:	2301      	movgt	r3, #1
 8004742:	fa22 f303 	lsrle.w	r3, r2, r3
 8004746:	4618      	mov	r0, r3
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	7ff00000 	.word	0x7ff00000

08004750 <__b2d>:
 8004750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004754:	6907      	ldr	r7, [r0, #16]
 8004756:	f100 0914 	add.w	r9, r0, #20
 800475a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800475e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8004762:	f1a7 0804 	sub.w	r8, r7, #4
 8004766:	4630      	mov	r0, r6
 8004768:	f7ff fd52 	bl	8004210 <__hi0bits>
 800476c:	f1c0 0320 	rsb	r3, r0, #32
 8004770:	280a      	cmp	r0, #10
 8004772:	600b      	str	r3, [r1, #0]
 8004774:	491f      	ldr	r1, [pc, #124]	; (80047f4 <__b2d+0xa4>)
 8004776:	dc17      	bgt.n	80047a8 <__b2d+0x58>
 8004778:	45c1      	cmp	r9, r8
 800477a:	bf28      	it	cs
 800477c:	2200      	movcs	r2, #0
 800477e:	f1c0 0c0b 	rsb	ip, r0, #11
 8004782:	fa26 f30c 	lsr.w	r3, r6, ip
 8004786:	bf38      	it	cc
 8004788:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800478c:	ea43 0501 	orr.w	r5, r3, r1
 8004790:	f100 0315 	add.w	r3, r0, #21
 8004794:	fa06 f303 	lsl.w	r3, r6, r3
 8004798:	fa22 f20c 	lsr.w	r2, r2, ip
 800479c:	ea43 0402 	orr.w	r4, r3, r2
 80047a0:	4620      	mov	r0, r4
 80047a2:	4629      	mov	r1, r5
 80047a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047a8:	45c1      	cmp	r9, r8
 80047aa:	bf2e      	itee	cs
 80047ac:	2200      	movcs	r2, #0
 80047ae:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80047b2:	f1a7 0808 	subcc.w	r8, r7, #8
 80047b6:	f1b0 030b 	subs.w	r3, r0, #11
 80047ba:	d016      	beq.n	80047ea <__b2d+0x9a>
 80047bc:	f1c3 0720 	rsb	r7, r3, #32
 80047c0:	fa22 f107 	lsr.w	r1, r2, r7
 80047c4:	45c8      	cmp	r8, r9
 80047c6:	fa06 f603 	lsl.w	r6, r6, r3
 80047ca:	ea46 0601 	orr.w	r6, r6, r1
 80047ce:	bf94      	ite	ls
 80047d0:	2100      	movls	r1, #0
 80047d2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80047d6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80047da:	fa02 f003 	lsl.w	r0, r2, r3
 80047de:	40f9      	lsrs	r1, r7
 80047e0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80047e4:	ea40 0401 	orr.w	r4, r0, r1
 80047e8:	e7da      	b.n	80047a0 <__b2d+0x50>
 80047ea:	4614      	mov	r4, r2
 80047ec:	ea46 0501 	orr.w	r5, r6, r1
 80047f0:	e7d6      	b.n	80047a0 <__b2d+0x50>
 80047f2:	bf00      	nop
 80047f4:	3ff00000 	.word	0x3ff00000

080047f8 <__d2b>:
 80047f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80047fc:	2101      	movs	r1, #1
 80047fe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004802:	4690      	mov	r8, r2
 8004804:	461d      	mov	r5, r3
 8004806:	f7ff fc0d 	bl	8004024 <_Balloc>
 800480a:	4604      	mov	r4, r0
 800480c:	b930      	cbnz	r0, 800481c <__d2b+0x24>
 800480e:	4602      	mov	r2, r0
 8004810:	f240 310a 	movw	r1, #778	; 0x30a
 8004814:	4b24      	ldr	r3, [pc, #144]	; (80048a8 <__d2b+0xb0>)
 8004816:	4825      	ldr	r0, [pc, #148]	; (80048ac <__d2b+0xb4>)
 8004818:	f000 f95a 	bl	8004ad0 <__assert_func>
 800481c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004820:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004824:	bb2d      	cbnz	r5, 8004872 <__d2b+0x7a>
 8004826:	9301      	str	r3, [sp, #4]
 8004828:	f1b8 0300 	subs.w	r3, r8, #0
 800482c:	d026      	beq.n	800487c <__d2b+0x84>
 800482e:	4668      	mov	r0, sp
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	f7ff fd0d 	bl	8004250 <__lo0bits>
 8004836:	9900      	ldr	r1, [sp, #0]
 8004838:	b1f0      	cbz	r0, 8004878 <__d2b+0x80>
 800483a:	9a01      	ldr	r2, [sp, #4]
 800483c:	f1c0 0320 	rsb	r3, r0, #32
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	430b      	orrs	r3, r1
 8004846:	40c2      	lsrs	r2, r0
 8004848:	6163      	str	r3, [r4, #20]
 800484a:	9201      	str	r2, [sp, #4]
 800484c:	9b01      	ldr	r3, [sp, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	bf14      	ite	ne
 8004852:	2102      	movne	r1, #2
 8004854:	2101      	moveq	r1, #1
 8004856:	61a3      	str	r3, [r4, #24]
 8004858:	6121      	str	r1, [r4, #16]
 800485a:	b1c5      	cbz	r5, 800488e <__d2b+0x96>
 800485c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004860:	4405      	add	r5, r0
 8004862:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004866:	603d      	str	r5, [r7, #0]
 8004868:	6030      	str	r0, [r6, #0]
 800486a:	4620      	mov	r0, r4
 800486c:	b002      	add	sp, #8
 800486e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004876:	e7d6      	b.n	8004826 <__d2b+0x2e>
 8004878:	6161      	str	r1, [r4, #20]
 800487a:	e7e7      	b.n	800484c <__d2b+0x54>
 800487c:	a801      	add	r0, sp, #4
 800487e:	f7ff fce7 	bl	8004250 <__lo0bits>
 8004882:	2101      	movs	r1, #1
 8004884:	9b01      	ldr	r3, [sp, #4]
 8004886:	6121      	str	r1, [r4, #16]
 8004888:	6163      	str	r3, [r4, #20]
 800488a:	3020      	adds	r0, #32
 800488c:	e7e5      	b.n	800485a <__d2b+0x62>
 800488e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004892:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004896:	6038      	str	r0, [r7, #0]
 8004898:	6918      	ldr	r0, [r3, #16]
 800489a:	f7ff fcb9 	bl	8004210 <__hi0bits>
 800489e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80048a2:	6031      	str	r1, [r6, #0]
 80048a4:	e7e1      	b.n	800486a <__d2b+0x72>
 80048a6:	bf00      	nop
 80048a8:	08005b41 	.word	0x08005b41
 80048ac:	08005be7 	.word	0x08005be7

080048b0 <__ratio>:
 80048b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b4:	4688      	mov	r8, r1
 80048b6:	4669      	mov	r1, sp
 80048b8:	4681      	mov	r9, r0
 80048ba:	f7ff ff49 	bl	8004750 <__b2d>
 80048be:	460f      	mov	r7, r1
 80048c0:	4604      	mov	r4, r0
 80048c2:	460d      	mov	r5, r1
 80048c4:	4640      	mov	r0, r8
 80048c6:	a901      	add	r1, sp, #4
 80048c8:	f7ff ff42 	bl	8004750 <__b2d>
 80048cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80048d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80048d4:	468b      	mov	fp, r1
 80048d6:	eba3 0c02 	sub.w	ip, r3, r2
 80048da:	e9dd 3200 	ldrd	r3, r2, [sp]
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bfd5      	itete	le
 80048e8:	460a      	movle	r2, r1
 80048ea:	462a      	movgt	r2, r5
 80048ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80048f0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80048f4:	bfd8      	it	le
 80048f6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80048fa:	465b      	mov	r3, fp
 80048fc:	4602      	mov	r2, r0
 80048fe:	4639      	mov	r1, r7
 8004900:	4620      	mov	r0, r4
 8004902:	f7fb ff1d 	bl	8000740 <__aeabi_ddiv>
 8004906:	b003      	add	sp, #12
 8004908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800490c <__copybits>:
 800490c:	3901      	subs	r1, #1
 800490e:	b570      	push	{r4, r5, r6, lr}
 8004910:	1149      	asrs	r1, r1, #5
 8004912:	6914      	ldr	r4, [r2, #16]
 8004914:	3101      	adds	r1, #1
 8004916:	f102 0314 	add.w	r3, r2, #20
 800491a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800491e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004922:	1f05      	subs	r5, r0, #4
 8004924:	42a3      	cmp	r3, r4
 8004926:	d30c      	bcc.n	8004942 <__copybits+0x36>
 8004928:	1aa3      	subs	r3, r4, r2
 800492a:	3b11      	subs	r3, #17
 800492c:	f023 0303 	bic.w	r3, r3, #3
 8004930:	3211      	adds	r2, #17
 8004932:	42a2      	cmp	r2, r4
 8004934:	bf88      	it	hi
 8004936:	2300      	movhi	r3, #0
 8004938:	4418      	add	r0, r3
 800493a:	2300      	movs	r3, #0
 800493c:	4288      	cmp	r0, r1
 800493e:	d305      	bcc.n	800494c <__copybits+0x40>
 8004940:	bd70      	pop	{r4, r5, r6, pc}
 8004942:	f853 6b04 	ldr.w	r6, [r3], #4
 8004946:	f845 6f04 	str.w	r6, [r5, #4]!
 800494a:	e7eb      	b.n	8004924 <__copybits+0x18>
 800494c:	f840 3b04 	str.w	r3, [r0], #4
 8004950:	e7f4      	b.n	800493c <__copybits+0x30>

08004952 <__any_on>:
 8004952:	f100 0214 	add.w	r2, r0, #20
 8004956:	6900      	ldr	r0, [r0, #16]
 8004958:	114b      	asrs	r3, r1, #5
 800495a:	4298      	cmp	r0, r3
 800495c:	b510      	push	{r4, lr}
 800495e:	db11      	blt.n	8004984 <__any_on+0x32>
 8004960:	dd0a      	ble.n	8004978 <__any_on+0x26>
 8004962:	f011 011f 	ands.w	r1, r1, #31
 8004966:	d007      	beq.n	8004978 <__any_on+0x26>
 8004968:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800496c:	fa24 f001 	lsr.w	r0, r4, r1
 8004970:	fa00 f101 	lsl.w	r1, r0, r1
 8004974:	428c      	cmp	r4, r1
 8004976:	d10b      	bne.n	8004990 <__any_on+0x3e>
 8004978:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800497c:	4293      	cmp	r3, r2
 800497e:	d803      	bhi.n	8004988 <__any_on+0x36>
 8004980:	2000      	movs	r0, #0
 8004982:	bd10      	pop	{r4, pc}
 8004984:	4603      	mov	r3, r0
 8004986:	e7f7      	b.n	8004978 <__any_on+0x26>
 8004988:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800498c:	2900      	cmp	r1, #0
 800498e:	d0f5      	beq.n	800497c <__any_on+0x2a>
 8004990:	2001      	movs	r0, #1
 8004992:	e7f6      	b.n	8004982 <__any_on+0x30>

08004994 <_calloc_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	fb02 f501 	mul.w	r5, r2, r1
 800499a:	4629      	mov	r1, r5
 800499c:	f000 f808 	bl	80049b0 <_malloc_r>
 80049a0:	4604      	mov	r4, r0
 80049a2:	b118      	cbz	r0, 80049ac <_calloc_r+0x18>
 80049a4:	462a      	mov	r2, r5
 80049a6:	2100      	movs	r1, #0
 80049a8:	f7fe f8ea 	bl	8002b80 <memset>
 80049ac:	4620      	mov	r0, r4
 80049ae:	bd38      	pop	{r3, r4, r5, pc}

080049b0 <_malloc_r>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	1ccd      	adds	r5, r1, #3
 80049b4:	f025 0503 	bic.w	r5, r5, #3
 80049b8:	3508      	adds	r5, #8
 80049ba:	2d0c      	cmp	r5, #12
 80049bc:	bf38      	it	cc
 80049be:	250c      	movcc	r5, #12
 80049c0:	2d00      	cmp	r5, #0
 80049c2:	4606      	mov	r6, r0
 80049c4:	db01      	blt.n	80049ca <_malloc_r+0x1a>
 80049c6:	42a9      	cmp	r1, r5
 80049c8:	d903      	bls.n	80049d2 <_malloc_r+0x22>
 80049ca:	230c      	movs	r3, #12
 80049cc:	6033      	str	r3, [r6, #0]
 80049ce:	2000      	movs	r0, #0
 80049d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049d2:	f000 f8b5 	bl	8004b40 <__malloc_lock>
 80049d6:	4921      	ldr	r1, [pc, #132]	; (8004a5c <_malloc_r+0xac>)
 80049d8:	680a      	ldr	r2, [r1, #0]
 80049da:	4614      	mov	r4, r2
 80049dc:	b99c      	cbnz	r4, 8004a06 <_malloc_r+0x56>
 80049de:	4f20      	ldr	r7, [pc, #128]	; (8004a60 <_malloc_r+0xb0>)
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	b923      	cbnz	r3, 80049ee <_malloc_r+0x3e>
 80049e4:	4621      	mov	r1, r4
 80049e6:	4630      	mov	r0, r6
 80049e8:	f000 f842 	bl	8004a70 <_sbrk_r>
 80049ec:	6038      	str	r0, [r7, #0]
 80049ee:	4629      	mov	r1, r5
 80049f0:	4630      	mov	r0, r6
 80049f2:	f000 f83d 	bl	8004a70 <_sbrk_r>
 80049f6:	1c43      	adds	r3, r0, #1
 80049f8:	d123      	bne.n	8004a42 <_malloc_r+0x92>
 80049fa:	230c      	movs	r3, #12
 80049fc:	4630      	mov	r0, r6
 80049fe:	6033      	str	r3, [r6, #0]
 8004a00:	f000 f8a4 	bl	8004b4c <__malloc_unlock>
 8004a04:	e7e3      	b.n	80049ce <_malloc_r+0x1e>
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	1b5b      	subs	r3, r3, r5
 8004a0a:	d417      	bmi.n	8004a3c <_malloc_r+0x8c>
 8004a0c:	2b0b      	cmp	r3, #11
 8004a0e:	d903      	bls.n	8004a18 <_malloc_r+0x68>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	441c      	add	r4, r3
 8004a14:	6025      	str	r5, [r4, #0]
 8004a16:	e004      	b.n	8004a22 <_malloc_r+0x72>
 8004a18:	6863      	ldr	r3, [r4, #4]
 8004a1a:	42a2      	cmp	r2, r4
 8004a1c:	bf0c      	ite	eq
 8004a1e:	600b      	streq	r3, [r1, #0]
 8004a20:	6053      	strne	r3, [r2, #4]
 8004a22:	4630      	mov	r0, r6
 8004a24:	f000 f892 	bl	8004b4c <__malloc_unlock>
 8004a28:	f104 000b 	add.w	r0, r4, #11
 8004a2c:	1d23      	adds	r3, r4, #4
 8004a2e:	f020 0007 	bic.w	r0, r0, #7
 8004a32:	1ac2      	subs	r2, r0, r3
 8004a34:	d0cc      	beq.n	80049d0 <_malloc_r+0x20>
 8004a36:	1a1b      	subs	r3, r3, r0
 8004a38:	50a3      	str	r3, [r4, r2]
 8004a3a:	e7c9      	b.n	80049d0 <_malloc_r+0x20>
 8004a3c:	4622      	mov	r2, r4
 8004a3e:	6864      	ldr	r4, [r4, #4]
 8004a40:	e7cc      	b.n	80049dc <_malloc_r+0x2c>
 8004a42:	1cc4      	adds	r4, r0, #3
 8004a44:	f024 0403 	bic.w	r4, r4, #3
 8004a48:	42a0      	cmp	r0, r4
 8004a4a:	d0e3      	beq.n	8004a14 <_malloc_r+0x64>
 8004a4c:	1a21      	subs	r1, r4, r0
 8004a4e:	4630      	mov	r0, r6
 8004a50:	f000 f80e 	bl	8004a70 <_sbrk_r>
 8004a54:	3001      	adds	r0, #1
 8004a56:	d1dd      	bne.n	8004a14 <_malloc_r+0x64>
 8004a58:	e7cf      	b.n	80049fa <_malloc_r+0x4a>
 8004a5a:	bf00      	nop
 8004a5c:	20000608 	.word	0x20000608
 8004a60:	2000060c 	.word	0x2000060c

08004a64 <nan>:
 8004a64:	2000      	movs	r0, #0
 8004a66:	4901      	ldr	r1, [pc, #4]	; (8004a6c <nan+0x8>)
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	7ff80000 	.word	0x7ff80000

08004a70 <_sbrk_r>:
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	2300      	movs	r3, #0
 8004a74:	4d05      	ldr	r5, [pc, #20]	; (8004a8c <_sbrk_r+0x1c>)
 8004a76:	4604      	mov	r4, r0
 8004a78:	4608      	mov	r0, r1
 8004a7a:	602b      	str	r3, [r5, #0]
 8004a7c:	f7fc fc96 	bl	80013ac <_sbrk>
 8004a80:	1c43      	adds	r3, r0, #1
 8004a82:	d102      	bne.n	8004a8a <_sbrk_r+0x1a>
 8004a84:	682b      	ldr	r3, [r5, #0]
 8004a86:	b103      	cbz	r3, 8004a8a <_sbrk_r+0x1a>
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	20000698 	.word	0x20000698

08004a90 <strncmp>:
 8004a90:	b510      	push	{r4, lr}
 8004a92:	b16a      	cbz	r2, 8004ab0 <strncmp+0x20>
 8004a94:	3901      	subs	r1, #1
 8004a96:	1884      	adds	r4, r0, r2
 8004a98:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004a9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d103      	bne.n	8004aac <strncmp+0x1c>
 8004aa4:	42a0      	cmp	r0, r4
 8004aa6:	d001      	beq.n	8004aac <strncmp+0x1c>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f5      	bne.n	8004a98 <strncmp+0x8>
 8004aac:	1a98      	subs	r0, r3, r2
 8004aae:	bd10      	pop	{r4, pc}
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	e7fc      	b.n	8004aae <strncmp+0x1e>

08004ab4 <__ascii_wctomb>:
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4608      	mov	r0, r1
 8004ab8:	b141      	cbz	r1, 8004acc <__ascii_wctomb+0x18>
 8004aba:	2aff      	cmp	r2, #255	; 0xff
 8004abc:	d904      	bls.n	8004ac8 <__ascii_wctomb+0x14>
 8004abe:	228a      	movs	r2, #138	; 0x8a
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	4770      	bx	lr
 8004ac8:	2001      	movs	r0, #1
 8004aca:	700a      	strb	r2, [r1, #0]
 8004acc:	4770      	bx	lr
	...

08004ad0 <__assert_func>:
 8004ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ad2:	4614      	mov	r4, r2
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <__assert_func+0x2c>)
 8004ad8:	4605      	mov	r5, r0
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68d8      	ldr	r0, [r3, #12]
 8004ade:	b14c      	cbz	r4, 8004af4 <__assert_func+0x24>
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <__assert_func+0x30>)
 8004ae2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004ae6:	9100      	str	r1, [sp, #0]
 8004ae8:	462b      	mov	r3, r5
 8004aea:	4906      	ldr	r1, [pc, #24]	; (8004b04 <__assert_func+0x34>)
 8004aec:	f000 f80e 	bl	8004b0c <fiprintf>
 8004af0:	f000 fc2c 	bl	800534c <abort>
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <__assert_func+0x38>)
 8004af6:	461c      	mov	r4, r3
 8004af8:	e7f3      	b.n	8004ae2 <__assert_func+0x12>
 8004afa:	bf00      	nop
 8004afc:	20000014 	.word	0x20000014
 8004b00:	08005d44 	.word	0x08005d44
 8004b04:	08005d51 	.word	0x08005d51
 8004b08:	08005d7f 	.word	0x08005d7f

08004b0c <fiprintf>:
 8004b0c:	b40e      	push	{r1, r2, r3}
 8004b0e:	b503      	push	{r0, r1, lr}
 8004b10:	4601      	mov	r1, r0
 8004b12:	ab03      	add	r3, sp, #12
 8004b14:	4805      	ldr	r0, [pc, #20]	; (8004b2c <fiprintf+0x20>)
 8004b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b1a:	6800      	ldr	r0, [r0, #0]
 8004b1c:	9301      	str	r3, [sp, #4]
 8004b1e:	f000 f88f 	bl	8004c40 <_vfiprintf_r>
 8004b22:	b002      	add	sp, #8
 8004b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b28:	b003      	add	sp, #12
 8004b2a:	4770      	bx	lr
 8004b2c:	20000014 	.word	0x20000014

08004b30 <malloc>:
 8004b30:	4b02      	ldr	r3, [pc, #8]	; (8004b3c <malloc+0xc>)
 8004b32:	4601      	mov	r1, r0
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	f7ff bf3b 	b.w	80049b0 <_malloc_r>
 8004b3a:	bf00      	nop
 8004b3c:	20000014 	.word	0x20000014

08004b40 <__malloc_lock>:
 8004b40:	4801      	ldr	r0, [pc, #4]	; (8004b48 <__malloc_lock+0x8>)
 8004b42:	f000 bdc3 	b.w	80056cc <__retarget_lock_acquire_recursive>
 8004b46:	bf00      	nop
 8004b48:	200006a0 	.word	0x200006a0

08004b4c <__malloc_unlock>:
 8004b4c:	4801      	ldr	r0, [pc, #4]	; (8004b54 <__malloc_unlock+0x8>)
 8004b4e:	f000 bdbe 	b.w	80056ce <__retarget_lock_release_recursive>
 8004b52:	bf00      	nop
 8004b54:	200006a0 	.word	0x200006a0

08004b58 <_free_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4605      	mov	r5, r0
 8004b5c:	2900      	cmp	r1, #0
 8004b5e:	d043      	beq.n	8004be8 <_free_r+0x90>
 8004b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b64:	1f0c      	subs	r4, r1, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bfb8      	it	lt
 8004b6a:	18e4      	addlt	r4, r4, r3
 8004b6c:	f7ff ffe8 	bl	8004b40 <__malloc_lock>
 8004b70:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <_free_r+0x94>)
 8004b72:	6813      	ldr	r3, [r2, #0]
 8004b74:	4610      	mov	r0, r2
 8004b76:	b933      	cbnz	r3, 8004b86 <_free_r+0x2e>
 8004b78:	6063      	str	r3, [r4, #4]
 8004b7a:	6014      	str	r4, [r2, #0]
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b82:	f7ff bfe3 	b.w	8004b4c <__malloc_unlock>
 8004b86:	42a3      	cmp	r3, r4
 8004b88:	d90a      	bls.n	8004ba0 <_free_r+0x48>
 8004b8a:	6821      	ldr	r1, [r4, #0]
 8004b8c:	1862      	adds	r2, r4, r1
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	bf01      	itttt	eq
 8004b92:	681a      	ldreq	r2, [r3, #0]
 8004b94:	685b      	ldreq	r3, [r3, #4]
 8004b96:	1852      	addeq	r2, r2, r1
 8004b98:	6022      	streq	r2, [r4, #0]
 8004b9a:	6063      	str	r3, [r4, #4]
 8004b9c:	6004      	str	r4, [r0, #0]
 8004b9e:	e7ed      	b.n	8004b7c <_free_r+0x24>
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	b10b      	cbz	r3, 8004baa <_free_r+0x52>
 8004ba6:	42a3      	cmp	r3, r4
 8004ba8:	d9fa      	bls.n	8004ba0 <_free_r+0x48>
 8004baa:	6811      	ldr	r1, [r2, #0]
 8004bac:	1850      	adds	r0, r2, r1
 8004bae:	42a0      	cmp	r0, r4
 8004bb0:	d10b      	bne.n	8004bca <_free_r+0x72>
 8004bb2:	6820      	ldr	r0, [r4, #0]
 8004bb4:	4401      	add	r1, r0
 8004bb6:	1850      	adds	r0, r2, r1
 8004bb8:	4283      	cmp	r3, r0
 8004bba:	6011      	str	r1, [r2, #0]
 8004bbc:	d1de      	bne.n	8004b7c <_free_r+0x24>
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4401      	add	r1, r0
 8004bc4:	6011      	str	r1, [r2, #0]
 8004bc6:	6053      	str	r3, [r2, #4]
 8004bc8:	e7d8      	b.n	8004b7c <_free_r+0x24>
 8004bca:	d902      	bls.n	8004bd2 <_free_r+0x7a>
 8004bcc:	230c      	movs	r3, #12
 8004bce:	602b      	str	r3, [r5, #0]
 8004bd0:	e7d4      	b.n	8004b7c <_free_r+0x24>
 8004bd2:	6820      	ldr	r0, [r4, #0]
 8004bd4:	1821      	adds	r1, r4, r0
 8004bd6:	428b      	cmp	r3, r1
 8004bd8:	bf01      	itttt	eq
 8004bda:	6819      	ldreq	r1, [r3, #0]
 8004bdc:	685b      	ldreq	r3, [r3, #4]
 8004bde:	1809      	addeq	r1, r1, r0
 8004be0:	6021      	streq	r1, [r4, #0]
 8004be2:	6063      	str	r3, [r4, #4]
 8004be4:	6054      	str	r4, [r2, #4]
 8004be6:	e7c9      	b.n	8004b7c <_free_r+0x24>
 8004be8:	bd38      	pop	{r3, r4, r5, pc}
 8004bea:	bf00      	nop
 8004bec:	20000608 	.word	0x20000608

08004bf0 <__sfputc_r>:
 8004bf0:	6893      	ldr	r3, [r2, #8]
 8004bf2:	b410      	push	{r4}
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	6093      	str	r3, [r2, #8]
 8004bfa:	da07      	bge.n	8004c0c <__sfputc_r+0x1c>
 8004bfc:	6994      	ldr	r4, [r2, #24]
 8004bfe:	42a3      	cmp	r3, r4
 8004c00:	db01      	blt.n	8004c06 <__sfputc_r+0x16>
 8004c02:	290a      	cmp	r1, #10
 8004c04:	d102      	bne.n	8004c0c <__sfputc_r+0x1c>
 8004c06:	bc10      	pop	{r4}
 8004c08:	f000 bae0 	b.w	80051cc <__swbuf_r>
 8004c0c:	6813      	ldr	r3, [r2, #0]
 8004c0e:	1c58      	adds	r0, r3, #1
 8004c10:	6010      	str	r0, [r2, #0]
 8004c12:	7019      	strb	r1, [r3, #0]
 8004c14:	4608      	mov	r0, r1
 8004c16:	bc10      	pop	{r4}
 8004c18:	4770      	bx	lr

08004c1a <__sfputs_r>:
 8004c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1c:	4606      	mov	r6, r0
 8004c1e:	460f      	mov	r7, r1
 8004c20:	4614      	mov	r4, r2
 8004c22:	18d5      	adds	r5, r2, r3
 8004c24:	42ac      	cmp	r4, r5
 8004c26:	d101      	bne.n	8004c2c <__sfputs_r+0x12>
 8004c28:	2000      	movs	r0, #0
 8004c2a:	e007      	b.n	8004c3c <__sfputs_r+0x22>
 8004c2c:	463a      	mov	r2, r7
 8004c2e:	4630      	mov	r0, r6
 8004c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c34:	f7ff ffdc 	bl	8004bf0 <__sfputc_r>
 8004c38:	1c43      	adds	r3, r0, #1
 8004c3a:	d1f3      	bne.n	8004c24 <__sfputs_r+0xa>
 8004c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c40 <_vfiprintf_r>:
 8004c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c44:	460d      	mov	r5, r1
 8004c46:	4614      	mov	r4, r2
 8004c48:	4698      	mov	r8, r3
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	b09d      	sub	sp, #116	; 0x74
 8004c4e:	b118      	cbz	r0, 8004c58 <_vfiprintf_r+0x18>
 8004c50:	6983      	ldr	r3, [r0, #24]
 8004c52:	b90b      	cbnz	r3, 8004c58 <_vfiprintf_r+0x18>
 8004c54:	f000 fc9c 	bl	8005590 <__sinit>
 8004c58:	4b89      	ldr	r3, [pc, #548]	; (8004e80 <_vfiprintf_r+0x240>)
 8004c5a:	429d      	cmp	r5, r3
 8004c5c:	d11b      	bne.n	8004c96 <_vfiprintf_r+0x56>
 8004c5e:	6875      	ldr	r5, [r6, #4]
 8004c60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c62:	07d9      	lsls	r1, r3, #31
 8004c64:	d405      	bmi.n	8004c72 <_vfiprintf_r+0x32>
 8004c66:	89ab      	ldrh	r3, [r5, #12]
 8004c68:	059a      	lsls	r2, r3, #22
 8004c6a:	d402      	bmi.n	8004c72 <_vfiprintf_r+0x32>
 8004c6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c6e:	f000 fd2d 	bl	80056cc <__retarget_lock_acquire_recursive>
 8004c72:	89ab      	ldrh	r3, [r5, #12]
 8004c74:	071b      	lsls	r3, r3, #28
 8004c76:	d501      	bpl.n	8004c7c <_vfiprintf_r+0x3c>
 8004c78:	692b      	ldr	r3, [r5, #16]
 8004c7a:	b9eb      	cbnz	r3, 8004cb8 <_vfiprintf_r+0x78>
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	4630      	mov	r0, r6
 8004c80:	f000 faf6 	bl	8005270 <__swsetup_r>
 8004c84:	b1c0      	cbz	r0, 8004cb8 <_vfiprintf_r+0x78>
 8004c86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c88:	07dc      	lsls	r4, r3, #31
 8004c8a:	d50e      	bpl.n	8004caa <_vfiprintf_r+0x6a>
 8004c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c90:	b01d      	add	sp, #116	; 0x74
 8004c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c96:	4b7b      	ldr	r3, [pc, #492]	; (8004e84 <_vfiprintf_r+0x244>)
 8004c98:	429d      	cmp	r5, r3
 8004c9a:	d101      	bne.n	8004ca0 <_vfiprintf_r+0x60>
 8004c9c:	68b5      	ldr	r5, [r6, #8]
 8004c9e:	e7df      	b.n	8004c60 <_vfiprintf_r+0x20>
 8004ca0:	4b79      	ldr	r3, [pc, #484]	; (8004e88 <_vfiprintf_r+0x248>)
 8004ca2:	429d      	cmp	r5, r3
 8004ca4:	bf08      	it	eq
 8004ca6:	68f5      	ldreq	r5, [r6, #12]
 8004ca8:	e7da      	b.n	8004c60 <_vfiprintf_r+0x20>
 8004caa:	89ab      	ldrh	r3, [r5, #12]
 8004cac:	0598      	lsls	r0, r3, #22
 8004cae:	d4ed      	bmi.n	8004c8c <_vfiprintf_r+0x4c>
 8004cb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cb2:	f000 fd0c 	bl	80056ce <__retarget_lock_release_recursive>
 8004cb6:	e7e9      	b.n	8004c8c <_vfiprintf_r+0x4c>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9309      	str	r3, [sp, #36]	; 0x24
 8004cbc:	2320      	movs	r3, #32
 8004cbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004cc2:	2330      	movs	r3, #48	; 0x30
 8004cc4:	f04f 0901 	mov.w	r9, #1
 8004cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ccc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004e8c <_vfiprintf_r+0x24c>
 8004cd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cd4:	4623      	mov	r3, r4
 8004cd6:	469a      	mov	sl, r3
 8004cd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cdc:	b10a      	cbz	r2, 8004ce2 <_vfiprintf_r+0xa2>
 8004cde:	2a25      	cmp	r2, #37	; 0x25
 8004ce0:	d1f9      	bne.n	8004cd6 <_vfiprintf_r+0x96>
 8004ce2:	ebba 0b04 	subs.w	fp, sl, r4
 8004ce6:	d00b      	beq.n	8004d00 <_vfiprintf_r+0xc0>
 8004ce8:	465b      	mov	r3, fp
 8004cea:	4622      	mov	r2, r4
 8004cec:	4629      	mov	r1, r5
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f7ff ff93 	bl	8004c1a <__sfputs_r>
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	f000 80aa 	beq.w	8004e4e <_vfiprintf_r+0x20e>
 8004cfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cfc:	445a      	add	r2, fp
 8004cfe:	9209      	str	r2, [sp, #36]	; 0x24
 8004d00:	f89a 3000 	ldrb.w	r3, [sl]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 80a2 	beq.w	8004e4e <_vfiprintf_r+0x20e>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d14:	f10a 0a01 	add.w	sl, sl, #1
 8004d18:	9304      	str	r3, [sp, #16]
 8004d1a:	9307      	str	r3, [sp, #28]
 8004d1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d20:	931a      	str	r3, [sp, #104]	; 0x68
 8004d22:	4654      	mov	r4, sl
 8004d24:	2205      	movs	r2, #5
 8004d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d2a:	4858      	ldr	r0, [pc, #352]	; (8004e8c <_vfiprintf_r+0x24c>)
 8004d2c:	f000 fd34 	bl	8005798 <memchr>
 8004d30:	9a04      	ldr	r2, [sp, #16]
 8004d32:	b9d8      	cbnz	r0, 8004d6c <_vfiprintf_r+0x12c>
 8004d34:	06d1      	lsls	r1, r2, #27
 8004d36:	bf44      	itt	mi
 8004d38:	2320      	movmi	r3, #32
 8004d3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d3e:	0713      	lsls	r3, r2, #28
 8004d40:	bf44      	itt	mi
 8004d42:	232b      	movmi	r3, #43	; 0x2b
 8004d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d48:	f89a 3000 	ldrb.w	r3, [sl]
 8004d4c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d4e:	d015      	beq.n	8004d7c <_vfiprintf_r+0x13c>
 8004d50:	4654      	mov	r4, sl
 8004d52:	2000      	movs	r0, #0
 8004d54:	f04f 0c0a 	mov.w	ip, #10
 8004d58:	9a07      	ldr	r2, [sp, #28]
 8004d5a:	4621      	mov	r1, r4
 8004d5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d60:	3b30      	subs	r3, #48	; 0x30
 8004d62:	2b09      	cmp	r3, #9
 8004d64:	d94e      	bls.n	8004e04 <_vfiprintf_r+0x1c4>
 8004d66:	b1b0      	cbz	r0, 8004d96 <_vfiprintf_r+0x156>
 8004d68:	9207      	str	r2, [sp, #28]
 8004d6a:	e014      	b.n	8004d96 <_vfiprintf_r+0x156>
 8004d6c:	eba0 0308 	sub.w	r3, r0, r8
 8004d70:	fa09 f303 	lsl.w	r3, r9, r3
 8004d74:	4313      	orrs	r3, r2
 8004d76:	46a2      	mov	sl, r4
 8004d78:	9304      	str	r3, [sp, #16]
 8004d7a:	e7d2      	b.n	8004d22 <_vfiprintf_r+0xe2>
 8004d7c:	9b03      	ldr	r3, [sp, #12]
 8004d7e:	1d19      	adds	r1, r3, #4
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	9103      	str	r1, [sp, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bfbb      	ittet	lt
 8004d88:	425b      	neglt	r3, r3
 8004d8a:	f042 0202 	orrlt.w	r2, r2, #2
 8004d8e:	9307      	strge	r3, [sp, #28]
 8004d90:	9307      	strlt	r3, [sp, #28]
 8004d92:	bfb8      	it	lt
 8004d94:	9204      	strlt	r2, [sp, #16]
 8004d96:	7823      	ldrb	r3, [r4, #0]
 8004d98:	2b2e      	cmp	r3, #46	; 0x2e
 8004d9a:	d10c      	bne.n	8004db6 <_vfiprintf_r+0x176>
 8004d9c:	7863      	ldrb	r3, [r4, #1]
 8004d9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004da0:	d135      	bne.n	8004e0e <_vfiprintf_r+0x1ce>
 8004da2:	9b03      	ldr	r3, [sp, #12]
 8004da4:	3402      	adds	r4, #2
 8004da6:	1d1a      	adds	r2, r3, #4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	9203      	str	r2, [sp, #12]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	bfb8      	it	lt
 8004db0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004db4:	9305      	str	r3, [sp, #20]
 8004db6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004e9c <_vfiprintf_r+0x25c>
 8004dba:	2203      	movs	r2, #3
 8004dbc:	4650      	mov	r0, sl
 8004dbe:	7821      	ldrb	r1, [r4, #0]
 8004dc0:	f000 fcea 	bl	8005798 <memchr>
 8004dc4:	b140      	cbz	r0, 8004dd8 <_vfiprintf_r+0x198>
 8004dc6:	2340      	movs	r3, #64	; 0x40
 8004dc8:	eba0 000a 	sub.w	r0, r0, sl
 8004dcc:	fa03 f000 	lsl.w	r0, r3, r0
 8004dd0:	9b04      	ldr	r3, [sp, #16]
 8004dd2:	3401      	adds	r4, #1
 8004dd4:	4303      	orrs	r3, r0
 8004dd6:	9304      	str	r3, [sp, #16]
 8004dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ddc:	2206      	movs	r2, #6
 8004dde:	482c      	ldr	r0, [pc, #176]	; (8004e90 <_vfiprintf_r+0x250>)
 8004de0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004de4:	f000 fcd8 	bl	8005798 <memchr>
 8004de8:	2800      	cmp	r0, #0
 8004dea:	d03f      	beq.n	8004e6c <_vfiprintf_r+0x22c>
 8004dec:	4b29      	ldr	r3, [pc, #164]	; (8004e94 <_vfiprintf_r+0x254>)
 8004dee:	bb1b      	cbnz	r3, 8004e38 <_vfiprintf_r+0x1f8>
 8004df0:	9b03      	ldr	r3, [sp, #12]
 8004df2:	3307      	adds	r3, #7
 8004df4:	f023 0307 	bic.w	r3, r3, #7
 8004df8:	3308      	adds	r3, #8
 8004dfa:	9303      	str	r3, [sp, #12]
 8004dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dfe:	443b      	add	r3, r7
 8004e00:	9309      	str	r3, [sp, #36]	; 0x24
 8004e02:	e767      	b.n	8004cd4 <_vfiprintf_r+0x94>
 8004e04:	460c      	mov	r4, r1
 8004e06:	2001      	movs	r0, #1
 8004e08:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e0c:	e7a5      	b.n	8004d5a <_vfiprintf_r+0x11a>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f04f 0c0a 	mov.w	ip, #10
 8004e14:	4619      	mov	r1, r3
 8004e16:	3401      	adds	r4, #1
 8004e18:	9305      	str	r3, [sp, #20]
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e20:	3a30      	subs	r2, #48	; 0x30
 8004e22:	2a09      	cmp	r2, #9
 8004e24:	d903      	bls.n	8004e2e <_vfiprintf_r+0x1ee>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0c5      	beq.n	8004db6 <_vfiprintf_r+0x176>
 8004e2a:	9105      	str	r1, [sp, #20]
 8004e2c:	e7c3      	b.n	8004db6 <_vfiprintf_r+0x176>
 8004e2e:	4604      	mov	r4, r0
 8004e30:	2301      	movs	r3, #1
 8004e32:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e36:	e7f0      	b.n	8004e1a <_vfiprintf_r+0x1da>
 8004e38:	ab03      	add	r3, sp, #12
 8004e3a:	9300      	str	r3, [sp, #0]
 8004e3c:	462a      	mov	r2, r5
 8004e3e:	4630      	mov	r0, r6
 8004e40:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <_vfiprintf_r+0x258>)
 8004e42:	a904      	add	r1, sp, #16
 8004e44:	f3af 8000 	nop.w
 8004e48:	4607      	mov	r7, r0
 8004e4a:	1c78      	adds	r0, r7, #1
 8004e4c:	d1d6      	bne.n	8004dfc <_vfiprintf_r+0x1bc>
 8004e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e50:	07d9      	lsls	r1, r3, #31
 8004e52:	d405      	bmi.n	8004e60 <_vfiprintf_r+0x220>
 8004e54:	89ab      	ldrh	r3, [r5, #12]
 8004e56:	059a      	lsls	r2, r3, #22
 8004e58:	d402      	bmi.n	8004e60 <_vfiprintf_r+0x220>
 8004e5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e5c:	f000 fc37 	bl	80056ce <__retarget_lock_release_recursive>
 8004e60:	89ab      	ldrh	r3, [r5, #12]
 8004e62:	065b      	lsls	r3, r3, #25
 8004e64:	f53f af12 	bmi.w	8004c8c <_vfiprintf_r+0x4c>
 8004e68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e6a:	e711      	b.n	8004c90 <_vfiprintf_r+0x50>
 8004e6c:	ab03      	add	r3, sp, #12
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	462a      	mov	r2, r5
 8004e72:	4630      	mov	r0, r6
 8004e74:	4b08      	ldr	r3, [pc, #32]	; (8004e98 <_vfiprintf_r+0x258>)
 8004e76:	a904      	add	r1, sp, #16
 8004e78:	f000 f882 	bl	8004f80 <_printf_i>
 8004e7c:	e7e4      	b.n	8004e48 <_vfiprintf_r+0x208>
 8004e7e:	bf00      	nop
 8004e80:	08005dd4 	.word	0x08005dd4
 8004e84:	08005df4 	.word	0x08005df4
 8004e88:	08005db4 	.word	0x08005db4
 8004e8c:	08005d80 	.word	0x08005d80
 8004e90:	08005d8a 	.word	0x08005d8a
 8004e94:	00000000 	.word	0x00000000
 8004e98:	08004c1b 	.word	0x08004c1b
 8004e9c:	08005d86 	.word	0x08005d86

08004ea0 <_printf_common>:
 8004ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	4699      	mov	r9, r3
 8004ea8:	688a      	ldr	r2, [r1, #8]
 8004eaa:	690b      	ldr	r3, [r1, #16]
 8004eac:	4607      	mov	r7, r0
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	bfb8      	it	lt
 8004eb2:	4613      	movlt	r3, r2
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004eba:	460c      	mov	r4, r1
 8004ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ec0:	b10a      	cbz	r2, 8004ec6 <_printf_common+0x26>
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	6033      	str	r3, [r6, #0]
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	0699      	lsls	r1, r3, #26
 8004eca:	bf42      	ittt	mi
 8004ecc:	6833      	ldrmi	r3, [r6, #0]
 8004ece:	3302      	addmi	r3, #2
 8004ed0:	6033      	strmi	r3, [r6, #0]
 8004ed2:	6825      	ldr	r5, [r4, #0]
 8004ed4:	f015 0506 	ands.w	r5, r5, #6
 8004ed8:	d106      	bne.n	8004ee8 <_printf_common+0x48>
 8004eda:	f104 0a19 	add.w	sl, r4, #25
 8004ede:	68e3      	ldr	r3, [r4, #12]
 8004ee0:	6832      	ldr	r2, [r6, #0]
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	42ab      	cmp	r3, r5
 8004ee6:	dc28      	bgt.n	8004f3a <_printf_common+0x9a>
 8004ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eec:	1e13      	subs	r3, r2, #0
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	bf18      	it	ne
 8004ef2:	2301      	movne	r3, #1
 8004ef4:	0692      	lsls	r2, r2, #26
 8004ef6:	d42d      	bmi.n	8004f54 <_printf_common+0xb4>
 8004ef8:	4649      	mov	r1, r9
 8004efa:	4638      	mov	r0, r7
 8004efc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f00:	47c0      	blx	r8
 8004f02:	3001      	adds	r0, #1
 8004f04:	d020      	beq.n	8004f48 <_printf_common+0xa8>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	68e5      	ldr	r5, [r4, #12]
 8004f0a:	f003 0306 	and.w	r3, r3, #6
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	bf18      	it	ne
 8004f12:	2500      	movne	r5, #0
 8004f14:	6832      	ldr	r2, [r6, #0]
 8004f16:	f04f 0600 	mov.w	r6, #0
 8004f1a:	68a3      	ldr	r3, [r4, #8]
 8004f1c:	bf08      	it	eq
 8004f1e:	1aad      	subeq	r5, r5, r2
 8004f20:	6922      	ldr	r2, [r4, #16]
 8004f22:	bf08      	it	eq
 8004f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	bfc4      	itt	gt
 8004f2c:	1a9b      	subgt	r3, r3, r2
 8004f2e:	18ed      	addgt	r5, r5, r3
 8004f30:	341a      	adds	r4, #26
 8004f32:	42b5      	cmp	r5, r6
 8004f34:	d11a      	bne.n	8004f6c <_printf_common+0xcc>
 8004f36:	2000      	movs	r0, #0
 8004f38:	e008      	b.n	8004f4c <_printf_common+0xac>
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4652      	mov	r2, sl
 8004f3e:	4649      	mov	r1, r9
 8004f40:	4638      	mov	r0, r7
 8004f42:	47c0      	blx	r8
 8004f44:	3001      	adds	r0, #1
 8004f46:	d103      	bne.n	8004f50 <_printf_common+0xb0>
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f50:	3501      	adds	r5, #1
 8004f52:	e7c4      	b.n	8004ede <_printf_common+0x3e>
 8004f54:	2030      	movs	r0, #48	; 0x30
 8004f56:	18e1      	adds	r1, r4, r3
 8004f58:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f62:	4422      	add	r2, r4
 8004f64:	3302      	adds	r3, #2
 8004f66:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f6a:	e7c5      	b.n	8004ef8 <_printf_common+0x58>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4622      	mov	r2, r4
 8004f70:	4649      	mov	r1, r9
 8004f72:	4638      	mov	r0, r7
 8004f74:	47c0      	blx	r8
 8004f76:	3001      	adds	r0, #1
 8004f78:	d0e6      	beq.n	8004f48 <_printf_common+0xa8>
 8004f7a:	3601      	adds	r6, #1
 8004f7c:	e7d9      	b.n	8004f32 <_printf_common+0x92>
	...

08004f80 <_printf_i>:
 8004f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	460c      	mov	r4, r1
 8004f86:	7e27      	ldrb	r7, [r4, #24]
 8004f88:	4691      	mov	r9, r2
 8004f8a:	2f78      	cmp	r7, #120	; 0x78
 8004f8c:	4680      	mov	r8, r0
 8004f8e:	469a      	mov	sl, r3
 8004f90:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f92:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f96:	d807      	bhi.n	8004fa8 <_printf_i+0x28>
 8004f98:	2f62      	cmp	r7, #98	; 0x62
 8004f9a:	d80a      	bhi.n	8004fb2 <_printf_i+0x32>
 8004f9c:	2f00      	cmp	r7, #0
 8004f9e:	f000 80d9 	beq.w	8005154 <_printf_i+0x1d4>
 8004fa2:	2f58      	cmp	r7, #88	; 0x58
 8004fa4:	f000 80a4 	beq.w	80050f0 <_printf_i+0x170>
 8004fa8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fb0:	e03a      	b.n	8005028 <_printf_i+0xa8>
 8004fb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fb6:	2b15      	cmp	r3, #21
 8004fb8:	d8f6      	bhi.n	8004fa8 <_printf_i+0x28>
 8004fba:	a001      	add	r0, pc, #4	; (adr r0, 8004fc0 <_printf_i+0x40>)
 8004fbc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004fc0:	08005019 	.word	0x08005019
 8004fc4:	0800502d 	.word	0x0800502d
 8004fc8:	08004fa9 	.word	0x08004fa9
 8004fcc:	08004fa9 	.word	0x08004fa9
 8004fd0:	08004fa9 	.word	0x08004fa9
 8004fd4:	08004fa9 	.word	0x08004fa9
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	08004fa9 	.word	0x08004fa9
 8004fe0:	08004fa9 	.word	0x08004fa9
 8004fe4:	08004fa9 	.word	0x08004fa9
 8004fe8:	08004fa9 	.word	0x08004fa9
 8004fec:	0800513b 	.word	0x0800513b
 8004ff0:	0800505d 	.word	0x0800505d
 8004ff4:	0800511d 	.word	0x0800511d
 8004ff8:	08004fa9 	.word	0x08004fa9
 8004ffc:	08004fa9 	.word	0x08004fa9
 8005000:	0800515d 	.word	0x0800515d
 8005004:	08004fa9 	.word	0x08004fa9
 8005008:	0800505d 	.word	0x0800505d
 800500c:	08004fa9 	.word	0x08004fa9
 8005010:	08004fa9 	.word	0x08004fa9
 8005014:	08005125 	.word	0x08005125
 8005018:	680b      	ldr	r3, [r1, #0]
 800501a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800501e:	1d1a      	adds	r2, r3, #4
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	600a      	str	r2, [r1, #0]
 8005024:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005028:	2301      	movs	r3, #1
 800502a:	e0a4      	b.n	8005176 <_printf_i+0x1f6>
 800502c:	6825      	ldr	r5, [r4, #0]
 800502e:	6808      	ldr	r0, [r1, #0]
 8005030:	062e      	lsls	r6, r5, #24
 8005032:	f100 0304 	add.w	r3, r0, #4
 8005036:	d50a      	bpl.n	800504e <_printf_i+0xce>
 8005038:	6805      	ldr	r5, [r0, #0]
 800503a:	600b      	str	r3, [r1, #0]
 800503c:	2d00      	cmp	r5, #0
 800503e:	da03      	bge.n	8005048 <_printf_i+0xc8>
 8005040:	232d      	movs	r3, #45	; 0x2d
 8005042:	426d      	negs	r5, r5
 8005044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005048:	230a      	movs	r3, #10
 800504a:	485e      	ldr	r0, [pc, #376]	; (80051c4 <_printf_i+0x244>)
 800504c:	e019      	b.n	8005082 <_printf_i+0x102>
 800504e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005052:	6805      	ldr	r5, [r0, #0]
 8005054:	600b      	str	r3, [r1, #0]
 8005056:	bf18      	it	ne
 8005058:	b22d      	sxthne	r5, r5
 800505a:	e7ef      	b.n	800503c <_printf_i+0xbc>
 800505c:	680b      	ldr	r3, [r1, #0]
 800505e:	6825      	ldr	r5, [r4, #0]
 8005060:	1d18      	adds	r0, r3, #4
 8005062:	6008      	str	r0, [r1, #0]
 8005064:	0628      	lsls	r0, r5, #24
 8005066:	d501      	bpl.n	800506c <_printf_i+0xec>
 8005068:	681d      	ldr	r5, [r3, #0]
 800506a:	e002      	b.n	8005072 <_printf_i+0xf2>
 800506c:	0669      	lsls	r1, r5, #25
 800506e:	d5fb      	bpl.n	8005068 <_printf_i+0xe8>
 8005070:	881d      	ldrh	r5, [r3, #0]
 8005072:	2f6f      	cmp	r7, #111	; 0x6f
 8005074:	bf0c      	ite	eq
 8005076:	2308      	moveq	r3, #8
 8005078:	230a      	movne	r3, #10
 800507a:	4852      	ldr	r0, [pc, #328]	; (80051c4 <_printf_i+0x244>)
 800507c:	2100      	movs	r1, #0
 800507e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005082:	6866      	ldr	r6, [r4, #4]
 8005084:	2e00      	cmp	r6, #0
 8005086:	bfa8      	it	ge
 8005088:	6821      	ldrge	r1, [r4, #0]
 800508a:	60a6      	str	r6, [r4, #8]
 800508c:	bfa4      	itt	ge
 800508e:	f021 0104 	bicge.w	r1, r1, #4
 8005092:	6021      	strge	r1, [r4, #0]
 8005094:	b90d      	cbnz	r5, 800509a <_printf_i+0x11a>
 8005096:	2e00      	cmp	r6, #0
 8005098:	d04d      	beq.n	8005136 <_printf_i+0x1b6>
 800509a:	4616      	mov	r6, r2
 800509c:	fbb5 f1f3 	udiv	r1, r5, r3
 80050a0:	fb03 5711 	mls	r7, r3, r1, r5
 80050a4:	5dc7      	ldrb	r7, [r0, r7]
 80050a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050aa:	462f      	mov	r7, r5
 80050ac:	42bb      	cmp	r3, r7
 80050ae:	460d      	mov	r5, r1
 80050b0:	d9f4      	bls.n	800509c <_printf_i+0x11c>
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d10b      	bne.n	80050ce <_printf_i+0x14e>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	07df      	lsls	r7, r3, #31
 80050ba:	d508      	bpl.n	80050ce <_printf_i+0x14e>
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	6861      	ldr	r1, [r4, #4]
 80050c0:	4299      	cmp	r1, r3
 80050c2:	bfde      	ittt	le
 80050c4:	2330      	movle	r3, #48	; 0x30
 80050c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050ce:	1b92      	subs	r2, r2, r6
 80050d0:	6122      	str	r2, [r4, #16]
 80050d2:	464b      	mov	r3, r9
 80050d4:	4621      	mov	r1, r4
 80050d6:	4640      	mov	r0, r8
 80050d8:	f8cd a000 	str.w	sl, [sp]
 80050dc:	aa03      	add	r2, sp, #12
 80050de:	f7ff fedf 	bl	8004ea0 <_printf_common>
 80050e2:	3001      	adds	r0, #1
 80050e4:	d14c      	bne.n	8005180 <_printf_i+0x200>
 80050e6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ea:	b004      	add	sp, #16
 80050ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f0:	4834      	ldr	r0, [pc, #208]	; (80051c4 <_printf_i+0x244>)
 80050f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050f6:	680e      	ldr	r6, [r1, #0]
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	f856 5b04 	ldr.w	r5, [r6], #4
 80050fe:	061f      	lsls	r7, r3, #24
 8005100:	600e      	str	r6, [r1, #0]
 8005102:	d514      	bpl.n	800512e <_printf_i+0x1ae>
 8005104:	07d9      	lsls	r1, r3, #31
 8005106:	bf44      	itt	mi
 8005108:	f043 0320 	orrmi.w	r3, r3, #32
 800510c:	6023      	strmi	r3, [r4, #0]
 800510e:	b91d      	cbnz	r5, 8005118 <_printf_i+0x198>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	f023 0320 	bic.w	r3, r3, #32
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	2310      	movs	r3, #16
 800511a:	e7af      	b.n	800507c <_printf_i+0xfc>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	f043 0320 	orr.w	r3, r3, #32
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	2378      	movs	r3, #120	; 0x78
 8005126:	4828      	ldr	r0, [pc, #160]	; (80051c8 <_printf_i+0x248>)
 8005128:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800512c:	e7e3      	b.n	80050f6 <_printf_i+0x176>
 800512e:	065e      	lsls	r6, r3, #25
 8005130:	bf48      	it	mi
 8005132:	b2ad      	uxthmi	r5, r5
 8005134:	e7e6      	b.n	8005104 <_printf_i+0x184>
 8005136:	4616      	mov	r6, r2
 8005138:	e7bb      	b.n	80050b2 <_printf_i+0x132>
 800513a:	680b      	ldr	r3, [r1, #0]
 800513c:	6826      	ldr	r6, [r4, #0]
 800513e:	1d1d      	adds	r5, r3, #4
 8005140:	6960      	ldr	r0, [r4, #20]
 8005142:	600d      	str	r5, [r1, #0]
 8005144:	0635      	lsls	r5, r6, #24
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	d501      	bpl.n	800514e <_printf_i+0x1ce>
 800514a:	6018      	str	r0, [r3, #0]
 800514c:	e002      	b.n	8005154 <_printf_i+0x1d4>
 800514e:	0671      	lsls	r1, r6, #25
 8005150:	d5fb      	bpl.n	800514a <_printf_i+0x1ca>
 8005152:	8018      	strh	r0, [r3, #0]
 8005154:	2300      	movs	r3, #0
 8005156:	4616      	mov	r6, r2
 8005158:	6123      	str	r3, [r4, #16]
 800515a:	e7ba      	b.n	80050d2 <_printf_i+0x152>
 800515c:	680b      	ldr	r3, [r1, #0]
 800515e:	1d1a      	adds	r2, r3, #4
 8005160:	600a      	str	r2, [r1, #0]
 8005162:	681e      	ldr	r6, [r3, #0]
 8005164:	2100      	movs	r1, #0
 8005166:	4630      	mov	r0, r6
 8005168:	6862      	ldr	r2, [r4, #4]
 800516a:	f000 fb15 	bl	8005798 <memchr>
 800516e:	b108      	cbz	r0, 8005174 <_printf_i+0x1f4>
 8005170:	1b80      	subs	r0, r0, r6
 8005172:	6060      	str	r0, [r4, #4]
 8005174:	6863      	ldr	r3, [r4, #4]
 8005176:	6123      	str	r3, [r4, #16]
 8005178:	2300      	movs	r3, #0
 800517a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800517e:	e7a8      	b.n	80050d2 <_printf_i+0x152>
 8005180:	4632      	mov	r2, r6
 8005182:	4649      	mov	r1, r9
 8005184:	4640      	mov	r0, r8
 8005186:	6923      	ldr	r3, [r4, #16]
 8005188:	47d0      	blx	sl
 800518a:	3001      	adds	r0, #1
 800518c:	d0ab      	beq.n	80050e6 <_printf_i+0x166>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	079b      	lsls	r3, r3, #30
 8005192:	d413      	bmi.n	80051bc <_printf_i+0x23c>
 8005194:	68e0      	ldr	r0, [r4, #12]
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	4298      	cmp	r0, r3
 800519a:	bfb8      	it	lt
 800519c:	4618      	movlt	r0, r3
 800519e:	e7a4      	b.n	80050ea <_printf_i+0x16a>
 80051a0:	2301      	movs	r3, #1
 80051a2:	4632      	mov	r2, r6
 80051a4:	4649      	mov	r1, r9
 80051a6:	4640      	mov	r0, r8
 80051a8:	47d0      	blx	sl
 80051aa:	3001      	adds	r0, #1
 80051ac:	d09b      	beq.n	80050e6 <_printf_i+0x166>
 80051ae:	3501      	adds	r5, #1
 80051b0:	68e3      	ldr	r3, [r4, #12]
 80051b2:	9903      	ldr	r1, [sp, #12]
 80051b4:	1a5b      	subs	r3, r3, r1
 80051b6:	42ab      	cmp	r3, r5
 80051b8:	dcf2      	bgt.n	80051a0 <_printf_i+0x220>
 80051ba:	e7eb      	b.n	8005194 <_printf_i+0x214>
 80051bc:	2500      	movs	r5, #0
 80051be:	f104 0619 	add.w	r6, r4, #25
 80051c2:	e7f5      	b.n	80051b0 <_printf_i+0x230>
 80051c4:	08005d91 	.word	0x08005d91
 80051c8:	08005da2 	.word	0x08005da2

080051cc <__swbuf_r>:
 80051cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ce:	460e      	mov	r6, r1
 80051d0:	4614      	mov	r4, r2
 80051d2:	4605      	mov	r5, r0
 80051d4:	b118      	cbz	r0, 80051de <__swbuf_r+0x12>
 80051d6:	6983      	ldr	r3, [r0, #24]
 80051d8:	b90b      	cbnz	r3, 80051de <__swbuf_r+0x12>
 80051da:	f000 f9d9 	bl	8005590 <__sinit>
 80051de:	4b21      	ldr	r3, [pc, #132]	; (8005264 <__swbuf_r+0x98>)
 80051e0:	429c      	cmp	r4, r3
 80051e2:	d12b      	bne.n	800523c <__swbuf_r+0x70>
 80051e4:	686c      	ldr	r4, [r5, #4]
 80051e6:	69a3      	ldr	r3, [r4, #24]
 80051e8:	60a3      	str	r3, [r4, #8]
 80051ea:	89a3      	ldrh	r3, [r4, #12]
 80051ec:	071a      	lsls	r2, r3, #28
 80051ee:	d52f      	bpl.n	8005250 <__swbuf_r+0x84>
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	b36b      	cbz	r3, 8005250 <__swbuf_r+0x84>
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	6820      	ldr	r0, [r4, #0]
 80051f8:	b2f6      	uxtb	r6, r6
 80051fa:	1ac0      	subs	r0, r0, r3
 80051fc:	6963      	ldr	r3, [r4, #20]
 80051fe:	4637      	mov	r7, r6
 8005200:	4283      	cmp	r3, r0
 8005202:	dc04      	bgt.n	800520e <__swbuf_r+0x42>
 8005204:	4621      	mov	r1, r4
 8005206:	4628      	mov	r0, r5
 8005208:	f000 f92e 	bl	8005468 <_fflush_r>
 800520c:	bb30      	cbnz	r0, 800525c <__swbuf_r+0x90>
 800520e:	68a3      	ldr	r3, [r4, #8]
 8005210:	3001      	adds	r0, #1
 8005212:	3b01      	subs	r3, #1
 8005214:	60a3      	str	r3, [r4, #8]
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	6022      	str	r2, [r4, #0]
 800521c:	701e      	strb	r6, [r3, #0]
 800521e:	6963      	ldr	r3, [r4, #20]
 8005220:	4283      	cmp	r3, r0
 8005222:	d004      	beq.n	800522e <__swbuf_r+0x62>
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	07db      	lsls	r3, r3, #31
 8005228:	d506      	bpl.n	8005238 <__swbuf_r+0x6c>
 800522a:	2e0a      	cmp	r6, #10
 800522c:	d104      	bne.n	8005238 <__swbuf_r+0x6c>
 800522e:	4621      	mov	r1, r4
 8005230:	4628      	mov	r0, r5
 8005232:	f000 f919 	bl	8005468 <_fflush_r>
 8005236:	b988      	cbnz	r0, 800525c <__swbuf_r+0x90>
 8005238:	4638      	mov	r0, r7
 800523a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800523c:	4b0a      	ldr	r3, [pc, #40]	; (8005268 <__swbuf_r+0x9c>)
 800523e:	429c      	cmp	r4, r3
 8005240:	d101      	bne.n	8005246 <__swbuf_r+0x7a>
 8005242:	68ac      	ldr	r4, [r5, #8]
 8005244:	e7cf      	b.n	80051e6 <__swbuf_r+0x1a>
 8005246:	4b09      	ldr	r3, [pc, #36]	; (800526c <__swbuf_r+0xa0>)
 8005248:	429c      	cmp	r4, r3
 800524a:	bf08      	it	eq
 800524c:	68ec      	ldreq	r4, [r5, #12]
 800524e:	e7ca      	b.n	80051e6 <__swbuf_r+0x1a>
 8005250:	4621      	mov	r1, r4
 8005252:	4628      	mov	r0, r5
 8005254:	f000 f80c 	bl	8005270 <__swsetup_r>
 8005258:	2800      	cmp	r0, #0
 800525a:	d0cb      	beq.n	80051f4 <__swbuf_r+0x28>
 800525c:	f04f 37ff 	mov.w	r7, #4294967295
 8005260:	e7ea      	b.n	8005238 <__swbuf_r+0x6c>
 8005262:	bf00      	nop
 8005264:	08005dd4 	.word	0x08005dd4
 8005268:	08005df4 	.word	0x08005df4
 800526c:	08005db4 	.word	0x08005db4

08005270 <__swsetup_r>:
 8005270:	4b32      	ldr	r3, [pc, #200]	; (800533c <__swsetup_r+0xcc>)
 8005272:	b570      	push	{r4, r5, r6, lr}
 8005274:	681d      	ldr	r5, [r3, #0]
 8005276:	4606      	mov	r6, r0
 8005278:	460c      	mov	r4, r1
 800527a:	b125      	cbz	r5, 8005286 <__swsetup_r+0x16>
 800527c:	69ab      	ldr	r3, [r5, #24]
 800527e:	b913      	cbnz	r3, 8005286 <__swsetup_r+0x16>
 8005280:	4628      	mov	r0, r5
 8005282:	f000 f985 	bl	8005590 <__sinit>
 8005286:	4b2e      	ldr	r3, [pc, #184]	; (8005340 <__swsetup_r+0xd0>)
 8005288:	429c      	cmp	r4, r3
 800528a:	d10f      	bne.n	80052ac <__swsetup_r+0x3c>
 800528c:	686c      	ldr	r4, [r5, #4]
 800528e:	89a3      	ldrh	r3, [r4, #12]
 8005290:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005294:	0719      	lsls	r1, r3, #28
 8005296:	d42c      	bmi.n	80052f2 <__swsetup_r+0x82>
 8005298:	06dd      	lsls	r5, r3, #27
 800529a:	d411      	bmi.n	80052c0 <__swsetup_r+0x50>
 800529c:	2309      	movs	r3, #9
 800529e:	6033      	str	r3, [r6, #0]
 80052a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80052a4:	f04f 30ff 	mov.w	r0, #4294967295
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	e03e      	b.n	800532a <__swsetup_r+0xba>
 80052ac:	4b25      	ldr	r3, [pc, #148]	; (8005344 <__swsetup_r+0xd4>)
 80052ae:	429c      	cmp	r4, r3
 80052b0:	d101      	bne.n	80052b6 <__swsetup_r+0x46>
 80052b2:	68ac      	ldr	r4, [r5, #8]
 80052b4:	e7eb      	b.n	800528e <__swsetup_r+0x1e>
 80052b6:	4b24      	ldr	r3, [pc, #144]	; (8005348 <__swsetup_r+0xd8>)
 80052b8:	429c      	cmp	r4, r3
 80052ba:	bf08      	it	eq
 80052bc:	68ec      	ldreq	r4, [r5, #12]
 80052be:	e7e6      	b.n	800528e <__swsetup_r+0x1e>
 80052c0:	0758      	lsls	r0, r3, #29
 80052c2:	d512      	bpl.n	80052ea <__swsetup_r+0x7a>
 80052c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052c6:	b141      	cbz	r1, 80052da <__swsetup_r+0x6a>
 80052c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052cc:	4299      	cmp	r1, r3
 80052ce:	d002      	beq.n	80052d6 <__swsetup_r+0x66>
 80052d0:	4630      	mov	r0, r6
 80052d2:	f7ff fc41 	bl	8004b58 <_free_r>
 80052d6:	2300      	movs	r3, #0
 80052d8:	6363      	str	r3, [r4, #52]	; 0x34
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	2300      	movs	r3, #0
 80052e4:	6063      	str	r3, [r4, #4]
 80052e6:	6923      	ldr	r3, [r4, #16]
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	f043 0308 	orr.w	r3, r3, #8
 80052f0:	81a3      	strh	r3, [r4, #12]
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	b94b      	cbnz	r3, 800530a <__swsetup_r+0x9a>
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80052fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005300:	d003      	beq.n	800530a <__swsetup_r+0x9a>
 8005302:	4621      	mov	r1, r4
 8005304:	4630      	mov	r0, r6
 8005306:	f000 fa07 	bl	8005718 <__smakebuf_r>
 800530a:	89a0      	ldrh	r0, [r4, #12]
 800530c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005310:	f010 0301 	ands.w	r3, r0, #1
 8005314:	d00a      	beq.n	800532c <__swsetup_r+0xbc>
 8005316:	2300      	movs	r3, #0
 8005318:	60a3      	str	r3, [r4, #8]
 800531a:	6963      	ldr	r3, [r4, #20]
 800531c:	425b      	negs	r3, r3
 800531e:	61a3      	str	r3, [r4, #24]
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	b943      	cbnz	r3, 8005336 <__swsetup_r+0xc6>
 8005324:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005328:	d1ba      	bne.n	80052a0 <__swsetup_r+0x30>
 800532a:	bd70      	pop	{r4, r5, r6, pc}
 800532c:	0781      	lsls	r1, r0, #30
 800532e:	bf58      	it	pl
 8005330:	6963      	ldrpl	r3, [r4, #20]
 8005332:	60a3      	str	r3, [r4, #8]
 8005334:	e7f4      	b.n	8005320 <__swsetup_r+0xb0>
 8005336:	2000      	movs	r0, #0
 8005338:	e7f7      	b.n	800532a <__swsetup_r+0xba>
 800533a:	bf00      	nop
 800533c:	20000014 	.word	0x20000014
 8005340:	08005dd4 	.word	0x08005dd4
 8005344:	08005df4 	.word	0x08005df4
 8005348:	08005db4 	.word	0x08005db4

0800534c <abort>:
 800534c:	2006      	movs	r0, #6
 800534e:	b508      	push	{r3, lr}
 8005350:	f000 fa58 	bl	8005804 <raise>
 8005354:	2001      	movs	r0, #1
 8005356:	f7fb ffb6 	bl	80012c6 <_exit>
	...

0800535c <__sflush_r>:
 800535c:	898a      	ldrh	r2, [r1, #12]
 800535e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005362:	4605      	mov	r5, r0
 8005364:	0710      	lsls	r0, r2, #28
 8005366:	460c      	mov	r4, r1
 8005368:	d458      	bmi.n	800541c <__sflush_r+0xc0>
 800536a:	684b      	ldr	r3, [r1, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	dc05      	bgt.n	800537c <__sflush_r+0x20>
 8005370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	dc02      	bgt.n	800537c <__sflush_r+0x20>
 8005376:	2000      	movs	r0, #0
 8005378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800537c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800537e:	2e00      	cmp	r6, #0
 8005380:	d0f9      	beq.n	8005376 <__sflush_r+0x1a>
 8005382:	2300      	movs	r3, #0
 8005384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005388:	682f      	ldr	r7, [r5, #0]
 800538a:	602b      	str	r3, [r5, #0]
 800538c:	d032      	beq.n	80053f4 <__sflush_r+0x98>
 800538e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005390:	89a3      	ldrh	r3, [r4, #12]
 8005392:	075a      	lsls	r2, r3, #29
 8005394:	d505      	bpl.n	80053a2 <__sflush_r+0x46>
 8005396:	6863      	ldr	r3, [r4, #4]
 8005398:	1ac0      	subs	r0, r0, r3
 800539a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800539c:	b10b      	cbz	r3, 80053a2 <__sflush_r+0x46>
 800539e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80053a0:	1ac0      	subs	r0, r0, r3
 80053a2:	2300      	movs	r3, #0
 80053a4:	4602      	mov	r2, r0
 80053a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80053a8:	4628      	mov	r0, r5
 80053aa:	6a21      	ldr	r1, [r4, #32]
 80053ac:	47b0      	blx	r6
 80053ae:	1c43      	adds	r3, r0, #1
 80053b0:	89a3      	ldrh	r3, [r4, #12]
 80053b2:	d106      	bne.n	80053c2 <__sflush_r+0x66>
 80053b4:	6829      	ldr	r1, [r5, #0]
 80053b6:	291d      	cmp	r1, #29
 80053b8:	d82c      	bhi.n	8005414 <__sflush_r+0xb8>
 80053ba:	4a2a      	ldr	r2, [pc, #168]	; (8005464 <__sflush_r+0x108>)
 80053bc:	40ca      	lsrs	r2, r1
 80053be:	07d6      	lsls	r6, r2, #31
 80053c0:	d528      	bpl.n	8005414 <__sflush_r+0xb8>
 80053c2:	2200      	movs	r2, #0
 80053c4:	6062      	str	r2, [r4, #4]
 80053c6:	6922      	ldr	r2, [r4, #16]
 80053c8:	04d9      	lsls	r1, r3, #19
 80053ca:	6022      	str	r2, [r4, #0]
 80053cc:	d504      	bpl.n	80053d8 <__sflush_r+0x7c>
 80053ce:	1c42      	adds	r2, r0, #1
 80053d0:	d101      	bne.n	80053d6 <__sflush_r+0x7a>
 80053d2:	682b      	ldr	r3, [r5, #0]
 80053d4:	b903      	cbnz	r3, 80053d8 <__sflush_r+0x7c>
 80053d6:	6560      	str	r0, [r4, #84]	; 0x54
 80053d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053da:	602f      	str	r7, [r5, #0]
 80053dc:	2900      	cmp	r1, #0
 80053de:	d0ca      	beq.n	8005376 <__sflush_r+0x1a>
 80053e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053e4:	4299      	cmp	r1, r3
 80053e6:	d002      	beq.n	80053ee <__sflush_r+0x92>
 80053e8:	4628      	mov	r0, r5
 80053ea:	f7ff fbb5 	bl	8004b58 <_free_r>
 80053ee:	2000      	movs	r0, #0
 80053f0:	6360      	str	r0, [r4, #52]	; 0x34
 80053f2:	e7c1      	b.n	8005378 <__sflush_r+0x1c>
 80053f4:	6a21      	ldr	r1, [r4, #32]
 80053f6:	2301      	movs	r3, #1
 80053f8:	4628      	mov	r0, r5
 80053fa:	47b0      	blx	r6
 80053fc:	1c41      	adds	r1, r0, #1
 80053fe:	d1c7      	bne.n	8005390 <__sflush_r+0x34>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0c4      	beq.n	8005390 <__sflush_r+0x34>
 8005406:	2b1d      	cmp	r3, #29
 8005408:	d001      	beq.n	800540e <__sflush_r+0xb2>
 800540a:	2b16      	cmp	r3, #22
 800540c:	d101      	bne.n	8005412 <__sflush_r+0xb6>
 800540e:	602f      	str	r7, [r5, #0]
 8005410:	e7b1      	b.n	8005376 <__sflush_r+0x1a>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005418:	81a3      	strh	r3, [r4, #12]
 800541a:	e7ad      	b.n	8005378 <__sflush_r+0x1c>
 800541c:	690f      	ldr	r7, [r1, #16]
 800541e:	2f00      	cmp	r7, #0
 8005420:	d0a9      	beq.n	8005376 <__sflush_r+0x1a>
 8005422:	0793      	lsls	r3, r2, #30
 8005424:	bf18      	it	ne
 8005426:	2300      	movne	r3, #0
 8005428:	680e      	ldr	r6, [r1, #0]
 800542a:	bf08      	it	eq
 800542c:	694b      	ldreq	r3, [r1, #20]
 800542e:	eba6 0807 	sub.w	r8, r6, r7
 8005432:	600f      	str	r7, [r1, #0]
 8005434:	608b      	str	r3, [r1, #8]
 8005436:	f1b8 0f00 	cmp.w	r8, #0
 800543a:	dd9c      	ble.n	8005376 <__sflush_r+0x1a>
 800543c:	4643      	mov	r3, r8
 800543e:	463a      	mov	r2, r7
 8005440:	4628      	mov	r0, r5
 8005442:	6a21      	ldr	r1, [r4, #32]
 8005444:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005446:	47b0      	blx	r6
 8005448:	2800      	cmp	r0, #0
 800544a:	dc06      	bgt.n	800545a <__sflush_r+0xfe>
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	f04f 30ff 	mov.w	r0, #4294967295
 8005452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005456:	81a3      	strh	r3, [r4, #12]
 8005458:	e78e      	b.n	8005378 <__sflush_r+0x1c>
 800545a:	4407      	add	r7, r0
 800545c:	eba8 0800 	sub.w	r8, r8, r0
 8005460:	e7e9      	b.n	8005436 <__sflush_r+0xda>
 8005462:	bf00      	nop
 8005464:	20400001 	.word	0x20400001

08005468 <_fflush_r>:
 8005468:	b538      	push	{r3, r4, r5, lr}
 800546a:	690b      	ldr	r3, [r1, #16]
 800546c:	4605      	mov	r5, r0
 800546e:	460c      	mov	r4, r1
 8005470:	b913      	cbnz	r3, 8005478 <_fflush_r+0x10>
 8005472:	2500      	movs	r5, #0
 8005474:	4628      	mov	r0, r5
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	b118      	cbz	r0, 8005482 <_fflush_r+0x1a>
 800547a:	6983      	ldr	r3, [r0, #24]
 800547c:	b90b      	cbnz	r3, 8005482 <_fflush_r+0x1a>
 800547e:	f000 f887 	bl	8005590 <__sinit>
 8005482:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <_fflush_r+0x6c>)
 8005484:	429c      	cmp	r4, r3
 8005486:	d11b      	bne.n	80054c0 <_fflush_r+0x58>
 8005488:	686c      	ldr	r4, [r5, #4]
 800548a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0ef      	beq.n	8005472 <_fflush_r+0xa>
 8005492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005494:	07d0      	lsls	r0, r2, #31
 8005496:	d404      	bmi.n	80054a2 <_fflush_r+0x3a>
 8005498:	0599      	lsls	r1, r3, #22
 800549a:	d402      	bmi.n	80054a2 <_fflush_r+0x3a>
 800549c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800549e:	f000 f915 	bl	80056cc <__retarget_lock_acquire_recursive>
 80054a2:	4628      	mov	r0, r5
 80054a4:	4621      	mov	r1, r4
 80054a6:	f7ff ff59 	bl	800535c <__sflush_r>
 80054aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80054ac:	4605      	mov	r5, r0
 80054ae:	07da      	lsls	r2, r3, #31
 80054b0:	d4e0      	bmi.n	8005474 <_fflush_r+0xc>
 80054b2:	89a3      	ldrh	r3, [r4, #12]
 80054b4:	059b      	lsls	r3, r3, #22
 80054b6:	d4dd      	bmi.n	8005474 <_fflush_r+0xc>
 80054b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80054ba:	f000 f908 	bl	80056ce <__retarget_lock_release_recursive>
 80054be:	e7d9      	b.n	8005474 <_fflush_r+0xc>
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <_fflush_r+0x70>)
 80054c2:	429c      	cmp	r4, r3
 80054c4:	d101      	bne.n	80054ca <_fflush_r+0x62>
 80054c6:	68ac      	ldr	r4, [r5, #8]
 80054c8:	e7df      	b.n	800548a <_fflush_r+0x22>
 80054ca:	4b04      	ldr	r3, [pc, #16]	; (80054dc <_fflush_r+0x74>)
 80054cc:	429c      	cmp	r4, r3
 80054ce:	bf08      	it	eq
 80054d0:	68ec      	ldreq	r4, [r5, #12]
 80054d2:	e7da      	b.n	800548a <_fflush_r+0x22>
 80054d4:	08005dd4 	.word	0x08005dd4
 80054d8:	08005df4 	.word	0x08005df4
 80054dc:	08005db4 	.word	0x08005db4

080054e0 <std>:
 80054e0:	2300      	movs	r3, #0
 80054e2:	b510      	push	{r4, lr}
 80054e4:	4604      	mov	r4, r0
 80054e6:	e9c0 3300 	strd	r3, r3, [r0]
 80054ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ee:	6083      	str	r3, [r0, #8]
 80054f0:	8181      	strh	r1, [r0, #12]
 80054f2:	6643      	str	r3, [r0, #100]	; 0x64
 80054f4:	81c2      	strh	r2, [r0, #14]
 80054f6:	6183      	str	r3, [r0, #24]
 80054f8:	4619      	mov	r1, r3
 80054fa:	2208      	movs	r2, #8
 80054fc:	305c      	adds	r0, #92	; 0x5c
 80054fe:	f7fd fb3f 	bl	8002b80 <memset>
 8005502:	4b05      	ldr	r3, [pc, #20]	; (8005518 <std+0x38>)
 8005504:	6224      	str	r4, [r4, #32]
 8005506:	6263      	str	r3, [r4, #36]	; 0x24
 8005508:	4b04      	ldr	r3, [pc, #16]	; (800551c <std+0x3c>)
 800550a:	62a3      	str	r3, [r4, #40]	; 0x28
 800550c:	4b04      	ldr	r3, [pc, #16]	; (8005520 <std+0x40>)
 800550e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005510:	4b04      	ldr	r3, [pc, #16]	; (8005524 <std+0x44>)
 8005512:	6323      	str	r3, [r4, #48]	; 0x30
 8005514:	bd10      	pop	{r4, pc}
 8005516:	bf00      	nop
 8005518:	0800583d 	.word	0x0800583d
 800551c:	0800585f 	.word	0x0800585f
 8005520:	08005897 	.word	0x08005897
 8005524:	080058bb 	.word	0x080058bb

08005528 <_cleanup_r>:
 8005528:	4901      	ldr	r1, [pc, #4]	; (8005530 <_cleanup_r+0x8>)
 800552a:	f000 b8af 	b.w	800568c <_fwalk_reent>
 800552e:	bf00      	nop
 8005530:	08005469 	.word	0x08005469

08005534 <__sfmoreglue>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	2568      	movs	r5, #104	; 0x68
 8005538:	1e4a      	subs	r2, r1, #1
 800553a:	4355      	muls	r5, r2
 800553c:	460e      	mov	r6, r1
 800553e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005542:	f7ff fa35 	bl	80049b0 <_malloc_r>
 8005546:	4604      	mov	r4, r0
 8005548:	b140      	cbz	r0, 800555c <__sfmoreglue+0x28>
 800554a:	2100      	movs	r1, #0
 800554c:	e9c0 1600 	strd	r1, r6, [r0]
 8005550:	300c      	adds	r0, #12
 8005552:	60a0      	str	r0, [r4, #8]
 8005554:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005558:	f7fd fb12 	bl	8002b80 <memset>
 800555c:	4620      	mov	r0, r4
 800555e:	bd70      	pop	{r4, r5, r6, pc}

08005560 <__sfp_lock_acquire>:
 8005560:	4801      	ldr	r0, [pc, #4]	; (8005568 <__sfp_lock_acquire+0x8>)
 8005562:	f000 b8b3 	b.w	80056cc <__retarget_lock_acquire_recursive>
 8005566:	bf00      	nop
 8005568:	200006a4 	.word	0x200006a4

0800556c <__sfp_lock_release>:
 800556c:	4801      	ldr	r0, [pc, #4]	; (8005574 <__sfp_lock_release+0x8>)
 800556e:	f000 b8ae 	b.w	80056ce <__retarget_lock_release_recursive>
 8005572:	bf00      	nop
 8005574:	200006a4 	.word	0x200006a4

08005578 <__sinit_lock_acquire>:
 8005578:	4801      	ldr	r0, [pc, #4]	; (8005580 <__sinit_lock_acquire+0x8>)
 800557a:	f000 b8a7 	b.w	80056cc <__retarget_lock_acquire_recursive>
 800557e:	bf00      	nop
 8005580:	2000069f 	.word	0x2000069f

08005584 <__sinit_lock_release>:
 8005584:	4801      	ldr	r0, [pc, #4]	; (800558c <__sinit_lock_release+0x8>)
 8005586:	f000 b8a2 	b.w	80056ce <__retarget_lock_release_recursive>
 800558a:	bf00      	nop
 800558c:	2000069f 	.word	0x2000069f

08005590 <__sinit>:
 8005590:	b510      	push	{r4, lr}
 8005592:	4604      	mov	r4, r0
 8005594:	f7ff fff0 	bl	8005578 <__sinit_lock_acquire>
 8005598:	69a3      	ldr	r3, [r4, #24]
 800559a:	b11b      	cbz	r3, 80055a4 <__sinit+0x14>
 800559c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055a0:	f7ff bff0 	b.w	8005584 <__sinit_lock_release>
 80055a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80055a8:	6523      	str	r3, [r4, #80]	; 0x50
 80055aa:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <__sinit+0x68>)
 80055ac:	4a13      	ldr	r2, [pc, #76]	; (80055fc <__sinit+0x6c>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80055b2:	42a3      	cmp	r3, r4
 80055b4:	bf08      	it	eq
 80055b6:	2301      	moveq	r3, #1
 80055b8:	4620      	mov	r0, r4
 80055ba:	bf08      	it	eq
 80055bc:	61a3      	streq	r3, [r4, #24]
 80055be:	f000 f81f 	bl	8005600 <__sfp>
 80055c2:	6060      	str	r0, [r4, #4]
 80055c4:	4620      	mov	r0, r4
 80055c6:	f000 f81b 	bl	8005600 <__sfp>
 80055ca:	60a0      	str	r0, [r4, #8]
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 f817 	bl	8005600 <__sfp>
 80055d2:	2200      	movs	r2, #0
 80055d4:	2104      	movs	r1, #4
 80055d6:	60e0      	str	r0, [r4, #12]
 80055d8:	6860      	ldr	r0, [r4, #4]
 80055da:	f7ff ff81 	bl	80054e0 <std>
 80055de:	2201      	movs	r2, #1
 80055e0:	2109      	movs	r1, #9
 80055e2:	68a0      	ldr	r0, [r4, #8]
 80055e4:	f7ff ff7c 	bl	80054e0 <std>
 80055e8:	2202      	movs	r2, #2
 80055ea:	2112      	movs	r1, #18
 80055ec:	68e0      	ldr	r0, [r4, #12]
 80055ee:	f7ff ff77 	bl	80054e0 <std>
 80055f2:	2301      	movs	r3, #1
 80055f4:	61a3      	str	r3, [r4, #24]
 80055f6:	e7d1      	b.n	800559c <__sinit+0xc>
 80055f8:	080059dc 	.word	0x080059dc
 80055fc:	08005529 	.word	0x08005529

08005600 <__sfp>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	4607      	mov	r7, r0
 8005604:	f7ff ffac 	bl	8005560 <__sfp_lock_acquire>
 8005608:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <__sfp+0x84>)
 800560a:	681e      	ldr	r6, [r3, #0]
 800560c:	69b3      	ldr	r3, [r6, #24]
 800560e:	b913      	cbnz	r3, 8005616 <__sfp+0x16>
 8005610:	4630      	mov	r0, r6
 8005612:	f7ff ffbd 	bl	8005590 <__sinit>
 8005616:	3648      	adds	r6, #72	; 0x48
 8005618:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800561c:	3b01      	subs	r3, #1
 800561e:	d503      	bpl.n	8005628 <__sfp+0x28>
 8005620:	6833      	ldr	r3, [r6, #0]
 8005622:	b30b      	cbz	r3, 8005668 <__sfp+0x68>
 8005624:	6836      	ldr	r6, [r6, #0]
 8005626:	e7f7      	b.n	8005618 <__sfp+0x18>
 8005628:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800562c:	b9d5      	cbnz	r5, 8005664 <__sfp+0x64>
 800562e:	4b16      	ldr	r3, [pc, #88]	; (8005688 <__sfp+0x88>)
 8005630:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005634:	60e3      	str	r3, [r4, #12]
 8005636:	6665      	str	r5, [r4, #100]	; 0x64
 8005638:	f000 f847 	bl	80056ca <__retarget_lock_init_recursive>
 800563c:	f7ff ff96 	bl	800556c <__sfp_lock_release>
 8005640:	2208      	movs	r2, #8
 8005642:	4629      	mov	r1, r5
 8005644:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005648:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800564c:	6025      	str	r5, [r4, #0]
 800564e:	61a5      	str	r5, [r4, #24]
 8005650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005654:	f7fd fa94 	bl	8002b80 <memset>
 8005658:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800565c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005660:	4620      	mov	r0, r4
 8005662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005664:	3468      	adds	r4, #104	; 0x68
 8005666:	e7d9      	b.n	800561c <__sfp+0x1c>
 8005668:	2104      	movs	r1, #4
 800566a:	4638      	mov	r0, r7
 800566c:	f7ff ff62 	bl	8005534 <__sfmoreglue>
 8005670:	4604      	mov	r4, r0
 8005672:	6030      	str	r0, [r6, #0]
 8005674:	2800      	cmp	r0, #0
 8005676:	d1d5      	bne.n	8005624 <__sfp+0x24>
 8005678:	f7ff ff78 	bl	800556c <__sfp_lock_release>
 800567c:	230c      	movs	r3, #12
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	e7ee      	b.n	8005660 <__sfp+0x60>
 8005682:	bf00      	nop
 8005684:	080059dc 	.word	0x080059dc
 8005688:	ffff0001 	.word	0xffff0001

0800568c <_fwalk_reent>:
 800568c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005690:	4606      	mov	r6, r0
 8005692:	4688      	mov	r8, r1
 8005694:	2700      	movs	r7, #0
 8005696:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800569a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800569e:	f1b9 0901 	subs.w	r9, r9, #1
 80056a2:	d505      	bpl.n	80056b0 <_fwalk_reent+0x24>
 80056a4:	6824      	ldr	r4, [r4, #0]
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	d1f7      	bne.n	800569a <_fwalk_reent+0xe>
 80056aa:	4638      	mov	r0, r7
 80056ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056b0:	89ab      	ldrh	r3, [r5, #12]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d907      	bls.n	80056c6 <_fwalk_reent+0x3a>
 80056b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056ba:	3301      	adds	r3, #1
 80056bc:	d003      	beq.n	80056c6 <_fwalk_reent+0x3a>
 80056be:	4629      	mov	r1, r5
 80056c0:	4630      	mov	r0, r6
 80056c2:	47c0      	blx	r8
 80056c4:	4307      	orrs	r7, r0
 80056c6:	3568      	adds	r5, #104	; 0x68
 80056c8:	e7e9      	b.n	800569e <_fwalk_reent+0x12>

080056ca <__retarget_lock_init_recursive>:
 80056ca:	4770      	bx	lr

080056cc <__retarget_lock_acquire_recursive>:
 80056cc:	4770      	bx	lr

080056ce <__retarget_lock_release_recursive>:
 80056ce:	4770      	bx	lr

080056d0 <__swhatbuf_r>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	460e      	mov	r6, r1
 80056d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d8:	4614      	mov	r4, r2
 80056da:	2900      	cmp	r1, #0
 80056dc:	461d      	mov	r5, r3
 80056de:	b096      	sub	sp, #88	; 0x58
 80056e0:	da07      	bge.n	80056f2 <__swhatbuf_r+0x22>
 80056e2:	2300      	movs	r3, #0
 80056e4:	602b      	str	r3, [r5, #0]
 80056e6:	89b3      	ldrh	r3, [r6, #12]
 80056e8:	061a      	lsls	r2, r3, #24
 80056ea:	d410      	bmi.n	800570e <__swhatbuf_r+0x3e>
 80056ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056f0:	e00e      	b.n	8005710 <__swhatbuf_r+0x40>
 80056f2:	466a      	mov	r2, sp
 80056f4:	f000 f908 	bl	8005908 <_fstat_r>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	dbf2      	blt.n	80056e2 <__swhatbuf_r+0x12>
 80056fc:	9a01      	ldr	r2, [sp, #4]
 80056fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005702:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005706:	425a      	negs	r2, r3
 8005708:	415a      	adcs	r2, r3
 800570a:	602a      	str	r2, [r5, #0]
 800570c:	e7ee      	b.n	80056ec <__swhatbuf_r+0x1c>
 800570e:	2340      	movs	r3, #64	; 0x40
 8005710:	2000      	movs	r0, #0
 8005712:	6023      	str	r3, [r4, #0]
 8005714:	b016      	add	sp, #88	; 0x58
 8005716:	bd70      	pop	{r4, r5, r6, pc}

08005718 <__smakebuf_r>:
 8005718:	898b      	ldrh	r3, [r1, #12]
 800571a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800571c:	079d      	lsls	r5, r3, #30
 800571e:	4606      	mov	r6, r0
 8005720:	460c      	mov	r4, r1
 8005722:	d507      	bpl.n	8005734 <__smakebuf_r+0x1c>
 8005724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	2301      	movs	r3, #1
 800572e:	6163      	str	r3, [r4, #20]
 8005730:	b002      	add	sp, #8
 8005732:	bd70      	pop	{r4, r5, r6, pc}
 8005734:	466a      	mov	r2, sp
 8005736:	ab01      	add	r3, sp, #4
 8005738:	f7ff ffca 	bl	80056d0 <__swhatbuf_r>
 800573c:	9900      	ldr	r1, [sp, #0]
 800573e:	4605      	mov	r5, r0
 8005740:	4630      	mov	r0, r6
 8005742:	f7ff f935 	bl	80049b0 <_malloc_r>
 8005746:	b948      	cbnz	r0, 800575c <__smakebuf_r+0x44>
 8005748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574c:	059a      	lsls	r2, r3, #22
 800574e:	d4ef      	bmi.n	8005730 <__smakebuf_r+0x18>
 8005750:	f023 0303 	bic.w	r3, r3, #3
 8005754:	f043 0302 	orr.w	r3, r3, #2
 8005758:	81a3      	strh	r3, [r4, #12]
 800575a:	e7e3      	b.n	8005724 <__smakebuf_r+0xc>
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <__smakebuf_r+0x7c>)
 800575e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005760:	89a3      	ldrh	r3, [r4, #12]
 8005762:	6020      	str	r0, [r4, #0]
 8005764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005768:	81a3      	strh	r3, [r4, #12]
 800576a:	9b00      	ldr	r3, [sp, #0]
 800576c:	6120      	str	r0, [r4, #16]
 800576e:	6163      	str	r3, [r4, #20]
 8005770:	9b01      	ldr	r3, [sp, #4]
 8005772:	b15b      	cbz	r3, 800578c <__smakebuf_r+0x74>
 8005774:	4630      	mov	r0, r6
 8005776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800577a:	f000 f8d7 	bl	800592c <_isatty_r>
 800577e:	b128      	cbz	r0, 800578c <__smakebuf_r+0x74>
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	81a3      	strh	r3, [r4, #12]
 800578c:	89a0      	ldrh	r0, [r4, #12]
 800578e:	4305      	orrs	r5, r0
 8005790:	81a5      	strh	r5, [r4, #12]
 8005792:	e7cd      	b.n	8005730 <__smakebuf_r+0x18>
 8005794:	08005529 	.word	0x08005529

08005798 <memchr>:
 8005798:	4603      	mov	r3, r0
 800579a:	b510      	push	{r4, lr}
 800579c:	b2c9      	uxtb	r1, r1
 800579e:	4402      	add	r2, r0
 80057a0:	4293      	cmp	r3, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	d101      	bne.n	80057aa <memchr+0x12>
 80057a6:	2000      	movs	r0, #0
 80057a8:	e003      	b.n	80057b2 <memchr+0x1a>
 80057aa:	7804      	ldrb	r4, [r0, #0]
 80057ac:	3301      	adds	r3, #1
 80057ae:	428c      	cmp	r4, r1
 80057b0:	d1f6      	bne.n	80057a0 <memchr+0x8>
 80057b2:	bd10      	pop	{r4, pc}

080057b4 <_raise_r>:
 80057b4:	291f      	cmp	r1, #31
 80057b6:	b538      	push	{r3, r4, r5, lr}
 80057b8:	4604      	mov	r4, r0
 80057ba:	460d      	mov	r5, r1
 80057bc:	d904      	bls.n	80057c8 <_raise_r+0x14>
 80057be:	2316      	movs	r3, #22
 80057c0:	6003      	str	r3, [r0, #0]
 80057c2:	f04f 30ff 	mov.w	r0, #4294967295
 80057c6:	bd38      	pop	{r3, r4, r5, pc}
 80057c8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80057ca:	b112      	cbz	r2, 80057d2 <_raise_r+0x1e>
 80057cc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80057d0:	b94b      	cbnz	r3, 80057e6 <_raise_r+0x32>
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 f830 	bl	8005838 <_getpid_r>
 80057d8:	462a      	mov	r2, r5
 80057da:	4601      	mov	r1, r0
 80057dc:	4620      	mov	r0, r4
 80057de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057e2:	f000 b817 	b.w	8005814 <_kill_r>
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d00a      	beq.n	8005800 <_raise_r+0x4c>
 80057ea:	1c59      	adds	r1, r3, #1
 80057ec:	d103      	bne.n	80057f6 <_raise_r+0x42>
 80057ee:	2316      	movs	r3, #22
 80057f0:	6003      	str	r3, [r0, #0]
 80057f2:	2001      	movs	r0, #1
 80057f4:	e7e7      	b.n	80057c6 <_raise_r+0x12>
 80057f6:	2400      	movs	r4, #0
 80057f8:	4628      	mov	r0, r5
 80057fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057fe:	4798      	blx	r3
 8005800:	2000      	movs	r0, #0
 8005802:	e7e0      	b.n	80057c6 <_raise_r+0x12>

08005804 <raise>:
 8005804:	4b02      	ldr	r3, [pc, #8]	; (8005810 <raise+0xc>)
 8005806:	4601      	mov	r1, r0
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	f7ff bfd3 	b.w	80057b4 <_raise_r>
 800580e:	bf00      	nop
 8005810:	20000014 	.word	0x20000014

08005814 <_kill_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	2300      	movs	r3, #0
 8005818:	4d06      	ldr	r5, [pc, #24]	; (8005834 <_kill_r+0x20>)
 800581a:	4604      	mov	r4, r0
 800581c:	4608      	mov	r0, r1
 800581e:	4611      	mov	r1, r2
 8005820:	602b      	str	r3, [r5, #0]
 8005822:	f7fb fd40 	bl	80012a6 <_kill>
 8005826:	1c43      	adds	r3, r0, #1
 8005828:	d102      	bne.n	8005830 <_kill_r+0x1c>
 800582a:	682b      	ldr	r3, [r5, #0]
 800582c:	b103      	cbz	r3, 8005830 <_kill_r+0x1c>
 800582e:	6023      	str	r3, [r4, #0]
 8005830:	bd38      	pop	{r3, r4, r5, pc}
 8005832:	bf00      	nop
 8005834:	20000698 	.word	0x20000698

08005838 <_getpid_r>:
 8005838:	f7fb bd2e 	b.w	8001298 <_getpid>

0800583c <__sread>:
 800583c:	b510      	push	{r4, lr}
 800583e:	460c      	mov	r4, r1
 8005840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005844:	f000 f894 	bl	8005970 <_read_r>
 8005848:	2800      	cmp	r0, #0
 800584a:	bfab      	itete	ge
 800584c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800584e:	89a3      	ldrhlt	r3, [r4, #12]
 8005850:	181b      	addge	r3, r3, r0
 8005852:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005856:	bfac      	ite	ge
 8005858:	6563      	strge	r3, [r4, #84]	; 0x54
 800585a:	81a3      	strhlt	r3, [r4, #12]
 800585c:	bd10      	pop	{r4, pc}

0800585e <__swrite>:
 800585e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005862:	461f      	mov	r7, r3
 8005864:	898b      	ldrh	r3, [r1, #12]
 8005866:	4605      	mov	r5, r0
 8005868:	05db      	lsls	r3, r3, #23
 800586a:	460c      	mov	r4, r1
 800586c:	4616      	mov	r6, r2
 800586e:	d505      	bpl.n	800587c <__swrite+0x1e>
 8005870:	2302      	movs	r3, #2
 8005872:	2200      	movs	r2, #0
 8005874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005878:	f000 f868 	bl	800594c <_lseek_r>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	4632      	mov	r2, r6
 8005880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005884:	81a3      	strh	r3, [r4, #12]
 8005886:	4628      	mov	r0, r5
 8005888:	463b      	mov	r3, r7
 800588a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800588e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005892:	f000 b817 	b.w	80058c4 <_write_r>

08005896 <__sseek>:
 8005896:	b510      	push	{r4, lr}
 8005898:	460c      	mov	r4, r1
 800589a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589e:	f000 f855 	bl	800594c <_lseek_r>
 80058a2:	1c43      	adds	r3, r0, #1
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	bf15      	itete	ne
 80058a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80058aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058b2:	81a3      	strheq	r3, [r4, #12]
 80058b4:	bf18      	it	ne
 80058b6:	81a3      	strhne	r3, [r4, #12]
 80058b8:	bd10      	pop	{r4, pc}

080058ba <__sclose>:
 80058ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058be:	f000 b813 	b.w	80058e8 <_close_r>
	...

080058c4 <_write_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4604      	mov	r4, r0
 80058c8:	4608      	mov	r0, r1
 80058ca:	4611      	mov	r1, r2
 80058cc:	2200      	movs	r2, #0
 80058ce:	4d05      	ldr	r5, [pc, #20]	; (80058e4 <_write_r+0x20>)
 80058d0:	602a      	str	r2, [r5, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f7fb fd1e 	bl	8001314 <_write>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_write_r+0x1e>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_write_r+0x1e>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20000698 	.word	0x20000698

080058e8 <_close_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	2300      	movs	r3, #0
 80058ec:	4d05      	ldr	r5, [pc, #20]	; (8005904 <_close_r+0x1c>)
 80058ee:	4604      	mov	r4, r0
 80058f0:	4608      	mov	r0, r1
 80058f2:	602b      	str	r3, [r5, #0]
 80058f4:	f7fb fd2a 	bl	800134c <_close>
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	d102      	bne.n	8005902 <_close_r+0x1a>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b103      	cbz	r3, 8005902 <_close_r+0x1a>
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	bd38      	pop	{r3, r4, r5, pc}
 8005904:	20000698 	.word	0x20000698

08005908 <_fstat_r>:
 8005908:	b538      	push	{r3, r4, r5, lr}
 800590a:	2300      	movs	r3, #0
 800590c:	4d06      	ldr	r5, [pc, #24]	; (8005928 <_fstat_r+0x20>)
 800590e:	4604      	mov	r4, r0
 8005910:	4608      	mov	r0, r1
 8005912:	4611      	mov	r1, r2
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	f7fb fd24 	bl	8001362 <_fstat>
 800591a:	1c43      	adds	r3, r0, #1
 800591c:	d102      	bne.n	8005924 <_fstat_r+0x1c>
 800591e:	682b      	ldr	r3, [r5, #0]
 8005920:	b103      	cbz	r3, 8005924 <_fstat_r+0x1c>
 8005922:	6023      	str	r3, [r4, #0]
 8005924:	bd38      	pop	{r3, r4, r5, pc}
 8005926:	bf00      	nop
 8005928:	20000698 	.word	0x20000698

0800592c <_isatty_r>:
 800592c:	b538      	push	{r3, r4, r5, lr}
 800592e:	2300      	movs	r3, #0
 8005930:	4d05      	ldr	r5, [pc, #20]	; (8005948 <_isatty_r+0x1c>)
 8005932:	4604      	mov	r4, r0
 8005934:	4608      	mov	r0, r1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	f7fb fd22 	bl	8001380 <_isatty>
 800593c:	1c43      	adds	r3, r0, #1
 800593e:	d102      	bne.n	8005946 <_isatty_r+0x1a>
 8005940:	682b      	ldr	r3, [r5, #0]
 8005942:	b103      	cbz	r3, 8005946 <_isatty_r+0x1a>
 8005944:	6023      	str	r3, [r4, #0]
 8005946:	bd38      	pop	{r3, r4, r5, pc}
 8005948:	20000698 	.word	0x20000698

0800594c <_lseek_r>:
 800594c:	b538      	push	{r3, r4, r5, lr}
 800594e:	4604      	mov	r4, r0
 8005950:	4608      	mov	r0, r1
 8005952:	4611      	mov	r1, r2
 8005954:	2200      	movs	r2, #0
 8005956:	4d05      	ldr	r5, [pc, #20]	; (800596c <_lseek_r+0x20>)
 8005958:	602a      	str	r2, [r5, #0]
 800595a:	461a      	mov	r2, r3
 800595c:	f7fb fd1a 	bl	8001394 <_lseek>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_lseek_r+0x1e>
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	b103      	cbz	r3, 800596a <_lseek_r+0x1e>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20000698 	.word	0x20000698

08005970 <_read_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4604      	mov	r4, r0
 8005974:	4608      	mov	r0, r1
 8005976:	4611      	mov	r1, r2
 8005978:	2200      	movs	r2, #0
 800597a:	4d05      	ldr	r5, [pc, #20]	; (8005990 <_read_r+0x20>)
 800597c:	602a      	str	r2, [r5, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fb fcab 	bl	80012da <_read>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_read_r+0x1e>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_read_r+0x1e>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	20000698 	.word	0x20000698

08005994 <_init>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	bf00      	nop
 8005998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800599a:	bc08      	pop	{r3}
 800599c:	469e      	mov	lr, r3
 800599e:	4770      	bx	lr

080059a0 <_fini>:
 80059a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a2:	bf00      	nop
 80059a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a6:	bc08      	pop	{r3}
 80059a8:	469e      	mov	lr, r3
 80059aa:	4770      	bx	lr
