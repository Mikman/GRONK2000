
I2C_kamera_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005190  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005364  08005364  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  08005364  08005364  00015364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800536c  0800536c  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800536c  0800536c  0001536c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  08005374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000298  0800560c  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800560c  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e5c  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002585  00000000  00000000  00034124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  000366b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00037880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207ca  00000000  00000000  00038968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013542  00000000  00000000  00059132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c80a7  00000000  00000000  0006c674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013471b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bcc  00000000  00000000  00134770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000298 	.word	0x20000298
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005304 	.word	0x08005304

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000029c 	.word	0x2000029c
 80001c8:	08005304 	.word	0x08005304

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CAM_init>:
 */

#include "camera.h"
#include "main.h"

void CAM_init(CAM_HandleTypeDef *cam) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	// init SCCB
	CAM_setReg(cam, 0x12, 0x80); // Software reset, YUV mode
 80004cc:	2280      	movs	r2, #128	; 0x80
 80004ce:	2112      	movs	r1, #18
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f000 f91d 	bl	8000710 <CAM_setReg>
	CAM_setReg(cam, 0x1E, 0x31); // Flip image vertically and mirror image
 80004d6:	2231      	movs	r2, #49	; 0x31
 80004d8:	211e      	movs	r1, #30
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 f918 	bl	8000710 <CAM_setReg>
	CAM_setReg(cam, 0x13, 0x81); // Fast algorithm and auto exposure enable
 80004e0:	2281      	movs	r2, #129	; 0x81
 80004e2:	2113      	movs	r1, #19
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f000 f913 	bl	8000710 <CAM_setReg>
	CAM_setReg(cam, 0x3F, 0x01); // Edge enhancement factor
 80004ea:	2201      	movs	r2, #1
 80004ec:	213f      	movs	r1, #63	; 0x3f
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f90e 	bl	8000710 <CAM_setReg>
	CAM_setReg(cam, 0x71, 0xB5); // 8-bar color bar test pattern
 80004f4:	22b5      	movs	r2, #181	; 0xb5
 80004f6:	2171      	movs	r1, #113	; 0x71
 80004f8:	6878      	ldr	r0, [r7, #4]
 80004fa:	f000 f909 	bl	8000710 <CAM_setReg>
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}

08000506 <CAM_startLineTransfer>:

void CAM_startLineTransfer(CAM_HandleTypeDef *cam) {
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]

	// init DMA
	//while (cam->requestDataTimer->Instance->CNT <=  50) {}
	HAL_DMA_Start_IT(cam->hdma, cam->source, cam->destination, cam->pic->width);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	6818      	ldr	r0, [r3, #0]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	4619      	mov	r1, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6a1b      	ldr	r3, [r3, #32]
 800051c:	461a      	mov	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	889b      	ldrh	r3, [r3, #4]
 8000524:	f001 f850 	bl	80015c8 <HAL_DMA_Start_IT>
	HAL_TIM_PWM_Start(cam->requestDataTimer, cam->requestDataChannel);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	685a      	ldr	r2, [r3, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	4619      	mov	r1, r3
 8000532:	4610      	mov	r0, r2
 8000534:	f003 fac6 	bl	8003ac4 <HAL_TIM_PWM_Start>

	cam->status = RECEIVING;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2201      	movs	r2, #1
 800053c:	761a      	strb	r2, [r3, #24]
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <CAM_stopLineTransfer>:

void CAM_stopLineTransfer(CAM_HandleTypeDef *cam) {
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
 800054c:	6078      	str	r0, [r7, #4]

	// abort DMA
	HAL_DMA_Abort_IT(cam->hdma);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4618      	mov	r0, r3
 8000554:	f001 f898 	bl	8001688 <HAL_DMA_Abort_IT>
	//while (cam->requestDataTimer->Instance->CNT <= 50) {}
	HAL_TIM_PWM_Stop(cam->requestDataTimer, cam->requestDataChannel);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	685a      	ldr	r2, [r3, #4]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	68db      	ldr	r3, [r3, #12]
 8000560:	4619      	mov	r1, r3
 8000562:	4610      	mov	r0, r2
 8000564:	f003 fb8c 	bl	8003c80 <HAL_TIM_PWM_Stop>

  	cam->status = WAITING;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2202      	movs	r2, #2
 800056c:	761a      	strb	r2, [r3, #24]
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <CAM_update>:

void CAM_update(CAM_HandleTypeDef *cam) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	if (cam->status == READY) {
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	7e1b      	ldrb	r3, [r3, #24]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d11c      	bne.n	80005c2 <CAM_update+0x4a>
		if (cam->pic->y < cam->pic->height) {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	885a      	ldrh	r2, [r3, #2]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	695b      	ldr	r3, [r3, #20]
 8000592:	88db      	ldrh	r3, [r3, #6]
 8000594:	429a      	cmp	r2, r3
 8000596:	d203      	bcs.n	80005a0 <CAM_update+0x28>
			CAM_startLineTransfer(cam);
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f7ff ffb4 	bl	8000506 <CAM_startLineTransfer>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
		}
	} else if (cam->status == WAITING) {
		CAM_toOutputQueue(cam);
	}
}
 800059e:	e017      	b.n	80005d0 <CAM_update+0x58>
			cam->pic->x = 0;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	2200      	movs	r2, #0
 80005a6:	801a      	strh	r2, [r3, #0]
			cam->pic->y = 0;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	2200      	movs	r2, #0
 80005ae:	805a      	strh	r2, [r3, #2]
			cam->status = STANDBY;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2203      	movs	r2, #3
 80005b4:	761a      	strb	r2, [r3, #24]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2120      	movs	r1, #32
 80005ba:	4807      	ldr	r0, [pc, #28]	; (80005d8 <CAM_update+0x60>)
 80005bc:	f001 faee 	bl	8001b9c <HAL_GPIO_WritePin>
}
 80005c0:	e006      	b.n	80005d0 <CAM_update+0x58>
	} else if (cam->status == WAITING) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	7e1b      	ldrb	r3, [r3, #24]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d102      	bne.n	80005d0 <CAM_update+0x58>
		CAM_toOutputQueue(cam);
 80005ca:	6878      	ldr	r0, [r7, #4]
 80005cc:	f000 f831 	bl	8000632 <CAM_toOutputQueue>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	48000400 	.word	0x48000400

080005dc <CAM_takePicture>:

void CAM_takePicture(CAM_HandleTypeDef *cam) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	//HUSK at ændre i OBC-filen

	// Hvis ikke vi er ved at sende et billede, pulsér getImagePin på FPGA
	if (cam->status == STANDBY) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7e1b      	ldrb	r3, [r3, #24]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d10f      	bne.n	800060c <CAM_takePicture+0x30>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2102      	movs	r1, #2
 80005f0:	4808      	ldr	r0, [pc, #32]	; (8000614 <CAM_takePicture+0x38>)
 80005f2:	f001 fad3 	bl	8001b9c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2102      	movs	r1, #2
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <CAM_takePicture+0x38>)
 80005fc:	f001 face 	bl	8001b9c <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000600:	2032      	movs	r0, #50	; 0x32
 8000602:	f000 fdf3 	bl	80011ec <HAL_Delay>
		cam->status = READY;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	761a      	strb	r2, [r3, #24]
	}
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	48000400 	.word	0x48000400

08000618 <CAN_queuePackage>:

int CAN_queuePackage(uint32_t ID, uint8_t *data, uint32_t DLC) {}
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	bf00      	nop
 8000626:	4618      	mov	r0, r3
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <CAM_toOutputQueue>:

void CAM_toOutputQueue(CAM_HandleTypeDef *cam) {
 8000632:	b580      	push	{r7, lr}
 8000634:	b084      	sub	sp, #16
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
	// Vent og placer pixel-koordinat-pakke i CAN-køen
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	723b      	strb	r3, [r7, #8]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	881b      	ldrh	r3, [r3, #0]
 800064a:	0a1b      	lsrs	r3, r3, #8
 800064c:	b29b      	uxth	r3, r3
 800064e:	b2db      	uxtb	r3, r3
 8000650:	727b      	strb	r3, [r7, #9]
									(cam->pic->y & 0x00FF), (cam->pic->y >> 8),
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	885b      	ldrh	r3, [r3, #2]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000658:	b2db      	uxtb	r3, r3
 800065a:	72bb      	strb	r3, [r7, #10]
									(cam->pic->y & 0x00FF), (cam->pic->y >> 8),
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	885b      	ldrh	r3, [r3, #2]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000662:	0a1b      	lsrs	r3, r3, #8
 8000664:	b29b      	uxth	r3, r3
 8000666:	b2db      	uxtb	r3, r3
 8000668:	72fb      	strb	r3, [r7, #11]
									(cam->pic->width & 0x00FF), (cam->pic->width >> 8),
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	889b      	ldrh	r3, [r3, #4]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000670:	b2db      	uxtb	r3, r3
 8000672:	733b      	strb	r3, [r7, #12]
									(cam->pic->width & 0x00FF), (cam->pic->width >> 8),
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	889b      	ldrh	r3, [r3, #4]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 800067a:	0a1b      	lsrs	r3, r3, #8
 800067c:	b29b      	uxth	r3, r3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	737b      	strb	r3, [r7, #13]
									(cam->pic->height & 0x00FF), (cam->pic->height >> 8)};
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	88db      	ldrh	r3, [r3, #6]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000688:	b2db      	uxtb	r3, r3
 800068a:	73bb      	strb	r3, [r7, #14]
									(cam->pic->height & 0x00FF), (cam->pic->height >> 8)};
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	88db      	ldrh	r3, [r3, #6]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	73fb      	strb	r3, [r7, #15]
	while(!CAN_queuePackage(CAN_ID_COORDINATE, coordinatePackage, 8)) {}
 800069a:	bf00      	nop
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2208      	movs	r2, #8
 80006a2:	4619      	mov	r1, r3
 80006a4:	2020      	movs	r0, #32
 80006a6:	f7ff ffb7 	bl	8000618 <CAN_queuePackage>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0f5      	beq.n	800069c <CAM_toOutputQueue+0x6a>

	// Vent på at der plads i CAN-køen til en pakke med 8 pixels

	while(cam->pic->x < cam->pic->width) { // Gentag indtil hele linjen er sendt / hele bufferen er tømt
 80006b0:	e015      	b.n	80006de <CAM_toOutputQueue+0xac>
		// Når der er plads, put dem i køen
		if (CAN_queuePackage(CAN_ID_DATA, cam->destination + cam->pic->x, 8)) {
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	6a1b      	ldr	r3, [r3, #32]
 80006b6:	687a      	ldr	r2, [r7, #4]
 80006b8:	6952      	ldr	r2, [r2, #20]
 80006ba:	8812      	ldrh	r2, [r2, #0]
 80006bc:	4413      	add	r3, r2
 80006be:	2208      	movs	r2, #8
 80006c0:	4619      	mov	r1, r3
 80006c2:	2021      	movs	r0, #33	; 0x21
 80006c4:	f7ff ffa8 	bl	8000618 <CAN_queuePackage>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d007      	beq.n	80006de <CAM_toOutputQueue+0xac>
			// Inkrementer x-positionen i Picture
			cam->pic->x += 8;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	881a      	ldrh	r2, [r3, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	3208      	adds	r2, #8
 80006da:	b292      	uxth	r2, r2
 80006dc:	801a      	strh	r2, [r3, #0]
	while(cam->pic->x < cam->pic->width) { // Gentag indtil hele linjen er sendt / hele bufferen er tømt
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	881a      	ldrh	r2, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	889b      	ldrh	r3, [r3, #4]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	d3e1      	bcc.n	80006b2 <CAM_toOutputQueue+0x80>
		}
		*/
	}

	// Opdater koordinaterne i Picture
	cam->pic->y++;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	885a      	ldrh	r2, [r3, #2]
 80006f4:	3201      	adds	r2, #1
 80006f6:	b292      	uxth	r2, r2
 80006f8:	805a      	strh	r2, [r3, #2]
	cam->pic->x = 0;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	2200      	movs	r2, #0
 8000700:	801a      	strh	r2, [r3, #0]

	cam->status = READY;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	761a      	strb	r2, [r3, #24]
}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <CAM_setReg>:

void CAM_setReg(CAM_HandleTypeDef *cam, uint8_t reg_addr, uint8_t value) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af02      	add	r7, sp, #8
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	460b      	mov	r3, r1
 800071a:	70fb      	strb	r3, [r7, #3]
 800071c:	4613      	mov	r3, r2
 800071e:	70bb      	strb	r3, [r7, #2]
	uint8_t addrAndValue[2] = {reg_addr, value};
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	733b      	strb	r3, [r7, #12]
 8000724:	78bb      	ldrb	r3, [r7, #2]
 8000726:	737b      	strb	r3, [r7, #13]
	uint8_t adressentest = cam->I2C_Address<<1;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(cam->I2C_Handler, (cam->I2C_Address<<1), addrAndValue, 2, HAL_MAX_DELAY);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800073c:	b29b      	uxth	r3, r3
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	b299      	uxth	r1, r3
 8000742:	f107 020c 	add.w	r2, r7, #12
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2302      	movs	r3, #2
 800074e:	f001 facd 	bl	8001cec <HAL_I2C_Master_Transmit>
}
 8000752:	bf00      	nop
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <CAM_getReg>:

int CAM_getReg(CAM_HandleTypeDef *cam, int reg_addr) {
 800075a:	b580      	push	{r7, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af02      	add	r7, sp, #8
 8000760:	6078      	str	r0, [r7, #4]
 8000762:	6039      	str	r1, [r7, #0]
	int buf[1] = {reg_addr};
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(cam->I2C_Handler, (cam->I2C_Address<<1), buf, 1, HAL_MAX_DELAY);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000772:	b29b      	uxth	r3, r3
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	b299      	uxth	r1, r3
 8000778:	f107 020c 	add.w	r2, r7, #12
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2301      	movs	r3, #1
 8000784:	f001 fab2 	bl	8001cec <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(cam->I2C_Handler, (cam->I2C_Address<<1) | 0x01, buf, 1, HAL_MAX_DELAY);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	b21b      	sxth	r3, r3
 8000796:	f043 0301 	orr.w	r3, r3, #1
 800079a:	b21b      	sxth	r3, r3
 800079c:	b299      	uxth	r1, r3
 800079e:	f107 020c 	add.w	r2, r7, #12
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295
 80007a6:	9300      	str	r3, [sp, #0]
 80007a8:	2301      	movs	r3, #1
 80007aa:	f001 fb93 	bl	8001ed4 <HAL_I2C_Master_Receive>

	return buf[0];
 80007ae:	68fb      	ldr	r3, [r7, #12]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f000 fca0 	bl	8001102 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f849 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80007c6:	f000 f9fd 	bl	8000bc4 <MX_DMA_Init>
  MX_GPIO_Init();
 80007ca:	f000 fa19 	bl	8000c00 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ce:	f000 f8b7 	bl	8000940 <MX_I2C1_Init>
  MX_TIM1_Init();
 80007d2:	f000 f8f5 	bl	80009c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007d6:	f000 f9c5 	bl	8000b64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	CAM_Handle_Init(&hcam);
 80007da:	481c      	ldr	r0, [pc, #112]	; (800084c <main+0x94>)
 80007dc:	f000 fa80 	bl	8000ce0 <CAM_Handle_Init>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Transfer pin sættes lav
 80007e0:	2200      	movs	r2, #0
 80007e2:	2120      	movs	r1, #32
 80007e4:	481a      	ldr	r0, [pc, #104]	; (8000850 <main+0x98>)
 80007e6:	f001 f9d9 	bl	8001b9c <HAL_GPIO_WritePin>



	 CAM_init(&hcam);
 80007ea:	4818      	ldr	r0, [pc, #96]	; (800084c <main+0x94>)
 80007ec:	f7ff fe6a 	bl	80004c4 <CAM_init>


	 int a = CAM_getReg(&hcam, 0x12);
 80007f0:	2112      	movs	r1, #18
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <main+0x94>)
 80007f4:	f7ff ffb1 	bl	800075a <CAM_getReg>
 80007f8:	6178      	str	r0, [r7, #20]
	 int b = CAM_getReg(&hcam, 0x1E);
 80007fa:	211e      	movs	r1, #30
 80007fc:	4813      	ldr	r0, [pc, #76]	; (800084c <main+0x94>)
 80007fe:	f7ff ffac 	bl	800075a <CAM_getReg>
 8000802:	6138      	str	r0, [r7, #16]
	 int c = CAM_getReg(&hcam, 0x13);
 8000804:	2113      	movs	r1, #19
 8000806:	4811      	ldr	r0, [pc, #68]	; (800084c <main+0x94>)
 8000808:	f7ff ffa7 	bl	800075a <CAM_getReg>
 800080c:	60f8      	str	r0, [r7, #12]
	 int d = CAM_getReg(&hcam, 0x3F);
 800080e:	213f      	movs	r1, #63	; 0x3f
 8000810:	480e      	ldr	r0, [pc, #56]	; (800084c <main+0x94>)
 8000812:	f7ff ffa2 	bl	800075a <CAM_getReg>
 8000816:	60b8      	str	r0, [r7, #8]
	 int e = CAM_getReg(&hcam, 0x71);
 8000818:	2171      	movs	r1, #113	; 0x71
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <main+0x94>)
 800081c:	f7ff ff9d 	bl	800075a <CAM_getReg>
 8000820:	6078      	str	r0, [r7, #4]


	//HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_2); // Random kanal for at timeren altid kører
	__HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC3); // DENNE LINJE GJORDE AT DMA VILLE SIT LIV
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <main+0x9c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	68da      	ldr	r2, [r3, #12]
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <main+0x9c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000830:	60da      	str	r2, [r3, #12]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // Transfer pin sættes høj
 8000832:	2201      	movs	r2, #1
 8000834:	2120      	movs	r1, #32
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <main+0x98>)
 8000838:	f001 f9b0 	bl	8001b9c <HAL_GPIO_WritePin>

	CAM_takePicture(&hcam);
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <main+0x94>)
 800083e:	f7ff fecd 	bl	80005dc <CAM_takePicture>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		CAM_update(&hcam);
 8000842:	4802      	ldr	r0, [pc, #8]	; (800084c <main+0x94>)
 8000844:	f7ff fe98 	bl	8000578 <CAM_update>
 8000848:	e7fb      	b.n	8000842 <main+0x8a>
 800084a:	bf00      	nop
 800084c:	20000420 	.word	0x20000420
 8000850:	48000400 	.word	0x48000400
 8000854:	200003d4 	.word	0x200003d4

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b0ac      	sub	sp, #176	; 0xb0
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000862:	2244      	movs	r2, #68	; 0x44
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f004 fd44 	bl	80052f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2254      	movs	r2, #84	; 0x54
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f004 fd36 	bl	80052f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000888:	2310      	movs	r3, #16
 800088a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000898:	2360      	movs	r3, #96	; 0x60
 800089a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089e:	2302      	movs	r3, #2
 80008a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008a4:	2301      	movs	r3, #1
 80008a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 36;
 80008b0:	2324      	movs	r3, #36	; 0x24
 80008b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008b6:	2307      	movs	r3, #7
 80008b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008bc:	2302      	movs	r3, #2
 80008be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 fed3 	bl	8002678 <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008d8:	f000 fa4c 	bl	8000d74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008dc:	230f      	movs	r3, #15
 80008de:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e0:	2303      	movs	r3, #3
 80008e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008f4:	2104      	movs	r1, #4
 80008f6:	4618      	mov	r0, r3
 80008f8:	f002 fade 	bl	8002eb8 <HAL_RCC_ClockConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000902:	f000 fa37 	bl	8000d74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000906:	2341      	movs	r3, #65	; 0x41
 8000908:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800090e:	2300      	movs	r3, #0
 8000910:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	4618      	mov	r0, r3
 8000916:	f002 fcd5 	bl	80032c4 <HAL_RCCEx_PeriphCLKConfig>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000920:	f000 fa28 	bl	8000d74 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000924:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000928:	f001 fe50 	bl	80025cc <HAL_PWREx_ControlVoltageScaling>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000932:	f000 fa1f 	bl	8000d74 <Error_Handler>
  }
}
 8000936:	bf00      	nop
 8000938:	37b0      	adds	r7, #176	; 0xb0
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000946:	4a1c      	ldr	r2, [pc, #112]	; (80009b8 <MX_I2C1_Init+0x78>)
 8000948:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_I2C1_Init+0x74>)
 800094c:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <MX_I2C1_Init+0x7c>)
 800094e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000958:	2201      	movs	r2, #1
 800095a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800097a:	480e      	ldr	r0, [pc, #56]	; (80009b4 <MX_I2C1_Init+0x74>)
 800097c:	f001 f926 	bl	8001bcc <HAL_I2C_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000986:	f000 f9f5 	bl	8000d74 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800098a:	2100      	movs	r1, #0
 800098c:	4809      	ldr	r0, [pc, #36]	; (80009b4 <MX_I2C1_Init+0x74>)
 800098e:	f001 fd77 	bl	8002480 <HAL_I2CEx_ConfigAnalogFilter>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000998:	f000 f9ec 	bl	8000d74 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800099c:	2100      	movs	r1, #0
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_I2C1_Init+0x74>)
 80009a0:	f001 fdb9 	bl	8002516 <HAL_I2CEx_ConfigDigitalFilter>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009aa:	f000 f9e3 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200002fc 	.word	0x200002fc
 80009b8:	40005400 	.word	0x40005400
 80009bc:	10808dd3 	.word	0x10808dd3

080009c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b09a      	sub	sp, #104	; 0x68
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
 80009f0:	615a      	str	r2, [r3, #20]
 80009f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	222c      	movs	r2, #44	; 0x2c
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 fc7a 	bl	80052f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a00:	4b56      	ldr	r3, [pc, #344]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a02:	4a57      	ldr	r2, [pc, #348]	; (8000b60 <MX_TIM1_Init+0x1a0>)
 8000a04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000a06:	4b55      	ldr	r3, [pc, #340]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b53      	ldr	r3, [pc, #332]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6000-1;
 8000a12:	4b52      	ldr	r3, [pc, #328]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a14:	f241 726f 	movw	r2, #5999	; 0x176f
 8000a18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1a:	4b50      	ldr	r3, [pc, #320]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a20:	4b4e      	ldr	r3, [pc, #312]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a26:	4b4d      	ldr	r3, [pc, #308]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a2c:	484b      	ldr	r0, [pc, #300]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a2e:	f002 ff2f 	bl	8003890 <HAL_TIM_Base_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000a38:	f000 f99c 	bl	8000d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a46:	4619      	mov	r1, r3
 8000a48:	4844      	ldr	r0, [pc, #272]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a4a:	f003 fb27 	bl	800409c <HAL_TIM_ConfigClockSource>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a54:	f000 f98e 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a58:	4840      	ldr	r0, [pc, #256]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a5a:	f002 ffd1 	bl	8003a00 <HAL_TIM_PWM_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000a64:	f000 f986 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a68:	483c      	ldr	r0, [pc, #240]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a6a:	f002 ff68 	bl	800393e <HAL_TIM_OC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000a74:	f000 f97e 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4834      	ldr	r0, [pc, #208]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000a8c:	f003 ff6e 	bl	800496c <HAL_TIMEx_MasterConfigSynchronization>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8000a96:	f000 f96d 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a9a:	2370      	movs	r3, #112	; 0x70
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 8000a9e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000aa2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ab8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000abc:	2200      	movs	r2, #0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4826      	ldr	r0, [pc, #152]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000ac2:	f003 f9db 	bl	8003e7c <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000acc:	f000 f952 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000adc:	2204      	movs	r2, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	481e      	ldr	r0, [pc, #120]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000ae2:	f003 f955 	bl	8003d90 <HAL_TIM_OC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8000aec:	f000 f942 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000af0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af4:	2208      	movs	r2, #8
 8000af6:	4619      	mov	r1, r3
 8000af8:	4818      	ldr	r0, [pc, #96]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000afa:	f003 f949 	bl	8003d90 <HAL_TIM_OC_ConfigChannel>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000b04:	f000 f936 	bl	8000d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4807      	ldr	r0, [pc, #28]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000b3e:	f003 ff7b 	bl	8004a38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8000b48:	f000 f914 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b4c:	4803      	ldr	r0, [pc, #12]	; (8000b5c <MX_TIM1_Init+0x19c>)
 8000b4e:	f000 f9c9 	bl	8000ee4 <HAL_TIM_MspPostInit>

}
 8000b52:	bf00      	nop
 8000b54:	3768      	adds	r7, #104	; 0x68
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200003d4 	.word	0x200003d4
 8000b60:	40012c00 	.word	0x40012c00

08000b64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <MX_USART1_UART_Init+0x5c>)
 8000b6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b6e:	4b13      	ldr	r3, [pc, #76]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_USART1_UART_Init+0x58>)
 8000ba8:	f003 ffbe 	bl	8004b28 <HAL_UART_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bb2:	f000 f8df 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000350 	.word	0x20000350
 8000bc0:	40013800 	.word	0x40013800

08000bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_DMA_Init+0x38>)
 8000bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <MX_DMA_Init+0x38>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6493      	str	r3, [r2, #72]	; 0x48
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_DMA_Init+0x38>)
 8000bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	2011      	movs	r0, #17
 8000be8:	f000 fbff 	bl	80013ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000bec:	2011      	movs	r0, #17
 8000bee:	f000 fc18 	bl	8001422 <HAL_NVIC_EnableIRQ>

}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000

08000c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	601a      	str	r2, [r3, #0]
 8000c0e:	605a      	str	r2, [r3, #4]
 8000c10:	609a      	str	r2, [r3, #8]
 8000c12:	60da      	str	r2, [r3, #12]
 8000c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <MX_GPIO_Init+0xd8>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a2f      	ldr	r2, [pc, #188]	; (8000cd8 <MX_GPIO_Init+0xd8>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b2d      	ldr	r3, [pc, #180]	; (8000cd8 <MX_GPIO_Init+0xd8>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2e:	4b2a      	ldr	r3, [pc, #168]	; (8000cd8 <MX_GPIO_Init+0xd8>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a29      	ldr	r2, [pc, #164]	; (8000cd8 <MX_GPIO_Init+0xd8>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b27      	ldr	r3, [pc, #156]	; (8000cd8 <MX_GPIO_Init+0xd8>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, getImagePin_Pin|GPIO_PIN_4|transferPin_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2132      	movs	r1, #50	; 0x32
 8000c4a:	4824      	ldr	r0, [pc, #144]	; (8000cdc <MX_GPIO_Init+0xdc>)
 8000c4c:	f000 ffa6 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, addrIncTest_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c5a:	f000 ff9f 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c5e:	23ff      	movs	r3, #255	; 0xff
 8000c60:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c66:	2302      	movs	r3, #2
 8000c68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	4619      	mov	r1, r3
 8000c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c74:	f000 fe28 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : getImagePin_Pin transferPin_Pin */
  GPIO_InitStruct.Pin = getImagePin_Pin|transferPin_Pin;
 8000c78:	2322      	movs	r3, #34	; 0x22
 8000c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c80:	2302      	movs	r3, #2
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4813      	ldr	r0, [pc, #76]	; (8000cdc <MX_GPIO_Init+0xdc>)
 8000c90:	f000 fe1a 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : addrIncTest_Pin PA12 */
  GPIO_InitStruct.Pin = addrIncTest_Pin|GPIO_PIN_12;
 8000c94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4619      	mov	r1, r3
 8000cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb0:	f000 fe0a 	bl	80018c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cb4:	2310      	movs	r3, #16
 8000cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 030c 	add.w	r3, r7, #12
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_GPIO_Init+0xdc>)
 8000ccc:	f000 fdfc 	bl	80018c8 <HAL_GPIO_Init>

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	48000400 	.word	0x48000400

08000ce0 <CAM_Handle_Init>:

/* USER CODE BEGIN 4 */
void CAM_Handle_Init(CAM_HandleTypeDef *cam) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	cam->I2C_Address = 0x21;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2221      	movs	r2, #33	; 0x21
 8000cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cam->destination = cameraData;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4a1a      	ldr	r2, [pc, #104]	; (8000d5c <CAM_Handle_Init+0x7c>)
 8000cf4:	621a      	str	r2, [r3, #32]
	cam->hdma = &hdma_tim1_ch3;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <CAM_Handle_Init+0x80>)
 8000cfa:	601a      	str	r2, [r3, #0]
	cam->pic = &pic1;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a19      	ldr	r2, [pc, #100]	; (8000d64 <CAM_Handle_Init+0x84>)
 8000d00:	615a      	str	r2, [r3, #20]
	cam->requestDataTimer = &htim1;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a18      	ldr	r2, [pc, #96]	; (8000d68 <CAM_Handle_Init+0x88>)
 8000d06:	605a      	str	r2, [r3, #4]
	cam->requestDataChannel = TIM_CHANNEL_1;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
	cam->DMATimer = &htim1;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a15      	ldr	r2, [pc, #84]	; (8000d68 <CAM_Handle_Init+0x88>)
 8000d12:	609a      	str	r2, [r3, #8]
	cam->DMAChannel = TIM_CHANNEL_3;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2208      	movs	r2, #8
 8000d18:	611a      	str	r2, [r3, #16]
	cam->source = &(GPIOA->IDR);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <CAM_Handle_Init+0x8c>)
 8000d1e:	61da      	str	r2, [r3, #28]
	cam->status = STANDBY;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2203      	movs	r2, #3
 8000d24:	761a      	strb	r2, [r3, #24]
	cam->I2C_Handler = &hi2c1;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <CAM_Handle_Init+0x90>)
 8000d2a:	629a      	str	r2, [r3, #40]	; 0x28

	cam->pic->x = 0;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	2200      	movs	r2, #0
 8000d32:	801a      	strh	r2, [r3, #0]
	cam->pic->y = 0;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	805a      	strh	r2, [r3, #2]
	cam->pic->height = 480;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	695b      	ldr	r3, [r3, #20]
 8000d40:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d44:	80da      	strh	r2, [r3, #6]
	cam->pic->width = 640;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	695b      	ldr	r3, [r3, #20]
 8000d4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000d4e:	809a      	strh	r2, [r3, #4]

}
 8000d50:	bf00      	nop
 8000d52:	370c      	adds	r7, #12
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	200002b4 	.word	0x200002b4
 8000d64:	20000348 	.word	0x20000348
 8000d68:	200003d4 	.word	0x200003d4
 8000d6c:	48000010 	.word	0x48000010
 8000d70:	200002fc 	.word	0x200002fc

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6613      	str	r3, [r2, #96]	; 0x60
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	6593      	str	r3, [r2, #88]	; 0x58
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x44>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_I2C_MspInit+0x7c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d127      	bne.n	8000e3a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e02:	23c0      	movs	r3, #192	; 0xc0
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e06:	2312      	movs	r3, #18
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e12:	2304      	movs	r3, #4
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <HAL_I2C_MspInit+0x84>)
 8000e1e:	f000 fd53 	bl	80018c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40005400 	.word	0x40005400
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000400 	.word	0x48000400

08000e50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ed4 <HAL_TIM_Base_MspInit+0x84>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d134      	bne.n	8000ecc <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e62:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <HAL_TIM_Base_MspInit+0x88>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <HAL_TIM_Base_MspInit+0x88>)
 8000e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_TIM_Base_MspInit+0x88>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e7c:	4a18      	ldr	r2, [pc, #96]	; (8000ee0 <HAL_TIM_Base_MspInit+0x90>)
 8000e7e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e82:	2207      	movs	r2, #7
 8000e84:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8c:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000e92:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8000eb0:	480a      	ldr	r0, [pc, #40]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000eb2:	f000 fad1 	bl	8001458 <HAL_DMA_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000ebc:	f7ff ff5a 	bl	8000d74 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000ec4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ec6:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_TIM_Base_MspInit+0x8c>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40012c00 	.word	0x40012c00
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	200002b4 	.word	0x200002b4
 8000ee0:	40020080 	.word	0x40020080

08000ee4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <HAL_TIM_MspPostInit+0x68>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d11d      	bne.n	8000f42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_TIM_MspPostInit+0x6c>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <HAL_TIM_MspPostInit+0x6c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_TIM_MspPostInit+0x6c>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3e:	f000 fcc3 	bl	80018c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f42:	bf00      	nop
 8000f44:	3720      	adds	r7, #32
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40012c00 	.word	0x40012c00
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08a      	sub	sp, #40	; 0x28
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <HAL_UART_MspInit+0x80>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d129      	bne.n	8000fca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6613      	str	r3, [r2, #96]	; 0x60
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a11      	ldr	r2, [pc, #68]	; (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_UART_MspInit+0x84>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fa6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fb8:	2307      	movs	r3, #7
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc6:	f000 fc7f 	bl	80018c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fca:	bf00      	nop
 8000fcc:	3728      	adds	r7, #40	; 0x28
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40013800 	.word	0x40013800
 8000fd8:	40021000 	.word	0x40021000

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe0:	e7fe      	b.n	8000fe0 <NMI_Handler+0x4>

08000fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <HardFault_Handler+0x4>

08000fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fec:	e7fe      	b.n	8000fec <MemManage_Handler+0x4>

08000fee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff2:	e7fe      	b.n	8000ff2 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	e7fe      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ffe:	bf00      	nop
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 f8c0 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <DMA1_Channel7_IRQHandler+0x14>)
 8001036:	f000 fb68 	bl	800170a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
  CAM_stopLineTransfer(&hcam);
 800103a:	4803      	ldr	r0, [pc, #12]	; (8001048 <DMA1_Channel7_IRQHandler+0x18>)
 800103c:	f7ff fa83 	bl	8000546 <CAM_stopLineTransfer>

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	200002b4 	.word	0x200002b4
 8001048:	20000420 	.word	0x20000420

0800104c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <SystemInit+0x5c>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <SystemInit+0x5c>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <SystemInit+0x60>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a11      	ldr	r2, [pc, #68]	; (80010ac <SystemInit+0x60>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <SystemInit+0x60>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <SystemInit+0x60>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <SystemInit+0x60>)
 8001078:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800107c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001080:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <SystemInit+0x60>)
 8001084:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001088:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <SystemInit+0x60>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a07      	ldr	r2, [pc, #28]	; (80010ac <SystemInit+0x60>)
 8001090:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001094:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <SystemInit+0x60>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	40021000 	.word	0x40021000

080010b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b4:	f7ff ffca 	bl	800104c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010ba:	e003      	b.n	80010c4 <LoopCopyDataInit>

080010bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010c2:	3104      	adds	r1, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010c4:	480a      	ldr	r0, [pc, #40]	; (80010f0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80010cc:	d3f6      	bcc.n	80010bc <CopyDataInit>
	ldr	r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80010d0:	e002      	b.n	80010d8 <LoopFillZerobss>

080010d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80010d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80010d4:	f842 3b04 	str.w	r3, [r2], #4

080010d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <LoopForever+0x16>)
	cmp	r2, r3
 80010da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80010dc:	d3f9      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010de:	f004 f8e5 	bl	80052ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e2:	f7ff fb69 	bl	80007b8 <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80010ec:	08005374 	.word	0x08005374
	ldr	r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80010f4:	20000298 	.word	0x20000298
	ldr	r2, =_sbss
 80010f8:	20000298 	.word	0x20000298
	ldr	r3, = _ebss
 80010fc:	20000450 	.word	0x20000450

08001100 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_IRQHandler>

08001102 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f000 f961 	bl	80013d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001112:	2000      	movs	r0, #0
 8001114:	f000 f80e 	bl	8001134 <HAL_InitTick>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e001      	b.n	8001128 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001124:	f7ff fe2c 	bl	8000d80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001128:	79fb      	ldrb	r3, [r7, #7]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_InitTick+0x6c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d023      	beq.n	8001190 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <HAL_InitTick+0x70>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_InitTick+0x6c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f96d 	bl	800143e <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10f      	bne.n	800118a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d809      	bhi.n	8001184 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f937 	bl	80013ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117c:	4a0a      	ldr	r2, [pc, #40]	; (80011a8 <HAL_InitTick+0x74>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e007      	b.n	8001194 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e004      	b.n	8001194 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e001      	b.n	8001194 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000294 	.word	0x20000294
 80011a4:	2000028c 	.word	0x2000028c
 80011a8:	20000290 	.word	0x20000290

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000294 	.word	0x20000294
 80011d0:	2000044c 	.word	0x2000044c

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	2000044c 	.word	0x2000044c

080011ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f4:	f7ff ffee 	bl	80011d4 <HAL_GetTick>
 80011f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001204:	d005      	beq.n	8001212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_Delay+0x44>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4413      	add	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001212:	bf00      	nop
 8001214:	f7ff ffde 	bl	80011d4 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	429a      	cmp	r2, r3
 8001222:	d8f7      	bhi.n	8001214 <HAL_Delay+0x28>
  {
  }
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000294 	.word	0x20000294

08001234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001250:	4013      	ands	r3, r2
 8001252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800125c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001266:	4a04      	ldr	r2, [pc, #16]	; (8001278 <__NVIC_SetPriorityGrouping+0x44>)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	60d3      	str	r3, [r2, #12]
}
 800126c:	bf00      	nop
 800126e:	3714      	adds	r7, #20
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <__NVIC_GetPriorityGrouping+0x18>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	f003 0307 	and.w	r3, r3, #7
}
 800128a:	4618      	mov	r0, r3
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	db0b      	blt.n	80012c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	f003 021f 	and.w	r2, r3, #31
 80012b0:	4907      	ldr	r1, [pc, #28]	; (80012d0 <__NVIC_EnableIRQ+0x38>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	095b      	lsrs	r3, r3, #5
 80012b8:	2001      	movs	r0, #1
 80012ba:	fa00 f202 	lsl.w	r2, r0, r2
 80012be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	e000e100 	.word	0xe000e100

080012d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	6039      	str	r1, [r7, #0]
 80012de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	db0a      	blt.n	80012fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	490c      	ldr	r1, [pc, #48]	; (8001320 <__NVIC_SetPriority+0x4c>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	0112      	lsls	r2, r2, #4
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	440b      	add	r3, r1
 80012f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012fc:	e00a      	b.n	8001314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4908      	ldr	r1, [pc, #32]	; (8001324 <__NVIC_SetPriority+0x50>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	3b04      	subs	r3, #4
 800130c:	0112      	lsls	r2, r2, #4
 800130e:	b2d2      	uxtb	r2, r2
 8001310:	440b      	add	r3, r1
 8001312:	761a      	strb	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000e100 	.word	0xe000e100
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001328:	b480      	push	{r7}
 800132a:	b089      	sub	sp, #36	; 0x24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800133c:	69fb      	ldr	r3, [r7, #28]
 800133e:	f1c3 0307 	rsb	r3, r3, #7
 8001342:	2b04      	cmp	r3, #4
 8001344:	bf28      	it	cs
 8001346:	2304      	movcs	r3, #4
 8001348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3304      	adds	r3, #4
 800134e:	2b06      	cmp	r3, #6
 8001350:	d902      	bls.n	8001358 <NVIC_EncodePriority+0x30>
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3b03      	subs	r3, #3
 8001356:	e000      	b.n	800135a <NVIC_EncodePriority+0x32>
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	f04f 32ff 	mov.w	r2, #4294967295
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43da      	mvns	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	401a      	ands	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001370:	f04f 31ff 	mov.w	r1, #4294967295
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa01 f303 	lsl.w	r3, r1, r3
 800137a:	43d9      	mvns	r1, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001380:	4313      	orrs	r3, r2
         );
}
 8001382:	4618      	mov	r0, r3
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3b01      	subs	r3, #1
 800139c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a0:	d301      	bcc.n	80013a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00f      	b.n	80013c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <SysTick_Config+0x40>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ae:	210f      	movs	r1, #15
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f7ff ff8e 	bl	80012d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <SysTick_Config+0x40>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013be:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <SysTick_Config+0x40>)
 80013c0:	2207      	movs	r2, #7
 80013c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	e000e010 	.word	0xe000e010

080013d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff ff29 	bl	8001234 <__NVIC_SetPriorityGrouping>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b086      	sub	sp, #24
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013fc:	f7ff ff3e 	bl	800127c <__NVIC_GetPriorityGrouping>
 8001400:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	6978      	ldr	r0, [r7, #20]
 8001408:	f7ff ff8e 	bl	8001328 <NVIC_EncodePriority>
 800140c:	4602      	mov	r2, r0
 800140e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff ff5d 	bl	80012d4 <__NVIC_SetPriority>
}
 800141a:	bf00      	nop
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff31 	bl	8001298 <__NVIC_EnableIRQ>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ffa2 	bl	8001390 <SysTick_Config>
 800144c:	4603      	mov	r3, r0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e098      	b.n	800159c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4b4d      	ldr	r3, [pc, #308]	; (80015a8 <HAL_DMA_Init+0x150>)
 8001472:	429a      	cmp	r2, r3
 8001474:	d80f      	bhi.n	8001496 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	461a      	mov	r2, r3
 800147c:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <HAL_DMA_Init+0x154>)
 800147e:	4413      	add	r3, r2
 8001480:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <HAL_DMA_Init+0x158>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	009a      	lsls	r2, r3, #2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <HAL_DMA_Init+0x15c>)
 8001492:	641a      	str	r2, [r3, #64]	; 0x40
 8001494:	e00e      	b.n	80014b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <HAL_DMA_Init+0x160>)
 800149e:	4413      	add	r3, r2
 80014a0:	4a43      	ldr	r2, [pc, #268]	; (80015b0 <HAL_DMA_Init+0x158>)
 80014a2:	fba2 2303 	umull	r2, r3, r2, r3
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	009a      	lsls	r2, r3, #2
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a42      	ldr	r2, [pc, #264]	; (80015bc <HAL_DMA_Init+0x164>)
 80014b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2202      	movs	r2, #2
 80014b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a1b      	ldr	r3, [r3, #32]
 80014f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800150e:	d039      	beq.n	8001584 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	4a27      	ldr	r2, [pc, #156]	; (80015b4 <HAL_DMA_Init+0x15c>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d11a      	bne.n	8001550 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <HAL_DMA_Init+0x168>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f003 031c 	and.w	r3, r3, #28
 8001526:	210f      	movs	r1, #15
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	4924      	ldr	r1, [pc, #144]	; (80015c0 <HAL_DMA_Init+0x168>)
 8001530:	4013      	ands	r3, r2
 8001532:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_DMA_Init+0x168>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6859      	ldr	r1, [r3, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	f003 031c 	and.w	r3, r3, #28
 8001544:	fa01 f303 	lsl.w	r3, r1, r3
 8001548:	491d      	ldr	r1, [pc, #116]	; (80015c0 <HAL_DMA_Init+0x168>)
 800154a:	4313      	orrs	r3, r2
 800154c:	600b      	str	r3, [r1, #0]
 800154e:	e019      	b.n	8001584 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001550:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_DMA_Init+0x16c>)
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001558:	f003 031c 	and.w	r3, r3, #28
 800155c:	210f      	movs	r1, #15
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	4917      	ldr	r1, [pc, #92]	; (80015c4 <HAL_DMA_Init+0x16c>)
 8001566:	4013      	ands	r3, r2
 8001568:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_DMA_Init+0x16c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6859      	ldr	r1, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f003 031c 	and.w	r3, r3, #28
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	4911      	ldr	r1, [pc, #68]	; (80015c4 <HAL_DMA_Init+0x16c>)
 8001580:	4313      	orrs	r3, r2
 8001582:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	40020407 	.word	0x40020407
 80015ac:	bffdfff8 	.word	0xbffdfff8
 80015b0:	cccccccd 	.word	0xcccccccd
 80015b4:	40020000 	.word	0x40020000
 80015b8:	bffdfbf8 	.word	0xbffdfbf8
 80015bc:	40020400 	.word	0x40020400
 80015c0:	400200a8 	.word	0x400200a8
 80015c4:	400204a8 	.word	0x400204a8

080015c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
 80015d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_DMA_Start_IT+0x20>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e04b      	b.n	8001680 <HAL_DMA_Start_IT+0xb8>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d13a      	bne.n	8001672 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	68b9      	ldr	r1, [r7, #8]
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f000 f921 	bl	8001868 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	2b00      	cmp	r3, #0
 800162c:	d008      	beq.n	8001640 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 020e 	orr.w	r2, r2, #14
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e00f      	b.n	8001660 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0204 	bic.w	r2, r2, #4
 800164e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 020a 	orr.w	r2, r2, #10
 800165e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	e005      	b.n	800167e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800167a:	2302      	movs	r3, #2
 800167c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800167e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d005      	beq.n	80016ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2204      	movs	r2, #4
 80016a4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	e029      	b.n	8001700 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f022 020e 	bic.w	r2, r2, #14
 80016ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	f003 021c 	and.w	r2, r3, #28
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	2101      	movs	r1, #1
 80016da:	fa01 f202 	lsl.w	r2, r1, r2
 80016de:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d003      	beq.n	8001700 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	4798      	blx	r3
    }
  }
  return status;
 8001700:	7bfb      	ldrb	r3, [r7, #15]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001726:	f003 031c 	and.w	r3, r3, #28
 800172a:	2204      	movs	r2, #4
 800172c:	409a      	lsls	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d026      	beq.n	8001784 <HAL_DMA_IRQHandler+0x7a>
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	d021      	beq.n	8001784 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0320 	and.w	r3, r3, #32
 800174a:	2b00      	cmp	r3, #0
 800174c:	d107      	bne.n	800175e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0204 	bic.w	r2, r2, #4
 800175c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f003 021c 	and.w	r2, r3, #28
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	2104      	movs	r1, #4
 800176c:	fa01 f202 	lsl.w	r2, r1, r2
 8001770:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	2b00      	cmp	r3, #0
 8001778:	d071      	beq.n	800185e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001782:	e06c      	b.n	800185e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	f003 031c 	and.w	r3, r3, #28
 800178c:	2202      	movs	r2, #2
 800178e:	409a      	lsls	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4013      	ands	r3, r2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d02e      	beq.n	80017f6 <HAL_DMA_IRQHandler+0xec>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d029      	beq.n	80017f6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0320 	and.w	r3, r3, #32
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d10b      	bne.n	80017c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 020a 	bic.w	r2, r2, #10
 80017be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017cc:	f003 021c 	and.w	r2, r3, #28
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	2102      	movs	r1, #2
 80017d6:	fa01 f202 	lsl.w	r2, r1, r2
 80017da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d038      	beq.n	800185e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80017f4:	e033      	b.n	800185e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017fa:	f003 031c 	and.w	r3, r3, #28
 80017fe:	2208      	movs	r2, #8
 8001800:	409a      	lsls	r2, r3
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4013      	ands	r3, r2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d02a      	beq.n	8001860 <HAL_DMA_IRQHandler+0x156>
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	2b00      	cmp	r3, #0
 8001812:	d025      	beq.n	8001860 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 020e 	bic.w	r2, r2, #14
 8001822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	f003 021c 	and.w	r2, r3, #28
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2101      	movs	r1, #1
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800185e:	bf00      	nop
 8001860:	bf00      	nop
}
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f003 021c 	and.w	r2, r3, #28
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	2101      	movs	r1, #1
 8001884:	fa01 f202 	lsl.w	r2, r1, r2
 8001888:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	2b10      	cmp	r3, #16
 8001898:	d108      	bne.n	80018ac <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018aa:	e007      	b.n	80018bc <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68ba      	ldr	r2, [r7, #8]
 80018b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	60da      	str	r2, [r3, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b087      	sub	sp, #28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d6:	e148      	b.n	8001b6a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2101      	movs	r1, #1
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	4013      	ands	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 813a 	beq.w	8001b64 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d00b      	beq.n	8001910 <HAL_GPIO_Init+0x48>
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d007      	beq.n	8001910 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001904:	2b11      	cmp	r3, #17
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b12      	cmp	r3, #18
 800190e:	d130      	bne.n	8001972 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	2203      	movs	r2, #3
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68da      	ldr	r2, [r3, #12]
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001946:	2201      	movs	r2, #1
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4013      	ands	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	091b      	lsrs	r3, r3, #4
 800195c:	f003 0201 	and.w	r2, r3, #1
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	2203      	movs	r2, #3
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0xea>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b12      	cmp	r3, #18
 80019b0:	d123      	bne.n	80019fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	08da      	lsrs	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3208      	adds	r2, #8
 80019ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	220f      	movs	r2, #15
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4013      	ands	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	08da      	lsrs	r2, r3, #3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3208      	adds	r2, #8
 80019f4:	6939      	ldr	r1, [r7, #16]
 80019f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	2203      	movs	r2, #3
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0203 	and.w	r2, r3, #3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	f000 8094 	beq.w	8001b64 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3c:	4b52      	ldr	r3, [pc, #328]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a40:	4a51      	ldr	r2, [pc, #324]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6613      	str	r3, [r2, #96]	; 0x60
 8001a48:	4b4f      	ldr	r3, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x2c0>)
 8001a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a54:	4a4d      	ldr	r2, [pc, #308]	; (8001b8c <HAL_GPIO_Init+0x2c4>)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	089b      	lsrs	r3, r3, #2
 8001a5a:	3302      	adds	r3, #2
 8001a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4013      	ands	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a7e:	d00d      	beq.n	8001a9c <HAL_GPIO_Init+0x1d4>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a43      	ldr	r2, [pc, #268]	; (8001b90 <HAL_GPIO_Init+0x2c8>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d007      	beq.n	8001a98 <HAL_GPIO_Init+0x1d0>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a42      	ldr	r2, [pc, #264]	; (8001b94 <HAL_GPIO_Init+0x2cc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_GPIO_Init+0x1cc>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e004      	b.n	8001a9e <HAL_GPIO_Init+0x1d6>
 8001a94:	2307      	movs	r3, #7
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x1d6>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_GPIO_Init+0x1d6>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4093      	lsls	r3, r2
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aae:	4937      	ldr	r1, [pc, #220]	; (8001b8c <HAL_GPIO_Init+0x2c4>)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_GPIO_Init+0x2d0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ae0:	4a2d      	ldr	r2, [pc, #180]	; (8001b98 <HAL_GPIO_Init+0x2d0>)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <HAL_GPIO_Init+0x2d0>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b0a:	4a23      	ldr	r2, [pc, #140]	; (8001b98 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b10:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <HAL_GPIO_Init+0x2d0>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b34:	4a18      	ldr	r2, [pc, #96]	; (8001b98 <HAL_GPIO_Init+0x2d0>)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <HAL_GPIO_Init+0x2d0>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b5e:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <HAL_GPIO_Init+0x2d0>)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f47f aeaf 	bne.w	80018d8 <HAL_GPIO_Init+0x10>
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	48000400 	.word	0x48000400
 8001b94:	48000800 	.word	0x48000800
 8001b98:	40010400 	.word	0x40010400

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bb8:	e002      	b.n	8001bc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e081      	b.n	8001ce2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d106      	bne.n	8001bf8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff f8e8 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2224      	movs	r2, #36	; 0x24
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d107      	bne.n	8001c46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c42:	609a      	str	r2, [r3, #8]
 8001c44:	e006      	b.n	8001c54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d104      	bne.n	8001c66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	ea42 0103 	orr.w	r1, r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	021a      	lsls	r2, r3, #8
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69d9      	ldr	r1, [r3, #28]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1a      	ldr	r2, [r3, #32]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2220      	movs	r2, #32
 8001cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af02      	add	r7, sp, #8
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	817b      	strh	r3, [r7, #10]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b20      	cmp	r3, #32
 8001d0a:	f040 80da 	bne.w	8001ec2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_I2C_Master_Transmit+0x30>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e0d3      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d24:	f7ff fa56 	bl	80011d4 <HAL_GetTick>
 8001d28:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2319      	movs	r3, #25
 8001d30:	2201      	movs	r2, #1
 8001d32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f9e6 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0be      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2221      	movs	r2, #33	; 0x21
 8001d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2210      	movs	r2, #16
 8001d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	893a      	ldrh	r2, [r7, #8]
 8001d66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	2bff      	cmp	r3, #255	; 0xff
 8001d76:	d90e      	bls.n	8001d96 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	22ff      	movs	r2, #255	; 0xff
 8001d7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	8979      	ldrh	r1, [r7, #10]
 8001d86:	4b51      	ldr	r3, [pc, #324]	; (8001ecc <HAL_I2C_Master_Transmit+0x1e0>)
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fb48 	bl	8002424 <I2C_TransferConfig>
 8001d94:	e06c      	b.n	8001e70 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	8979      	ldrh	r1, [r7, #10]
 8001da8:	4b48      	ldr	r3, [pc, #288]	; (8001ecc <HAL_I2C_Master_Transmit+0x1e0>)
 8001daa:	9300      	str	r3, [sp, #0]
 8001dac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 fb37 	bl	8002424 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001db6:	e05b      	b.n	8001e70 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db8:	697a      	ldr	r2, [r7, #20]
 8001dba:	6a39      	ldr	r1, [r7, #32]
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 f9e3 	bl	8002188 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e07b      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	3b01      	subs	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d034      	beq.n	8001e70 <HAL_I2C_Master_Transmit+0x184>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d130      	bne.n	8001e70 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	2200      	movs	r2, #0
 8001e16:	2180      	movs	r1, #128	; 0x80
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f975 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e04d      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d90e      	bls.n	8001e50 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	22ff      	movs	r2, #255	; 0xff
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	8979      	ldrh	r1, [r7, #10]
 8001e40:	2300      	movs	r3, #0
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 faeb 	bl	8002424 <I2C_TransferConfig>
 8001e4e:	e00f      	b.n	8001e70 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	8979      	ldrh	r1, [r7, #10]
 8001e62:	2300      	movs	r3, #0
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 fada 	bl	8002424 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d19e      	bne.n	8001db8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	6a39      	ldr	r1, [r7, #32]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f9c2 	bl	8002208 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e01a      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2220      	movs	r2, #32
 8001e94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6859      	ldr	r1, [r3, #4]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001ea2:	400b      	ands	r3, r1
 8001ea4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2220      	movs	r2, #32
 8001eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001ec2:	2302      	movs	r3, #2
  }
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	80002000 	.word	0x80002000
 8001ed0:	fe00e800 	.word	0xfe00e800

08001ed4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	607a      	str	r2, [r7, #4]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	817b      	strh	r3, [r7, #10]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	f040 80db 	bne.w	80020ac <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d101      	bne.n	8001f04 <HAL_I2C_Master_Receive+0x30>
 8001f00:	2302      	movs	r3, #2
 8001f02:	e0d4      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2201      	movs	r2, #1
 8001f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f0c:	f7ff f962 	bl	80011d4 <HAL_GetTick>
 8001f10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2319      	movs	r3, #25
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f8f2 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0bf      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2222      	movs	r2, #34	; 0x22
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2210      	movs	r2, #16
 8001f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	893a      	ldrh	r2, [r7, #8]
 8001f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	2bff      	cmp	r3, #255	; 0xff
 8001f5e:	d90e      	bls.n	8001f7e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	22ff      	movs	r2, #255	; 0xff
 8001f64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	8979      	ldrh	r1, [r7, #10]
 8001f6e:	4b52      	ldr	r3, [pc, #328]	; (80020b8 <HAL_I2C_Master_Receive+0x1e4>)
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f000 fa54 	bl	8002424 <I2C_TransferConfig>
 8001f7c:	e06d      	b.n	800205a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f8c:	b2da      	uxtb	r2, r3
 8001f8e:	8979      	ldrh	r1, [r7, #10]
 8001f90:	4b49      	ldr	r3, [pc, #292]	; (80020b8 <HAL_I2C_Master_Receive+0x1e4>)
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 fa43 	bl	8002424 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001f9e:	e05c      	b.n	800205a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa0:	697a      	ldr	r2, [r7, #20]
 8001fa2:	6a39      	ldr	r1, [r7, #32]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f96b 	bl	8002280 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e07c      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d034      	beq.n	800205a <HAL_I2C_Master_Receive+0x186>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d130      	bne.n	800205a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	6a3b      	ldr	r3, [r7, #32]
 8001ffe:	2200      	movs	r2, #0
 8002000:	2180      	movs	r1, #128	; 0x80
 8002002:	68f8      	ldr	r0, [r7, #12]
 8002004:	f000 f880 	bl	8002108 <I2C_WaitOnFlagUntilTimeout>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e04d      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002016:	b29b      	uxth	r3, r3
 8002018:	2bff      	cmp	r3, #255	; 0xff
 800201a:	d90e      	bls.n	800203a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	22ff      	movs	r2, #255	; 0xff
 8002020:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	b2da      	uxtb	r2, r3
 8002028:	8979      	ldrh	r1, [r7, #10]
 800202a:	2300      	movs	r3, #0
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 f9f6 	bl	8002424 <I2C_TransferConfig>
 8002038:	e00f      	b.n	800205a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002048:	b2da      	uxtb	r2, r3
 800204a:	8979      	ldrh	r1, [r7, #10]
 800204c:	2300      	movs	r3, #0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f9e5 	bl	8002424 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205e:	b29b      	uxth	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d19d      	bne.n	8001fa0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	6a39      	ldr	r1, [r7, #32]
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f000 f8cd 	bl	8002208 <I2C_WaitOnSTOPFlagUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e01a      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2220      	movs	r2, #32
 800207e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6859      	ldr	r1, [r3, #4]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_I2C_Master_Receive+0x1e8>)
 800208c:	400b      	ands	r3, r1
 800208e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2220      	movs	r2, #32
 8002094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	80002400 	.word	0x80002400
 80020bc:	fe00e800 	.word	0xfe00e800

080020c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d103      	bne.n	80020de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2200      	movs	r2, #0
 80020dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d007      	beq.n	80020fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 0201 	orr.w	r2, r2, #1
 80020fa:	619a      	str	r2, [r3, #24]
  }
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	603b      	str	r3, [r7, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002118:	e022      	b.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d01e      	beq.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002122:	f7ff f857 	bl	80011d4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d302      	bcc.n	8002138 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d113      	bne.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	f043 0220 	orr.w	r2, r3, #32
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e00f      	b.n	8002180 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4013      	ands	r3, r2
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	429a      	cmp	r2, r3
 800216e:	bf0c      	ite	eq
 8002170:	2301      	moveq	r3, #1
 8002172:	2300      	movne	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	429a      	cmp	r2, r3
 800217c:	d0cd      	beq.n	800211a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002194:	e02c      	b.n	80021f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 f8dc 	bl	8002358 <I2C_IsAcknowledgeFailed>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e02a      	b.n	8002200 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d01e      	beq.n	80021f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b2:	f7ff f80f 	bl	80011d4 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d113      	bne.n	80021f0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021cc:	f043 0220 	orr.w	r2, r3, #32
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2220      	movs	r2, #32
 80021d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e007      	b.n	8002200 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d1cb      	bne.n	8002196 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002214:	e028      	b.n	8002268 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	68f8      	ldr	r0, [r7, #12]
 800221c:	f000 f89c 	bl	8002358 <I2C_IsAcknowledgeFailed>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e026      	b.n	8002278 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222a:	f7fe ffd3 	bl	80011d4 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	429a      	cmp	r2, r3
 8002238:	d302      	bcc.n	8002240 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d113      	bne.n	8002268 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f043 0220 	orr.w	r2, r3, #32
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2200      	movs	r2, #0
 8002258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e007      	b.n	8002278 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b20      	cmp	r3, #32
 8002274:	d1cf      	bne.n	8002216 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800228c:	e055      	b.n	800233a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 f860 	bl	8002358 <I2C_IsAcknowledgeFailed>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e053      	b.n	800234a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d129      	bne.n	8002304 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d105      	bne.n	80022ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80022c6:	2300      	movs	r3, #0
 80022c8:	e03f      	b.n	800234a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2220      	movs	r2, #32
 80022d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6859      	ldr	r1, [r3, #4]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80022de:	400b      	ands	r3, r1
 80022e0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2200      	movs	r2, #0
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2220      	movs	r2, #32
 80022ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e022      	b.n	800234a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002304:	f7fe ff66 	bl	80011d4 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	429a      	cmp	r2, r3
 8002312:	d302      	bcc.n	800231a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10f      	bne.n	800233a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f043 0220 	orr.w	r2, r3, #32
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e007      	b.n	800234a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b04      	cmp	r3, #4
 8002346:	d1a2      	bne.n	800228e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	fe00e800 	.word	0xfe00e800

08002358 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b10      	cmp	r3, #16
 8002370:	d151      	bne.n	8002416 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002372:	e022      	b.n	80023ba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800237a:	d01e      	beq.n	80023ba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237c:	f7fe ff2a 	bl	80011d4 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	429a      	cmp	r2, r3
 800238a:	d302      	bcc.n	8002392 <I2C_IsAcknowledgeFailed+0x3a>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d113      	bne.n	80023ba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	f043 0220 	orr.w	r2, r3, #32
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e02e      	b.n	8002418 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0320 	and.w	r3, r3, #32
 80023c4:	2b20      	cmp	r3, #32
 80023c6:	d1d5      	bne.n	8002374 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2210      	movs	r2, #16
 80023ce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2220      	movs	r2, #32
 80023d6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f7ff fe71 	bl	80020c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <I2C_IsAcknowledgeFailed+0xc8>)
 80023ea:	400b      	ands	r3, r1
 80023ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f043 0204 	orr.w	r2, r3, #4
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e000      	b.n	8002418 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	fe00e800 	.word	0xfe00e800

08002424 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	607b      	str	r3, [r7, #4]
 800242e:	460b      	mov	r3, r1
 8002430:	817b      	strh	r3, [r7, #10]
 8002432:	4613      	mov	r3, r2
 8002434:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	0d5b      	lsrs	r3, r3, #21
 8002440:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <I2C_TransferConfig+0x58>)
 8002446:	430b      	orrs	r3, r1
 8002448:	43db      	mvns	r3, r3
 800244a:	ea02 0103 	and.w	r1, r2, r3
 800244e:	897b      	ldrh	r3, [r7, #10]
 8002450:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002454:	7a7b      	ldrb	r3, [r7, #9]
 8002456:	041b      	lsls	r3, r3, #16
 8002458:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	431a      	orrs	r2, r3
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	431a      	orrs	r2, r3
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	03ff63ff 	.word	0x03ff63ff

08002480 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b20      	cmp	r3, #32
 8002494:	d138      	bne.n	8002508 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e032      	b.n	800250a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2224      	movs	r2, #36	; 0x24
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b20      	cmp	r3, #32
 800252a:	d139      	bne.n	80025a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002536:	2302      	movs	r3, #2
 8002538:	e033      	b.n	80025a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2224      	movs	r2, #36	; 0x24
 8002546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002568:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	4313      	orrs	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2220      	movs	r2, #32
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2200      	movs	r2, #0
 8002598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
	...

080025b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40007000 	.word	0x40007000

080025cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025da:	d130      	bne.n	800263e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025dc:	4b23      	ldr	r3, [pc, #140]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025e8:	d038      	beq.n	800265c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ea:	4b20      	ldr	r3, [pc, #128]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025f2:	4a1e      	ldr	r2, [pc, #120]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2232      	movs	r2, #50	; 0x32
 8002600:	fb02 f303 	mul.w	r3, r2, r3
 8002604:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002606:	fba2 2303 	umull	r2, r3, r2, r3
 800260a:	0c9b      	lsrs	r3, r3, #18
 800260c:	3301      	adds	r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002610:	e002      	b.n	8002618 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3b01      	subs	r3, #1
 8002616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002618:	4b14      	ldr	r3, [pc, #80]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261a:	695b      	ldr	r3, [r3, #20]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002624:	d102      	bne.n	800262c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f2      	bne.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002638:	d110      	bne.n	800265c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e00f      	b.n	800265e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264a:	d007      	beq.n	800265c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800264c:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002654:	4a05      	ldr	r2, [pc, #20]	; (800266c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40007000 	.word	0x40007000
 8002670:	2000028c 	.word	0x2000028c
 8002674:	431bde83 	.word	0x431bde83

08002678 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	f000 bc11 	b.w	8002eae <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800268c:	4ba0      	ldr	r3, [pc, #640]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 030c 	and.w	r3, r3, #12
 8002694:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002696:	4b9e      	ldr	r3, [pc, #632]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 80e4 	beq.w	8002876 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4c>
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	f040 808b 	bne.w	80027d2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	f040 8087 	bne.w	80027d2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c4:	4b92      	ldr	r3, [pc, #584]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d005      	beq.n	80026dc <HAL_RCC_OscConfig+0x64>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e3e8      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1a      	ldr	r2, [r3, #32]
 80026e0:	4b8b      	ldr	r3, [pc, #556]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d004      	beq.n	80026f6 <HAL_RCC_OscConfig+0x7e>
 80026ec:	4b88      	ldr	r3, [pc, #544]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026f4:	e005      	b.n	8002702 <HAL_RCC_OscConfig+0x8a>
 80026f6:	4b86      	ldr	r3, [pc, #536]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80026f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002702:	4293      	cmp	r3, r2
 8002704:	d223      	bcs.n	800274e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 fd7a 	bl	8003204 <RCC_SetFlashLatencyFromMSIRange>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e3c9      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800271a:	4b7d      	ldr	r3, [pc, #500]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a7c      	ldr	r2, [pc, #496]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	4b7a      	ldr	r3, [pc, #488]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	4977      	ldr	r1, [pc, #476]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002738:	4b75      	ldr	r3, [pc, #468]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	021b      	lsls	r3, r3, #8
 8002746:	4972      	ldr	r1, [pc, #456]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e025      	b.n	800279a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800274e:	4b70      	ldr	r3, [pc, #448]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6f      	ldr	r2, [pc, #444]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002754:	f043 0308 	orr.w	r3, r3, #8
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a1b      	ldr	r3, [r3, #32]
 8002766:	496a      	ldr	r1, [pc, #424]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800276c:	4b68      	ldr	r3, [pc, #416]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	021b      	lsls	r3, r3, #8
 800277a:	4965      	ldr	r1, [pc, #404]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 fd3a 	bl	8003204 <RCC_SetFlashLatencyFromMSIRange>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e389      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800279a:	f000 fc6f 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	495a      	ldr	r1, [pc, #360]	; (8002914 <HAL_RCC_OscConfig+0x29c>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	fa22 f303 	lsr.w	r3, r2, r3
 80027b6:	4a58      	ldr	r2, [pc, #352]	; (8002918 <HAL_RCC_OscConfig+0x2a0>)
 80027b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027ba:	4b58      	ldr	r3, [pc, #352]	; (800291c <HAL_RCC_OscConfig+0x2a4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fcb8 	bl	8001134 <HAL_InitTick>
 80027c4:	4603      	mov	r3, r0
 80027c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d052      	beq.n	8002874 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80027ce:	7bfb      	ldrb	r3, [r7, #15]
 80027d0:	e36d      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d032      	beq.n	8002840 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80027da:	4b4d      	ldr	r3, [pc, #308]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a4c      	ldr	r2, [pc, #304]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fcf5 	bl	80011d4 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ee:	f7fe fcf1 	bl	80011d4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e356      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002800:	4b43      	ldr	r3, [pc, #268]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280c:	4b40      	ldr	r3, [pc, #256]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a3f      	ldr	r2, [pc, #252]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002812:	f043 0308 	orr.w	r3, r3, #8
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	493a      	ldr	r1, [pc, #232]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282a:	4b39      	ldr	r3, [pc, #228]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	4935      	ldr	r1, [pc, #212]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
 800283e:	e01a      	b.n	8002876 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002840:	4b33      	ldr	r3, [pc, #204]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a32      	ldr	r2, [pc, #200]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800284c:	f7fe fcc2 	bl	80011d4 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002854:	f7fe fcbe 	bl	80011d4 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e323      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002866:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x1dc>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	2b00      	cmp	r3, #0
 8002880:	d073      	beq.n	800296a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b08      	cmp	r3, #8
 8002886:	d005      	beq.n	8002894 <HAL_RCC_OscConfig+0x21c>
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	2b0c      	cmp	r3, #12
 800288c:	d10e      	bne.n	80028ac <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d10b      	bne.n	80028ac <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002894:	4b1e      	ldr	r3, [pc, #120]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d063      	beq.n	8002968 <HAL_RCC_OscConfig+0x2f0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d15f      	bne.n	8002968 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e300      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028b4:	d106      	bne.n	80028c4 <HAL_RCC_OscConfig+0x24c>
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e01d      	b.n	8002900 <HAL_RCC_OscConfig+0x288>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCC_OscConfig+0x270>
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a0f      	ldr	r2, [pc, #60]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80028d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80028e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0x288>
 80028e8:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a08      	ldr	r2, [pc, #32]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80028ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a05      	ldr	r2, [pc, #20]	; (8002910 <HAL_RCC_OscConfig+0x298>)
 80028fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fc64 	bl	80011d4 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800290e:	e010      	b.n	8002932 <HAL_RCC_OscConfig+0x2ba>
 8002910:	40021000 	.word	0x40021000
 8002914:	0800531c 	.word	0x0800531c
 8002918:	2000028c 	.word	0x2000028c
 800291c:	20000290 	.word	0x20000290
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002920:	f7fe fc58 	bl	80011d4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b64      	cmp	r3, #100	; 0x64
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e2bd      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002932:	4baf      	ldr	r3, [pc, #700]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x2a8>
 800293e:	e014      	b.n	800296a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002940:	f7fe fc48 	bl	80011d4 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002948:	f7fe fc44 	bl	80011d4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e2a9      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800295a:	4ba5      	ldr	r3, [pc, #660]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x2d0>
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d060      	beq.n	8002a38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d005      	beq.n	8002988 <HAL_RCC_OscConfig+0x310>
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d119      	bne.n	80029b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d116      	bne.n	80029b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002988:	4b99      	ldr	r3, [pc, #612]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_OscConfig+0x328>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e286      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a0:	4b93      	ldr	r3, [pc, #588]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	4990      	ldr	r1, [pc, #576]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029b4:	e040      	b.n	8002a38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d023      	beq.n	8002a06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029be:	4b8c      	ldr	r3, [pc, #560]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a8b      	ldr	r2, [pc, #556]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ca:	f7fe fc03 	bl	80011d4 <HAL_GetTick>
 80029ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d0:	e008      	b.n	80029e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029d2:	f7fe fbff 	bl	80011d4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d901      	bls.n	80029e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e264      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029e4:	4b82      	ldr	r3, [pc, #520]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0f0      	beq.n	80029d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f0:	4b7f      	ldr	r3, [pc, #508]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	061b      	lsls	r3, r3, #24
 80029fe:	497c      	ldr	r1, [pc, #496]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]
 8002a04:	e018      	b.n	8002a38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a06:	4b7a      	ldr	r3, [pc, #488]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a79      	ldr	r2, [pc, #484]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe fbdf 	bl	80011d4 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a1a:	f7fe fbdb 	bl	80011d4 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e240      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a2c:	4b70      	ldr	r3, [pc, #448]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1f0      	bne.n	8002a1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0308 	and.w	r3, r3, #8
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d03c      	beq.n	8002abe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01c      	beq.n	8002a86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a4c:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a52:	4a67      	ldr	r2, [pc, #412]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5c:	f7fe fbba 	bl	80011d4 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a64:	f7fe fbb6 	bl	80011d4 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e21b      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a76:	4b5e      	ldr	r3, [pc, #376]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0ef      	beq.n	8002a64 <HAL_RCC_OscConfig+0x3ec>
 8002a84:	e01b      	b.n	8002abe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a86:	4b5a      	ldr	r3, [pc, #360]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002a88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8c:	4a58      	ldr	r2, [pc, #352]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002a8e:	f023 0301 	bic.w	r3, r3, #1
 8002a92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a96:	f7fe fb9d 	bl	80011d4 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9e:	f7fe fb99 	bl	80011d4 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e1fe      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ab0:	4b4f      	ldr	r3, [pc, #316]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1ef      	bne.n	8002a9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 80a6 	beq.w	8002c18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002acc:	2300      	movs	r3, #0
 8002ace:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ad0:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10d      	bne.n	8002af8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	4b44      	ldr	r3, [pc, #272]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	4a43      	ldr	r2, [pc, #268]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae8:	4b41      	ldr	r3, [pc, #260]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af4:	2301      	movs	r3, #1
 8002af6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002af8:	4b3e      	ldr	r3, [pc, #248]	; (8002bf4 <HAL_RCC_OscConfig+0x57c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d118      	bne.n	8002b36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b04:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <HAL_RCC_OscConfig+0x57c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a3a      	ldr	r2, [pc, #232]	; (8002bf4 <HAL_RCC_OscConfig+0x57c>)
 8002b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b10:	f7fe fb60 	bl	80011d4 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b18:	f7fe fb5c 	bl	80011d4 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e1c1      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b2a:	4b32      	ldr	r3, [pc, #200]	; (8002bf4 <HAL_RCC_OscConfig+0x57c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d0f0      	beq.n	8002b18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d108      	bne.n	8002b50 <HAL_RCC_OscConfig+0x4d8>
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4a2a      	ldr	r2, [pc, #168]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b4e:	e024      	b.n	8002b9a <HAL_RCC_OscConfig+0x522>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	d110      	bne.n	8002b7a <HAL_RCC_OscConfig+0x502>
 8002b58:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5e:	4a24      	ldr	r2, [pc, #144]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b68:	4b21      	ldr	r3, [pc, #132]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	4a20      	ldr	r2, [pc, #128]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b78:	e00f      	b.n	8002b9a <HAL_RCC_OscConfig+0x522>
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b8a:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b90:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002b92:	f023 0304 	bic.w	r3, r3, #4
 8002b96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d016      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7fe fb17 	bl	80011d4 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fb13 	bl	80011d4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e176      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_OscConfig+0x578>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0ed      	beq.n	8002baa <HAL_RCC_OscConfig+0x532>
 8002bce:	e01a      	b.n	8002c06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd0:	f7fe fb00 	bl	80011d4 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bd6:	e00f      	b.n	8002bf8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fe fafc 	bl	80011d4 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d906      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e15f      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
 8002bee:	bf00      	nop
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bf8:	4baa      	ldr	r3, [pc, #680]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1e8      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c06:	7ffb      	ldrb	r3, [r7, #31]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d105      	bne.n	8002c18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0c:	4ba5      	ldr	r3, [pc, #660]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c10:	4aa4      	ldr	r2, [pc, #656]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c16:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0320 	and.w	r3, r3, #32
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d03c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01c      	beq.n	8002c66 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c2c:	4b9d      	ldr	r3, [pc, #628]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c32:	4a9c      	ldr	r2, [pc, #624]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3c:	f7fe faca 	bl	80011d4 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c44:	f7fe fac6 	bl	80011d4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e12b      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c56:	4b93      	ldr	r3, [pc, #588]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d0ef      	beq.n	8002c44 <HAL_RCC_OscConfig+0x5cc>
 8002c64:	e01b      	b.n	8002c9e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c66:	4b8f      	ldr	r3, [pc, #572]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c6c:	4a8d      	ldr	r2, [pc, #564]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c76:	f7fe faad 	bl	80011d4 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c7e:	f7fe faa9 	bl	80011d4 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e10e      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c90:	4b84      	ldr	r3, [pc, #528]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ef      	bne.n	8002c7e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8102 	beq.w	8002eac <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	f040 80c5 	bne.w	8002e3c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cb2:	4b7c      	ldr	r3, [pc, #496]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 0203 	and.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d12c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d123      	bne.n	8002d20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d11b      	bne.n	8002d20 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d113      	bne.n	8002d20 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	085b      	lsrs	r3, r3, #1
 8002d04:	3b01      	subs	r3, #1
 8002d06:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d109      	bne.n	8002d20 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d067      	beq.n	8002df0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d062      	beq.n	8002dec <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d26:	4b5f      	ldr	r3, [pc, #380]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e0bb      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d36:	4b5b      	ldr	r3, [pc, #364]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a5a      	ldr	r2, [pc, #360]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002d3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d40:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d42:	f7fe fa47 	bl	80011d4 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe fa43 	bl	80011d4 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e0a8      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1f0      	bne.n	8002d4a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d68:	4b4e      	ldr	r3, [pc, #312]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ea8 <HAL_RCC_OscConfig+0x830>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d78:	3a01      	subs	r2, #1
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	4311      	orrs	r1, r2
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d82:	0212      	lsls	r2, r2, #8
 8002d84:	4311      	orrs	r1, r2
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002d8a:	0852      	lsrs	r2, r2, #1
 8002d8c:	3a01      	subs	r2, #1
 8002d8e:	0552      	lsls	r2, r2, #21
 8002d90:	4311      	orrs	r1, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d96:	0852      	lsrs	r2, r2, #1
 8002d98:	3a01      	subs	r2, #1
 8002d9a:	0652      	lsls	r2, r2, #25
 8002d9c:	4311      	orrs	r1, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002da2:	06d2      	lsls	r2, r2, #27
 8002da4:	430a      	orrs	r2, r1
 8002da6:	493f      	ldr	r1, [pc, #252]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dac:	4b3d      	ldr	r3, [pc, #244]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a3c      	ldr	r2, [pc, #240]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002db6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002db8:	4b3a      	ldr	r3, [pc, #232]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	4a39      	ldr	r2, [pc, #228]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dc2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc4:	f7fe fa06 	bl	80011d4 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe fa02 	bl	80011d4 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e067      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dde:	4b31      	ldr	r3, [pc, #196]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f0      	beq.n	8002dcc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dea:	e05f      	b.n	8002eac <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e05e      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002df0:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d157      	bne.n	8002eac <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002dfc:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a28      	ldr	r2, [pc, #160]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e08:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	4a25      	ldr	r2, [pc, #148]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e14:	f7fe f9de 	bl	80011d4 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe f9da 	bl	80011d4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e03f      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x7a4>
 8002e3a:	e037      	b.n	8002eac <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	2b0c      	cmp	r3, #12
 8002e40:	d02d      	beq.n	8002e9e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e4c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d105      	bne.n	8002e66 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e60:	f023 0303 	bic.w	r3, r3, #3
 8002e64:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e6c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e74:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7fe f9ad 	bl	80011d4 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fe f9a9 	bl	80011d4 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e00e      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e90:	4b04      	ldr	r3, [pc, #16]	; (8002ea4 <HAL_RCC_OscConfig+0x82c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x806>
 8002e9c:	e006      	b.n	8002eac <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e005      	b.n	8002eae <HAL_RCC_OscConfig+0x836>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop

08002eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0c8      	b.n	800305e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b66      	ldr	r3, [pc, #408]	; (8003068 <HAL_RCC_ClockConfig+0x1b0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d910      	bls.n	8002efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b63      	ldr	r3, [pc, #396]	; (8003068 <HAL_RCC_ClockConfig+0x1b0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f023 0207 	bic.w	r2, r3, #7
 8002ee2:	4961      	ldr	r1, [pc, #388]	; (8003068 <HAL_RCC_ClockConfig+0x1b0>)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b5f      	ldr	r3, [pc, #380]	; (8003068 <HAL_RCC_ClockConfig+0x1b0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0b0      	b.n	800305e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d04c      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d107      	bne.n	8002f20 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f10:	4b56      	ldr	r3, [pc, #344]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d121      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e09e      	b.n	800305e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f28:	4b50      	ldr	r3, [pc, #320]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d115      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e092      	b.n	800305e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f40:	4b4a      	ldr	r3, [pc, #296]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d109      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e086      	b.n	800305e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f50:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e07e      	b.n	800305e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f60:	4b42      	ldr	r3, [pc, #264]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f023 0203 	bic.w	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	493f      	ldr	r1, [pc, #252]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f72:	f7fe f92f 	bl	80011d4 <HAL_GetTick>
 8002f76:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f7a:	f7fe f92b 	bl	80011d4 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e066      	b.n	800305e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f90:	4b36      	ldr	r3, [pc, #216]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 020c 	and.w	r2, r3, #12
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d1eb      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d008      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fae:	4b2f      	ldr	r3, [pc, #188]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	492c      	ldr	r1, [pc, #176]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fc0:	4b29      	ldr	r3, [pc, #164]	; (8003068 <HAL_RCC_ClockConfig+0x1b0>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d210      	bcs.n	8002ff0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fce:	4b26      	ldr	r3, [pc, #152]	; (8003068 <HAL_RCC_ClockConfig+0x1b0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 0207 	bic.w	r2, r3, #7
 8002fd6:	4924      	ldr	r1, [pc, #144]	; (8003068 <HAL_RCC_ClockConfig+0x1b0>)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <HAL_RCC_ClockConfig+0x1b0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e036      	b.n	800305e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4918      	ldr	r1, [pc, #96]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d009      	beq.n	800302e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800301a:	4b14      	ldr	r3, [pc, #80]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4910      	ldr	r1, [pc, #64]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 800302a:	4313      	orrs	r3, r2
 800302c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800302e:	f000 f825 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8003032:	4602      	mov	r2, r0
 8003034:	4b0d      	ldr	r3, [pc, #52]	; (800306c <HAL_RCC_ClockConfig+0x1b4>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	091b      	lsrs	r3, r3, #4
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	490c      	ldr	r1, [pc, #48]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	5ccb      	ldrb	r3, [r1, r3]
 8003042:	f003 031f 	and.w	r3, r3, #31
 8003046:	fa22 f303 	lsr.w	r3, r2, r3
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800304c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800304e:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe f86e 	bl	8001134 <HAL_InitTick>
 8003058:	4603      	mov	r3, r0
 800305a:	72fb      	strb	r3, [r7, #11]

  return status;
 800305c:	7afb      	ldrb	r3, [r7, #11]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40022000 	.word	0x40022000
 800306c:	40021000 	.word	0x40021000
 8003070:	0800531c 	.word	0x0800531c
 8003074:	2000028c 	.word	0x2000028c
 8003078:	20000290 	.word	0x20000290

0800307c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	; 0x24
 8003080:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	2300      	movs	r3, #0
 8003088:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308a:	4b3e      	ldr	r3, [pc, #248]	; (8003184 <HAL_RCC_GetSysClockFreq+0x108>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
 8003092:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003094:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCC_GetSysClockFreq+0x108>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	f003 0303 	and.w	r3, r3, #3
 800309c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <HAL_RCC_GetSysClockFreq+0x34>
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d121      	bne.n	80030ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d11e      	bne.n	80030ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030b0:	4b34      	ldr	r3, [pc, #208]	; (8003184 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030bc:	4b31      	ldr	r3, [pc, #196]	; (8003184 <HAL_RCC_GetSysClockFreq+0x108>)
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030c2:	0a1b      	lsrs	r3, r3, #8
 80030c4:	f003 030f 	and.w	r3, r3, #15
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e005      	b.n	80030d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030cc:	4b2d      	ldr	r3, [pc, #180]	; (8003184 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030d8:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10d      	bne.n	8003104 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b04      	cmp	r3, #4
 80030f2:	d102      	bne.n	80030fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <HAL_RCC_GetSysClockFreq+0x110>)
 80030f6:	61bb      	str	r3, [r7, #24]
 80030f8:	e004      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d101      	bne.n	8003104 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003100:	4b23      	ldr	r3, [pc, #140]	; (8003190 <HAL_RCC_GetSysClockFreq+0x114>)
 8003102:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d134      	bne.n	8003174 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800310a:	4b1e      	ldr	r3, [pc, #120]	; (8003184 <HAL_RCC_GetSysClockFreq+0x108>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d003      	beq.n	8003122 <HAL_RCC_GetSysClockFreq+0xa6>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d003      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0xac>
 8003120:	e005      	b.n	800312e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003122:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_RCC_GetSysClockFreq+0x110>)
 8003124:	617b      	str	r3, [r7, #20]
      break;
 8003126:	e005      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_RCC_GetSysClockFreq+0x114>)
 800312a:	617b      	str	r3, [r7, #20]
      break;
 800312c:	e002      	b.n	8003134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	617b      	str	r3, [r7, #20]
      break;
 8003132:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003134:	4b13      	ldr	r3, [pc, #76]	; (8003184 <HAL_RCC_GetSysClockFreq+0x108>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	091b      	lsrs	r3, r3, #4
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	3301      	adds	r3, #1
 8003140:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003142:	4b10      	ldr	r3, [pc, #64]	; (8003184 <HAL_RCC_GetSysClockFreq+0x108>)
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	fb02 f203 	mul.w	r2, r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	fbb2 f3f3 	udiv	r3, r2, r3
 8003158:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800315a:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_RCC_GetSysClockFreq+0x108>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	0e5b      	lsrs	r3, r3, #25
 8003160:	f003 0303 	and.w	r3, r3, #3
 8003164:	3301      	adds	r3, #1
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003172:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003174:	69bb      	ldr	r3, [r7, #24]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3724      	adds	r7, #36	; 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40021000 	.word	0x40021000
 8003188:	08005334 	.word	0x08005334
 800318c:	00f42400 	.word	0x00f42400
 8003190:	007a1200 	.word	0x007a1200

08003194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	2000028c 	.word	0x2000028c

080031ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031b0:	f7ff fff0 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0a1b      	lsrs	r3, r3, #8
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4904      	ldr	r1, [pc, #16]	; (80031d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000
 80031d4:	0800532c 	.word	0x0800532c

080031d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031dc:	f7ff ffda 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	0adb      	lsrs	r3, r3, #11
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4904      	ldr	r1, [pc, #16]	; (8003200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	0800532c 	.word	0x0800532c

08003204 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003210:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800321c:	f7ff f9c8 	bl	80025b0 <HAL_PWREx_GetVoltageRange>
 8003220:	6178      	str	r0, [r7, #20]
 8003222:	e014      	b.n	800324e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4b25      	ldr	r3, [pc, #148]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003228:	4a24      	ldr	r2, [pc, #144]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322e:	6593      	str	r3, [r2, #88]	; 0x58
 8003230:	4b22      	ldr	r3, [pc, #136]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800323c:	f7ff f9b8 	bl	80025b0 <HAL_PWREx_GetVoltageRange>
 8003240:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003254:	d10b      	bne.n	800326e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b80      	cmp	r3, #128	; 0x80
 800325a:	d919      	bls.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2ba0      	cmp	r3, #160	; 0xa0
 8003260:	d902      	bls.n	8003268 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003262:	2302      	movs	r3, #2
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	e013      	b.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003268:	2301      	movs	r3, #1
 800326a:	613b      	str	r3, [r7, #16]
 800326c:	e010      	b.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d902      	bls.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003274:	2303      	movs	r3, #3
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e00a      	b.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b80      	cmp	r3, #128	; 0x80
 800327e:	d102      	bne.n	8003286 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003280:	2302      	movs	r3, #2
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	e004      	b.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b70      	cmp	r3, #112	; 0x70
 800328a:	d101      	bne.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800328c:	2301      	movs	r3, #1
 800328e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f023 0207 	bic.w	r2, r3, #7
 8003298:	4909      	ldr	r1, [pc, #36]	; (80032c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032a0:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d001      	beq.n	80032b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40022000 	.word	0x40022000

080032c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032cc:	2300      	movs	r3, #0
 80032ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032d0:	2300      	movs	r3, #0
 80032d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d031      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032e8:	d01a      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80032ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80032ee:	d814      	bhi.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80032f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032f8:	d10f      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80032fa:	4bac      	ldr	r3, [pc, #688]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	4aab      	ldr	r2, [pc, #684]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003304:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003306:	e00c      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3304      	adds	r3, #4
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f9cc 	bl	80036ac <RCCEx_PLLSAI1_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003318:	e003      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	74fb      	strb	r3, [r7, #19]
      break;
 800331e:	e000      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003320:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003322:	7cfb      	ldrb	r3, [r7, #19]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10b      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003328:	4ba0      	ldr	r3, [pc, #640]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	499d      	ldr	r1, [pc, #628]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800333e:	e001      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8099 	beq.w	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2300      	movs	r3, #0
 8003354:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003356:	4b95      	ldr	r3, [pc, #596]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800335a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003366:	2300      	movs	r3, #0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00d      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800336c:	4b8f      	ldr	r3, [pc, #572]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	4a8e      	ldr	r2, [pc, #568]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003376:	6593      	str	r3, [r2, #88]	; 0x58
 8003378:	4b8c      	ldr	r3, [pc, #560]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003380:	60bb      	str	r3, [r7, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003384:	2301      	movs	r3, #1
 8003386:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003388:	4b89      	ldr	r3, [pc, #548]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a88      	ldr	r2, [pc, #544]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800338e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003392:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003394:	f7fd ff1e 	bl	80011d4 <HAL_GetTick>
 8003398:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800339a:	e009      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800339c:	f7fd ff1a 	bl	80011d4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d902      	bls.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	74fb      	strb	r3, [r7, #19]
        break;
 80033ae:	e005      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033b0:	4b7f      	ldr	r3, [pc, #508]	; (80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d0ef      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d155      	bne.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033c2:	4b7a      	ldr	r3, [pc, #488]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01e      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d019      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033de:	4b73      	ldr	r3, [pc, #460]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033ea:	4b70      	ldr	r3, [pc, #448]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f0:	4a6e      	ldr	r2, [pc, #440]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033fa:	4b6c      	ldr	r3, [pc, #432]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	4a6a      	ldr	r2, [pc, #424]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800340a:	4a68      	ldr	r2, [pc, #416]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d016      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fd feda 	bl	80011d4 <HAL_GetTick>
 8003420:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003422:	e00b      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003424:	f7fd fed6 	bl	80011d4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003432:	4293      	cmp	r3, r2
 8003434:	d902      	bls.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	74fb      	strb	r3, [r7, #19]
            break;
 800343a:	e006      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800343c:	4b5b      	ldr	r3, [pc, #364]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0ec      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800344a:	7cfb      	ldrb	r3, [r7, #19]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10b      	bne.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003450:	4b56      	ldr	r3, [pc, #344]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345e:	4953      	ldr	r1, [pc, #332]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003466:	e004      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003468:	7cfb      	ldrb	r3, [r7, #19]
 800346a:	74bb      	strb	r3, [r7, #18]
 800346c:	e001      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346e:	7cfb      	ldrb	r3, [r7, #19]
 8003470:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003472:	7c7b      	ldrb	r3, [r7, #17]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003478:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	4a4b      	ldr	r2, [pc, #300]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800347e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003482:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00a      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003490:	4b46      	ldr	r3, [pc, #280]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	4943      	ldr	r1, [pc, #268]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034b2:	4b3e      	ldr	r3, [pc, #248]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	f023 020c 	bic.w	r2, r3, #12
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	493a      	ldr	r1, [pc, #232]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034c2:	4313      	orrs	r3, r2
 80034c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0320 	and.w	r3, r3, #32
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00a      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034d4:	4b35      	ldr	r3, [pc, #212]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	4932      	ldr	r1, [pc, #200]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034f6:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003504:	4929      	ldr	r1, [pc, #164]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003506:	4313      	orrs	r3, r2
 8003508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003518:	4b24      	ldr	r3, [pc, #144]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	4921      	ldr	r1, [pc, #132]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800353a:	4b1c      	ldr	r3, [pc, #112]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	4918      	ldr	r1, [pc, #96]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800354a:	4313      	orrs	r3, r2
 800354c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800355e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003562:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4910      	ldr	r1, [pc, #64]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800356c:	4313      	orrs	r3, r2
 800356e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d02c      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800357e:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003584:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	4907      	ldr	r1, [pc, #28]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800359c:	d10a      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800359e:	4b03      	ldr	r3, [pc, #12]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	4a02      	ldr	r2, [pc, #8]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035a8:	60d3      	str	r3, [r2, #12]
 80035aa:	e015      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80035ac:	40021000 	.word	0x40021000
 80035b0:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2101      	movs	r1, #1
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 f871 	bl	80036ac <RCCEx_PLLSAI1_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d028      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e4:	4b30      	ldr	r3, [pc, #192]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	492d      	ldr	r1, [pc, #180]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003602:	d106      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003604:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a27      	ldr	r2, [pc, #156]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800360a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800360e:	60d3      	str	r3, [r2, #12]
 8003610:	e011      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800361a:	d10c      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	2101      	movs	r1, #1
 8003622:	4618      	mov	r0, r3
 8003624:	f000 f842 	bl	80036ac <RCCEx_PLLSAI1_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800362c:	7cfb      	ldrb	r3, [r7, #19]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d001      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01c      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003642:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003648:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003650:	4915      	ldr	r1, [pc, #84]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003660:	d10c      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	3304      	adds	r3, #4
 8003666:	2102      	movs	r1, #2
 8003668:	4618      	mov	r0, r3
 800366a:	f000 f81f 	bl	80036ac <RCCEx_PLLSAI1_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003672:	7cfb      	ldrb	r3, [r7, #19]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003688:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003696:	4904      	ldr	r1, [pc, #16]	; (80036a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800369e:	7cbb      	ldrb	r3, [r7, #18]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000

080036ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036ba:	4b74      	ldr	r3, [pc, #464]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d018      	beq.n	80036f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036c6:	4b71      	ldr	r3, [pc, #452]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0203 	and.w	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d10d      	bne.n	80036f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
       ||
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036de:	4b6b      	ldr	r3, [pc, #428]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	091b      	lsrs	r3, r3, #4
 80036e4:	f003 0307 	and.w	r3, r3, #7
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
       ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d047      	beq.n	8003782 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	73fb      	strb	r3, [r7, #15]
 80036f6:	e044      	b.n	8003782 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d018      	beq.n	8003732 <RCCEx_PLLSAI1_Config+0x86>
 8003700:	2b03      	cmp	r3, #3
 8003702:	d825      	bhi.n	8003750 <RCCEx_PLLSAI1_Config+0xa4>
 8003704:	2b01      	cmp	r3, #1
 8003706:	d002      	beq.n	800370e <RCCEx_PLLSAI1_Config+0x62>
 8003708:	2b02      	cmp	r3, #2
 800370a:	d009      	beq.n	8003720 <RCCEx_PLLSAI1_Config+0x74>
 800370c:	e020      	b.n	8003750 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800370e:	4b5f      	ldr	r3, [pc, #380]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d11d      	bne.n	8003756 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371e:	e01a      	b.n	8003756 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003720:	4b5a      	ldr	r3, [pc, #360]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	2b00      	cmp	r3, #0
 800372a:	d116      	bne.n	800375a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003730:	e013      	b.n	800375a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003732:	4b56      	ldr	r3, [pc, #344]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800373e:	4b53      	ldr	r3, [pc, #332]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800374e:	e006      	b.n	800375e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
      break;
 8003754:	e004      	b.n	8003760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003756:	bf00      	nop
 8003758:	e002      	b.n	8003760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800375e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10d      	bne.n	8003782 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003766:	4b49      	ldr	r3, [pc, #292]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	3b01      	subs	r3, #1
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	430b      	orrs	r3, r1
 800377c:	4943      	ldr	r1, [pc, #268]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 800377e:	4313      	orrs	r3, r2
 8003780:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d17c      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003788:	4b40      	ldr	r3, [pc, #256]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a3f      	ldr	r2, [pc, #252]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 800378e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003792:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003794:	f7fd fd1e 	bl	80011d4 <HAL_GetTick>
 8003798:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800379a:	e009      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800379c:	f7fd fd1a 	bl	80011d4 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d902      	bls.n	80037b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	73fb      	strb	r3, [r7, #15]
        break;
 80037ae:	e005      	b.n	80037bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037b0:	4b36      	ldr	r3, [pc, #216]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1ef      	bne.n	800379c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d15f      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d110      	bne.n	80037ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037c8:	4b30      	ldr	r3, [pc, #192]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80037d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6892      	ldr	r2, [r2, #8]
 80037d8:	0211      	lsls	r1, r2, #8
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68d2      	ldr	r2, [r2, #12]
 80037de:	06d2      	lsls	r2, r2, #27
 80037e0:	430a      	orrs	r2, r1
 80037e2:	492a      	ldr	r1, [pc, #168]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	610b      	str	r3, [r1, #16]
 80037e8:	e027      	b.n	800383a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d112      	bne.n	8003816 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037f0:	4b26      	ldr	r3, [pc, #152]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6892      	ldr	r2, [r2, #8]
 8003800:	0211      	lsls	r1, r2, #8
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6912      	ldr	r2, [r2, #16]
 8003806:	0852      	lsrs	r2, r2, #1
 8003808:	3a01      	subs	r2, #1
 800380a:	0552      	lsls	r2, r2, #21
 800380c:	430a      	orrs	r2, r1
 800380e:	491f      	ldr	r1, [pc, #124]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003810:	4313      	orrs	r3, r2
 8003812:	610b      	str	r3, [r1, #16]
 8003814:	e011      	b.n	800383a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003816:	4b1d      	ldr	r3, [pc, #116]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800381e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6892      	ldr	r2, [r2, #8]
 8003826:	0211      	lsls	r1, r2, #8
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6952      	ldr	r2, [r2, #20]
 800382c:	0852      	lsrs	r2, r2, #1
 800382e:	3a01      	subs	r2, #1
 8003830:	0652      	lsls	r2, r2, #25
 8003832:	430a      	orrs	r2, r1
 8003834:	4915      	ldr	r1, [pc, #84]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003836:	4313      	orrs	r3, r2
 8003838:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a13      	ldr	r2, [pc, #76]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003840:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003844:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003846:	f7fd fcc5 	bl	80011d4 <HAL_GetTick>
 800384a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800384c:	e009      	b.n	8003862 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800384e:	f7fd fcc1 	bl	80011d4 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	2b02      	cmp	r3, #2
 800385a:	d902      	bls.n	8003862 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	73fb      	strb	r3, [r7, #15]
          break;
 8003860:	e005      	b.n	800386e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003862:	4b0a      	ldr	r3, [pc, #40]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0ef      	beq.n	800384e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d106      	bne.n	8003882 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003874:	4b05      	ldr	r3, [pc, #20]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	4903      	ldr	r1, [pc, #12]	; (800388c <RCCEx_PLLSAI1_Config+0x1e0>)
 800387e:	4313      	orrs	r3, r2
 8003880:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003882:	7bfb      	ldrb	r3, [r7, #15]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000

08003890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e049      	b.n	8003936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd faca 	bl	8000e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f000 fcaa 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e049      	b.n	80039e4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f841 	bl	80039ec <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3304      	adds	r3, #4
 800397a:	4619      	mov	r1, r3
 800397c:	4610      	mov	r0, r2
 800397e:	f000 fc53 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e049      	b.n	8003aa6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f841 	bl	8003aae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4610      	mov	r0, r2
 8003a40:	f000 fbf2 	bl	8004228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_TIM_PWM_Start+0x24>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e03c      	b.n	8003b62 <HAL_TIM_PWM_Start+0x9e>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d109      	bne.n	8003b02 <HAL_TIM_PWM_Start+0x3e>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	bf14      	ite	ne
 8003afa:	2301      	movne	r3, #1
 8003afc:	2300      	moveq	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	e02f      	b.n	8003b62 <HAL_TIM_PWM_Start+0x9e>
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d109      	bne.n	8003b1c <HAL_TIM_PWM_Start+0x58>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	bf14      	ite	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	2300      	moveq	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	e022      	b.n	8003b62 <HAL_TIM_PWM_Start+0x9e>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	2b0c      	cmp	r3, #12
 8003b20:	d109      	bne.n	8003b36 <HAL_TIM_PWM_Start+0x72>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	bf14      	ite	ne
 8003b2e:	2301      	movne	r3, #1
 8003b30:	2300      	moveq	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e015      	b.n	8003b62 <HAL_TIM_PWM_Start+0x9e>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d109      	bne.n	8003b50 <HAL_TIM_PWM_Start+0x8c>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	bf14      	ite	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	2300      	moveq	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	e008      	b.n	8003b62 <HAL_TIM_PWM_Start+0x9e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	bf14      	ite	ne
 8003b5c:	2301      	movne	r3, #1
 8003b5e:	2300      	moveq	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e07e      	b.n	8003c68 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d104      	bne.n	8003b7a <HAL_TIM_PWM_Start+0xb6>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b78:	e023      	b.n	8003bc2 <HAL_TIM_PWM_Start+0xfe>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d104      	bne.n	8003b8a <HAL_TIM_PWM_Start+0xc6>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b88:	e01b      	b.n	8003bc2 <HAL_TIM_PWM_Start+0xfe>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d104      	bne.n	8003b9a <HAL_TIM_PWM_Start+0xd6>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b98:	e013      	b.n	8003bc2 <HAL_TIM_PWM_Start+0xfe>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	d104      	bne.n	8003baa <HAL_TIM_PWM_Start+0xe6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ba8:	e00b      	b.n	8003bc2 <HAL_TIM_PWM_Start+0xfe>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d104      	bne.n	8003bba <HAL_TIM_PWM_Start+0xf6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb8:	e003      	b.n	8003bc2 <HAL_TIM_PWM_Start+0xfe>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	6839      	ldr	r1, [r7, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fea8 	bl	8004920 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <HAL_TIM_PWM_Start+0x1ac>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d009      	beq.n	8003bee <HAL_TIM_PWM_Start+0x12a>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a25      	ldr	r2, [pc, #148]	; (8003c74 <HAL_TIM_PWM_Start+0x1b0>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d004      	beq.n	8003bee <HAL_TIM_PWM_Start+0x12a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a23      	ldr	r2, [pc, #140]	; (8003c78 <HAL_TIM_PWM_Start+0x1b4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d101      	bne.n	8003bf2 <HAL_TIM_PWM_Start+0x12e>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_TIM_PWM_Start+0x130>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d007      	beq.n	8003c08 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a18      	ldr	r2, [pc, #96]	; (8003c70 <HAL_TIM_PWM_Start+0x1ac>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_TIM_PWM_Start+0x162>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1a:	d004      	beq.n	8003c26 <HAL_TIM_PWM_Start+0x162>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a14      	ldr	r2, [pc, #80]	; (8003c74 <HAL_TIM_PWM_Start+0x1b0>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d115      	bne.n	8003c52 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <HAL_TIM_PWM_Start+0x1b8>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b06      	cmp	r3, #6
 8003c36:	d015      	beq.n	8003c64 <HAL_TIM_PWM_Start+0x1a0>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3e:	d011      	beq.n	8003c64 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c50:	e008      	b.n	8003c64 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
 8003c62:	e000      	b.n	8003c66 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40012c00 	.word	0x40012c00
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40014400 	.word	0x40014400
 8003c7c:	00010007 	.word	0x00010007

08003c80 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	6839      	ldr	r1, [r7, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fe44 	bl	8004920 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a39      	ldr	r2, [pc, #228]	; (8003d84 <HAL_TIM_PWM_Stop+0x104>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_TIM_PWM_Stop+0x36>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a38      	ldr	r2, [pc, #224]	; (8003d88 <HAL_TIM_PWM_Stop+0x108>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_TIM_PWM_Stop+0x36>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a36      	ldr	r2, [pc, #216]	; (8003d8c <HAL_TIM_PWM_Stop+0x10c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_PWM_Stop+0x3a>
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e000      	b.n	8003cbc <HAL_TIM_PWM_Stop+0x3c>
 8003cba:	2300      	movs	r3, #0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d017      	beq.n	8003cf0 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6a1a      	ldr	r2, [r3, #32]
 8003cc6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10f      	bne.n	8003cf0 <HAL_TIM_PWM_Stop+0x70>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6a1a      	ldr	r2, [r3, #32]
 8003cd6:	f240 4344 	movw	r3, #1092	; 0x444
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d107      	bne.n	8003cf0 <HAL_TIM_PWM_Stop+0x70>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6a1a      	ldr	r2, [r3, #32]
 8003cf6:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10f      	bne.n	8003d20 <HAL_TIM_PWM_Stop+0xa0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6a1a      	ldr	r2, [r3, #32]
 8003d06:	f240 4344 	movw	r3, #1092	; 0x444
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d107      	bne.n	8003d20 <HAL_TIM_PWM_Stop+0xa0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <HAL_TIM_PWM_Stop+0xb0>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d2e:	e023      	b.n	8003d78 <HAL_TIM_PWM_Stop+0xf8>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	d104      	bne.n	8003d40 <HAL_TIM_PWM_Stop+0xc0>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d3e:	e01b      	b.n	8003d78 <HAL_TIM_PWM_Stop+0xf8>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d104      	bne.n	8003d50 <HAL_TIM_PWM_Stop+0xd0>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d4e:	e013      	b.n	8003d78 <HAL_TIM_PWM_Stop+0xf8>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	d104      	bne.n	8003d60 <HAL_TIM_PWM_Stop+0xe0>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d5e:	e00b      	b.n	8003d78 <HAL_TIM_PWM_Stop+0xf8>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b10      	cmp	r3, #16
 8003d64:	d104      	bne.n	8003d70 <HAL_TIM_PWM_Stop+0xf0>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d6e:	e003      	b.n	8003d78 <HAL_TIM_PWM_Stop+0xf8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40014400 	.word	0x40014400

08003d90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_TIM_OC_ConfigChannel+0x1a>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e064      	b.n	8003e74 <HAL_TIM_OC_ConfigChannel+0xe4>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b14      	cmp	r3, #20
 8003db6:	d857      	bhi.n	8003e68 <HAL_TIM_OC_ConfigChannel+0xd8>
 8003db8:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <HAL_TIM_OC_ConfigChannel+0x30>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003e15 	.word	0x08003e15
 8003dc4:	08003e69 	.word	0x08003e69
 8003dc8:	08003e69 	.word	0x08003e69
 8003dcc:	08003e69 	.word	0x08003e69
 8003dd0:	08003e23 	.word	0x08003e23
 8003dd4:	08003e69 	.word	0x08003e69
 8003dd8:	08003e69 	.word	0x08003e69
 8003ddc:	08003e69 	.word	0x08003e69
 8003de0:	08003e31 	.word	0x08003e31
 8003de4:	08003e69 	.word	0x08003e69
 8003de8:	08003e69 	.word	0x08003e69
 8003dec:	08003e69 	.word	0x08003e69
 8003df0:	08003e3f 	.word	0x08003e3f
 8003df4:	08003e69 	.word	0x08003e69
 8003df8:	08003e69 	.word	0x08003e69
 8003dfc:	08003e69 	.word	0x08003e69
 8003e00:	08003e4d 	.word	0x08003e4d
 8003e04:	08003e69 	.word	0x08003e69
 8003e08:	08003e69 	.word	0x08003e69
 8003e0c:	08003e69 	.word	0x08003e69
 8003e10:	08003e5b 	.word	0x08003e5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68b9      	ldr	r1, [r7, #8]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 fa68 	bl	80042f0 <TIM_OC1_SetConfig>
      break;
 8003e20:	e023      	b.n	8003e6a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fadd 	bl	80043e8 <TIM_OC2_SetConfig>
      break;
 8003e2e:	e01c      	b.n	8003e6a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fb50 	bl	80044dc <TIM_OC3_SetConfig>
      break;
 8003e3c:	e015      	b.n	8003e6a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fbc1 	bl	80045cc <TIM_OC4_SetConfig>
      break;
 8003e4a:	e00e      	b.n	8003e6a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fc18 	bl	8004688 <TIM_OC5_SetConfig>
      break;
 8003e58:	e007      	b.n	8003e6a <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68b9      	ldr	r1, [r7, #8]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fc69 	bl	8004738 <TIM_OC6_SetConfig>
      break;
 8003e66:	e000      	b.n	8003e6a <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 8003e68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e0fd      	b.n	8004092 <HAL_TIM_PWM_ConfigChannel+0x216>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b14      	cmp	r3, #20
 8003ea2:	f200 80f0 	bhi.w	8004086 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8003ea6:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003f01 	.word	0x08003f01
 8003eb0:	08004087 	.word	0x08004087
 8003eb4:	08004087 	.word	0x08004087
 8003eb8:	08004087 	.word	0x08004087
 8003ebc:	08003f41 	.word	0x08003f41
 8003ec0:	08004087 	.word	0x08004087
 8003ec4:	08004087 	.word	0x08004087
 8003ec8:	08004087 	.word	0x08004087
 8003ecc:	08003f83 	.word	0x08003f83
 8003ed0:	08004087 	.word	0x08004087
 8003ed4:	08004087 	.word	0x08004087
 8003ed8:	08004087 	.word	0x08004087
 8003edc:	08003fc3 	.word	0x08003fc3
 8003ee0:	08004087 	.word	0x08004087
 8003ee4:	08004087 	.word	0x08004087
 8003ee8:	08004087 	.word	0x08004087
 8003eec:	08004005 	.word	0x08004005
 8003ef0:	08004087 	.word	0x08004087
 8003ef4:	08004087 	.word	0x08004087
 8003ef8:	08004087 	.word	0x08004087
 8003efc:	08004045 	.word	0x08004045
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68b9      	ldr	r1, [r7, #8]
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f9f2 	bl	80042f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	699a      	ldr	r2, [r3, #24]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f042 0208 	orr.w	r2, r2, #8
 8003f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699a      	ldr	r2, [r3, #24]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6999      	ldr	r1, [r3, #24]
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	691a      	ldr	r2, [r3, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	619a      	str	r2, [r3, #24]
      break;
 8003f3e:	e0a3      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fa4e 	bl	80043e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699a      	ldr	r2, [r3, #24]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6999      	ldr	r1, [r3, #24]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	021a      	lsls	r2, r3, #8
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	619a      	str	r2, [r3, #24]
      break;
 8003f80:	e082      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68b9      	ldr	r1, [r7, #8]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 faa7 	bl	80044dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69da      	ldr	r2, [r3, #28]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0208 	orr.w	r2, r2, #8
 8003f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69da      	ldr	r2, [r3, #28]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0204 	bic.w	r2, r2, #4
 8003fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	69d9      	ldr	r1, [r3, #28]
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	61da      	str	r2, [r3, #28]
      break;
 8003fc0:	e062      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 faff 	bl	80045cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69da      	ldr	r2, [r3, #28]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	69da      	ldr	r2, [r3, #28]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	69d9      	ldr	r1, [r3, #28]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	021a      	lsls	r2, r3, #8
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	61da      	str	r2, [r3, #28]
      break;
 8004002:	e041      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fb3c 	bl	8004688 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0208 	orr.w	r2, r2, #8
 800401e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0204 	bic.w	r2, r2, #4
 800402e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004042:	e021      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fb74 	bl	8004738 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800405e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800406e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	021a      	lsls	r2, r3, #8
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004084:	e000      	b.n	8004088 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004086:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop

0800409c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIM_ConfigClockSource+0x18>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e0b5      	b.n	8004220 <HAL_TIM_ConfigClockSource+0x184>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f0:	d03e      	beq.n	8004170 <HAL_TIM_ConfigClockSource+0xd4>
 80040f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040f6:	f200 8087 	bhi.w	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 80040fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fe:	f000 8085 	beq.w	800420c <HAL_TIM_ConfigClockSource+0x170>
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004106:	d87f      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b70      	cmp	r3, #112	; 0x70
 800410a:	d01a      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0xa6>
 800410c:	2b70      	cmp	r3, #112	; 0x70
 800410e:	d87b      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b60      	cmp	r3, #96	; 0x60
 8004112:	d050      	beq.n	80041b6 <HAL_TIM_ConfigClockSource+0x11a>
 8004114:	2b60      	cmp	r3, #96	; 0x60
 8004116:	d877      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004118:	2b50      	cmp	r3, #80	; 0x50
 800411a:	d03c      	beq.n	8004196 <HAL_TIM_ConfigClockSource+0xfa>
 800411c:	2b50      	cmp	r3, #80	; 0x50
 800411e:	d873      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004120:	2b40      	cmp	r3, #64	; 0x40
 8004122:	d058      	beq.n	80041d6 <HAL_TIM_ConfigClockSource+0x13a>
 8004124:	2b40      	cmp	r3, #64	; 0x40
 8004126:	d86f      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004128:	2b30      	cmp	r3, #48	; 0x30
 800412a:	d064      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
 800412c:	2b30      	cmp	r3, #48	; 0x30
 800412e:	d86b      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004130:	2b20      	cmp	r3, #32
 8004132:	d060      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
 8004134:	2b20      	cmp	r3, #32
 8004136:	d867      	bhi.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d05c      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
 800413c:	2b10      	cmp	r3, #16
 800413e:	d05a      	beq.n	80041f6 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004140:	e062      	b.n	8004208 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6899      	ldr	r1, [r3, #8]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	f000 fbc5 	bl	80048e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004164:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	609a      	str	r2, [r3, #8]
      break;
 800416e:	e04e      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	6899      	ldr	r1, [r3, #8]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f000 fbae 	bl	80048e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004192:	609a      	str	r2, [r3, #8]
      break;
 8004194:	e03b      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6818      	ldr	r0, [r3, #0]
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6859      	ldr	r1, [r3, #4]
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	461a      	mov	r2, r3
 80041a4:	f000 fb22 	bl	80047ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2150      	movs	r1, #80	; 0x50
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fb7b 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 80041b4:	e02b      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6859      	ldr	r1, [r3, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	461a      	mov	r2, r3
 80041c4:	f000 fb41 	bl	800484a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2160      	movs	r1, #96	; 0x60
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 fb6b 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 80041d4:	e01b      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6859      	ldr	r1, [r3, #4]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f000 fb02 	bl	80047ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2140      	movs	r1, #64	; 0x40
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fb5b 	bl	80048aa <TIM_ITRx_SetConfig>
      break;
 80041f4:	e00b      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f000 fb52 	bl	80048aa <TIM_ITRx_SetConfig>
        break;
 8004206:	e002      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004208:	bf00      	nop
 800420a:	e000      	b.n	800420e <HAL_TIM_ConfigClockSource+0x172>
      break;
 800420c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a2a      	ldr	r2, [pc, #168]	; (80042e4 <TIM_Base_SetConfig+0xbc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_Base_SetConfig+0x20>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004246:	d108      	bne.n	800425a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a21      	ldr	r2, [pc, #132]	; (80042e4 <TIM_Base_SetConfig+0xbc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00b      	beq.n	800427a <TIM_Base_SetConfig+0x52>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004268:	d007      	beq.n	800427a <TIM_Base_SetConfig+0x52>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <TIM_Base_SetConfig+0xc0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d003      	beq.n	800427a <TIM_Base_SetConfig+0x52>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1d      	ldr	r2, [pc, #116]	; (80042ec <TIM_Base_SetConfig+0xc4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d108      	bne.n	800428c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a0c      	ldr	r2, [pc, #48]	; (80042e4 <TIM_Base_SetConfig+0xbc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d007      	beq.n	80042c8 <TIM_Base_SetConfig+0xa0>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a0b      	ldr	r2, [pc, #44]	; (80042e8 <TIM_Base_SetConfig+0xc0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d003      	beq.n	80042c8 <TIM_Base_SetConfig+0xa0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a0a      	ldr	r2, [pc, #40]	; (80042ec <TIM_Base_SetConfig+0xc4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d103      	bne.n	80042d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	691a      	ldr	r2, [r3, #16]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	615a      	str	r2, [r3, #20]
}
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	40012c00 	.word	0x40012c00
 80042e8:	40014000 	.word	0x40014000
 80042ec:	40014400 	.word	0x40014400

080042f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f023 0201 	bic.w	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0303 	bic.w	r3, r3, #3
 800432a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	f023 0302 	bic.w	r3, r3, #2
 800433c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a24      	ldr	r2, [pc, #144]	; (80043dc <TIM_OC1_SetConfig+0xec>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d007      	beq.n	8004360 <TIM_OC1_SetConfig+0x70>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a23      	ldr	r2, [pc, #140]	; (80043e0 <TIM_OC1_SetConfig+0xf0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_OC1_SetConfig+0x70>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <TIM_OC1_SetConfig+0xf4>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d10c      	bne.n	800437a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 0308 	bic.w	r3, r3, #8
 8004366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 0304 	bic.w	r3, r3, #4
 8004378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a17      	ldr	r2, [pc, #92]	; (80043dc <TIM_OC1_SetConfig+0xec>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d007      	beq.n	8004392 <TIM_OC1_SetConfig+0xa2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a16      	ldr	r2, [pc, #88]	; (80043e0 <TIM_OC1_SetConfig+0xf0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_OC1_SetConfig+0xa2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <TIM_OC1_SetConfig+0xf4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d111      	bne.n	80043b6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004398:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	621a      	str	r2, [r3, #32]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	40014000 	.word	0x40014000
 80043e4:	40014400 	.word	0x40014400

080043e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f023 0210 	bic.w	r2, r3, #16
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800441a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f023 0320 	bic.w	r3, r3, #32
 8004436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a22      	ldr	r2, [pc, #136]	; (80044d0 <TIM_OC2_SetConfig+0xe8>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d10d      	bne.n	8004468 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	4313      	orrs	r3, r2
 800445e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004466:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a19      	ldr	r2, [pc, #100]	; (80044d0 <TIM_OC2_SetConfig+0xe8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d007      	beq.n	8004480 <TIM_OC2_SetConfig+0x98>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <TIM_OC2_SetConfig+0xec>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_OC2_SetConfig+0x98>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <TIM_OC2_SetConfig+0xf0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d113      	bne.n	80044a8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800448e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	621a      	str	r2, [r3, #32]
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40014400 	.word	0x40014400

080044dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0303 	bic.w	r3, r3, #3
 8004516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a21      	ldr	r2, [pc, #132]	; (80045c0 <TIM_OC3_SetConfig+0xe4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d10d      	bne.n	800455a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <TIM_OC3_SetConfig+0xe4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d007      	beq.n	8004572 <TIM_OC3_SetConfig+0x96>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a17      	ldr	r2, [pc, #92]	; (80045c4 <TIM_OC3_SetConfig+0xe8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d003      	beq.n	8004572 <TIM_OC3_SetConfig+0x96>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <TIM_OC3_SetConfig+0xec>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d113      	bne.n	800459a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	621a      	str	r2, [r3, #32]
}
 80045b4:	bf00      	nop
 80045b6:	371c      	adds	r7, #28
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40014000 	.word	0x40014000
 80045c8:	40014400 	.word	0x40014400

080045cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	021b      	lsls	r3, r3, #8
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800461a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	031b      	lsls	r3, r3, #12
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	4313      	orrs	r3, r2
 8004626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a14      	ldr	r2, [pc, #80]	; (800467c <TIM_OC4_SetConfig+0xb0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d007      	beq.n	8004640 <TIM_OC4_SetConfig+0x74>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a13      	ldr	r2, [pc, #76]	; (8004680 <TIM_OC4_SetConfig+0xb4>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d003      	beq.n	8004640 <TIM_OC4_SetConfig+0x74>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a12      	ldr	r2, [pc, #72]	; (8004684 <TIM_OC4_SetConfig+0xb8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d109      	bne.n	8004654 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004646:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	019b      	lsls	r3, r3, #6
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	685a      	ldr	r2, [r3, #4]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	621a      	str	r2, [r3, #32]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	40012c00 	.word	0x40012c00
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400

08004688 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80046cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	041b      	lsls	r3, r3, #16
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a13      	ldr	r2, [pc, #76]	; (800472c <TIM_OC5_SetConfig+0xa4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d007      	beq.n	80046f2 <TIM_OC5_SetConfig+0x6a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a12      	ldr	r2, [pc, #72]	; (8004730 <TIM_OC5_SetConfig+0xa8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d003      	beq.n	80046f2 <TIM_OC5_SetConfig+0x6a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a11      	ldr	r2, [pc, #68]	; (8004734 <TIM_OC5_SetConfig+0xac>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d109      	bne.n	8004706 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	4313      	orrs	r3, r2
 8004704:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr
 800472c:	40012c00 	.word	0x40012c00
 8004730:	40014000 	.word	0x40014000
 8004734:	40014400 	.word	0x40014400

08004738 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004766:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	4313      	orrs	r3, r2
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800477e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	051b      	lsls	r3, r3, #20
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a14      	ldr	r2, [pc, #80]	; (80047e0 <TIM_OC6_SetConfig+0xa8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d007      	beq.n	80047a4 <TIM_OC6_SetConfig+0x6c>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <TIM_OC6_SetConfig+0xac>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_OC6_SetConfig+0x6c>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a12      	ldr	r2, [pc, #72]	; (80047e8 <TIM_OC6_SetConfig+0xb0>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d109      	bne.n	80047b8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	029b      	lsls	r3, r3, #10
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40012c00 	.word	0x40012c00
 80047e4:	40014000 	.word	0x40014000
 80047e8:	40014400 	.word	0x40014400

080047ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	f023 0201 	bic.w	r2, r3, #1
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	4313      	orrs	r3, r2
 8004820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f023 030a 	bic.w	r3, r3, #10
 8004828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	621a      	str	r2, [r3, #32]
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800484a:	b480      	push	{r7}
 800484c:	b087      	sub	sp, #28
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0210 	bic.w	r2, r3, #16
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6a1b      	ldr	r3, [r3, #32]
 800486c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	621a      	str	r2, [r3, #32]
}
 800489e:	bf00      	nop
 80048a0:	371c      	adds	r7, #28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b085      	sub	sp, #20
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f043 0307 	orr.w	r3, r3, #7
 80048cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	609a      	str	r2, [r3, #8]
}
 80048d4:	bf00      	nop
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	021a      	lsls	r2, r3, #8
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	431a      	orrs	r2, r3
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4313      	orrs	r3, r2
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	4313      	orrs	r3, r2
 800490c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	609a      	str	r2, [r3, #8]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	f003 031f 	and.w	r3, r3, #31
 8004932:	2201      	movs	r2, #1
 8004934:	fa02 f303 	lsl.w	r3, r2, r3
 8004938:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	43db      	mvns	r3, r3
 8004942:	401a      	ands	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a1a      	ldr	r2, [r3, #32]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 031f 	and.w	r3, r3, #31
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	fa01 f303 	lsl.w	r3, r1, r3
 8004958:	431a      	orrs	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
	...

0800496c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497c:	2b01      	cmp	r3, #1
 800497e:	d101      	bne.n	8004984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004980:	2302      	movs	r3, #2
 8004982:	e04f      	b.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2202      	movs	r2, #2
 8004990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a21      	ldr	r2, [pc, #132]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d108      	bne.n	80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80049b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	4313      	orrs	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d009      	beq.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ec:	d004      	beq.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d10c      	bne.n	8004a12 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3714      	adds	r7, #20
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	40012c00 	.word	0x40012c00
 8004a34:	40014000 	.word	0x40014000

08004a38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e060      	b.n	8004b16 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	041b      	lsls	r3, r3, #16
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d115      	bne.n	8004b04 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	051b      	lsls	r3, r3, #20
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	40012c00 	.word	0x40012c00

08004b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e040      	b.n	8004bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d106      	bne.n	8004b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f7fc fa02 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	; 0x24
 8004b54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f82c 	bl	8004bc4 <UART_SetConfig>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e022      	b.n	8004bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fa2c 	bl	8004fdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fab3 	bl	8005120 <UART_CheckIdleState>
 8004bba:	4603      	mov	r3, r0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bc4:	b5b0      	push	{r4, r5, r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	4baf      	ldr	r3, [pc, #700]	; (8004eac <UART_SetConfig+0x2e8>)
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	69f9      	ldr	r1, [r7, #28]
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68da      	ldr	r2, [r3, #12]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4aa4      	ldr	r2, [pc, #656]	; (8004eb0 <UART_SetConfig+0x2ec>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d004      	beq.n	8004c2c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a9b      	ldr	r2, [pc, #620]	; (8004eb4 <UART_SetConfig+0x2f0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d121      	bne.n	8004c8e <UART_SetConfig+0xca>
 8004c4a:	4b9b      	ldr	r3, [pc, #620]	; (8004eb8 <UART_SetConfig+0x2f4>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f003 0303 	and.w	r3, r3, #3
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d817      	bhi.n	8004c88 <UART_SetConfig+0xc4>
 8004c58:	a201      	add	r2, pc, #4	; (adr r2, 8004c60 <UART_SetConfig+0x9c>)
 8004c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5e:	bf00      	nop
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004c7d 	.word	0x08004c7d
 8004c68:	08004c77 	.word	0x08004c77
 8004c6c:	08004c83 	.word	0x08004c83
 8004c70:	2301      	movs	r3, #1
 8004c72:	76fb      	strb	r3, [r7, #27]
 8004c74:	e070      	b.n	8004d58 <UART_SetConfig+0x194>
 8004c76:	2302      	movs	r3, #2
 8004c78:	76fb      	strb	r3, [r7, #27]
 8004c7a:	e06d      	b.n	8004d58 <UART_SetConfig+0x194>
 8004c7c:	2304      	movs	r3, #4
 8004c7e:	76fb      	strb	r3, [r7, #27]
 8004c80:	e06a      	b.n	8004d58 <UART_SetConfig+0x194>
 8004c82:	2308      	movs	r3, #8
 8004c84:	76fb      	strb	r3, [r7, #27]
 8004c86:	e067      	b.n	8004d58 <UART_SetConfig+0x194>
 8004c88:	2310      	movs	r3, #16
 8004c8a:	76fb      	strb	r3, [r7, #27]
 8004c8c:	e064      	b.n	8004d58 <UART_SetConfig+0x194>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a8a      	ldr	r2, [pc, #552]	; (8004ebc <UART_SetConfig+0x2f8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d132      	bne.n	8004cfe <UART_SetConfig+0x13a>
 8004c98:	4b87      	ldr	r3, [pc, #540]	; (8004eb8 <UART_SetConfig+0x2f4>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b0c      	cmp	r3, #12
 8004ca4:	d828      	bhi.n	8004cf8 <UART_SetConfig+0x134>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <UART_SetConfig+0xe8>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004ce1 	.word	0x08004ce1
 8004cb0:	08004cf9 	.word	0x08004cf9
 8004cb4:	08004cf9 	.word	0x08004cf9
 8004cb8:	08004cf9 	.word	0x08004cf9
 8004cbc:	08004ced 	.word	0x08004ced
 8004cc0:	08004cf9 	.word	0x08004cf9
 8004cc4:	08004cf9 	.word	0x08004cf9
 8004cc8:	08004cf9 	.word	0x08004cf9
 8004ccc:	08004ce7 	.word	0x08004ce7
 8004cd0:	08004cf9 	.word	0x08004cf9
 8004cd4:	08004cf9 	.word	0x08004cf9
 8004cd8:	08004cf9 	.word	0x08004cf9
 8004cdc:	08004cf3 	.word	0x08004cf3
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	76fb      	strb	r3, [r7, #27]
 8004ce4:	e038      	b.n	8004d58 <UART_SetConfig+0x194>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	76fb      	strb	r3, [r7, #27]
 8004cea:	e035      	b.n	8004d58 <UART_SetConfig+0x194>
 8004cec:	2304      	movs	r3, #4
 8004cee:	76fb      	strb	r3, [r7, #27]
 8004cf0:	e032      	b.n	8004d58 <UART_SetConfig+0x194>
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	76fb      	strb	r3, [r7, #27]
 8004cf6:	e02f      	b.n	8004d58 <UART_SetConfig+0x194>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	76fb      	strb	r3, [r7, #27]
 8004cfc:	e02c      	b.n	8004d58 <UART_SetConfig+0x194>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6b      	ldr	r2, [pc, #428]	; (8004eb0 <UART_SetConfig+0x2ec>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d125      	bne.n	8004d54 <UART_SetConfig+0x190>
 8004d08:	4b6b      	ldr	r3, [pc, #428]	; (8004eb8 <UART_SetConfig+0x2f4>)
 8004d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d16:	d017      	beq.n	8004d48 <UART_SetConfig+0x184>
 8004d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d1c:	d817      	bhi.n	8004d4e <UART_SetConfig+0x18a>
 8004d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d22:	d00b      	beq.n	8004d3c <UART_SetConfig+0x178>
 8004d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d28:	d811      	bhi.n	8004d4e <UART_SetConfig+0x18a>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <UART_SetConfig+0x172>
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d32:	d006      	beq.n	8004d42 <UART_SetConfig+0x17e>
 8004d34:	e00b      	b.n	8004d4e <UART_SetConfig+0x18a>
 8004d36:	2300      	movs	r3, #0
 8004d38:	76fb      	strb	r3, [r7, #27]
 8004d3a:	e00d      	b.n	8004d58 <UART_SetConfig+0x194>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	76fb      	strb	r3, [r7, #27]
 8004d40:	e00a      	b.n	8004d58 <UART_SetConfig+0x194>
 8004d42:	2304      	movs	r3, #4
 8004d44:	76fb      	strb	r3, [r7, #27]
 8004d46:	e007      	b.n	8004d58 <UART_SetConfig+0x194>
 8004d48:	2308      	movs	r3, #8
 8004d4a:	76fb      	strb	r3, [r7, #27]
 8004d4c:	e004      	b.n	8004d58 <UART_SetConfig+0x194>
 8004d4e:	2310      	movs	r3, #16
 8004d50:	76fb      	strb	r3, [r7, #27]
 8004d52:	e001      	b.n	8004d58 <UART_SetConfig+0x194>
 8004d54:	2310      	movs	r3, #16
 8004d56:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a54      	ldr	r2, [pc, #336]	; (8004eb0 <UART_SetConfig+0x2ec>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d173      	bne.n	8004e4a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d62:	7efb      	ldrb	r3, [r7, #27]
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d824      	bhi.n	8004db2 <UART_SetConfig+0x1ee>
 8004d68:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <UART_SetConfig+0x1ac>)
 8004d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6e:	bf00      	nop
 8004d70:	08004d95 	.word	0x08004d95
 8004d74:	08004db3 	.word	0x08004db3
 8004d78:	08004d9d 	.word	0x08004d9d
 8004d7c:	08004db3 	.word	0x08004db3
 8004d80:	08004da3 	.word	0x08004da3
 8004d84:	08004db3 	.word	0x08004db3
 8004d88:	08004db3 	.word	0x08004db3
 8004d8c:	08004db3 	.word	0x08004db3
 8004d90:	08004dab 	.word	0x08004dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d94:	f7fe fa0a 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8004d98:	6178      	str	r0, [r7, #20]
        break;
 8004d9a:	e00f      	b.n	8004dbc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d9c:	4b48      	ldr	r3, [pc, #288]	; (8004ec0 <UART_SetConfig+0x2fc>)
 8004d9e:	617b      	str	r3, [r7, #20]
        break;
 8004da0:	e00c      	b.n	8004dbc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004da2:	f7fe f96b 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8004da6:	6178      	str	r0, [r7, #20]
        break;
 8004da8:	e008      	b.n	8004dbc <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dae:	617b      	str	r3, [r7, #20]
        break;
 8004db0:	e004      	b.n	8004dbc <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	76bb      	strb	r3, [r7, #26]
        break;
 8004dba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 80fe 	beq.w	8004fc0 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	4413      	add	r3, r2
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d305      	bcc.n	8004de0 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d902      	bls.n	8004de6 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	76bb      	strb	r3, [r7, #26]
 8004de4:	e0ec      	b.n	8004fc0 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f04f 0100 	mov.w	r1, #0
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	020b      	lsls	r3, r1, #8
 8004df8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dfc:	0202      	lsls	r2, r0, #8
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	6849      	ldr	r1, [r1, #4]
 8004e02:	0849      	lsrs	r1, r1, #1
 8004e04:	4608      	mov	r0, r1
 8004e06:	f04f 0100 	mov.w	r1, #0
 8004e0a:	1814      	adds	r4, r2, r0
 8004e0c:	eb43 0501 	adc.w	r5, r3, r1
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	461a      	mov	r2, r3
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	f7fb f9d5 	bl	80001cc <__aeabi_uldivmod>
 8004e22:	4602      	mov	r2, r0
 8004e24:	460b      	mov	r3, r1
 8004e26:	4613      	mov	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e30:	d308      	bcc.n	8004e44 <UART_SetConfig+0x280>
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e38:	d204      	bcs.n	8004e44 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	e0bd      	b.n	8004fc0 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	76bb      	strb	r3, [r7, #26]
 8004e48:	e0ba      	b.n	8004fc0 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e52:	d168      	bne.n	8004f26 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8004e54:	7efb      	ldrb	r3, [r7, #27]
 8004e56:	2b08      	cmp	r3, #8
 8004e58:	d834      	bhi.n	8004ec4 <UART_SetConfig+0x300>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <UART_SetConfig+0x29c>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e95 	.word	0x08004e95
 8004e6c:	08004ec5 	.word	0x08004ec5
 8004e70:	08004e9b 	.word	0x08004e9b
 8004e74:	08004ec5 	.word	0x08004ec5
 8004e78:	08004ec5 	.word	0x08004ec5
 8004e7c:	08004ec5 	.word	0x08004ec5
 8004e80:	08004ea3 	.word	0x08004ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e84:	f7fe f992 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8004e88:	6178      	str	r0, [r7, #20]
        break;
 8004e8a:	e020      	b.n	8004ece <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e8c:	f7fe f9a4 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8004e90:	6178      	str	r0, [r7, #20]
        break;
 8004e92:	e01c      	b.n	8004ece <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e94:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <UART_SetConfig+0x2fc>)
 8004e96:	617b      	str	r3, [r7, #20]
        break;
 8004e98:	e019      	b.n	8004ece <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e9a:	f7fe f8ef 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8004e9e:	6178      	str	r0, [r7, #20]
        break;
 8004ea0:	e015      	b.n	8004ece <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ea6:	617b      	str	r3, [r7, #20]
        break;
 8004ea8:	e011      	b.n	8004ece <UART_SetConfig+0x30a>
 8004eaa:	bf00      	nop
 8004eac:	efff69f3 	.word	0xefff69f3
 8004eb0:	40008000 	.word	0x40008000
 8004eb4:	40013800 	.word	0x40013800
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	40004400 	.word	0x40004400
 8004ec0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	76bb      	strb	r3, [r7, #26]
        break;
 8004ecc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d075      	beq.n	8004fc0 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	005a      	lsls	r2, r3, #1
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	085b      	lsrs	r3, r3, #1
 8004ede:	441a      	add	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b0f      	cmp	r3, #15
 8004ef0:	d916      	bls.n	8004f20 <UART_SetConfig+0x35c>
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef8:	d212      	bcs.n	8004f20 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f023 030f 	bic.w	r3, r3, #15
 8004f02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	085b      	lsrs	r3, r3, #1
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	89fb      	ldrh	r3, [r7, #14]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	89fa      	ldrh	r2, [r7, #14]
 8004f1c:	60da      	str	r2, [r3, #12]
 8004f1e:	e04f      	b.n	8004fc0 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	76bb      	strb	r3, [r7, #26]
 8004f24:	e04c      	b.n	8004fc0 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f26:	7efb      	ldrb	r3, [r7, #27]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d828      	bhi.n	8004f7e <UART_SetConfig+0x3ba>
 8004f2c:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <UART_SetConfig+0x370>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f59 	.word	0x08004f59
 8004f38:	08004f61 	.word	0x08004f61
 8004f3c:	08004f69 	.word	0x08004f69
 8004f40:	08004f7f 	.word	0x08004f7f
 8004f44:	08004f6f 	.word	0x08004f6f
 8004f48:	08004f7f 	.word	0x08004f7f
 8004f4c:	08004f7f 	.word	0x08004f7f
 8004f50:	08004f7f 	.word	0x08004f7f
 8004f54:	08004f77 	.word	0x08004f77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f58:	f7fe f928 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 8004f5c:	6178      	str	r0, [r7, #20]
        break;
 8004f5e:	e013      	b.n	8004f88 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f60:	f7fe f93a 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8004f64:	6178      	str	r0, [r7, #20]
        break;
 8004f66:	e00f      	b.n	8004f88 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f68:	4b1b      	ldr	r3, [pc, #108]	; (8004fd8 <UART_SetConfig+0x414>)
 8004f6a:	617b      	str	r3, [r7, #20]
        break;
 8004f6c:	e00c      	b.n	8004f88 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f6e:	f7fe f885 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8004f72:	6178      	str	r0, [r7, #20]
        break;
 8004f74:	e008      	b.n	8004f88 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7a:	617b      	str	r3, [r7, #20]
        break;
 8004f7c:	e004      	b.n	8004f88 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	76bb      	strb	r3, [r7, #26]
        break;
 8004f86:	bf00      	nop
    }

    if (pclk != 0U)
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d018      	beq.n	8004fc0 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	085a      	lsrs	r2, r3, #1
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	441a      	add	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	d908      	bls.n	8004fbc <UART_SetConfig+0x3f8>
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb0:	d204      	bcs.n	8004fbc <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	e001      	b.n	8004fc0 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004fcc:	7ebb      	ldrb	r3, [r7, #26]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3720      	adds	r7, #32
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	00f42400 	.word	0x00f42400

08004fdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	f003 0308 	and.w	r3, r3, #8
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	f003 0310 	and.w	r3, r3, #16
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01a      	beq.n	80050f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050da:	d10a      	bne.n	80050f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00a      	beq.n	8005114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af02      	add	r7, sp, #8
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005130:	f7fc f850 	bl	80011d4 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b08      	cmp	r3, #8
 8005142:	d10e      	bne.n	8005162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005148:	9300      	str	r3, [sp, #0]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f82d 	bl	80051b2 <UART_WaitOnFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e023      	b.n	80051aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b04      	cmp	r3, #4
 800516e:	d10e      	bne.n	800518e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f817 	bl	80051b2 <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e00d      	b.n	80051aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	603b      	str	r3, [r7, #0]
 80051be:	4613      	mov	r3, r2
 80051c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c2:	e05e      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ca:	d05a      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051cc:	f7fc f802 	bl	80011d4 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	69ba      	ldr	r2, [r7, #24]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d302      	bcc.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d11b      	bne.n	800521a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051f0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f022 0201 	bic.w	r2, r2, #1
 8005200:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e043      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0304 	and.w	r3, r3, #4
 8005224:	2b00      	cmp	r3, #0
 8005226:	d02c      	beq.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	69db      	ldr	r3, [r3, #28]
 800522e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005236:	d124      	bne.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005240:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005250:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 0201 	bic.w	r2, r2, #1
 8005260:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e00f      	b.n	80052a2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69da      	ldr	r2, [r3, #28]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	4013      	ands	r3, r2
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	429a      	cmp	r2, r3
 8005290:	bf0c      	ite	eq
 8005292:	2301      	moveq	r3, #1
 8005294:	2300      	movne	r3, #0
 8005296:	b2db      	uxtb	r3, r3
 8005298:	461a      	mov	r2, r3
 800529a:	79fb      	ldrb	r3, [r7, #7]
 800529c:	429a      	cmp	r2, r3
 800529e:	d091      	beq.n	80051c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a0:	2300      	movs	r3, #0
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <__libc_init_array>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	4d0d      	ldr	r5, [pc, #52]	; (80052e4 <__libc_init_array+0x38>)
 80052b0:	4c0d      	ldr	r4, [pc, #52]	; (80052e8 <__libc_init_array+0x3c>)
 80052b2:	1b64      	subs	r4, r4, r5
 80052b4:	10a4      	asrs	r4, r4, #2
 80052b6:	2600      	movs	r6, #0
 80052b8:	42a6      	cmp	r6, r4
 80052ba:	d109      	bne.n	80052d0 <__libc_init_array+0x24>
 80052bc:	4d0b      	ldr	r5, [pc, #44]	; (80052ec <__libc_init_array+0x40>)
 80052be:	4c0c      	ldr	r4, [pc, #48]	; (80052f0 <__libc_init_array+0x44>)
 80052c0:	f000 f820 	bl	8005304 <_init>
 80052c4:	1b64      	subs	r4, r4, r5
 80052c6:	10a4      	asrs	r4, r4, #2
 80052c8:	2600      	movs	r6, #0
 80052ca:	42a6      	cmp	r6, r4
 80052cc:	d105      	bne.n	80052da <__libc_init_array+0x2e>
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
 80052d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d4:	4798      	blx	r3
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7ee      	b.n	80052b8 <__libc_init_array+0xc>
 80052da:	f855 3b04 	ldr.w	r3, [r5], #4
 80052de:	4798      	blx	r3
 80052e0:	3601      	adds	r6, #1
 80052e2:	e7f2      	b.n	80052ca <__libc_init_array+0x1e>
 80052e4:	0800536c 	.word	0x0800536c
 80052e8:	0800536c 	.word	0x0800536c
 80052ec:	0800536c 	.word	0x0800536c
 80052f0:	08005370 	.word	0x08005370

080052f4 <memset>:
 80052f4:	4402      	add	r2, r0
 80052f6:	4603      	mov	r3, r0
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d100      	bne.n	80052fe <memset+0xa>
 80052fc:	4770      	bx	lr
 80052fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005302:	e7f9      	b.n	80052f8 <memset+0x4>

08005304 <_init>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr

08005310 <_fini>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	bf00      	nop
 8005314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005316:	bc08      	pop	{r3}
 8005318:	469e      	mov	lr, r3
 800531a:	4770      	bx	lr
