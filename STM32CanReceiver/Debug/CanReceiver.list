
CanReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037dc  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003968  08003968  00013968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b0  080039b0  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  080039b0  080039b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039b8  080039b8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039b8  080039b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039bc  080039bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080039c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001124  20000018  080039d8  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000113c  080039d8  0002113c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c268  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d55  00000000  00000000  0002c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002e008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009e0  00000000  00000000  0002eaa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f7db  00000000  00000000  0002f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aae6  00000000  00000000  0004ec5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf416  00000000  00000000  00059741  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118b57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a8c  00000000  00000000  00118bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000018 	.word	0x20000018
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003950 	.word	0x08003950

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000001c 	.word	0x2000001c
 80001c8:	08003950 	.word	0x08003950

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <QueueFull>:
 *  Created on: Mar 16, 2021
 *      Author: Mikkel
 */
#include "circle_queue.h"

int QueueFull(struct Queue *q){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	return (((q->pointWR +1) % SIZE_OF_QUEUE) == q->pointRD);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	885b      	ldrh	r3, [r3, #2]
 80004d0:	3301      	adds	r3, #1
 80004d2:	425a      	negs	r2, r3
 80004d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80004d8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80004dc:	bf58      	it	pl
 80004de:	4253      	negpl	r3, r2
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	8812      	ldrh	r2, [r2, #0]
 80004e4:	4293      	cmp	r3, r2
 80004e6:	bf0c      	ite	eq
 80004e8:	2301      	moveq	r3, #1
 80004ea:	2300      	movne	r3, #0
 80004ec:	b2db      	uxtb	r3, r3
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr

080004fa <EnterQueue>:

int QueueEmpty(struct Queue *q){
	return (q->pointWR == q->pointRD);
}

int EnterQueue(struct Queue *q, uint8_t data) {
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	460b      	mov	r3, r1
 8000504:	70fb      	strb	r3, [r7, #3]

	if (QueueFull(q)) {
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffdc 	bl	80004c4 <QueueFull>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <EnterQueue+0x1c>
		return 0;
 8000512:	2300      	movs	r3, #0
 8000514:	e017      	b.n	8000546 <EnterQueue+0x4c>
	}
	else {
		q->queue[q->pointWR] = data;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	885b      	ldrh	r3, [r3, #2]
 800051a:	461a      	mov	r2, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4413      	add	r3, r2
 8000520:	78fa      	ldrb	r2, [r7, #3]
 8000522:	711a      	strb	r2, [r3, #4]


		if ((q->pointWR + 1) == SIZE_OF_QUEUE){
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	885b      	ldrh	r3, [r3, #2]
 8000528:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800052c:	4293      	cmp	r3, r2
 800052e:	d103      	bne.n	8000538 <EnterQueue+0x3e>
			q->pointWR = 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	805a      	strh	r2, [r3, #2]
 8000536:	e005      	b.n	8000544 <EnterQueue+0x4a>
		}
		else{
			q->pointWR += 1;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	885b      	ldrh	r3, [r3, #2]
 800053c:	3301      	adds	r3, #1
 800053e:	b29a      	uxth	r2, r3
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	805a      	strh	r2, [r3, #2]
		}

	}
	return 1;
 8000544:	2301      	movs	r3, #1
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fbba 	bl	8000cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f813 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 f955 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000562:	f000 f923 	bl	80007ac <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000566:	f000 f88f 	bl	8000688 <MX_CAN1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 800056a:	2140      	movs	r1, #64	; 0x40
 800056c:	4804      	ldr	r0, [pc, #16]	; (8000580 <main+0x30>)
 800056e:	f001 fc41 	bl	8001df4 <HAL_GPIO_ReadPin>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0f8      	beq.n	800056a <main+0x1a>

		 int flag = 1;
 8000578:	2301      	movs	r3, #1
 800057a:	607b      	str	r3, [r7, #4]
	 if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 800057c:	e7f5      	b.n	800056a <main+0x1a>
 800057e:	bf00      	nop
 8000580:	48000400 	.word	0x48000400

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0ac      	sub	sp, #176	; 0xb0
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800058e:	2244      	movs	r2, #68	; 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 f9d4 	bl	8003940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2254      	movs	r2, #84	; 0x54
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 f9c6 	bl	8003940 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b4:	f001 fc4e 	bl	8001e54 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b8:	4b32      	ldr	r3, [pc, #200]	; (8000684 <SystemClock_Config+0x100>)
 80005ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005be:	4a31      	ldr	r2, [pc, #196]	; (8000684 <SystemClock_Config+0x100>)
 80005c0:	f023 0318 	bic.w	r3, r3, #24
 80005c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005c8:	2314      	movs	r3, #20
 80005ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005dc:	2360      	movs	r3, #96	; 0x60
 80005de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e8:	2301      	movs	r3, #1
 80005ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 36;
 80005f4:	2324      	movs	r3, #36	; 0x24
 80005f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fc93 	bl	8001f3c <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800061c:	f000 f9fc 	bl	8000a18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2303      	movs	r3, #3
 8000626:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000634:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f002 f89e 	bl	800277c <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000646:	f000 f9e7 	bl	8000a18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800064a:	2302      	movs	r3, #2
 800064c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800064e:	2300      	movs	r3, #0
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f002 fa97 	bl	8002b88 <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000660:	f000 f9da 	bl	8000a18 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000664:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000668:	f001 fc12 	bl	8001e90 <HAL_PWREx_ControlVoltageScaling>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000672:	f000 f9d1 	bl	8000a18 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000676:	f002 fc7b 	bl	8002f70 <HAL_RCCEx_EnableMSIPLLMode>
}
 800067a:	bf00      	nop
 800067c:	37b0      	adds	r7, #176	; 0xb0
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	  uint32_t ext_id = 0x00000000;							// Den største værdi der kan være på MSB er 1
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
	  uint32_t mask = 0xFFFFFFE0;
 8000692:	f06f 031f 	mvn.w	r3, #31
 8000696:	60bb      	str	r3, [r7, #8]
	  CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;			// Vi vælger at bruge mask mode
 8000698:	4b3f      	ldr	r3, [pc, #252]	; (8000798 <MX_CAN1_Init+0x110>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
	  CanFilter.FilterIdHigh = (ext_id & 0x1FFFFFFF) >> 13; // (ext_id << 3) >> 16;						// Da vi har 32 bit ID, er dette de 16 MSB af ID
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	0b5b      	lsrs	r3, r3, #13
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	4a3c      	ldr	r2, [pc, #240]	; (8000798 <MX_CAN1_Init+0x110>)
 80006a6:	6013      	str	r3, [r2, #0]
	  CanFilter.FilterIdLow =  (ext_id << 3) | CAN_ID_EXT;	// Da vi har 32 bit ID, er dette de 16 LSB af ID
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	4a39      	ldr	r2, [pc, #228]	; (8000798 <MX_CAN1_Init+0x110>)
 80006b2:	6053      	str	r3, [r2, #4]
	  CanFilter.FilterMaskIdHigh = (mask & 0x1FFFFFFF) >> 13;// << 5;					// Maskens 16 MSB
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	0b5b      	lsrs	r3, r3, #13
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4a37      	ldr	r2, [pc, #220]	; (8000798 <MX_CAN1_Init+0x110>)
 80006bc:	6093      	str	r3, [r2, #8]
	  CanFilter.FilterMaskIdLow = (mask << 3);// << 5 | 0x10;					// Maskens 16 LSB
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	4a35      	ldr	r2, [pc, #212]	; (8000798 <MX_CAN1_Init+0x110>)
 80006c4:	60d3      	str	r3, [r2, #12]
	  CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;		// ID er et 32 bit-tal
 80006c6:	4b34      	ldr	r3, [pc, #208]	; (8000798 <MX_CAN1_Init+0x110>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	61da      	str	r2, [r3, #28]
	  CanFilter.FilterActivation = ENABLE;					// Vi aktiverer filteret
 80006cc:	4b32      	ldr	r3, [pc, #200]	; (8000798 <MX_CAN1_Init+0x110>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	621a      	str	r2, [r3, #32]
	  CanFilter.FilterBank = 0;								// Vi vælger filter 0 ud af 14 mulige filtre
 80006d2:	4b31      	ldr	r3, [pc, #196]	; (8000798 <MX_CAN1_Init+0x110>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
	  CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;	// Vi vælger FIFO0 til forskel for FIFO1
 80006d8:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <MX_CAN1_Init+0x110>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]


	  CanRxHeader.DLC = PACKAGE_SIZE;
 80006de:	4b2f      	ldr	r3, [pc, #188]	; (800079c <MX_CAN1_Init+0x114>)
 80006e0:	2208      	movs	r2, #8
 80006e2:	611a      	str	r2, [r3, #16]
	  CanRxHeader.ExtId = 0x0;
 80006e4:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MX_CAN1_Init+0x114>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	605a      	str	r2, [r3, #4]
	  CanRxHeader.IDE = CAN_ID_EXT;
 80006ea:	4b2c      	ldr	r3, [pc, #176]	; (800079c <MX_CAN1_Init+0x114>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	609a      	str	r2, [r3, #8]
	  CanRxHeader.RTR = CAN_RTR_DATA;
 80006f0:	4b2a      	ldr	r3, [pc, #168]	; (800079c <MX_CAN1_Init+0x114>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
	  CanRxHeader.FilterMatchIndex = 0x00;
 80006f6:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_CAN1_Init+0x114>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
	  __HAL_RCC_CAN1_CLK_ENABLE();
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <MX_CAN1_Init+0x118>)
 80006fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <MX_CAN1_Init+0x118>)
 8000702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000706:	6593      	str	r3, [r2, #88]	; 0x58
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <MX_CAN1_Init+0x118>)
 800070a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000714:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <MX_CAN1_Init+0x11c>)
 8000716:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <MX_CAN1_Init+0x120>)
 8000718:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_CAN1_Init+0x11c>)
 800071c:	2212      	movs	r2, #18
 800071e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_CAN1_Init+0x11c>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000726:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <MX_CAN1_Init+0x11c>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800072c:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <MX_CAN1_Init+0x11c>)
 800072e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000732:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_CAN1_Init+0x11c>)
 8000736:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800073a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_CAN1_Init+0x11c>)
 800073e:	2200      	movs	r2, #0
 8000740:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_CAN1_Init+0x11c>)
 8000744:	2200      	movs	r2, #0
 8000746:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_CAN1_Init+0x11c>)
 800074a:	2200      	movs	r2, #0
 800074c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <MX_CAN1_Init+0x11c>)
 8000750:	2200      	movs	r2, #0
 8000752:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_CAN1_Init+0x11c>)
 8000756:	2200      	movs	r2, #0
 8000758:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_CAN1_Init+0x11c>)
 800075c:	2200      	movs	r2, #0
 800075e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <MX_CAN1_Init+0x11c>)
 8000762:	f000 fb29 	bl	8000db8 <HAL_CAN_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_CAN1_Init+0xe8>
  {
    Error_Handler();
 800076c:	f000 f954 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

    while (HAL_CAN_ConfigFilter(&hcan1, &CanFilter) != HAL_OK) {}
 8000770:	bf00      	nop
 8000772:	4909      	ldr	r1, [pc, #36]	; (8000798 <MX_CAN1_Init+0x110>)
 8000774:	480b      	ldr	r0, [pc, #44]	; (80007a4 <MX_CAN1_Init+0x11c>)
 8000776:	f000 fc1a 	bl	8000fae <HAL_CAN_ConfigFilter>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f8      	bne.n	8000772 <MX_CAN1_Init+0xea>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000780:	2102      	movs	r1, #2
 8000782:	4808      	ldr	r0, [pc, #32]	; (80007a4 <MX_CAN1_Init+0x11c>)
 8000784:	f000 fe5b 	bl	800143e <HAL_CAN_ActivateNotification>
    HAL_CAN_Start(&hcan1);
 8000788:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_CAN1_Init+0x11c>)
 800078a:	f000 fcda 	bl	8001142 <HAL_CAN_Start>
  /* USER CODE END CAN1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20001048 	.word	0x20001048
 800079c:	20001070 	.word	0x20001070
 80007a0:	40021000 	.word	0x40021000
 80007a4:	20001110 	.word	0x20001110
 80007a8:	40006400 	.word	0x40006400

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART2_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x58>)
 80007f0:	f002 fcc0 	bl	8003174 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 f90d 	bl	8000a18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000108c 	.word	0x2000108c
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <MX_GPIO_Init+0xa8>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <MX_GPIO_Init+0xa8>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b21      	ldr	r3, [pc, #132]	; (80008b4 <MX_GPIO_Init+0xa8>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_GPIO_Init+0xa8>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <MX_GPIO_Init+0xa8>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_GPIO_Init+0xa8>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_GPIO_Init+0xa8>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <MX_GPIO_Init+0xa8>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_GPIO_Init+0xa8>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	21c9      	movs	r1, #201	; 0xc9
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <MX_GPIO_Init+0xac>)
 8000870:	f001 fad8 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000874:	2340      	movs	r3, #64	; 0x40
 8000876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800087c:	2302      	movs	r3, #2
 800087e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088a:	f001 f949 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_6|GPIO_PIN_7;
 800088e:	23c9      	movs	r3, #201	; 0xc9
 8000890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	4619      	mov	r1, r3
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <MX_GPIO_Init+0xac>)
 80008a6:	f001 f93b 	bl	8001b20 <HAL_GPIO_Init>

}
 80008aa:	bf00      	nop
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000
 80008b8:	48000400 	.word	0x48000400

080008bc <receiveData>:

/* USER CODE BEGIN 4 */
void receiveData() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
	uint8_t buffer[PACKAGE_SIZE] = {0};
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]

	while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 80008ca:	e020      	b.n	800090e <receiveData+0x52>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008cc:	2200      	movs	r2, #0
 80008ce:	2140      	movs	r1, #64	; 0x40
 80008d0:	4815      	ldr	r0, [pc, #84]	; (8000928 <receiveData+0x6c>)
 80008d2:	f001 faa7 	bl	8001e24 <HAL_GPIO_WritePin>
		if (!QueueFull(&queueCANRX)) { // Hvis køen ikke er fuld - Hvis der er en plads til at modtage en besked
 80008d6:	4815      	ldr	r0, [pc, #84]	; (800092c <receiveData+0x70>)
 80008d8:	f7ff fdf4 	bl	80004c4 <QueueFull>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d115      	bne.n	800090e <receiveData+0x52>
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CanRxHeader, buffer); // Modtag beskeden og læg den i buffer
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4a12      	ldr	r2, [pc, #72]	; (8000930 <receiveData+0x74>)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4812      	ldr	r0, [pc, #72]	; (8000934 <receiveData+0x78>)
 80008ea:	f000 fc6e 	bl	80011ca <HAL_CAN_GetRxMessage>
			hej++;
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <receiveData+0x7c>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4a10      	ldr	r2, [pc, #64]	; (8000938 <receiveData+0x7c>)
 80008f6:	6013      	str	r3, [r2, #0]
			placeData(buffer);
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f81e 	bl	800093c <placeData>
			if (hej > 384) {
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <receiveData+0x7c>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8000908:	dd01      	ble.n	800090e <receiveData+0x52>
				int dev = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
	while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 800090e:	2100      	movs	r1, #0
 8000910:	4808      	ldr	r0, [pc, #32]	; (8000934 <receiveData+0x78>)
 8000912:	f000 fd6c 	bl	80013ee <HAL_CAN_GetRxFifoFillLevel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1d7      	bne.n	80008cc <receiveData+0x10>
			for(int i = 0; i < PACKAGE_SIZE; i++){
				EnterQueue(&queueCANRX, buffer[i]); // Læg buffer ind i modtager-queuen
			}*/
		}
	}
}
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	3710      	adds	r7, #16
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	48000400 	.word	0x48000400
 800092c:	20000034 	.word	0x20000034
 8000930:	20001070 	.word	0x20001070
 8000934:	20001110 	.word	0x20001110
 8000938:	20001044 	.word	0x20001044

0800093c <placeData>:

void placeData(uint8_t *DataPass) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	if (CanRxHeader.ExtId == GPSID)
 8000944:	4b2d      	ldr	r3, [pc, #180]	; (80009fc <placeData+0xc0>)
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <placeData+0xc4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	429a      	cmp	r2, r3
 800094e:	d116      	bne.n	800097e <placeData+0x42>
	{
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	e010      	b.n	8000978 <placeData+0x3c>
			if (!QueueFull(&GPSDATA)) {
 8000956:	482b      	ldr	r0, [pc, #172]	; (8000a04 <placeData+0xc8>)
 8000958:	f7ff fdb4 	bl	80004c4 <QueueFull>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d107      	bne.n	8000972 <placeData+0x36>
				EnterQueue(&GPSDATA, *(DataPass + i));
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	4413      	add	r3, r2
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	4825      	ldr	r0, [pc, #148]	; (8000a04 <placeData+0xc8>)
 800096e:	f7ff fdc4 	bl	80004fa <EnterQueue>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	3301      	adds	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b07      	cmp	r3, #7
 800097c:	ddeb      	ble.n	8000956 <placeData+0x1a>
			}

		}
	}
	if (CanRxHeader.ExtId == ACCELID) {
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <placeData+0xc0>)
 8000980:	685a      	ldr	r2, [r3, #4]
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <placeData+0xcc>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	429a      	cmp	r2, r3
 8000988:	d116      	bne.n	80009b8 <placeData+0x7c>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	e010      	b.n	80009b2 <placeData+0x76>
			if (!QueueFull(&ACCEL)) {
 8000990:	481e      	ldr	r0, [pc, #120]	; (8000a0c <placeData+0xd0>)
 8000992:	f7ff fd97 	bl	80004c4 <QueueFull>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d107      	bne.n	80009ac <placeData+0x70>
				EnterQueue(&ACCEL, *(DataPass + i));
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	4819      	ldr	r0, [pc, #100]	; (8000a0c <placeData+0xd0>)
 80009a8:	f7ff fda7 	bl	80004fa <EnterQueue>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 80009ac:	693b      	ldr	r3, [r7, #16]
 80009ae:	3301      	adds	r3, #1
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	2b07      	cmp	r3, #7
 80009b6:	ddeb      	ble.n	8000990 <placeData+0x54>
			}
		}
	}
	if (CanRxHeader.ExtId == DCMOTORID) {
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <placeData+0xc0>)
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <placeData+0xd4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d116      	bne.n	80009f2 <placeData+0xb6>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 80009c4:	2300      	movs	r3, #0
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	e010      	b.n	80009ec <placeData+0xb0>
			if (!QueueFull(&DCMOTOR)) {
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <placeData+0xd8>)
 80009cc:	f7ff fd7a 	bl	80004c4 <QueueFull>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d107      	bne.n	80009e6 <placeData+0xaa>
				EnterQueue(&DCMOTOR, *(DataPass + i));
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4619      	mov	r1, r3
 80009e0:	480c      	ldr	r0, [pc, #48]	; (8000a14 <placeData+0xd8>)
 80009e2:	f7ff fd8a 	bl	80004fa <EnterQueue>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	3301      	adds	r3, #1
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	2b07      	cmp	r3, #7
 80009f0:	ddeb      	ble.n	80009ca <placeData+0x8e>
			}
		}
	}

}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20001070 	.word	0x20001070
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000438 	.word	0x20000438
 8000a08:	20000004 	.word	0x20000004
 8000a0c:	2000083c 	.word	0x2000083c
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000c40 	.word	0x20000c40

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <Error_Handler+0x8>
	...

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <HAL_MspInit+0x44>)
 8000a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a2e:	4a0e      	ldr	r2, [pc, #56]	; (8000a68 <HAL_MspInit+0x44>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6613      	str	r3, [r2, #96]	; 0x60
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <HAL_MspInit+0x44>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_MspInit+0x44>)
 8000a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_MspInit+0x44>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_MspInit+0x44>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <HAL_CAN_MspInit+0x90>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d131      	bne.n	8000af2 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <HAL_CAN_MspInit+0x94>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	4a1b      	ldr	r2, [pc, #108]	; (8000b00 <HAL_CAN_MspInit+0x94>)
 8000a94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9a:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_CAN_MspInit+0x94>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_CAN_MspInit+0x94>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <HAL_CAN_MspInit+0x94>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_CAN_MspInit+0x94>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000abe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ad0:	2309      	movs	r3, #9
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ade:	f001 f81f 	bl	8001b20 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2014      	movs	r0, #20
 8000ae8:	f000 ffe3 	bl	8001ab2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000aec:	2014      	movs	r0, #20
 8000aee:	f000 fffc 	bl	8001aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40006400 	.word	0x40006400
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a20      	ldr	r2, [pc, #128]	; (8000ba4 <HAL_UART_MspInit+0xa0>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d13a      	bne.n	8000b9c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <HAL_UART_MspInit+0xa4>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ba8 <HAL_UART_MspInit+0xa4>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	6593      	str	r3, [r2, #88]	; 0x58
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <HAL_UART_MspInit+0xa4>)
 8000b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <HAL_UART_MspInit+0xa4>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <HAL_UART_MspInit+0xa4>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <HAL_UART_MspInit+0xa4>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b56:	2304      	movs	r3, #4
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b66:	2307      	movs	r3, #7
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f000 ffd4 	bl	8001b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b98:	f000 ffc2 	bl	8001b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	; 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40004400 	.word	0x40004400
 8000ba8:	40021000 	.word	0x40021000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf8:	f000 f8be 	bl	8000d78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c04:	4803      	ldr	r0, [pc, #12]	; (8000c14 <CAN1_RX0_IRQHandler+0x14>)
 8000c06:	f000 fc40 	bl	800148a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  receiveData();
 8000c0a:	f7ff fe57 	bl	80008bc <receiveData>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20001110 	.word	0x20001110

08000c18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <SystemInit+0x5c>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <SystemInit+0x5c>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <SystemInit+0x60>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a11      	ldr	r2, [pc, #68]	; (8000c78 <SystemInit+0x60>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <SystemInit+0x60>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <SystemInit+0x60>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a0d      	ldr	r2, [pc, #52]	; (8000c78 <SystemInit+0x60>)
 8000c44:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c48:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <SystemInit+0x60>)
 8000c50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c54:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <SystemInit+0x60>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <SystemInit+0x60>)
 8000c5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c60:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <SystemInit+0x60>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00
 8000c78:	40021000 	.word	0x40021000

08000c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c80:	f7ff ffca 	bl	8000c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c86:	e003      	b.n	8000c90 <LoopCopyDataInit>

08000c88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c8e:	3104      	adds	r1, #4

08000c90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c98:	d3f6      	bcc.n	8000c88 <CopyDataInit>
	ldr	r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c9c:	e002      	b.n	8000ca4 <LoopFillZerobss>

08000c9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000ca0:	f842 3b04 	str.w	r3, [r2], #4

08000ca4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <LoopForever+0x16>)
	cmp	r2, r3
 8000ca6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ca8:	d3f9      	bcc.n	8000c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000caa:	f002 fe25 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cae:	f7ff fc4f 	bl	8000550 <main>

08000cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb2:	e7fe      	b.n	8000cb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000cb8:	080039c0 	.word	0x080039c0
	ldr	r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000cc0:	20000018 	.word	0x20000018
	ldr	r2, =_sbss
 8000cc4:	20000018 	.word	0x20000018
	ldr	r3, = _ebss
 8000cc8:	2000113c 	.word	0x2000113c

08000ccc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC1_IRQHandler>

08000cce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f000 fedf 	bl	8001a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f80e 	bl	8000d00 <HAL_InitTick>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	71fb      	strb	r3, [r7, #7]
 8000cee:	e001      	b.n	8000cf4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cf0:	f7ff fe98 	bl	8000a24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d0c:	4b17      	ldr	r3, [pc, #92]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d023      	beq.n	8000d5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d14:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <HAL_InitTick+0x70>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <HAL_InitTick+0x6c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 feeb 	bl	8001b06 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d10f      	bne.n	8000d56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d809      	bhi.n	8000d50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f000 feb5 	bl	8001ab2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d48:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_InitTick+0x74>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6013      	str	r3, [r2, #0]
 8000d4e:	e007      	b.n	8000d60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	73fb      	strb	r3, [r7, #15]
 8000d54:	e004      	b.n	8000d60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	73fb      	strb	r3, [r7, #15]
 8000d5a:	e001      	b.n	8000d60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000014 	.word	0x20000014
 8000d70:	2000000c 	.word	0x2000000c
 8000d74:	20000010 	.word	0x20000010

08000d78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x20>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	461a      	mov	r2, r3
 8000d82:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x24>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4413      	add	r3, r2
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_IncTick+0x24>)
 8000d8a:	6013      	str	r3, [r2, #0]
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000014 	.word	0x20000014
 8000d9c:	20001138 	.word	0x20001138

08000da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return uwTick;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_GetTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20001138 	.word	0x20001138

08000db8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d101      	bne.n	8000dca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e0ed      	b.n	8000fa6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d102      	bne.n	8000ddc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff fe48 	bl	8000a6c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f022 0202 	bic.w	r2, r2, #2
 8000dea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dec:	f7ff ffd8 	bl	8000da0 <HAL_GetTick>
 8000df0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000df2:	e012      	b.n	8000e1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000df4:	f7ff ffd4 	bl	8000da0 <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b0a      	cmp	r3, #10
 8000e00:	d90b      	bls.n	8000e1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2205      	movs	r2, #5
 8000e12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e0c5      	b.n	8000fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1e5      	bne.n	8000df4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 0201 	orr.w	r2, r2, #1
 8000e36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e38:	f7ff ffb2 	bl	8000da0 <HAL_GetTick>
 8000e3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e3e:	e012      	b.n	8000e66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e40:	f7ff ffae 	bl	8000da0 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b0a      	cmp	r3, #10
 8000e4c:	d90b      	bls.n	8000e66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2205      	movs	r2, #5
 8000e5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e09f      	b.n	8000fa6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0e5      	beq.n	8000e40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	7e1b      	ldrb	r3, [r3, #24]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d108      	bne.n	8000e8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	e007      	b.n	8000e9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7e5b      	ldrb	r3, [r3, #25]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d108      	bne.n	8000eb8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	e007      	b.n	8000ec8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7e9b      	ldrb	r3, [r3, #26]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d108      	bne.n	8000ee2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0220 	orr.w	r2, r2, #32
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e007      	b.n	8000ef2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0220 	bic.w	r2, r2, #32
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7edb      	ldrb	r3, [r3, #27]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d108      	bne.n	8000f0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0210 	bic.w	r2, r2, #16
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e007      	b.n	8000f1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f042 0210 	orr.w	r2, r2, #16
 8000f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7f1b      	ldrb	r3, [r3, #28]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d108      	bne.n	8000f36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0208 	orr.w	r2, r2, #8
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e007      	b.n	8000f46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0208 	bic.w	r2, r2, #8
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7f5b      	ldrb	r3, [r3, #29]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d108      	bne.n	8000f60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0204 	orr.w	r2, r2, #4
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	e007      	b.n	8000f70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0204 	bic.w	r2, r2, #4
 8000f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	691b      	ldr	r3, [r3, #16]
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	695b      	ldr	r3, [r3, #20]
 8000f84:	ea42 0103 	orr.w	r1, r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	1e5a      	subs	r2, r3, #1
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b087      	sub	sp, #28
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fc4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fc6:	7cfb      	ldrb	r3, [r7, #19]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d003      	beq.n	8000fd4 <HAL_CAN_ConfigFilter+0x26>
 8000fcc:	7cfb      	ldrb	r3, [r7, #19]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	f040 80aa 	bne.w	8001128 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fda:	f043 0201 	orr.w	r2, r3, #1
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	f003 031f 	and.w	r3, r3, #31
 8000fec:	2201      	movs	r2, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	401a      	ands	r2, r3
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d123      	bne.n	8001056 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	43db      	mvns	r3, r3
 8001018:	401a      	ands	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001030:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	3248      	adds	r2, #72	; 0x48
 8001036:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800104a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800104c:	6979      	ldr	r1, [r7, #20]
 800104e:	3348      	adds	r3, #72	; 0x48
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	440b      	add	r3, r1
 8001054:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d122      	bne.n	80010a4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	431a      	orrs	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800107e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3248      	adds	r2, #72	; 0x48
 8001084:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001098:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800109a:	6979      	ldr	r1, [r7, #20]
 800109c:	3348      	adds	r3, #72	; 0x48
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d109      	bne.n	80010c0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80010be:	e007      	b.n	80010d0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	431a      	orrs	r2, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d109      	bne.n	80010ec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43db      	mvns	r3, r3
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80010ea:	e007      	b.n	80010fc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	431a      	orrs	r2, r3
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d107      	bne.n	8001114 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	431a      	orrs	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800111a:	f023 0201 	bic.w	r2, r3, #1
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001124:	2300      	movs	r3, #0
 8001126:	e006      	b.n	8001136 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
  }
}
 8001136:	4618      	mov	r0, r3
 8001138:	371c      	adds	r7, #28
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d12e      	bne.n	80011b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2202      	movs	r2, #2
 800115a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0201 	bic.w	r2, r2, #1
 800116c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800116e:	f7ff fe17 	bl	8000da0 <HAL_GetTick>
 8001172:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001174:	e012      	b.n	800119c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001176:	f7ff fe13 	bl	8000da0 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b0a      	cmp	r3, #10
 8001182:	d90b      	bls.n	800119c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2205      	movs	r2, #5
 8001194:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e012      	b.n	80011c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1e5      	bne.n	8001176 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	e006      	b.n	80011c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
  }
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011ca:	b480      	push	{r7}
 80011cc:	b087      	sub	sp, #28
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011de:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d003      	beq.n	80011ee <HAL_CAN_GetRxMessage+0x24>
 80011e6:	7dfb      	ldrb	r3, [r7, #23]
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	f040 80f3 	bne.w	80013d4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d10e      	bne.n	8001212 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	f003 0303 	and.w	r3, r3, #3
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d116      	bne.n	8001230 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e0e7      	b.n	80013e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b00      	cmp	r3, #0
 800121e:	d107      	bne.n	8001230 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001224:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0d8      	b.n	80013e2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	331b      	adds	r3, #27
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0204 	and.w	r2, r3, #4
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10c      	bne.n	8001268 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	331b      	adds	r3, #27
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	0d5b      	lsrs	r3, r3, #21
 800125e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	e00b      	b.n	8001280 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	331b      	adds	r3, #27
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	4413      	add	r3, r2
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	08db      	lsrs	r3, r3, #3
 8001278:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	331b      	adds	r3, #27
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	4413      	add	r3, r2
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0202 	and.w	r2, r3, #2
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	331b      	adds	r3, #27
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	4413      	add	r3, r2
 80012a2:	3304      	adds	r3, #4
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 020f 	and.w	r2, r3, #15
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	331b      	adds	r3, #27
 80012b6:	011b      	lsls	r3, r3, #4
 80012b8:	4413      	add	r3, r2
 80012ba:	3304      	adds	r3, #4
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	0a1b      	lsrs	r3, r3, #8
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	331b      	adds	r3, #27
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	3304      	adds	r3, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	0c1b      	lsrs	r3, r3, #16
 80012d8:	b29a      	uxth	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	4413      	add	r3, r2
 80012e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	b2da      	uxtb	r2, r3
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	4413      	add	r3, r2
 80012fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	0a1a      	lsrs	r2, r3, #8
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	4413      	add	r3, r2
 8001318:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	0c1a      	lsrs	r2, r3, #16
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	3302      	adds	r3, #2
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	011b      	lsls	r3, r3, #4
 8001330:	4413      	add	r3, r2
 8001332:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	0e1a      	lsrs	r2, r3, #24
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	3303      	adds	r3, #3
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	011b      	lsls	r3, r3, #4
 800134a:	4413      	add	r3, r2
 800134c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	3304      	adds	r3, #4
 8001356:	b2d2      	uxtb	r2, r2
 8001358:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	011b      	lsls	r3, r3, #4
 8001362:	4413      	add	r3, r2
 8001364:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	0a1a      	lsrs	r2, r3, #8
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	3305      	adds	r3, #5
 8001370:	b2d2      	uxtb	r2, r2
 8001372:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	4413      	add	r3, r2
 800137e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0c1a      	lsrs	r2, r3, #16
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	3306      	adds	r3, #6
 800138a:	b2d2      	uxtb	r2, r2
 800138c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	4413      	add	r3, r2
 8001398:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	0e1a      	lsrs	r2, r3, #24
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	3307      	adds	r3, #7
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d108      	bne.n	80013c0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68da      	ldr	r2, [r3, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0220 	orr.w	r2, r2, #32
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	e007      	b.n	80013d0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0220 	orr.w	r2, r2, #32
 80013ce:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	e006      	b.n	80013e2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
  }
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001402:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001404:	7afb      	ldrb	r3, [r7, #11]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d002      	beq.n	8001410 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800140a:	7afb      	ldrb	r3, [r7, #11]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d10f      	bne.n	8001430 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d106      	bne.n	8001424 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e005      	b.n	8001430 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001430:	68fb      	ldr	r3, [r7, #12]
}
 8001432:	4618      	mov	r0, r3
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800143e:	b480      	push	{r7}
 8001440:	b085      	sub	sp, #20
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b01      	cmp	r3, #1
 8001454:	d002      	beq.n	800145c <HAL_CAN_ActivateNotification+0x1e>
 8001456:	7bfb      	ldrb	r3, [r7, #15]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d109      	bne.n	8001470 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6959      	ldr	r1, [r3, #20]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	683a      	ldr	r2, [r7, #0]
 8001468:	430a      	orrs	r2, r1
 800146a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800146c:	2300      	movs	r3, #0
 800146e:	e006      	b.n	800147e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
  }
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b08a      	sub	sp, #40	; 0x28
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80014c6:	6a3b      	ldr	r3, [r7, #32]
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d07c      	beq.n	80015ca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d023      	beq.n	8001522 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d003      	beq.n	80014f4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f983 	bl	80017f8 <HAL_CAN_TxMailbox0CompleteCallback>
 80014f2:	e016      	b.n	8001522 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d004      	beq.n	8001508 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001500:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001504:	627b      	str	r3, [r7, #36]	; 0x24
 8001506:	e00c      	b.n	8001522 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
 800151a:	e002      	b.n	8001522 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 f989 	bl	8001834 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001528:	2b00      	cmp	r3, #0
 800152a:	d024      	beq.n	8001576 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001534:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800153c:	2b00      	cmp	r3, #0
 800153e:	d003      	beq.n	8001548 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f963 	bl	800180c <HAL_CAN_TxMailbox1CompleteCallback>
 8001546:	e016      	b.n	8001576 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154e:	2b00      	cmp	r3, #0
 8001550:	d004      	beq.n	800155c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
 800155a:	e00c      	b.n	8001576 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001562:	2b00      	cmp	r3, #0
 8001564:	d004      	beq.n	8001570 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
 800156e:	e002      	b.n	8001576 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f969 	bl	8001848 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d024      	beq.n	80015ca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001588:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f943 	bl	8001820 <HAL_CAN_TxMailbox2CompleteCallback>
 800159a:	e016      	b.n	80015ca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
 80015ae:	e00c      	b.n	80015ca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d004      	beq.n	80015c4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	e002      	b.n	80015ca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f949 	bl	800185c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80015ca:	6a3b      	ldr	r3, [r7, #32]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d00c      	beq.n	80015ee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2210      	movs	r2, #16
 80015ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00b      	beq.n	8001610 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2208      	movs	r2, #8
 8001608:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f93a 	bl	8001884 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b00      	cmp	r3, #0
 8001626:	d002      	beq.n	800162e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f921 	bl	8001870 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00c      	beq.n	8001652 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001648:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2210      	movs	r2, #16
 8001650:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	f003 0320 	and.w	r3, r3, #32
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00b      	beq.n	8001674 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2208      	movs	r2, #8
 800166c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f91c 	bl	80018ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001674:	6a3b      	ldr	r3, [r7, #32]
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f903 	bl	8001898 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001692:	6a3b      	ldr	r3, [r7, #32]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00b      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0310 	and.w	r3, r3, #16
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2210      	movs	r2, #16
 80016ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f906 	bl	80018c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2208      	movs	r2, #8
 80016ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f8ff 	bl	80018d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d07b      	beq.n	80017d8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d072      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d008      	beq.n	8001706 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001706:	6a3b      	ldr	r3, [r7, #32]
 8001708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800170c:	2b00      	cmp	r3, #0
 800170e:	d008      	beq.n	8001722 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800171a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001722:	6a3b      	ldr	r3, [r7, #32]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	2b00      	cmp	r3, #0
 800172a:	d008      	beq.n	800173e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800173e:	6a3b      	ldr	r3, [r7, #32]
 8001740:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001744:	2b00      	cmp	r3, #0
 8001746:	d043      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800174e:	2b00      	cmp	r3, #0
 8001750:	d03e      	beq.n	80017d0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001758:	2b60      	cmp	r3, #96	; 0x60
 800175a:	d02b      	beq.n	80017b4 <HAL_CAN_IRQHandler+0x32a>
 800175c:	2b60      	cmp	r3, #96	; 0x60
 800175e:	d82e      	bhi.n	80017be <HAL_CAN_IRQHandler+0x334>
 8001760:	2b50      	cmp	r3, #80	; 0x50
 8001762:	d022      	beq.n	80017aa <HAL_CAN_IRQHandler+0x320>
 8001764:	2b50      	cmp	r3, #80	; 0x50
 8001766:	d82a      	bhi.n	80017be <HAL_CAN_IRQHandler+0x334>
 8001768:	2b40      	cmp	r3, #64	; 0x40
 800176a:	d019      	beq.n	80017a0 <HAL_CAN_IRQHandler+0x316>
 800176c:	2b40      	cmp	r3, #64	; 0x40
 800176e:	d826      	bhi.n	80017be <HAL_CAN_IRQHandler+0x334>
 8001770:	2b30      	cmp	r3, #48	; 0x30
 8001772:	d010      	beq.n	8001796 <HAL_CAN_IRQHandler+0x30c>
 8001774:	2b30      	cmp	r3, #48	; 0x30
 8001776:	d822      	bhi.n	80017be <HAL_CAN_IRQHandler+0x334>
 8001778:	2b10      	cmp	r3, #16
 800177a:	d002      	beq.n	8001782 <HAL_CAN_IRQHandler+0x2f8>
 800177c:	2b20      	cmp	r3, #32
 800177e:	d005      	beq.n	800178c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001780:	e01d      	b.n	80017be <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f043 0308 	orr.w	r3, r3, #8
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800178a:	e019      	b.n	80017c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001794:	e014      	b.n	80017c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001798:	f043 0320 	orr.w	r3, r3, #32
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800179e:	e00f      	b.n	80017c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017a8:	e00a      	b.n	80017c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017b2:	e005      	b.n	80017c0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80017bc:	e000      	b.n	80017c0 <HAL_CAN_IRQHandler+0x336>
            break;
 80017be:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80017ce:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2204      	movs	r2, #4
 80017d6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d008      	beq.n	80017f0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 f87c 	bl	80018e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80017f0:	bf00      	nop
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	; (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4907      	ldr	r1, [pc, #28]	; (8001998 <__NVIC_EnableIRQ+0x38>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	; (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	; (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	; 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	; 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a68:	d301      	bcc.n	8001a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e00f      	b.n	8001a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <SysTick_Config+0x40>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a76:	210f      	movs	r1, #15
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295
 8001a7c:	f7ff ff8e 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <SysTick_Config+0x40>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a86:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <SysTick_Config+0x40>)
 8001a88:	2207      	movs	r2, #7
 8001a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ff29 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b086      	sub	sp, #24
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	4603      	mov	r3, r0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac4:	f7ff ff3e 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	68b9      	ldr	r1, [r7, #8]
 8001ace:	6978      	ldr	r0, [r7, #20]
 8001ad0:	f7ff ff8e 	bl	80019f0 <NVIC_EncodePriority>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ada:	4611      	mov	r1, r2
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff5d 	bl	800199c <__NVIC_SetPriority>
}
 8001ae2:	bf00      	nop
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff ff31 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffa2 	bl	8001a58 <SysTick_Config>
 8001b14:	4603      	mov	r3, r0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
	...

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	e148      	b.n	8001dc2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 813a 	beq.w	8001dbc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d00b      	beq.n	8001b68 <HAL_GPIO_Init+0x48>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d007      	beq.n	8001b68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b5c:	2b11      	cmp	r3, #17
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b12      	cmp	r3, #18
 8001b66:	d130      	bne.n	8001bca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	091b      	lsrs	r3, r3, #4
 8001bb4:	f003 0201 	and.w	r2, r3, #1
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0xea>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b12      	cmp	r3, #18
 8001c08:	d123      	bne.n	8001c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	6939      	ldr	r1, [r7, #16]
 8001c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0203 	and.w	r2, r3, #3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8094 	beq.w	8001dbc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b52      	ldr	r3, [pc, #328]	; (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c98:	4a51      	ldr	r2, [pc, #324]	; (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca0:	4b4f      	ldr	r3, [pc, #316]	; (8001de0 <HAL_GPIO_Init+0x2c0>)
 8001ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cac:	4a4d      	ldr	r2, [pc, #308]	; (8001de4 <HAL_GPIO_Init+0x2c4>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_GPIO_Init+0x1d4>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a43      	ldr	r2, [pc, #268]	; (8001de8 <HAL_GPIO_Init+0x2c8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d007      	beq.n	8001cf0 <HAL_GPIO_Init+0x1d0>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a42      	ldr	r2, [pc, #264]	; (8001dec <HAL_GPIO_Init+0x2cc>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d101      	bne.n	8001cec <HAL_GPIO_Init+0x1cc>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e004      	b.n	8001cf6 <HAL_GPIO_Init+0x1d6>
 8001cec:	2307      	movs	r3, #7
 8001cee:	e002      	b.n	8001cf6 <HAL_GPIO_Init+0x1d6>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <HAL_GPIO_Init+0x1d6>
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	f002 0203 	and.w	r2, r2, #3
 8001cfc:	0092      	lsls	r2, r2, #2
 8001cfe:	4093      	lsls	r3, r2
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d06:	4937      	ldr	r1, [pc, #220]	; (8001de4 <HAL_GPIO_Init+0x2c4>)
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d14:	4b36      	ldr	r3, [pc, #216]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d38:	4a2d      	ldr	r2, [pc, #180]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001d3e:	4b2c      	ldr	r3, [pc, #176]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d62:	4a23      	ldr	r2, [pc, #140]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d68:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d8c:	4a18      	ldr	r2, [pc, #96]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d92:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001db6:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <HAL_GPIO_Init+0x2d0>)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f47f aeaf 	bne.w	8001b30 <HAL_GPIO_Init+0x10>
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	bf00      	nop
 8001dd6:	371c      	adds	r7, #28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010000 	.word	0x40010000
 8001de8:	48000400 	.word	0x48000400
 8001dec:	48000800 	.word	0x48000800
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a04      	ldr	r2, [pc, #16]	; (8001e70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]
}
 8001e64:	bf00      	nop
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40007000 	.word	0x40007000

08001e74 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e78:	4b04      	ldr	r3, [pc, #16]	; (8001e8c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40007000 	.word	0x40007000

08001e90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e9e:	d130      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea0:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eac:	d038      	beq.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eb6:	4a1e      	ldr	r2, [pc, #120]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ebc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2232      	movs	r2, #50	; 0x32
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0c9b      	lsrs	r3, r3, #18
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ed4:	e002      	b.n	8001edc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee8:	d102      	bne.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f2      	bne.n	8001ed6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ef0:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efc:	d110      	bne.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e00f      	b.n	8001f22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f0e:	d007      	beq.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f18:	4a05      	ldr	r2, [pc, #20]	; (8001f30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40007000 	.word	0x40007000
 8001f34:	2000000c 	.word	0x2000000c
 8001f38:	431bde83 	.word	0x431bde83

08001f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b088      	sub	sp, #32
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	f000 bc11 	b.w	8002772 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f50:	4ba0      	ldr	r3, [pc, #640]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 030c 	and.w	r3, r3, #12
 8001f58:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f5a:	4b9e      	ldr	r3, [pc, #632]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0310 	and.w	r3, r3, #16
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f000 80e4 	beq.w	800213a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <HAL_RCC_OscConfig+0x4c>
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b0c      	cmp	r3, #12
 8001f7c:	f040 808b 	bne.w	8002096 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	f040 8087 	bne.w	8002096 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f88:	4b92      	ldr	r3, [pc, #584]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x64>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d101      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e3e8      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1a      	ldr	r2, [r3, #32]
 8001fa4:	4b8b      	ldr	r3, [pc, #556]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d004      	beq.n	8001fba <HAL_RCC_OscConfig+0x7e>
 8001fb0:	4b88      	ldr	r3, [pc, #544]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fb8:	e005      	b.n	8001fc6 <HAL_RCC_OscConfig+0x8a>
 8001fba:	4b86      	ldr	r3, [pc, #536]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8001fbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d223      	bcs.n	8002012 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 fd7a 	bl	8002ac8 <RCC_SetFlashLatencyFromMSIRange>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e3c9      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fde:	4b7d      	ldr	r3, [pc, #500]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a7c      	ldr	r2, [pc, #496]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b7a      	ldr	r3, [pc, #488]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4977      	ldr	r1, [pc, #476]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffc:	4b75      	ldr	r3, [pc, #468]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	4972      	ldr	r1, [pc, #456]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
 8002010:	e025      	b.n	800205e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002012:	4b70      	ldr	r3, [pc, #448]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6f      	ldr	r2, [pc, #444]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b6d      	ldr	r3, [pc, #436]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	496a      	ldr	r1, [pc, #424]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002030:	4b68      	ldr	r3, [pc, #416]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	4965      	ldr	r1, [pc, #404]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fd3a 	bl	8002ac8 <RCC_SetFlashLatencyFromMSIRange>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e389      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800205e:	f000 fc6f 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 8002062:	4602      	mov	r2, r0
 8002064:	4b5b      	ldr	r3, [pc, #364]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 030f 	and.w	r3, r3, #15
 800206e:	495a      	ldr	r1, [pc, #360]	; (80021d8 <HAL_RCC_OscConfig+0x29c>)
 8002070:	5ccb      	ldrb	r3, [r1, r3]
 8002072:	f003 031f 	and.w	r3, r3, #31
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	4a58      	ldr	r2, [pc, #352]	; (80021dc <HAL_RCC_OscConfig+0x2a0>)
 800207c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800207e:	4b58      	ldr	r3, [pc, #352]	; (80021e0 <HAL_RCC_OscConfig+0x2a4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f7fe fe3c 	bl	8000d00 <HAL_InitTick>
 8002088:	4603      	mov	r3, r0
 800208a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d052      	beq.n	8002138 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	e36d      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d032      	beq.n	8002104 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800209e:	4b4d      	ldr	r3, [pc, #308]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80020a4:	f043 0301 	orr.w	r3, r3, #1
 80020a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fe79 	bl	8000da0 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b2:	f7fe fe75 	bl	8000da0 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e356      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020c4:	4b43      	ldr	r3, [pc, #268]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020d0:	4b40      	ldr	r3, [pc, #256]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a3f      	ldr	r2, [pc, #252]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	493a      	ldr	r1, [pc, #232]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ee:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	4935      	ldr	r1, [pc, #212]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
 8002102:	e01a      	b.n	800213a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002104:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a32      	ldr	r2, [pc, #200]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002110:	f7fe fe46 	bl	8000da0 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002118:	f7fe fe42 	bl	8000da0 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e323      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x1dc>
 8002136:	e000      	b.n	800213a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002138:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d073      	beq.n	800222e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	2b08      	cmp	r3, #8
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x21c>
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	2b0c      	cmp	r3, #12
 8002150:	d10e      	bne.n	8002170 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d10b      	bne.n	8002170 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d063      	beq.n	800222c <HAL_RCC_OscConfig+0x2f0>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d15f      	bne.n	800222c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e300      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002178:	d106      	bne.n	8002188 <HAL_RCC_OscConfig+0x24c>
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8002180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	e01d      	b.n	80021c4 <HAL_RCC_OscConfig+0x288>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002190:	d10c      	bne.n	80021ac <HAL_RCC_OscConfig+0x270>
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 8002198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	4b0d      	ldr	r3, [pc, #52]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80021a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e00b      	b.n	80021c4 <HAL_RCC_OscConfig+0x288>
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <HAL_RCC_OscConfig+0x298>)
 80021be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01b      	beq.n	8002204 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe fde8 	bl	8000da0 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d2:	e010      	b.n	80021f6 <HAL_RCC_OscConfig+0x2ba>
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08003968 	.word	0x08003968
 80021dc:	2000000c 	.word	0x2000000c
 80021e0:	20000010 	.word	0x20000010
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe fddc 	bl	8000da0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e2bd      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f6:	4baf      	ldr	r3, [pc, #700]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x2a8>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002204:	f7fe fdcc 	bl	8000da0 <HAL_GetTick>
 8002208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800220a:	e008      	b.n	800221e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800220c:	f7fe fdc8 	bl	8000da0 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b64      	cmp	r3, #100	; 0x64
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e2a9      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800221e:	4ba5      	ldr	r3, [pc, #660]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f0      	bne.n	800220c <HAL_RCC_OscConfig+0x2d0>
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d060      	beq.n	80022fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	2b04      	cmp	r3, #4
 800223e:	d005      	beq.n	800224c <HAL_RCC_OscConfig+0x310>
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	2b0c      	cmp	r3, #12
 8002244:	d119      	bne.n	800227a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d116      	bne.n	800227a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800224c:	4b99      	ldr	r3, [pc, #612]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_OscConfig+0x328>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e286      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002264:	4b93      	ldr	r3, [pc, #588]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	4990      	ldr	r1, [pc, #576]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002274:	4313      	orrs	r3, r2
 8002276:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002278:	e040      	b.n	80022fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d023      	beq.n	80022ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002282:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a8b      	ldr	r2, [pc, #556]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f7fe fd87 	bl	8000da0 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002296:	f7fe fd83 	bl	8000da0 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e264      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a8:	4b82      	ldr	r3, [pc, #520]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022b4:	4b7f      	ldr	r3, [pc, #508]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	061b      	lsls	r3, r3, #24
 80022c2:	497c      	ldr	r1, [pc, #496]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
 80022c8:	e018      	b.n	80022fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ca:	4b7a      	ldr	r3, [pc, #488]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a79      	ldr	r2, [pc, #484]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80022d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d6:	f7fe fd63 	bl	8000da0 <HAL_GetTick>
 80022da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022dc:	e008      	b.n	80022f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022de:	f7fe fd5f 	bl	8000da0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e240      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f0:	4b70      	ldr	r3, [pc, #448]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f0      	bne.n	80022de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	2b00      	cmp	r3, #0
 8002306:	d03c      	beq.n	8002382 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01c      	beq.n	800234a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002310:	4b68      	ldr	r3, [pc, #416]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002316:	4a67      	ldr	r2, [pc, #412]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002320:	f7fe fd3e 	bl	8000da0 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7fe fd3a 	bl	8000da0 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e21b      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800233a:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800233c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ef      	beq.n	8002328 <HAL_RCC_OscConfig+0x3ec>
 8002348:	e01b      	b.n	8002382 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234a:	4b5a      	ldr	r3, [pc, #360]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800234c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002350:	4a58      	ldr	r2, [pc, #352]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7fe fd21 	bl	8000da0 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002362:	f7fe fd1d 	bl	8000da0 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e1fe      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002374:	4b4f      	ldr	r3, [pc, #316]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ef      	bne.n	8002362 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 80a6 	beq.w	80024dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002394:	4b47      	ldr	r3, [pc, #284]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10d      	bne.n	80023bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a0:	4b44      	ldr	r3, [pc, #272]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	4a43      	ldr	r2, [pc, #268]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80023a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023aa:	6593      	str	r3, [r2, #88]	; 0x58
 80023ac:	4b41      	ldr	r3, [pc, #260]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 80023ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	60bb      	str	r3, [r7, #8]
 80023b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b8:	2301      	movs	r3, #1
 80023ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023bc:	4b3e      	ldr	r3, [pc, #248]	; (80024b8 <HAL_RCC_OscConfig+0x57c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d118      	bne.n	80023fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023c8:	4b3b      	ldr	r3, [pc, #236]	; (80024b8 <HAL_RCC_OscConfig+0x57c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a3a      	ldr	r2, [pc, #232]	; (80024b8 <HAL_RCC_OscConfig+0x57c>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023d4:	f7fe fce4 	bl	8000da0 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023dc:	f7fe fce0 	bl	8000da0 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1c1      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ee:	4b32      	ldr	r3, [pc, #200]	; (80024b8 <HAL_RCC_OscConfig+0x57c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <HAL_RCC_OscConfig+0x4d8>
 8002402:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002408:	4a2a      	ldr	r2, [pc, #168]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002412:	e024      	b.n	800245e <HAL_RCC_OscConfig+0x522>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d110      	bne.n	800243e <HAL_RCC_OscConfig+0x502>
 800241c:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002424:	f043 0304 	orr.w	r3, r3, #4
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800242c:	4b21      	ldr	r3, [pc, #132]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	4a20      	ldr	r2, [pc, #128]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800243c:	e00f      	b.n	800245e <HAL_RCC_OscConfig+0x522>
 800243e:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002456:	f023 0304 	bic.w	r3, r3, #4
 800245a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d016      	beq.n	8002494 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe fc9b 	bl	8000da0 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe fc97 	bl	8000da0 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e176      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002484:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <HAL_RCC_OscConfig+0x578>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0ed      	beq.n	800246e <HAL_RCC_OscConfig+0x532>
 8002492:	e01a      	b.n	80024ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7fe fc84 	bl	8000da0 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800249a:	e00f      	b.n	80024bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249c:	f7fe fc80 	bl	8000da0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d906      	bls.n	80024bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e15f      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024bc:	4baa      	ldr	r3, [pc, #680]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1e8      	bne.n	800249c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ca:	7ffb      	ldrb	r3, [r7, #31]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d105      	bne.n	80024dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d0:	4ba5      	ldr	r3, [pc, #660]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	4aa4      	ldr	r2, [pc, #656]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80024d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d03c      	beq.n	8002562 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01c      	beq.n	800252a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024f0:	4b9d      	ldr	r3, [pc, #628]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80024f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f6:	4a9c      	ldr	r2, [pc, #624]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002500:	f7fe fc4e 	bl	8000da0 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002508:	f7fe fc4a 	bl	8000da0 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e12b      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800251a:	4b93      	ldr	r3, [pc, #588]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 800251c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0ef      	beq.n	8002508 <HAL_RCC_OscConfig+0x5cc>
 8002528:	e01b      	b.n	8002562 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800252a:	4b8f      	ldr	r3, [pc, #572]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 800252c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002530:	4a8d      	ldr	r2, [pc, #564]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7fe fc31 	bl	8000da0 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002542:	f7fe fc2d 	bl	8000da0 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e10e      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002554:	4b84      	ldr	r3, [pc, #528]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ef      	bne.n	8002542 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8102 	beq.w	8002770 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	2b02      	cmp	r3, #2
 8002572:	f040 80c5 	bne.w	8002700 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002576:	4b7c      	ldr	r3, [pc, #496]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 0203 	and.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	429a      	cmp	r2, r3
 8002588:	d12c      	bne.n	80025e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	3b01      	subs	r3, #1
 8002596:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d123      	bne.n	80025e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d11b      	bne.n	80025e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d113      	bne.n	80025e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c6:	085b      	lsrs	r3, r3, #1
 80025c8:	3b01      	subs	r3, #1
 80025ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d109      	bne.n	80025e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	3b01      	subs	r3, #1
 80025de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d067      	beq.n	80026b4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	2b0c      	cmp	r3, #12
 80025e8:	d062      	beq.n	80026b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025ea:	4b5f      	ldr	r3, [pc, #380]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0bb      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025fa:	4b5b      	ldr	r3, [pc, #364]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a5a      	ldr	r2, [pc, #360]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002600:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002604:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002606:	f7fe fbcb 	bl	8000da0 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260e:	f7fe fbc7 	bl	8000da0 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e0a8      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002620:	4b51      	ldr	r3, [pc, #324]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f0      	bne.n	800260e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800262c:	4b4e      	ldr	r3, [pc, #312]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	4b4e      	ldr	r3, [pc, #312]	; (800276c <HAL_RCC_OscConfig+0x830>)
 8002632:	4013      	ands	r3, r2
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800263c:	3a01      	subs	r2, #1
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	4311      	orrs	r1, r2
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002646:	0212      	lsls	r2, r2, #8
 8002648:	4311      	orrs	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800264e:	0852      	lsrs	r2, r2, #1
 8002650:	3a01      	subs	r2, #1
 8002652:	0552      	lsls	r2, r2, #21
 8002654:	4311      	orrs	r1, r2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800265a:	0852      	lsrs	r2, r2, #1
 800265c:	3a01      	subs	r2, #1
 800265e:	0652      	lsls	r2, r2, #25
 8002660:	4311      	orrs	r1, r2
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002666:	06d2      	lsls	r2, r2, #27
 8002668:	430a      	orrs	r2, r1
 800266a:	493f      	ldr	r1, [pc, #252]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 800266c:	4313      	orrs	r3, r2
 800266e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002670:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a3c      	ldr	r2, [pc, #240]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800267c:	4b3a      	ldr	r3, [pc, #232]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	4a39      	ldr	r2, [pc, #228]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002686:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002688:	f7fe fb8a 	bl	8000da0 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fb86 	bl	8000da0 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e067      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a2:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026ae:	e05f      	b.n	8002770 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e05e      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b4:	4b2c      	ldr	r3, [pc, #176]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d157      	bne.n	8002770 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026c0:	4b29      	ldr	r3, [pc, #164]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a28      	ldr	r2, [pc, #160]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a25      	ldr	r2, [pc, #148]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026d8:	f7fe fb62 	bl	8000da0 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe fb5e 	bl	8000da0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e03f      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x7a4>
 80026fe:	e037      	b.n	8002770 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	2b0c      	cmp	r3, #12
 8002704:	d02d      	beq.n	8002762 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a17      	ldr	r2, [pc, #92]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 800270c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002710:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d105      	bne.n	800272a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	4a11      	ldr	r2, [pc, #68]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002724:	f023 0303 	bic.w	r3, r3, #3
 8002728:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800272a:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002730:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002734:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002738:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fb31 	bl	8000da0 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002742:	f7fe fb2d 	bl	8000da0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e00e      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002754:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_RCC_OscConfig+0x82c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x806>
 8002760:	e006      	b.n	8002770 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e005      	b.n	8002772 <HAL_RCC_OscConfig+0x836>
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop

0800277c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0c8      	b.n	8002922 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002790:	4b66      	ldr	r3, [pc, #408]	; (800292c <HAL_RCC_ClockConfig+0x1b0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d910      	bls.n	80027c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b63      	ldr	r3, [pc, #396]	; (800292c <HAL_RCC_ClockConfig+0x1b0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0207 	bic.w	r2, r3, #7
 80027a6:	4961      	ldr	r1, [pc, #388]	; (800292c <HAL_RCC_ClockConfig+0x1b0>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b5f      	ldr	r3, [pc, #380]	; (800292c <HAL_RCC_ClockConfig+0x1b0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0b0      	b.n	8002922 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d04c      	beq.n	8002866 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d107      	bne.n	80027e4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d4:	4b56      	ldr	r3, [pc, #344]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d121      	bne.n	8002824 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e09e      	b.n	8002922 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ec:	4b50      	ldr	r3, [pc, #320]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d115      	bne.n	8002824 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e092      	b.n	8002922 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d107      	bne.n	8002814 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002804:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e086      	b.n	8002922 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002814:	4b46      	ldr	r3, [pc, #280]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281c:	2b00      	cmp	r3, #0
 800281e:	d101      	bne.n	8002824 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e07e      	b.n	8002922 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002824:	4b42      	ldr	r3, [pc, #264]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 0203 	bic.w	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	493f      	ldr	r1, [pc, #252]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002836:	f7fe fab3 	bl	8000da0 <HAL_GetTick>
 800283a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283c:	e00a      	b.n	8002854 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800283e:	f7fe faaf 	bl	8000da0 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	; 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e066      	b.n	8002922 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 020c 	and.w	r2, r3, #12
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	429a      	cmp	r2, r3
 8002864:	d1eb      	bne.n	800283e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002872:	4b2f      	ldr	r3, [pc, #188]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	492c      	ldr	r1, [pc, #176]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002884:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_RCC_ClockConfig+0x1b0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d210      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <HAL_RCC_ClockConfig+0x1b0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 0207 	bic.w	r2, r3, #7
 800289a:	4924      	ldr	r1, [pc, #144]	; (800292c <HAL_RCC_ClockConfig+0x1b0>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b22      	ldr	r3, [pc, #136]	; (800292c <HAL_RCC_ClockConfig+0x1b0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e036      	b.n	8002922 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4918      	ldr	r1, [pc, #96]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028de:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4910      	ldr	r1, [pc, #64]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028f2:	f000 f825 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <HAL_RCC_ClockConfig+0x1b4>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	490c      	ldr	r1, [pc, #48]	; (8002934 <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	5ccb      	ldrb	r3, [r1, r3]
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	4a0a      	ldr	r2, [pc, #40]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe f9f2 	bl	8000d00 <HAL_InitTick>
 800291c:	4603      	mov	r3, r0
 800291e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002920:	7afb      	ldrb	r3, [r7, #11]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40022000 	.word	0x40022000
 8002930:	40021000 	.word	0x40021000
 8002934:	08003968 	.word	0x08003968
 8002938:	2000000c 	.word	0x2000000c
 800293c:	20000010 	.word	0x20000010

08002940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
 800294a:	2300      	movs	r3, #0
 800294c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294e:	4b3e      	ldr	r3, [pc, #248]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002958:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0303 	and.w	r3, r3, #3
 8002960:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0x34>
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d121      	bne.n	80029b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d11e      	bne.n	80029b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002974:	4b34      	ldr	r3, [pc, #208]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d107      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002980:	4b31      	ldr	r3, [pc, #196]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002982:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	61fb      	str	r3, [r7, #28]
 800298e:	e005      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002990:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800299c:	4a2b      	ldr	r2, [pc, #172]	; (8002a4c <HAL_RCC_GetSysClockFreq+0x10c>)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d10d      	bne.n	80029c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029b0:	e00a      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d102      	bne.n	80029be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ba:	61bb      	str	r3, [r7, #24]
 80029bc:	e004      	b.n	80029c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x114>)
 80029c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b0c      	cmp	r3, #12
 80029cc:	d134      	bne.n	8002a38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ce:	4b1e      	ldr	r3, [pc, #120]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d003      	beq.n	80029e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d003      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0xac>
 80029e4:	e005      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029e6:	4b1a      	ldr	r3, [pc, #104]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x110>)
 80029e8:	617b      	str	r3, [r7, #20]
      break;
 80029ea:	e005      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ee:	617b      	str	r3, [r7, #20]
      break;
 80029f0:	e002      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	617b      	str	r3, [r7, #20]
      break;
 80029f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029f8:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	3301      	adds	r3, #1
 8002a04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a06:	4b10      	ldr	r3, [pc, #64]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	0a1b      	lsrs	r3, r3, #8
 8002a0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	fb02 f203 	mul.w	r2, r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	0e5b      	lsrs	r3, r3, #25
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	3301      	adds	r3, #1
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a2e:	697a      	ldr	r2, [r7, #20]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a38:	69bb      	ldr	r3, [r7, #24]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08003980 	.word	0x08003980
 8002a50:	00f42400 	.word	0x00f42400
 8002a54:	007a1200 	.word	0x007a1200

08002a58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	2000000c 	.word	0x2000000c

08002a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a74:	f7ff fff0 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	0a1b      	lsrs	r3, r3, #8
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4904      	ldr	r1, [pc, #16]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	08003978 	.word	0x08003978

08002a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002aa0:	f7ff ffda 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0adb      	lsrs	r3, r3, #11
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4904      	ldr	r1, [pc, #16]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08003978 	.word	0x08003978

08002ac8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ae0:	f7ff f9c8 	bl	8001e74 <HAL_PWREx_GetVoltageRange>
 8002ae4:	6178      	str	r0, [r7, #20]
 8002ae6:	e014      	b.n	8002b12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ae8:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aec:	4a24      	ldr	r2, [pc, #144]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af2:	6593      	str	r3, [r2, #88]	; 0x58
 8002af4:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afc:	60fb      	str	r3, [r7, #12]
 8002afe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002b00:	f7ff f9b8 	bl	8001e74 <HAL_PWREx_GetVoltageRange>
 8002b04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002b06:	4b1e      	ldr	r3, [pc, #120]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b18:	d10b      	bne.n	8002b32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b80      	cmp	r3, #128	; 0x80
 8002b1e:	d919      	bls.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2ba0      	cmp	r3, #160	; 0xa0
 8002b24:	d902      	bls.n	8002b2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b26:	2302      	movs	r3, #2
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	e013      	b.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	e010      	b.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b80      	cmp	r3, #128	; 0x80
 8002b36:	d902      	bls.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b38:	2303      	movs	r3, #3
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	e00a      	b.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b80      	cmp	r3, #128	; 0x80
 8002b42:	d102      	bne.n	8002b4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b44:	2302      	movs	r3, #2
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e004      	b.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b70      	cmp	r3, #112	; 0x70
 8002b4e:	d101      	bne.n	8002b54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b50:	2301      	movs	r3, #1
 8002b52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 0207 	bic.w	r2, r3, #7
 8002b5c:	4909      	ldr	r1, [pc, #36]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d001      	beq.n	8002b76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40022000 	.word	0x40022000

08002b88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b90:	2300      	movs	r3, #0
 8002b92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b94:	2300      	movs	r3, #0
 8002b96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d031      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bac:	d01a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002bae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bb2:	d814      	bhi.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d009      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bbc:	d10f      	bne.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bbe:	4bac      	ldr	r3, [pc, #688]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4aab      	ldr	r2, [pc, #684]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bca:	e00c      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3304      	adds	r3, #4
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f9dc 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bdc:	e003      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	74fb      	strb	r3, [r7, #19]
      break;
 8002be2:	e000      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10b      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bec:	4ba0      	ldr	r3, [pc, #640]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfa:	499d      	ldr	r1, [pc, #628]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c02:	e001      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 8099 	beq.w	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c16:	2300      	movs	r3, #0
 8002c18:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c1a:	4b95      	ldr	r3, [pc, #596]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c30:	4b8f      	ldr	r3, [pc, #572]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c34:	4a8e      	ldr	r2, [pc, #568]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c3c:	4b8c      	ldr	r3, [pc, #560]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c4c:	4b89      	ldr	r3, [pc, #548]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a88      	ldr	r2, [pc, #544]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c58:	f7fe f8a2 	bl	8000da0 <HAL_GetTick>
 8002c5c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c5e:	e009      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c60:	f7fe f89e 	bl	8000da0 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d902      	bls.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	74fb      	strb	r3, [r7, #19]
        break;
 8002c72:	e005      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c74:	4b7f      	ldr	r3, [pc, #508]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ef      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c80:	7cfb      	ldrb	r3, [r7, #19]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d155      	bne.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c86:	4b7a      	ldr	r3, [pc, #488]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c90:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01e      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d019      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ca2:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cae:	4b70      	ldr	r3, [pc, #448]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	4a6e      	ldr	r2, [pc, #440]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cbe:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc4:	4a6a      	ldr	r2, [pc, #424]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cce:	4a68      	ldr	r2, [pc, #416]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d016      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fe f85e 	bl	8000da0 <HAL_GetTick>
 8002ce4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce6:	e00b      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce8:	f7fe f85a 	bl	8000da0 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d902      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	74fb      	strb	r3, [r7, #19]
            break;
 8002cfe:	e006      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d00:	4b5b      	ldr	r3, [pc, #364]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0ec      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002d0e:	7cfb      	ldrb	r3, [r7, #19]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d14:	4b56      	ldr	r3, [pc, #344]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d22:	4953      	ldr	r1, [pc, #332]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d2a:	e004      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	74bb      	strb	r3, [r7, #18]
 8002d30:	e001      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d36:	7c7b      	ldrb	r3, [r7, #17]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d105      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d40:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d54:	4b46      	ldr	r3, [pc, #280]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f023 0203 	bic.w	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4943      	ldr	r1, [pc, #268]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d76:	4b3e      	ldr	r3, [pc, #248]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	f023 020c 	bic.w	r2, r3, #12
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d84:	493a      	ldr	r1, [pc, #232]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d98:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	4932      	ldr	r1, [pc, #200]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dba:	4b2d      	ldr	r3, [pc, #180]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc8:	4929      	ldr	r1, [pc, #164]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	4921      	ldr	r1, [pc, #132]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	4918      	ldr	r1, [pc, #96]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e20:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2e:	4910      	ldr	r1, [pc, #64]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d02c      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e42:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	4907      	ldr	r1, [pc, #28]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e60:	d10a      	bne.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e62:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4a02      	ldr	r2, [pc, #8]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e6c:	60d3      	str	r3, [r2, #12]
 8002e6e:	e015      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3304      	adds	r3, #4
 8002e86:	2101      	movs	r1, #1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 f881 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002e98:	7cfb      	ldrb	r3, [r7, #19]
 8002e9a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d028      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ea8:	4b30      	ldr	r3, [pc, #192]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	492d      	ldr	r1, [pc, #180]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec6:	d106      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a27      	ldr	r2, [pc, #156]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]
 8002ed4:	e011      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ede:	d10c      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	3304      	adds	r3, #4
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f852 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002eec:	4603      	mov	r3, r0
 8002eee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8002ef6:	7cfb      	ldrb	r3, [r7, #19]
 8002ef8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01c      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f14:	4915      	ldr	r1, [pc, #84]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f82f 	bl	8002f90 <RCCEx_PLLSAI1_Config>
 8002f32:	4603      	mov	r3, r0
 8002f34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
 8002f3e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f52:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	4904      	ldr	r1, [pc, #16]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f62:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002f74:	4b05      	ldr	r3, [pc, #20]	; (8002f8c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a04      	ldr	r2, [pc, #16]	; (8002f8c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f7a:	f043 0304 	orr.w	r3, r3, #4
 8002f7e:	6013      	str	r3, [r2, #0]
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000

08002f90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f9e:	4b74      	ldr	r3, [pc, #464]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d018      	beq.n	8002fdc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002faa:	4b71      	ldr	r3, [pc, #452]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	f003 0203 	and.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d10d      	bne.n	8002fd6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
       ||
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d009      	beq.n	8002fd6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002fc2:	4b6b      	ldr	r3, [pc, #428]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
       ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d047      	beq.n	8003066 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	e044      	b.n	8003066 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d018      	beq.n	8003016 <RCCEx_PLLSAI1_Config+0x86>
 8002fe4:	2b03      	cmp	r3, #3
 8002fe6:	d825      	bhi.n	8003034 <RCCEx_PLLSAI1_Config+0xa4>
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d002      	beq.n	8002ff2 <RCCEx_PLLSAI1_Config+0x62>
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d009      	beq.n	8003004 <RCCEx_PLLSAI1_Config+0x74>
 8002ff0:	e020      	b.n	8003034 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ff2:	4b5f      	ldr	r3, [pc, #380]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d11d      	bne.n	800303a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003002:	e01a      	b.n	800303a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003004:	4b5a      	ldr	r3, [pc, #360]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d116      	bne.n	800303e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003014:	e013      	b.n	800303e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003016:	4b56      	ldr	r3, [pc, #344]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10f      	bne.n	8003042 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003022:	4b53      	ldr	r3, [pc, #332]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d109      	bne.n	8003042 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003032:	e006      	b.n	8003042 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      break;
 8003038:	e004      	b.n	8003044 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800303a:	bf00      	nop
 800303c:	e002      	b.n	8003044 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800303e:	bf00      	nop
 8003040:	e000      	b.n	8003044 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003042:	bf00      	nop
    }

    if(status == HAL_OK)
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10d      	bne.n	8003066 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800304a:	4b49      	ldr	r3, [pc, #292]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6819      	ldr	r1, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	3b01      	subs	r3, #1
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	430b      	orrs	r3, r1
 8003060:	4943      	ldr	r1, [pc, #268]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003062:	4313      	orrs	r3, r2
 8003064:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d17c      	bne.n	8003166 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800306c:	4b40      	ldr	r3, [pc, #256]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a3f      	ldr	r2, [pc, #252]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003072:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7fd fe92 	bl	8000da0 <HAL_GetTick>
 800307c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800307e:	e009      	b.n	8003094 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003080:	f7fd fe8e 	bl	8000da0 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d902      	bls.n	8003094 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	73fb      	strb	r3, [r7, #15]
        break;
 8003092:	e005      	b.n	80030a0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003094:	4b36      	ldr	r3, [pc, #216]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1ef      	bne.n	8003080 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d15f      	bne.n	8003166 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d110      	bne.n	80030ce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ac:	4b30      	ldr	r3, [pc, #192]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80030b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6892      	ldr	r2, [r2, #8]
 80030bc:	0211      	lsls	r1, r2, #8
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68d2      	ldr	r2, [r2, #12]
 80030c2:	06d2      	lsls	r2, r2, #27
 80030c4:	430a      	orrs	r2, r1
 80030c6:	492a      	ldr	r1, [pc, #168]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	610b      	str	r3, [r1, #16]
 80030cc:	e027      	b.n	800311e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d112      	bne.n	80030fa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d4:	4b26      	ldr	r3, [pc, #152]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6892      	ldr	r2, [r2, #8]
 80030e4:	0211      	lsls	r1, r2, #8
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6912      	ldr	r2, [r2, #16]
 80030ea:	0852      	lsrs	r2, r2, #1
 80030ec:	3a01      	subs	r2, #1
 80030ee:	0552      	lsls	r2, r2, #21
 80030f0:	430a      	orrs	r2, r1
 80030f2:	491f      	ldr	r1, [pc, #124]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	610b      	str	r3, [r1, #16]
 80030f8:	e011      	b.n	800311e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003102:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6892      	ldr	r2, [r2, #8]
 800310a:	0211      	lsls	r1, r2, #8
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6952      	ldr	r2, [r2, #20]
 8003110:	0852      	lsrs	r2, r2, #1
 8003112:	3a01      	subs	r2, #1
 8003114:	0652      	lsls	r2, r2, #25
 8003116:	430a      	orrs	r2, r1
 8003118:	4915      	ldr	r1, [pc, #84]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003128:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fd fe39 	bl	8000da0 <HAL_GetTick>
 800312e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003130:	e009      	b.n	8003146 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003132:	f7fd fe35 	bl	8000da0 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d902      	bls.n	8003146 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	73fb      	strb	r3, [r7, #15]
          break;
 8003144:	e005      	b.n	8003152 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ef      	beq.n	8003132 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d106      	bne.n	8003166 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 800315a:	691a      	ldr	r2, [r3, #16]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	4903      	ldr	r1, [pc, #12]	; (8003170 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003162:	4313      	orrs	r3, r2
 8003164:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000

08003174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e040      	b.n	8003208 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800318a:	2b00      	cmp	r3, #0
 800318c:	d106      	bne.n	800319c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f7fd fcb4 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2224      	movs	r2, #36	; 0x24
 80031a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f82c 	bl	8003210 <UART_SetConfig>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e022      	b.n	8003208 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d002      	beq.n	80031d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 fa2c 	bl	8003628 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fab3 	bl	800376c <UART_CheckIdleState>
 8003206:	4603      	mov	r3, r0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3708      	adds	r7, #8
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003210:	b5b0      	push	{r4, r5, r7, lr}
 8003212:	b088      	sub	sp, #32
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	4313      	orrs	r3, r2
 8003232:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4baf      	ldr	r3, [pc, #700]	; (80034f8 <UART_SetConfig+0x2e8>)
 800323c:	4013      	ands	r3, r2
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	69f9      	ldr	r1, [r7, #28]
 8003244:	430b      	orrs	r3, r1
 8003246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68da      	ldr	r2, [r3, #12]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4aa4      	ldr	r2, [pc, #656]	; (80034fc <UART_SetConfig+0x2ec>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	69fa      	ldr	r2, [r7, #28]
 8003274:	4313      	orrs	r3, r2
 8003276:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a9b      	ldr	r2, [pc, #620]	; (8003500 <UART_SetConfig+0x2f0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d121      	bne.n	80032da <UART_SetConfig+0xca>
 8003296:	4b9b      	ldr	r3, [pc, #620]	; (8003504 <UART_SetConfig+0x2f4>)
 8003298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d817      	bhi.n	80032d4 <UART_SetConfig+0xc4>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <UART_SetConfig+0x9c>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032c9 	.word	0x080032c9
 80032b4:	080032c3 	.word	0x080032c3
 80032b8:	080032cf 	.word	0x080032cf
 80032bc:	2301      	movs	r3, #1
 80032be:	76fb      	strb	r3, [r7, #27]
 80032c0:	e070      	b.n	80033a4 <UART_SetConfig+0x194>
 80032c2:	2302      	movs	r3, #2
 80032c4:	76fb      	strb	r3, [r7, #27]
 80032c6:	e06d      	b.n	80033a4 <UART_SetConfig+0x194>
 80032c8:	2304      	movs	r3, #4
 80032ca:	76fb      	strb	r3, [r7, #27]
 80032cc:	e06a      	b.n	80033a4 <UART_SetConfig+0x194>
 80032ce:	2308      	movs	r3, #8
 80032d0:	76fb      	strb	r3, [r7, #27]
 80032d2:	e067      	b.n	80033a4 <UART_SetConfig+0x194>
 80032d4:	2310      	movs	r3, #16
 80032d6:	76fb      	strb	r3, [r7, #27]
 80032d8:	e064      	b.n	80033a4 <UART_SetConfig+0x194>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a8a      	ldr	r2, [pc, #552]	; (8003508 <UART_SetConfig+0x2f8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d132      	bne.n	800334a <UART_SetConfig+0x13a>
 80032e4:	4b87      	ldr	r3, [pc, #540]	; (8003504 <UART_SetConfig+0x2f4>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d828      	bhi.n	8003344 <UART_SetConfig+0x134>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <UART_SetConfig+0xe8>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	0800332d 	.word	0x0800332d
 80032fc:	08003345 	.word	0x08003345
 8003300:	08003345 	.word	0x08003345
 8003304:	08003345 	.word	0x08003345
 8003308:	08003339 	.word	0x08003339
 800330c:	08003345 	.word	0x08003345
 8003310:	08003345 	.word	0x08003345
 8003314:	08003345 	.word	0x08003345
 8003318:	08003333 	.word	0x08003333
 800331c:	08003345 	.word	0x08003345
 8003320:	08003345 	.word	0x08003345
 8003324:	08003345 	.word	0x08003345
 8003328:	0800333f 	.word	0x0800333f
 800332c:	2300      	movs	r3, #0
 800332e:	76fb      	strb	r3, [r7, #27]
 8003330:	e038      	b.n	80033a4 <UART_SetConfig+0x194>
 8003332:	2302      	movs	r3, #2
 8003334:	76fb      	strb	r3, [r7, #27]
 8003336:	e035      	b.n	80033a4 <UART_SetConfig+0x194>
 8003338:	2304      	movs	r3, #4
 800333a:	76fb      	strb	r3, [r7, #27]
 800333c:	e032      	b.n	80033a4 <UART_SetConfig+0x194>
 800333e:	2308      	movs	r3, #8
 8003340:	76fb      	strb	r3, [r7, #27]
 8003342:	e02f      	b.n	80033a4 <UART_SetConfig+0x194>
 8003344:	2310      	movs	r3, #16
 8003346:	76fb      	strb	r3, [r7, #27]
 8003348:	e02c      	b.n	80033a4 <UART_SetConfig+0x194>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6b      	ldr	r2, [pc, #428]	; (80034fc <UART_SetConfig+0x2ec>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d125      	bne.n	80033a0 <UART_SetConfig+0x190>
 8003354:	4b6b      	ldr	r3, [pc, #428]	; (8003504 <UART_SetConfig+0x2f4>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800335e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003362:	d017      	beq.n	8003394 <UART_SetConfig+0x184>
 8003364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003368:	d817      	bhi.n	800339a <UART_SetConfig+0x18a>
 800336a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800336e:	d00b      	beq.n	8003388 <UART_SetConfig+0x178>
 8003370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003374:	d811      	bhi.n	800339a <UART_SetConfig+0x18a>
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <UART_SetConfig+0x172>
 800337a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800337e:	d006      	beq.n	800338e <UART_SetConfig+0x17e>
 8003380:	e00b      	b.n	800339a <UART_SetConfig+0x18a>
 8003382:	2300      	movs	r3, #0
 8003384:	76fb      	strb	r3, [r7, #27]
 8003386:	e00d      	b.n	80033a4 <UART_SetConfig+0x194>
 8003388:	2302      	movs	r3, #2
 800338a:	76fb      	strb	r3, [r7, #27]
 800338c:	e00a      	b.n	80033a4 <UART_SetConfig+0x194>
 800338e:	2304      	movs	r3, #4
 8003390:	76fb      	strb	r3, [r7, #27]
 8003392:	e007      	b.n	80033a4 <UART_SetConfig+0x194>
 8003394:	2308      	movs	r3, #8
 8003396:	76fb      	strb	r3, [r7, #27]
 8003398:	e004      	b.n	80033a4 <UART_SetConfig+0x194>
 800339a:	2310      	movs	r3, #16
 800339c:	76fb      	strb	r3, [r7, #27]
 800339e:	e001      	b.n	80033a4 <UART_SetConfig+0x194>
 80033a0:	2310      	movs	r3, #16
 80033a2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a54      	ldr	r2, [pc, #336]	; (80034fc <UART_SetConfig+0x2ec>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d173      	bne.n	8003496 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033ae:	7efb      	ldrb	r3, [r7, #27]
 80033b0:	2b08      	cmp	r3, #8
 80033b2:	d824      	bhi.n	80033fe <UART_SetConfig+0x1ee>
 80033b4:	a201      	add	r2, pc, #4	; (adr r2, 80033bc <UART_SetConfig+0x1ac>)
 80033b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ba:	bf00      	nop
 80033bc:	080033e1 	.word	0x080033e1
 80033c0:	080033ff 	.word	0x080033ff
 80033c4:	080033e9 	.word	0x080033e9
 80033c8:	080033ff 	.word	0x080033ff
 80033cc:	080033ef 	.word	0x080033ef
 80033d0:	080033ff 	.word	0x080033ff
 80033d4:	080033ff 	.word	0x080033ff
 80033d8:	080033ff 	.word	0x080033ff
 80033dc:	080033f7 	.word	0x080033f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033e0:	f7ff fb46 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 80033e4:	6178      	str	r0, [r7, #20]
        break;
 80033e6:	e00f      	b.n	8003408 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e8:	4b48      	ldr	r3, [pc, #288]	; (800350c <UART_SetConfig+0x2fc>)
 80033ea:	617b      	str	r3, [r7, #20]
        break;
 80033ec:	e00c      	b.n	8003408 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ee:	f7ff faa7 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80033f2:	6178      	str	r0, [r7, #20]
        break;
 80033f4:	e008      	b.n	8003408 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033fa:	617b      	str	r3, [r7, #20]
        break;
 80033fc:	e004      	b.n	8003408 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	76bb      	strb	r3, [r7, #26]
        break;
 8003406:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 80fe 	beq.w	800360c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	429a      	cmp	r2, r3
 800341e:	d305      	bcc.n	800342c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	429a      	cmp	r2, r3
 800342a:	d902      	bls.n	8003432 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	76bb      	strb	r3, [r7, #26]
 8003430:	e0ec      	b.n	800360c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	4618      	mov	r0, r3
 8003436:	f04f 0100 	mov.w	r1, #0
 800343a:	f04f 0200 	mov.w	r2, #0
 800343e:	f04f 0300 	mov.w	r3, #0
 8003442:	020b      	lsls	r3, r1, #8
 8003444:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003448:	0202      	lsls	r2, r0, #8
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	6849      	ldr	r1, [r1, #4]
 800344e:	0849      	lsrs	r1, r1, #1
 8003450:	4608      	mov	r0, r1
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	1814      	adds	r4, r2, r0
 8003458:	eb43 0501 	adc.w	r5, r3, r1
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	461a      	mov	r2, r3
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	4620      	mov	r0, r4
 8003468:	4629      	mov	r1, r5
 800346a:	f7fc feaf 	bl	80001cc <__aeabi_uldivmod>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4613      	mov	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800347c:	d308      	bcc.n	8003490 <UART_SetConfig+0x280>
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003484:	d204      	bcs.n	8003490 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	e0bd      	b.n	800360c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	76bb      	strb	r3, [r7, #26]
 8003494:	e0ba      	b.n	800360c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349e:	d168      	bne.n	8003572 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80034a0:	7efb      	ldrb	r3, [r7, #27]
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d834      	bhi.n	8003510 <UART_SetConfig+0x300>
 80034a6:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <UART_SetConfig+0x29c>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	080034d1 	.word	0x080034d1
 80034b0:	080034d9 	.word	0x080034d9
 80034b4:	080034e1 	.word	0x080034e1
 80034b8:	08003511 	.word	0x08003511
 80034bc:	080034e7 	.word	0x080034e7
 80034c0:	08003511 	.word	0x08003511
 80034c4:	08003511 	.word	0x08003511
 80034c8:	08003511 	.word	0x08003511
 80034cc:	080034ef 	.word	0x080034ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d0:	f7ff face 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 80034d4:	6178      	str	r0, [r7, #20]
        break;
 80034d6:	e020      	b.n	800351a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034d8:	f7ff fae0 	bl	8002a9c <HAL_RCC_GetPCLK2Freq>
 80034dc:	6178      	str	r0, [r7, #20]
        break;
 80034de:	e01c      	b.n	800351a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e0:	4b0a      	ldr	r3, [pc, #40]	; (800350c <UART_SetConfig+0x2fc>)
 80034e2:	617b      	str	r3, [r7, #20]
        break;
 80034e4:	e019      	b.n	800351a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034e6:	f7ff fa2b 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80034ea:	6178      	str	r0, [r7, #20]
        break;
 80034ec:	e015      	b.n	800351a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f2:	617b      	str	r3, [r7, #20]
        break;
 80034f4:	e011      	b.n	800351a <UART_SetConfig+0x30a>
 80034f6:	bf00      	nop
 80034f8:	efff69f3 	.word	0xefff69f3
 80034fc:	40008000 	.word	0x40008000
 8003500:	40013800 	.word	0x40013800
 8003504:	40021000 	.word	0x40021000
 8003508:	40004400 	.word	0x40004400
 800350c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	76bb      	strb	r3, [r7, #26]
        break;
 8003518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d075      	beq.n	800360c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	005a      	lsls	r2, r3, #1
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	441a      	add	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	b29b      	uxth	r3, r3
 8003536:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b0f      	cmp	r3, #15
 800353c:	d916      	bls.n	800356c <UART_SetConfig+0x35c>
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003544:	d212      	bcs.n	800356c <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	b29b      	uxth	r3, r3
 800354a:	f023 030f 	bic.w	r3, r3, #15
 800354e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	b29b      	uxth	r3, r3
 8003556:	f003 0307 	and.w	r3, r3, #7
 800355a:	b29a      	uxth	r2, r3
 800355c:	89fb      	ldrh	r3, [r7, #14]
 800355e:	4313      	orrs	r3, r2
 8003560:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	89fa      	ldrh	r2, [r7, #14]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	e04f      	b.n	800360c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	76bb      	strb	r3, [r7, #26]
 8003570:	e04c      	b.n	800360c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003572:	7efb      	ldrb	r3, [r7, #27]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d828      	bhi.n	80035ca <UART_SetConfig+0x3ba>
 8003578:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <UART_SetConfig+0x370>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	080035a5 	.word	0x080035a5
 8003584:	080035ad 	.word	0x080035ad
 8003588:	080035b5 	.word	0x080035b5
 800358c:	080035cb 	.word	0x080035cb
 8003590:	080035bb 	.word	0x080035bb
 8003594:	080035cb 	.word	0x080035cb
 8003598:	080035cb 	.word	0x080035cb
 800359c:	080035cb 	.word	0x080035cb
 80035a0:	080035c3 	.word	0x080035c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a4:	f7ff fa64 	bl	8002a70 <HAL_RCC_GetPCLK1Freq>
 80035a8:	6178      	str	r0, [r7, #20]
        break;
 80035aa:	e013      	b.n	80035d4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035ac:	f7ff fa76 	bl	8002a9c <HAL_RCC_GetPCLK2Freq>
 80035b0:	6178      	str	r0, [r7, #20]
        break;
 80035b2:	e00f      	b.n	80035d4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <UART_SetConfig+0x414>)
 80035b6:	617b      	str	r3, [r7, #20]
        break;
 80035b8:	e00c      	b.n	80035d4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ba:	f7ff f9c1 	bl	8002940 <HAL_RCC_GetSysClockFreq>
 80035be:	6178      	str	r0, [r7, #20]
        break;
 80035c0:	e008      	b.n	80035d4 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c6:	617b      	str	r3, [r7, #20]
        break;
 80035c8:	e004      	b.n	80035d4 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	76bb      	strb	r3, [r7, #26]
        break;
 80035d2:	bf00      	nop
    }

    if (pclk != 0U)
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d018      	beq.n	800360c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	085a      	lsrs	r2, r3, #1
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	441a      	add	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b0f      	cmp	r3, #15
 80035f4:	d908      	bls.n	8003608 <UART_SetConfig+0x3f8>
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035fc:	d204      	bcs.n	8003608 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	e001      	b.n	800360c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003618:	7ebb      	ldrb	r3, [r7, #26]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bdb0      	pop	{r4, r5, r7, pc}
 8003622:	bf00      	nop
 8003624:	00f42400 	.word	0x00f42400

08003628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003704:	2b00      	cmp	r3, #0
 8003706:	d01a      	beq.n	800373e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003726:	d10a      	bne.n	800373e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	430a      	orrs	r2, r1
 800375e:	605a      	str	r2, [r3, #4]
  }
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af02      	add	r7, sp, #8
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800377c:	f7fd fb10 	bl	8000da0 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b08      	cmp	r3, #8
 800378e:	d10e      	bne.n	80037ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003790:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f82d 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e023      	b.n	80037f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d10e      	bne.n	80037da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f817 	bl	80037fe <UART_WaitOnFlagUntilTimeout>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e00d      	b.n	80037f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800380e:	e05e      	b.n	80038ce <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003816:	d05a      	beq.n	80038ce <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003818:	f7fd fac2 	bl	8000da0 <HAL_GetTick>
 800381c:	4602      	mov	r2, r0
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	1ad3      	subs	r3, r2, r3
 8003822:	69ba      	ldr	r2, [r7, #24]
 8003824:	429a      	cmp	r2, r3
 8003826:	d302      	bcc.n	800382e <UART_WaitOnFlagUntilTimeout+0x30>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d11b      	bne.n	8003866 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800383c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 0201 	bic.w	r2, r2, #1
 800384c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e043      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d02c      	beq.n	80038ce <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003882:	d124      	bne.n	80038ce <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800388c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800389c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0201 	bic.w	r2, r2, #1
 80038ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2220      	movs	r2, #32
 80038b2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2220      	movs	r2, #32
 80038b8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e00f      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69da      	ldr	r2, [r3, #28]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	bf0c      	ite	eq
 80038de:	2301      	moveq	r3, #1
 80038e0:	2300      	movne	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	79fb      	ldrb	r3, [r7, #7]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d091      	beq.n	8003810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	4d0d      	ldr	r5, [pc, #52]	; (8003930 <__libc_init_array+0x38>)
 80038fc:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 80038fe:	1b64      	subs	r4, r4, r5
 8003900:	10a4      	asrs	r4, r4, #2
 8003902:	2600      	movs	r6, #0
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	4d0b      	ldr	r5, [pc, #44]	; (8003938 <__libc_init_array+0x40>)
 800390a:	4c0c      	ldr	r4, [pc, #48]	; (800393c <__libc_init_array+0x44>)
 800390c:	f000 f820 	bl	8003950 <_init>
 8003910:	1b64      	subs	r4, r4, r5
 8003912:	10a4      	asrs	r4, r4, #2
 8003914:	2600      	movs	r6, #0
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	f855 3b04 	ldr.w	r3, [r5], #4
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	080039b8 	.word	0x080039b8
 8003934:	080039b8 	.word	0x080039b8
 8003938:	080039b8 	.word	0x080039b8
 800393c:	080039bc 	.word	0x080039bc

08003940 <memset>:
 8003940:	4402      	add	r2, r0
 8003942:	4603      	mov	r3, r0
 8003944:	4293      	cmp	r3, r2
 8003946:	d100      	bne.n	800394a <memset+0xa>
 8003948:	4770      	bx	lr
 800394a:	f803 1b01 	strb.w	r1, [r3], #1
 800394e:	e7f9      	b.n	8003944 <memset+0x4>

08003950 <_init>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr

0800395c <_fini>:
 800395c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800395e:	bf00      	nop
 8003960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003962:	bc08      	pop	{r3}
 8003964:	469e      	mov	lr, r3
 8003966:	4770      	bx	lr
