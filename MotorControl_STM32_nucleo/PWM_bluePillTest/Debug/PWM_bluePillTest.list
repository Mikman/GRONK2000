
PWM_bluePillTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cf0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002dfc  08002dfc  00012dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e34  08002e34  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e34  08002e34  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e34  08002e34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08002e48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002e48  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099ef  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a4  00000000  00000000  00029a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fc2  00000000  00000000  0002c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b13e  00000000  00000000  00043692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088a2f  00000000  00000000  0004e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d71ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ad0  00000000  00000000  000d7254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002de4 	.word	0x08002de4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002de4 	.word	0x08002de4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa81 	bl	8000658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f829 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f935 	bl	80003c8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800015e:	f000 f8bd 	bl	80002dc <MX_TIM2_Init>
  MX_ADC1_Init();
 8000162:	f000 f87d 	bl	8000260 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000166:	2100      	movs	r1, #0
 8000168:	480e      	ldr	r0, [pc, #56]	; (80001a4 <main+0x58>)
 800016a:	f001 ffa1 	bl	80020b0 <HAL_TIM_PWM_Start>
  TIM2->CCR1 = 32500;
 800016e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000172:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 8000176:	635a      	str	r2, [r3, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc1);
 8000178:	480b      	ldr	r0, [pc, #44]	; (80001a8 <main+0x5c>)
 800017a:	f000 fba7 	bl	80008cc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800017e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000182:	4809      	ldr	r0, [pc, #36]	; (80001a8 <main+0x5c>)
 8000184:	f000 fc50 	bl	8000a28 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 8000188:	4807      	ldr	r0, [pc, #28]	; (80001a8 <main+0x5c>)
 800018a:	f000 fd47 	bl	8000c1c <HAL_ADC_GetValue>
 800018e:	4603      	mov	r3, r0
 8000190:	80fb      	strh	r3, [r7, #6]
	  TIM2->CCR1 = raw*15;
 8000192:	88fa      	ldrh	r2, [r7, #6]
 8000194:	4613      	mov	r3, r2
 8000196:	011b      	lsls	r3, r3, #4
 8000198:	1a9a      	subs	r2, r3, r2
 800019a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800019e:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_ADC_Start(&hadc1);
 80001a0:	e7ea      	b.n	8000178 <main+0x2c>
 80001a2:	bf00      	nop
 80001a4:	20000058 	.word	0x20000058
 80001a8:	20000028 	.word	0x20000028

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b094      	sub	sp, #80	; 0x50
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f002 fe0a 	bl	8002dd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	f107 0314 	add.w	r3, r7, #20
 80001c4:	2200      	movs	r2, #0
 80001c6:	601a      	str	r2, [r3, #0]
 80001c8:	605a      	str	r2, [r3, #4]
 80001ca:	609a      	str	r2, [r3, #8]
 80001cc:	60da      	str	r2, [r3, #12]
 80001ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001dc:	2301      	movs	r3, #1
 80001de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ea:	2301      	movs	r3, #1
 80001ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ee:	2302      	movs	r3, #2
 80001f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80001f8:	2300      	movs	r3, #0
 80001fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000200:	4618      	mov	r0, r3
 8000202:	f001 f92d 	bl	8001460 <HAL_RCC_OscConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800020c:	f000 f8fe 	bl	800040c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000210:	230f      	movs	r3, #15
 8000212:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000214:	2302      	movs	r3, #2
 8000216:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000220:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000226:	f107 0314 	add.w	r3, r7, #20
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f001 fb97 	bl	8001960 <HAL_RCC_ClockConfig>
 8000232:	4603      	mov	r3, r0
 8000234:	2b00      	cmp	r3, #0
 8000236:	d001      	beq.n	800023c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000238:	f000 f8e8 	bl	800040c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800023c:	2302      	movs	r3, #2
 800023e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000240:	2300      	movs	r3, #0
 8000242:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	4618      	mov	r0, r3
 8000248:	f001 fd10 	bl	8001c6c <HAL_RCCEx_PeriphCLKConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000252:	f000 f8db 	bl	800040c <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3750      	adds	r7, #80	; 0x50
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000272:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <MX_ADC1_Init+0x78>)
 8000274:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <MX_ADC1_Init+0x74>)
 800027e:	2200      	movs	r2, #0
 8000280:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000282:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000284:	2200      	movs	r2, #0
 8000286:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <MX_ADC1_Init+0x74>)
 800028a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800028e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000292:	2200      	movs	r2, #0
 8000294:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000296:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000298:	2201      	movs	r2, #1
 800029a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <MX_ADC1_Init+0x74>)
 800029e:	f000 fa3d 	bl	800071c <HAL_ADC_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002a8:	f000 f8b0 	bl	800040c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80002ac:	2307      	movs	r3, #7
 80002ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b0:	2301      	movs	r3, #1
 80002b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4619      	mov	r1, r3
 80002bc:	4805      	ldr	r0, [pc, #20]	; (80002d4 <MX_ADC1_Init+0x74>)
 80002be:	f000 fcb9 	bl	8000c34 <HAL_ADC_ConfigChannel>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002c8:	f000 f8a0 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000028 	.word	0x20000028
 80002d8:	40012400 	.word	0x40012400

080002dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b08e      	sub	sp, #56	; 0x38
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f0:	f107 0320 	add.w	r3, r7, #32
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
 8000300:	605a      	str	r2, [r3, #4]
 8000302:	609a      	str	r2, [r3, #8]
 8000304:	60da      	str	r2, [r3, #12]
 8000306:	611a      	str	r2, [r3, #16]
 8000308:	615a      	str	r2, [r3, #20]
 800030a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800030c:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800030e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000312:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000314:	4b2b      	ldr	r3, [pc, #172]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000316:	2200      	movs	r2, #0
 8000318:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031a:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800031c:	2200      	movs	r2, #0
 800031e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000320:	4b28      	ldr	r3, [pc, #160]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000326:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000328:	4b26      	ldr	r3, [pc, #152]	; (80003c4 <MX_TIM2_Init+0xe8>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800032e:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000330:	2280      	movs	r2, #128	; 0x80
 8000332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000334:	4823      	ldr	r0, [pc, #140]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000336:	f001 fe13 	bl	8001f60 <HAL_TIM_Base_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000340:	f000 f864 	bl	800040c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000348:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800034a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800034e:	4619      	mov	r1, r3
 8000350:	481c      	ldr	r0, [pc, #112]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000352:	f002 f915 	bl	8002580 <HAL_TIM_ConfigClockSource>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800035c:	f000 f856 	bl	800040c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000360:	4818      	ldr	r0, [pc, #96]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000362:	f001 fe4c 	bl	8001ffe <HAL_TIM_PWM_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800036c:	f000 f84e 	bl	800040c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000370:	2300      	movs	r3, #0
 8000372:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000378:	f107 0320 	add.w	r3, r7, #32
 800037c:	4619      	mov	r1, r3
 800037e:	4811      	ldr	r0, [pc, #68]	; (80003c4 <MX_TIM2_Init+0xe8>)
 8000380:	f002 fc94 	bl	8002cac <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800038a:	f000 f83f 	bl	800040c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800038e:	2360      	movs	r3, #96	; 0x60
 8000390:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	4619      	mov	r1, r3
 80003a4:	4807      	ldr	r0, [pc, #28]	; (80003c4 <MX_TIM2_Init+0xe8>)
 80003a6:	f002 f82d 	bl	8002404 <HAL_TIM_PWM_ConfigChannel>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80003b0:	f000 f82c 	bl	800040c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80003b4:	4803      	ldr	r0, [pc, #12]	; (80003c4 <MX_TIM2_Init+0xe8>)
 80003b6:	f000 f8c1 	bl	800053c <HAL_TIM_MspPostInit>

}
 80003ba:	bf00      	nop
 80003bc:	3738      	adds	r7, #56	; 0x38
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000058 	.word	0x20000058

080003c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ce:	4b0e      	ldr	r3, [pc, #56]	; (8000408 <MX_GPIO_Init+0x40>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a0d      	ldr	r2, [pc, #52]	; (8000408 <MX_GPIO_Init+0x40>)
 80003d4:	f043 0320 	orr.w	r3, r3, #32
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <MX_GPIO_Init+0x40>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0320 	and.w	r3, r3, #32
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e6:	4b08      	ldr	r3, [pc, #32]	; (8000408 <MX_GPIO_Init+0x40>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a07      	ldr	r2, [pc, #28]	; (8000408 <MX_GPIO_Init+0x40>)
 80003ec:	f043 0304 	orr.w	r3, r3, #4
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b05      	ldr	r3, [pc, #20]	; (8000408 <MX_GPIO_Init+0x40>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0304 	and.w	r3, r3, #4
 80003fa:	603b      	str	r3, [r7, #0]
 80003fc:	683b      	ldr	r3, [r7, #0]

}
 80003fe:	bf00      	nop
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000

0800040c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000410:	b672      	cpsid	i
}
 8000412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000414:	e7fe      	b.n	8000414 <Error_Handler+0x8>
	...

08000418 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <HAL_MspInit+0x5c>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	4a14      	ldr	r2, [pc, #80]	; (8000474 <HAL_MspInit+0x5c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6193      	str	r3, [r2, #24]
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	f003 0301 	and.w	r3, r3, #1
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <HAL_MspInit+0x5c>)
 8000438:	69db      	ldr	r3, [r3, #28]
 800043a:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <HAL_MspInit+0x5c>)
 800043c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000440:	61d3      	str	r3, [r2, #28]
 8000442:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800044e:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <HAL_MspInit+0x60>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	60fb      	str	r3, [r7, #12]
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <HAL_MspInit+0x60>)
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046a:	bf00      	nop
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	40021000 	.word	0x40021000
 8000478:	40010000 	.word	0x40010000

0800047c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b088      	sub	sp, #32
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
 800048e:	609a      	str	r2, [r3, #8]
 8000490:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a14      	ldr	r2, [pc, #80]	; (80004e8 <HAL_ADC_MspInit+0x6c>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d121      	bne.n	80004e0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <HAL_ADC_MspInit+0x70>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a12      	ldr	r2, [pc, #72]	; (80004ec <HAL_ADC_MspInit+0x70>)
 80004a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b10      	ldr	r3, [pc, #64]	; (80004ec <HAL_ADC_MspInit+0x70>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <HAL_ADC_MspInit+0x70>)
 80004b6:	699b      	ldr	r3, [r3, #24]
 80004b8:	4a0c      	ldr	r2, [pc, #48]	; (80004ec <HAL_ADC_MspInit+0x70>)
 80004ba:	f043 0304 	orr.w	r3, r3, #4
 80004be:	6193      	str	r3, [r2, #24]
 80004c0:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <HAL_ADC_MspInit+0x70>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	f003 0304 	and.w	r3, r3, #4
 80004c8:	60bb      	str	r3, [r7, #8]
 80004ca:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004d0:	2303      	movs	r3, #3
 80004d2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d4:	f107 0310 	add.w	r3, r7, #16
 80004d8:	4619      	mov	r1, r3
 80004da:	4805      	ldr	r0, [pc, #20]	; (80004f0 <HAL_ADC_MspInit+0x74>)
 80004dc:	f000 fe3c 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80004e0:	bf00      	nop
 80004e2:	3720      	adds	r7, #32
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40012400 	.word	0x40012400
 80004ec:	40021000 	.word	0x40021000
 80004f0:	40010800 	.word	0x40010800

080004f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000504:	d113      	bne.n	800052e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_TIM_Base_MspInit+0x44>)
 8000508:	69db      	ldr	r3, [r3, #28]
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <HAL_TIM_Base_MspInit+0x44>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	61d3      	str	r3, [r2, #28]
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <HAL_TIM_Base_MspInit+0x44>)
 8000514:	69db      	ldr	r3, [r3, #28]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	201c      	movs	r0, #28
 8000524:	f000 fde1 	bl	80010ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000528:	201c      	movs	r0, #28
 800052a:	f000 fdfa 	bl	8001122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40021000 	.word	0x40021000

0800053c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	f107 0310 	add.w	r3, r7, #16
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800055a:	d117      	bne.n	800058c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <HAL_TIM_MspPostInit+0x58>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <HAL_TIM_MspPostInit+0x58>)
 8000562:	f043 0304 	orr.w	r3, r3, #4
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_TIM_MspPostInit+0x58>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0304 	and.w	r3, r3, #4
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000574:	2301      	movs	r3, #1
 8000576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000578:	2302      	movs	r3, #2
 800057a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	2302      	movs	r3, #2
 800057e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4619      	mov	r1, r3
 8000586:	4804      	ldr	r0, [pc, #16]	; (8000598 <HAL_TIM_MspPostInit+0x5c>)
 8000588:	f000 fde6 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	40010800 	.word	0x40010800

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <NMI_Handler+0x4>

080005a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <HardFault_Handler+0x4>

080005a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <MemManage_Handler+0x4>

080005ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <BusFault_Handler+0x4>

080005b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <UsageFault_Handler+0x4>

080005ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr

080005c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c6:	b480      	push	{r7}
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr

080005d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005d2:	b480      	push	{r7}
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d6:	bf00      	nop
 80005d8:	46bd      	mov	sp, r7
 80005da:	bc80      	pop	{r7}
 80005dc:	4770      	bx	lr

080005de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005de:	b580      	push	{r7, lr}
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e2:	f000 f87f 	bl	80006e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <TIM2_IRQHandler+0x10>)
 80005f2:	f001 fdff 	bl	80021f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000058 	.word	0x20000058

08000600 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800060c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800060e:	e003      	b.n	8000618 <LoopCopyDataInit>

08000610 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000612:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000614:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000616:	3104      	adds	r1, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800061c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800061e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000620:	d3f6      	bcc.n	8000610 <CopyDataInit>
  ldr r2, =_sbss
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000624:	e002      	b.n	800062c <LoopFillZerobss>

08000626 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000628:	f842 3b04 	str.w	r3, [r2], #4

0800062c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800062e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000630:	d3f9      	bcc.n	8000626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000632:	f7ff ffe5 	bl	8000600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000636:	f002 fba9 	bl	8002d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fd87 	bl	800014c <main>
  bx lr
 800063e:	4770      	bx	lr
  ldr r3, =_sidata
 8000640:	08002e3c 	.word	0x08002e3c
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000648:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800064c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000650:	200000a4 	.word	0x200000a4

08000654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_2_IRQHandler>
	...

08000658 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <HAL_Init+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a07      	ldr	r2, [pc, #28]	; (8000680 <HAL_Init+0x28>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000668:	2003      	movs	r0, #3
 800066a:	f000 fd33 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800066e:	2000      	movs	r0, #0
 8000670:	f000 f808 	bl	8000684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000674:	f7ff fed0 	bl	8000418 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000678:	2300      	movs	r3, #0
}
 800067a:	4618      	mov	r0, r3
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40022000 	.word	0x40022000

08000684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_InitTick+0x54>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <HAL_InitTick+0x58>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069a:	fbb3 f3f1 	udiv	r3, r3, r1
 800069e:	fbb2 f3f3 	udiv	r3, r2, r3
 80006a2:	4618      	mov	r0, r3
 80006a4:	f000 fd4b 	bl	800113e <HAL_SYSTICK_Config>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	e00e      	b.n	80006d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2b0f      	cmp	r3, #15
 80006b6:	d80a      	bhi.n	80006ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006b8:	2200      	movs	r2, #0
 80006ba:	6879      	ldr	r1, [r7, #4]
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80006c0:	f000 fd13 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006c4:	4a06      	ldr	r2, [pc, #24]	; (80006e0 <HAL_InitTick+0x5c>)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006ca:	2300      	movs	r3, #0
 80006cc:	e000      	b.n	80006d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000008 	.word	0x20000008
 80006e0:	20000004 	.word	0x20000004

080006e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <HAL_IncTick+0x1c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b05      	ldr	r3, [pc, #20]	; (8000704 <HAL_IncTick+0x20>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4413      	add	r3, r2
 80006f4:	4a03      	ldr	r2, [pc, #12]	; (8000704 <HAL_IncTick+0x20>)
 80006f6:	6013      	str	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr
 8000700:	20000008 	.word	0x20000008
 8000704:	200000a0 	.word	0x200000a0

08000708 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  return uwTick;
 800070c:	4b02      	ldr	r3, [pc, #8]	; (8000718 <HAL_GetTick+0x10>)
 800070e:	681b      	ldr	r3, [r3, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	200000a0 	.word	0x200000a0

0800071c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000724:	2300      	movs	r3, #0
 8000726:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d101      	bne.n	800073e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	e0be      	b.n	80008bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	689b      	ldr	r3, [r3, #8]
 8000742:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000748:	2b00      	cmp	r3, #0
 800074a:	d109      	bne.n	8000760 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2200      	movs	r2, #0
 8000750:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff fe8e 	bl	800047c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 fbb1 	bl	8000ec8 <ADC_ConversionStop_Disable>
 8000766:	4603      	mov	r3, r0
 8000768:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	2b00      	cmp	r3, #0
 8000774:	f040 8099 	bne.w	80008aa <HAL_ADC_Init+0x18e>
 8000778:	7dfb      	ldrb	r3, [r7, #23]
 800077a:	2b00      	cmp	r3, #0
 800077c:	f040 8095 	bne.w	80008aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000784:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000788:	f023 0302 	bic.w	r3, r3, #2
 800078c:	f043 0202 	orr.w	r2, r3, #2
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800079c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	7b1b      	ldrb	r3, [r3, #12]
 80007a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80007a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	4313      	orrs	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007b4:	d003      	beq.n	80007be <HAL_ADC_Init+0xa2>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d102      	bne.n	80007c4 <HAL_ADC_Init+0xa8>
 80007be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007c2:	e000      	b.n	80007c6 <HAL_ADC_Init+0xaa>
 80007c4:	2300      	movs	r3, #0
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	4313      	orrs	r3, r2
 80007ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7d1b      	ldrb	r3, [r3, #20]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d119      	bne.n	8000808 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	7b1b      	ldrb	r3, [r3, #12]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d109      	bne.n	80007f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	035a      	lsls	r2, r3, #13
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007ec:	613b      	str	r3, [r7, #16]
 80007ee:	e00b      	b.n	8000808 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007f4:	f043 0220 	orr.w	r2, r3, #32
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000800:	f043 0201 	orr.w	r2, r3, #1
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	430a      	orrs	r2, r1
 800081a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	689a      	ldr	r2, [r3, #8]
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <HAL_ADC_Init+0x1a8>)
 8000824:	4013      	ands	r3, r2
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	6812      	ldr	r2, [r2, #0]
 800082a:	68b9      	ldr	r1, [r7, #8]
 800082c:	430b      	orrs	r3, r1
 800082e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000838:	d003      	beq.n	8000842 <HAL_ADC_Init+0x126>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d104      	bne.n	800084c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	691b      	ldr	r3, [r3, #16]
 8000846:	3b01      	subs	r3, #1
 8000848:	051b      	lsls	r3, r3, #20
 800084a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000852:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	430a      	orrs	r2, r1
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	689a      	ldr	r2, [r3, #8]
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_ADC_Init+0x1ac>)
 8000868:	4013      	ands	r3, r2
 800086a:	68ba      	ldr	r2, [r7, #8]
 800086c:	429a      	cmp	r2, r3
 800086e:	d10b      	bne.n	8000888 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2200      	movs	r2, #0
 8000874:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800087a:	f023 0303 	bic.w	r3, r3, #3
 800087e:	f043 0201 	orr.w	r2, r3, #1
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000886:	e018      	b.n	80008ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800088c:	f023 0312 	bic.w	r3, r3, #18
 8000890:	f043 0210 	orr.w	r2, r3, #16
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089c:	f043 0201 	orr.w	r2, r3, #1
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008a8:	e007      	b.n	80008ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ae:	f043 0210 	orr.w	r2, r3, #16
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
 80008b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3718      	adds	r7, #24
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	ffe1f7fd 	.word	0xffe1f7fd
 80008c8:	ff1f0efe 	.word	0xff1f0efe

080008cc <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d101      	bne.n	80008e6 <HAL_ADC_Start+0x1a>
 80008e2:	2302      	movs	r3, #2
 80008e4:	e098      	b.n	8000a18 <HAL_ADC_Start+0x14c>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f000 fa98 	bl	8000e24 <ADC_Enable>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	f040 8087 	bne.w	8000a0e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000908:	f023 0301 	bic.w	r3, r3, #1
 800090c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a41      	ldr	r2, [pc, #260]	; (8000a20 <HAL_ADC_Start+0x154>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d105      	bne.n	800092a <HAL_ADC_Start+0x5e>
 800091e:	4b41      	ldr	r3, [pc, #260]	; (8000a24 <HAL_ADC_Start+0x158>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000926:	2b00      	cmp	r3, #0
 8000928:	d115      	bne.n	8000956 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000940:	2b00      	cmp	r3, #0
 8000942:	d026      	beq.n	8000992 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000948:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800094c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000954:	e01d      	b.n	8000992 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a2f      	ldr	r2, [pc, #188]	; (8000a24 <HAL_ADC_Start+0x158>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d004      	beq.n	8000976 <HAL_ADC_Start+0xaa>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <HAL_ADC_Start+0x154>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d10d      	bne.n	8000992 <HAL_ADC_Start+0xc6>
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <HAL_ADC_Start+0x158>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800097e:	2b00      	cmp	r3, #0
 8000980:	d007      	beq.n	8000992 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000986:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800098a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000996:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d006      	beq.n	80009ac <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009a2:	f023 0206 	bic.w	r2, r3, #6
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009aa:	e002      	b.n	80009b2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f06f 0202 	mvn.w	r2, #2
 80009c2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80009ce:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80009d2:	d113      	bne.n	80009fc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009d8:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <HAL_ADC_Start+0x154>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d105      	bne.n	80009ea <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_ADC_Start+0x158>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d108      	bne.n	80009fc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	e00c      	b.n	8000a16 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	689a      	ldr	r2, [r3, #8]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	e003      	b.n	8000a16 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3710      	adds	r7, #16
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40012800 	.word	0x40012800
 8000a24:	40012400 	.word	0x40012400

08000a28 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000a3e:	f7ff fe63 	bl	8000708 <HAL_GetTick>
 8000a42:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d00b      	beq.n	8000a6a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a56:	f043 0220 	orr.w	r2, r3, #32
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2200      	movs	r2, #0
 8000a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e0c8      	b.n	8000bfc <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d12a      	bne.n	8000ace <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d123      	bne.n	8000ace <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000a86:	e01a      	b.n	8000abe <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a8e:	d016      	beq.n	8000abe <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d007      	beq.n	8000aa6 <HAL_ADC_PollForConversion+0x7e>
 8000a96:	f7ff fe37 	bl	8000708 <HAL_GetTick>
 8000a9a:	4602      	mov	r2, r0
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d20b      	bcs.n	8000abe <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aaa:	f043 0204 	orr.w	r2, r3, #4
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000aba:	2303      	movs	r3, #3
 8000abc:	e09e      	b.n	8000bfc <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d0dd      	beq.n	8000a88 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000acc:	e06c      	b.n	8000ba8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000ace:	4b4d      	ldr	r3, [pc, #308]	; (8000c04 <HAL_ADC_PollForConversion+0x1dc>)
 8000ad0:	681c      	ldr	r4, [r3, #0]
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	f001 f980 	bl	8001dd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6919      	ldr	r1, [r3, #16]
 8000ae4:	4b48      	ldr	r3, [pc, #288]	; (8000c08 <HAL_ADC_PollForConversion+0x1e0>)
 8000ae6:	400b      	ands	r3, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d118      	bne.n	8000b1e <HAL_ADC_PollForConversion+0xf6>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68d9      	ldr	r1, [r3, #12]
 8000af2:	4b46      	ldr	r3, [pc, #280]	; (8000c0c <HAL_ADC_PollForConversion+0x1e4>)
 8000af4:	400b      	ands	r3, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d111      	bne.n	8000b1e <HAL_ADC_PollForConversion+0xf6>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6919      	ldr	r1, [r3, #16]
 8000b00:	4b43      	ldr	r3, [pc, #268]	; (8000c10 <HAL_ADC_PollForConversion+0x1e8>)
 8000b02:	400b      	ands	r3, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d108      	bne.n	8000b1a <HAL_ADC_PollForConversion+0xf2>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	68d9      	ldr	r1, [r3, #12]
 8000b0e:	4b41      	ldr	r3, [pc, #260]	; (8000c14 <HAL_ADC_PollForConversion+0x1ec>)
 8000b10:	400b      	ands	r3, r1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <HAL_ADC_PollForConversion+0xf2>
 8000b16:	2314      	movs	r3, #20
 8000b18:	e020      	b.n	8000b5c <HAL_ADC_PollForConversion+0x134>
 8000b1a:	2329      	movs	r3, #41	; 0x29
 8000b1c:	e01e      	b.n	8000b5c <HAL_ADC_PollForConversion+0x134>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6919      	ldr	r1, [r3, #16]
 8000b24:	4b3a      	ldr	r3, [pc, #232]	; (8000c10 <HAL_ADC_PollForConversion+0x1e8>)
 8000b26:	400b      	ands	r3, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d106      	bne.n	8000b3a <HAL_ADC_PollForConversion+0x112>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	68d9      	ldr	r1, [r3, #12]
 8000b32:	4b38      	ldr	r3, [pc, #224]	; (8000c14 <HAL_ADC_PollForConversion+0x1ec>)
 8000b34:	400b      	ands	r3, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d00d      	beq.n	8000b56 <HAL_ADC_PollForConversion+0x12e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	6919      	ldr	r1, [r3, #16]
 8000b40:	4b35      	ldr	r3, [pc, #212]	; (8000c18 <HAL_ADC_PollForConversion+0x1f0>)
 8000b42:	400b      	ands	r3, r1
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d108      	bne.n	8000b5a <HAL_ADC_PollForConversion+0x132>
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	68d9      	ldr	r1, [r3, #12]
 8000b4e:	4b32      	ldr	r3, [pc, #200]	; (8000c18 <HAL_ADC_PollForConversion+0x1f0>)
 8000b50:	400b      	ands	r3, r1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d101      	bne.n	8000b5a <HAL_ADC_PollForConversion+0x132>
 8000b56:	2354      	movs	r3, #84	; 0x54
 8000b58:	e000      	b.n	8000b5c <HAL_ADC_PollForConversion+0x134>
 8000b5a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000b5c:	fb02 f303 	mul.w	r3, r2, r3
 8000b60:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000b62:	e01d      	b.n	8000ba0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b6a:	d016      	beq.n	8000b9a <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d007      	beq.n	8000b82 <HAL_ADC_PollForConversion+0x15a>
 8000b72:	f7ff fdc9 	bl	8000708 <HAL_GetTick>
 8000b76:	4602      	mov	r2, r0
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	683a      	ldr	r2, [r7, #0]
 8000b7e:	429a      	cmp	r2, r3
 8000b80:	d20b      	bcs.n	8000b9a <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b86:	f043 0204 	orr.w	r2, r3, #4
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000b96:	2303      	movs	r3, #3
 8000b98:	e030      	b.n	8000bfc <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8dd      	bhi.n	8000b64 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f06f 0212 	mvn.w	r2, #18
 8000bb0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bb6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000bc8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bcc:	d115      	bne.n	8000bfa <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d111      	bne.n	8000bfa <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000be6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d105      	bne.n	8000bfa <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf2:	f043 0201 	orr.w	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	371c      	adds	r7, #28
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd90      	pop	{r4, r7, pc}
 8000c04:	20000000 	.word	0x20000000
 8000c08:	24924924 	.word	0x24924924
 8000c0c:	00924924 	.word	0x00924924
 8000c10:	12492492 	.word	0x12492492
 8000c14:	00492492 	.word	0x00492492
 8000c18:	00249249 	.word	0x00249249

08000c1c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr

08000c34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d101      	bne.n	8000c54 <HAL_ADC_ConfigChannel+0x20>
 8000c50:	2302      	movs	r3, #2
 8000c52:	e0dc      	b.n	8000e0e <HAL_ADC_ConfigChannel+0x1da>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2201      	movs	r2, #1
 8000c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b06      	cmp	r3, #6
 8000c62:	d81c      	bhi.n	8000c9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	3b05      	subs	r3, #5
 8000c76:	221f      	movs	r2, #31
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	4019      	ands	r1, r3
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685a      	ldr	r2, [r3, #4]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	4413      	add	r3, r2
 8000c8e:	3b05      	subs	r3, #5
 8000c90:	fa00 f203 	lsl.w	r2, r0, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c9c:	e03c      	b.n	8000d18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b0c      	cmp	r3, #12
 8000ca4:	d81c      	bhi.n	8000ce0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3b23      	subs	r3, #35	; 0x23
 8000cb8:	221f      	movs	r2, #31
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	4019      	ands	r1, r3
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	6818      	ldr	r0, [r3, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	4613      	mov	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	3b23      	subs	r3, #35	; 0x23
 8000cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8000cde:	e01b      	b.n	8000d18 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	3b41      	subs	r3, #65	; 0x41
 8000cf2:	221f      	movs	r2, #31
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	4019      	ands	r1, r3
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	6818      	ldr	r0, [r3, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	4613      	mov	r3, r2
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	4413      	add	r3, r2
 8000d0a:	3b41      	subs	r3, #65	; 0x41
 8000d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b09      	cmp	r3, #9
 8000d1e:	d91c      	bls.n	8000d5a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68d9      	ldr	r1, [r3, #12]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	3b1e      	subs	r3, #30
 8000d32:	2207      	movs	r2, #7
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	4019      	ands	r1, r3
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	6898      	ldr	r0, [r3, #8]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	3b1e      	subs	r3, #30
 8000d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	430a      	orrs	r2, r1
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	e019      	b.n	8000d8e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6919      	ldr	r1, [r3, #16]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	2207      	movs	r2, #7
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4019      	ands	r1, r3
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	6898      	ldr	r0, [r3, #8]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	fa00 f203 	lsl.w	r2, r0, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b10      	cmp	r3, #16
 8000d94:	d003      	beq.n	8000d9e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000d9a:	2b11      	cmp	r3, #17
 8000d9c:	d132      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <HAL_ADC_ConfigChannel+0x1e4>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d125      	bne.n	8000df4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d126      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	689a      	ldr	r2, [r3, #8]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000dc4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b10      	cmp	r3, #16
 8000dcc:	d11a      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dce:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <HAL_ADC_ConfigChannel+0x1e8>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a13      	ldr	r2, [pc, #76]	; (8000e20 <HAL_ADC_ConfigChannel+0x1ec>)
 8000dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd8:	0c9a      	lsrs	r2, r3, #18
 8000dda:	4613      	mov	r3, r2
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	4413      	add	r3, r2
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000de4:	e002      	b.n	8000dec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f9      	bne.n	8000de6 <HAL_ADC_ConfigChannel+0x1b2>
 8000df2:	e007      	b.n	8000e04 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df8:	f043 0220 	orr.w	r2, r3, #32
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3714      	adds	r7, #20
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	40012400 	.word	0x40012400
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	431bde83 	.word	0x431bde83

08000e24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d039      	beq.n	8000eb6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	689a      	ldr	r2, [r3, #8]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f042 0201 	orr.w	r2, r2, #1
 8000e50:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e52:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <ADC_Enable+0x9c>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a1b      	ldr	r2, [pc, #108]	; (8000ec4 <ADC_Enable+0xa0>)
 8000e58:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5c:	0c9b      	lsrs	r3, r3, #18
 8000e5e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e60:	e002      	b.n	8000e68 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	3b01      	subs	r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f9      	bne.n	8000e62 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e6e:	f7ff fc4b 	bl	8000708 <HAL_GetTick>
 8000e72:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000e74:	e018      	b.n	8000ea8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000e76:	f7ff fc47 	bl	8000708 <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d911      	bls.n	8000ea8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e88:	f043 0210 	orr.w	r2, r3, #16
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e94:	f043 0201 	orr.w	r2, r3, #1
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e007      	b.n	8000eb8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d1df      	bne.n	8000e76 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000000 	.word	0x20000000
 8000ec4:	431bde83 	.word	0x431bde83

08000ec8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d127      	bne.n	8000f32 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0201 	bic.w	r2, r2, #1
 8000ef0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ef2:	f7ff fc09 	bl	8000708 <HAL_GetTick>
 8000ef6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ef8:	e014      	b.n	8000f24 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000efa:	f7ff fc05 	bl	8000708 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d90d      	bls.n	8000f24 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	f043 0210 	orr.w	r2, r3, #16
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	f043 0201 	orr.w	r2, r3, #1
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000f20:	2301      	movs	r3, #1
 8000f22:	e007      	b.n	8000f34 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d0e3      	beq.n	8000efa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4906      	ldr	r1, [pc, #24]	; (8000fd4 <__NVIC_EnableIRQ+0x34>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010b4:	f7ff ff90 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff2d 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff42 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff90 	bl	800102c <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5f 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	4603      	mov	r3, r0
 800112a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800112c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff35 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffa2 	bl	8001090 <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b08b      	sub	sp, #44	; 0x2c
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	e169      	b.n	8001440 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800116c:	2201      	movs	r2, #1
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	429a      	cmp	r2, r3
 8001186:	f040 8158 	bne.w	800143a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a9a      	ldr	r2, [pc, #616]	; (80013f8 <HAL_GPIO_Init+0x2a0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d05e      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 8001194:	4a98      	ldr	r2, [pc, #608]	; (80013f8 <HAL_GPIO_Init+0x2a0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d875      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 800119a:	4a98      	ldr	r2, [pc, #608]	; (80013fc <HAL_GPIO_Init+0x2a4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d058      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011a0:	4a96      	ldr	r2, [pc, #600]	; (80013fc <HAL_GPIO_Init+0x2a4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d86f      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011a6:	4a96      	ldr	r2, [pc, #600]	; (8001400 <HAL_GPIO_Init+0x2a8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d052      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011ac:	4a94      	ldr	r2, [pc, #592]	; (8001400 <HAL_GPIO_Init+0x2a8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d869      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011b2:	4a94      	ldr	r2, [pc, #592]	; (8001404 <HAL_GPIO_Init+0x2ac>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d04c      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011b8:	4a92      	ldr	r2, [pc, #584]	; (8001404 <HAL_GPIO_Init+0x2ac>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d863      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011be:	4a92      	ldr	r2, [pc, #584]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d046      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011c4:	4a90      	ldr	r2, [pc, #576]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d85d      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011ca:	2b12      	cmp	r3, #18
 80011cc:	d82a      	bhi.n	8001224 <HAL_GPIO_Init+0xcc>
 80011ce:	2b12      	cmp	r3, #18
 80011d0:	d859      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011d2:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <HAL_GPIO_Init+0x80>)
 80011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d8:	08001253 	.word	0x08001253
 80011dc:	0800122d 	.word	0x0800122d
 80011e0:	0800123f 	.word	0x0800123f
 80011e4:	08001281 	.word	0x08001281
 80011e8:	08001287 	.word	0x08001287
 80011ec:	08001287 	.word	0x08001287
 80011f0:	08001287 	.word	0x08001287
 80011f4:	08001287 	.word	0x08001287
 80011f8:	08001287 	.word	0x08001287
 80011fc:	08001287 	.word	0x08001287
 8001200:	08001287 	.word	0x08001287
 8001204:	08001287 	.word	0x08001287
 8001208:	08001287 	.word	0x08001287
 800120c:	08001287 	.word	0x08001287
 8001210:	08001287 	.word	0x08001287
 8001214:	08001287 	.word	0x08001287
 8001218:	08001287 	.word	0x08001287
 800121c:	08001235 	.word	0x08001235
 8001220:	08001249 	.word	0x08001249
 8001224:	4a79      	ldr	r2, [pc, #484]	; (800140c <HAL_GPIO_Init+0x2b4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800122a:	e02c      	b.n	8001286 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	623b      	str	r3, [r7, #32]
          break;
 8001232:	e029      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	3304      	adds	r3, #4
 800123a:	623b      	str	r3, [r7, #32]
          break;
 800123c:	e024      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	3308      	adds	r3, #8
 8001244:	623b      	str	r3, [r7, #32]
          break;
 8001246:	e01f      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	330c      	adds	r3, #12
 800124e:	623b      	str	r3, [r7, #32]
          break;
 8001250:	e01a      	b.n	8001288 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800125a:	2304      	movs	r3, #4
 800125c:	623b      	str	r3, [r7, #32]
          break;
 800125e:	e013      	b.n	8001288 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d105      	bne.n	8001274 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001268:	2308      	movs	r3, #8
 800126a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	611a      	str	r2, [r3, #16]
          break;
 8001272:	e009      	b.n	8001288 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001274:	2308      	movs	r3, #8
 8001276:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	615a      	str	r2, [r3, #20]
          break;
 800127e:	e003      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
          break;
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x130>
          break;
 8001286:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	d801      	bhi.n	8001292 <HAL_GPIO_Init+0x13a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	e001      	b.n	8001296 <HAL_GPIO_Init+0x13e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3304      	adds	r3, #4
 8001296:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	2bff      	cmp	r3, #255	; 0xff
 800129c:	d802      	bhi.n	80012a4 <HAL_GPIO_Init+0x14c>
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	e002      	b.n	80012aa <HAL_GPIO_Init+0x152>
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	3b08      	subs	r3, #8
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	210f      	movs	r1, #15
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	401a      	ands	r2, r3
 80012bc:	6a39      	ldr	r1, [r7, #32]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	431a      	orrs	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80b1 	beq.w	800143a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012d8:	4b4d      	ldr	r3, [pc, #308]	; (8001410 <HAL_GPIO_Init+0x2b8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a4c      	ldr	r2, [pc, #304]	; (8001410 <HAL_GPIO_Init+0x2b8>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_GPIO_Init+0x2b8>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012f0:	4a48      	ldr	r2, [pc, #288]	; (8001414 <HAL_GPIO_Init+0x2bc>)
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a40      	ldr	r2, [pc, #256]	; (8001418 <HAL_GPIO_Init+0x2c0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d013      	beq.n	8001344 <HAL_GPIO_Init+0x1ec>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a3f      	ldr	r2, [pc, #252]	; (800141c <HAL_GPIO_Init+0x2c4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d00d      	beq.n	8001340 <HAL_GPIO_Init+0x1e8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a3e      	ldr	r2, [pc, #248]	; (8001420 <HAL_GPIO_Init+0x2c8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d007      	beq.n	800133c <HAL_GPIO_Init+0x1e4>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a3d      	ldr	r2, [pc, #244]	; (8001424 <HAL_GPIO_Init+0x2cc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d101      	bne.n	8001338 <HAL_GPIO_Init+0x1e0>
 8001334:	2303      	movs	r3, #3
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001338:	2304      	movs	r3, #4
 800133a:	e004      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 800133c:	2302      	movs	r3, #2
 800133e:	e002      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001344:	2300      	movs	r3, #0
 8001346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	4093      	lsls	r3, r2
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001356:	492f      	ldr	r1, [pc, #188]	; (8001414 <HAL_GPIO_Init+0x2bc>)
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	492c      	ldr	r1, [pc, #176]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	43db      	mvns	r3, r3
 8001386:	4928      	ldr	r1, [pc, #160]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001388:	4013      	ands	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4922      	ldr	r1, [pc, #136]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	491e      	ldr	r1, [pc, #120]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	4918      	ldr	r1, [pc, #96]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4914      	ldr	r1, [pc, #80]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d021      	beq.n	800142c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	490e      	ldr	r1, [pc, #56]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	60cb      	str	r3, [r1, #12]
 80013f4:	e021      	b.n	800143a <HAL_GPIO_Init+0x2e2>
 80013f6:	bf00      	nop
 80013f8:	10320000 	.word	0x10320000
 80013fc:	10310000 	.word	0x10310000
 8001400:	10220000 	.word	0x10220000
 8001404:	10210000 	.word	0x10210000
 8001408:	10120000 	.word	0x10120000
 800140c:	10110000 	.word	0x10110000
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000
 8001418:	40010800 	.word	0x40010800
 800141c:	40010c00 	.word	0x40010c00
 8001420:	40011000 	.word	0x40011000
 8001424:	40011400 	.word	0x40011400
 8001428:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_GPIO_Init+0x304>)
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	43db      	mvns	r3, r3
 8001434:	4909      	ldr	r1, [pc, #36]	; (800145c <HAL_GPIO_Init+0x304>)
 8001436:	4013      	ands	r3, r2
 8001438:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	3301      	adds	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	fa22 f303 	lsr.w	r3, r2, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	f47f ae8e 	bne.w	800116c <HAL_GPIO_Init+0x14>
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	372c      	adds	r7, #44	; 0x2c
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d101      	bne.n	8001472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e26c      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 8087 	beq.w	800158e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001480:	4b92      	ldr	r3, [pc, #584]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 030c 	and.w	r3, r3, #12
 8001488:	2b04      	cmp	r3, #4
 800148a:	d00c      	beq.n	80014a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800148c:	4b8f      	ldr	r3, [pc, #572]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 030c 	and.w	r3, r3, #12
 8001494:	2b08      	cmp	r3, #8
 8001496:	d112      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
 8001498:	4b8c      	ldr	r3, [pc, #560]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a4:	d10b      	bne.n	80014be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	4b89      	ldr	r3, [pc, #548]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d06c      	beq.n	800158c <HAL_RCC_OscConfig+0x12c>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d168      	bne.n	800158c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e246      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014c6:	d106      	bne.n	80014d6 <HAL_RCC_OscConfig+0x76>
 80014c8:	4b80      	ldr	r3, [pc, #512]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a7f      	ldr	r2, [pc, #508]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e02e      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0x98>
 80014de:	4b7b      	ldr	r3, [pc, #492]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a7a      	ldr	r2, [pc, #488]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b78      	ldr	r3, [pc, #480]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a77      	ldr	r2, [pc, #476]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80014f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e01d      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0xbc>
 8001502:	4b72      	ldr	r3, [pc, #456]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a71      	ldr	r2, [pc, #452]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800150c:	6013      	str	r3, [r2, #0]
 800150e:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a6e      	ldr	r2, [pc, #440]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0xd4>
 800151c:	4b6b      	ldr	r3, [pc, #428]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a6a      	ldr	r2, [pc, #424]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a67      	ldr	r2, [pc, #412]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff f8e4 	bl	8000708 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff f8e0 	bl	8000708 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e1fa      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001556:	4b5d      	ldr	r3, [pc, #372]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0xe4>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff f8d0 	bl	8000708 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff f8cc 	bl	8000708 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e1e6      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157e:	4b53      	ldr	r3, [pc, #332]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x10c>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d063      	beq.n	8001662 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800159a:	4b4c      	ldr	r3, [pc, #304]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015a6:	4b49      	ldr	r3, [pc, #292]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d11c      	bne.n	80015ec <HAL_RCC_OscConfig+0x18c>
 80015b2:	4b46      	ldr	r3, [pc, #280]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d116      	bne.n	80015ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015be:	4b43      	ldr	r3, [pc, #268]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_RCC_OscConfig+0x176>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d001      	beq.n	80015d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e1ba      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	4939      	ldr	r1, [pc, #228]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ea:	e03a      	b.n	8001662 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d020      	beq.n	8001636 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015f4:	4b36      	ldr	r3, [pc, #216]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff f885 	bl	8000708 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff f881 	bl	8000708 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e19b      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001614:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4927      	ldr	r1, [pc, #156]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001630:	4313      	orrs	r3, r2
 8001632:	600b      	str	r3, [r1, #0]
 8001634:	e015      	b.n	8001662 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_RCC_OscConfig+0x270>)
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff f864 	bl	8000708 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff f860 	bl	8000708 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e17a      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d03a      	beq.n	80016e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <HAL_RCC_OscConfig+0x274>)
 8001678:	2201      	movs	r2, #1
 800167a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167c:	f7ff f844 	bl	8000708 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001684:	f7ff f840 	bl	8000708 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e15a      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_RCC_OscConfig+0x26c>)
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f0      	beq.n	8001684 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016a2:	2001      	movs	r0, #1
 80016a4:	f000 fac4 	bl	8001c30 <RCC_Delay>
 80016a8:	e01c      	b.n	80016e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_RCC_OscConfig+0x274>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff f82a 	bl	8000708 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b6:	e00f      	b.n	80016d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016b8:	f7ff f826 	bl	8000708 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d908      	bls.n	80016d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e140      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	42420000 	.word	0x42420000
 80016d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d8:	4b9e      	ldr	r3, [pc, #632]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80016da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1e9      	bne.n	80016b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80a6 	beq.w	800183e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016f6:	4b97      	ldr	r3, [pc, #604]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10d      	bne.n	800171e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b94      	ldr	r3, [pc, #592]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a93      	ldr	r2, [pc, #588]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b91      	ldr	r3, [pc, #580]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800171a:	2301      	movs	r3, #1
 800171c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b8e      	ldr	r3, [pc, #568]	; (8001958 <HAL_RCC_OscConfig+0x4f8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d118      	bne.n	800175c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b8b      	ldr	r3, [pc, #556]	; (8001958 <HAL_RCC_OscConfig+0x4f8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a8a      	ldr	r2, [pc, #552]	; (8001958 <HAL_RCC_OscConfig+0x4f8>)
 8001730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001736:	f7fe ffe7 	bl	8000708 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173c:	e008      	b.n	8001750 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173e:	f7fe ffe3 	bl	8000708 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	2b64      	cmp	r3, #100	; 0x64
 800174a:	d901      	bls.n	8001750 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800174c:	2303      	movs	r3, #3
 800174e:	e0fd      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001750:	4b81      	ldr	r3, [pc, #516]	; (8001958 <HAL_RCC_OscConfig+0x4f8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0f0      	beq.n	800173e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x312>
 8001764:	4b7b      	ldr	r3, [pc, #492]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	4a7a      	ldr	r2, [pc, #488]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	6213      	str	r3, [r2, #32]
 8001770:	e02d      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0x334>
 800177a:	4b76      	ldr	r3, [pc, #472]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a75      	ldr	r2, [pc, #468]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	4b73      	ldr	r3, [pc, #460]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a72      	ldr	r2, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	6213      	str	r3, [r2, #32]
 8001792:	e01c      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b05      	cmp	r3, #5
 800179a:	d10c      	bne.n	80017b6 <HAL_RCC_OscConfig+0x356>
 800179c:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	4a6c      	ldr	r2, [pc, #432]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6213      	str	r3, [r2, #32]
 80017a8:	4b6a      	ldr	r3, [pc, #424]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a69      	ldr	r2, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6213      	str	r3, [r2, #32]
 80017b4:	e00b      	b.n	80017ce <HAL_RCC_OscConfig+0x36e>
 80017b6:	4b67      	ldr	r3, [pc, #412]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017b8:	6a1b      	ldr	r3, [r3, #32]
 80017ba:	4a66      	ldr	r2, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017bc:	f023 0301 	bic.w	r3, r3, #1
 80017c0:	6213      	str	r3, [r2, #32]
 80017c2:	4b64      	ldr	r3, [pc, #400]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	4a63      	ldr	r2, [pc, #396]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d015      	beq.n	8001802 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7fe ff97 	bl	8000708 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017de:	f7fe ff93 	bl	8000708 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e0ab      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017f4:	4b57      	ldr	r3, [pc, #348]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0ee      	beq.n	80017de <HAL_RCC_OscConfig+0x37e>
 8001800:	e014      	b.n	800182c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001802:	f7fe ff81 	bl	8000708 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001808:	e00a      	b.n	8001820 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7fe ff7d 	bl	8000708 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f241 3288 	movw	r2, #5000	; 0x1388
 8001818:	4293      	cmp	r3, r2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e095      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001820:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ee      	bne.n	800180a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800182c:	7dfb      	ldrb	r3, [r7, #23]
 800182e:	2b01      	cmp	r3, #1
 8001830:	d105      	bne.n	800183e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001832:	4b48      	ldr	r3, [pc, #288]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a47      	ldr	r2, [pc, #284]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8081 	beq.w	800194a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001848:	4b42      	ldr	r3, [pc, #264]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d061      	beq.n	8001918 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69db      	ldr	r3, [r3, #28]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d146      	bne.n	80018ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185c:	4b3f      	ldr	r3, [pc, #252]	; (800195c <HAL_RCC_OscConfig+0x4fc>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7fe ff51 	bl	8000708 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186a:	f7fe ff4d 	bl	8000708 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e067      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187c:	4b35      	ldr	r3, [pc, #212]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1f0      	bne.n	800186a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a1b      	ldr	r3, [r3, #32]
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001890:	d108      	bne.n	80018a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001892:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	492d      	ldr	r1, [pc, #180]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a19      	ldr	r1, [r3, #32]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	430b      	orrs	r3, r1
 80018b6:	4927      	ldr	r1, [pc, #156]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <HAL_RCC_OscConfig+0x4fc>)
 80018be:	2201      	movs	r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c2:	f7fe ff21 	bl	8000708 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7fe ff1d 	bl	8000708 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e037      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018dc:	4b1d      	ldr	r3, [pc, #116]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x46a>
 80018e8:	e02f      	b.n	800194a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <HAL_RCC_OscConfig+0x4fc>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7fe ff0a 	bl	8000708 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f8:	f7fe ff06 	bl	8000708 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e020      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x498>
 8001916:	e018      	b.n	800194a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69db      	ldr	r3, [r3, #28]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e013      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_OscConfig+0x4f4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
 8001934:	429a      	cmp	r2, r3
 8001936:	d106      	bne.n	8001946 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001942:	429a      	cmp	r2, r3
 8001944:	d001      	beq.n	800194a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	40007000 	.word	0x40007000
 800195c:	42420060 	.word	0x42420060

08001960 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0d0      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d910      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 0207 	bic.w	r2, r3, #7
 800198a:	4965      	ldr	r1, [pc, #404]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0307 	and.w	r3, r3, #7
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0b8      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019bc:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d4:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019da:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e0:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	494d      	ldr	r1, [pc, #308]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d040      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d115      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e073      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06b      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4936      	ldr	r1, [pc, #216]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7fe fe5a 	bl	8000708 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7fe fe56 	bl	8000708 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e053      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d210      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 0207 	bic.w	r2, r3, #7
 8001a96:	4922      	ldr	r1, [pc, #136]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e032      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4916      	ldr	r1, [pc, #88]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	490e      	ldr	r1, [pc, #56]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aee:	f000 f821 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001af2:	4602      	mov	r2, r0
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	490a      	ldr	r1, [pc, #40]	; (8001b28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b00:	5ccb      	ldrb	r3, [r1, r3]
 8001b02:	fa22 f303 	lsr.w	r3, r2, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_RCC_ClockConfig+0x1cc>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_ClockConfig+0x1d0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7fe fdb8 	bl	8000684 <HAL_InitTick>

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08002e1c 	.word	0x08002e1c
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	b490      	push	{r4, r7}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b3c:	1d3c      	adds	r4, r7, #4
 8001b3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b44:	f240 2301 	movw	r3, #513	; 0x201
 8001b48:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b5e:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d002      	beq.n	8001b74 <HAL_RCC_GetSysClockFreq+0x40>
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d003      	beq.n	8001b7a <HAL_RCC_GetSysClockFreq+0x46>
 8001b72:	e02d      	b.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b76:	623b      	str	r3, [r7, #32]
      break;
 8001b78:	e02d      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	0c9b      	lsrs	r3, r3, #18
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b86:	4413      	add	r3, r2
 8001b88:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b8c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	0c5b      	lsrs	r3, r3, #17
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ba6:	4413      	add	r3, r2
 8001ba8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb2:	fb02 f203 	mul.w	r2, r2, r3
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	e004      	b.n	8001bca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	623b      	str	r3, [r7, #32]
      break;
 8001bce:	e002      	b.n	8001bd6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bd2:	623b      	str	r3, [r7, #32]
      break;
 8001bd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3728      	adds	r7, #40	; 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc90      	pop	{r4, r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	08002dfc 	.word	0x08002dfc
 8001be8:	40021000 	.word	0x40021000
 8001bec:	007a1200 	.word	0x007a1200
 8001bf0:	003d0900 	.word	0x003d0900

08001bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	20000000 	.word	0x20000000

08001c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c0c:	f7ff fff2 	bl	8001bf4 <HAL_RCC_GetHCLKFreq>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	0adb      	lsrs	r3, r3, #11
 8001c18:	f003 0307 	and.w	r3, r3, #7
 8001c1c:	4903      	ldr	r1, [pc, #12]	; (8001c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c1e:	5ccb      	ldrb	r3, [r1, r3]
 8001c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	08002e2c 	.word	0x08002e2c

08001c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <RCC_Delay+0x34>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <RCC_Delay+0x38>)
 8001c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c42:	0a5b      	lsrs	r3, r3, #9
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	fb02 f303 	mul.w	r3, r2, r3
 8001c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c4c:	bf00      	nop
  }
  while (Delay --);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1e5a      	subs	r2, r3, #1
 8001c52:	60fa      	str	r2, [r7, #12]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1f9      	bne.n	8001c4c <RCC_Delay+0x1c>
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	3714      	adds	r7, #20
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	20000000 	.word	0x20000000
 8001c68:	10624dd3 	.word	0x10624dd3

08001c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d07d      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8c:	4b4f      	ldr	r3, [pc, #316]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10d      	bne.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c98:	4b4c      	ldr	r3, [pc, #304]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	4a4b      	ldr	r2, [pc, #300]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	61d3      	str	r3, [r2, #28]
 8001ca4:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d118      	bne.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc0:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a42      	ldr	r2, [pc, #264]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ccc:	f7fe fd1c 	bl	8000708 <HAL_GetTick>
 8001cd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd4:	f7fe fd18 	bl	8000708 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	; 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e06d      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f0      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cfa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d02e      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d027      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d10:	4b2e      	ldr	r3, [pc, #184]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d18:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d20:	4b2c      	ldr	r3, [pc, #176]	; (8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d26:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d014      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d36:	f7fe fce7 	bl	8000708 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7fe fce3 	bl	8000708 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e036      	b.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ee      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4917      	ldr	r1, [pc, #92]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d72:	7dfb      	ldrb	r3, [r7, #23]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d105      	bne.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d78:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001d90:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	490b      	ldr	r1, [pc, #44]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d008      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4904      	ldr	r1, [pc, #16]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	42420440 	.word	0x42420440

08001dd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b08d      	sub	sp, #52	; 0x34
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001de0:	4b5a      	ldr	r3, [pc, #360]	; (8001f4c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001de2:	f107 040c 	add.w	r4, r7, #12
 8001de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dec:	f240 2301 	movw	r3, #513	; 0x201
 8001df0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
 8001df6:	2300      	movs	r3, #0
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	d00a      	beq.n	8001e22 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b10      	cmp	r3, #16
 8001e10:	f200 8091 	bhi.w	8001f36 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d04c      	beq.n	8001eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d07c      	beq.n	8001f1a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001e20:	e089      	b.n	8001f36 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001e22:	4b4b      	ldr	r3, [pc, #300]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001e28:	4b49      	ldr	r3, [pc, #292]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8082 	beq.w	8001f3a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	0c9b      	lsrs	r3, r3, #18
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e42:	4413      	add	r3, r2
 8001e44:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e48:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d018      	beq.n	8001e86 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e54:	4b3e      	ldr	r3, [pc, #248]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	0c5b      	lsrs	r3, r3, #17
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e62:	4413      	add	r3, r2
 8001e64:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e68:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00d      	beq.n	8001e90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001e74:	4a37      	ldr	r2, [pc, #220]	; (8001f54 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	fb02 f303 	mul.w	r3, r2, r3
 8001e82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e84:	e004      	b.n	8001e90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	4a33      	ldr	r2, [pc, #204]	; (8001f58 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001e8a:	fb02 f303 	mul.w	r3, r2, r3
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001e90:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001ea2:	e04a      	b.n	8001f3a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4a2c      	ldr	r2, [pc, #176]	; (8001f5c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8001eae:	085b      	lsrs	r3, r3, #1
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001eb2:	e042      	b.n	8001f3a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001eb4:	4b26      	ldr	r3, [pc, #152]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec4:	d108      	bne.n	8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001ed0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ed6:	e01f      	b.n	8001f18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee2:	d109      	bne.n	8001ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001ef0:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef6:	e00f      	b.n	8001f18 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001efe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f02:	d11c      	bne.n	8001f3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d016      	beq.n	8001f3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001f10:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f16:	e012      	b.n	8001f3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001f18:	e011      	b.n	8001f3e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001f1a:	f7ff fe75 	bl	8001c08 <HAL_RCC_GetPCLK2Freq>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	0b9b      	lsrs	r3, r3, #14
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001f34:	e004      	b.n	8001f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001f36:	bf00      	nop
 8001f38:	e002      	b.n	8001f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001f3a:	bf00      	nop
 8001f3c:	e000      	b.n	8001f40 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001f3e:	bf00      	nop
    }
  }
  return (frequency);
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3734      	adds	r7, #52	; 0x34
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd90      	pop	{r4, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	08002e0c 	.word	0x08002e0c
 8001f50:	40021000 	.word	0x40021000
 8001f54:	007a1200 	.word	0x007a1200
 8001f58:	003d0900 	.word	0x003d0900
 8001f5c:	aaaaaaab 	.word	0xaaaaaaab

08001f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e041      	b.n	8001ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe fab4 	bl	80004f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f000 fbe0 	bl	8002764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d101      	bne.n	8002010 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e041      	b.n	8002094 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d106      	bne.n	800202a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f839 	bl	800209c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2202      	movs	r2, #2
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	3304      	adds	r3, #4
 800203a:	4619      	mov	r1, r3
 800203c:	4610      	mov	r0, r2
 800203e:	f000 fb91 	bl	8002764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2201      	movs	r2, #1
 800205e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d109      	bne.n	80020d4 <HAL_TIM_PWM_Start+0x24>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	bf14      	ite	ne
 80020cc:	2301      	movne	r3, #1
 80020ce:	2300      	moveq	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	e022      	b.n	800211a <HAL_TIM_PWM_Start+0x6a>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d109      	bne.n	80020ee <HAL_TIM_PWM_Start+0x3e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	e015      	b.n	800211a <HAL_TIM_PWM_Start+0x6a>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d109      	bne.n	8002108 <HAL_TIM_PWM_Start+0x58>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	e008      	b.n	800211a <HAL_TIM_PWM_Start+0x6a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b01      	cmp	r3, #1
 8002112:	bf14      	ite	ne
 8002114:	2301      	movne	r3, #1
 8002116:	2300      	moveq	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e05e      	b.n	80021e0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d104      	bne.n	8002132 <HAL_TIM_PWM_Start+0x82>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002130:	e013      	b.n	800215a <HAL_TIM_PWM_Start+0xaa>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b04      	cmp	r3, #4
 8002136:	d104      	bne.n	8002142 <HAL_TIM_PWM_Start+0x92>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002140:	e00b      	b.n	800215a <HAL_TIM_PWM_Start+0xaa>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d104      	bne.n	8002152 <HAL_TIM_PWM_Start+0xa2>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002150:	e003      	b.n	800215a <HAL_TIM_PWM_Start+0xaa>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2202      	movs	r2, #2
 8002156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2201      	movs	r2, #1
 8002160:	6839      	ldr	r1, [r7, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 fd7e 	bl	8002c64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a1e      	ldr	r2, [pc, #120]	; (80021e8 <HAL_TIM_PWM_Start+0x138>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d107      	bne.n	8002182 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002180:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <HAL_TIM_PWM_Start+0x138>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00e      	beq.n	80021aa <HAL_TIM_PWM_Start+0xfa>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d009      	beq.n	80021aa <HAL_TIM_PWM_Start+0xfa>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a14      	ldr	r2, [pc, #80]	; (80021ec <HAL_TIM_PWM_Start+0x13c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d004      	beq.n	80021aa <HAL_TIM_PWM_Start+0xfa>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_TIM_PWM_Start+0x140>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d111      	bne.n	80021ce <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b06      	cmp	r3, #6
 80021ba:	d010      	beq.n	80021de <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f042 0201 	orr.w	r2, r2, #1
 80021ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021cc:	e007      	b.n	80021de <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40012c00 	.word	0x40012c00
 80021ec:	40000400 	.word	0x40000400
 80021f0:	40000800 	.word	0x40000800

080021f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d122      	bne.n	8002250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b02      	cmp	r3, #2
 8002216:	d11b      	bne.n	8002250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0202 	mvn.w	r2, #2
 8002220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 fa78 	bl	800272c <HAL_TIM_IC_CaptureCallback>
 800223c:	e005      	b.n	800224a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fa6b 	bl	800271a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 fa7a 	bl	800273e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b04      	cmp	r3, #4
 800225c:	d122      	bne.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0304 	and.w	r3, r3, #4
 8002268:	2b04      	cmp	r3, #4
 800226a:	d11b      	bne.n	80022a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0204 	mvn.w	r2, #4
 8002274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fa4e 	bl	800272c <HAL_TIM_IC_CaptureCallback>
 8002290:	e005      	b.n	800229e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fa41 	bl	800271a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fa50 	bl	800273e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d122      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d11b      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0208 	mvn.w	r2, #8
 80022c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2204      	movs	r2, #4
 80022ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fa24 	bl	800272c <HAL_TIM_IC_CaptureCallback>
 80022e4:	e005      	b.n	80022f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fa17 	bl	800271a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fa26 	bl	800273e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0310 	and.w	r3, r3, #16
 8002302:	2b10      	cmp	r3, #16
 8002304:	d122      	bne.n	800234c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0310 	and.w	r3, r3, #16
 8002310:	2b10      	cmp	r3, #16
 8002312:	d11b      	bne.n	800234c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0210 	mvn.w	r2, #16
 800231c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2208      	movs	r2, #8
 8002322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f9fa 	bl	800272c <HAL_TIM_IC_CaptureCallback>
 8002338:	e005      	b.n	8002346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f9ed 	bl	800271a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f9fc 	bl	800273e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b01      	cmp	r3, #1
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d107      	bne.n	8002378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f06f 0201 	mvn.w	r2, #1
 8002370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f9c8 	bl	8002708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b80      	cmp	r3, #128	; 0x80
 8002392:	d107      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800239c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 fceb 	bl	8002d7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d10e      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023bc:	2b40      	cmp	r3, #64	; 0x40
 80023be:	d107      	bne.n	80023d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f9c0 	bl	8002750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	f003 0320 	and.w	r3, r3, #32
 80023da:	2b20      	cmp	r3, #32
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d107      	bne.n	80023fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0220 	mvn.w	r2, #32
 80023f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 fcb6 	bl	8002d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800241a:	2302      	movs	r3, #2
 800241c:	e0ac      	b.n	8002578 <HAL_TIM_PWM_ConfigChannel+0x174>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b0c      	cmp	r3, #12
 800242a:	f200 809f 	bhi.w	800256c <HAL_TIM_PWM_ConfigChannel+0x168>
 800242e:	a201      	add	r2, pc, #4	; (adr r2, 8002434 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002434:	08002469 	.word	0x08002469
 8002438:	0800256d 	.word	0x0800256d
 800243c:	0800256d 	.word	0x0800256d
 8002440:	0800256d 	.word	0x0800256d
 8002444:	080024a9 	.word	0x080024a9
 8002448:	0800256d 	.word	0x0800256d
 800244c:	0800256d 	.word	0x0800256d
 8002450:	0800256d 	.word	0x0800256d
 8002454:	080024eb 	.word	0x080024eb
 8002458:	0800256d 	.word	0x0800256d
 800245c:	0800256d 	.word	0x0800256d
 8002460:	0800256d 	.word	0x0800256d
 8002464:	0800252b 	.word	0x0800252b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68b9      	ldr	r1, [r7, #8]
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f9da 	bl	8002828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699a      	ldr	r2, [r3, #24]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0208 	orr.w	r2, r2, #8
 8002482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0204 	bic.w	r2, r2, #4
 8002492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6999      	ldr	r1, [r3, #24]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	619a      	str	r2, [r3, #24]
      break;
 80024a6:	e062      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fa20 	bl	80028f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699a      	ldr	r2, [r3, #24]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6999      	ldr	r1, [r3, #24]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	021a      	lsls	r2, r3, #8
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	619a      	str	r2, [r3, #24]
      break;
 80024e8:	e041      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	68b9      	ldr	r1, [r7, #8]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 fa69 	bl	80029c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0208 	orr.w	r2, r2, #8
 8002504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	69da      	ldr	r2, [r3, #28]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0204 	bic.w	r2, r2, #4
 8002514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69d9      	ldr	r1, [r3, #28]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	61da      	str	r2, [r3, #28]
      break;
 8002528:	e021      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fab3 	bl	8002a9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	69da      	ldr	r2, [r3, #28]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69da      	ldr	r2, [r3, #28]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	69d9      	ldr	r1, [r3, #28]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	021a      	lsls	r2, r3, #8
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	61da      	str	r2, [r3, #28]
      break;
 800256a:	e000      	b.n	800256e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800256c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}

08002580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_TIM_ConfigClockSource+0x18>
 8002594:	2302      	movs	r3, #2
 8002596:	e0b3      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x180>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d0:	d03e      	beq.n	8002650 <HAL_TIM_ConfigClockSource+0xd0>
 80025d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d6:	f200 8087 	bhi.w	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 80025da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025de:	f000 8085 	beq.w	80026ec <HAL_TIM_ConfigClockSource+0x16c>
 80025e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e6:	d87f      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 80025e8:	2b70      	cmp	r3, #112	; 0x70
 80025ea:	d01a      	beq.n	8002622 <HAL_TIM_ConfigClockSource+0xa2>
 80025ec:	2b70      	cmp	r3, #112	; 0x70
 80025ee:	d87b      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 80025f0:	2b60      	cmp	r3, #96	; 0x60
 80025f2:	d050      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x116>
 80025f4:	2b60      	cmp	r3, #96	; 0x60
 80025f6:	d877      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 80025f8:	2b50      	cmp	r3, #80	; 0x50
 80025fa:	d03c      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0xf6>
 80025fc:	2b50      	cmp	r3, #80	; 0x50
 80025fe:	d873      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d058      	beq.n	80026b6 <HAL_TIM_ConfigClockSource+0x136>
 8002604:	2b40      	cmp	r3, #64	; 0x40
 8002606:	d86f      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 8002608:	2b30      	cmp	r3, #48	; 0x30
 800260a:	d064      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x156>
 800260c:	2b30      	cmp	r3, #48	; 0x30
 800260e:	d86b      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 8002610:	2b20      	cmp	r3, #32
 8002612:	d060      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x156>
 8002614:	2b20      	cmp	r3, #32
 8002616:	d867      	bhi.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d05c      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x156>
 800261c:	2b10      	cmp	r3, #16
 800261e:	d05a      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002620:	e062      	b.n	80026e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f000 faf8 	bl	8002c26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002644:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	609a      	str	r2, [r3, #8]
      break;
 800264e:	e04e      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6899      	ldr	r1, [r3, #8]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	f000 fae1 	bl	8002c26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002672:	609a      	str	r2, [r3, #8]
      break;
 8002674:	e03b      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	461a      	mov	r2, r3
 8002684:	f000 fa58 	bl	8002b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2150      	movs	r1, #80	; 0x50
 800268e:	4618      	mov	r0, r3
 8002690:	f000 faaf 	bl	8002bf2 <TIM_ITRx_SetConfig>
      break;
 8002694:	e02b      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f000 fa76 	bl	8002b94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2160      	movs	r1, #96	; 0x60
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fa9f 	bl	8002bf2 <TIM_ITRx_SetConfig>
      break;
 80026b4:	e01b      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6859      	ldr	r1, [r3, #4]
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	461a      	mov	r2, r3
 80026c4:	f000 fa38 	bl	8002b38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2140      	movs	r1, #64	; 0x40
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fa8f 	bl	8002bf2 <TIM_ITRx_SetConfig>
      break;
 80026d4:	e00b      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f000 fa86 	bl	8002bf2 <TIM_ITRx_SetConfig>
        break;
 80026e6:	e002      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026e8:	bf00      	nop
 80026ea:	e000      	b.n	80026ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800271a:	b480      	push	{r7}
 800271c:	b083      	sub	sp, #12
 800271e:	af00      	add	r7, sp, #0
 8002720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr

0800272c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
	...

08002764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a29      	ldr	r2, [pc, #164]	; (800281c <TIM_Base_SetConfig+0xb8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00b      	beq.n	8002794 <TIM_Base_SetConfig+0x30>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002782:	d007      	beq.n	8002794 <TIM_Base_SetConfig+0x30>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a26      	ldr	r2, [pc, #152]	; (8002820 <TIM_Base_SetConfig+0xbc>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d003      	beq.n	8002794 <TIM_Base_SetConfig+0x30>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a25      	ldr	r2, [pc, #148]	; (8002824 <TIM_Base_SetConfig+0xc0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d108      	bne.n	80027a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800279a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a1c      	ldr	r2, [pc, #112]	; (800281c <TIM_Base_SetConfig+0xb8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00b      	beq.n	80027c6 <TIM_Base_SetConfig+0x62>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b4:	d007      	beq.n	80027c6 <TIM_Base_SetConfig+0x62>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <TIM_Base_SetConfig+0xbc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d003      	beq.n	80027c6 <TIM_Base_SetConfig+0x62>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a18      	ldr	r2, [pc, #96]	; (8002824 <TIM_Base_SetConfig+0xc0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d108      	bne.n	80027d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a07      	ldr	r2, [pc, #28]	; (800281c <TIM_Base_SetConfig+0xb8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d103      	bne.n	800280c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	691a      	ldr	r2, [r3, #16]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	615a      	str	r2, [r3, #20]
}
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr
 800281c:	40012c00 	.word	0x40012c00
 8002820:	40000400 	.word	0x40000400
 8002824:	40000800 	.word	0x40000800

08002828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002828:	b480      	push	{r7}
 800282a:	b087      	sub	sp, #28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	f023 0201 	bic.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f023 0303 	bic.w	r3, r3, #3
 800285e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f023 0302 	bic.w	r3, r3, #2
 8002870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	4313      	orrs	r3, r2
 800287a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a1c      	ldr	r2, [pc, #112]	; (80028f0 <TIM_OC1_SetConfig+0xc8>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d10c      	bne.n	800289e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	f023 0308 	bic.w	r3, r3, #8
 800288a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f023 0304 	bic.w	r3, r3, #4
 800289c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <TIM_OC1_SetConfig+0xc8>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d111      	bne.n	80028ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	621a      	str	r2, [r3, #32]
}
 80028e4:	bf00      	nop
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40012c00 	.word	0x40012c00

080028f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	f023 0210 	bic.w	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800292a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f023 0320 	bic.w	r3, r3, #32
 800293e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a1d      	ldr	r2, [pc, #116]	; (80029c4 <TIM_OC2_SetConfig+0xd0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d10d      	bne.n	8002970 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800295a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800296e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <TIM_OC2_SetConfig+0xd0>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d113      	bne.n	80029a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800297e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002986:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	621a      	str	r2, [r3, #32]
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr
 80029c4:	40012c00 	.word	0x40012c00

080029c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	021b      	lsls	r3, r3, #8
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a1d      	ldr	r2, [pc, #116]	; (8002a98 <TIM_OC3_SetConfig+0xd0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d10d      	bne.n	8002a42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	021b      	lsls	r3, r3, #8
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <TIM_OC3_SetConfig+0xd0>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d113      	bne.n	8002a72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685a      	ldr	r2, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	621a      	str	r2, [r3, #32]
}
 8002a8c:	bf00      	nop
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40012c00 	.word	0x40012c00

08002a9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ae6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	031b      	lsls	r3, r3, #12
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a0f      	ldr	r2, [pc, #60]	; (8002b34 <TIM_OC4_SetConfig+0x98>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d109      	bne.n	8002b10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	019b      	lsls	r3, r3, #6
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	621a      	str	r2, [r3, #32]
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	40012c00 	.word	0x40012c00

08002b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f023 0201 	bic.w	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f023 030a 	bic.w	r3, r3, #10
 8002b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	621a      	str	r2, [r3, #32]
}
 8002b8a:	bf00      	nop
 8002b8c:	371c      	adds	r7, #28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f023 0210 	bic.w	r2, r3, #16
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	031b      	lsls	r3, r3, #12
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	621a      	str	r2, [r3, #32]
}
 8002be8:	bf00      	nop
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f043 0307 	orr.w	r3, r3, #7
 8002c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	609a      	str	r2, [r3, #8]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b087      	sub	sp, #28
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	60b9      	str	r1, [r7, #8]
 8002c30:	607a      	str	r2, [r7, #4]
 8002c32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	021a      	lsls	r2, r3, #8
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	609a      	str	r2, [r3, #8]
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr

08002c64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b087      	sub	sp, #28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	f003 031f 	and.w	r3, r3, #31
 8002c76:	2201      	movs	r2, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1a      	ldr	r2, [r3, #32]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	401a      	ands	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	f003 031f 	and.w	r3, r3, #31
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	621a      	str	r2, [r3, #32]
}
 8002ca2:	bf00      	nop
 8002ca4:	371c      	adds	r7, #28
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	e046      	b.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a16      	ldr	r2, [pc, #88]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00e      	beq.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d10:	d009      	beq.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d004      	beq.n	8002d26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a10      	ldr	r2, [pc, #64]	; (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d10c      	bne.n	8002d40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40000400 	.word	0x40000400
 8002d64:	40000800 	.word	0x40000800

08002d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bc80      	pop	{r7}
 8002d78:	4770      	bx	lr

08002d7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <__libc_init_array>:
 8002d8c:	b570      	push	{r4, r5, r6, lr}
 8002d8e:	2600      	movs	r6, #0
 8002d90:	4d0c      	ldr	r5, [pc, #48]	; (8002dc4 <__libc_init_array+0x38>)
 8002d92:	4c0d      	ldr	r4, [pc, #52]	; (8002dc8 <__libc_init_array+0x3c>)
 8002d94:	1b64      	subs	r4, r4, r5
 8002d96:	10a4      	asrs	r4, r4, #2
 8002d98:	42a6      	cmp	r6, r4
 8002d9a:	d109      	bne.n	8002db0 <__libc_init_array+0x24>
 8002d9c:	f000 f822 	bl	8002de4 <_init>
 8002da0:	2600      	movs	r6, #0
 8002da2:	4d0a      	ldr	r5, [pc, #40]	; (8002dcc <__libc_init_array+0x40>)
 8002da4:	4c0a      	ldr	r4, [pc, #40]	; (8002dd0 <__libc_init_array+0x44>)
 8002da6:	1b64      	subs	r4, r4, r5
 8002da8:	10a4      	asrs	r4, r4, #2
 8002daa:	42a6      	cmp	r6, r4
 8002dac:	d105      	bne.n	8002dba <__libc_init_array+0x2e>
 8002dae:	bd70      	pop	{r4, r5, r6, pc}
 8002db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db4:	4798      	blx	r3
 8002db6:	3601      	adds	r6, #1
 8002db8:	e7ee      	b.n	8002d98 <__libc_init_array+0xc>
 8002dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dbe:	4798      	blx	r3
 8002dc0:	3601      	adds	r6, #1
 8002dc2:	e7f2      	b.n	8002daa <__libc_init_array+0x1e>
 8002dc4:	08002e34 	.word	0x08002e34
 8002dc8:	08002e34 	.word	0x08002e34
 8002dcc:	08002e34 	.word	0x08002e34
 8002dd0:	08002e38 	.word	0x08002e38

08002dd4 <memset>:
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	4402      	add	r2, r0
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d100      	bne.n	8002dde <memset+0xa>
 8002ddc:	4770      	bx	lr
 8002dde:	f803 1b01 	strb.w	r1, [r3], #1
 8002de2:	e7f9      	b.n	8002dd8 <memset+0x4>

08002de4 <_init>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	bf00      	nop
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr

08002df0 <_fini>:
 8002df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df2:	bf00      	nop
 8002df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df6:	bc08      	pop	{r3}
 8002df8:	469e      	mov	lr, r3
 8002dfa:	4770      	bx	lr
