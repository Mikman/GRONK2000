
Watchdog-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f08  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08004094  08004094  00014094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e4  080040e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ec  080040ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000000c  08004100  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004100  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011809  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c3  00000000  00000000  00031845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00033a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00034a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207cf  00000000  00000000  00035930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010220  00000000  00000000  000560ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c997c  00000000  00000000  0006631f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012fc9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043a0  00000000  00000000  0012fcf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800407c 	.word	0x0800407c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800407c 	.word	0x0800407c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fc7f 	bl	8000dca <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f81e 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f9ae 	bl	8000830 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d4:	f000 f97c 	bl	80007d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004d8:	f000 f92c 	bl	8000734 <MX_TIM2_Init>
  MX_CAN1_Init();
 80004dc:	f000 f898 	bl	8000610 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  TIM2->CNT = 0;
 80004e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e4:	2200      	movs	r2, #0
 80004e6:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_TIM_Base_Start_IT(&htim2);
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <main+0x38>)
 80004ea:	f002 fdeb 	bl	80030c4 <HAL_TIM_Base_Start_IT>
  can_init(&hcan1, &CanRxHeader, &CanTxHeader);
 80004ee:	4a04      	ldr	r2, [pc, #16]	; (8000500 <main+0x3c>)
 80004f0:	4904      	ldr	r1, [pc, #16]	; (8000504 <main+0x40>)
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <main+0x44>)
 80004f4:	f000 fb70 	bl	8000bd8 <can_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <main+0x34>
 80004fa:	bf00      	nop
 80004fc:	20000084 	.word	0x20000084
 8000500:	20000050 	.word	0x20000050
 8000504:	20000068 	.word	0x20000068
 8000508:	20000154 	.word	0x20000154

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b0ac      	sub	sp, #176	; 0xb0
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000516:	2244      	movs	r2, #68	; 0x44
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 fda6 	bl	800406c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2254      	movs	r2, #84	; 0x54
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 fd98 	bl	800406c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800053c:	f001 fbda 	bl	8001cf4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000540:	4b32      	ldr	r3, [pc, #200]	; (800060c <SystemClock_Config+0x100>)
 8000542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000546:	4a31      	ldr	r2, [pc, #196]	; (800060c <SystemClock_Config+0x100>)
 8000548:	f023 0318 	bic.w	r3, r3, #24
 800054c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000550:	2314      	movs	r3, #20
 8000552:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000564:	2360      	movs	r3, #96	; 0x60
 8000566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056a:	2302      	movs	r3, #2
 800056c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000570:	2301      	movs	r3, #1
 8000572:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000576:	2301      	movs	r3, #1
 8000578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 36;
 800057c:	2324      	movs	r3, #36	; 0x24
 800057e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000582:	2307      	movs	r3, #7
 8000584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058e:	2302      	movs	r3, #2
 8000590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000594:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000598:	4618      	mov	r0, r3
 800059a:	f001 fc1f 	bl	8001ddc <HAL_RCC_OscConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005a4:	f000 fa23 	bl	80009ee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a8:	230f      	movs	r3, #15
 80005aa:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ac:	2303      	movs	r3, #3
 80005ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005c0:	2104      	movs	r1, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 f82a 	bl	800261c <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005ce:	f000 fa0e 	bl	80009ee <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fa23 	bl	8002a28 <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80005e8:	f000 fa01 	bl	80009ee <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f0:	f001 fb9e 	bl	8001d30 <HAL_PWREx_ControlVoltageScaling>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005fa:	f000 f9f8 	bl	80009ee <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005fe:	f002 fc07 	bl	8002e10 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000602:	bf00      	nop
 8000604:	37b0      	adds	r7, #176	; 0xb0
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000

08000610 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	uint32_t ext_id = 0x00000000;                            // Den største værdi der kan være på MSB er 1
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
	    uint32_t mask = 0x0;
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
	    CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;            // Vi vælger at bruge mask mode
 800061e:	4b3f      	ldr	r3, [pc, #252]	; (800071c <MX_CAN1_Init+0x10c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
	    CanFilter.FilterIdHigh = (ext_id & 0x1FFFFFFF) >> 13; // (ext_id << 3) >> 16;                        // Da vi har 32 bit ID, er dette de 16 MSB af ID
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	0b5b      	lsrs	r3, r3, #13
 8000628:	b29b      	uxth	r3, r3
 800062a:	4a3c      	ldr	r2, [pc, #240]	; (800071c <MX_CAN1_Init+0x10c>)
 800062c:	6013      	str	r3, [r2, #0]
	    CanFilter.FilterIdLow =  (ext_id << 3) | CAN_ID_EXT;    // Da vi har 32 bit ID, er dette de 16 LSB af ID
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	f043 0304 	orr.w	r3, r3, #4
 8000636:	4a39      	ldr	r2, [pc, #228]	; (800071c <MX_CAN1_Init+0x10c>)
 8000638:	6053      	str	r3, [r2, #4]
	    CanFilter.FilterMaskIdHigh = (mask & 0x1FFFFFFF) >> 13;// << 5;                    // Maskens 16 MSB
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	0b5b      	lsrs	r3, r3, #13
 800063e:	b29b      	uxth	r3, r3
 8000640:	4a36      	ldr	r2, [pc, #216]	; (800071c <MX_CAN1_Init+0x10c>)
 8000642:	6093      	str	r3, [r2, #8]
	    CanFilter.FilterMaskIdLow = (mask << 3);// << 5 | 0x10;                    // Maskens 16 LSB
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	4a34      	ldr	r2, [pc, #208]	; (800071c <MX_CAN1_Init+0x10c>)
 800064a:	60d3      	str	r3, [r2, #12]
	    CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;        // ID er et 32 bit-tal
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <MX_CAN1_Init+0x10c>)
 800064e:	2201      	movs	r2, #1
 8000650:	61da      	str	r2, [r3, #28]
	    CanFilter.FilterActivation = ENABLE;                    // Vi aktiverer filteret
 8000652:	4b32      	ldr	r3, [pc, #200]	; (800071c <MX_CAN1_Init+0x10c>)
 8000654:	2201      	movs	r2, #1
 8000656:	621a      	str	r2, [r3, #32]
	    CanFilter.FilterBank = 0;                                // Vi vælger filter 0 ud af 14 mulige filtre
 8000658:	4b30      	ldr	r3, [pc, #192]	; (800071c <MX_CAN1_Init+0x10c>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
	    CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;    // Vi vælger FIFO0 til forskel for FIFO1
 800065e:	4b2f      	ldr	r3, [pc, #188]	; (800071c <MX_CAN1_Init+0x10c>)
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]

	    CanTxHeader.DLC = PACKAGE_SIZE;                        // Der kommer 8 byte som data i beskeden
 8000664:	4b2e      	ldr	r3, [pc, #184]	; (8000720 <MX_CAN1_Init+0x110>)
 8000666:	2208      	movs	r2, #8
 8000668:	611a      	str	r2, [r3, #16]
	    CanTxHeader.ExtId = 0x00000000;                        // 32 bit ID (29 er identifier)
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <MX_CAN1_Init+0x110>)
 800066c:	2200      	movs	r2, #0
 800066e:	605a      	str	r2, [r3, #4]
	    CanTxHeader.IDE = CAN_ID_EXT;                            // Vi har et extended ID = 32 bit til forskel fra standard på 16 bit (11 er identifier)
 8000670:	4b2b      	ldr	r3, [pc, #172]	; (8000720 <MX_CAN1_Init+0x110>)
 8000672:	2204      	movs	r2, #4
 8000674:	609a      	str	r2, [r3, #8]
	    CanTxHeader.RTR = CAN_RTR_DATA;                        // Vi sender data
 8000676:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <MX_CAN1_Init+0x110>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
	    CanTxHeader.TransmitGlobalTime = DISABLE;                // Der skal IKKE sendes et timestamp med hver besked
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_CAN1_Init+0x110>)
 800067e:	2200      	movs	r2, #0
 8000680:	751a      	strb	r2, [r3, #20]

	  CanRxHeader.DLC = PACKAGE_SIZE;
 8000682:	4b28      	ldr	r3, [pc, #160]	; (8000724 <MX_CAN1_Init+0x114>)
 8000684:	2208      	movs	r2, #8
 8000686:	611a      	str	r2, [r3, #16]
	  CanRxHeader.ExtId = 0x0;
 8000688:	4b26      	ldr	r3, [pc, #152]	; (8000724 <MX_CAN1_Init+0x114>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
	  CanRxHeader.IDE = CAN_ID_EXT;
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <MX_CAN1_Init+0x114>)
 8000690:	2204      	movs	r2, #4
 8000692:	609a      	str	r2, [r3, #8]
	  CanRxHeader.RTR = CAN_RTR_DATA;
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <MX_CAN1_Init+0x114>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
	  CanRxHeader.FilterMatchIndex = 0x00;
 800069a:	4b22      	ldr	r3, [pc, #136]	; (8000724 <MX_CAN1_Init+0x114>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]

  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
	__HAL_RCC_CAN1_CLK_ENABLE();
 80006a0:	4b21      	ldr	r3, [pc, #132]	; (8000728 <MX_CAN1_Init+0x118>)
 80006a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a4:	4a20      	ldr	r2, [pc, #128]	; (8000728 <MX_CAN1_Init+0x118>)
 80006a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006aa:	6593      	str	r3, [r2, #88]	; 0x58
 80006ac:	4b1e      	ldr	r3, [pc, #120]	; (8000728 <MX_CAN1_Init+0x118>)
 80006ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]


  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_CAN1_Init+0x11c>)
 80006ba:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <MX_CAN1_Init+0x120>)
 80006bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_CAN1_Init+0x11c>)
 80006c0:	2212      	movs	r2, #18
 80006c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_CAN1_Init+0x11c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_CAN1_Init+0x11c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_CAN1_Init+0x11c>)
 80006d2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80006d6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 80006d8:	4b14      	ldr	r3, [pc, #80]	; (800072c <MX_CAN1_Init+0x11c>)
 80006da:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80006de:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006e0:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_CAN1_Init+0x11c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006e6:	4b11      	ldr	r3, [pc, #68]	; (800072c <MX_CAN1_Init+0x11c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_CAN1_Init+0x11c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <MX_CAN1_Init+0x11c>)
 80006f4:	2201      	movs	r2, #1
 80006f6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <MX_CAN1_Init+0x11c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <MX_CAN1_Init+0x11c>)
 8000700:	2201      	movs	r2, #1
 8000702:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000704:	4809      	ldr	r0, [pc, #36]	; (800072c <MX_CAN1_Init+0x11c>)
 8000706:	f000 fbf9 	bl	8000efc <HAL_CAN_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_CAN1_Init+0x104>
  {
    Error_Handler();
 8000710:	f000 f96d 	bl	80009ee <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */


  /* USER CODE END CAN1_Init 2 */

}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000028 	.word	0x20000028
 8000720:	20000050 	.word	0x20000050
 8000724:	20000068 	.word	0x20000068
 8000728:	40021000 	.word	0x40021000
 800072c:	20000154 	.word	0x20000154
 8000730:	40006400 	.word	0x40006400

08000734 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b088      	sub	sp, #32
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800073a:	f107 0310 	add.w	r3, r7, #16
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_TIM2_Init+0x98>)
 8000754:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000758:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20000-1;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_TIM2_Init+0x98>)
 800075c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000760:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_TIM2_Init+0x98>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000-1;
 8000768:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_TIM2_Init+0x98>)
 800076a:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800076e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_TIM2_Init+0x98>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_TIM2_Init+0x98>)
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800077c:	4813      	ldr	r0, [pc, #76]	; (80007cc <MX_TIM2_Init+0x98>)
 800077e:	f002 fc49 	bl	8003014 <HAL_TIM_Base_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000788:	f000 f931 	bl	80009ee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800078c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000790:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000792:	f107 0310 	add.w	r3, r7, #16
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_TIM2_Init+0x98>)
 800079a:	f002 fe06 	bl	80033aa <HAL_TIM_ConfigClockSource>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80007a4:	f000 f923 	bl	80009ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_TIM2_Init+0x98>)
 80007b6:	f002 ffef 	bl	8003798 <HAL_TIMEx_MasterConfigSynchronization>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80007c0:	f000 f915 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3720      	adds	r7, #32
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000084 	.word	0x20000084

080007d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007d6:	4a15      	ldr	r2, [pc, #84]	; (800082c <MX_USART2_UART_Init+0x5c>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART2_UART_Init+0x58>)
 8000814:	f003 f844 	bl	80038a0 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 f8e6 	bl	80009ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000d0 	.word	0x200000d0
 800082c:	40004400 	.word	0x40004400

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b32      	ldr	r3, [pc, #200]	; (8000910 <MX_GPIO_Init+0xe0>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a31      	ldr	r2, [pc, #196]	; (8000910 <MX_GPIO_Init+0xe0>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b2f      	ldr	r3, [pc, #188]	; (8000910 <MX_GPIO_Init+0xe0>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <MX_GPIO_Init+0xe0>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a2b      	ldr	r2, [pc, #172]	; (8000910 <MX_GPIO_Init+0xe0>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b29      	ldr	r3, [pc, #164]	; (8000910 <MX_GPIO_Init+0xe0>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	4b26      	ldr	r3, [pc, #152]	; (8000910 <MX_GPIO_Init+0xe0>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a25      	ldr	r2, [pc, #148]	; (8000910 <MX_GPIO_Init+0xe0>)
 800087c:	f043 0302 	orr.w	r3, r3, #2
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b23      	ldr	r3, [pc, #140]	; (8000910 <MX_GPIO_Init+0xe0>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OBC_Reset_GPIO_Port, OBC_Reset_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2120      	movs	r1, #32
 8000892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000896:	f001 f9f1 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	2108      	movs	r1, #8
 800089e:	481d      	ldr	r0, [pc, #116]	; (8000914 <MX_GPIO_Init+0xe4>)
 80008a0:	f001 f9ec 	bl	8001c7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OBC_Reset_Pin */
  GPIO_InitStruct.Pin = OBC_Reset_Pin;
 80008a4:	2320      	movs	r3, #32
 80008a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OBC_Reset_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f001 f873 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008c2:	2302      	movs	r3, #2
 80008c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_GPIO_Init+0xe8>)
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	480f      	ldr	r0, [pc, #60]	; (8000914 <MX_GPIO_Init+0xe4>)
 80008d6:	f001 f867 	bl	80019a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80008da:	2308      	movs	r3, #8
 80008dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4619      	mov	r1, r3
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <MX_GPIO_Init+0xe4>)
 80008f2:	f001 f859 	bl	80019a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2101      	movs	r1, #1
 80008fa:	2007      	movs	r0, #7
 80008fc:	f001 f81d 	bl	800193a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000900:	2007      	movs	r0, #7
 8000902:	f001 f836 	bl	8001972 <HAL_NVIC_EnableIRQ>

}
 8000906:	bf00      	nop
 8000908:	3720      	adds	r7, #32
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000
 8000914:	48000400 	.word	0x48000400
 8000918:	10310000 	.word	0x10310000

0800091c <messageSplitter>:

/* USER CODE BEGIN 4 */
int messageSplitter(uint8_t *sourceArray, uint8_t *destinationArray, uint8_t position)
{
 800091c:	b480      	push	{r7}
 800091e:	b087      	sub	sp, #28
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	4613      	mov	r3, r2
 8000928:	71fb      	strb	r3, [r7, #7]



	for(int i=0 ; i < PACKAGE_SIZE; i++)
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	e00e      	b.n	800094e <messageSplitter+0x32>
	{
		*(destinationArray + i) = *(sourceArray + (position * 8) + i);
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	00db      	lsls	r3, r3, #3
 8000934:	461a      	mov	r2, r3
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	4413      	add	r3, r2
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	441a      	add	r2, r3
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	440b      	add	r3, r1
 8000944:	7812      	ldrb	r2, [r2, #0]
 8000946:	701a      	strb	r2, [r3, #0]
	for(int i=0 ; i < PACKAGE_SIZE; i++)
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	3301      	adds	r3, #1
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	2b07      	cmp	r3, #7
 8000952:	dded      	ble.n	8000930 <messageSplitter+0x14>


}
return 1;
 8000954:	2301      	movs	r3, #1
}
 8000956:	4618      	mov	r0, r3
 8000958:	371c      	adds	r7, #28
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr

08000962 <sendData>:


void sendData(CAN_HandleTypeDef *handler, uint32_t TxID, uint16_t numOfBytes, uint8_t *dataArray, CAN_TxHeaderTypeDef *transmitHeader) {
 8000962:	b580      	push	{r7, lr}
 8000964:	b088      	sub	sp, #32
 8000966:	af00      	add	r7, sp, #0
 8000968:	60f8      	str	r0, [r7, #12]
 800096a:	60b9      	str	r1, [r7, #8]
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4613      	mov	r3, r2
 8000970:	80fb      	strh	r3, [r7, #6]
	uint8_t dataToMB[PACKAGE_SIZE] = {0};
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
	uint32_t randoMailBox;
	transmitHeader->ExtId = TxID;
 800097a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	605a      	str	r2, [r3, #4]

if (numOfBytes % PACKAGE_SIZE == 0)
 8000980:	88fb      	ldrh	r3, [r7, #6]
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	b29b      	uxth	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d12c      	bne.n	80009e6 <sendData+0x84>
{
	for (int i = 0; i < numOfBytes/PACKAGE_SIZE; i++) {
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
 8000990:	e021      	b.n	80009d6 <sendData+0x74>
		while (HAL_CAN_GetTxMailboxesFreeLevel(handler) == 0) {}
 8000992:	bf00      	nop
 8000994:	68f8      	ldr	r0, [r7, #12]
 8000996:	f000 fc87 	bl	80012a8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d0f9      	beq.n	8000994 <sendData+0x32>
		if (messageSplitter(dataArray, dataToMB, i)) {
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	6838      	ldr	r0, [r7, #0]
 80009ac:	f7ff ffb6 	bl	800091c <messageSplitter>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d00c      	beq.n	80009d0 <sendData+0x6e>
			if (HAL_CAN_AddTxMessage(handler, transmitHeader, dataToMB, &randoMailBox) != HAL_OK) {
 80009b6:	f107 0310 	add.w	r3, r7, #16
 80009ba:	f107 0214 	add.w	r2, r7, #20
 80009be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f000 fb96 	bl	80010f2 <HAL_CAN_AddTxMessage>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <sendData+0x6e>
				Error_Handler();
 80009cc:	f000 f80f 	bl	80009ee <Error_Handler>
	for (int i = 0; i < numOfBytes/PACKAGE_SIZE; i++) {
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	3301      	adds	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	88fb      	ldrh	r3, [r7, #6]
 80009d8:	08db      	lsrs	r3, r3, #3
 80009da:	b29b      	uxth	r3, r3
 80009dc:	461a      	mov	r2, r3
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	4293      	cmp	r3, r2
 80009e2:	dbd6      	blt.n	8000992 <sendData+0x30>
 80009e4:	e000      	b.n	80009e8 <sendData+0x86>
			}
		}
	}

}
else {return;}
 80009e6:	bf00      	nop

}
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f2:	b672      	cpsid	i
}
 80009f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <HAL_MspInit+0x44>)
 8000a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a02:	4a0e      	ldr	r2, [pc, #56]	; (8000a3c <HAL_MspInit+0x44>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6613      	str	r3, [r2, #96]	; 0x60
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <HAL_MspInit+0x44>)
 8000a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_MspInit+0x44>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_MspInit+0x44>)
 8000a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a20:	6593      	str	r3, [r2, #88]	; 0x58
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_MspInit+0x44>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	603b      	str	r3, [r7, #0]
 8000a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08a      	sub	sp, #40	; 0x28
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a20      	ldr	r2, [pc, #128]	; (8000ae0 <HAL_CAN_MspInit+0xa0>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d139      	bne.n	8000ad6 <HAL_CAN_MspInit+0x96>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <HAL_CAN_MspInit+0xa4>)
 8000a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a66:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <HAL_CAN_MspInit+0xa4>)
 8000a68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <HAL_CAN_MspInit+0xa4>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <HAL_CAN_MspInit+0xa4>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a19      	ldr	r2, [pc, #100]	; (8000ae4 <HAL_CAN_MspInit+0xa4>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_CAN_MspInit+0xa4>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000aa4:	2309      	movs	r3, #9
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	4619      	mov	r1, r3
 8000aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab2:	f000 ff79 	bl	80019a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2013      	movs	r0, #19
 8000abc:	f000 ff3d 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ac0:	2013      	movs	r0, #19
 8000ac2:	f000 ff56 	bl	8001972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2014      	movs	r0, #20
 8000acc:	f000 ff35 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ad0:	2014      	movs	r0, #20
 8000ad2:	f000 ff4e 	bl	8001972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	; 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40006400 	.word	0x40006400
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af8:	d113      	bne.n	8000b22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_TIM_Base_MspInit+0x44>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <HAL_TIM_Base_MspInit+0x44>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6593      	str	r3, [r2, #88]	; 0x58
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_TIM_Base_MspInit+0x44>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2101      	movs	r1, #1
 8000b16:	201c      	movs	r0, #28
 8000b18:	f000 ff0f 	bl	800193a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b1c:	201c      	movs	r0, #28
 8000b1e:	f000 ff28 	bl	8001972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a20      	ldr	r2, [pc, #128]	; (8000bd0 <HAL_UART_MspInit+0xa0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d13a      	bne.n	8000bc8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b52:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <HAL_UART_MspInit+0xa4>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b56:	4a1f      	ldr	r2, [pc, #124]	; (8000bd4 <HAL_UART_MspInit+0xa4>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <HAL_UART_MspInit+0xa4>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <HAL_UART_MspInit+0xa4>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6e:	4a19      	ldr	r2, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0xa4>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <HAL_UART_MspInit+0xa4>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b82:	2304      	movs	r3, #4
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b92:	2307      	movs	r3, #7
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 0314 	add.w	r3, r7, #20
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba0:	f000 ff02 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc4:	f000 fef0 	bl	80019a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc8:	bf00      	nop
 8000bca:	3728      	adds	r7, #40	; 0x28
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <can_init>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void can_init(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *CANRX, CAN_TxHeaderTypeDef *CANTX){
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
	TxHeader = CANTX;
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <can_init+0x2c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
	RxHeader = CANRX;
 8000bea:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <can_init+0x30>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	6013      	str	r3, [r2, #0]
	can1 = hcan;
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <can_init+0x34>)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	20000180 	.word	0x20000180
 8000c08:	20000184 	.word	0x20000184
 8000c0c:	2000017c 	.word	0x2000017c

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f90a 	bl	8000e74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c68:	2002      	movs	r0, #2
 8000c6a:	f001 f81f 	bl	8001cac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  //Reset timeren bc signal from OBC
  htim2.Instance->CNT = 0;
 8000c6e:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <EXTI1_IRQHandler+0x18>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000084 	.word	0x20000084

08000c80 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <CAN1_TX_IRQHandler+0x10>)
 8000c86:	f000 fb44 	bl	8001312 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000154 	.word	0x20000154

08000c94 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c98:	4802      	ldr	r0, [pc, #8]	; (8000ca4 <CAN1_RX0_IRQHandler+0x10>)
 8000c9a:	f000 fb3a 	bl	8001312 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000154 	.word	0x20000154

08000ca8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cae:	4815      	ldr	r0, [pc, #84]	; (8000d04 <TIM2_IRQHandler+0x5c>)
 8000cb0:	f002 fa5c 	bl	800316c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //Write to CAN
  uint8_t fejlArray[8] = {1, 1, 1, 1, 1, 1, 1, 1, 1};
 8000cb4:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <TIM2_IRQHandler+0x60>)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cbc:	e883 0003 	stmia.w	r3, {r0, r1}
  sendData(can1,0xA, 8, fejlArray, TxHeader);
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <TIM2_IRQHandler+0x64>)
 8000cc2:	6818      	ldr	r0, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <TIM2_IRQHandler+0x68>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	463a      	mov	r2, r7
 8000cca:	9300      	str	r3, [sp, #0]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	2208      	movs	r2, #8
 8000cd0:	210a      	movs	r1, #10
 8000cd2:	f7ff fe46 	bl	8000962 <sendData>
  HAL_GPIO_WritePin(OBC_Reset_GPIO_Port, OBC_Reset_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2120      	movs	r1, #32
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cde:	f000 ffcd 	bl	8001c7c <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000ce2:	2014      	movs	r0, #20
 8000ce4:	f000 f8e6 	bl	8000eb4 <HAL_Delay>
  HAL_GPIO_WritePin(OBC_Reset_GPIO_Port, OBC_Reset_Pin, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2120      	movs	r1, #32
 8000cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf0:	f000 ffc4 	bl	8001c7c <HAL_GPIO_WritePin>
  htim2.Instance->CNT = 0;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <TIM2_IRQHandler+0x5c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000084 	.word	0x20000084
 8000d08:	08004094 	.word	0x08004094
 8000d0c:	2000017c 	.word	0x2000017c
 8000d10:	20000180 	.word	0x20000180

08000d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <SystemInit+0x5c>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <SystemInit+0x5c>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <SystemInit+0x60>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a11      	ldr	r2, [pc, #68]	; (8000d74 <SystemInit+0x60>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <SystemInit+0x60>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <SystemInit+0x60>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a0d      	ldr	r2, [pc, #52]	; (8000d74 <SystemInit+0x60>)
 8000d40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <SystemInit+0x60>)
 8000d4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <SystemInit+0x60>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <SystemInit+0x60>)
 8000d58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d5e:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <SystemInit+0x60>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000ed00 	.word	0xe000ed00
 8000d74:	40021000 	.word	0x40021000

08000d78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d7c:	f7ff ffca 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d82:	e003      	b.n	8000d8c <LoopCopyDataInit>

08000d84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d84:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d8a:	3104      	adds	r1, #4

08000d8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d8c:	480a      	ldr	r0, [pc, #40]	; (8000db8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d8e:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d94:	d3f6      	bcc.n	8000d84 <CopyDataInit>
	ldr	r2, =_sbss
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d98:	e002      	b.n	8000da0 <LoopFillZerobss>

08000d9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d9c:	f842 3b04 	str.w	r3, [r2], #4

08000da0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <LoopForever+0x16>)
	cmp	r2, r3
 8000da2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000da4:	d3f9      	bcc.n	8000d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000da6:	f003 f93d 	bl	8004024 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000daa:	f7ff fb8b 	bl	80004c4 <main>

08000dae <LoopForever>:

LoopForever:
    b LoopForever
 8000dae:	e7fe      	b.n	8000dae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000db0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000db4:	080040f4 	.word	0x080040f4
	ldr	r0, =_sdata
 8000db8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000dbc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000dc0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000dc4:	2000018c 	.word	0x2000018c

08000dc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dc8:	e7fe      	b.n	8000dc8 <ADC1_IRQHandler>

08000dca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 fda5 	bl	8001924 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f80e 	bl	8000dfc <HAL_InitTick>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	71fb      	strb	r3, [r7, #7]
 8000dea:	e001      	b.n	8000df0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dec:	f7ff fe04 	bl	80009f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df0:	79fb      	ldrb	r3, [r7, #7]
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_InitTick+0x6c>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d023      	beq.n	8000e58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_InitTick+0x70>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_InitTick+0x6c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4619      	mov	r1, r3
 8000e1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e26:	4618      	mov	r0, r3
 8000e28:	f000 fdb1 	bl	800198e <HAL_SYSTICK_Config>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10f      	bne.n	8000e52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b0f      	cmp	r3, #15
 8000e36:	d809      	bhi.n	8000e4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e40:	f000 fd7b 	bl	800193a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e44:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <HAL_InitTick+0x74>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e007      	b.n	8000e5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e004      	b.n	8000e5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	e001      	b.n	8000e5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	20000000 	.word	0x20000000
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	20000188 	.word	0x20000188

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000188 	.word	0x20000188

08000eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ebc:	f7ff ffee 	bl	8000e9c <HAL_GetTick>
 8000ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ecc:	d005      	beq.n	8000eda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_Delay+0x44>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eda:	bf00      	nop
 8000edc:	f7ff ffde 	bl	8000e9c <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	68fa      	ldr	r2, [r7, #12]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d8f7      	bhi.n	8000edc <HAL_Delay+0x28>
  {
  }
}
 8000eec:	bf00      	nop
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000008 	.word	0x20000008

08000efc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e0ed      	b.n	80010ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fd90 	bl	8000a40 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f022 0202 	bic.w	r2, r2, #2
 8000f2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f30:	f7ff ffb4 	bl	8000e9c <HAL_GetTick>
 8000f34:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f36:	e012      	b.n	8000f5e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f38:	f7ff ffb0 	bl	8000e9c <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b0a      	cmp	r3, #10
 8000f44:	d90b      	bls.n	8000f5e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2205      	movs	r2, #5
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e0c5      	b.n	80010ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e5      	bne.n	8000f38 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f042 0201 	orr.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f7c:	f7ff ff8e 	bl	8000e9c <HAL_GetTick>
 8000f80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f82:	e012      	b.n	8000faa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f84:	f7ff ff8a 	bl	8000e9c <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	2b0a      	cmp	r3, #10
 8000f90:	d90b      	bls.n	8000faa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2205      	movs	r2, #5
 8000fa2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e09f      	b.n	80010ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d0e5      	beq.n	8000f84 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7e1b      	ldrb	r3, [r3, #24]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d108      	bne.n	8000fd2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e007      	b.n	8000fe2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7e5b      	ldrb	r3, [r3, #25]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d108      	bne.n	8000ffc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	e007      	b.n	800100c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800100a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7e9b      	ldrb	r3, [r3, #26]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d108      	bne.n	8001026 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f042 0220 	orr.w	r2, r2, #32
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	e007      	b.n	8001036 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0220 	bic.w	r2, r2, #32
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7edb      	ldrb	r3, [r3, #27]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d108      	bne.n	8001050 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 0210 	bic.w	r2, r2, #16
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	e007      	b.n	8001060 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0210 	orr.w	r2, r2, #16
 800105e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	7f1b      	ldrb	r3, [r3, #28]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d108      	bne.n	800107a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f042 0208 	orr.w	r2, r2, #8
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	e007      	b.n	800108a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0208 	bic.w	r2, r2, #8
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	7f5b      	ldrb	r3, [r3, #29]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d108      	bne.n	80010a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f042 0204 	orr.w	r2, r2, #4
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	e007      	b.n	80010b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0204 	bic.w	r2, r2, #4
 80010b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	431a      	orrs	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	695b      	ldr	r3, [r3, #20]
 80010c8:	ea42 0103 	orr.w	r1, r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	1e5a      	subs	r2, r3, #1
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b089      	sub	sp, #36	; 0x24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001106:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001110:	7ffb      	ldrb	r3, [r7, #31]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d003      	beq.n	800111e <HAL_CAN_AddTxMessage+0x2c>
 8001116:	7ffb      	ldrb	r3, [r7, #31]
 8001118:	2b02      	cmp	r3, #2
 800111a:	f040 80b8 	bne.w	800128e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10a      	bne.n	800113e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800112e:	2b00      	cmp	r3, #0
 8001130:	d105      	bne.n	800113e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80a0 	beq.w	800127e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	0e1b      	lsrs	r3, r3, #24
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b02      	cmp	r3, #2
 800114c:	d907      	bls.n	800115e <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e09e      	b.n	800129c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800115e:	2201      	movs	r2, #1
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	409a      	lsls	r2, r3
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d10d      	bne.n	800118c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800117a:	68f9      	ldr	r1, [r7, #12]
 800117c:	6809      	ldr	r1, [r1, #0]
 800117e:	431a      	orrs	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3318      	adds	r3, #24
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	440b      	add	r3, r1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e00f      	b.n	80011ac <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001196:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800119c:	68f9      	ldr	r1, [r7, #12]
 800119e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011a0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3318      	adds	r3, #24
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	440b      	add	r3, r1
 80011aa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3318      	adds	r3, #24
 80011b8:	011b      	lsls	r3, r3, #4
 80011ba:	440b      	add	r3, r1
 80011bc:	3304      	adds	r3, #4
 80011be:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	7d1b      	ldrb	r3, [r3, #20]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d111      	bne.n	80011ec <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	3318      	adds	r3, #24
 80011d0:	011b      	lsls	r3, r3, #4
 80011d2:	4413      	add	r3, r2
 80011d4:	3304      	adds	r3, #4
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	6811      	ldr	r1, [r2, #0]
 80011dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3318      	adds	r3, #24
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	440b      	add	r3, r1
 80011e8:	3304      	adds	r3, #4
 80011ea:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3307      	adds	r3, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	061a      	lsls	r2, r3, #24
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3306      	adds	r3, #6
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	431a      	orrs	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3305      	adds	r3, #5
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	4313      	orrs	r3, r2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	3204      	adds	r2, #4
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	4610      	mov	r0, r2
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	6811      	ldr	r1, [r2, #0]
 8001214:	ea43 0200 	orr.w	r2, r3, r0
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	440b      	add	r3, r1
 800121e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001222:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3303      	adds	r3, #3
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	061a      	lsls	r2, r3, #24
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3302      	adds	r3, #2
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	041b      	lsls	r3, r3, #16
 8001234:	431a      	orrs	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3301      	adds	r3, #1
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	4313      	orrs	r3, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	4610      	mov	r0, r2
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	6811      	ldr	r1, [r2, #0]
 800124a:	ea43 0200 	orr.w	r2, r3, r0
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	440b      	add	r3, r1
 8001254:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001258:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3318      	adds	r3, #24
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	4413      	add	r3, r2
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	6811      	ldr	r1, [r2, #0]
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3318      	adds	r3, #24
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	440b      	add	r3, r1
 8001278:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	e00e      	b.n	800129c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e006      	b.n	800129c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001292:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
  }
}
 800129c:	4618      	mov	r0, r3
 800129e:	3724      	adds	r7, #36	; 0x24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ba:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80012bc:	7afb      	ldrb	r3, [r7, #11]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d002      	beq.n	80012c8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80012c2:	7afb      	ldrb	r3, [r7, #11]
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d11d      	bne.n	8001304 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3301      	adds	r3, #1
 80012da:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3301      	adds	r3, #1
 80012ee:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001304:	68fb      	ldr	r3, [r7, #12]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b08a      	sub	sp, #40	; 0x28
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b00      	cmp	r3, #0
 8001356:	d07c      	beq.n	8001452 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d023      	beq.n	80013aa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2201      	movs	r2, #1
 8001368:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f983 	bl	8001680 <HAL_CAN_TxMailbox0CompleteCallback>
 800137a:	e016      	b.n	80013aa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
 800138e:	e00c      	b.n	80013aa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	2b00      	cmp	r3, #0
 8001398:	d004      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
 80013a2:	e002      	b.n	80013aa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f989 	bl	80016bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d024      	beq.n	80013fe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d003      	beq.n	80013d0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f963 	bl	8001694 <HAL_CAN_TxMailbox1CompleteCallback>
 80013ce:	e016      	b.n	80013fe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d004      	beq.n	80013e4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
 80013e2:	e00c      	b.n	80013fe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d004      	beq.n	80013f8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
 80013f6:	e002      	b.n	80013fe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f969 	bl	80016d0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013fe:	69bb      	ldr	r3, [r7, #24]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d024      	beq.n	8001452 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001410:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f943 	bl	80016a8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001422:	e016      	b.n	8001452 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d004      	beq.n	8001438 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
 8001436:	e00c      	b.n	8001452 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d004      	beq.n	800144c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
 800144a:	e002      	b.n	8001452 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f949 	bl	80016e4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	2b00      	cmp	r3, #0
 800145a:	d00c      	beq.n	8001476 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	2b00      	cmp	r3, #0
 8001464:	d007      	beq.n	8001476 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2210      	movs	r2, #16
 8001474:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001476:	6a3b      	ldr	r3, [r7, #32]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2208      	movs	r2, #8
 8001490:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f93a 	bl	800170c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d009      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d002      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 f921 	bl	80016f8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00c      	beq.n	80014da <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d007      	beq.n	80014da <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2210      	movs	r2, #16
 80014d8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d00b      	beq.n	80014fc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d006      	beq.n	80014fc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2208      	movs	r2, #8
 80014f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 f91c 	bl	8001734 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	2b00      	cmp	r3, #0
 8001504:	d009      	beq.n	800151a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	691b      	ldr	r3, [r3, #16]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f903 	bl	8001720 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800151a:	6a3b      	ldr	r3, [r7, #32]
 800151c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00b      	beq.n	800153c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2210      	movs	r2, #16
 8001534:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f906 	bl	8001748 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	f003 0308 	and.w	r3, r3, #8
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2208      	movs	r2, #8
 8001556:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f8ff 	bl	800175c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d07b      	beq.n	8001660 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	d072      	beq.n	8001658 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001572:	6a3b      	ldr	r3, [r7, #32]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001594:	2b00      	cmp	r3, #0
 8001596:	d008      	beq.n	80015aa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015aa:	6a3b      	ldr	r3, [r7, #32]
 80015ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d008      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	f043 0304 	orr.w	r3, r3, #4
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d043      	beq.n	8001658 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d03e      	beq.n	8001658 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80015e0:	2b60      	cmp	r3, #96	; 0x60
 80015e2:	d02b      	beq.n	800163c <HAL_CAN_IRQHandler+0x32a>
 80015e4:	2b60      	cmp	r3, #96	; 0x60
 80015e6:	d82e      	bhi.n	8001646 <HAL_CAN_IRQHandler+0x334>
 80015e8:	2b50      	cmp	r3, #80	; 0x50
 80015ea:	d022      	beq.n	8001632 <HAL_CAN_IRQHandler+0x320>
 80015ec:	2b50      	cmp	r3, #80	; 0x50
 80015ee:	d82a      	bhi.n	8001646 <HAL_CAN_IRQHandler+0x334>
 80015f0:	2b40      	cmp	r3, #64	; 0x40
 80015f2:	d019      	beq.n	8001628 <HAL_CAN_IRQHandler+0x316>
 80015f4:	2b40      	cmp	r3, #64	; 0x40
 80015f6:	d826      	bhi.n	8001646 <HAL_CAN_IRQHandler+0x334>
 80015f8:	2b30      	cmp	r3, #48	; 0x30
 80015fa:	d010      	beq.n	800161e <HAL_CAN_IRQHandler+0x30c>
 80015fc:	2b30      	cmp	r3, #48	; 0x30
 80015fe:	d822      	bhi.n	8001646 <HAL_CAN_IRQHandler+0x334>
 8001600:	2b10      	cmp	r3, #16
 8001602:	d002      	beq.n	800160a <HAL_CAN_IRQHandler+0x2f8>
 8001604:	2b20      	cmp	r3, #32
 8001606:	d005      	beq.n	8001614 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001608:	e01d      	b.n	8001646 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	f043 0308 	orr.w	r3, r3, #8
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001612:	e019      	b.n	8001648 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	f043 0310 	orr.w	r3, r3, #16
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800161c:	e014      	b.n	8001648 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	f043 0320 	orr.w	r3, r3, #32
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001626:	e00f      	b.n	8001648 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001630:	e00a      	b.n	8001648 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800163a:	e005      	b.n	8001648 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001644:	e000      	b.n	8001648 <HAL_CAN_IRQHandler+0x336>
            break;
 8001646:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001656:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2204      	movs	r2, #4
 800165e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	2b00      	cmp	r3, #0
 8001664:	d008      	beq.n	8001678 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f87c 	bl	8001770 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001678:	bf00      	nop
 800167a:	3728      	adds	r7, #40	; 0x28
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001794:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a0:	4013      	ands	r3, r2
 80017a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017b6:	4a04      	ldr	r2, [pc, #16]	; (80017c8 <__NVIC_SetPriorityGrouping+0x44>)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	60d3      	str	r3, [r2, #12]
}
 80017bc:	bf00      	nop
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <__NVIC_GetPriorityGrouping+0x18>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	f003 0307 	and.w	r3, r3, #7
}
 80017da:	4618      	mov	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db0b      	blt.n	8001812 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	f003 021f 	and.w	r2, r3, #31
 8001800:	4907      	ldr	r1, [pc, #28]	; (8001820 <__NVIC_EnableIRQ+0x38>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	095b      	lsrs	r3, r3, #5
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	db0a      	blt.n	800184e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <__NVIC_SetPriority+0x4c>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	0112      	lsls	r2, r2, #4
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	440b      	add	r3, r1
 8001848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184c:	e00a      	b.n	8001864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4908      	ldr	r1, [pc, #32]	; (8001874 <__NVIC_SetPriority+0x50>)
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	3b04      	subs	r3, #4
 800185c:	0112      	lsls	r2, r2, #4
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	440b      	add	r3, r1
 8001862:	761a      	strb	r2, [r3, #24]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000e100 	.word	0xe000e100
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	43da      	mvns	r2, r3
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	401a      	ands	r2, r3
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ca:	43d9      	mvns	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	4313      	orrs	r3, r2
         );
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3724      	adds	r7, #36	; 0x24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3b01      	subs	r3, #1
 80018ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f0:	d301      	bcc.n	80018f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00f      	b.n	8001916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <SysTick_Config+0x40>)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fe:	210f      	movs	r1, #15
 8001900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001904:	f7ff ff8e 	bl	8001824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001908:	4b05      	ldr	r3, [pc, #20]	; (8001920 <SysTick_Config+0x40>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190e:	4b04      	ldr	r3, [pc, #16]	; (8001920 <SysTick_Config+0x40>)
 8001910:	2207      	movs	r2, #7
 8001912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	e000e010 	.word	0xe000e010

08001924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	f7ff ff29 	bl	8001784 <__NVIC_SetPriorityGrouping>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b086      	sub	sp, #24
 800193e:	af00      	add	r7, sp, #0
 8001940:	4603      	mov	r3, r0
 8001942:	60b9      	str	r1, [r7, #8]
 8001944:	607a      	str	r2, [r7, #4]
 8001946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001948:	2300      	movs	r3, #0
 800194a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800194c:	f7ff ff3e 	bl	80017cc <__NVIC_GetPriorityGrouping>
 8001950:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	68b9      	ldr	r1, [r7, #8]
 8001956:	6978      	ldr	r0, [r7, #20]
 8001958:	f7ff ff8e 	bl	8001878 <NVIC_EncodePriority>
 800195c:	4602      	mov	r2, r0
 800195e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff5d 	bl	8001824 <__NVIC_SetPriority>
}
 800196a:	bf00      	nop
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	4603      	mov	r3, r0
 800197a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff31 	bl	80017e8 <__NVIC_EnableIRQ>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffa2 	bl	80018e0 <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	e148      	b.n	8001c4a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 813a 	beq.w	8001c44 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d00b      	beq.n	80019f0 <HAL_GPIO_Init+0x48>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	d007      	beq.n	80019f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019e4:	2b11      	cmp	r3, #17
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b12      	cmp	r3, #18
 80019ee:	d130      	bne.n	8001a52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	2203      	movs	r2, #3
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68da      	ldr	r2, [r3, #12]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a26:	2201      	movs	r2, #1
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	091b      	lsrs	r3, r3, #4
 8001a3c:	f003 0201 	and.w	r2, r3, #1
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	005b      	lsls	r3, r3, #1
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0xea>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b12      	cmp	r3, #18
 8001a90:	d123      	bne.n	8001ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	08da      	lsrs	r2, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	3208      	adds	r2, #8
 8001a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	6939      	ldr	r1, [r7, #16]
 8001ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0203 	and.w	r2, r3, #3
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8094 	beq.w	8001c44 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1c:	4b52      	ldr	r3, [pc, #328]	; (8001c68 <HAL_GPIO_Init+0x2c0>)
 8001b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b20:	4a51      	ldr	r2, [pc, #324]	; (8001c68 <HAL_GPIO_Init+0x2c0>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6613      	str	r3, [r2, #96]	; 0x60
 8001b28:	4b4f      	ldr	r3, [pc, #316]	; (8001c68 <HAL_GPIO_Init+0x2c0>)
 8001b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b34:	4a4d      	ldr	r2, [pc, #308]	; (8001c6c <HAL_GPIO_Init+0x2c4>)
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	089b      	lsrs	r3, r3, #2
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b5e:	d00d      	beq.n	8001b7c <HAL_GPIO_Init+0x1d4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a43      	ldr	r2, [pc, #268]	; (8001c70 <HAL_GPIO_Init+0x2c8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d007      	beq.n	8001b78 <HAL_GPIO_Init+0x1d0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a42      	ldr	r2, [pc, #264]	; (8001c74 <HAL_GPIO_Init+0x2cc>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <HAL_GPIO_Init+0x1cc>
 8001b70:	2302      	movs	r3, #2
 8001b72:	e004      	b.n	8001b7e <HAL_GPIO_Init+0x1d6>
 8001b74:	2307      	movs	r3, #7
 8001b76:	e002      	b.n	8001b7e <HAL_GPIO_Init+0x1d6>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_GPIO_Init+0x1d6>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	f002 0203 	and.w	r2, r2, #3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4093      	lsls	r3, r2
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b8e:	4937      	ldr	r1, [pc, #220]	; (8001c6c <HAL_GPIO_Init+0x2c4>)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b9c:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bc0:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001bc6:	4b2c      	ldr	r3, [pc, #176]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bea:	4a23      	ldr	r2, [pc, #140]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c14:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <HAL_GPIO_Init+0x2d0>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f47f aeaf 	bne.w	80019b8 <HAL_GPIO_Init+0x10>
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	48000400 	.word	0x48000400
 8001c74:	48000800 	.word	0x48000800
 8001c78:	40010400 	.word	0x40010400

08001c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	807b      	strh	r3, [r7, #2]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c8c:	787b      	ldrb	r3, [r7, #1]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c92:	887a      	ldrh	r2, [r7, #2]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c9a:	887a      	ldrh	r2, [r7, #2]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	88fb      	ldrh	r3, [r7, #6]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 f806 	bl	8001cdc <HAL_GPIO_EXTI_Callback>
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40010400 	.word	0x40010400

08001cdc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	6013      	str	r3, [r2, #0]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40007000 	.word	0x40007000

08001d14 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <HAL_PWREx_GetVoltageRange+0x18>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40007000 	.word	0x40007000

08001d30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d3e:	d130      	bne.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4c:	d038      	beq.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d56:	4a1e      	ldr	r2, [pc, #120]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2232      	movs	r2, #50	; 0x32
 8001d64:	fb02 f303 	mul.w	r3, r2, r3
 8001d68:	4a1b      	ldr	r2, [pc, #108]	; (8001dd8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0c9b      	lsrs	r3, r3, #18
 8001d70:	3301      	adds	r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d74:	e002      	b.n	8001d7c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d88:	d102      	bne.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f2      	bne.n	8001d76 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d9c:	d110      	bne.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e00f      	b.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001da2:	4b0b      	ldr	r3, [pc, #44]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dae:	d007      	beq.n	8001dc0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001db0:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001db8:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001dba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dbe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40007000 	.word	0x40007000
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	431bde83 	.word	0x431bde83

08001ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d102      	bne.n	8001df0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f000 bc11 	b.w	8002612 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df0:	4ba0      	ldr	r3, [pc, #640]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 030c 	and.w	r3, r3, #12
 8001df8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dfa:	4b9e      	ldr	r3, [pc, #632]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0310 	and.w	r3, r3, #16
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 80e4 	beq.w	8001fda <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_RCC_OscConfig+0x4c>
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	f040 808b 	bne.w	8001f36 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	f040 8087 	bne.w	8001f36 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e28:	4b92      	ldr	r3, [pc, #584]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d005      	beq.n	8001e40 <HAL_RCC_OscConfig+0x64>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e3e8      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a1a      	ldr	r2, [r3, #32]
 8001e44:	4b8b      	ldr	r3, [pc, #556]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d004      	beq.n	8001e5a <HAL_RCC_OscConfig+0x7e>
 8001e50:	4b88      	ldr	r3, [pc, #544]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e58:	e005      	b.n	8001e66 <HAL_RCC_OscConfig+0x8a>
 8001e5a:	4b86      	ldr	r3, [pc, #536]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d223      	bcs.n	8001eb2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f000 fd7a 	bl	8002968 <RCC_SetFlashLatencyFromMSIRange>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e3c9      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e7e:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7c      	ldr	r2, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001e84:	f043 0308 	orr.w	r3, r3, #8
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b7a      	ldr	r3, [pc, #488]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4977      	ldr	r1, [pc, #476]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e9c:	4b75      	ldr	r3, [pc, #468]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	021b      	lsls	r3, r3, #8
 8001eaa:	4972      	ldr	r1, [pc, #456]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	604b      	str	r3, [r1, #4]
 8001eb0:	e025      	b.n	8001efe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb2:	4b70      	ldr	r3, [pc, #448]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a6f      	ldr	r2, [pc, #444]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001eb8:	f043 0308 	orr.w	r3, r3, #8
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b6d      	ldr	r3, [pc, #436]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	496a      	ldr	r1, [pc, #424]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ed0:	4b68      	ldr	r3, [pc, #416]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	4965      	ldr	r1, [pc, #404]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fd3a 	bl	8002968 <RCC_SetFlashLatencyFromMSIRange>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e389      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001efe:	f000 fc6f 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8001f02:	4602      	mov	r2, r0
 8001f04:	4b5b      	ldr	r3, [pc, #364]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	495a      	ldr	r1, [pc, #360]	; (8002078 <HAL_RCC_OscConfig+0x29c>)
 8001f10:	5ccb      	ldrb	r3, [r1, r3]
 8001f12:	f003 031f 	and.w	r3, r3, #31
 8001f16:	fa22 f303 	lsr.w	r3, r2, r3
 8001f1a:	4a58      	ldr	r2, [pc, #352]	; (800207c <HAL_RCC_OscConfig+0x2a0>)
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001f1e:	4b58      	ldr	r3, [pc, #352]	; (8002080 <HAL_RCC_OscConfig+0x2a4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe ff6a 	bl	8000dfc <HAL_InitTick>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d052      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f32:	7bfb      	ldrb	r3, [r7, #15]
 8001f34:	e36d      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d032      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f3e:	4b4d      	ldr	r3, [pc, #308]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a4c      	ldr	r2, [pc, #304]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f4a:	f7fe ffa7 	bl	8000e9c <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f52:	f7fe ffa3 	bl	8000e9c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e356      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f64:	4b43      	ldr	r3, [pc, #268]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f70:	4b40      	ldr	r3, [pc, #256]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a3f      	ldr	r2, [pc, #252]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001f76:	f043 0308 	orr.w	r3, r3, #8
 8001f7a:	6013      	str	r3, [r2, #0]
 8001f7c:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	493a      	ldr	r1, [pc, #232]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	021b      	lsls	r3, r3, #8
 8001f9c:	4935      	ldr	r1, [pc, #212]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	604b      	str	r3, [r1, #4]
 8001fa2:	e01a      	b.n	8001fda <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fa4:	4b33      	ldr	r3, [pc, #204]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a32      	ldr	r2, [pc, #200]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fb0:	f7fe ff74 	bl	8000e9c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fb8:	f7fe ff70 	bl	8000e9c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e323      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1dc>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d073      	beq.n	80020ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x21c>
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d10e      	bne.n	8002010 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d10b      	bne.n	8002010 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d063      	beq.n	80020cc <HAL_RCC_OscConfig+0x2f0>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d15f      	bne.n	80020cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e300      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d106      	bne.n	8002028 <HAL_RCC_OscConfig+0x24c>
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a15      	ldr	r2, [pc, #84]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e01d      	b.n	8002064 <HAL_RCC_OscConfig+0x288>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002030:	d10c      	bne.n	800204c <HAL_RCC_OscConfig+0x270>
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8002038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a0c      	ldr	r2, [pc, #48]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	e00b      	b.n	8002064 <HAL_RCC_OscConfig+0x288>
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 8002052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002056:	6013      	str	r3, [r2, #0]
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a05      	ldr	r2, [pc, #20]	; (8002074 <HAL_RCC_OscConfig+0x298>)
 800205e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01b      	beq.n	80020a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7fe ff16 	bl	8000e9c <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002072:	e010      	b.n	8002096 <HAL_RCC_OscConfig+0x2ba>
 8002074:	40021000 	.word	0x40021000
 8002078:	0800409c 	.word	0x0800409c
 800207c:	20000000 	.word	0x20000000
 8002080:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7fe ff0a 	bl	8000e9c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e2bd      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002096:	4baf      	ldr	r3, [pc, #700]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x2a8>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7fe fefa 	bl	8000e9c <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7fe fef6 	bl	8000e9c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e2a9      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020be:	4ba5      	ldr	r3, [pc, #660]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x2d0>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d060      	beq.n	800219c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d005      	beq.n	80020ec <HAL_RCC_OscConfig+0x310>
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d119      	bne.n	800211a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d116      	bne.n	800211a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020ec:	4b99      	ldr	r3, [pc, #612]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_RCC_OscConfig+0x328>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e286      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002104:	4b93      	ldr	r3, [pc, #588]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	4990      	ldr	r1, [pc, #576]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002118:	e040      	b.n	800219c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d023      	beq.n	800216a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002122:	4b8c      	ldr	r3, [pc, #560]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a8b      	ldr	r2, [pc, #556]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7fe feb5 	bl	8000e9c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002136:	f7fe feb1 	bl	8000e9c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e264      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002148:	4b82      	ldr	r3, [pc, #520]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	4b7f      	ldr	r3, [pc, #508]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	061b      	lsls	r3, r3, #24
 8002162:	497c      	ldr	r1, [pc, #496]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002164:	4313      	orrs	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
 8002168:	e018      	b.n	800219c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216a:	4b7a      	ldr	r3, [pc, #488]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a79      	ldr	r2, [pc, #484]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002170:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002176:	f7fe fe91 	bl	8000e9c <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800217e:	f7fe fe8d 	bl	8000e9c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e240      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002190:	4b70      	ldr	r3, [pc, #448]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d03c      	beq.n	8002222 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01c      	beq.n	80021ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021b0:	4b68      	ldr	r3, [pc, #416]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80021b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021b6:	4a67      	ldr	r2, [pc, #412]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7fe fe6c 	bl	8000e9c <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c8:	f7fe fe68 	bl	8000e9c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e21b      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021da:	4b5e      	ldr	r3, [pc, #376]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80021dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0ef      	beq.n	80021c8 <HAL_RCC_OscConfig+0x3ec>
 80021e8:	e01b      	b.n	8002222 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ea:	4b5a      	ldr	r3, [pc, #360]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80021ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f0:	4a58      	ldr	r2, [pc, #352]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80021f2:	f023 0301 	bic.w	r3, r3, #1
 80021f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fa:	f7fe fe4f 	bl	8000e9c <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002200:	e008      	b.n	8002214 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002202:	f7fe fe4b 	bl	8000e9c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e1fe      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002214:	4b4f      	ldr	r3, [pc, #316]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d1ef      	bne.n	8002202 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0304 	and.w	r3, r3, #4
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 80a6 	beq.w	800237c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002234:	4b47      	ldr	r3, [pc, #284]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10d      	bne.n	800225c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4b44      	ldr	r3, [pc, #272]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	4a43      	ldr	r2, [pc, #268]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224a:	6593      	str	r3, [r2, #88]	; 0x58
 800224c:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002258:	2301      	movs	r3, #1
 800225a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225c:	4b3e      	ldr	r3, [pc, #248]	; (8002358 <HAL_RCC_OscConfig+0x57c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d118      	bne.n	800229a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002268:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <HAL_RCC_OscConfig+0x57c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a3a      	ldr	r2, [pc, #232]	; (8002358 <HAL_RCC_OscConfig+0x57c>)
 800226e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002272:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002274:	f7fe fe12 	bl	8000e9c <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800227c:	f7fe fe0e 	bl	8000e9c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e1c1      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800228e:	4b32      	ldr	r3, [pc, #200]	; (8002358 <HAL_RCC_OscConfig+0x57c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d108      	bne.n	80022b4 <HAL_RCC_OscConfig+0x4d8>
 80022a2:	4b2c      	ldr	r3, [pc, #176]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	4a2a      	ldr	r2, [pc, #168]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022b2:	e024      	b.n	80022fe <HAL_RCC_OscConfig+0x522>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b05      	cmp	r3, #5
 80022ba:	d110      	bne.n	80022de <HAL_RCC_OscConfig+0x502>
 80022bc:	4b25      	ldr	r3, [pc, #148]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80022be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c2:	4a24      	ldr	r2, [pc, #144]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80022ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d2:	4a20      	ldr	r2, [pc, #128]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022dc:	e00f      	b.n	80022fe <HAL_RCC_OscConfig+0x522>
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e4:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	4a17      	ldr	r2, [pc, #92]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 80022f6:	f023 0304 	bic.w	r3, r3, #4
 80022fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d016      	beq.n	8002334 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7fe fdc9 	bl	8000e9c <HAL_GetTick>
 800230a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800230c:	e00a      	b.n	8002324 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f7fe fdc5 	bl	8000e9c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f241 3288 	movw	r2, #5000	; 0x1388
 800231c:	4293      	cmp	r3, r2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e176      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_OscConfig+0x578>)
 8002326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0ed      	beq.n	800230e <HAL_RCC_OscConfig+0x532>
 8002332:	e01a      	b.n	800236a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe fdb2 	bl	8000e9c <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800233a:	e00f      	b.n	800235c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fdae 	bl	8000e9c <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	f241 3288 	movw	r2, #5000	; 0x1388
 800234a:	4293      	cmp	r3, r2
 800234c:	d906      	bls.n	800235c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e15f      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
 8002352:	bf00      	nop
 8002354:	40021000 	.word	0x40021000
 8002358:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800235c:	4baa      	ldr	r3, [pc, #680]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1e8      	bne.n	800233c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800236a:	7ffb      	ldrb	r3, [r7, #31]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d105      	bne.n	800237c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002370:	4ba5      	ldr	r3, [pc, #660]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	4aa4      	ldr	r2, [pc, #656]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800237a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b00      	cmp	r3, #0
 8002386:	d03c      	beq.n	8002402 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01c      	beq.n	80023ca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002390:	4b9d      	ldr	r3, [pc, #628]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002392:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002396:	4a9c      	ldr	r2, [pc, #624]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a0:	f7fe fd7c 	bl	8000e9c <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023a8:	f7fe fd78 	bl	8000e9c <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e12b      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023ba:	4b93      	ldr	r3, [pc, #588]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80023bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ef      	beq.n	80023a8 <HAL_RCC_OscConfig+0x5cc>
 80023c8:	e01b      	b.n	8002402 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023ca:	4b8f      	ldr	r3, [pc, #572]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80023cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023d0:	4a8d      	ldr	r2, [pc, #564]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80023d2:	f023 0301 	bic.w	r3, r3, #1
 80023d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023da:	f7fe fd5f 	bl	8000e9c <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023e2:	f7fe fd5b 	bl	8000e9c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e10e      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023f4:	4b84      	ldr	r3, [pc, #528]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80023f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ef      	bne.n	80023e2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8102 	beq.w	8002610 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	2b02      	cmp	r3, #2
 8002412:	f040 80c5 	bne.w	80025a0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002416:	4b7c      	ldr	r3, [pc, #496]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f003 0203 	and.w	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002426:	429a      	cmp	r2, r3
 8002428:	d12c      	bne.n	8002484 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	3b01      	subs	r3, #1
 8002436:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d123      	bne.n	8002484 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002446:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002448:	429a      	cmp	r2, r3
 800244a:	d11b      	bne.n	8002484 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d113      	bne.n	8002484 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	085b      	lsrs	r3, r3, #1
 8002468:	3b01      	subs	r3, #1
 800246a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d109      	bne.n	8002484 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	3b01      	subs	r3, #1
 800247e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002480:	429a      	cmp	r2, r3
 8002482:	d067      	beq.n	8002554 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d062      	beq.n	8002550 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800248a:	4b5f      	ldr	r3, [pc, #380]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0bb      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800249a:	4b5b      	ldr	r3, [pc, #364]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a5a      	ldr	r2, [pc, #360]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80024a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024a6:	f7fe fcf9 	bl	8000e9c <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ae:	f7fe fcf5 	bl	8000e9c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0a8      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c0:	4b51      	ldr	r3, [pc, #324]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f0      	bne.n	80024ae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024cc:	4b4e      	ldr	r3, [pc, #312]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	4b4e      	ldr	r3, [pc, #312]	; (800260c <HAL_RCC_OscConfig+0x830>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024dc:	3a01      	subs	r2, #1
 80024de:	0112      	lsls	r2, r2, #4
 80024e0:	4311      	orrs	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024e6:	0212      	lsls	r2, r2, #8
 80024e8:	4311      	orrs	r1, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ee:	0852      	lsrs	r2, r2, #1
 80024f0:	3a01      	subs	r2, #1
 80024f2:	0552      	lsls	r2, r2, #21
 80024f4:	4311      	orrs	r1, r2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024fa:	0852      	lsrs	r2, r2, #1
 80024fc:	3a01      	subs	r2, #1
 80024fe:	0652      	lsls	r2, r2, #25
 8002500:	4311      	orrs	r1, r2
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002506:	06d2      	lsls	r2, r2, #27
 8002508:	430a      	orrs	r2, r1
 800250a:	493f      	ldr	r1, [pc, #252]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002510:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a3c      	ldr	r2, [pc, #240]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002516:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800251c:	4b3a      	ldr	r3, [pc, #232]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4a39      	ldr	r2, [pc, #228]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002526:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002528:	f7fe fcb8 	bl	8000e9c <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002530:	f7fe fcb4 	bl	8000e9c <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e067      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002542:	4b31      	ldr	r3, [pc, #196]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0f0      	beq.n	8002530 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800254e:	e05f      	b.n	8002610 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e05e      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002554:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d157      	bne.n	8002610 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002560:	4b29      	ldr	r3, [pc, #164]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a28      	ldr	r2, [pc, #160]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800256c:	4b26      	ldr	r3, [pc, #152]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a25      	ldr	r2, [pc, #148]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002572:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002576:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002578:	f7fe fc90 	bl	8000e9c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002580:	f7fe fc8c 	bl	8000e9c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e03f      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x7a4>
 800259e:	e037      	b.n	8002610 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2b0c      	cmp	r3, #12
 80025a4:	d02d      	beq.n	8002602 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b18      	ldr	r3, [pc, #96]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80025ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b2:	4b15      	ldr	r3, [pc, #84]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d105      	bne.n	80025ca <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80025be:	4b12      	ldr	r3, [pc, #72]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	4a11      	ldr	r2, [pc, #68]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80025c4:	f023 0303 	bic.w	r3, r3, #3
 80025c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80025ca:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	4a0e      	ldr	r2, [pc, #56]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80025d0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80025d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7fe fc5f 	bl	8000e9c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e2:	f7fe fc5b 	bl	8000e9c <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e00e      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <HAL_RCC_OscConfig+0x82c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f0      	bne.n	80025e2 <HAL_RCC_OscConfig+0x806>
 8002600:	e006      	b.n	8002610 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e005      	b.n	8002612 <HAL_RCC_OscConfig+0x836>
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop

0800261c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0c8      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d910      	bls.n	8002660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263e:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 0207 	bic.w	r2, r3, #7
 8002646:	4961      	ldr	r1, [pc, #388]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264e:	4b5f      	ldr	r3, [pc, #380]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	429a      	cmp	r2, r3
 800265a:	d001      	beq.n	8002660 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0b0      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d04c      	beq.n	8002706 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d107      	bne.n	8002684 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002674:	4b56      	ldr	r3, [pc, #344]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d121      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e09e      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d107      	bne.n	800269c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800268c:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d115      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e092      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a4:	4b4a      	ldr	r3, [pc, #296]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e086      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b4:	4b46      	ldr	r3, [pc, #280]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e07e      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026c4:	4b42      	ldr	r3, [pc, #264]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f023 0203 	bic.w	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	493f      	ldr	r1, [pc, #252]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d6:	f7fe fbe1 	bl	8000e9c <HAL_GetTick>
 80026da:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026de:	f7fe fbdd 	bl	8000e9c <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e066      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f4:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 020c 	and.w	r2, r3, #12
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	429a      	cmp	r2, r3
 8002704:	d1eb      	bne.n	80026de <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002712:	4b2f      	ldr	r3, [pc, #188]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	492c      	ldr	r1, [pc, #176]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002720:	4313      	orrs	r3, r2
 8002722:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002724:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d210      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002732:	4b26      	ldr	r3, [pc, #152]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 0207 	bic.w	r2, r3, #7
 800273a:	4924      	ldr	r1, [pc, #144]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_ClockConfig+0x1b0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e036      	b.n	80027c2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4918      	ldr	r1, [pc, #96]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4910      	ldr	r1, [pc, #64]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002792:	f000 f825 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8002796:	4602      	mov	r2, r0
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_RCC_ClockConfig+0x1b4>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	490c      	ldr	r1, [pc, #48]	; (80027d4 <HAL_RCC_ClockConfig+0x1b8>)
 80027a4:	5ccb      	ldrb	r3, [r1, r3]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027b2:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fb20 	bl	8000dfc <HAL_InitTick>
 80027bc:	4603      	mov	r3, r0
 80027be:	72fb      	strb	r3, [r7, #11]

  return status;
 80027c0:	7afb      	ldrb	r3, [r7, #11]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40022000 	.word	0x40022000
 80027d0:	40021000 	.word	0x40021000
 80027d4:	0800409c 	.word	0x0800409c
 80027d8:	20000000 	.word	0x20000000
 80027dc:	20000004 	.word	0x20000004

080027e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b089      	sub	sp, #36	; 0x24
 80027e4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027e6:	2300      	movs	r3, #0
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	2300      	movs	r3, #0
 80027ec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ee:	4b3e      	ldr	r3, [pc, #248]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f8:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x34>
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	2b0c      	cmp	r3, #12
 800280c:	d121      	bne.n	8002852 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d11e      	bne.n	8002852 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002814:	4b34      	ldr	r3, [pc, #208]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d107      	bne.n	8002830 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002820:	4b31      	ldr	r3, [pc, #196]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002826:	0a1b      	lsrs	r3, r3, #8
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	61fb      	str	r3, [r7, #28]
 800282e:	e005      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002830:	4b2d      	ldr	r3, [pc, #180]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800283c:	4a2b      	ldr	r2, [pc, #172]	; (80028ec <HAL_RCC_GetSysClockFreq+0x10c>)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002844:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10d      	bne.n	8002868 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002850:	e00a      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b04      	cmp	r3, #4
 8002856:	d102      	bne.n	800285e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002858:	4b25      	ldr	r3, [pc, #148]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x110>)
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	e004      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b08      	cmp	r3, #8
 8002862:	d101      	bne.n	8002868 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002866:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	2b0c      	cmp	r3, #12
 800286c:	d134      	bne.n	80028d8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d003      	beq.n	8002886 <HAL_RCC_GetSysClockFreq+0xa6>
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2b03      	cmp	r3, #3
 8002882:	d003      	beq.n	800288c <HAL_RCC_GetSysClockFreq+0xac>
 8002884:	e005      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002886:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002888:	617b      	str	r3, [r7, #20]
      break;
 800288a:	e005      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_RCC_GetSysClockFreq+0x114>)
 800288e:	617b      	str	r3, [r7, #20]
      break;
 8002890:	e002      	b.n	8002898 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	617b      	str	r3, [r7, #20]
      break;
 8002896:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002898:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x108>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f003 0307 	and.w	r3, r3, #7
 80028a2:	3301      	adds	r3, #1
 80028a4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	fb02 f203 	mul.w	r2, r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028be:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	0e5b      	lsrs	r3, r3, #25
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	3301      	adds	r3, #1
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028d8:	69bb      	ldr	r3, [r7, #24]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	080040b4 	.word	0x080040b4
 80028f0:	00f42400 	.word	0x00f42400
 80028f4:	007a1200 	.word	0x007a1200

080028f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028fc:	4b03      	ldr	r3, [pc, #12]	; (800290c <HAL_RCC_GetHCLKFreq+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000000 	.word	0x20000000

08002910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002914:	f7ff fff0 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_RCC_GetPCLK1Freq+0x24>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4904      	ldr	r1, [pc, #16]	; (8002938 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000
 8002938:	080040ac 	.word	0x080040ac

0800293c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002940:	f7ff ffda 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002944:	4602      	mov	r2, r0
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	0adb      	lsrs	r3, r3, #11
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	4904      	ldr	r1, [pc, #16]	; (8002964 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002952:	5ccb      	ldrb	r3, [r1, r3]
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800295c:	4618      	mov	r0, r3
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40021000 	.word	0x40021000
 8002964:	080040ac 	.word	0x080040ac

08002968 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002970:	2300      	movs	r3, #0
 8002972:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002980:	f7ff f9c8 	bl	8001d14 <HAL_PWREx_GetVoltageRange>
 8002984:	6178      	str	r0, [r7, #20]
 8002986:	e014      	b.n	80029b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	4a24      	ldr	r2, [pc, #144]	; (8002a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800298e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002992:	6593      	str	r3, [r2, #88]	; 0x58
 8002994:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80029a0:	f7ff f9b8 	bl	8001d14 <HAL_PWREx_GetVoltageRange>
 80029a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80029a6:	4b1e      	ldr	r3, [pc, #120]	; (8002a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029aa:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b8:	d10b      	bne.n	80029d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b80      	cmp	r3, #128	; 0x80
 80029be:	d919      	bls.n	80029f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2ba0      	cmp	r3, #160	; 0xa0
 80029c4:	d902      	bls.n	80029cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029c6:	2302      	movs	r3, #2
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	e013      	b.n	80029f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029cc:	2301      	movs	r3, #1
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	e010      	b.n	80029f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b80      	cmp	r3, #128	; 0x80
 80029d6:	d902      	bls.n	80029de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029d8:	2303      	movs	r3, #3
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	e00a      	b.n	80029f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b80      	cmp	r3, #128	; 0x80
 80029e2:	d102      	bne.n	80029ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029e4:	2302      	movs	r3, #2
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	e004      	b.n	80029f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b70      	cmp	r3, #112	; 0x70
 80029ee:	d101      	bne.n	80029f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029f0:	2301      	movs	r3, #1
 80029f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f023 0207 	bic.w	r2, r3, #7
 80029fc:	4909      	ldr	r1, [pc, #36]	; (8002a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a04:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d001      	beq.n	8002a16 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40022000 	.word	0x40022000

08002a28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a30:	2300      	movs	r3, #0
 8002a32:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a34:	2300      	movs	r3, #0
 8002a36:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d031      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a48:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a4c:	d01a      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002a4e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a52:	d814      	bhi.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a5c:	d10f      	bne.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002a5e:	4bac      	ldr	r3, [pc, #688]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	4aab      	ldr	r2, [pc, #684]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a68:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a6a:	e00c      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3304      	adds	r3, #4
 8002a70:	2100      	movs	r1, #0
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f9dc 	bl	8002e30 <RCCEx_PLLSAI1_Config>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a7c:	e003      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	74fb      	strb	r3, [r7, #19]
      break;
 8002a82:	e000      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a86:	7cfb      	ldrb	r3, [r7, #19]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a8c:	4ba0      	ldr	r3, [pc, #640]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	499d      	ldr	r1, [pc, #628]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002aa2:	e001      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa4:	7cfb      	ldrb	r3, [r7, #19]
 8002aa6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8099 	beq.w	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002aba:	4b95      	ldr	r3, [pc, #596]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00d      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad0:	4b8f      	ldr	r3, [pc, #572]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad4:	4a8e      	ldr	r2, [pc, #568]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ada:	6593      	str	r3, [r2, #88]	; 0x58
 8002adc:	4b8c      	ldr	r3, [pc, #560]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aec:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a88      	ldr	r2, [pc, #544]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002af2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af8:	f7fe f9d0 	bl	8000e9c <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002afe:	e009      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b00:	f7fe f9cc 	bl	8000e9c <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d902      	bls.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	74fb      	strb	r3, [r7, #19]
        break;
 8002b12:	e005      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b14:	4b7f      	ldr	r3, [pc, #508]	; (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d0ef      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d155      	bne.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b26:	4b7a      	ldr	r3, [pc, #488]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b30:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01e      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d019      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b42:	4b73      	ldr	r3, [pc, #460]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b4c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b4e:	4b70      	ldr	r3, [pc, #448]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b54:	4a6e      	ldr	r2, [pc, #440]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b5e:	4b6c      	ldr	r3, [pc, #432]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b64:	4a6a      	ldr	r2, [pc, #424]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b6e:	4a68      	ldr	r2, [pc, #416]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d016      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe f98c 	bl	8000e9c <HAL_GetTick>
 8002b84:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b88:	f7fe f988 	bl	8000e9c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d902      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	74fb      	strb	r3, [r7, #19]
            break;
 8002b9e:	e006      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba0:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0ec      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10b      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb4:	4b56      	ldr	r3, [pc, #344]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc2:	4953      	ldr	r1, [pc, #332]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bca:	e004      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bcc:	7cfb      	ldrb	r3, [r7, #19]
 8002bce:	74bb      	strb	r3, [r7, #18]
 8002bd0:	e001      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bd2:	7cfb      	ldrb	r3, [r7, #19]
 8002bd4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bd6:	7c7b      	ldrb	r3, [r7, #17]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d105      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bdc:	4b4c      	ldr	r3, [pc, #304]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be0:	4a4b      	ldr	r2, [pc, #300]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002be6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bf4:	4b46      	ldr	r3, [pc, #280]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	f023 0203 	bic.w	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	4943      	ldr	r1, [pc, #268]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c16:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1c:	f023 020c 	bic.w	r2, r3, #12
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	493a      	ldr	r1, [pc, #232]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c38:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c46:	4932      	ldr	r1, [pc, #200]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	4929      	ldr	r1, [pc, #164]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8a:	4921      	ldr	r1, [pc, #132]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c9e:	4b1c      	ldr	r3, [pc, #112]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	4918      	ldr	r1, [pc, #96]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cc0:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4910      	ldr	r1, [pc, #64]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d02c      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	4907      	ldr	r1, [pc, #28]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d00:	d10a      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d02:	4b03      	ldr	r3, [pc, #12]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	4a02      	ldr	r2, [pc, #8]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0c:	60d3      	str	r3, [r2, #12]
 8002d0e:	e015      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3304      	adds	r3, #4
 8002d26:	2101      	movs	r1, #1
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 f881 	bl	8002e30 <RCCEx_PLLSAI1_Config>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d32:	7cfb      	ldrb	r3, [r7, #19]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d028      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d48:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	492d      	ldr	r1, [pc, #180]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d66:	d106      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d68:	4b28      	ldr	r3, [pc, #160]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d72:	60d3      	str	r3, [r2, #12]
 8002d74:	e011      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d7e:	d10c      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	3304      	adds	r3, #4
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f852 	bl	8002e30 <RCCEx_PLLSAI1_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d90:	7cfb      	ldrb	r3, [r7, #19]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8002d96:	7cfb      	ldrb	r3, [r7, #19]
 8002d98:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d01c      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002da6:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db4:	4915      	ldr	r1, [pc, #84]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	2102      	movs	r1, #2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 f82f 	bl	8002e30 <RCCEx_PLLSAI1_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dd6:	7cfb      	ldrb	r3, [r7, #19]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dec:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	4904      	ldr	r1, [pc, #16]	; (8002e0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e02:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40021000 	.word	0x40021000

08002e10 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002e14:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a04      	ldr	r2, [pc, #16]	; (8002e2c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e1a:	f043 0304 	orr.w	r3, r3, #4
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40021000 	.word	0x40021000

08002e30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e3e:	4b74      	ldr	r3, [pc, #464]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	f003 0303 	and.w	r3, r3, #3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d018      	beq.n	8002e7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e4a:	4b71      	ldr	r3, [pc, #452]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0203 	and.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d10d      	bne.n	8002e76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e62:	4b6b      	ldr	r3, [pc, #428]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
       ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d047      	beq.n	8002f06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
 8002e7a:	e044      	b.n	8002f06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d018      	beq.n	8002eb6 <RCCEx_PLLSAI1_Config+0x86>
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d825      	bhi.n	8002ed4 <RCCEx_PLLSAI1_Config+0xa4>
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d002      	beq.n	8002e92 <RCCEx_PLLSAI1_Config+0x62>
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d009      	beq.n	8002ea4 <RCCEx_PLLSAI1_Config+0x74>
 8002e90:	e020      	b.n	8002ed4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e92:	4b5f      	ldr	r3, [pc, #380]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d11d      	bne.n	8002eda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea2:	e01a      	b.n	8002eda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ea4:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d116      	bne.n	8002ede <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb4:	e013      	b.n	8002ede <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eb6:	4b56      	ldr	r3, [pc, #344]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d10f      	bne.n	8002ee2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ec2:	4b53      	ldr	r3, [pc, #332]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ed2:	e006      	b.n	8002ee2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed8:	e004      	b.n	8002ee4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eda:	bf00      	nop
 8002edc:	e002      	b.n	8002ee4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e000      	b.n	8002ee4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ee2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10d      	bne.n	8002f06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eea:	4b49      	ldr	r3, [pc, #292]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6819      	ldr	r1, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	430b      	orrs	r3, r1
 8002f00:	4943      	ldr	r1, [pc, #268]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d17c      	bne.n	8003006 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f0c:	4b40      	ldr	r3, [pc, #256]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a3f      	ldr	r2, [pc, #252]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f18:	f7fd ffc0 	bl	8000e9c <HAL_GetTick>
 8002f1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f1e:	e009      	b.n	8002f34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f20:	f7fd ffbc 	bl	8000e9c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d902      	bls.n	8002f34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	73fb      	strb	r3, [r7, #15]
        break;
 8002f32:	e005      	b.n	8002f40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1ef      	bne.n	8002f20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d15f      	bne.n	8003006 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d110      	bne.n	8002f6e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f4c:	4b30      	ldr	r3, [pc, #192]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002f54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6892      	ldr	r2, [r2, #8]
 8002f5c:	0211      	lsls	r1, r2, #8
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68d2      	ldr	r2, [r2, #12]
 8002f62:	06d2      	lsls	r2, r2, #27
 8002f64:	430a      	orrs	r2, r1
 8002f66:	492a      	ldr	r1, [pc, #168]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	610b      	str	r3, [r1, #16]
 8002f6c:	e027      	b.n	8002fbe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d112      	bne.n	8002f9a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f74:	4b26      	ldr	r3, [pc, #152]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f7c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6892      	ldr	r2, [r2, #8]
 8002f84:	0211      	lsls	r1, r2, #8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6912      	ldr	r2, [r2, #16]
 8002f8a:	0852      	lsrs	r2, r2, #1
 8002f8c:	3a01      	subs	r2, #1
 8002f8e:	0552      	lsls	r2, r2, #21
 8002f90:	430a      	orrs	r2, r1
 8002f92:	491f      	ldr	r1, [pc, #124]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	610b      	str	r3, [r1, #16]
 8002f98:	e011      	b.n	8002fbe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f9a:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fa2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6892      	ldr	r2, [r2, #8]
 8002faa:	0211      	lsls	r1, r2, #8
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6952      	ldr	r2, [r2, #20]
 8002fb0:	0852      	lsrs	r2, r2, #1
 8002fb2:	3a01      	subs	r2, #1
 8002fb4:	0652      	lsls	r2, r2, #25
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	4915      	ldr	r1, [pc, #84]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fbe:	4b14      	ldr	r3, [pc, #80]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a13      	ldr	r2, [pc, #76]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fca:	f7fd ff67 	bl	8000e9c <HAL_GetTick>
 8002fce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fd0:	e009      	b.n	8002fe6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fd2:	f7fd ff63 	bl	8000e9c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d902      	bls.n	8002fe6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	73fb      	strb	r3, [r7, #15]
          break;
 8002fe4:	e005      	b.n	8002ff2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fe6:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ef      	beq.n	8002fd2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffa:	691a      	ldr	r2, [r3, #16]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	4903      	ldr	r1, [pc, #12]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003002:	4313      	orrs	r3, r2
 8003004:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003006:	7bfb      	ldrb	r3, [r7, #15]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000

08003014 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e049      	b.n	80030ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fd54 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3304      	adds	r3, #4
 8003050:	4619      	mov	r1, r3
 8003052:	4610      	mov	r0, r2
 8003054:	f000 faa2 	bl	800359c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d001      	beq.n	80030dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e03b      	b.n	8003154 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2202      	movs	r2, #2
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_TIM_Base_Start_IT+0x9c>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d009      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x4e>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d004      	beq.n	8003112 <HAL_TIM_Base_Start_IT+0x4e>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a15      	ldr	r2, [pc, #84]	; (8003164 <HAL_TIM_Base_Start_IT+0xa0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d115      	bne.n	800313e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_TIM_Base_Start_IT+0xa4>)
 800311a:	4013      	ands	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b06      	cmp	r3, #6
 8003122:	d015      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x8c>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312a:	d011      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800313c:	e008      	b.n	8003150 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f042 0201 	orr.w	r2, r2, #1
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e000      	b.n	8003152 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40014000 	.word	0x40014000
 8003168:	00010007 	.word	0x00010007

0800316c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b02      	cmp	r3, #2
 8003180:	d122      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b02      	cmp	r3, #2
 800318e:	d11b      	bne.n	80031c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0202 	mvn.w	r2, #2
 8003198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f9d5 	bl	800355e <HAL_TIM_IC_CaptureCallback>
 80031b4:	e005      	b.n	80031c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f9c7 	bl	800354a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f9d8 	bl	8003572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d122      	bne.n	800321c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d11b      	bne.n	800321c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f06f 0204 	mvn.w	r2, #4
 80031ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f9ab 	bl	800355e <HAL_TIM_IC_CaptureCallback>
 8003208:	e005      	b.n	8003216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f99d 	bl	800354a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f9ae 	bl	8003572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b08      	cmp	r3, #8
 8003228:	d122      	bne.n	8003270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d11b      	bne.n	8003270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0208 	mvn.w	r2, #8
 8003240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2204      	movs	r2, #4
 8003246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f981 	bl	800355e <HAL_TIM_IC_CaptureCallback>
 800325c:	e005      	b.n	800326a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f973 	bl	800354a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f984 	bl	8003572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b10      	cmp	r3, #16
 800327c:	d122      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b10      	cmp	r3, #16
 800328a:	d11b      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0210 	mvn.w	r2, #16
 8003294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2208      	movs	r2, #8
 800329a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69db      	ldr	r3, [r3, #28]
 80032a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f957 	bl	800355e <HAL_TIM_IC_CaptureCallback>
 80032b0:	e005      	b.n	80032be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f949 	bl	800354a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f95a 	bl	8003572 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d10e      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d107      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0201 	mvn.w	r2, #1
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f923 	bl	8003536 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032fa:	2b80      	cmp	r3, #128	; 0x80
 80032fc:	d10e      	bne.n	800331c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003308:	2b80      	cmp	r3, #128	; 0x80
 800330a:	d107      	bne.n	800331c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 faae 	bl	8003878 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800332a:	d10e      	bne.n	800334a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b80      	cmp	r3, #128	; 0x80
 8003338:	d107      	bne.n	800334a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 faa1 	bl	800388c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003354:	2b40      	cmp	r3, #64	; 0x40
 8003356:	d10e      	bne.n	8003376 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003362:	2b40      	cmp	r3, #64	; 0x40
 8003364:	d107      	bne.n	8003376 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800336e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f908 	bl	8003586 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b20      	cmp	r3, #32
 8003382:	d10e      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0320 	and.w	r3, r3, #32
 800338e:	2b20      	cmp	r3, #32
 8003390:	d107      	bne.n	80033a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f06f 0220 	mvn.w	r2, #32
 800339a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fa61 	bl	8003864 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
 80033b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_TIM_ConfigClockSource+0x18>
 80033be:	2302      	movs	r3, #2
 80033c0:	e0b5      	b.n	800352e <HAL_TIM_ConfigClockSource+0x184>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ec:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fe:	d03e      	beq.n	800347e <HAL_TIM_ConfigClockSource+0xd4>
 8003400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003404:	f200 8087 	bhi.w	8003516 <HAL_TIM_ConfigClockSource+0x16c>
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340c:	f000 8085 	beq.w	800351a <HAL_TIM_ConfigClockSource+0x170>
 8003410:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003414:	d87f      	bhi.n	8003516 <HAL_TIM_ConfigClockSource+0x16c>
 8003416:	2b70      	cmp	r3, #112	; 0x70
 8003418:	d01a      	beq.n	8003450 <HAL_TIM_ConfigClockSource+0xa6>
 800341a:	2b70      	cmp	r3, #112	; 0x70
 800341c:	d87b      	bhi.n	8003516 <HAL_TIM_ConfigClockSource+0x16c>
 800341e:	2b60      	cmp	r3, #96	; 0x60
 8003420:	d050      	beq.n	80034c4 <HAL_TIM_ConfigClockSource+0x11a>
 8003422:	2b60      	cmp	r3, #96	; 0x60
 8003424:	d877      	bhi.n	8003516 <HAL_TIM_ConfigClockSource+0x16c>
 8003426:	2b50      	cmp	r3, #80	; 0x50
 8003428:	d03c      	beq.n	80034a4 <HAL_TIM_ConfigClockSource+0xfa>
 800342a:	2b50      	cmp	r3, #80	; 0x50
 800342c:	d873      	bhi.n	8003516 <HAL_TIM_ConfigClockSource+0x16c>
 800342e:	2b40      	cmp	r3, #64	; 0x40
 8003430:	d058      	beq.n	80034e4 <HAL_TIM_ConfigClockSource+0x13a>
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d86f      	bhi.n	8003516 <HAL_TIM_ConfigClockSource+0x16c>
 8003436:	2b30      	cmp	r3, #48	; 0x30
 8003438:	d064      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0x15a>
 800343a:	2b30      	cmp	r3, #48	; 0x30
 800343c:	d86b      	bhi.n	8003516 <HAL_TIM_ConfigClockSource+0x16c>
 800343e:	2b20      	cmp	r3, #32
 8003440:	d060      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0x15a>
 8003442:	2b20      	cmp	r3, #32
 8003444:	d867      	bhi.n	8003516 <HAL_TIM_ConfigClockSource+0x16c>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d05c      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0x15a>
 800344a:	2b10      	cmp	r3, #16
 800344c:	d05a      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800344e:	e062      	b.n	8003516 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6818      	ldr	r0, [r3, #0]
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	6899      	ldr	r1, [r3, #8]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	f000 f97a 	bl	8003758 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003472:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	609a      	str	r2, [r3, #8]
      break;
 800347c:	e04e      	b.n	800351c <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	6899      	ldr	r1, [r3, #8]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f000 f963 	bl	8003758 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a0:	609a      	str	r2, [r3, #8]
      break;
 80034a2:	e03b      	b.n	800351c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	461a      	mov	r2, r3
 80034b2:	f000 f8d7 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2150      	movs	r1, #80	; 0x50
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 f930 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80034c2:	e02b      	b.n	800351c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	461a      	mov	r2, r3
 80034d2:	f000 f8f6 	bl	80036c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2160      	movs	r1, #96	; 0x60
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f920 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 80034e2:	e01b      	b.n	800351c <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6818      	ldr	r0, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	461a      	mov	r2, r3
 80034f2:	f000 f8b7 	bl	8003664 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2140      	movs	r1, #64	; 0x40
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f910 	bl	8003722 <TIM_ITRx_SetConfig>
      break;
 8003502:	e00b      	b.n	800351c <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f000 f907 	bl	8003722 <TIM_ITRx_SetConfig>
        break;
 8003514:	e002      	b.n	800351c <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003516:	bf00      	nop
 8003518:	e000      	b.n	800351c <HAL_TIM_ConfigClockSource+0x172>
      break;
 800351a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800354a:	b480      	push	{r7}
 800354c:	b083      	sub	sp, #12
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003552:	bf00      	nop
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003586:	b480      	push	{r7}
 8003588:	b083      	sub	sp, #12
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a2a      	ldr	r2, [pc, #168]	; (8003658 <TIM_Base_SetConfig+0xbc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d003      	beq.n	80035bc <TIM_Base_SetConfig+0x20>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ba:	d108      	bne.n	80035ce <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a21      	ldr	r2, [pc, #132]	; (8003658 <TIM_Base_SetConfig+0xbc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00b      	beq.n	80035ee <TIM_Base_SetConfig+0x52>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035dc:	d007      	beq.n	80035ee <TIM_Base_SetConfig+0x52>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a1e      	ldr	r2, [pc, #120]	; (800365c <TIM_Base_SetConfig+0xc0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_Base_SetConfig+0x52>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a1d      	ldr	r2, [pc, #116]	; (8003660 <TIM_Base_SetConfig+0xc4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d108      	bne.n	8003600 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0c      	ldr	r2, [pc, #48]	; (8003658 <TIM_Base_SetConfig+0xbc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <TIM_Base_SetConfig+0xa0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a0b      	ldr	r2, [pc, #44]	; (800365c <TIM_Base_SetConfig+0xc0>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <TIM_Base_SetConfig+0xa0>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a0a      	ldr	r2, [pc, #40]	; (8003660 <TIM_Base_SetConfig+0xc4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d103      	bne.n	8003644 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	615a      	str	r2, [r3, #20]
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40012c00 	.word	0x40012c00
 800365c:	40014000 	.word	0x40014000
 8003660:	40014400 	.word	0x40014400

08003664 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f023 0201 	bic.w	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800368e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f023 030a 	bic.w	r3, r3, #10
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036a2:	697a      	ldr	r2, [r7, #20]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	693a      	ldr	r2, [r7, #16]
 80036ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	621a      	str	r2, [r3, #32]
}
 80036b6:	bf00      	nop
 80036b8:	371c      	adds	r7, #28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b087      	sub	sp, #28
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f023 0210 	bic.w	r2, r3, #16
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	031b      	lsls	r3, r3, #12
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	621a      	str	r2, [r3, #32]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4313      	orrs	r3, r2
 8003740:	f043 0307 	orr.w	r3, r3, #7
 8003744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	609a      	str	r2, [r3, #8]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
 8003764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	021a      	lsls	r2, r3, #8
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	431a      	orrs	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	4313      	orrs	r3, r2
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	4313      	orrs	r3, r2
 8003784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	371c      	adds	r7, #28
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e04f      	b.n	8003850 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a21      	ldr	r2, [pc, #132]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d108      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80037e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a14      	ldr	r2, [pc, #80]	; (800385c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d009      	beq.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003818:	d004      	beq.n	8003824 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a10      	ldr	r2, [pc, #64]	; (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d10c      	bne.n	800383e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800382a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	4313      	orrs	r3, r2
 8003834:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40012c00 	.word	0x40012c00
 8003860:	40014000 	.word	0x40014000

08003864 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e040      	b.n	8003934 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd f934 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	; 0x24
 80038cc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f82c 	bl	800393c <UART_SetConfig>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e022      	b.n	8003934 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 fa2c 	bl	8003d54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800390a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800391a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fab3 	bl	8003e98 <UART_CheckIdleState>
 8003932:	4603      	mov	r3, r0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800393c:	b5b0      	push	{r4, r5, r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	4313      	orrs	r3, r2
 800395e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4baf      	ldr	r3, [pc, #700]	; (8003c24 <UART_SetConfig+0x2e8>)
 8003968:	4013      	ands	r3, r2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	69f9      	ldr	r1, [r7, #28]
 8003970:	430b      	orrs	r3, r1
 8003972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4aa4      	ldr	r2, [pc, #656]	; (8003c28 <UART_SetConfig+0x2ec>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d004      	beq.n	80039a4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a9b      	ldr	r2, [pc, #620]	; (8003c2c <UART_SetConfig+0x2f0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d121      	bne.n	8003a06 <UART_SetConfig+0xca>
 80039c2:	4b9b      	ldr	r3, [pc, #620]	; (8003c30 <UART_SetConfig+0x2f4>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f003 0303 	and.w	r3, r3, #3
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d817      	bhi.n	8003a00 <UART_SetConfig+0xc4>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <UART_SetConfig+0x9c>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	080039e9 	.word	0x080039e9
 80039dc:	080039f5 	.word	0x080039f5
 80039e0:	080039ef 	.word	0x080039ef
 80039e4:	080039fb 	.word	0x080039fb
 80039e8:	2301      	movs	r3, #1
 80039ea:	76fb      	strb	r3, [r7, #27]
 80039ec:	e070      	b.n	8003ad0 <UART_SetConfig+0x194>
 80039ee:	2302      	movs	r3, #2
 80039f0:	76fb      	strb	r3, [r7, #27]
 80039f2:	e06d      	b.n	8003ad0 <UART_SetConfig+0x194>
 80039f4:	2304      	movs	r3, #4
 80039f6:	76fb      	strb	r3, [r7, #27]
 80039f8:	e06a      	b.n	8003ad0 <UART_SetConfig+0x194>
 80039fa:	2308      	movs	r3, #8
 80039fc:	76fb      	strb	r3, [r7, #27]
 80039fe:	e067      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003a00:	2310      	movs	r3, #16
 8003a02:	76fb      	strb	r3, [r7, #27]
 8003a04:	e064      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a8a      	ldr	r2, [pc, #552]	; (8003c34 <UART_SetConfig+0x2f8>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d132      	bne.n	8003a76 <UART_SetConfig+0x13a>
 8003a10:	4b87      	ldr	r3, [pc, #540]	; (8003c30 <UART_SetConfig+0x2f4>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d828      	bhi.n	8003a70 <UART_SetConfig+0x134>
 8003a1e:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <UART_SetConfig+0xe8>)
 8003a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a24:	08003a59 	.word	0x08003a59
 8003a28:	08003a71 	.word	0x08003a71
 8003a2c:	08003a71 	.word	0x08003a71
 8003a30:	08003a71 	.word	0x08003a71
 8003a34:	08003a65 	.word	0x08003a65
 8003a38:	08003a71 	.word	0x08003a71
 8003a3c:	08003a71 	.word	0x08003a71
 8003a40:	08003a71 	.word	0x08003a71
 8003a44:	08003a5f 	.word	0x08003a5f
 8003a48:	08003a71 	.word	0x08003a71
 8003a4c:	08003a71 	.word	0x08003a71
 8003a50:	08003a71 	.word	0x08003a71
 8003a54:	08003a6b 	.word	0x08003a6b
 8003a58:	2300      	movs	r3, #0
 8003a5a:	76fb      	strb	r3, [r7, #27]
 8003a5c:	e038      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	76fb      	strb	r3, [r7, #27]
 8003a62:	e035      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003a64:	2304      	movs	r3, #4
 8003a66:	76fb      	strb	r3, [r7, #27]
 8003a68:	e032      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003a6a:	2308      	movs	r3, #8
 8003a6c:	76fb      	strb	r3, [r7, #27]
 8003a6e:	e02f      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003a70:	2310      	movs	r3, #16
 8003a72:	76fb      	strb	r3, [r7, #27]
 8003a74:	e02c      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a6b      	ldr	r2, [pc, #428]	; (8003c28 <UART_SetConfig+0x2ec>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d125      	bne.n	8003acc <UART_SetConfig+0x190>
 8003a80:	4b6b      	ldr	r3, [pc, #428]	; (8003c30 <UART_SetConfig+0x2f4>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a8e:	d017      	beq.n	8003ac0 <UART_SetConfig+0x184>
 8003a90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a94:	d817      	bhi.n	8003ac6 <UART_SetConfig+0x18a>
 8003a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9a:	d00b      	beq.n	8003ab4 <UART_SetConfig+0x178>
 8003a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa0:	d811      	bhi.n	8003ac6 <UART_SetConfig+0x18a>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <UART_SetConfig+0x172>
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d006      	beq.n	8003aba <UART_SetConfig+0x17e>
 8003aac:	e00b      	b.n	8003ac6 <UART_SetConfig+0x18a>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	76fb      	strb	r3, [r7, #27]
 8003ab2:	e00d      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	76fb      	strb	r3, [r7, #27]
 8003ab8:	e00a      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003aba:	2304      	movs	r3, #4
 8003abc:	76fb      	strb	r3, [r7, #27]
 8003abe:	e007      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003ac0:	2308      	movs	r3, #8
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	e004      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003ac6:	2310      	movs	r3, #16
 8003ac8:	76fb      	strb	r3, [r7, #27]
 8003aca:	e001      	b.n	8003ad0 <UART_SetConfig+0x194>
 8003acc:	2310      	movs	r3, #16
 8003ace:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a54      	ldr	r2, [pc, #336]	; (8003c28 <UART_SetConfig+0x2ec>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d173      	bne.n	8003bc2 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ada:	7efb      	ldrb	r3, [r7, #27]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d824      	bhi.n	8003b2a <UART_SetConfig+0x1ee>
 8003ae0:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <UART_SetConfig+0x1ac>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003b0d 	.word	0x08003b0d
 8003aec:	08003b2b 	.word	0x08003b2b
 8003af0:	08003b15 	.word	0x08003b15
 8003af4:	08003b2b 	.word	0x08003b2b
 8003af8:	08003b1b 	.word	0x08003b1b
 8003afc:	08003b2b 	.word	0x08003b2b
 8003b00:	08003b2b 	.word	0x08003b2b
 8003b04:	08003b2b 	.word	0x08003b2b
 8003b08:	08003b23 	.word	0x08003b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b0c:	f7fe ff00 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8003b10:	6178      	str	r0, [r7, #20]
        break;
 8003b12:	e00f      	b.n	8003b34 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b14:	4b48      	ldr	r3, [pc, #288]	; (8003c38 <UART_SetConfig+0x2fc>)
 8003b16:	617b      	str	r3, [r7, #20]
        break;
 8003b18:	e00c      	b.n	8003b34 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b1a:	f7fe fe61 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8003b1e:	6178      	str	r0, [r7, #20]
        break;
 8003b20:	e008      	b.n	8003b34 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b26:	617b      	str	r3, [r7, #20]
        break;
 8003b28:	e004      	b.n	8003b34 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	76bb      	strb	r3, [r7, #26]
        break;
 8003b32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80fe 	beq.w	8003d38 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d305      	bcc.n	8003b58 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d902      	bls.n	8003b5e <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	76bb      	strb	r3, [r7, #26]
 8003b5c:	e0ec      	b.n	8003d38 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	020b      	lsls	r3, r1, #8
 8003b70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003b74:	0202      	lsls	r2, r0, #8
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	6849      	ldr	r1, [r1, #4]
 8003b7a:	0849      	lsrs	r1, r1, #1
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	f04f 0100 	mov.w	r1, #0
 8003b82:	1814      	adds	r4, r2, r0
 8003b84:	eb43 0501 	adc.w	r5, r3, r1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	4620      	mov	r0, r4
 8003b94:	4629      	mov	r1, r5
 8003b96:	f7fc fb19 	bl	80001cc <__aeabi_uldivmod>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ba8:	d308      	bcc.n	8003bbc <UART_SetConfig+0x280>
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bb0:	d204      	bcs.n	8003bbc <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	60da      	str	r2, [r3, #12]
 8003bba:	e0bd      	b.n	8003d38 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	76bb      	strb	r3, [r7, #26]
 8003bc0:	e0ba      	b.n	8003d38 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bca:	d168      	bne.n	8003c9e <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8003bcc:	7efb      	ldrb	r3, [r7, #27]
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d834      	bhi.n	8003c3c <UART_SetConfig+0x300>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <UART_SetConfig+0x29c>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003bfd 	.word	0x08003bfd
 8003bdc:	08003c05 	.word	0x08003c05
 8003be0:	08003c0d 	.word	0x08003c0d
 8003be4:	08003c3d 	.word	0x08003c3d
 8003be8:	08003c13 	.word	0x08003c13
 8003bec:	08003c3d 	.word	0x08003c3d
 8003bf0:	08003c3d 	.word	0x08003c3d
 8003bf4:	08003c3d 	.word	0x08003c3d
 8003bf8:	08003c1b 	.word	0x08003c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f7fe fe88 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8003c00:	6178      	str	r0, [r7, #20]
        break;
 8003c02:	e020      	b.n	8003c46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c04:	f7fe fe9a 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8003c08:	6178      	str	r0, [r7, #20]
        break;
 8003c0a:	e01c      	b.n	8003c46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <UART_SetConfig+0x2fc>)
 8003c0e:	617b      	str	r3, [r7, #20]
        break;
 8003c10:	e019      	b.n	8003c46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c12:	f7fe fde5 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8003c16:	6178      	str	r0, [r7, #20]
        break;
 8003c18:	e015      	b.n	8003c46 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1e:	617b      	str	r3, [r7, #20]
        break;
 8003c20:	e011      	b.n	8003c46 <UART_SetConfig+0x30a>
 8003c22:	bf00      	nop
 8003c24:	efff69f3 	.word	0xefff69f3
 8003c28:	40008000 	.word	0x40008000
 8003c2c:	40013800 	.word	0x40013800
 8003c30:	40021000 	.word	0x40021000
 8003c34:	40004400 	.word	0x40004400
 8003c38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	76bb      	strb	r3, [r7, #26]
        break;
 8003c44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d075      	beq.n	8003d38 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	005a      	lsls	r2, r3, #1
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	085b      	lsrs	r3, r3, #1
 8003c56:	441a      	add	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	d916      	bls.n	8003c98 <UART_SetConfig+0x35c>
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c70:	d212      	bcs.n	8003c98 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	f023 030f 	bic.w	r3, r3, #15
 8003c7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	085b      	lsrs	r3, r3, #1
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	89fb      	ldrh	r3, [r7, #14]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	89fa      	ldrh	r2, [r7, #14]
 8003c94:	60da      	str	r2, [r3, #12]
 8003c96:	e04f      	b.n	8003d38 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	76bb      	strb	r3, [r7, #26]
 8003c9c:	e04c      	b.n	8003d38 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c9e:	7efb      	ldrb	r3, [r7, #27]
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d828      	bhi.n	8003cf6 <UART_SetConfig+0x3ba>
 8003ca4:	a201      	add	r2, pc, #4	; (adr r2, 8003cac <UART_SetConfig+0x370>)
 8003ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003caa:	bf00      	nop
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003ce1 	.word	0x08003ce1
 8003cb8:	08003cf7 	.word	0x08003cf7
 8003cbc:	08003ce7 	.word	0x08003ce7
 8003cc0:	08003cf7 	.word	0x08003cf7
 8003cc4:	08003cf7 	.word	0x08003cf7
 8003cc8:	08003cf7 	.word	0x08003cf7
 8003ccc:	08003cef 	.word	0x08003cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cd0:	f7fe fe1e 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8003cd4:	6178      	str	r0, [r7, #20]
        break;
 8003cd6:	e013      	b.n	8003d00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd8:	f7fe fe30 	bl	800293c <HAL_RCC_GetPCLK2Freq>
 8003cdc:	6178      	str	r0, [r7, #20]
        break;
 8003cde:	e00f      	b.n	8003d00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce0:	4b1b      	ldr	r3, [pc, #108]	; (8003d50 <UART_SetConfig+0x414>)
 8003ce2:	617b      	str	r3, [r7, #20]
        break;
 8003ce4:	e00c      	b.n	8003d00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce6:	f7fe fd7b 	bl	80027e0 <HAL_RCC_GetSysClockFreq>
 8003cea:	6178      	str	r0, [r7, #20]
        break;
 8003cec:	e008      	b.n	8003d00 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cf2:	617b      	str	r3, [r7, #20]
        break;
 8003cf4:	e004      	b.n	8003d00 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	76bb      	strb	r3, [r7, #26]
        break;
 8003cfe:	bf00      	nop
    }

    if (pclk != 0U)
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d018      	beq.n	8003d38 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	085a      	lsrs	r2, r3, #1
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	441a      	add	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	2b0f      	cmp	r3, #15
 8003d20:	d908      	bls.n	8003d34 <UART_SetConfig+0x3f8>
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d28:	d204      	bcs.n	8003d34 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	e001      	b.n	8003d38 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d44:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	00f42400 	.word	0x00f42400

08003d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d60:	f003 0301 	and.w	r3, r3, #1
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00a      	beq.n	8003d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00a      	beq.n	8003da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00a      	beq.n	8003dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	f003 0308 	and.w	r3, r3, #8
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00a      	beq.n	8003e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d01a      	beq.n	8003e6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e52:	d10a      	bne.n	8003e6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ea8:	f7fc fff8 	bl	8000e9c <HAL_GetTick>
 8003eac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d10e      	bne.n	8003eda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ebc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f82d 	bl	8003f2a <UART_WaitOnFlagUntilTimeout>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e023      	b.n	8003f22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d10e      	bne.n	8003f06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f817 	bl	8003f2a <UART_WaitOnFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e00d      	b.n	8003f22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2220      	movs	r2, #32
 8003f10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	4613      	mov	r3, r2
 8003f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3a:	e05e      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f42:	d05a      	beq.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f44:	f7fc ffaa 	bl	8000e9c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d302      	bcc.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d11b      	bne.n	8003f92 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f68:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e043      	b.n	800401a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d02c      	beq.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003faa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fae:	d124      	bne.n	8003ffa <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fb8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fc8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0201 	bic.w	r2, r2, #1
 8003fd8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e00f      	b.n	800401a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	d091      	beq.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <__libc_init_array>:
 8004024:	b570      	push	{r4, r5, r6, lr}
 8004026:	4d0d      	ldr	r5, [pc, #52]	; (800405c <__libc_init_array+0x38>)
 8004028:	4c0d      	ldr	r4, [pc, #52]	; (8004060 <__libc_init_array+0x3c>)
 800402a:	1b64      	subs	r4, r4, r5
 800402c:	10a4      	asrs	r4, r4, #2
 800402e:	2600      	movs	r6, #0
 8004030:	42a6      	cmp	r6, r4
 8004032:	d109      	bne.n	8004048 <__libc_init_array+0x24>
 8004034:	4d0b      	ldr	r5, [pc, #44]	; (8004064 <__libc_init_array+0x40>)
 8004036:	4c0c      	ldr	r4, [pc, #48]	; (8004068 <__libc_init_array+0x44>)
 8004038:	f000 f820 	bl	800407c <_init>
 800403c:	1b64      	subs	r4, r4, r5
 800403e:	10a4      	asrs	r4, r4, #2
 8004040:	2600      	movs	r6, #0
 8004042:	42a6      	cmp	r6, r4
 8004044:	d105      	bne.n	8004052 <__libc_init_array+0x2e>
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	f855 3b04 	ldr.w	r3, [r5], #4
 800404c:	4798      	blx	r3
 800404e:	3601      	adds	r6, #1
 8004050:	e7ee      	b.n	8004030 <__libc_init_array+0xc>
 8004052:	f855 3b04 	ldr.w	r3, [r5], #4
 8004056:	4798      	blx	r3
 8004058:	3601      	adds	r6, #1
 800405a:	e7f2      	b.n	8004042 <__libc_init_array+0x1e>
 800405c:	080040ec 	.word	0x080040ec
 8004060:	080040ec 	.word	0x080040ec
 8004064:	080040ec 	.word	0x080040ec
 8004068:	080040f0 	.word	0x080040f0

0800406c <memset>:
 800406c:	4402      	add	r2, r0
 800406e:	4603      	mov	r3, r0
 8004070:	4293      	cmp	r3, r2
 8004072:	d100      	bne.n	8004076 <memset+0xa>
 8004074:	4770      	bx	lr
 8004076:	f803 1b01 	strb.w	r1, [r3], #1
 800407a:	e7f9      	b.n	8004070 <memset+0x4>

0800407c <_init>:
 800407c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407e:	bf00      	nop
 8004080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004082:	bc08      	pop	{r3}
 8004084:	469e      	mov	lr, r3
 8004086:	4770      	bx	lr

08004088 <_fini>:
 8004088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408a:	bf00      	nop
 800408c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408e:	bc08      	pop	{r3}
 8004090:	469e      	mov	lr, r3
 8004092:	4770      	bx	lr
