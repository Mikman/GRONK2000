
CanReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003830  08003830  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003830  08003830  00013830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003838  08003838  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003838  08003838  00013838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800383c  0800383c  0001383c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  2000000c  0800384c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  0800384c  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c14e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf9  00000000  00000000  0002c18a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  0002de88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002e918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f7db  00000000  00000000  0002f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa54  00000000  00000000  0004eacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf3d1  00000000  00000000  0005951f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001188f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a64  00000000  00000000  00118944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080037d0 	.word	0x080037d0

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080037d0 	.word	0x080037d0

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <QueueFull>:
 *  Created on: Mar 16, 2021
 *      Author: Mikkel
 */
#include "circle_queue.h"

int QueueFull(struct Queue *q){
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	return (((q->pointWR +1) % SIZE_OF_QUEUE) == q->pointRD);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	885b      	ldrh	r3, [r3, #2]
 80004d0:	1c59      	adds	r1, r3, #1
 80004d2:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <QueueFull+0x40>)
 80004d4:	fb83 2301 	smull	r2, r3, r3, r1
 80004d8:	10da      	asrs	r2, r3, #3
 80004da:	17cb      	asrs	r3, r1, #31
 80004dc:	1ad2      	subs	r2, r2, r3
 80004de:	4613      	mov	r3, r2
 80004e0:	009b      	lsls	r3, r3, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	009a      	lsls	r2, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	1aca      	subs	r2, r1, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	881b      	ldrh	r3, [r3, #0]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	bf0c      	ite	eq
 80004f2:	2301      	moveq	r3, #1
 80004f4:	2300      	movne	r3, #0
 80004f6:	b2db      	uxtb	r3, r3
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	51eb851f 	.word	0x51eb851f

08000508 <EnterQueue>:

int QueueEmpty(struct Queue *q){
	return (q->pointWR == q->pointRD);
}

int EnterQueue(struct Queue *q, uint8_t data) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]

	if (QueueFull(q)) {
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	f7ff ffd5 	bl	80004c4 <QueueFull>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d001      	beq.n	8000524 <EnterQueue+0x1c>
		return 0;
 8000520:	2300      	movs	r3, #0
 8000522:	e015      	b.n	8000550 <EnterQueue+0x48>
	}
	else {
		q->queue[q->pointWR] = data;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	885b      	ldrh	r3, [r3, #2]
 8000528:	461a      	mov	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4413      	add	r3, r2
 800052e:	78fa      	ldrb	r2, [r7, #3]
 8000530:	711a      	strb	r2, [r3, #4]


		if ((q->pointWR + 1) == SIZE_OF_QUEUE){
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	885b      	ldrh	r3, [r3, #2]
 8000536:	2b18      	cmp	r3, #24
 8000538:	d103      	bne.n	8000542 <EnterQueue+0x3a>
			q->pointWR = 0;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2200      	movs	r2, #0
 800053e:	805a      	strh	r2, [r3, #2]
 8000540:	e005      	b.n	800054e <EnterQueue+0x46>
		}
		else{
			q->pointWR += 1;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	885b      	ldrh	r3, [r3, #2]
 8000546:	3301      	adds	r3, #1
 8000548:	b29a      	uxth	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	805a      	strh	r2, [r3, #2]
		}

	}
	return 1;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800055c:	f000 fb35 	bl	8000bca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f810 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f950 	bl	8000808 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000568:	f000 f91e 	bl	80007a8 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 800056c:	f000 f88c 	bl	8000688 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000570:	2201      	movs	r2, #1
 8000572:	2140      	movs	r1, #64	; 0x40
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <main+0x28>)
 8000576:	f001 fb95 	bl	8001ca4 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  receiveImageData();
 800057a:	f000 f98f 	bl	800089c <receiveImageData>
  {
 800057e:	e7fc      	b.n	800057a <main+0x22>
 8000580:	48000400 	.word	0x48000400

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b0ac      	sub	sp, #176	; 0xb0
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800058e:	2244      	movs	r2, #68	; 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 f914 	bl	80037c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2254      	movs	r2, #84	; 0x54
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 f906 	bl	80037c0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b4:	f001 fb8e 	bl	8001cd4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005b8:	4b32      	ldr	r3, [pc, #200]	; (8000684 <SystemClock_Config+0x100>)
 80005ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005be:	4a31      	ldr	r2, [pc, #196]	; (8000684 <SystemClock_Config+0x100>)
 80005c0:	f023 0318 	bic.w	r3, r3, #24
 80005c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005c8:	2314      	movs	r3, #20
 80005ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005dc:	2360      	movs	r3, #96	; 0x60
 80005de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e2:	2302      	movs	r3, #2
 80005e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e8:	2301      	movs	r3, #1
 80005ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 36;
 80005f4:	2324      	movs	r3, #36	; 0x24
 80005f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000610:	4618      	mov	r0, r3
 8000612:	f001 fbd3 	bl	8001dbc <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800061c:	f000 f97a 	bl	8000914 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2303      	movs	r3, #3
 8000626:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000634:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000638:	2104      	movs	r1, #4
 800063a:	4618      	mov	r0, r3
 800063c:	f001 ffde 	bl	80025fc <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000646:	f000 f965 	bl	8000914 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800064a:	2302      	movs	r3, #2
 800064c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800064e:	2300      	movs	r3, #0
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	4618      	mov	r0, r3
 8000656:	f002 f9d7 	bl	8002a08 <HAL_RCCEx_PeriphCLKConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000660:	f000 f958 	bl	8000914 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000664:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000668:	f001 fb52 	bl	8001d10 <HAL_PWREx_ControlVoltageScaling>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000672:	f000 f94f 	bl	8000914 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000676:	f002 fbbb 	bl	8002df0 <HAL_RCCEx_EnableMSIPLLMode>
}
 800067a:	bf00      	nop
 800067c:	37b0      	adds	r7, #176	; 0xb0
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000

08000688 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	  uint32_t ext_id = 0x2468ACEF;							// Den største værdi der kan være på MSB er 1
 800068e:	4b40      	ldr	r3, [pc, #256]	; (8000790 <MX_CAN1_Init+0x108>)
 8000690:	60fb      	str	r3, [r7, #12]
	  uint32_t mask = 0x0F0F0F0F;
 8000692:	f04f 330f 	mov.w	r3, #252645135	; 0xf0f0f0f
 8000696:	60bb      	str	r3, [r7, #8]
	  CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;			// Vi vælger at bruge mask mode
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <MX_CAN1_Init+0x10c>)
 800069a:	2200      	movs	r2, #0
 800069c:	619a      	str	r2, [r3, #24]
	  CanFilter.FilterIdHigh = (ext_id & 0x1FFFFFFF) >> 13;// (ext_id << 3) >> 16;						// Da vi har 32 bit ID, er dette de 16 MSB af ID
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	0b5b      	lsrs	r3, r3, #13
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	4a3b      	ldr	r2, [pc, #236]	; (8000794 <MX_CAN1_Init+0x10c>)
 80006a6:	6013      	str	r3, [r2, #0]
	  CanFilter.FilterIdLow =  (ext_id << 3) | CAN_ID_EXT;						// Da vi har 32 bit ID, er dette de 16 LSB af ID
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	f043 0304 	orr.w	r3, r3, #4
 80006b0:	4a38      	ldr	r2, [pc, #224]	; (8000794 <MX_CAN1_Init+0x10c>)
 80006b2:	6053      	str	r3, [r2, #4]
	  CanFilter.FilterMaskIdHigh = (mask & 0x1FFFFFFF) >> 13;// << 5;					// Maskens 16 MSB
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	0b5b      	lsrs	r3, r3, #13
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	4a36      	ldr	r2, [pc, #216]	; (8000794 <MX_CAN1_Init+0x10c>)
 80006bc:	6093      	str	r3, [r2, #8]
	  CanFilter.FilterMaskIdLow = (mask << 3);// << 5 | 0x10;					// Maskens 16 LSB
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	4a34      	ldr	r2, [pc, #208]	; (8000794 <MX_CAN1_Init+0x10c>)
 80006c4:	60d3      	str	r3, [r2, #12]
	  CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;		// ID er et 32 bit-tal
 80006c6:	4b33      	ldr	r3, [pc, #204]	; (8000794 <MX_CAN1_Init+0x10c>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	61da      	str	r2, [r3, #28]
	  CanFilter.FilterActivation = ENABLE;					// Vi aktiverer filteret
 80006cc:	4b31      	ldr	r3, [pc, #196]	; (8000794 <MX_CAN1_Init+0x10c>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	621a      	str	r2, [r3, #32]
	  CanFilter.FilterBank = 0;								// Vi vælger filter 0 ud af 14 mulige filtre
 80006d2:	4b30      	ldr	r3, [pc, #192]	; (8000794 <MX_CAN1_Init+0x10c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
	  CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;	// Vi vælger FIFO0 til forskel for FIFO1
 80006d8:	4b2e      	ldr	r3, [pc, #184]	; (8000794 <MX_CAN1_Init+0x10c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]


	  CanRxHeader.DLC = PACKAGE_SIZE;
 80006de:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <MX_CAN1_Init+0x110>)
 80006e0:	2208      	movs	r2, #8
 80006e2:	611a      	str	r2, [r3, #16]
	  CanRxHeader.ExtId = 0x00000010;
 80006e4:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MX_CAN1_Init+0x110>)
 80006e6:	2210      	movs	r2, #16
 80006e8:	605a      	str	r2, [r3, #4]
	  CanRxHeader.IDE = CAN_ID_EXT;
 80006ea:	4b2b      	ldr	r3, [pc, #172]	; (8000798 <MX_CAN1_Init+0x110>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	609a      	str	r2, [r3, #8]
	  CanRxHeader.RTR = CAN_RTR_DATA;
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MX_CAN1_Init+0x110>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
	  CanRxHeader.FilterMatchIndex = 0x00;
 80006f6:	4b28      	ldr	r3, [pc, #160]	; (8000798 <MX_CAN1_Init+0x110>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
	  __HAL_RCC_CAN1_CLK_ENABLE();
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_CAN1_Init+0x114>)
 80006fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000700:	4a26      	ldr	r2, [pc, #152]	; (800079c <MX_CAN1_Init+0x114>)
 8000702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000706:	6593      	str	r3, [r2, #88]	; 0x58
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_CAN1_Init+0x114>)
 800070a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000710:	607b      	str	r3, [r7, #4]
 8000712:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000714:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <MX_CAN1_Init+0x118>)
 8000716:	4a23      	ldr	r2, [pc, #140]	; (80007a4 <MX_CAN1_Init+0x11c>)
 8000718:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800071a:	4b21      	ldr	r3, [pc, #132]	; (80007a0 <MX_CAN1_Init+0x118>)
 800071c:	2212      	movs	r2, #18
 800071e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000720:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_CAN1_Init+0x118>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_CAN1_Init+0x118>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_CAN1_Init+0x118>)
 800072e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000732:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_CAN1_Init+0x118>)
 8000736:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800073a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800073c:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_CAN1_Init+0x118>)
 800073e:	2200      	movs	r2, #0
 8000740:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_CAN1_Init+0x118>)
 8000744:	2200      	movs	r2, #0
 8000746:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_CAN1_Init+0x118>)
 800074a:	2200      	movs	r2, #0
 800074c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <MX_CAN1_Init+0x118>)
 8000750:	2200      	movs	r2, #0
 8000752:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_CAN1_Init+0x118>)
 8000756:	2200      	movs	r2, #0
 8000758:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <MX_CAN1_Init+0x118>)
 800075c:	2200      	movs	r2, #0
 800075e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000760:	480f      	ldr	r0, [pc, #60]	; (80007a0 <MX_CAN1_Init+0x118>)
 8000762:	f000 faa7 	bl	8000cb4 <HAL_CAN_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_CAN1_Init+0xe8>
  {
    Error_Handler();
 800076c:	f000 f8d2 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

    while (HAL_CAN_ConfigFilter(&hcan1, &CanFilter) != HAL_OK) {}
 8000770:	bf00      	nop
 8000772:	4908      	ldr	r1, [pc, #32]	; (8000794 <MX_CAN1_Init+0x10c>)
 8000774:	480a      	ldr	r0, [pc, #40]	; (80007a0 <MX_CAN1_Init+0x118>)
 8000776:	f000 fb98 	bl	8000eaa <HAL_CAN_ConfigFilter>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d1f8      	bne.n	8000772 <MX_CAN1_Init+0xea>
    //HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
    HAL_CAN_Start(&hcan1);
 8000780:	4807      	ldr	r0, [pc, #28]	; (80007a0 <MX_CAN1_Init+0x118>)
 8000782:	f000 fc5c 	bl	800103e <HAL_CAN_Start>
  /* USER CODE END CAN1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	2468acef 	.word	0x2468acef
 8000794:	20000048 	.word	0x20000048
 8000798:	20000070 	.word	0x20000070
 800079c:	40021000 	.word	0x40021000
 80007a0:	20000110 	.word	0x20000110
 80007a4:	40006400 	.word	0x40006400

080007a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007ae:	4a15      	ldr	r2, [pc, #84]	; (8000804 <MX_USART2_UART_Init+0x5c>)
 80007b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007ce:	220c      	movs	r2, #12
 80007d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d8:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e4:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_USART2_UART_Init+0x58>)
 80007ec:	f002 fc02 	bl	8002ff4 <HAL_UART_Init>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007f6:	f000 f88d 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	2000008c 	.word	0x2000008c
 8000804:	40004400 	.word	0x40004400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_GPIO_Init+0x8c>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a16      	ldr	r2, [pc, #88]	; (8000894 <MX_GPIO_Init+0x8c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <MX_GPIO_Init+0x8c>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_GPIO_Init+0x8c>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	21c9      	movs	r1, #201	; 0xc9
 800086a:	480b      	ldr	r0, [pc, #44]	; (8000898 <MX_GPIO_Init+0x90>)
 800086c:	f001 fa1a 	bl	8001ca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 LD3_Pin PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8000870:	23c9      	movs	r3, #201	; 0xc9
 8000872:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000874:	2301      	movs	r3, #1
 8000876:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 030c 	add.w	r3, r7, #12
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0x90>)
 8000888:	f001 f8a2 	bl	80019d0 <HAL_GPIO_Init>

}
 800088c:	bf00      	nop
 800088e:	3720      	adds	r7, #32
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400

0800089c <receiveImageData>:

/* USER CODE BEGIN 4 */
void receiveImageData() {
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
	uint8_t buffer[PACKAGE_SIZE] = {0};
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
	if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 80008aa:	2100      	movs	r1, #0
 80008ac:	4815      	ldr	r0, [pc, #84]	; (8000904 <receiveImageData+0x68>)
 80008ae:	f000 fd1c 	bl	80012ea <HAL_CAN_GetRxFifoFillLevel>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d021      	beq.n	80008fc <receiveImageData+0x60>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2140      	movs	r1, #64	; 0x40
 80008bc:	4812      	ldr	r0, [pc, #72]	; (8000908 <receiveImageData+0x6c>)
 80008be:	f001 f9f1 	bl	8001ca4 <HAL_GPIO_WritePin>
		if (!QueueFull(&queueCANRX)) { // Hvis køen ikke er fuld - Hvis der er en plads til at modtage en besked
 80008c2:	4812      	ldr	r0, [pc, #72]	; (800090c <receiveImageData+0x70>)
 80008c4:	f7ff fdfe 	bl	80004c4 <QueueFull>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d116      	bne.n	80008fc <receiveImageData+0x60>
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CanRxHeader, buffer); // Modtag beskeden og læg den i buffer
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	4a0f      	ldr	r2, [pc, #60]	; (8000910 <receiveImageData+0x74>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <receiveImageData+0x68>)
 80008d6:	f000 fbf6 	bl	80010c6 <HAL_CAN_GetRxMessage>
			for(int i = 0; i < PACKAGE_SIZE; i++){
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	e00a      	b.n	80008f6 <receiveImageData+0x5a>
				EnterQueue(&queueCANRX, buffer[i]); // Læg buffer ind i modtager-queuen
 80008e0:	1d3a      	adds	r2, r7, #4
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	4413      	add	r3, r2
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	4619      	mov	r1, r3
 80008ea:	4808      	ldr	r0, [pc, #32]	; (800090c <receiveImageData+0x70>)
 80008ec:	f7ff fe0c 	bl	8000508 <EnterQueue>
			for(int i = 0; i < PACKAGE_SIZE; i++){
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	3301      	adds	r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	2b07      	cmp	r3, #7
 80008fa:	ddf1      	ble.n	80008e0 <receiveImageData+0x44>
			}
		}
	}

}
 80008fc:	bf00      	nop
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000110 	.word	0x20000110
 8000908:	48000400 	.word	0x48000400
 800090c:	20000028 	.word	0x20000028
 8000910:	20000070 	.word	0x20000070

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	e7fe      	b.n	800091c <Error_Handler+0x8>
	...

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	4a0e      	ldr	r2, [pc, #56]	; (8000964 <HAL_MspInit+0x44>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6613      	str	r3, [r2, #96]	; 0x60
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_MspInit+0x44>)
 8000944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000948:	6593      	str	r3, [r2, #88]	; 0x58
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <HAL_CAN_MspInit+0x90>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d131      	bne.n	80009ee <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_CAN_MspInit+0x94>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <HAL_CAN_MspInit+0x94>)
 8000990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000994:	6593      	str	r3, [r2, #88]	; 0x58
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_CAN_MspInit+0x94>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_CAN_MspInit+0x94>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <HAL_CAN_MspInit+0x94>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ae:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_CAN_MspInit+0x94>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009cc:	2309      	movs	r3, #9
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009da:	f000 fff9 	bl	80019d0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2014      	movs	r0, #20
 80009e4:	f000 ffbd 	bl	8001962 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009e8:	2014      	movs	r0, #20
 80009ea:	f000 ffd6 	bl	800199a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40006400 	.word	0x40006400
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d13a      	bne.n	8000a98 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <HAL_UART_MspInit+0xa4>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <HAL_UART_MspInit+0xa4>)
 8000a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <HAL_UART_MspInit+0xa4>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <HAL_UART_MspInit+0xa4>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <HAL_UART_MspInit+0xa4>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0xa4>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a52:	2304      	movs	r3, #4
 8000a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a62:	2307      	movs	r3, #7
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f000 ffae 	bl	80019d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000a74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000a86:	2303      	movs	r3, #3
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 ff9c 	bl	80019d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f8be 	bl	8000c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <CAN1_RX0_IRQHandler+0x14>)
 8000b02:	f000 fc1a 	bl	800133a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  receiveImageData();
 8000b06:	f7ff fec9 	bl	800089c <receiveImageData>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000110 	.word	0x20000110

08000b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <SystemInit+0x5c>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <SystemInit+0x5c>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <SystemInit+0x60>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a11      	ldr	r2, [pc, #68]	; (8000b74 <SystemInit+0x60>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <SystemInit+0x60>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <SystemInit+0x60>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a0d      	ldr	r2, [pc, #52]	; (8000b74 <SystemInit+0x60>)
 8000b40:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b44:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b48:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <SystemInit+0x60>)
 8000b4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b50:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <SystemInit+0x60>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <SystemInit+0x60>)
 8000b58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b5c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <SystemInit+0x60>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000ed00 	.word	0xe000ed00
 8000b74:	40021000 	.word	0x40021000

08000b78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b7c:	f7ff ffca 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b82:	e003      	b.n	8000b8c <LoopCopyDataInit>

08000b84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b8a:	3104      	adds	r1, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b8c:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b94:	d3f6      	bcc.n	8000b84 <CopyDataInit>
	ldr	r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b98:	e002      	b.n	8000ba0 <LoopFillZerobss>

08000b9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b9c:	f842 3b04 	str.w	r3, [r2], #4

08000ba0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <LoopForever+0x16>)
	cmp	r2, r3
 8000ba2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ba4:	d3f9      	bcc.n	8000b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f002 fde7 	bl	8003778 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000baa:	f7ff fcd5 	bl	8000558 <main>

08000bae <LoopForever>:

LoopForever:
    b LoopForever
 8000bae:	e7fe      	b.n	8000bae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000bb4:	08003840 	.word	0x08003840
	ldr	r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bbc:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000bc0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000bc4:	2000013c 	.word	0x2000013c

08000bc8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_IRQHandler>

08000bca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 feb9 	bl	800194c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f000 f80e 	bl	8000bfc <HAL_InitTick>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	e001      	b.n	8000bf0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bec:	f7ff fe98 	bl	8000920 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c08:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <HAL_InitTick+0x6c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d023      	beq.n	8000c58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c10:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_InitTick+0x70>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <HAL_InitTick+0x6c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fec5 	bl	80019b6 <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d10f      	bne.n	8000c52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d809      	bhi.n	8000c4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f000 fe8f 	bl	8001962 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c44:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <HAL_InitTick+0x74>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e007      	b.n	8000c5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73fb      	strb	r3, [r7, #15]
 8000c50:	e004      	b.n	8000c5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
 8000c54:	73fb      	strb	r3, [r7, #15]
 8000c56:	e001      	b.n	8000c5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000004 	.word	0x20000004

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	20000138 	.word	0x20000138

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	; (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000138 	.word	0x20000138

08000cb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d101      	bne.n	8000cc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e0ed      	b.n	8000ea2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d102      	bne.n	8000cd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff fe48 	bl	8000968 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f022 0202 	bic.w	r2, r2, #2
 8000ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ce8:	f7ff ffd8 	bl	8000c9c <HAL_GetTick>
 8000cec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cee:	e012      	b.n	8000d16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf0:	f7ff ffd4 	bl	8000c9c <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b0a      	cmp	r3, #10
 8000cfc:	d90b      	bls.n	8000d16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2205      	movs	r2, #5
 8000d0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e0c5      	b.n	8000ea2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0302 	and.w	r3, r3, #2
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1e5      	bne.n	8000cf0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f042 0201 	orr.w	r2, r2, #1
 8000d32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d34:	f7ff ffb2 	bl	8000c9c <HAL_GetTick>
 8000d38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d3a:	e012      	b.n	8000d62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d3c:	f7ff ffae 	bl	8000c9c <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b0a      	cmp	r3, #10
 8000d48:	d90b      	bls.n	8000d62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2205      	movs	r2, #5
 8000d5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e09f      	b.n	8000ea2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0e5      	beq.n	8000d3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7e1b      	ldrb	r3, [r3, #24]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d108      	bne.n	8000d8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	e007      	b.n	8000d9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	7e5b      	ldrb	r3, [r3, #25]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d108      	bne.n	8000db4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	e007      	b.n	8000dc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	7e9b      	ldrb	r3, [r3, #26]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d108      	bne.n	8000dde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f042 0220 	orr.w	r2, r2, #32
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	e007      	b.n	8000dee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0220 	bic.w	r2, r2, #32
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7edb      	ldrb	r3, [r3, #27]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d108      	bne.n	8000e08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f022 0210 	bic.w	r2, r2, #16
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	e007      	b.n	8000e18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f042 0210 	orr.w	r2, r2, #16
 8000e16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	7f1b      	ldrb	r3, [r3, #28]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d108      	bne.n	8000e32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f042 0208 	orr.w	r2, r2, #8
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	e007      	b.n	8000e42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0208 	bic.w	r2, r2, #8
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7f5b      	ldrb	r3, [r3, #29]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d108      	bne.n	8000e5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f042 0204 	orr.w	r2, r2, #4
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	e007      	b.n	8000e6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f022 0204 	bic.w	r2, r2, #4
 8000e6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	431a      	orrs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	695b      	ldr	r3, [r3, #20]
 8000e80:	ea42 0103 	orr.w	r1, r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	1e5a      	subs	r2, r3, #1
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2200      	movs	r2, #0
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b087      	sub	sp, #28
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
 8000eb2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec2:	7cfb      	ldrb	r3, [r7, #19]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d003      	beq.n	8000ed0 <HAL_CAN_ConfigFilter+0x26>
 8000ec8:	7cfb      	ldrb	r3, [r7, #19]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	f040 80aa 	bne.w	8001024 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ed6:	f043 0201 	orr.w	r2, r3, #1
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	695b      	ldr	r3, [r3, #20]
 8000ee4:	f003 031f 	and.w	r3, r3, #31
 8000ee8:	2201      	movs	r2, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d123      	bne.n	8000f52 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	401a      	ands	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f2c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	3248      	adds	r2, #72	; 0x48
 8000f32:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f46:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f48:	6979      	ldr	r1, [r7, #20]
 8000f4a:	3348      	adds	r3, #72	; 0x48
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	440b      	add	r3, r1
 8000f50:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d122      	bne.n	8000fa0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	431a      	orrs	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f7a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3248      	adds	r2, #72	; 0x48
 8000f80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f94:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f96:	6979      	ldr	r1, [r7, #20]
 8000f98:	3348      	adds	r3, #72	; 0x48
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	440b      	add	r3, r1
 8000f9e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d109      	bne.n	8000fbc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000fba:	e007      	b.n	8000fcc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d109      	bne.n	8000fe8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fe6:	e007      	b.n	8000ff8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d107      	bne.n	8001010 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	431a      	orrs	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001016:	f023 0201 	bic.w	r2, r3, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	e006      	b.n	8001032 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
  }
}
 8001032:	4618      	mov	r0, r3
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b084      	sub	sp, #16
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3020 	ldrb.w	r3, [r3, #32]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b01      	cmp	r3, #1
 8001050:	d12e      	bne.n	80010b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2202      	movs	r2, #2
 8001056:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f022 0201 	bic.w	r2, r2, #1
 8001068:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800106a:	f7ff fe17 	bl	8000c9c <HAL_GetTick>
 800106e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001070:	e012      	b.n	8001098 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001072:	f7ff fe13 	bl	8000c9c <HAL_GetTick>
 8001076:	4602      	mov	r2, r0
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b0a      	cmp	r3, #10
 800107e:	d90b      	bls.n	8001098 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001084:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2205      	movs	r2, #5
 8001090:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e012      	b.n	80010be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1e5      	bne.n	8001072 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e006      	b.n	80010be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
  }
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010c6:	b480      	push	{r7}
 80010c8:	b087      	sub	sp, #28
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010da:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d003      	beq.n	80010ea <HAL_CAN_GetRxMessage+0x24>
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	f040 80f3 	bne.w	80012d0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10e      	bne.n	800110e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d116      	bne.n	800112c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e0e7      	b.n	80012de <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	691b      	ldr	r3, [r3, #16]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d107      	bne.n	800112c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0d8      	b.n	80012de <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	331b      	adds	r3, #27
 8001134:	011b      	lsls	r3, r3, #4
 8001136:	4413      	add	r3, r2
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0204 	and.w	r2, r3, #4
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	331b      	adds	r3, #27
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	4413      	add	r3, r2
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	0d5b      	lsrs	r3, r3, #21
 800115a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e00b      	b.n	800117c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	331b      	adds	r3, #27
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	4413      	add	r3, r2
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	08db      	lsrs	r3, r3, #3
 8001174:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	331b      	adds	r3, #27
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	4413      	add	r3, r2
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0202 	and.w	r2, r3, #2
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	331b      	adds	r3, #27
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	4413      	add	r3, r2
 800119e:	3304      	adds	r3, #4
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 020f 	and.w	r2, r3, #15
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	331b      	adds	r3, #27
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	4413      	add	r3, r2
 80011b6:	3304      	adds	r3, #4
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	331b      	adds	r3, #27
 80011ca:	011b      	lsls	r3, r3, #4
 80011cc:	4413      	add	r3, r2
 80011ce:	3304      	adds	r3, #4
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	0c1b      	lsrs	r3, r3, #16
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	4413      	add	r3, r2
 80011e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	4413      	add	r3, r2
 80011fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	0a1a      	lsrs	r2, r3, #8
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3301      	adds	r3, #1
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	0c1a      	lsrs	r2, r3, #16
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3302      	adds	r3, #2
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4413      	add	r3, r2
 800122e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	0e1a      	lsrs	r2, r3, #24
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	3303      	adds	r3, #3
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	4413      	add	r3, r2
 8001248:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	3304      	adds	r3, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	4413      	add	r3, r2
 8001260:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	0a1a      	lsrs	r2, r3, #8
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	3305      	adds	r3, #5
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4413      	add	r3, r2
 800127a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	0c1a      	lsrs	r2, r3, #16
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3306      	adds	r3, #6
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	4413      	add	r3, r2
 8001294:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	0e1a      	lsrs	r2, r3, #24
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	3307      	adds	r3, #7
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d108      	bne.n	80012bc <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f042 0220 	orr.w	r2, r2, #32
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	e007      	b.n	80012cc <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	691a      	ldr	r2, [r3, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0220 	orr.w	r2, r2, #32
 80012ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e006      	b.n	80012de <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
  }
}
 80012de:	4618      	mov	r0, r3
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fe:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001300:	7afb      	ldrb	r3, [r7, #11]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d002      	beq.n	800130c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001306:	7afb      	ldrb	r3, [r7, #11]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d10f      	bne.n	800132c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d106      	bne.n	8001320 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	e005      	b.n	800132c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800132c:	68fb      	ldr	r3, [r7, #12]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b08a      	sub	sp, #40	; 0x28
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d07c      	beq.n	800147a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d023      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2201      	movs	r2, #1
 8001390:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f983 	bl	80016a8 <HAL_CAN_TxMailbox0CompleteCallback>
 80013a2:	e016      	b.n	80013d2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d004      	beq.n	80013b8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
 80013b6:	e00c      	b.n	80013d2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d004      	beq.n	80013cc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ca:	e002      	b.n	80013d2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f989 	bl	80016e4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d024      	beq.n	8001426 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f000 f963 	bl	80016bc <HAL_CAN_TxMailbox1CompleteCallback>
 80013f6:	e016      	b.n	8001426 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
 800140a:	e00c      	b.n	8001426 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
 800141e:	e002      	b.n	8001426 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f969 	bl	80016f8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d024      	beq.n	800147a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001438:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 f943 	bl	80016d0 <HAL_CAN_TxMailbox2CompleteCallback>
 800144a:	e016      	b.n	800147a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d004      	beq.n	8001460 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	e00c      	b.n	800147a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d004      	beq.n	8001474 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
 8001472:	e002      	b.n	800147a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f949 	bl	800170c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00c      	beq.n	800149e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001494:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2210      	movs	r2, #16
 800149c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00b      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2208      	movs	r2, #8
 80014b8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f000 f93a 	bl	8001734 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014c0:	6a3b      	ldr	r3, [r7, #32]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d009      	beq.n	80014de <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f921 	bl	8001720 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d00c      	beq.n	8001502 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d007      	beq.n	8001502 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2210      	movs	r2, #16
 8001500:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001502:	6a3b      	ldr	r3, [r7, #32]
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00b      	beq.n	8001524 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2208      	movs	r2, #8
 800151c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f91c 	bl	800175c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	691b      	ldr	r3, [r3, #16]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f903 	bl	8001748 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001542:	6a3b      	ldr	r3, [r7, #32]
 8001544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d00b      	beq.n	8001564 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f003 0310 	and.w	r3, r3, #16
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2210      	movs	r2, #16
 800155c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f906 	bl	8001770 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001564:	6a3b      	ldr	r3, [r7, #32]
 8001566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d00b      	beq.n	8001586 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b00      	cmp	r3, #0
 8001576:	d006      	beq.n	8001586 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2208      	movs	r2, #8
 800157e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f8ff 	bl	8001784 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001586:	6a3b      	ldr	r3, [r7, #32]
 8001588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d07b      	beq.n	8001688 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	d072      	beq.n	8001680 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015d2:	6a3b      	ldr	r3, [r7, #32]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d008      	beq.n	80015ee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015ee:	6a3b      	ldr	r3, [r7, #32]
 80015f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d043      	beq.n	8001680 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d03e      	beq.n	8001680 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001608:	2b60      	cmp	r3, #96	; 0x60
 800160a:	d02b      	beq.n	8001664 <HAL_CAN_IRQHandler+0x32a>
 800160c:	2b60      	cmp	r3, #96	; 0x60
 800160e:	d82e      	bhi.n	800166e <HAL_CAN_IRQHandler+0x334>
 8001610:	2b50      	cmp	r3, #80	; 0x50
 8001612:	d022      	beq.n	800165a <HAL_CAN_IRQHandler+0x320>
 8001614:	2b50      	cmp	r3, #80	; 0x50
 8001616:	d82a      	bhi.n	800166e <HAL_CAN_IRQHandler+0x334>
 8001618:	2b40      	cmp	r3, #64	; 0x40
 800161a:	d019      	beq.n	8001650 <HAL_CAN_IRQHandler+0x316>
 800161c:	2b40      	cmp	r3, #64	; 0x40
 800161e:	d826      	bhi.n	800166e <HAL_CAN_IRQHandler+0x334>
 8001620:	2b30      	cmp	r3, #48	; 0x30
 8001622:	d010      	beq.n	8001646 <HAL_CAN_IRQHandler+0x30c>
 8001624:	2b30      	cmp	r3, #48	; 0x30
 8001626:	d822      	bhi.n	800166e <HAL_CAN_IRQHandler+0x334>
 8001628:	2b10      	cmp	r3, #16
 800162a:	d002      	beq.n	8001632 <HAL_CAN_IRQHandler+0x2f8>
 800162c:	2b20      	cmp	r3, #32
 800162e:	d005      	beq.n	800163c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001630:	e01d      	b.n	800166e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	f043 0308 	orr.w	r3, r3, #8
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800163a:	e019      	b.n	8001670 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	f043 0310 	orr.w	r3, r3, #16
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001644:	e014      	b.n	8001670 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001648:	f043 0320 	orr.w	r3, r3, #32
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800164e:	e00f      	b.n	8001670 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001658:	e00a      	b.n	8001670 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001662:	e005      	b.n	8001670 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800166c:	e000      	b.n	8001670 <HAL_CAN_IRQHandler+0x336>
            break;
 800166e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699a      	ldr	r2, [r3, #24]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800167e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2204      	movs	r2, #4
 8001686:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	431a      	orrs	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f87c 	bl	8001798 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017c2:	68ba      	ldr	r2, [r7, #8]
 80017c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017c8:	4013      	ands	r3, r2
 80017ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017de:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <__NVIC_SetPriorityGrouping+0x44>)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	60d3      	str	r3, [r2, #12]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f8:	4b04      	ldr	r3, [pc, #16]	; (800180c <__NVIC_GetPriorityGrouping+0x18>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	0a1b      	lsrs	r3, r3, #8
 80017fe:	f003 0307 	and.w	r3, r3, #7
}
 8001802:	4618      	mov	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	2b00      	cmp	r3, #0
 8001820:	db0b      	blt.n	800183a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	f003 021f 	and.w	r2, r3, #31
 8001828:	4907      	ldr	r1, [pc, #28]	; (8001848 <__NVIC_EnableIRQ+0x38>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	095b      	lsrs	r3, r3, #5
 8001830:	2001      	movs	r0, #1
 8001832:	fa00 f202 	lsl.w	r2, r0, r2
 8001836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800183a:	bf00      	nop
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	e000e100 	.word	0xe000e100

0800184c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	6039      	str	r1, [r7, #0]
 8001856:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185c:	2b00      	cmp	r3, #0
 800185e:	db0a      	blt.n	8001876 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	b2da      	uxtb	r2, r3
 8001864:	490c      	ldr	r1, [pc, #48]	; (8001898 <__NVIC_SetPriority+0x4c>)
 8001866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186a:	0112      	lsls	r2, r2, #4
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	440b      	add	r3, r1
 8001870:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001874:	e00a      	b.n	800188c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <__NVIC_SetPriority+0x50>)
 800187c:	79fb      	ldrb	r3, [r7, #7]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	3b04      	subs	r3, #4
 8001884:	0112      	lsls	r2, r2, #4
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	440b      	add	r3, r1
 800188a:	761a      	strb	r2, [r3, #24]
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000e100 	.word	0xe000e100
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b089      	sub	sp, #36	; 0x24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f1c3 0307 	rsb	r3, r3, #7
 80018ba:	2b04      	cmp	r3, #4
 80018bc:	bf28      	it	cs
 80018be:	2304      	movcs	r3, #4
 80018c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	3304      	adds	r3, #4
 80018c6:	2b06      	cmp	r3, #6
 80018c8:	d902      	bls.n	80018d0 <NVIC_EncodePriority+0x30>
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3b03      	subs	r3, #3
 80018ce:	e000      	b.n	80018d2 <NVIC_EncodePriority+0x32>
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	f04f 32ff 	mov.w	r2, #4294967295
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43da      	mvns	r2, r3
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	401a      	ands	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa01 f303 	lsl.w	r3, r1, r3
 80018f2:	43d9      	mvns	r1, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	4313      	orrs	r3, r2
         );
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3724      	adds	r7, #36	; 0x24
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3b01      	subs	r3, #1
 8001914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001918:	d301      	bcc.n	800191e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800191a:	2301      	movs	r3, #1
 800191c:	e00f      	b.n	800193e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <SysTick_Config+0x40>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3b01      	subs	r3, #1
 8001924:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001926:	210f      	movs	r1, #15
 8001928:	f04f 30ff 	mov.w	r0, #4294967295
 800192c:	f7ff ff8e 	bl	800184c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <SysTick_Config+0x40>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001936:	4b04      	ldr	r3, [pc, #16]	; (8001948 <SysTick_Config+0x40>)
 8001938:	2207      	movs	r2, #7
 800193a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ff29 	bl	80017ac <__NVIC_SetPriorityGrouping>
}
 800195a:	bf00      	nop
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	4603      	mov	r3, r0
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
 800196e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001974:	f7ff ff3e 	bl	80017f4 <__NVIC_GetPriorityGrouping>
 8001978:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68b9      	ldr	r1, [r7, #8]
 800197e:	6978      	ldr	r0, [r7, #20]
 8001980:	f7ff ff8e 	bl	80018a0 <NVIC_EncodePriority>
 8001984:	4602      	mov	r2, r0
 8001986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff5d 	bl	800184c <__NVIC_SetPriority>
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff ff31 	bl	8001810 <__NVIC_EnableIRQ>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ffa2 	bl	8001908 <SysTick_Config>
 80019c4:	4603      	mov	r3, r0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
	...

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	e148      	b.n	8001c72 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f000 813a 	beq.w	8001c6c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d00b      	beq.n	8001a18 <HAL_GPIO_Init+0x48>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d007      	beq.n	8001a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0c:	2b11      	cmp	r3, #17
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b12      	cmp	r3, #18
 8001a16:	d130      	bne.n	8001a7a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4e:	2201      	movs	r2, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	091b      	lsrs	r3, r3, #4
 8001a64:	f003 0201 	and.w	r2, r3, #1
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0xea>
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b12      	cmp	r3, #18
 8001ab8:	d123      	bne.n	8001b02 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	08da      	lsrs	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3208      	adds	r2, #8
 8001ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	220f      	movs	r2, #15
 8001ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	6939      	ldr	r1, [r7, #16]
 8001afe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	4013      	ands	r3, r2
 8001b18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0203 	and.w	r2, r3, #3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f000 8094 	beq.w	8001c6c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b44:	4b52      	ldr	r3, [pc, #328]	; (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b48:	4a51      	ldr	r2, [pc, #324]	; (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b50:	4b4f      	ldr	r3, [pc, #316]	; (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b5c:	4a4d      	ldr	r2, [pc, #308]	; (8001c94 <HAL_GPIO_Init+0x2c4>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	089b      	lsrs	r3, r3, #2
 8001b62:	3302      	adds	r3, #2
 8001b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	220f      	movs	r2, #15
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b86:	d00d      	beq.n	8001ba4 <HAL_GPIO_Init+0x1d4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a43      	ldr	r2, [pc, #268]	; (8001c98 <HAL_GPIO_Init+0x2c8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d007      	beq.n	8001ba0 <HAL_GPIO_Init+0x1d0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a42      	ldr	r2, [pc, #264]	; (8001c9c <HAL_GPIO_Init+0x2cc>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d101      	bne.n	8001b9c <HAL_GPIO_Init+0x1cc>
 8001b98:	2302      	movs	r3, #2
 8001b9a:	e004      	b.n	8001ba6 <HAL_GPIO_Init+0x1d6>
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	e002      	b.n	8001ba6 <HAL_GPIO_Init+0x1d6>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_GPIO_Init+0x1d6>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	f002 0203 	and.w	r2, r2, #3
 8001bac:	0092      	lsls	r2, r2, #2
 8001bae:	4093      	lsls	r3, r2
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bb6:	4937      	ldr	r1, [pc, #220]	; (8001c94 <HAL_GPIO_Init+0x2c4>)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	089b      	lsrs	r3, r3, #2
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bc4:	4b36      	ldr	r3, [pc, #216]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d003      	beq.n	8001be8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001be8:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001bee:	4b2c      	ldr	r3, [pc, #176]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c12:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c18:	4b21      	ldr	r3, [pc, #132]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d003      	beq.n	8001c3c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c3c:	4a18      	ldr	r2, [pc, #96]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c66:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <HAL_GPIO_Init+0x2d0>)
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f47f aeaf 	bne.w	80019e0 <HAL_GPIO_Init+0x10>
  }
}
 8001c82:	bf00      	nop
 8001c84:	bf00      	nop
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40010000 	.word	0x40010000
 8001c98:	48000400 	.word	0x48000400
 8001c9c:	48000800 	.word	0x48000800
 8001ca0:	40010400 	.word	0x40010400

08001ca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	807b      	strh	r3, [r7, #2]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cb4:	787b      	ldrb	r3, [r7, #1]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cc2:	887a      	ldrh	r2, [r7, #2]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce2:	6013      	str	r3, [r2, #0]
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40007000 	.word	0x40007000

08001cf4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_PWREx_GetVoltageRange+0x18>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40007000 	.word	0x40007000

08001d10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d1e:	d130      	bne.n	8001d82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d20:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d2c:	d038      	beq.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d36:	4a1e      	ldr	r2, [pc, #120]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2232      	movs	r2, #50	; 0x32
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	4a1b      	ldr	r2, [pc, #108]	; (8001db8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	0c9b      	lsrs	r3, r3, #18
 8001d50:	3301      	adds	r3, #1
 8001d52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d54:	e002      	b.n	8001d5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d5c:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d68:	d102      	bne.n	8001d70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f2      	bne.n	8001d56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d7c:	d110      	bne.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e00f      	b.n	8001da2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d82:	4b0b      	ldr	r3, [pc, #44]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8e:	d007      	beq.n	8001da0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40007000 	.word	0x40007000
 8001db4:	20000000 	.word	0x20000000
 8001db8:	431bde83 	.word	0x431bde83

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f000 bc11 	b.w	80025f2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dd0:	4ba0      	ldr	r3, [pc, #640]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dda:	4b9e      	ldr	r3, [pc, #632]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80e4 	beq.w	8001fba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4c>
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	f040 808b 	bne.w	8001f16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	f040 8087 	bne.w	8001f16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e08:	4b92      	ldr	r3, [pc, #584]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_OscConfig+0x64>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e3e8      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	4b8b      	ldr	r3, [pc, #556]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d004      	beq.n	8001e3a <HAL_RCC_OscConfig+0x7e>
 8001e30:	4b88      	ldr	r3, [pc, #544]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e38:	e005      	b.n	8001e46 <HAL_RCC_OscConfig+0x8a>
 8001e3a:	4b86      	ldr	r3, [pc, #536]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d223      	bcs.n	8001e92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 fd7a 	bl	8002948 <RCC_SetFlashLatencyFromMSIRange>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e3c9      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5e:	4b7d      	ldr	r3, [pc, #500]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a7c      	ldr	r2, [pc, #496]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b7a      	ldr	r3, [pc, #488]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4977      	ldr	r1, [pc, #476]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7c:	4b75      	ldr	r3, [pc, #468]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	4972      	ldr	r1, [pc, #456]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
 8001e90:	e025      	b.n	8001ede <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e92:	4b70      	ldr	r3, [pc, #448]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a6f      	ldr	r2, [pc, #444]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	6013      	str	r3, [r2, #0]
 8001e9e:	4b6d      	ldr	r3, [pc, #436]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	496a      	ldr	r1, [pc, #424]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001eb0:	4b68      	ldr	r3, [pc, #416]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	4965      	ldr	r1, [pc, #404]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d109      	bne.n	8001ede <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f000 fd3a 	bl	8002948 <RCC_SetFlashLatencyFromMSIRange>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e389      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ede:	f000 fc6f 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b5b      	ldr	r3, [pc, #364]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	495a      	ldr	r1, [pc, #360]	; (8002058 <HAL_RCC_OscConfig+0x29c>)
 8001ef0:	5ccb      	ldrb	r3, [r1, r3]
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8001efa:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_RCC_OscConfig+0x2a0>)
 8001efc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001efe:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_RCC_OscConfig+0x2a4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fe7a 	bl	8000bfc <HAL_InitTick>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d052      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	e36d      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d032      	beq.n	8001f84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f1e:	4b4d      	ldr	r3, [pc, #308]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a4c      	ldr	r2, [pc, #304]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f2a:	f7fe feb7 	bl	8000c9c <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f30:	e008      	b.n	8001f44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f32:	f7fe feb3 	bl	8000c9c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d901      	bls.n	8001f44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	e356      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d0f0      	beq.n	8001f32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f50:	4b40      	ldr	r3, [pc, #256]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3f      	ldr	r2, [pc, #252]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f56:	f043 0308 	orr.w	r3, r3, #8
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	493a      	ldr	r1, [pc, #232]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f6e:	4b39      	ldr	r3, [pc, #228]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	4935      	ldr	r1, [pc, #212]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
 8001f82:	e01a      	b.n	8001fba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f84:	4b33      	ldr	r3, [pc, #204]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a32      	ldr	r2, [pc, #200]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001f8a:	f023 0301 	bic.w	r3, r3, #1
 8001f8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f90:	f7fe fe84 	bl	8000c9c <HAL_GetTick>
 8001f94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f98:	f7fe fe80 	bl	8000c9c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e323      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001faa:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x1dc>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d073      	beq.n	80020ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x21c>
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d063      	beq.n	80020ac <HAL_RCC_OscConfig+0x2f0>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d15f      	bne.n	80020ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e300      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ff8:	d106      	bne.n	8002008 <HAL_RCC_OscConfig+0x24c>
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e01d      	b.n	8002044 <HAL_RCC_OscConfig+0x288>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002010:	d10c      	bne.n	800202c <HAL_RCC_OscConfig+0x270>
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8002018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6013      	str	r3, [r2, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0x288>
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 8002032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a05      	ldr	r2, [pc, #20]	; (8002054 <HAL_RCC_OscConfig+0x298>)
 800203e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01b      	beq.n	8002084 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe fe26 	bl	8000c9c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002052:	e010      	b.n	8002076 <HAL_RCC_OscConfig+0x2ba>
 8002054:	40021000 	.word	0x40021000
 8002058:	080037e8 	.word	0x080037e8
 800205c:	20000000 	.word	0x20000000
 8002060:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7fe fe1a 	bl	8000c9c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	; 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e2bd      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002076:	4baf      	ldr	r3, [pc, #700]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x2a8>
 8002082:	e014      	b.n	80020ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002084:	f7fe fe0a 	bl	8000c9c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7fe fe06 	bl	8000c9c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	; 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e2a9      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800209e:	4ba5      	ldr	r3, [pc, #660]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x2d0>
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d060      	beq.n	800217c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2b04      	cmp	r3, #4
 80020be:	d005      	beq.n	80020cc <HAL_RCC_OscConfig+0x310>
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	2b0c      	cmp	r3, #12
 80020c4:	d119      	bne.n	80020fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d116      	bne.n	80020fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020cc:	4b99      	ldr	r3, [pc, #612]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_OscConfig+0x328>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e286      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e4:	4b93      	ldr	r3, [pc, #588]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	4990      	ldr	r1, [pc, #576]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020f8:	e040      	b.n	800217c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d023      	beq.n	800214a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002102:	4b8c      	ldr	r3, [pc, #560]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a8b      	ldr	r2, [pc, #556]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210e:	f7fe fdc5 	bl	8000c9c <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002116:	f7fe fdc1 	bl	8000c9c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e264      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002128:	4b82      	ldr	r3, [pc, #520]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b7f      	ldr	r3, [pc, #508]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	061b      	lsls	r3, r3, #24
 8002142:	497c      	ldr	r1, [pc, #496]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
 8002148:	e018      	b.n	800217c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	4b7a      	ldr	r3, [pc, #488]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a79      	ldr	r2, [pc, #484]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002156:	f7fe fda1 	bl	8000c9c <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800215c:	e008      	b.n	8002170 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800215e:	f7fe fd9d 	bl	8000c9c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d901      	bls.n	8002170 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800216c:	2303      	movs	r3, #3
 800216e:	e240      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002170:	4b70      	ldr	r3, [pc, #448]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002178:	2b00      	cmp	r3, #0
 800217a:	d1f0      	bne.n	800215e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0308 	and.w	r3, r3, #8
 8002184:	2b00      	cmp	r3, #0
 8002186:	d03c      	beq.n	8002202 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d01c      	beq.n	80021ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002190:	4b68      	ldr	r3, [pc, #416]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002196:	4a67      	ldr	r2, [pc, #412]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7fe fd7c 	bl	8000c9c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a8:	f7fe fd78 	bl	8000c9c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e21b      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ba:	4b5e      	ldr	r3, [pc, #376]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80021bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0ef      	beq.n	80021a8 <HAL_RCC_OscConfig+0x3ec>
 80021c8:	e01b      	b.n	8002202 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ca:	4b5a      	ldr	r3, [pc, #360]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80021cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d0:	4a58      	ldr	r2, [pc, #352]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021da:	f7fe fd5f 	bl	8000c9c <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e2:	f7fe fd5b 	bl	8000c9c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1fe      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f4:	4b4f      	ldr	r3, [pc, #316]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80021f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1ef      	bne.n	80021e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0304 	and.w	r3, r3, #4
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 80a6 	beq.w	800235c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002214:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10d      	bne.n	800223c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002220:	4b44      	ldr	r3, [pc, #272]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	4a43      	ldr	r2, [pc, #268]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222a:	6593      	str	r3, [r2, #88]	; 0x58
 800222c:	4b41      	ldr	r3, [pc, #260]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002238:	2301      	movs	r3, #1
 800223a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223c:	4b3e      	ldr	r3, [pc, #248]	; (8002338 <HAL_RCC_OscConfig+0x57c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d118      	bne.n	800227a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002248:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <HAL_RCC_OscConfig+0x57c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a3a      	ldr	r2, [pc, #232]	; (8002338 <HAL_RCC_OscConfig+0x57c>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002254:	f7fe fd22 	bl	8000c9c <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225c:	f7fe fd1e 	bl	8000c9c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e1c1      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800226e:	4b32      	ldr	r3, [pc, #200]	; (8002338 <HAL_RCC_OscConfig+0x57c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x4d8>
 8002282:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002292:	e024      	b.n	80022de <HAL_RCC_OscConfig+0x522>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b05      	cmp	r3, #5
 800229a:	d110      	bne.n	80022be <HAL_RCC_OscConfig+0x502>
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	4a24      	ldr	r2, [pc, #144]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b2:	4a20      	ldr	r2, [pc, #128]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022bc:	e00f      	b.n	80022de <HAL_RCC_OscConfig+0x522>
 80022be:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c4:	4a1b      	ldr	r2, [pc, #108]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022c6:	f023 0301 	bic.w	r3, r3, #1
 80022ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d4:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 80022d6:	f023 0304 	bic.w	r3, r3, #4
 80022da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d016      	beq.n	8002314 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7fe fcd9 	bl	8000c9c <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ee:	f7fe fcd5 	bl	8000c9c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e176      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_OscConfig+0x578>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0ed      	beq.n	80022ee <HAL_RCC_OscConfig+0x532>
 8002312:	e01a      	b.n	800234a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fe fcc2 	bl	8000c9c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800231a:	e00f      	b.n	800233c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7fe fcbe 	bl	8000c9c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d906      	bls.n	800233c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e15f      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800233c:	4baa      	ldr	r3, [pc, #680]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1e8      	bne.n	800231c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800234a:	7ffb      	ldrb	r3, [r7, #31]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002350:	4ba5      	ldr	r3, [pc, #660]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002354:	4aa4      	ldr	r2, [pc, #656]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800235a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0320 	and.w	r3, r3, #32
 8002364:	2b00      	cmp	r3, #0
 8002366:	d03c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01c      	beq.n	80023aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002370:	4b9d      	ldr	r3, [pc, #628]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002372:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002376:	4a9c      	ldr	r2, [pc, #624]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7fe fc8c 	bl	8000c9c <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002388:	f7fe fc88 	bl	8000c9c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e12b      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800239a:	4b93      	ldr	r3, [pc, #588]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 800239c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ef      	beq.n	8002388 <HAL_RCC_OscConfig+0x5cc>
 80023a8:	e01b      	b.n	80023e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023aa:	4b8f      	ldr	r3, [pc, #572]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80023ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023b0:	4a8d      	ldr	r2, [pc, #564]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe fc6f 	bl	8000c9c <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023c2:	f7fe fc6b 	bl	8000c9c <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e10e      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023d4:	4b84      	ldr	r3, [pc, #528]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80023d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ef      	bne.n	80023c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8102 	beq.w	80025f0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	f040 80c5 	bne.w	8002580 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023f6:	4b7c      	ldr	r3, [pc, #496]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f003 0203 	and.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	429a      	cmp	r2, r3
 8002408:	d12c      	bne.n	8002464 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	3b01      	subs	r3, #1
 8002416:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002418:	429a      	cmp	r2, r3
 800241a:	d123      	bne.n	8002464 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d11b      	bne.n	8002464 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d113      	bne.n	8002464 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	085b      	lsrs	r3, r3, #1
 8002448:	3b01      	subs	r3, #1
 800244a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d109      	bne.n	8002464 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	085b      	lsrs	r3, r3, #1
 800245c:	3b01      	subs	r3, #1
 800245e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d067      	beq.n	8002534 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d062      	beq.n	8002530 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800246a:	4b5f      	ldr	r3, [pc, #380]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0bb      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800247a:	4b5b      	ldr	r3, [pc, #364]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a5a      	ldr	r2, [pc, #360]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002480:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002484:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002486:	f7fe fc09 	bl	8000c9c <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe fc05 	bl	8000c9c <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e0a8      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a0:	4b51      	ldr	r3, [pc, #324]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f0      	bne.n	800248e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ac:	4b4e      	ldr	r3, [pc, #312]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	4b4e      	ldr	r3, [pc, #312]	; (80025ec <HAL_RCC_OscConfig+0x830>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024bc:	3a01      	subs	r2, #1
 80024be:	0112      	lsls	r2, r2, #4
 80024c0:	4311      	orrs	r1, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024c6:	0212      	lsls	r2, r2, #8
 80024c8:	4311      	orrs	r1, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80024ce:	0852      	lsrs	r2, r2, #1
 80024d0:	3a01      	subs	r2, #1
 80024d2:	0552      	lsls	r2, r2, #21
 80024d4:	4311      	orrs	r1, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024da:	0852      	lsrs	r2, r2, #1
 80024dc:	3a01      	subs	r2, #1
 80024de:	0652      	lsls	r2, r2, #25
 80024e0:	4311      	orrs	r1, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024e6:	06d2      	lsls	r2, r2, #27
 80024e8:	430a      	orrs	r2, r1
 80024ea:	493f      	ldr	r1, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024f0:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3c      	ldr	r2, [pc, #240]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80024f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024fc:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a39      	ldr	r2, [pc, #228]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002502:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002506:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002508:	f7fe fbc8 	bl	8000c9c <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fbc4 	bl	8000c9c <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e067      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002522:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0f0      	beq.n	8002510 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800252e:	e05f      	b.n	80025f0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e05e      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002534:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d157      	bne.n	80025f0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002540:	4b29      	ldr	r3, [pc, #164]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a28      	ldr	r2, [pc, #160]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800254a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800254c:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4a25      	ldr	r2, [pc, #148]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002556:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002558:	f7fe fba0 	bl	8000c9c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002560:	f7fe fb9c 	bl	8000c9c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e03f      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x7a4>
 800257e:	e037      	b.n	80025f0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	2b0c      	cmp	r3, #12
 8002584:	d02d      	beq.n	80025e2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 800258c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002590:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d105      	bne.n	80025aa <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80025a4:	f023 0303 	bic.w	r3, r3, #3
 80025a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	4a0e      	ldr	r2, [pc, #56]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80025b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80025b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fb6f 	bl	8000c9c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c2:	f7fe fb6b 	bl	8000c9c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e00e      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <HAL_RCC_OscConfig+0x82c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f0      	bne.n	80025c2 <HAL_RCC_OscConfig+0x806>
 80025e0:	e006      	b.n	80025f0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e005      	b.n	80025f2 <HAL_RCC_OscConfig+0x836>
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop

080025fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d101      	bne.n	8002610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e0c8      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002610:	4b66      	ldr	r3, [pc, #408]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d910      	bls.n	8002640 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800261e:	4b63      	ldr	r3, [pc, #396]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 0207 	bic.w	r2, r3, #7
 8002626:	4961      	ldr	r1, [pc, #388]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	4313      	orrs	r3, r2
 800262c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b5f      	ldr	r3, [pc, #380]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d001      	beq.n	8002640 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b0      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b00      	cmp	r3, #0
 800264a:	d04c      	beq.n	80026e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b03      	cmp	r3, #3
 8002652:	d107      	bne.n	8002664 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002654:	4b56      	ldr	r3, [pc, #344]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d121      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e09e      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d107      	bne.n	800267c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d115      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e092      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d107      	bne.n	8002694 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002684:	4b4a      	ldr	r3, [pc, #296]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e086      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002694:	4b46      	ldr	r3, [pc, #280]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e07e      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026a4:	4b42      	ldr	r3, [pc, #264]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 0203 	bic.w	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	493f      	ldr	r1, [pc, #252]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b6:	f7fe faf1 	bl	8000c9c <HAL_GetTick>
 80026ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026be:	f7fe faed 	bl	8000c9c <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e066      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d4:	4b36      	ldr	r3, [pc, #216]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f003 020c 	and.w	r2, r3, #12
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d1eb      	bne.n	80026be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d008      	beq.n	8002704 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f2:	4b2f      	ldr	r3, [pc, #188]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	492c      	ldr	r1, [pc, #176]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002704:	4b29      	ldr	r3, [pc, #164]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d210      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 0207 	bic.w	r2, r3, #7
 800271a:	4924      	ldr	r1, [pc, #144]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_RCC_ClockConfig+0x1b0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e036      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4918      	ldr	r1, [pc, #96]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0308 	and.w	r3, r3, #8
 800275a:	2b00      	cmp	r3, #0
 800275c:	d009      	beq.n	8002772 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4910      	ldr	r1, [pc, #64]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002772:	f000 f825 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8002776:	4602      	mov	r2, r0
 8002778:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_RCC_ClockConfig+0x1b4>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 030f 	and.w	r3, r3, #15
 8002782:	490c      	ldr	r1, [pc, #48]	; (80027b4 <HAL_RCC_ClockConfig+0x1b8>)
 8002784:	5ccb      	ldrb	r3, [r1, r3]
 8002786:	f003 031f 	and.w	r3, r3, #31
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a0a      	ldr	r2, [pc, #40]	; (80027b8 <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x1c0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fa30 	bl	8000bfc <HAL_InitTick>
 800279c:	4603      	mov	r3, r0
 800279e:	72fb      	strb	r3, [r7, #11]

  return status;
 80027a0:	7afb      	ldrb	r3, [r7, #11]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40022000 	.word	0x40022000
 80027b0:	40021000 	.word	0x40021000
 80027b4:	080037e8 	.word	0x080037e8
 80027b8:	20000000 	.word	0x20000000
 80027bc:	20000004 	.word	0x20000004

080027c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b089      	sub	sp, #36	; 0x24
 80027c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ce:	4b3e      	ldr	r3, [pc, #248]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d8:	4b3b      	ldr	r3, [pc, #236]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0303 	and.w	r3, r3, #3
 80027e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x34>
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d121      	bne.n	8002832 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d11e      	bne.n	8002832 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002800:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	61fb      	str	r3, [r7, #28]
 800280e:	e005      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002810:	4b2d      	ldr	r3, [pc, #180]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	091b      	lsrs	r3, r3, #4
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800281c:	4a2b      	ldr	r2, [pc, #172]	; (80028cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002824:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	2b04      	cmp	r3, #4
 8002836:	d102      	bne.n	800283e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	e004      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d101      	bne.n	8002848 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002844:	4b23      	ldr	r3, [pc, #140]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002846:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d134      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b02      	cmp	r3, #2
 800285c:	d003      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0xa6>
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d003      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0xac>
 8002864:	e005      	b.n	8002872 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002868:	617b      	str	r3, [r7, #20]
      break;
 800286a:	e005      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800286e:	617b      	str	r3, [r7, #20]
      break;
 8002870:	e002      	b.n	8002878 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	617b      	str	r3, [r7, #20]
      break;
 8002876:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	091b      	lsrs	r3, r3, #4
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	3301      	adds	r3, #1
 8002884:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	fb02 f203 	mul.w	r2, r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	0e5b      	lsrs	r3, r3, #25
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	3301      	adds	r3, #1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028b8:	69bb      	ldr	r3, [r7, #24]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08003800 	.word	0x08003800
 80028d0:	00f42400 	.word	0x00f42400
 80028d4:	007a1200 	.word	0x007a1200

080028d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028dc:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCC_GetHCLKFreq+0x14>)
 80028de:	681b      	ldr	r3, [r3, #0]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	20000000 	.word	0x20000000

080028f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028f4:	f7ff fff0 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 80028f8:	4602      	mov	r2, r0
 80028fa:	4b06      	ldr	r3, [pc, #24]	; (8002914 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	0a1b      	lsrs	r3, r3, #8
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	4904      	ldr	r1, [pc, #16]	; (8002918 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002906:	5ccb      	ldrb	r3, [r1, r3]
 8002908:	f003 031f 	and.w	r3, r3, #31
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	080037f8 	.word	0x080037f8

0800291c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002920:	f7ff ffda 	bl	80028d8 <HAL_RCC_GetHCLKFreq>
 8002924:	4602      	mov	r2, r0
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	0adb      	lsrs	r3, r3, #11
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	4904      	ldr	r1, [pc, #16]	; (8002944 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002932:	5ccb      	ldrb	r3, [r1, r3]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800293c:	4618      	mov	r0, r3
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	080037f8 	.word	0x080037f8

08002948 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002954:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002960:	f7ff f9c8 	bl	8001cf4 <HAL_PWREx_GetVoltageRange>
 8002964:	6178      	str	r0, [r7, #20]
 8002966:	e014      	b.n	8002992 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296c:	4a24      	ldr	r2, [pc, #144]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002972:	6593      	str	r3, [r2, #88]	; 0x58
 8002974:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002980:	f7ff f9b8 	bl	8001cf4 <HAL_PWREx_GetVoltageRange>
 8002984:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002986:	4b1e      	ldr	r3, [pc, #120]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	4a1d      	ldr	r2, [pc, #116]	; (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800298c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002990:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002998:	d10b      	bne.n	80029b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b80      	cmp	r3, #128	; 0x80
 800299e:	d919      	bls.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2ba0      	cmp	r3, #160	; 0xa0
 80029a4:	d902      	bls.n	80029ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029a6:	2302      	movs	r3, #2
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	e013      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029ac:	2301      	movs	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	e010      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d902      	bls.n	80029be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029b8:	2303      	movs	r3, #3
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	e00a      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b80      	cmp	r3, #128	; 0x80
 80029c2:	d102      	bne.n	80029ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029c4:	2302      	movs	r3, #2
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	e004      	b.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b70      	cmp	r3, #112	; 0x70
 80029ce:	d101      	bne.n	80029d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029d0:	2301      	movs	r3, #1
 80029d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f023 0207 	bic.w	r2, r3, #7
 80029dc:	4909      	ldr	r1, [pc, #36]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029e4:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d001      	beq.n	80029f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40022000 	.word	0x40022000

08002a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a10:	2300      	movs	r3, #0
 8002a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a14:	2300      	movs	r3, #0
 8002a16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d031      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a2c:	d01a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002a2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a32:	d814      	bhi.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a3c:	d10f      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002a3e:	4bac      	ldr	r3, [pc, #688]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	4aab      	ldr	r2, [pc, #684]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a4a:	e00c      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	2100      	movs	r1, #0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f9dc 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a5c:	e003      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	74fb      	strb	r3, [r7, #19]
      break;
 8002a62:	e000      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002a64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a66:	7cfb      	ldrb	r3, [r7, #19]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10b      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a6c:	4ba0      	ldr	r3, [pc, #640]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	499d      	ldr	r1, [pc, #628]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002a82:	e001      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8099 	beq.w	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a9a:	4b95      	ldr	r3, [pc, #596]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab0:	4b8f      	ldr	r3, [pc, #572]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	4a8e      	ldr	r2, [pc, #568]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6593      	str	r3, [r2, #88]	; 0x58
 8002abc:	4b8c      	ldr	r3, [pc, #560]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	60bb      	str	r3, [r7, #8]
 8002ac6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002acc:	4b89      	ldr	r3, [pc, #548]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a88      	ldr	r2, [pc, #544]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad8:	f7fe f8e0 	bl	8000c9c <HAL_GetTick>
 8002adc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ade:	e009      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae0:	f7fe f8dc 	bl	8000c9c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d902      	bls.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	74fb      	strb	r3, [r7, #19]
        break;
 8002af2:	e005      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002af4:	4b7f      	ldr	r3, [pc, #508]	; (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ef      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d155      	bne.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b06:	4b7a      	ldr	r3, [pc, #488]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01e      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d019      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b22:	4b73      	ldr	r3, [pc, #460]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b2e:	4b70      	ldr	r3, [pc, #448]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b34:	4a6e      	ldr	r2, [pc, #440]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3e:	4b6c      	ldr	r3, [pc, #432]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	4a6a      	ldr	r2, [pc, #424]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b4e:	4a68      	ldr	r2, [pc, #416]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d016      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe f89c 	bl	8000c9c <HAL_GetTick>
 8002b64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b66:	e00b      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe f898 	bl	8000c9c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d902      	bls.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	74fb      	strb	r3, [r7, #19]
            break;
 8002b7e:	e006      	b.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b80:	4b5b      	ldr	r3, [pc, #364]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0ec      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002b8e:	7cfb      	ldrb	r3, [r7, #19]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10b      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b94:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba2:	4953      	ldr	r1, [pc, #332]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002baa:	e004      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	74bb      	strb	r3, [r7, #18]
 8002bb0:	e001      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bb6:	7c7b      	ldrb	r3, [r7, #17]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bbc:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc0:	4a4b      	ldr	r2, [pc, #300]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0301 	and.w	r3, r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00a      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bd4:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f023 0203 	bic.w	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	4943      	ldr	r1, [pc, #268]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00a      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bf6:	4b3e      	ldr	r3, [pc, #248]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfc:	f023 020c 	bic.w	r2, r3, #12
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	493a      	ldr	r1, [pc, #232]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c18:	4b35      	ldr	r3, [pc, #212]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	4932      	ldr	r1, [pc, #200]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c3a:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c48:	4929      	ldr	r1, [pc, #164]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00a      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c5c:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	4921      	ldr	r1, [pc, #132]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00a      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c7e:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8c:	4918      	ldr	r1, [pc, #96]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ca0:	4b13      	ldr	r3, [pc, #76]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4910      	ldr	r1, [pc, #64]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d02c      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ce2:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	4a02      	ldr	r2, [pc, #8]	; (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cec:	60d3      	str	r3, [r2, #12]
 8002cee:	e015      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d00:	d10c      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2101      	movs	r1, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 f881 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d12:	7cfb      	ldrb	r3, [r7, #19]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d028      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d28:	4b30      	ldr	r3, [pc, #192]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	492d      	ldr	r1, [pc, #180]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d46:	d106      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d48:	4b28      	ldr	r3, [pc, #160]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	4a27      	ldr	r2, [pc, #156]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d52:	60d3      	str	r3, [r2, #12]
 8002d54:	e011      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3304      	adds	r3, #4
 8002d64:	2101      	movs	r1, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f852 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d01c      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d86:	4b19      	ldr	r3, [pc, #100]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d94:	4915      	ldr	r1, [pc, #84]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	2102      	movs	r1, #2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 f82f 	bl	8002e10 <RCCEx_PLLSAI1_Config>
 8002db2:	4603      	mov	r3, r0
 8002db4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002dbc:	7cfb      	ldrb	r3, [r7, #19]
 8002dbe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00a      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	4904      	ldr	r1, [pc, #16]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002de2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000

08002df0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002dfa:	f043 0304 	orr.w	r3, r3, #4
 8002dfe:	6013      	str	r3, [r2, #0]
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000

08002e10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e1e:	4b74      	ldr	r3, [pc, #464]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e2a:	4b71      	ldr	r3, [pc, #452]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0203 	and.w	r2, r3, #3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10d      	bne.n	8002e56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d009      	beq.n	8002e56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e42:	4b6b      	ldr	r3, [pc, #428]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	091b      	lsrs	r3, r3, #4
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
       ||
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d047      	beq.n	8002ee6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	73fb      	strb	r3, [r7, #15]
 8002e5a:	e044      	b.n	8002ee6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d018      	beq.n	8002e96 <RCCEx_PLLSAI1_Config+0x86>
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d825      	bhi.n	8002eb4 <RCCEx_PLLSAI1_Config+0xa4>
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d002      	beq.n	8002e72 <RCCEx_PLLSAI1_Config+0x62>
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d009      	beq.n	8002e84 <RCCEx_PLLSAI1_Config+0x74>
 8002e70:	e020      	b.n	8002eb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e72:	4b5f      	ldr	r3, [pc, #380]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d11d      	bne.n	8002eba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e82:	e01a      	b.n	8002eba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e84:	4b5a      	ldr	r3, [pc, #360]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d116      	bne.n	8002ebe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e94:	e013      	b.n	8002ebe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e96:	4b56      	ldr	r3, [pc, #344]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ea2:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002eb2:	e006      	b.n	8002ec2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002eb8:	e004      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eba:	bf00      	nop
 8002ebc:	e002      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ebe:	bf00      	nop
 8002ec0:	e000      	b.n	8002ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ec2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10d      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eca:	4b49      	ldr	r3, [pc, #292]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6819      	ldr	r1, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	4943      	ldr	r1, [pc, #268]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d17c      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002eec:	4b40      	ldr	r3, [pc, #256]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a3f      	ldr	r2, [pc, #252]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ef8:	f7fd fed0 	bl	8000c9c <HAL_GetTick>
 8002efc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002efe:	e009      	b.n	8002f14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f00:	f7fd fecc 	bl	8000c9c <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d902      	bls.n	8002f14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	73fb      	strb	r3, [r7, #15]
        break;
 8002f12:	e005      	b.n	8002f20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f14:	4b36      	ldr	r3, [pc, #216]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1ef      	bne.n	8002f00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d15f      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d110      	bne.n	8002f4e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f2c:	4b30      	ldr	r3, [pc, #192]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002f34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6892      	ldr	r2, [r2, #8]
 8002f3c:	0211      	lsls	r1, r2, #8
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	68d2      	ldr	r2, [r2, #12]
 8002f42:	06d2      	lsls	r2, r2, #27
 8002f44:	430a      	orrs	r2, r1
 8002f46:	492a      	ldr	r1, [pc, #168]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	610b      	str	r3, [r1, #16]
 8002f4c:	e027      	b.n	8002f9e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d112      	bne.n	8002f7a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f54:	4b26      	ldr	r3, [pc, #152]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6892      	ldr	r2, [r2, #8]
 8002f64:	0211      	lsls	r1, r2, #8
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6912      	ldr	r2, [r2, #16]
 8002f6a:	0852      	lsrs	r2, r2, #1
 8002f6c:	3a01      	subs	r2, #1
 8002f6e:	0552      	lsls	r2, r2, #21
 8002f70:	430a      	orrs	r2, r1
 8002f72:	491f      	ldr	r1, [pc, #124]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	610b      	str	r3, [r1, #16]
 8002f78:	e011      	b.n	8002f9e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6892      	ldr	r2, [r2, #8]
 8002f8a:	0211      	lsls	r1, r2, #8
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6952      	ldr	r2, [r2, #20]
 8002f90:	0852      	lsrs	r2, r2, #1
 8002f92:	3a01      	subs	r2, #1
 8002f94:	0652      	lsls	r2, r2, #25
 8002f96:	430a      	orrs	r2, r1
 8002f98:	4915      	ldr	r1, [pc, #84]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a13      	ldr	r2, [pc, #76]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fa8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fd fe77 	bl	8000c9c <HAL_GetTick>
 8002fae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fb0:	e009      	b.n	8002fc6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fb2:	f7fd fe73 	bl	8000c9c <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d902      	bls.n	8002fc6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	73fb      	strb	r3, [r7, #15]
          break;
 8002fc4:	e005      	b.n	8002fd2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0ef      	beq.n	8002fb2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d106      	bne.n	8002fe6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002fd8:	4b05      	ldr	r3, [pc, #20]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	4903      	ldr	r1, [pc, #12]	; (8002ff0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	40021000 	.word	0x40021000

08002ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e040      	b.n	8003088 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fcf2 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	; 0x24
 8003020:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0201 	bic.w	r2, r2, #1
 8003030:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f82c 	bl	8003090 <UART_SetConfig>
 8003038:	4603      	mov	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d101      	bne.n	8003042 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e022      	b.n	8003088 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fa2c 	bl	80034a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800305e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800306e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 fab3 	bl	80035ec <UART_CheckIdleState>
 8003086:	4603      	mov	r3, r0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3708      	adds	r7, #8
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4baf      	ldr	r3, [pc, #700]	; (8003378 <UART_SetConfig+0x2e8>)
 80030bc:	4013      	ands	r3, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	69f9      	ldr	r1, [r7, #28]
 80030c4:	430b      	orrs	r3, r1
 80030c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	430a      	orrs	r2, r1
 80030dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4aa4      	ldr	r2, [pc, #656]	; (800337c <UART_SetConfig+0x2ec>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a9b      	ldr	r2, [pc, #620]	; (8003380 <UART_SetConfig+0x2f0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d121      	bne.n	800315a <UART_SetConfig+0xca>
 8003116:	4b9b      	ldr	r3, [pc, #620]	; (8003384 <UART_SetConfig+0x2f4>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b03      	cmp	r3, #3
 8003122:	d817      	bhi.n	8003154 <UART_SetConfig+0xc4>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <UART_SetConfig+0x9c>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	0800313d 	.word	0x0800313d
 8003130:	08003149 	.word	0x08003149
 8003134:	08003143 	.word	0x08003143
 8003138:	0800314f 	.word	0x0800314f
 800313c:	2301      	movs	r3, #1
 800313e:	76fb      	strb	r3, [r7, #27]
 8003140:	e070      	b.n	8003224 <UART_SetConfig+0x194>
 8003142:	2302      	movs	r3, #2
 8003144:	76fb      	strb	r3, [r7, #27]
 8003146:	e06d      	b.n	8003224 <UART_SetConfig+0x194>
 8003148:	2304      	movs	r3, #4
 800314a:	76fb      	strb	r3, [r7, #27]
 800314c:	e06a      	b.n	8003224 <UART_SetConfig+0x194>
 800314e:	2308      	movs	r3, #8
 8003150:	76fb      	strb	r3, [r7, #27]
 8003152:	e067      	b.n	8003224 <UART_SetConfig+0x194>
 8003154:	2310      	movs	r3, #16
 8003156:	76fb      	strb	r3, [r7, #27]
 8003158:	e064      	b.n	8003224 <UART_SetConfig+0x194>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a8a      	ldr	r2, [pc, #552]	; (8003388 <UART_SetConfig+0x2f8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d132      	bne.n	80031ca <UART_SetConfig+0x13a>
 8003164:	4b87      	ldr	r3, [pc, #540]	; (8003384 <UART_SetConfig+0x2f4>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d828      	bhi.n	80031c4 <UART_SetConfig+0x134>
 8003172:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <UART_SetConfig+0xe8>)
 8003174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003178:	080031ad 	.word	0x080031ad
 800317c:	080031c5 	.word	0x080031c5
 8003180:	080031c5 	.word	0x080031c5
 8003184:	080031c5 	.word	0x080031c5
 8003188:	080031b9 	.word	0x080031b9
 800318c:	080031c5 	.word	0x080031c5
 8003190:	080031c5 	.word	0x080031c5
 8003194:	080031c5 	.word	0x080031c5
 8003198:	080031b3 	.word	0x080031b3
 800319c:	080031c5 	.word	0x080031c5
 80031a0:	080031c5 	.word	0x080031c5
 80031a4:	080031c5 	.word	0x080031c5
 80031a8:	080031bf 	.word	0x080031bf
 80031ac:	2300      	movs	r3, #0
 80031ae:	76fb      	strb	r3, [r7, #27]
 80031b0:	e038      	b.n	8003224 <UART_SetConfig+0x194>
 80031b2:	2302      	movs	r3, #2
 80031b4:	76fb      	strb	r3, [r7, #27]
 80031b6:	e035      	b.n	8003224 <UART_SetConfig+0x194>
 80031b8:	2304      	movs	r3, #4
 80031ba:	76fb      	strb	r3, [r7, #27]
 80031bc:	e032      	b.n	8003224 <UART_SetConfig+0x194>
 80031be:	2308      	movs	r3, #8
 80031c0:	76fb      	strb	r3, [r7, #27]
 80031c2:	e02f      	b.n	8003224 <UART_SetConfig+0x194>
 80031c4:	2310      	movs	r3, #16
 80031c6:	76fb      	strb	r3, [r7, #27]
 80031c8:	e02c      	b.n	8003224 <UART_SetConfig+0x194>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6b      	ldr	r2, [pc, #428]	; (800337c <UART_SetConfig+0x2ec>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d125      	bne.n	8003220 <UART_SetConfig+0x190>
 80031d4:	4b6b      	ldr	r3, [pc, #428]	; (8003384 <UART_SetConfig+0x2f4>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031e2:	d017      	beq.n	8003214 <UART_SetConfig+0x184>
 80031e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031e8:	d817      	bhi.n	800321a <UART_SetConfig+0x18a>
 80031ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ee:	d00b      	beq.n	8003208 <UART_SetConfig+0x178>
 80031f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031f4:	d811      	bhi.n	800321a <UART_SetConfig+0x18a>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <UART_SetConfig+0x172>
 80031fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031fe:	d006      	beq.n	800320e <UART_SetConfig+0x17e>
 8003200:	e00b      	b.n	800321a <UART_SetConfig+0x18a>
 8003202:	2300      	movs	r3, #0
 8003204:	76fb      	strb	r3, [r7, #27]
 8003206:	e00d      	b.n	8003224 <UART_SetConfig+0x194>
 8003208:	2302      	movs	r3, #2
 800320a:	76fb      	strb	r3, [r7, #27]
 800320c:	e00a      	b.n	8003224 <UART_SetConfig+0x194>
 800320e:	2304      	movs	r3, #4
 8003210:	76fb      	strb	r3, [r7, #27]
 8003212:	e007      	b.n	8003224 <UART_SetConfig+0x194>
 8003214:	2308      	movs	r3, #8
 8003216:	76fb      	strb	r3, [r7, #27]
 8003218:	e004      	b.n	8003224 <UART_SetConfig+0x194>
 800321a:	2310      	movs	r3, #16
 800321c:	76fb      	strb	r3, [r7, #27]
 800321e:	e001      	b.n	8003224 <UART_SetConfig+0x194>
 8003220:	2310      	movs	r3, #16
 8003222:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a54      	ldr	r2, [pc, #336]	; (800337c <UART_SetConfig+0x2ec>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d173      	bne.n	8003316 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800322e:	7efb      	ldrb	r3, [r7, #27]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d824      	bhi.n	800327e <UART_SetConfig+0x1ee>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <UART_SetConfig+0x1ac>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003261 	.word	0x08003261
 8003240:	0800327f 	.word	0x0800327f
 8003244:	08003269 	.word	0x08003269
 8003248:	0800327f 	.word	0x0800327f
 800324c:	0800326f 	.word	0x0800326f
 8003250:	0800327f 	.word	0x0800327f
 8003254:	0800327f 	.word	0x0800327f
 8003258:	0800327f 	.word	0x0800327f
 800325c:	08003277 	.word	0x08003277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003260:	f7ff fb46 	bl	80028f0 <HAL_RCC_GetPCLK1Freq>
 8003264:	6178      	str	r0, [r7, #20]
        break;
 8003266:	e00f      	b.n	8003288 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003268:	4b48      	ldr	r3, [pc, #288]	; (800338c <UART_SetConfig+0x2fc>)
 800326a:	617b      	str	r3, [r7, #20]
        break;
 800326c:	e00c      	b.n	8003288 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326e:	f7ff faa7 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 8003272:	6178      	str	r0, [r7, #20]
        break;
 8003274:	e008      	b.n	8003288 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327a:	617b      	str	r3, [r7, #20]
        break;
 800327c:	e004      	b.n	8003288 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	76bb      	strb	r3, [r7, #26]
        break;
 8003286:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 80fe 	beq.w	800348c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	429a      	cmp	r2, r3
 800329e:	d305      	bcc.n	80032ac <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d902      	bls.n	80032b2 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	76bb      	strb	r3, [r7, #26]
 80032b0:	e0ec      	b.n	800348c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f04f 0100 	mov.w	r1, #0
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	020b      	lsls	r3, r1, #8
 80032c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80032c8:	0202      	lsls	r2, r0, #8
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	6849      	ldr	r1, [r1, #4]
 80032ce:	0849      	lsrs	r1, r1, #1
 80032d0:	4608      	mov	r0, r1
 80032d2:	f04f 0100 	mov.w	r1, #0
 80032d6:	1814      	adds	r4, r2, r0
 80032d8:	eb43 0501 	adc.w	r5, r3, r1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	461a      	mov	r2, r3
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	4620      	mov	r0, r4
 80032e8:	4629      	mov	r1, r5
 80032ea:	f7fc ff6f 	bl	80001cc <__aeabi_uldivmod>
 80032ee:	4602      	mov	r2, r0
 80032f0:	460b      	mov	r3, r1
 80032f2:	4613      	mov	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80032fc:	d308      	bcc.n	8003310 <UART_SetConfig+0x280>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003304:	d204      	bcs.n	8003310 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	e0bd      	b.n	800348c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	76bb      	strb	r3, [r7, #26]
 8003314:	e0ba      	b.n	800348c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800331e:	d168      	bne.n	80033f2 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8003320:	7efb      	ldrb	r3, [r7, #27]
 8003322:	2b08      	cmp	r3, #8
 8003324:	d834      	bhi.n	8003390 <UART_SetConfig+0x300>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <UART_SetConfig+0x29c>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003351 	.word	0x08003351
 8003330:	08003359 	.word	0x08003359
 8003334:	08003361 	.word	0x08003361
 8003338:	08003391 	.word	0x08003391
 800333c:	08003367 	.word	0x08003367
 8003340:	08003391 	.word	0x08003391
 8003344:	08003391 	.word	0x08003391
 8003348:	08003391 	.word	0x08003391
 800334c:	0800336f 	.word	0x0800336f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003350:	f7ff face 	bl	80028f0 <HAL_RCC_GetPCLK1Freq>
 8003354:	6178      	str	r0, [r7, #20]
        break;
 8003356:	e020      	b.n	800339a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003358:	f7ff fae0 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 800335c:	6178      	str	r0, [r7, #20]
        break;
 800335e:	e01c      	b.n	800339a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <UART_SetConfig+0x2fc>)
 8003362:	617b      	str	r3, [r7, #20]
        break;
 8003364:	e019      	b.n	800339a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003366:	f7ff fa2b 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 800336a:	6178      	str	r0, [r7, #20]
        break;
 800336c:	e015      	b.n	800339a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800336e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003372:	617b      	str	r3, [r7, #20]
        break;
 8003374:	e011      	b.n	800339a <UART_SetConfig+0x30a>
 8003376:	bf00      	nop
 8003378:	efff69f3 	.word	0xefff69f3
 800337c:	40008000 	.word	0x40008000
 8003380:	40013800 	.word	0x40013800
 8003384:	40021000 	.word	0x40021000
 8003388:	40004400 	.word	0x40004400
 800338c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	76bb      	strb	r3, [r7, #26]
        break;
 8003398:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d075      	beq.n	800348c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005a      	lsls	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	441a      	add	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	d916      	bls.n	80033ec <UART_SetConfig+0x35c>
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c4:	d212      	bcs.n	80033ec <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	f023 030f 	bic.w	r3, r3, #15
 80033ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	b29a      	uxth	r2, r3
 80033dc:	89fb      	ldrh	r3, [r7, #14]
 80033de:	4313      	orrs	r3, r2
 80033e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	89fa      	ldrh	r2, [r7, #14]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	e04f      	b.n	800348c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	76bb      	strb	r3, [r7, #26]
 80033f0:	e04c      	b.n	800348c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033f2:	7efb      	ldrb	r3, [r7, #27]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d828      	bhi.n	800344a <UART_SetConfig+0x3ba>
 80033f8:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <UART_SetConfig+0x370>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003425 	.word	0x08003425
 8003404:	0800342d 	.word	0x0800342d
 8003408:	08003435 	.word	0x08003435
 800340c:	0800344b 	.word	0x0800344b
 8003410:	0800343b 	.word	0x0800343b
 8003414:	0800344b 	.word	0x0800344b
 8003418:	0800344b 	.word	0x0800344b
 800341c:	0800344b 	.word	0x0800344b
 8003420:	08003443 	.word	0x08003443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003424:	f7ff fa64 	bl	80028f0 <HAL_RCC_GetPCLK1Freq>
 8003428:	6178      	str	r0, [r7, #20]
        break;
 800342a:	e013      	b.n	8003454 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800342c:	f7ff fa76 	bl	800291c <HAL_RCC_GetPCLK2Freq>
 8003430:	6178      	str	r0, [r7, #20]
        break;
 8003432:	e00f      	b.n	8003454 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003434:	4b1b      	ldr	r3, [pc, #108]	; (80034a4 <UART_SetConfig+0x414>)
 8003436:	617b      	str	r3, [r7, #20]
        break;
 8003438:	e00c      	b.n	8003454 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343a:	f7ff f9c1 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 800343e:	6178      	str	r0, [r7, #20]
        break;
 8003440:	e008      	b.n	8003454 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003446:	617b      	str	r3, [r7, #20]
        break;
 8003448:	e004      	b.n	8003454 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	76bb      	strb	r3, [r7, #26]
        break;
 8003452:	bf00      	nop
    }

    if (pclk != 0U)
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d018      	beq.n	800348c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	085a      	lsrs	r2, r3, #1
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	441a      	add	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	b29b      	uxth	r3, r3
 800346e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	2b0f      	cmp	r3, #15
 8003474:	d908      	bls.n	8003488 <UART_SetConfig+0x3f8>
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347c:	d204      	bcs.n	8003488 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	e001      	b.n	800348c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003498:	7ebb      	ldrb	r3, [r7, #26]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bdb0      	pop	{r4, r5, r7, pc}
 80034a2:	bf00      	nop
 80034a4:	00f42400 	.word	0x00f42400

080034a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00a      	beq.n	80034d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d01a      	beq.n	80035be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035a6:	d10a      	bne.n	80035be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00a      	beq.n	80035e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	605a      	str	r2, [r3, #4]
  }
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035fc:	f7fd fb4e 	bl	8000c9c <HAL_GetTick>
 8003600:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b08      	cmp	r3, #8
 800360e:	d10e      	bne.n	800362e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f82d 	bl	800367e <UART_WaitOnFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e023      	b.n	8003676 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d10e      	bne.n	800365a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800363c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f817 	bl	800367e <UART_WaitOnFlagUntilTimeout>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e00d      	b.n	8003676 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2220      	movs	r2, #32
 800365e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	60f8      	str	r0, [r7, #12]
 8003686:	60b9      	str	r1, [r7, #8]
 8003688:	603b      	str	r3, [r7, #0]
 800368a:	4613      	mov	r3, r2
 800368c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368e:	e05e      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003696:	d05a      	beq.n	800374e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003698:	f7fd fb00 	bl	8000c9c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d302      	bcc.n	80036ae <UART_WaitOnFlagUntilTimeout+0x30>
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11b      	bne.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0201 	bic.w	r2, r2, #1
 80036cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e043      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d02c      	beq.n	800374e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003702:	d124      	bne.n	800374e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800370c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800371c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 0201 	bic.w	r2, r2, #1
 800372c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2220      	movs	r2, #32
 800373e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e00f      	b.n	800376e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	69da      	ldr	r2, [r3, #28]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	4013      	ands	r3, r2
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	429a      	cmp	r2, r3
 800375c:	bf0c      	ite	eq
 800375e:	2301      	moveq	r3, #1
 8003760:	2300      	movne	r3, #0
 8003762:	b2db      	uxtb	r3, r3
 8003764:	461a      	mov	r2, r3
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	429a      	cmp	r2, r3
 800376a:	d091      	beq.n	8003690 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <__libc_init_array>:
 8003778:	b570      	push	{r4, r5, r6, lr}
 800377a:	4d0d      	ldr	r5, [pc, #52]	; (80037b0 <__libc_init_array+0x38>)
 800377c:	4c0d      	ldr	r4, [pc, #52]	; (80037b4 <__libc_init_array+0x3c>)
 800377e:	1b64      	subs	r4, r4, r5
 8003780:	10a4      	asrs	r4, r4, #2
 8003782:	2600      	movs	r6, #0
 8003784:	42a6      	cmp	r6, r4
 8003786:	d109      	bne.n	800379c <__libc_init_array+0x24>
 8003788:	4d0b      	ldr	r5, [pc, #44]	; (80037b8 <__libc_init_array+0x40>)
 800378a:	4c0c      	ldr	r4, [pc, #48]	; (80037bc <__libc_init_array+0x44>)
 800378c:	f000 f820 	bl	80037d0 <_init>
 8003790:	1b64      	subs	r4, r4, r5
 8003792:	10a4      	asrs	r4, r4, #2
 8003794:	2600      	movs	r6, #0
 8003796:	42a6      	cmp	r6, r4
 8003798:	d105      	bne.n	80037a6 <__libc_init_array+0x2e>
 800379a:	bd70      	pop	{r4, r5, r6, pc}
 800379c:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a0:	4798      	blx	r3
 80037a2:	3601      	adds	r6, #1
 80037a4:	e7ee      	b.n	8003784 <__libc_init_array+0xc>
 80037a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037aa:	4798      	blx	r3
 80037ac:	3601      	adds	r6, #1
 80037ae:	e7f2      	b.n	8003796 <__libc_init_array+0x1e>
 80037b0:	08003838 	.word	0x08003838
 80037b4:	08003838 	.word	0x08003838
 80037b8:	08003838 	.word	0x08003838
 80037bc:	0800383c 	.word	0x0800383c

080037c0 <memset>:
 80037c0:	4402      	add	r2, r0
 80037c2:	4603      	mov	r3, r0
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d100      	bne.n	80037ca <memset+0xa>
 80037c8:	4770      	bx	lr
 80037ca:	f803 1b01 	strb.w	r1, [r3], #1
 80037ce:	e7f9      	b.n	80037c4 <memset+0x4>

080037d0 <_init>:
 80037d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037d2:	bf00      	nop
 80037d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d6:	bc08      	pop	{r3}
 80037d8:	469e      	mov	lr, r3
 80037da:	4770      	bx	lr

080037dc <_fini>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	bf00      	nop
 80037e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037e2:	bc08      	pop	{r3}
 80037e4:	469e      	mov	lr, r3
 80037e6:	4770      	bx	lr
