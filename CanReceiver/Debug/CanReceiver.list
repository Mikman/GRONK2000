
CanReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008110  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080082a0  080082a0  000182a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080086d4  080086d4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080086dc  080086dc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080086dc  080086dc  000186dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080086e0  080086e0  000186e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080086e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000132c  200001e4  080088c8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001510  080088c8  00021510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b01  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb0  00000000  00000000  00032d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  000358c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc0  00000000  00000000  00036588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022596  00000000  00000000  00037148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e77a  00000000  00000000  000596de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c527a  00000000  00000000  00067e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012d0d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004274  00000000  00000000  0012d128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008288 	.word	0x08008288

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08008288 	.word	0x08008288

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <sendData>:
#define PACKAGE_SIZE 8


/* USER CODE END PV */

void sendData(CAN_HandleTypeDef *handler, uint32_t TxID, uint16_t numOfBytes, uint8_t *dataArray, CAN_TxHeaderTypeDef *transmitHeader) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	4613      	mov	r3, r2
 8000eae:	80fb      	strh	r3, [r7, #6]
	uint8_t dataToMB[PACKAGE_SIZE] = {0};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
	uint32_t randoMailBox;
	transmitHeader->ExtId = TxID;
 8000eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	605a      	str	r2, [r3, #4]

if (numOfBytes % PACKAGE_SIZE == 0)
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d12c      	bne.n	8000f24 <sendData+0x84>
{
	for (int i = 0; i < numOfBytes/PACKAGE_SIZE; i++) {
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	e021      	b.n	8000f14 <sendData+0x74>
		while (HAL_CAN_GetTxMailboxesFreeLevel(handler) == 0) {}
 8000ed0:	bf00      	nop
 8000ed2:	68f8      	ldr	r0, [r7, #12]
 8000ed4:	f001 fc3e 	bl	8002754 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f9      	beq.n	8000ed2 <sendData+0x32>
		if (messageSplitter(dataArray, dataToMB, i)) {
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	f107 0314 	add.w	r3, r7, #20
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f000 f81f 	bl	8000f2c <messageSplitter>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00c      	beq.n	8000f0e <sendData+0x6e>
			if (HAL_CAN_AddTxMessage(handler, transmitHeader, dataToMB, &randoMailBox) != HAL_OK) {
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	f107 0214 	add.w	r2, r7, #20
 8000efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f001 fb4d 	bl	800259e <HAL_CAN_AddTxMessage>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <sendData+0x6e>
				Error_Handler();
 8000f0a:	f000 fe39 	bl	8001b80 <Error_Handler>
	for (int i = 0; i < numOfBytes/PACKAGE_SIZE; i++) {
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3301      	adds	r3, #1
 8000f12:	61fb      	str	r3, [r7, #28]
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	08db      	lsrs	r3, r3, #3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	dbd6      	blt.n	8000ed0 <sendData+0x30>
 8000f22:	e000      	b.n	8000f26 <sendData+0x86>
			}
		}
	}

}
else {return;}
 8000f24:	bf00      	nop

}
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <messageSplitter>:

int messageSplitter(uint8_t *sourceArray, uint8_t *destinationArray, uint8_t position)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	4613      	mov	r3, r2
 8000f38:	71fb      	strb	r3, [r7, #7]



	for(int i=0 ; i < PACKAGE_SIZE; i++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e00e      	b.n	8000f5e <messageSplitter+0x32>
	{
		*(destinationArray + i) = *(sourceArray + (position * 8) + i);
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	461a      	mov	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	4413      	add	r3, r2
 8000f4a:	68fa      	ldr	r2, [r7, #12]
 8000f4c:	441a      	add	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	68b9      	ldr	r1, [r7, #8]
 8000f52:	440b      	add	r3, r1
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	701a      	strb	r2, [r3, #0]
	for(int i=0 ; i < PACKAGE_SIZE; i++)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	2b07      	cmp	r3, #7
 8000f62:	dded      	ble.n	8000f40 <messageSplitter+0x14>


}
return 1;
 8000f64:	2301      	movs	r3, #1
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	371c      	adds	r7, #28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <can_init>:

bool CAN_Mailbox0Empty = true;
bool CAN_Mailbox1Empty = true;
bool CAN_Mailbox2Empty = true;

void can_init(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *CANRX, CAN_TxHeaderTypeDef *CANTX, UART_HandleTypeDef *UART){
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
	TxHeader = CANTX;
 8000f82:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <can_init+0x34>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6013      	str	r3, [r2, #0]
	RxHeader = CANRX;
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <can_init+0x38>)
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	6013      	str	r3, [r2, #0]
	can1 = hcan;
 8000f8e:	4a08      	ldr	r2, [pc, #32]	; (8000fb0 <can_init+0x3c>)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6013      	str	r3, [r2, #0]
	uart2 = UART;
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <can_init+0x40>)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	6013      	str	r3, [r2, #0]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	2000135c 	.word	0x2000135c
 8000fac:	20001360 	.word	0x20001360
 8000fb0:	20001354 	.word	0x20001354
 8000fb4:	20001358 	.word	0x20001358

08000fb8 <HAL_CAN_TxMailbox0CompleteCallback>:


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan){
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	6078      	str	r0, [r7, #4]
	if (CAN_TX_QUEUE.pointRD == CAN_TX_QUEUE.pointWR){
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 8000fc2:	881a      	ldrh	r2, [r3, #0]
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 8000fc6:	885b      	ldrh	r3, [r3, #2]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d103      	bne.n	8000fd4 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>
		CAN_Mailbox0Empty = true;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <HAL_CAN_TxMailbox0CompleteCallback+0x48>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
	}else {
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
		sendData(can1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, TxHeader);
	}
}
 8000fd2:	e00e      	b.n	8000ff2 <HAL_CAN_TxMailbox0CompleteCallback+0x3a>
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
 8000fd4:	490b      	ldr	r1, [pc, #44]	; (8001004 <HAL_CAN_TxMailbox0CompleteCallback+0x4c>)
 8000fd6:	4809      	ldr	r0, [pc, #36]	; (8000ffc <HAL_CAN_TxMailbox0CompleteCallback+0x44>)
 8000fd8:	f000 f961 	bl	800129e <LeaveStructQueue>
		sendData(can1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, TxHeader);
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_CAN_TxMailbox0CompleteCallback+0x50>)
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <HAL_CAN_TxMailbox0CompleteCallback+0x4c>)
 8000fe2:	6819      	ldr	r1, [r3, #0]
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_CAN_TxMailbox0CompleteCallback+0x58>)
 8000fec:	2208      	movs	r2, #8
 8000fee:	f7ff ff57 	bl	8000ea0 <sendData>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000200 	.word	0x20000200
 8001000:	20000000 	.word	0x20000000
 8001004:	20001108 	.word	0x20001108
 8001008:	20001354 	.word	0x20001354
 800100c:	2000135c 	.word	0x2000135c
 8001010:	2000110c 	.word	0x2000110c

08001014 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan){
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af02      	add	r7, sp, #8
 800101a:	6078      	str	r0, [r7, #4]
	if (CAN_TX_QUEUE.pointRD == CAN_TX_QUEUE.pointWR){
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_CAN_TxMailbox1CompleteCallback+0x44>)
 800101e:	881a      	ldrh	r2, [r3, #0]
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <HAL_CAN_TxMailbox1CompleteCallback+0x44>)
 8001022:	885b      	ldrh	r3, [r3, #2]
 8001024:	429a      	cmp	r2, r3
 8001026:	d103      	bne.n	8001030 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>
		CAN_Mailbox1Empty = true;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <HAL_CAN_TxMailbox1CompleteCallback+0x48>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
	}else {
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
		sendData(can1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, TxHeader);
	}
}
 800102e:	e00e      	b.n	800104e <HAL_CAN_TxMailbox1CompleteCallback+0x3a>
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
 8001030:	490b      	ldr	r1, [pc, #44]	; (8001060 <HAL_CAN_TxMailbox1CompleteCallback+0x4c>)
 8001032:	4809      	ldr	r0, [pc, #36]	; (8001058 <HAL_CAN_TxMailbox1CompleteCallback+0x44>)
 8001034:	f000 f933 	bl	800129e <LeaveStructQueue>
		sendData(can1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, TxHeader);
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_CAN_TxMailbox1CompleteCallback+0x50>)
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <HAL_CAN_TxMailbox1CompleteCallback+0x4c>)
 800103e:	6819      	ldr	r1, [r3, #0]
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_CAN_TxMailbox1CompleteCallback+0x54>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_CAN_TxMailbox1CompleteCallback+0x58>)
 8001048:	2208      	movs	r2, #8
 800104a:	f7ff ff29 	bl	8000ea0 <sendData>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000200 	.word	0x20000200
 800105c:	20000001 	.word	0x20000001
 8001060:	20001108 	.word	0x20001108
 8001064:	20001354 	.word	0x20001354
 8001068:	2000135c 	.word	0x2000135c
 800106c:	2000110c 	.word	0x2000110c

08001070 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan){
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af02      	add	r7, sp, #8
 8001076:	6078      	str	r0, [r7, #4]
	if (CAN_TX_QUEUE.pointRD == CAN_TX_QUEUE.pointWR){
 8001078:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <HAL_CAN_TxMailbox2CompleteCallback+0x44>)
 800107a:	881a      	ldrh	r2, [r3, #0]
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <HAL_CAN_TxMailbox2CompleteCallback+0x44>)
 800107e:	885b      	ldrh	r3, [r3, #2]
 8001080:	429a      	cmp	r2, r3
 8001082:	d103      	bne.n	800108c <HAL_CAN_TxMailbox2CompleteCallback+0x1c>
		CAN_Mailbox2Empty = true;
 8001084:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HAL_CAN_TxMailbox2CompleteCallback+0x48>)
 8001086:	2201      	movs	r2, #1
 8001088:	701a      	strb	r2, [r3, #0]
	}else {
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
		sendData(can1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, TxHeader);
	}
}
 800108a:	e00e      	b.n	80010aa <HAL_CAN_TxMailbox2CompleteCallback+0x3a>
		LeaveStructQueue(&CAN_TX_QUEUE, &CAN_TX_QUEUE_DATA);
 800108c:	490b      	ldr	r1, [pc, #44]	; (80010bc <HAL_CAN_TxMailbox2CompleteCallback+0x4c>)
 800108e:	4809      	ldr	r0, [pc, #36]	; (80010b4 <HAL_CAN_TxMailbox2CompleteCallback+0x44>)
 8001090:	f000 f905 	bl	800129e <LeaveStructQueue>
		sendData(can1, CAN_TX_QUEUE_DATA.ID, PACKAGE_SIZE, CAN_TX_QUEUE_DATA.data, TxHeader);
 8001094:	4b0a      	ldr	r3, [pc, #40]	; (80010c0 <HAL_CAN_TxMailbox2CompleteCallback+0x50>)
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_CAN_TxMailbox2CompleteCallback+0x4c>)
 800109a:	6819      	ldr	r1, [r3, #0]
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_CAN_TxMailbox2CompleteCallback+0x54>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_CAN_TxMailbox2CompleteCallback+0x58>)
 80010a4:	2208      	movs	r2, #8
 80010a6:	f7ff fefb 	bl	8000ea0 <sendData>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000200 	.word	0x20000200
 80010b8:	20000002 	.word	0x20000002
 80010bc:	20001108 	.word	0x20001108
 80010c0:	20001354 	.word	0x20001354
 80010c4:	2000135c 	.word	0x2000135c
 80010c8:	2000110c 	.word	0x2000110c

080010cc <CAN_handle_receive>:


void CAN_handle_receive() {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
    uint8_t buffer[PACKAGE_SIZE] = {0};
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]

    while (HAL_CAN_GetRxFifoFillLevel(can1, CAN_RX_FIFO0) > 0) {
 80010da:	e023      	b.n	8001124 <CAN_handle_receive+0x58>
            HAL_CAN_GetRxMessage(can1, CAN_RX_FIFO0, RxHeader, buffer); // Modtag beskeden og læg den i buffer
 80010dc:	4b18      	ldr	r3, [pc, #96]	; (8001140 <CAN_handle_receive+0x74>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <CAN_handle_receive+0x78>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2100      	movs	r1, #0
 80010e8:	f001 fb69 	bl	80027be <HAL_CAN_GetRxMessage>
            CAN_RX_QUEUE_DATA.ID = RxHeader->ExtId;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <CAN_handle_receive+0x78>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	4a15      	ldr	r2, [pc, #84]	; (8001148 <CAN_handle_receive+0x7c>)
 80010f4:	6013      	str	r3, [r2, #0]
            for (int i = 0 ; i < PACKAGE_SIZE ; i++){
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	e00c      	b.n	8001116 <CAN_handle_receive+0x4a>
            	CAN_RX_QUEUE_DATA.data[i] = buffer[i];
 80010fc:	1d3a      	adds	r2, r7, #4
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	7819      	ldrb	r1, [r3, #0]
 8001104:	4a10      	ldr	r2, [pc, #64]	; (8001148 <CAN_handle_receive+0x7c>)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	3304      	adds	r3, #4
 800110c:	460a      	mov	r2, r1
 800110e:	701a      	strb	r2, [r3, #0]
            for (int i = 0 ; i < PACKAGE_SIZE ; i++){
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3301      	adds	r3, #1
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b07      	cmp	r3, #7
 800111a:	ddef      	ble.n	80010fc <CAN_handle_receive+0x30>
            }
            EnterStructQueue(&CAN_RX_QUEUE, &CAN_RX_QUEUE_DATA);
 800111c:	490a      	ldr	r1, [pc, #40]	; (8001148 <CAN_handle_receive+0x7c>)
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <CAN_handle_receive+0x80>)
 8001120:	f000 f88f 	bl	8001242 <EnterStructQueue>
    while (HAL_CAN_GetRxFifoFillLevel(can1, CAN_RX_FIFO0) > 0) {
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <CAN_handle_receive+0x74>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fc59 	bl	80029e2 <HAL_CAN_GetRxFifoFillLevel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1d2      	bne.n	80010dc <CAN_handle_receive+0x10>
        }
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20001354 	.word	0x20001354
 8001144:	20001360 	.word	0x20001360
 8001148:	20001114 	.word	0x20001114
 800114c:	20000984 	.word	0x20000984

08001150 <CAN_from_rxQueue>:

int CAN_from_rxQueue(struct CAN_QUEUE_DATA * data) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	return LeaveStructQueue(&CAN_RX_QUEUE, data);
 8001158:	6879      	ldr	r1, [r7, #4]
 800115a:	4804      	ldr	r0, [pc, #16]	; (800116c <CAN_from_rxQueue+0x1c>)
 800115c:	f000 f89f 	bl	800129e <LeaveStructQueue>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000984 	.word	0x20000984

08001170 <passToCanTX>:

int CAN_to_rxQueue(struct CAN_QUEUE_DATA * data) {
	return EnterStructQueue(&CAN_RX_QUEUE, data);
}

void passToCanTX(struct CAN_QUEUE_DATA *data){
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af02      	add	r7, sp, #8
 8001176:	6078      	str	r0, [r7, #4]
	if (CAN_Mailbox0Empty || CAN_Mailbox1Empty || CAN_Mailbox2Empty){
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <passToCanTX+0x50>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <passToCanTX+0x20>
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <passToCanTX+0x54>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d103      	bne.n	8001190 <passToCanTX+0x20>
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <passToCanTX+0x58>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00d      	beq.n	80011ac <passToCanTX+0x3c>
		sendData(can1, data->ID, PACKAGE_SIZE, data->data, TxHeader);
 8001190:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <passToCanTX+0x5c>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6819      	ldr	r1, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	1d1a      	adds	r2, r3, #4
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <passToCanTX+0x60>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	4613      	mov	r3, r2
 80011a4:	2208      	movs	r2, #8
 80011a6:	f7ff fe7b 	bl	8000ea0 <sendData>
 80011aa:	e004      	b.n	80011b6 <passToCanTX+0x46>
	}else {
		EnterStructQueue(&CAN_TX_QUEUE, data);
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4809      	ldr	r0, [pc, #36]	; (80011d4 <passToCanTX+0x64>)
 80011b0:	f000 f847 	bl	8001242 <EnterStructQueue>
	}
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000001 	.word	0x20000001
 80011c8:	20000002 	.word	0x20000002
 80011cc:	20001354 	.word	0x20001354
 80011d0:	2000135c 	.word	0x2000135c
 80011d4:	20000200 	.word	0x20000200

080011d8 <StructQueueFull>:
 *  Created on: Mar 16, 2021
 *      Author: Mikkel
 */
#include "circle_queue_struct.h"

int StructQueueFull(struct StructQueue *q){
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	return (((q->pointWR +1) % SIZE_OF_STRUCTQUEUE) == q->pointRD);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	885b      	ldrh	r3, [r3, #2]
 80011e4:	1c59      	adds	r1, r3, #1
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <StructQueueFull+0x40>)
 80011e8:	fb83 2301 	smull	r2, r3, r3, r1
 80011ec:	119a      	asrs	r2, r3, #6
 80011ee:	17cb      	asrs	r3, r1, #31
 80011f0:	1ad2      	subs	r2, r2, r3
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	015b      	lsls	r3, r3, #5
 80011fa:	1aca      	subs	r2, r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
}
 800120a:	4618      	mov	r0, r3
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	66666667 	.word	0x66666667

0800121c <StructQueueEmpty>:

int StructQueueEmpty(struct StructQueue *q){
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	return (q->pointWR == q->pointRD);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	885a      	ldrh	r2, [r3, #2]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	881b      	ldrh	r3, [r3, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
}
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <EnterStructQueue>:

int EnterStructQueue(struct StructQueue *q, struct CAN_QUEUE_DATA *data) {
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]

	if (StructQueueFull(q)) {
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ffc3 	bl	80011d8 <StructQueueFull>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <EnterStructQueue+0x1a>
		return 0;
 8001258:	2300      	movs	r3, #0
 800125a:	e01c      	b.n	8001296 <EnterStructQueue+0x54>
	}
	else {
		q->queue[q->pointWR] = *data;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	885b      	ldrh	r3, [r3, #2]
 8001260:	4619      	mov	r1, r3
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	440b      	add	r3, r1
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	3304      	adds	r3, #4
 8001272:	ca07      	ldmia	r2, {r0, r1, r2}
 8001274:	e883 0007 	stmia.w	r3, {r0, r1, r2}


		if ((q->pointWR + 1) == SIZE_OF_STRUCTQUEUE){
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	885b      	ldrh	r3, [r3, #2]
 800127c:	2b9f      	cmp	r3, #159	; 0x9f
 800127e:	d103      	bne.n	8001288 <EnterStructQueue+0x46>
			q->pointWR = 0;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	805a      	strh	r2, [r3, #2]
 8001286:	e005      	b.n	8001294 <EnterStructQueue+0x52>
		}
		else{
			q->pointWR += 1;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	885b      	ldrh	r3, [r3, #2]
 800128c:	3301      	adds	r3, #1
 800128e:	b29a      	uxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	805a      	strh	r2, [r3, #2]
		}

	}
	return 1;
 8001294:	2301      	movs	r3, #1
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <LeaveStructQueue>:

int LeaveStructQueue(struct StructQueue *q, struct CAN_QUEUE_DATA *data) {
 800129e:	b590      	push	{r4, r7, lr}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
	if (StructQueueEmpty(q)){
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ffb7 	bl	800121c <StructQueueEmpty>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <LeaveStructQueue+0x1a>
		return 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	e01e      	b.n	80012f6 <LeaveStructQueue+0x58>
	}
	else {
		*data = q->queue[q->pointRD];
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	6838      	ldr	r0, [r7, #0]
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	460b      	mov	r3, r1
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	440b      	add	r3, r1
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4413      	add	r3, r2
 80012cc:	4604      	mov	r4, r0
 80012ce:	3304      	adds	r3, #4
 80012d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80012d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if((q->pointRD + 1) ==SIZE_OF_STRUCTQUEUE){
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	881b      	ldrh	r3, [r3, #0]
 80012dc:	2b9f      	cmp	r3, #159	; 0x9f
 80012de:	d103      	bne.n	80012e8 <LeaveStructQueue+0x4a>
			q->pointRD = 0;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2200      	movs	r2, #0
 80012e4:	801a      	strh	r2, [r3, #0]
 80012e6:	e005      	b.n	80012f4 <LeaveStructQueue+0x56>
		}
		else{
			q->pointRD +=1;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	801a      	strh	r2, [r3, #0]
		}
	}
	return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd90      	pop	{r4, r7, pc}

080012fe <to_frame>:
 *      Author: Mikkel
 */

#include "comm_relay.h"

int to_frame(char * frame, size_t frame_size, struct CAN_QUEUE_DATA * package) {
 80012fe:	b580      	push	{r7, lr}
 8001300:	b088      	sub	sp, #32
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
	if (frame_size < COMM_MAX_FRAME_SIZE + 1) return -1;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2b14      	cmp	r3, #20
 800130e:	d802      	bhi.n	8001316 <to_frame+0x18>
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	e044      	b.n	80013a0 <to_frame+0xa2>

	int i = 1, j = 0;
 8001316:	2301      	movs	r3, #1
 8001318:	61fb      	str	r3, [r7, #28]
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]

	frame[0] = COMM_DEL_START;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	2224      	movs	r2, #36	; 0x24
 8001322:	701a      	strb	r2, [r3, #0]

	for (; i < frame_size && j < PACKAGE_SIZE + 1; i++, j++) {
 8001324:	e02f      	b.n	8001386 <to_frame+0x88>
		char c;
		if (j == 0) c = package->ID;
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d103      	bne.n	8001334 <to_frame+0x36>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	75fb      	strb	r3, [r7, #23]
 8001332:	e005      	b.n	8001340 <to_frame+0x42>
		else c = package->data[j-1];
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	3b01      	subs	r3, #1
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	4413      	add	r3, r2
 800133c:	791b      	ldrb	r3, [r3, #4]
 800133e:	75fb      	strb	r3, [r7, #23]

		if (is_special_character(c)) {
 8001340:	7dfb      	ldrb	r3, [r7, #23]
 8001342:	4618      	mov	r0, r3
 8001344:	f000 f830 	bl	80013a8 <is_special_character>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d010      	beq.n	8001370 <to_frame+0x72>
			frame[i] = COMM_ESCAPE;
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	2223      	movs	r2, #35	; 0x23
 8001356:	701a      	strb	r2, [r3, #0]
			frame[i+1] = c + 2;
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	3301      	adds	r3, #1
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	7dfa      	ldrb	r2, [r7, #23]
 8001362:	3202      	adds	r2, #2
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	701a      	strb	r2, [r3, #0]
			i++;
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	3301      	adds	r3, #1
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	e004      	b.n	800137a <to_frame+0x7c>
		} else {
			frame[i] = c;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	7dfa      	ldrb	r2, [r7, #23]
 8001378:	701a      	strb	r2, [r3, #0]
	for (; i < frame_size && j < PACKAGE_SIZE + 1; i++, j++) {
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3301      	adds	r3, #1
 800137e:	61fb      	str	r3, [r7, #28]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	3301      	adds	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	429a      	cmp	r2, r3
 800138c:	d902      	bls.n	8001394 <to_frame+0x96>
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2b08      	cmp	r3, #8
 8001392:	ddc8      	ble.n	8001326 <to_frame+0x28>
		}
	}

	frame[i] = COMM_DEL_STOP;
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	4413      	add	r3, r2
 800139a:	2240      	movs	r2, #64	; 0x40
 800139c:	701a      	strb	r2, [r3, #0]

	return 1;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3720      	adds	r7, #32
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <is_special_character>:

int is_special_character(char c) {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	if ((c == COMM_DEL_START) || (c == COMM_DEL_STOP) || (c == COMM_ESCAPE) || (c == 0)) return 1;
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	2b24      	cmp	r3, #36	; 0x24
 80013b6:	d008      	beq.n	80013ca <is_special_character+0x22>
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	2b40      	cmp	r3, #64	; 0x40
 80013bc:	d005      	beq.n	80013ca <is_special_character+0x22>
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	2b23      	cmp	r3, #35	; 0x23
 80013c2:	d002      	beq.n	80013ca <is_special_character+0x22>
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <is_special_character+0x26>
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <is_special_character+0x28>
	return 0;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <from_frame>:

int from_frame(const char * frame, struct CAN_QUEUE_DATA * package) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
	int len = strlen(frame);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7fe fef2 	bl	80001d0 <strlen>
 80013ec:	4603      	mov	r3, r0
 80013ee:	60bb      	str	r3, [r7, #8]
	int i = 0, j = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]

	if (frame[0] == COMM_DEL_START) i++;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b24      	cmp	r3, #36	; 0x24
 80013fe:	d145      	bne.n	800148c <from_frame+0xb0>
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3301      	adds	r3, #1
 8001404:	617b      	str	r3, [r7, #20]

	for (; i < len; i++, j++) {
 8001406:	e041      	b.n	800148c <from_frame+0xb0>
		char c = 0;
 8001408:	2300      	movs	r3, #0
 800140a:	73fb      	strb	r3, [r7, #15]

		if (j >= PACKAGE_SIZE + 1) return -1;
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	2b08      	cmp	r3, #8
 8001410:	dd02      	ble.n	8001418 <from_frame+0x3c>
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e051      	b.n	80014bc <from_frame+0xe0>

		if (frame[i] == COMM_DEL_START) return -1; // If we meet start delimiter inside frame data, something's wrong.
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b24      	cmp	r3, #36	; 0x24
 8001422:	d102      	bne.n	800142a <from_frame+0x4e>
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	e048      	b.n	80014bc <from_frame+0xe0>
		if (frame[i] == COMM_DEL_STOP) return 1; // If we meet stop delimiter inside frame data, it is just a shorter message.
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b40      	cmp	r3, #64	; 0x40
 8001434:	d101      	bne.n	800143a <from_frame+0x5e>
 8001436:	2301      	movs	r3, #1
 8001438:	e040      	b.n	80014bc <from_frame+0xe0>

		if (frame[i] == COMM_ESCAPE) {
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	4413      	add	r3, r2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b23      	cmp	r3, #35	; 0x23
 8001444:	d10a      	bne.n	800145c <from_frame+0x80>
			c = frame[i+1] - 2; // Return the character after the escape character minus 2
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	3b02      	subs	r3, #2
 8001452:	73fb      	strb	r3, [r7, #15]
			i++;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e004      	b.n	8001466 <from_frame+0x8a>
		}
		else c = frame[i]; // The was no escape character, so return it
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	73fb      	strb	r3, [r7, #15]



		if (j == 0) package->ID = c; // If we are iterating the ID
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d103      	bne.n	8001474 <from_frame+0x98>
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	601a      	str	r2, [r3, #0]
 8001472:	e005      	b.n	8001480 <from_frame+0xa4>
		else package->data[j-1] = c; 	// If we are iterating the data
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	3b01      	subs	r3, #1
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	4413      	add	r3, r2
 800147c:	7bfa      	ldrb	r2, [r7, #15]
 800147e:	711a      	strb	r2, [r3, #4]
	for (; i < len; i++, j++) {
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	3301      	adds	r3, #1
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	429a      	cmp	r2, r3
 8001492:	dbb9      	blt.n	8001408 <from_frame+0x2c>
	}

	if (i < len) {
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	429a      	cmp	r2, r3
 800149a:	da0e      	bge.n	80014ba <from_frame+0xde>
		if (!(frame[i] == COMM_DEL_STOP || frame[i] == 0)) return -1;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	4413      	add	r3, r2
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b40      	cmp	r3, #64	; 0x40
 80014a6:	d008      	beq.n	80014ba <from_frame+0xde>
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d002      	beq.n	80014ba <from_frame+0xde>
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	e000      	b.n	80014bc <from_frame+0xe0>
	}
	return 1;
 80014ba:	2301      	movs	r3, #1
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c8:	f000 fdeb 	bl	80020a2 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014cc:	f000 f81e 	bl	800150c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d0:	f000 f996 	bl	8001800 <MX_GPIO_Init>
  MX_DMA_Init();
 80014d4:	f000 f96e 	bl	80017b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014d8:	f000 f93c 	bl	8001754 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80014dc:	f000 f898 	bl	8001610 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  can_init(&hcan1, &CanRxHeader, &CanTxHeader, &huart2);
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <main+0x38>)
 80014e2:	4a07      	ldr	r2, [pc, #28]	; (8001500 <main+0x3c>)
 80014e4:	4907      	ldr	r1, [pc, #28]	; (8001504 <main+0x40>)
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <main+0x44>)
 80014e8:	f7ff fd44 	bl	8000f74 <can_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uart_init();
 80014ec:	f000 f9ec 	bl	80018c8 <uart_init>

  while (1)
  {
	  uart_transmitFromCanRxQueue(); 	// CAN IN -> UART OUT
 80014f0:	f000 faf8 	bl	8001ae4 <uart_transmitFromCanRxQueue>
	  uart_in_read();					// UART IN -> CAN OUT
 80014f4:	f000 fa22 	bl	800193c <uart_in_read>
  {
 80014f8:	e7fa      	b.n	80014f0 <main+0x2c>
 80014fa:	bf00      	nop
 80014fc:	20001450 	.word	0x20001450
 8001500:	200013d4 	.word	0x200013d4
 8001504:	200013ec 	.word	0x200013ec
 8001508:	200014d4 	.word	0x200014d4

0800150c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0ac      	sub	sp, #176	; 0xb0
 8001510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001512:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001516:	2244      	movs	r2, #68	; 0x44
 8001518:	2100      	movs	r1, #0
 800151a:	4618      	mov	r0, r3
 800151c:	f004 f9ea 	bl	80058f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001520:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	2254      	movs	r2, #84	; 0x54
 8001534:	2100      	movs	r1, #0
 8001536:	4618      	mov	r0, r3
 8001538:	f004 f9dc 	bl	80058f4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800153c:	f002 f990 	bl	8003860 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001540:	4b32      	ldr	r3, [pc, #200]	; (800160c <SystemClock_Config+0x100>)
 8001542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001546:	4a31      	ldr	r2, [pc, #196]	; (800160c <SystemClock_Config+0x100>)
 8001548:	f023 0318 	bic.w	r3, r3, #24
 800154c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001550:	2314      	movs	r3, #20
 8001552:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001554:	2301      	movs	r3, #1
 8001556:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001558:	2301      	movs	r3, #1
 800155a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001564:	2360      	movs	r3, #96	; 0x60
 8001566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156a:	2302      	movs	r3, #2
 800156c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001570:	2301      	movs	r3, #1
 8001572:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001576:	2301      	movs	r3, #1
 8001578:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 36;
 800157c:	2324      	movs	r3, #36	; 0x24
 800157e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001582:	2307      	movs	r3, #7
 8001584:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001588:	2302      	movs	r3, #2
 800158a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001594:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001598:	4618      	mov	r0, r3
 800159a:	f002 f9d5 	bl	8003948 <HAL_RCC_OscConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015a4:	f000 faec 	bl	8001b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015a8:	230f      	movs	r3, #15
 80015aa:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ac:	2303      	movs	r3, #3
 80015ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b0:	2300      	movs	r3, #0
 80015b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b4:	2300      	movs	r3, #0
 80015b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015b8:	2300      	movs	r3, #0
 80015ba:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015c0:	2104      	movs	r1, #4
 80015c2:	4618      	mov	r0, r3
 80015c4:	f002 fde0 	bl	8004188 <HAL_RCC_ClockConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015ce:	f000 fad7 	bl	8001b80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015da:	1d3b      	adds	r3, r7, #4
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 ffd9 	bl	8004594 <HAL_RCCEx_PeriphCLKConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80015e8:	f000 faca 	bl	8001b80 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015f0:	f002 f954 	bl	800389c <HAL_PWREx_ControlVoltageScaling>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80015fa:	f000 fac1 	bl	8001b80 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015fe:	f003 f9bd 	bl	800497c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001602:	bf00      	nop
 8001604:	37b0      	adds	r7, #176	; 0xb0
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	  uint32_t ext_id = 0x00000000;							// Den største værdi der kan være på MSB er 1
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
	  uint32_t mask = 0xFFFFFF00;
 800161a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
 800161e:	60bb      	str	r3, [r7, #8]
	  CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;			// Vi vælger at bruge mask mode
 8001620:	4b46      	ldr	r3, [pc, #280]	; (800173c <MX_CAN1_Init+0x12c>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
	  CanFilter.FilterIdHigh = (ext_id & 0x1FFFFFFF) >> 13; // (ext_id << 3) >> 16;						// Da vi har 32 bit ID, er dette de 16 MSB af ID
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	0b5b      	lsrs	r3, r3, #13
 800162a:	b29b      	uxth	r3, r3
 800162c:	4a43      	ldr	r2, [pc, #268]	; (800173c <MX_CAN1_Init+0x12c>)
 800162e:	6013      	str	r3, [r2, #0]
	  CanFilter.FilterIdLow =  (ext_id << 3) | CAN_ID_EXT;	// Da vi har 32 bit ID, er dette de 16 LSB af ID
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	00db      	lsls	r3, r3, #3
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	4a40      	ldr	r2, [pc, #256]	; (800173c <MX_CAN1_Init+0x12c>)
 800163a:	6053      	str	r3, [r2, #4]
	  CanFilter.FilterMaskIdHigh = (mask & 0x1FFFFFFF) >> 13;// << 5;					// Maskens 16 MSB
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	0b5b      	lsrs	r3, r3, #13
 8001640:	b29b      	uxth	r3, r3
 8001642:	4a3e      	ldr	r2, [pc, #248]	; (800173c <MX_CAN1_Init+0x12c>)
 8001644:	6093      	str	r3, [r2, #8]
	  CanFilter.FilterMaskIdLow = (mask << 3);// << 5 | 0x10;					// Maskens 16 LSB
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4a3c      	ldr	r2, [pc, #240]	; (800173c <MX_CAN1_Init+0x12c>)
 800164c:	60d3      	str	r3, [r2, #12]
	  CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;		// ID er et 32 bit-tal
 800164e:	4b3b      	ldr	r3, [pc, #236]	; (800173c <MX_CAN1_Init+0x12c>)
 8001650:	2201      	movs	r2, #1
 8001652:	61da      	str	r2, [r3, #28]
	  CanFilter.FilterActivation = ENABLE;					// Vi aktiverer filteret
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <MX_CAN1_Init+0x12c>)
 8001656:	2201      	movs	r2, #1
 8001658:	621a      	str	r2, [r3, #32]
	  CanFilter.FilterBank = 0;								// Vi vælger filter 0 ud af 14 mulige filtre
 800165a:	4b38      	ldr	r3, [pc, #224]	; (800173c <MX_CAN1_Init+0x12c>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
	  CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;	// Vi vælger FIFO0 til forskel for FIFO1
 8001660:	4b36      	ldr	r3, [pc, #216]	; (800173c <MX_CAN1_Init+0x12c>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]


	  CanRxHeader.DLC = PACKAGE_SIZE;
 8001666:	4b36      	ldr	r3, [pc, #216]	; (8001740 <MX_CAN1_Init+0x130>)
 8001668:	2208      	movs	r2, #8
 800166a:	611a      	str	r2, [r3, #16]
	  CanRxHeader.ExtId = 0x0;
 800166c:	4b34      	ldr	r3, [pc, #208]	; (8001740 <MX_CAN1_Init+0x130>)
 800166e:	2200      	movs	r2, #0
 8001670:	605a      	str	r2, [r3, #4]
	  CanRxHeader.IDE = CAN_ID_EXT;
 8001672:	4b33      	ldr	r3, [pc, #204]	; (8001740 <MX_CAN1_Init+0x130>)
 8001674:	2204      	movs	r2, #4
 8001676:	609a      	str	r2, [r3, #8]
	  CanRxHeader.RTR = CAN_RTR_DATA;
 8001678:	4b31      	ldr	r3, [pc, #196]	; (8001740 <MX_CAN1_Init+0x130>)
 800167a:	2200      	movs	r2, #0
 800167c:	60da      	str	r2, [r3, #12]
	  CanRxHeader.FilterMatchIndex = 0x00;
 800167e:	4b30      	ldr	r3, [pc, #192]	; (8001740 <MX_CAN1_Init+0x130>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]

	  CanTxHeader.DLC = PACKAGE_SIZE;                        // Der kommer 8 byte som data i beskeden
 8001684:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <MX_CAN1_Init+0x134>)
 8001686:	2208      	movs	r2, #8
 8001688:	611a      	str	r2, [r3, #16]
	  CanTxHeader.ExtId = 0x00000000;                        // 32 bit ID (29 er identifier)
 800168a:	4b2e      	ldr	r3, [pc, #184]	; (8001744 <MX_CAN1_Init+0x134>)
 800168c:	2200      	movs	r2, #0
 800168e:	605a      	str	r2, [r3, #4]
	  CanTxHeader.IDE = CAN_ID_EXT;                            // Vi har et extended ID = 32 bit til forskel fra standard på 16 bit (11 er identifier)
 8001690:	4b2c      	ldr	r3, [pc, #176]	; (8001744 <MX_CAN1_Init+0x134>)
 8001692:	2204      	movs	r2, #4
 8001694:	609a      	str	r2, [r3, #8]
	  CanTxHeader.RTR = CAN_RTR_DATA;                        // Vi sender data
 8001696:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <MX_CAN1_Init+0x134>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
	  CanTxHeader.TransmitGlobalTime = DISABLE;                // Der skal IKKE sendes et timestamp med hver besked
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <MX_CAN1_Init+0x134>)
 800169e:	2200      	movs	r2, #0
 80016a0:	751a      	strb	r2, [r3, #20]

  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
	  __HAL_RCC_CAN1_CLK_ENABLE();
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <MX_CAN1_Init+0x138>)
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	4a28      	ldr	r2, [pc, #160]	; (8001748 <MX_CAN1_Init+0x138>)
 80016a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80016ac:	6593      	str	r3, [r2, #88]	; 0x58
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <MX_CAN1_Init+0x138>)
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <MX_CAN1_Init+0x13c>)
 80016bc:	4a24      	ldr	r2, [pc, #144]	; (8001750 <MX_CAN1_Init+0x140>)
 80016be:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <MX_CAN1_Init+0x13c>)
 80016c2:	2212      	movs	r2, #18
 80016c4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <MX_CAN1_Init+0x13c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_CAN1_Init+0x13c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80016d2:	4b1e      	ldr	r3, [pc, #120]	; (800174c <MX_CAN1_Init+0x13c>)
 80016d4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80016d8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_CAN1_Init+0x13c>)
 80016dc:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80016e0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80016e2:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_CAN1_Init+0x13c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <MX_CAN1_Init+0x13c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_CAN1_Init+0x13c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <MX_CAN1_Init+0x13c>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_CAN1_Init+0x13c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_CAN1_Init+0x13c>)
 8001702:	2201      	movs	r2, #1
 8001704:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001706:	4811      	ldr	r0, [pc, #68]	; (800174c <MX_CAN1_Init+0x13c>)
 8001708:	f000 fd40 	bl	800218c <HAL_CAN_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_CAN1_Init+0x106>
  {
    Error_Handler();
 8001712:	f000 fa35 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

    while (HAL_CAN_ConfigFilter(&hcan1, &CanFilter) != HAL_OK) {}
 8001716:	bf00      	nop
 8001718:	4908      	ldr	r1, [pc, #32]	; (800173c <MX_CAN1_Init+0x12c>)
 800171a:	480c      	ldr	r0, [pc, #48]	; (800174c <MX_CAN1_Init+0x13c>)
 800171c:	f000 fe31 	bl	8002382 <HAL_CAN_ConfigFilter>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f8      	bne.n	8001718 <MX_CAN1_Init+0x108>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001726:	2102      	movs	r1, #2
 8001728:	4808      	ldr	r0, [pc, #32]	; (800174c <MX_CAN1_Init+0x13c>)
 800172a:	f001 f982 	bl	8002a32 <HAL_CAN_ActivateNotification>
    HAL_CAN_Start(&hcan1);
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <MX_CAN1_Init+0x13c>)
 8001730:	f000 fef1 	bl	8002516 <HAL_CAN_Start>
  /* USER CODE END CAN1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200013ac 	.word	0x200013ac
 8001740:	200013ec 	.word	0x200013ec
 8001744:	200013d4 	.word	0x200013d4
 8001748:	40021000 	.word	0x40021000
 800174c:	200014d4 	.word	0x200014d4
 8001750:	40006400 	.word	0x40006400

08001754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_USART2_UART_Init+0x58>)
 800175a:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <MX_USART2_UART_Init+0x5c>)
 800175c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_USART2_UART_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x58>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001798:	f003 f9f2 	bl	8004b80 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017a2:	f000 f9ed 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20001450 	.word	0x20001450
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ba:	4b10      	ldr	r3, [pc, #64]	; (80017fc <MX_DMA_Init+0x48>)
 80017bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017be:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <MX_DMA_Init+0x48>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6493      	str	r3, [r2, #72]	; 0x48
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <MX_DMA_Init+0x48>)
 80017c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2010      	movs	r0, #16
 80017d8:	f001 fc47 	bl	800306a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80017dc:	2010      	movs	r0, #16
 80017de:	f001 fc60 	bl	80030a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2011      	movs	r0, #17
 80017e8:	f001 fc3f 	bl	800306a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80017ec:	2011      	movs	r0, #17
 80017ee:	f001 fc58 	bl	80030a2 <HAL_NVIC_EnableIRQ>

}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <MX_GPIO_Init+0xc0>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a29      	ldr	r2, [pc, #164]	; (80018c0 <MX_GPIO_Init+0xc0>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <MX_GPIO_Init+0xc0>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <MX_GPIO_Init+0xc0>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4a23      	ldr	r2, [pc, #140]	; (80018c0 <MX_GPIO_Init+0xc0>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4b21      	ldr	r3, [pc, #132]	; (80018c0 <MX_GPIO_Init+0xc0>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_GPIO_Init+0xc0>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4a1d      	ldr	r2, [pc, #116]	; (80018c0 <MX_GPIO_Init+0xc0>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_GPIO_Init+0xc0>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2189      	movs	r1, #137	; 0x89
 8001862:	4818      	ldr	r0, [pc, #96]	; (80018c4 <MX_GPIO_Init+0xc4>)
 8001864:	f001 ffe4 	bl	8003830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001868:	2340      	movs	r3, #64	; 0x40
 800186a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001870:	2302      	movs	r3, #2
 8001872:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4619      	mov	r1, r3
 800187a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187e:	f001 fe6d 	bl	800355c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 8001882:	2389      	movs	r3, #137	; 0x89
 8001884:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001886:	2301      	movs	r3, #1
 8001888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 030c 	add.w	r3, r7, #12
 8001896:	4619      	mov	r1, r3
 8001898:	480a      	ldr	r0, [pc, #40]	; (80018c4 <MX_GPIO_Init+0xc4>)
 800189a:	f001 fe5f 	bl	800355c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800189e:	2340      	movs	r3, #64	; 0x40
 80018a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a2:	2300      	movs	r3, #0
 80018a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018a6:	2302      	movs	r3, #2
 80018a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4619      	mov	r1, r3
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_GPIO_Init+0xc4>)
 80018b2:	f001 fe53 	bl	800355c <HAL_GPIO_Init>

}
 80018b6:	bf00      	nop
 80018b8:	3720      	adds	r7, #32
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	48000400 	.word	0x48000400

080018c8 <uart_init>:

/* USER CODE BEGIN 4 */

void uart_init() {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, uart_in, UART_IN_BUF_SIZE);
 80018cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018d0:	4902      	ldr	r1, [pc, #8]	; (80018dc <uart_init+0x14>)
 80018d2:	4803      	ldr	r0, [pc, #12]	; (80018e0 <uart_init+0x18>)
 80018d4:	f003 fa20 	bl	8004d18 <HAL_UART_Receive_DMA>
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20001148 	.word	0x20001148
 80018e0:	20001450 	.word	0x20001450

080018e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	HAL_UART_AbortTransmit(&huart2);
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <HAL_UART_TxCpltCallback+0x1c>)
 80018ee:	f003 fa57 	bl	8004da0 <HAL_UART_AbortTransmit>
	uart_transmitFromCanRxQueue();
 80018f2:	f000 f8f7 	bl	8001ae4 <uart_transmitFromCanRxQueue>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20001450 	.word	0x20001450

08001904 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	if (++uart_dma_laps_ahead >= 2) {
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_UART_RxCpltCallback+0x30>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_UART_RxCpltCallback+0x30>)
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <HAL_UART_RxCpltCallback+0x30>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	dd04      	ble.n	8001928 <HAL_UART_RxCpltCallback+0x24>
		ERR_COUNT++;
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_UART_RxCpltCallback+0x34>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <HAL_UART_RxCpltCallback+0x34>)
 8001926:	6013      	str	r3, [r2, #0]
	}
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20001144 	.word	0x20001144
 8001938:	20001120 	.word	0x20001120

0800193c <uart_in_read>:


// $E$4ABC############@@@$1Hejsa@
void uart_in_read() {
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	; 0x30
 8001940:	af00      	add	r7, sp, #0
	int dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR) + UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 8001942:	4b61      	ldr	r3, [pc, #388]	; (8001ac8 <uart_in_read+0x18c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	025b      	lsls	r3, r3, #9
 8001948:	461a      	mov	r2, r3
 800194a:	4b60      	ldr	r3, [pc, #384]	; (8001acc <uart_in_read+0x190>)
 800194c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (dma_ptr - uart_in_read_ptr >= UART_IN_BUF_SIZE) {
 800195a:	4b5d      	ldr	r3, [pc, #372]	; (8001ad0 <uart_in_read+0x194>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001966:	db04      	blt.n	8001972 <uart_in_read+0x36>
		ERR_COUNT++; // Buffer overflow
 8001968:	4b5a      	ldr	r3, [pc, #360]	; (8001ad4 <uart_in_read+0x198>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3301      	adds	r3, #1
 800196e:	4a59      	ldr	r2, [pc, #356]	; (8001ad4 <uart_in_read+0x198>)
 8001970:	6013      	str	r3, [r2, #0]
	}

	int escapes = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28

	for (; dma_ptr - uart_in_read_ptr > 0; uart_in_read_ptr++) {
 8001976:	e09b      	b.n	8001ab0 <uart_in_read+0x174>

		if (uart_in_read_ptr >= UART_IN_BUF_SIZE) {
 8001978:	4b55      	ldr	r3, [pc, #340]	; (8001ad0 <uart_in_read+0x194>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001980:	db19      	blt.n	80019b6 <uart_in_read+0x7a>
			uart_in_read_ptr = 0;
 8001982:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <uart_in_read+0x194>)
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
			uart_in_lastStart -= UART_IN_BUF_SIZE;
 8001988:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <uart_in_read+0x19c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001990:	4a51      	ldr	r2, [pc, #324]	; (8001ad8 <uart_in_read+0x19c>)
 8001992:	6013      	str	r3, [r2, #0]
			uart_dma_laps_ahead--;
 8001994:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <uart_in_read+0x18c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3b01      	subs	r3, #1
 800199a:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <uart_in_read+0x18c>)
 800199c:	6013      	str	r3, [r2, #0]
			dma_ptr = (UART_IN_BUF_SIZE - huart2.hdmarx->Instance->CNDTR) + UART_IN_BUF_SIZE * uart_dma_laps_ahead;
 800199e:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <uart_in_read+0x18c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	025b      	lsls	r3, r3, #9
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b49      	ldr	r3, [pc, #292]	; (8001acc <uart_in_read+0x190>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
		}

		if (uart_in[uart_in_read_ptr] == COMM_DEL_START) {
 80019b6:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <uart_in_read+0x194>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a48      	ldr	r2, [pc, #288]	; (8001adc <uart_in_read+0x1a0>)
 80019bc:	5cd3      	ldrb	r3, [r2, r3]
 80019be:	2b24      	cmp	r3, #36	; 0x24
 80019c0:	d106      	bne.n	80019d0 <uart_in_read+0x94>
			uart_in_lastStart = uart_in_read_ptr;
 80019c2:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <uart_in_read+0x194>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a44      	ldr	r2, [pc, #272]	; (8001ad8 <uart_in_read+0x19c>)
 80019c8:	6013      	str	r3, [r2, #0]
			escapes = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ce:	e06a      	b.n	8001aa6 <uart_in_read+0x16a>
		}
		else if (uart_in[uart_in_read_ptr] == COMM_ESCAPE) escapes++;
 80019d0:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <uart_in_read+0x194>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a41      	ldr	r2, [pc, #260]	; (8001adc <uart_in_read+0x1a0>)
 80019d6:	5cd3      	ldrb	r3, [r2, r3]
 80019d8:	2b23      	cmp	r3, #35	; 0x23
 80019da:	d103      	bne.n	80019e4 <uart_in_read+0xa8>
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019de:	3301      	adds	r3, #1
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019e2:	e060      	b.n	8001aa6 <uart_in_read+0x16a>
		else if (uart_in[uart_in_read_ptr] == COMM_DEL_STOP) {
 80019e4:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <uart_in_read+0x194>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a3c      	ldr	r2, [pc, #240]	; (8001adc <uart_in_read+0x1a0>)
 80019ea:	5cd3      	ldrb	r3, [r2, r3]
 80019ec:	2b40      	cmp	r3, #64	; 0x40
 80019ee:	d15a      	bne.n	8001aa6 <uart_in_read+0x16a>

			int frameLength = uart_in_read_ptr - uart_in_lastStart + 1;
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <uart_in_read+0x194>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b38      	ldr	r3, [pc, #224]	; (8001ad8 <uart_in_read+0x19c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24

			if (frameLength <= COMM_MAX_FRAME_SIZE &&			// Characters can fit in a frame
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	2b14      	cmp	r3, #20
 8001a02:	dc50      	bgt.n	8001aa6 <uart_in_read+0x16a>
					frameLength <= PACKAGE_SIZE + 3 + escapes	// Data can't be as an example be 16 times 'A'
 8001a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a06:	330b      	adds	r3, #11
			if (frameLength <= COMM_MAX_FRAME_SIZE &&			// Characters can fit in a frame
 8001a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	dc4b      	bgt.n	8001aa6 <uart_in_read+0x16a>
					/*&& escapes <= 9*/) {							// A frame can't be filled with '#'
				//uart_in_lastStart = -1; <--------
				struct CAN_QUEUE_DATA package = {0, {0}};
 8001a0e:	4a34      	ldr	r2, [pc, #208]	; (8001ae0 <uart_in_read+0x1a4>)
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				char frame[COMM_MAX_FRAME_SIZE + 1] = {0};
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	741a      	strb	r2, [r3, #16]

				if (uart_in_lastStart < 0) {
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <uart_in_read+0x19c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	da1a      	bge.n	8001a6a <uart_in_read+0x12e>
					memcpy(frame, uart_in + UART_IN_BUF_SIZE + uart_in_lastStart, -uart_in_lastStart);
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <uart_in_read+0x19c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001a3c:	4a27      	ldr	r2, [pc, #156]	; (8001adc <uart_in_read+0x1a0>)
 8001a3e:	1899      	adds	r1, r3, r2
 8001a40:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <uart_in_read+0x19c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	425b      	negs	r3, r3
 8001a46:	461a      	mov	r2, r3
 8001a48:	463b      	mov	r3, r7
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 ff44 	bl	80058d8 <memcpy>
					memcpy(frame - uart_in_lastStart, uart_in, uart_in_read_ptr + 1);
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <uart_in_read+0x19c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	425b      	negs	r3, r3
 8001a56:	463a      	mov	r2, r7
 8001a58:	18d0      	adds	r0, r2, r3
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <uart_in_read+0x194>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	461a      	mov	r2, r3
 8001a62:	491e      	ldr	r1, [pc, #120]	; (8001adc <uart_in_read+0x1a0>)
 8001a64:	f003 ff38 	bl	80058d8 <memcpy>
 8001a68:	e009      	b.n	8001a7e <uart_in_read+0x142>
				}
				else memcpy(frame, uart_in + uart_in_lastStart, frameLength);
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <uart_in_read+0x19c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <uart_in_read+0x1a0>)
 8001a72:	18d1      	adds	r1, r2, r3
 8001a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a76:	463b      	mov	r3, r7
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f003 ff2d 	bl	80058d8 <memcpy>

				if (from_frame(frame, &package) == 1) {
 8001a7e:	f107 0218 	add.w	r2, r7, #24
 8001a82:	463b      	mov	r3, r7
 8001a84:	4611      	mov	r1, r2
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fca8 	bl	80013dc <from_frame>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d104      	bne.n	8001a9c <uart_in_read+0x160>
					passToCanTX(&package);
 8001a92:	f107 0318 	add.w	r3, r7, #24
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fb6a 	bl	8001170 <passToCanTX>
				}
				uart_in_lastStart = uart_in_read_ptr - COMM_MAX_FRAME_SIZE;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <uart_in_read+0x194>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3b14      	subs	r3, #20
 8001aa2:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <uart_in_read+0x19c>)
 8001aa4:	6013      	str	r3, [r2, #0]
	for (; dma_ptr - uart_in_read_ptr > 0; uart_in_read_ptr++) {
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <uart_in_read+0x194>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <uart_in_read+0x194>)
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <uart_in_read+0x194>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f73f af5d 	bgt.w	8001978 <uart_in_read+0x3c>
			}
		}

	}
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	3730      	adds	r7, #48	; 0x30
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20001144 	.word	0x20001144
 8001acc:	20001450 	.word	0x20001450
 8001ad0:	20001140 	.word	0x20001140
 8001ad4:	20001120 	.word	0x20001120
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	20001148 	.word	0x20001148
 8001ae0:	080082a0 	.word	0x080082a0

08001ae4 <uart_transmitFromCanRxQueue>:

void uart_transmitFromCanRxQueue() {
 8001ae4:	b590      	push	{r4, r7, lr}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
	if (huart2.gState == HAL_UART_STATE_READY) {
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <uart_transmitFromCanRxQueue+0x88>)
 8001aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	d137      	bne.n	8001b62 <uart_transmitFromCanRxQueue+0x7e>
		struct CAN_QUEUE_DATA package = { 0, { 0 } };
 8001af2:	4a1f      	ldr	r2, [pc, #124]	; (8001b70 <uart_transmitFromCanRxQueue+0x8c>)
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001af8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		if (nextTxFrame == NULL && CAN_from_rxQueue(&package)) {
 8001afc:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <uart_transmitFromCanRxQueue+0x90>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d112      	bne.n	8001b2a <uart_transmitFromCanRxQueue+0x46>
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff fb22 	bl	8001150 <CAN_from_rxQueue>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d00b      	beq.n	8001b2a <uart_transmitFromCanRxQueue+0x46>

			if (to_frame(frameBuffer, sizeof(frameBuffer), &package) == 1) {
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	461a      	mov	r2, r3
 8001b16:	2115      	movs	r1, #21
 8001b18:	4817      	ldr	r0, [pc, #92]	; (8001b78 <uart_transmitFromCanRxQueue+0x94>)
 8001b1a:	f7ff fbf0 	bl	80012fe <to_frame>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d102      	bne.n	8001b2a <uart_transmitFromCanRxQueue+0x46>
				// Package is put in frame and transmitted
				nextTxFrame = frameBuffer;
 8001b24:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <uart_transmitFromCanRxQueue+0x90>)
 8001b26:	4a14      	ldr	r2, [pc, #80]	; (8001b78 <uart_transmitFromCanRxQueue+0x94>)
 8001b28:	601a      	str	r2, [r3, #0]
			}
		}

		if (nextTxFrame != NULL && HAL_UART_Transmit_DMA(&huart2,
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <uart_transmitFromCanRxQueue+0x90>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d012      	beq.n	8001b58 <uart_transmitFromCanRxQueue+0x74>
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <uart_transmitFromCanRxQueue+0x90>)
 8001b34:	681c      	ldr	r4, [r3, #0]
				(uint8_t*) nextTxFrame, strlen(frameBuffer)) == HAL_OK) {
 8001b36:	4810      	ldr	r0, [pc, #64]	; (8001b78 <uart_transmitFromCanRxQueue+0x94>)
 8001b38:	f7fe fb4a 	bl	80001d0 <strlen>
 8001b3c:	4603      	mov	r3, r0
		if (nextTxFrame != NULL && HAL_UART_Transmit_DMA(&huart2,
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	461a      	mov	r2, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <uart_transmitFromCanRxQueue+0x88>)
 8001b46:	f003 f869 	bl	8004c1c <HAL_UART_Transmit_DMA>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d103      	bne.n	8001b58 <uart_transmitFromCanRxQueue+0x74>
			nextTxFrame = NULL;
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <uart_transmitFromCanRxQueue+0x90>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
		} else {
			ERR_COUNT++;
		}
	}
}
 8001b56:	e004      	b.n	8001b62 <uart_transmitFromCanRxQueue+0x7e>
			ERR_COUNT++;
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <uart_transmitFromCanRxQueue+0x98>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	4a07      	ldr	r2, [pc, #28]	; (8001b7c <uart_transmitFromCanRxQueue+0x98>)
 8001b60:	6013      	str	r3, [r2, #0]
}
 8001b62:	bf00      	nop
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd90      	pop	{r4, r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20001450 	.word	0x20001450
 8001b70:	080082a0 	.word	0x080082a0
 8001b74:	2000113c 	.word	0x2000113c
 8001b78:	20001124 	.word	0x20001124
 8001b7c:	20001120 	.word	0x20001120

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <Error_Handler+0x8>
	...

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_MspInit+0x44>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b96:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_MspInit+0x44>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9e:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <HAL_MspInit+0x44>)
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001baa:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb6:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_MspInit+0x44>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
 8001be4:	605a      	str	r2, [r3, #4]
 8001be6:	609a      	str	r2, [r3, #8]
 8001be8:	60da      	str	r2, [r3, #12]
 8001bea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a1c      	ldr	r2, [pc, #112]	; (8001c64 <HAL_CAN_MspInit+0x90>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d131      	bne.n	8001c5a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_CAN_MspInit+0x94>)
 8001bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <HAL_CAN_MspInit+0x94>)
 8001bfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c00:	6593      	str	r3, [r2, #88]	; 0x58
 8001c02:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_CAN_MspInit+0x94>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <HAL_CAN_MspInit+0x94>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	4a15      	ldr	r2, [pc, #84]	; (8001c68 <HAL_CAN_MspInit+0x94>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_CAN_MspInit+0x94>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c38:	2309      	movs	r3, #9
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c46:	f001 fc89 	bl	800355c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	2014      	movs	r0, #20
 8001c50:	f001 fa0b 	bl	800306a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c54:	2014      	movs	r0, #20
 8001c56:	f001 fa24 	bl	80030a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40006400 	.word	0x40006400
 8001c68:	40021000 	.word	0x40021000

08001c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a4a      	ldr	r2, [pc, #296]	; (8001db4 <HAL_UART_MspInit+0x148>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	f040 808d 	bne.w	8001daa <HAL_UART_MspInit+0x13e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c90:	4b49      	ldr	r3, [pc, #292]	; (8001db8 <HAL_UART_MspInit+0x14c>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	4a48      	ldr	r2, [pc, #288]	; (8001db8 <HAL_UART_MspInit+0x14c>)
 8001c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c9c:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <HAL_UART_MspInit+0x14c>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca8:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <HAL_UART_MspInit+0x14c>)
 8001caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cac:	4a42      	ldr	r2, [pc, #264]	; (8001db8 <HAL_UART_MspInit+0x14c>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cb4:	4b40      	ldr	r3, [pc, #256]	; (8001db8 <HAL_UART_MspInit+0x14c>)
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001cc0:	2304      	movs	r3, #4
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cd0:	2307      	movs	r3, #7
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cde:	f001 fc3d 	bl	800355c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d02:	f001 fc2b 	bl	800355c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001d06:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d08:	4a2d      	ldr	r2, [pc, #180]	; (8001dc0 <HAL_UART_MspInit+0x154>)
 8001d0a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001d0c:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d0e:	2202      	movs	r2, #2
 8001d10:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d18:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d1e:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d20:	2280      	movs	r2, #128	; 0x80
 8001d22:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001d30:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d32:	2220      	movs	r2, #32
 8001d34:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001d3c:	481f      	ldr	r0, [pc, #124]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d3e:	f001 f9cb 	bl	80030d8 <HAL_DMA_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8001d48:	f7ff ff1a 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d50:	671a      	str	r2, [r3, #112]	; 0x70
 8001d52:	4a1a      	ldr	r2, [pc, #104]	; (8001dbc <HAL_UART_MspInit+0x150>)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_UART_MspInit+0x15c>)
 8001d5c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001d60:	2202      	movs	r2, #2
 8001d62:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001d66:	2210      	movs	r2, #16
 8001d68:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d6a:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001d84:	2220      	movs	r2, #32
 8001d86:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001d90:	f001 f9a2 	bl	80030d8 <HAL_DMA_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_UART_MspInit+0x132>
    {
      Error_Handler();
 8001d9a:	f7ff fef1 	bl	8001b80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001da2:	66da      	str	r2, [r3, #108]	; 0x6c
 8001da4:	4a07      	ldr	r2, [pc, #28]	; (8001dc4 <HAL_UART_MspInit+0x158>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001daa:	bf00      	nop
 8001dac:	3728      	adds	r7, #40	; 0x28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40004400 	.word	0x40004400
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	20001364 	.word	0x20001364
 8001dc0:	4002006c 	.word	0x4002006c
 8001dc4:	20001408 	.word	0x20001408
 8001dc8:	40020080 	.word	0x40020080

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <MemManage_Handler+0x4>

08001dde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e18:	f000 f998 	bl	800214c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <DMA1_Channel6_IRQHandler+0x10>)
 8001e26:	f001 faad 	bl	8003384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20001364 	.word	0x20001364

08001e34 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <DMA1_Channel7_IRQHandler+0x10>)
 8001e3a:	f001 faa3 	bl	8003384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
  //if (hdma_usart2_tx.DmaBaseAddress->ISR & (DMA_FLAG_TC1 << (hdma_usart2_tx.ChannelIndex & 0x1CU)) != 0U) uart_dma_XferCpltCallback();
  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20001408 	.word	0x20001408

08001e48 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <CAN1_RX0_IRQHandler+0x14>)
 8001e4e:	f000 fe16 	bl	8002a7e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  CAN_handle_receive();
 8001e52:	f7ff f93b 	bl	80010cc <CAN_handle_receive>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200014d4 	.word	0x200014d4

08001e60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
	return 1;
 8001e64:	2301      	movs	r3, #1
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_kill>:

int _kill(int pid, int sig)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e7a:	f003 fd03 	bl	8005884 <__errno>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2216      	movs	r2, #22
 8001e82:	601a      	str	r2, [r3, #0]
	return -1;
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <_exit>:

void _exit (int status)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7ff ffe7 	bl	8001e70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ea2:	e7fe      	b.n	8001ea2 <_exit+0x12>

08001ea4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e00a      	b.n	8001ecc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eb6:	f3af 8000 	nop.w
 8001eba:	4601      	mov	r1, r0
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	60ba      	str	r2, [r7, #8]
 8001ec2:	b2ca      	uxtb	r2, r1
 8001ec4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	dbf0      	blt.n	8001eb6 <_read+0x12>
	}

return len;
 8001ed4:	687b      	ldr	r3, [r7, #4]
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	60f8      	str	r0, [r7, #12]
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	e009      	b.n	8001f04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	60ba      	str	r2, [r7, #8]
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	dbf1      	blt.n	8001ef0 <_write+0x12>
	}
	return len;
 8001f0c:	687b      	ldr	r3, [r7, #4]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <_close>:

int _close(int file)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f3e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_isatty>:

int _isatty(int file)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
	return 1;
 8001f56:	2301      	movs	r3, #1
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f70:	2300      	movs	r3, #0
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
	...

08001f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <_sbrk+0x5c>)
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <_sbrk+0x60>)
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f94:	4b13      	ldr	r3, [pc, #76]	; (8001fe4 <_sbrk+0x64>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d102      	bne.n	8001fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <_sbrk+0x64>)
 8001f9e:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <_sbrk+0x68>)
 8001fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa2:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d207      	bcs.n	8001fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb0:	f003 fc68 	bl	8005884 <__errno>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	e009      	b.n	8001fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc0:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fc6:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	4a05      	ldr	r2, [pc, #20]	; (8001fe4 <_sbrk+0x64>)
 8001fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20010000 	.word	0x20010000
 8001fe0:	00000400 	.word	0x00000400
 8001fe4:	20001348 	.word	0x20001348
 8001fe8:	20001510 	.word	0x20001510

08001fec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <SystemInit+0x5c>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	4a14      	ldr	r2, [pc, #80]	; (8002048 <SystemInit+0x5c>)
 8001ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <SystemInit+0x60>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a11      	ldr	r2, [pc, #68]	; (800204c <SystemInit+0x60>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800200c:	4b0f      	ldr	r3, [pc, #60]	; (800204c <SystemInit+0x60>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <SystemInit+0x60>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a0d      	ldr	r2, [pc, #52]	; (800204c <SystemInit+0x60>)
 8002018:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800201c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002020:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <SystemInit+0x60>)
 8002024:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002028:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <SystemInit+0x60>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a07      	ldr	r2, [pc, #28]	; (800204c <SystemInit+0x60>)
 8002030:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002034:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <SystemInit+0x60>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00
 800204c:	40021000 	.word	0x40021000

08002050 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002050:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002088 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002054:	f7ff ffca 	bl	8001fec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002058:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800205a:	e003      	b.n	8002064 <LoopCopyDataInit>

0800205c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800205e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002060:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002062:	3104      	adds	r1, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002064:	480a      	ldr	r0, [pc, #40]	; (8002090 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002068:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800206a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800206c:	d3f6      	bcc.n	800205c <CopyDataInit>
	ldr	r2, =_sbss
 800206e:	4a0a      	ldr	r2, [pc, #40]	; (8002098 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002070:	e002      	b.n	8002078 <LoopFillZerobss>

08002072 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002072:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002074:	f842 3b04 	str.w	r3, [r2], #4

08002078 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <LoopForever+0x16>)
	cmp	r2, r3
 800207a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800207c:	d3f9      	bcc.n	8002072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800207e:	f003 fc07 	bl	8005890 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002082:	f7ff fa1f 	bl	80014c4 <main>

08002086 <LoopForever>:

LoopForever:
    b LoopForever
 8002086:	e7fe      	b.n	8002086 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002088:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800208c:	080086e4 	.word	0x080086e4
	ldr	r0, =_sdata
 8002090:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002094:	200001e4 	.word	0x200001e4
	ldr	r2, =_sbss
 8002098:	200001e4 	.word	0x200001e4
	ldr	r3, = _ebss
 800209c:	20001510 	.word	0x20001510

080020a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020a0:	e7fe      	b.n	80020a0 <ADC1_IRQHandler>

080020a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ac:	2003      	movs	r0, #3
 80020ae:	f000 ffd1 	bl	8003054 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020b2:	2000      	movs	r0, #0
 80020b4:	f000 f80e 	bl	80020d4 <HAL_InitTick>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	71fb      	strb	r3, [r7, #7]
 80020c2:	e001      	b.n	80020c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020c4:	f7ff fd62 	bl	8001b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020c8:	79fb      	ldrb	r3, [r7, #7]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_InitTick+0x6c>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d023      	beq.n	8002130 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <HAL_InitTick+0x70>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b14      	ldr	r3, [pc, #80]	; (8002140 <HAL_InitTick+0x6c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 ffdd 	bl	80030be <HAL_SYSTICK_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10f      	bne.n	800212a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b0f      	cmp	r3, #15
 800210e:	d809      	bhi.n	8002124 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002110:	2200      	movs	r2, #0
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	f04f 30ff 	mov.w	r0, #4294967295
 8002118:	f000 ffa7 	bl	800306a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_InitTick+0x74>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	e007      	b.n	8002134 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	73fb      	strb	r3, [r7, #15]
 8002128:	e004      	b.n	8002134 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	73fb      	strb	r3, [r7, #15]
 800212e:	e001      	b.n	8002134 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000010 	.word	0x20000010
 8002144:	20000008 	.word	0x20000008
 8002148:	2000000c 	.word	0x2000000c

0800214c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002150:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_IncTick+0x20>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_IncTick+0x24>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4413      	add	r3, r2
 800215c:	4a04      	ldr	r2, [pc, #16]	; (8002170 <HAL_IncTick+0x24>)
 800215e:	6013      	str	r3, [r2, #0]
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000010 	.word	0x20000010
 8002170:	200014fc 	.word	0x200014fc

08002174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return uwTick;
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <HAL_GetTick+0x14>)
 800217a:	681b      	ldr	r3, [r3, #0]
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	200014fc 	.word	0x200014fc

0800218c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d101      	bne.n	800219e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0ed      	b.n	800237a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fd12 	bl	8001bd4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0202 	bic.w	r2, r2, #2
 80021be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021c0:	f7ff ffd8 	bl	8002174 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021c6:	e012      	b.n	80021ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021c8:	f7ff ffd4 	bl	8002174 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b0a      	cmp	r3, #10
 80021d4:	d90b      	bls.n	80021ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2205      	movs	r2, #5
 80021e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0c5      	b.n	800237a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1e5      	bne.n	80021c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800220c:	f7ff ffb2 	bl	8002174 <HAL_GetTick>
 8002210:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002212:	e012      	b.n	800223a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002214:	f7ff ffae 	bl	8002174 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b0a      	cmp	r3, #10
 8002220:	d90b      	bls.n	800223a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2205      	movs	r2, #5
 8002232:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e09f      	b.n	800237a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0301 	and.w	r3, r3, #1
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0e5      	beq.n	8002214 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	7e1b      	ldrb	r3, [r3, #24]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d108      	bne.n	8002262 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	e007      	b.n	8002272 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002270:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	7e5b      	ldrb	r3, [r3, #25]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d108      	bne.n	800228c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	e007      	b.n	800229c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7e9b      	ldrb	r3, [r3, #26]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d108      	bne.n	80022b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0220 	orr.w	r2, r2, #32
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	e007      	b.n	80022c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f022 0220 	bic.w	r2, r2, #32
 80022c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	7edb      	ldrb	r3, [r3, #27]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d108      	bne.n	80022e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 0210 	bic.w	r2, r2, #16
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e007      	b.n	80022f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0210 	orr.w	r2, r2, #16
 80022ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7f1b      	ldrb	r3, [r3, #28]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d108      	bne.n	800230a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0208 	orr.w	r2, r2, #8
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e007      	b.n	800231a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0208 	bic.w	r2, r2, #8
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7f5b      	ldrb	r3, [r3, #29]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d108      	bne.n	8002334 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0204 	orr.w	r2, r2, #4
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e007      	b.n	8002344 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0204 	bic.w	r2, r2, #4
 8002342:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	ea42 0103 	orr.w	r1, r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	1e5a      	subs	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002382:	b480      	push	{r7}
 8002384:	b087      	sub	sp, #28
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002398:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d003      	beq.n	80023a8 <HAL_CAN_ConfigFilter+0x26>
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	f040 80aa 	bne.w	80024fc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023ae:	f043 0201 	orr.w	r2, r3, #1
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	2201      	movs	r2, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	401a      	ands	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d123      	bne.n	800242a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	401a      	ands	r2, r3
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002404:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3248      	adds	r2, #72	; 0x48
 800240a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800241e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002420:	6979      	ldr	r1, [r7, #20]
 8002422:	3348      	adds	r3, #72	; 0x48
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d122      	bne.n	8002478 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	431a      	orrs	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002452:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3248      	adds	r2, #72	; 0x48
 8002458:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800246c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800246e:	6979      	ldr	r1, [r7, #20]
 8002470:	3348      	adds	r3, #72	; 0x48
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	440b      	add	r3, r1
 8002476:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d109      	bne.n	8002494 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	43db      	mvns	r3, r3
 800248a:	401a      	ands	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002492:	e007      	b.n	80024a4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	431a      	orrs	r2, r3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	401a      	ands	r2, r3
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80024be:	e007      	b.n	80024d0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	431a      	orrs	r2, r3
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d107      	bne.n	80024e8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80024ee:	f023 0201 	bic.w	r2, r3, #1
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e006      	b.n	800250a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002500:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b01      	cmp	r3, #1
 8002528:	d12e      	bne.n	8002588 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2202      	movs	r2, #2
 800252e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002542:	f7ff fe17 	bl	8002174 <HAL_GetTick>
 8002546:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002548:	e012      	b.n	8002570 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800254a:	f7ff fe13 	bl	8002174 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b0a      	cmp	r3, #10
 8002556:	d90b      	bls.n	8002570 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2205      	movs	r2, #5
 8002568:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e012      	b.n	8002596 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1e5      	bne.n	800254a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	e006      	b.n	8002596 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800259e:	b480      	push	{r7}
 80025a0:	b089      	sub	sp, #36	; 0x24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
 80025aa:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80025bc:	7ffb      	ldrb	r3, [r7, #31]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d003      	beq.n	80025ca <HAL_CAN_AddTxMessage+0x2c>
 80025c2:	7ffb      	ldrb	r3, [r7, #31]
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	f040 80b8 	bne.w	800273a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d105      	bne.n	80025ea <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a0 	beq.w	800272a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	0e1b      	lsrs	r3, r3, #24
 80025ee:	f003 0303 	and.w	r3, r3, #3
 80025f2:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d907      	bls.n	800260a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e09e      	b.n	8002748 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800260a:	2201      	movs	r2, #1
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	409a      	lsls	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10d      	bne.n	8002638 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002626:	68f9      	ldr	r1, [r7, #12]
 8002628:	6809      	ldr	r1, [r1, #0]
 800262a:	431a      	orrs	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3318      	adds	r3, #24
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	440b      	add	r3, r1
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e00f      	b.n	8002658 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002642:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002648:	68f9      	ldr	r1, [r7, #12]
 800264a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800264c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3318      	adds	r3, #24
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	440b      	add	r3, r1
 8002656:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6819      	ldr	r1, [r3, #0]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	3318      	adds	r3, #24
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	440b      	add	r3, r1
 8002668:	3304      	adds	r3, #4
 800266a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	7d1b      	ldrb	r3, [r3, #20]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d111      	bne.n	8002698 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	3318      	adds	r3, #24
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	4413      	add	r3, r2
 8002680:	3304      	adds	r3, #4
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	6811      	ldr	r1, [r2, #0]
 8002688:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3318      	adds	r3, #24
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	440b      	add	r3, r1
 8002694:	3304      	adds	r3, #4
 8002696:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3307      	adds	r3, #7
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	061a      	lsls	r2, r3, #24
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3306      	adds	r3, #6
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	041b      	lsls	r3, r3, #16
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	3305      	adds	r3, #5
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	4313      	orrs	r3, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	3204      	adds	r2, #4
 80026b8:	7812      	ldrb	r2, [r2, #0]
 80026ba:	4610      	mov	r0, r2
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	6811      	ldr	r1, [r2, #0]
 80026c0:	ea43 0200 	orr.w	r2, r3, r0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	440b      	add	r3, r1
 80026ca:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80026ce:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3303      	adds	r3, #3
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	061a      	lsls	r2, r3, #24
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3302      	adds	r3, #2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	041b      	lsls	r3, r3, #16
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3301      	adds	r3, #1
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	4313      	orrs	r3, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	7812      	ldrb	r2, [r2, #0]
 80026f0:	4610      	mov	r0, r2
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	6811      	ldr	r1, [r2, #0]
 80026f6:	ea43 0200 	orr.w	r2, r3, r0
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	440b      	add	r3, r1
 8002700:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002704:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3318      	adds	r3, #24
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	4413      	add	r3, r2
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	6811      	ldr	r1, [r2, #0]
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	3318      	adds	r3, #24
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	440b      	add	r3, r1
 8002724:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	e00e      	b.n	8002748 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e006      	b.n	8002748 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
  }
}
 8002748:	4618      	mov	r0, r3
 800274a:	3724      	adds	r7, #36	; 0x24
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800275c:	2300      	movs	r3, #0
 800275e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002766:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d002      	beq.n	8002774 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800276e:	7afb      	ldrb	r3, [r7, #11]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d11d      	bne.n	80027b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	3301      	adds	r3, #1
 8002786:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d002      	beq.n	800279c <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	3301      	adds	r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	3301      	adds	r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80027b0:	68fb      	ldr	r3, [r7, #12]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80027be:	b480      	push	{r7}
 80027c0:	b087      	sub	sp, #28
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027d2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80027d4:	7dfb      	ldrb	r3, [r7, #23]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d003      	beq.n	80027e2 <HAL_CAN_GetRxMessage+0x24>
 80027da:	7dfb      	ldrb	r3, [r7, #23]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	f040 80f3 	bne.w	80029c8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10e      	bne.n	8002806 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d116      	bne.n	8002824 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e0e7      	b.n	80029d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d107      	bne.n	8002824 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0d8      	b.n	80029d6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	331b      	adds	r3, #27
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4413      	add	r3, r2
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0204 	and.w	r2, r3, #4
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10c      	bne.n	800285c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	331b      	adds	r3, #27
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	4413      	add	r3, r2
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	0d5b      	lsrs	r3, r3, #21
 8002852:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e00b      	b.n	8002874 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	331b      	adds	r3, #27
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	4413      	add	r3, r2
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	08db      	lsrs	r3, r3, #3
 800286c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	331b      	adds	r3, #27
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	4413      	add	r3, r2
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0202 	and.w	r2, r3, #2
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	331b      	adds	r3, #27
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	4413      	add	r3, r2
 8002896:	3304      	adds	r3, #4
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 020f 	and.w	r2, r3, #15
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	331b      	adds	r3, #27
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	4413      	add	r3, r2
 80028ae:	3304      	adds	r3, #4
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	0a1b      	lsrs	r3, r3, #8
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	331b      	adds	r3, #27
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	4413      	add	r3, r2
 80028c6:	3304      	adds	r3, #4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0c1b      	lsrs	r3, r3, #16
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	4413      	add	r3, r2
 80028dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	4413      	add	r3, r2
 80028f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0a1a      	lsrs	r2, r3, #8
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	011b      	lsls	r3, r3, #4
 800290a:	4413      	add	r3, r2
 800290c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0c1a      	lsrs	r2, r3, #16
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	3302      	adds	r3, #2
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	4413      	add	r3, r2
 8002926:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	0e1a      	lsrs	r2, r3, #24
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	3303      	adds	r3, #3
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	3304      	adds	r3, #4
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	4413      	add	r3, r2
 8002958:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	0a1a      	lsrs	r2, r3, #8
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	3305      	adds	r3, #5
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	4413      	add	r3, r2
 8002972:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0c1a      	lsrs	r2, r3, #16
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	3306      	adds	r3, #6
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	4413      	add	r3, r2
 800298c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	0e1a      	lsrs	r2, r3, #24
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	3307      	adds	r3, #7
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d108      	bne.n	80029b4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0220 	orr.w	r2, r2, #32
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	e007      	b.n	80029c4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0220 	orr.w	r2, r2, #32
 80029c2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e006      	b.n	80029d6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
  }
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b085      	sub	sp, #20
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80029f8:	7afb      	ldrb	r3, [r7, #11]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d002      	beq.n	8002a04 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80029fe:	7afb      	ldrb	r3, [r7, #11]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d10f      	bne.n	8002a24 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	e005      	b.n	8002a24 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a42:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d002      	beq.n	8002a50 <HAL_CAN_ActivateNotification+0x1e>
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d109      	bne.n	8002a64 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6959      	ldr	r1, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002a60:	2300      	movs	r3, #0
 8002a62:	e006      	b.n	8002a72 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
  }
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b08a      	sub	sp, #40	; 0x28
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002aba:	6a3b      	ldr	r3, [r7, #32]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d07c      	beq.n	8002bbe <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d023      	beq.n	8002b16 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d003      	beq.n	8002ae8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7fe fa69 	bl	8000fb8 <HAL_CAN_TxMailbox0CompleteCallback>
 8002ae6:	e016      	b.n	8002b16 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
 8002afa:	e00c      	b.n	8002b16 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	e002      	b.n	8002b16 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f96b 	bl	8002dec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d024      	beq.n	8002b6a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d003      	beq.n	8002b3c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fe fa6d 	bl	8001014 <HAL_CAN_TxMailbox1CompleteCallback>
 8002b3a:	e016      	b.n	8002b6a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	e00c      	b.n	8002b6a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
 8002b62:	e002      	b.n	8002b6a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f94b 	bl	8002e00 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d024      	beq.n	8002bbe <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7fe fa71 	bl	8001070 <HAL_CAN_TxMailbox2CompleteCallback>
 8002b8e:	e016      	b.n	8002bbe <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba2:	e00c      	b.n	8002bbe <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d004      	beq.n	8002bb8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb6:	e002      	b.n	8002bbe <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f92b 	bl	8002e14 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00c      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f003 0310 	and.w	r3, r3, #16
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d007      	beq.n	8002be2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2210      	movs	r2, #16
 8002be0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00b      	beq.n	8002c04 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d006      	beq.n	8002c04 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f91c 	bl	8002e3c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d009      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d002      	beq.n	8002c22 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f903 	bl	8002e28 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00c      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2210      	movs	r2, #16
 8002c44:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002c46:	6a3b      	ldr	r3, [r7, #32]
 8002c48:	f003 0320 	and.w	r3, r3, #32
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00b      	beq.n	8002c68 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d006      	beq.n	8002c68 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2208      	movs	r2, #8
 8002c60:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f8fe 	bl	8002e64 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d009      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f8e5 	bl	8002e50 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00b      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f8e8 	bl	8002e78 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f8e1 	bl	8002e8c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d07b      	beq.n	8002dcc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d072      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d008      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	f043 0302 	orr.w	r3, r3, #2
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d32:	6a3b      	ldr	r3, [r7, #32]
 8002d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d043      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03e      	beq.n	8002dc4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d4c:	2b60      	cmp	r3, #96	; 0x60
 8002d4e:	d02b      	beq.n	8002da8 <HAL_CAN_IRQHandler+0x32a>
 8002d50:	2b60      	cmp	r3, #96	; 0x60
 8002d52:	d82e      	bhi.n	8002db2 <HAL_CAN_IRQHandler+0x334>
 8002d54:	2b50      	cmp	r3, #80	; 0x50
 8002d56:	d022      	beq.n	8002d9e <HAL_CAN_IRQHandler+0x320>
 8002d58:	2b50      	cmp	r3, #80	; 0x50
 8002d5a:	d82a      	bhi.n	8002db2 <HAL_CAN_IRQHandler+0x334>
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	d019      	beq.n	8002d94 <HAL_CAN_IRQHandler+0x316>
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	d826      	bhi.n	8002db2 <HAL_CAN_IRQHandler+0x334>
 8002d64:	2b30      	cmp	r3, #48	; 0x30
 8002d66:	d010      	beq.n	8002d8a <HAL_CAN_IRQHandler+0x30c>
 8002d68:	2b30      	cmp	r3, #48	; 0x30
 8002d6a:	d822      	bhi.n	8002db2 <HAL_CAN_IRQHandler+0x334>
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d002      	beq.n	8002d76 <HAL_CAN_IRQHandler+0x2f8>
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d005      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002d74:	e01d      	b.n	8002db2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d7e:	e019      	b.n	8002db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d82:	f043 0310 	orr.w	r3, r3, #16
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d88:	e014      	b.n	8002db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	f043 0320 	orr.w	r3, r3, #32
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d92:	e00f      	b.n	8002db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002d9c:	e00a      	b.n	8002db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002da6:	e005      	b.n	8002db4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002db0:	e000      	b.n	8002db4 <HAL_CAN_IRQHandler+0x336>
            break;
 8002db2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002dc2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2204      	movs	r2, #4
 8002dca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d008      	beq.n	8002de4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f85e 	bl	8002ea0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002de4:	bf00      	nop
 8002de6:	3728      	adds	r7, #40	; 0x28
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002e1c:	bf00      	nop
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b085      	sub	sp, #20
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002edc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ee6:	4a04      	ldr	r2, [pc, #16]	; (8002ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	60d3      	str	r3, [r2, #12]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <__NVIC_GetPriorityGrouping+0x18>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	f003 0307 	and.w	r3, r3, #7
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr
 8002f14:	e000ed00 	.word	0xe000ed00

08002f18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	4603      	mov	r3, r0
 8002f20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	db0b      	blt.n	8002f42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	f003 021f 	and.w	r2, r3, #31
 8002f30:	4907      	ldr	r1, [pc, #28]	; (8002f50 <__NVIC_EnableIRQ+0x38>)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	2001      	movs	r0, #1
 8002f3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	e000e100 	.word	0xe000e100

08002f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	6039      	str	r1, [r7, #0]
 8002f5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	db0a      	blt.n	8002f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	490c      	ldr	r1, [pc, #48]	; (8002fa0 <__NVIC_SetPriority+0x4c>)
 8002f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f72:	0112      	lsls	r2, r2, #4
 8002f74:	b2d2      	uxtb	r2, r2
 8002f76:	440b      	add	r3, r1
 8002f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f7c:	e00a      	b.n	8002f94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	4908      	ldr	r1, [pc, #32]	; (8002fa4 <__NVIC_SetPriority+0x50>)
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	3b04      	subs	r3, #4
 8002f8c:	0112      	lsls	r2, r2, #4
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	440b      	add	r3, r1
 8002f92:	761a      	strb	r2, [r3, #24]
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	e000e100 	.word	0xe000e100
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f1c3 0307 	rsb	r3, r3, #7
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	bf28      	it	cs
 8002fc6:	2304      	movcs	r3, #4
 8002fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3304      	adds	r3, #4
 8002fce:	2b06      	cmp	r3, #6
 8002fd0:	d902      	bls.n	8002fd8 <NVIC_EncodePriority+0x30>
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3b03      	subs	r3, #3
 8002fd6:	e000      	b.n	8002fda <NVIC_EncodePriority+0x32>
 8002fd8:	2300      	movs	r3, #0
 8002fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	401a      	ands	r2, r3
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	43d9      	mvns	r1, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003000:	4313      	orrs	r3, r2
         );
}
 8003002:	4618      	mov	r0, r3
 8003004:	3724      	adds	r7, #36	; 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
	...

08003010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003020:	d301      	bcc.n	8003026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003022:	2301      	movs	r3, #1
 8003024:	e00f      	b.n	8003046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003026:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <SysTick_Config+0x40>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800302e:	210f      	movs	r1, #15
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	f7ff ff8e 	bl	8002f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <SysTick_Config+0x40>)
 800303a:	2200      	movs	r2, #0
 800303c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800303e:	4b04      	ldr	r3, [pc, #16]	; (8003050 <SysTick_Config+0x40>)
 8003040:	2207      	movs	r2, #7
 8003042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	e000e010 	.word	0xe000e010

08003054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff ff29 	bl	8002eb4 <__NVIC_SetPriorityGrouping>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b086      	sub	sp, #24
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	60b9      	str	r1, [r7, #8]
 8003074:	607a      	str	r2, [r7, #4]
 8003076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800307c:	f7ff ff3e 	bl	8002efc <__NVIC_GetPriorityGrouping>
 8003080:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	6978      	ldr	r0, [r7, #20]
 8003088:	f7ff ff8e 	bl	8002fa8 <NVIC_EncodePriority>
 800308c:	4602      	mov	r2, r0
 800308e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003092:	4611      	mov	r1, r2
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff5d 	bl	8002f54 <__NVIC_SetPriority>
}
 800309a:	bf00      	nop
 800309c:	3718      	adds	r7, #24
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff31 	bl	8002f18 <__NVIC_EnableIRQ>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b082      	sub	sp, #8
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ffa2 	bl	8003010 <SysTick_Config>
 80030cc:	4603      	mov	r3, r0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e098      	b.n	800321c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b4d      	ldr	r3, [pc, #308]	; (8003228 <HAL_DMA_Init+0x150>)
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d80f      	bhi.n	8003116 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b4b      	ldr	r3, [pc, #300]	; (800322c <HAL_DMA_Init+0x154>)
 80030fe:	4413      	add	r3, r2
 8003100:	4a4b      	ldr	r2, [pc, #300]	; (8003230 <HAL_DMA_Init+0x158>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	091b      	lsrs	r3, r3, #4
 8003108:	009a      	lsls	r2, r3, #2
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a48      	ldr	r2, [pc, #288]	; (8003234 <HAL_DMA_Init+0x15c>)
 8003112:	641a      	str	r2, [r3, #64]	; 0x40
 8003114:	e00e      	b.n	8003134 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	4b46      	ldr	r3, [pc, #280]	; (8003238 <HAL_DMA_Init+0x160>)
 800311e:	4413      	add	r3, r2
 8003120:	4a43      	ldr	r2, [pc, #268]	; (8003230 <HAL_DMA_Init+0x158>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	009a      	lsls	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a42      	ldr	r2, [pc, #264]	; (800323c <HAL_DMA_Init+0x164>)
 8003132:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800314a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003158:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003164:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003170:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4313      	orrs	r3, r2
 800317c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800318e:	d039      	beq.n	8003204 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	4a27      	ldr	r2, [pc, #156]	; (8003234 <HAL_DMA_Init+0x15c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d11a      	bne.n	80031d0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800319a:	4b29      	ldr	r3, [pc, #164]	; (8003240 <HAL_DMA_Init+0x168>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f003 031c 	and.w	r3, r3, #28
 80031a6:	210f      	movs	r1, #15
 80031a8:	fa01 f303 	lsl.w	r3, r1, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	4924      	ldr	r1, [pc, #144]	; (8003240 <HAL_DMA_Init+0x168>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031b4:	4b22      	ldr	r3, [pc, #136]	; (8003240 <HAL_DMA_Init+0x168>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	f003 031c 	and.w	r3, r3, #28
 80031c4:	fa01 f303 	lsl.w	r3, r1, r3
 80031c8:	491d      	ldr	r1, [pc, #116]	; (8003240 <HAL_DMA_Init+0x168>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
 80031ce:	e019      	b.n	8003204 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031d0:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <HAL_DMA_Init+0x16c>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d8:	f003 031c 	and.w	r3, r3, #28
 80031dc:	210f      	movs	r1, #15
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	4917      	ldr	r1, [pc, #92]	; (8003244 <HAL_DMA_Init+0x16c>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_DMA_Init+0x16c>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6859      	ldr	r1, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f003 031c 	and.w	r3, r3, #28
 80031fa:	fa01 f303 	lsl.w	r3, r1, r3
 80031fe:	4911      	ldr	r1, [pc, #68]	; (8003244 <HAL_DMA_Init+0x16c>)
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	40020407 	.word	0x40020407
 800322c:	bffdfff8 	.word	0xbffdfff8
 8003230:	cccccccd 	.word	0xcccccccd
 8003234:	40020000 	.word	0x40020000
 8003238:	bffdfbf8 	.word	0xbffdfbf8
 800323c:	40020400 	.word	0x40020400
 8003240:	400200a8 	.word	0x400200a8
 8003244:	400204a8 	.word	0x400204a8

08003248 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_DMA_Start_IT+0x20>
 8003264:	2302      	movs	r3, #2
 8003266:	e04b      	b.n	8003300 <HAL_DMA_Start_IT+0xb8>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b01      	cmp	r3, #1
 800327a:	d13a      	bne.n	80032f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2202      	movs	r2, #2
 8003280:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 f92a 	bl	80034fa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d008      	beq.n	80032c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 020e 	orr.w	r2, r2, #14
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	e00f      	b.n	80032e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0204 	bic.w	r2, r2, #4
 80032ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 020a 	orr.w	r2, r2, #10
 80032de:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e005      	b.n	80032fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80032fa:	2302      	movs	r3, #2
 80032fc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d008      	beq.n	8003332 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2204      	movs	r2, #4
 8003324:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e022      	b.n	8003378 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f022 020e 	bic.w	r2, r2, #14
 8003340:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003356:	f003 021c 	and.w	r2, r3, #28
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2101      	movs	r1, #1
 8003360:	fa01 f202 	lsl.w	r2, r1, r2
 8003364:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003376:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	f003 031c 	and.w	r3, r3, #28
 80033a4:	2204      	movs	r2, #4
 80033a6:	409a      	lsls	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4013      	ands	r3, r2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d026      	beq.n	80033fe <HAL_DMA_IRQHandler+0x7a>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d021      	beq.n	80033fe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d107      	bne.n	80033d8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0204 	bic.w	r2, r2, #4
 80033d6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	f003 021c 	and.w	r2, r3, #28
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	2104      	movs	r1, #4
 80033e6:	fa01 f202 	lsl.w	r2, r1, r2
 80033ea:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d071      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80033fc:	e06c      	b.n	80034d8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f003 031c 	and.w	r3, r3, #28
 8003406:	2202      	movs	r2, #2
 8003408:	409a      	lsls	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d02e      	beq.n	8003470 <HAL_DMA_IRQHandler+0xec>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d029      	beq.n	8003470 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0320 	and.w	r3, r3, #32
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10b      	bne.n	8003442 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 020a 	bic.w	r2, r2, #10
 8003438:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	f003 021c 	and.w	r2, r3, #28
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2102      	movs	r1, #2
 8003450:	fa01 f202 	lsl.w	r2, r1, r2
 8003454:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d038      	beq.n	80034d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800346e:	e033      	b.n	80034d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	f003 031c 	and.w	r3, r3, #28
 8003478:	2208      	movs	r2, #8
 800347a:	409a      	lsls	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	4013      	ands	r3, r2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d02a      	beq.n	80034da <HAL_DMA_IRQHandler+0x156>
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	f003 0308 	and.w	r3, r3, #8
 800348a:	2b00      	cmp	r3, #0
 800348c:	d025      	beq.n	80034da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 020e 	bic.w	r2, r2, #14
 800349c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	f003 021c 	and.w	r2, r3, #28
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2101      	movs	r1, #1
 80034ac:	fa01 f202 	lsl.w	r2, r1, r2
 80034b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d004      	beq.n	80034da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034d8:	bf00      	nop
 80034da:	bf00      	nop
}
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b085      	sub	sp, #20
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350c:	f003 021c 	and.w	r2, r3, #28
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	2101      	movs	r1, #1
 8003516:	fa01 f202 	lsl.w	r2, r1, r2
 800351a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	2b10      	cmp	r3, #16
 800352a:	d108      	bne.n	800353e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800353c:	e007      	b.n	800354e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	60da      	str	r2, [r3, #12]
}
 800354e:	bf00      	nop
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356a:	e148      	b.n	80037fe <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2101      	movs	r1, #1
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	fa01 f303 	lsl.w	r3, r1, r3
 8003578:	4013      	ands	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 813a 	beq.w	80037f8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d00b      	beq.n	80035a4 <HAL_GPIO_Init+0x48>
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d007      	beq.n	80035a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003598:	2b11      	cmp	r3, #17
 800359a:	d003      	beq.n	80035a4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b12      	cmp	r3, #18
 80035a2:	d130      	bne.n	8003606 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	2203      	movs	r2, #3
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035da:	2201      	movs	r2, #1
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	4013      	ands	r3, r2
 80035e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	091b      	lsrs	r3, r3, #4
 80035f0:	f003 0201 	and.w	r2, r3, #1
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	2203      	movs	r2, #3
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43db      	mvns	r3, r3
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4013      	ands	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_Init+0xea>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b12      	cmp	r3, #18
 8003644:	d123      	bne.n	800368e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	08da      	lsrs	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3208      	adds	r2, #8
 800364e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	220f      	movs	r2, #15
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43db      	mvns	r3, r3
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	4013      	ands	r3, r2
 8003668:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	f003 0307 	and.w	r3, r3, #7
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	08da      	lsrs	r2, r3, #3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3208      	adds	r2, #8
 8003688:	6939      	ldr	r1, [r7, #16]
 800368a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	2203      	movs	r2, #3
 800369a:	fa02 f303 	lsl.w	r3, r2, r3
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0203 	and.w	r2, r3, #3
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8094 	beq.w	80037f8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036d0:	4b52      	ldr	r3, [pc, #328]	; (800381c <HAL_GPIO_Init+0x2c0>)
 80036d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d4:	4a51      	ldr	r2, [pc, #324]	; (800381c <HAL_GPIO_Init+0x2c0>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6613      	str	r3, [r2, #96]	; 0x60
 80036dc:	4b4f      	ldr	r3, [pc, #316]	; (800381c <HAL_GPIO_Init+0x2c0>)
 80036de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036e8:	4a4d      	ldr	r2, [pc, #308]	; (8003820 <HAL_GPIO_Init+0x2c4>)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3302      	adds	r3, #2
 80036f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	220f      	movs	r2, #15
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	4013      	ands	r3, r2
 800370a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003712:	d00d      	beq.n	8003730 <HAL_GPIO_Init+0x1d4>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	4a43      	ldr	r2, [pc, #268]	; (8003824 <HAL_GPIO_Init+0x2c8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d007      	beq.n	800372c <HAL_GPIO_Init+0x1d0>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a42      	ldr	r2, [pc, #264]	; (8003828 <HAL_GPIO_Init+0x2cc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d101      	bne.n	8003728 <HAL_GPIO_Init+0x1cc>
 8003724:	2302      	movs	r3, #2
 8003726:	e004      	b.n	8003732 <HAL_GPIO_Init+0x1d6>
 8003728:	2307      	movs	r3, #7
 800372a:	e002      	b.n	8003732 <HAL_GPIO_Init+0x1d6>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <HAL_GPIO_Init+0x1d6>
 8003730:	2300      	movs	r3, #0
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	f002 0203 	and.w	r2, r2, #3
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	4093      	lsls	r3, r2
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003742:	4937      	ldr	r1, [pc, #220]	; (8003820 <HAL_GPIO_Init+0x2c4>)
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	3302      	adds	r3, #2
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003750:	4b36      	ldr	r3, [pc, #216]	; (800382c <HAL_GPIO_Init+0x2d0>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	43db      	mvns	r3, r3
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4013      	ands	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003774:	4a2d      	ldr	r2, [pc, #180]	; (800382c <HAL_GPIO_Init+0x2d0>)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800377a:	4b2c      	ldr	r3, [pc, #176]	; (800382c <HAL_GPIO_Init+0x2d0>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43db      	mvns	r3, r3
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800379e:	4a23      	ldr	r2, [pc, #140]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037a4:	4b21      	ldr	r3, [pc, #132]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	43db      	mvns	r3, r3
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4013      	ands	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037c8:	4a18      	ldr	r2, [pc, #96]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037ce:	4b17      	ldr	r3, [pc, #92]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4013      	ands	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037f2:	4a0e      	ldr	r2, [pc, #56]	; (800382c <HAL_GPIO_Init+0x2d0>)
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	f47f aeaf 	bne.w	800356c <HAL_GPIO_Init+0x10>
  }
}
 800380e:	bf00      	nop
 8003810:	bf00      	nop
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40021000 	.word	0x40021000
 8003820:	40010000 	.word	0x40010000
 8003824:	48000400 	.word	0x48000400
 8003828:	48000800 	.word	0x48000800
 800382c:	40010400 	.word	0x40010400

08003830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
 800383c:	4613      	mov	r3, r2
 800383e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003840:	787b      	ldrb	r3, [r7, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800384c:	e002      	b.n	8003854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003864:	4b05      	ldr	r3, [pc, #20]	; (800387c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a04      	ldr	r2, [pc, #16]	; (800387c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800386a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386e:	6013      	str	r3, [r2, #0]
}
 8003870:	bf00      	nop
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40007000 	.word	0x40007000

08003880 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003884:	4b04      	ldr	r3, [pc, #16]	; (8003898 <HAL_PWREx_GetVoltageRange+0x18>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800388c:	4618      	mov	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40007000 	.word	0x40007000

0800389c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038aa:	d130      	bne.n	800390e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ac:	4b23      	ldr	r3, [pc, #140]	; (800393c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b8:	d038      	beq.n	800392c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ba:	4b20      	ldr	r3, [pc, #128]	; (800393c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038ca:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2232      	movs	r2, #50	; 0x32
 80038d0:	fb02 f303 	mul.w	r3, r2, r3
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	0c9b      	lsrs	r3, r3, #18
 80038dc:	3301      	adds	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038e0:	e002      	b.n	80038e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038e8:	4b14      	ldr	r3, [pc, #80]	; (800393c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f4:	d102      	bne.n	80038fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f2      	bne.n	80038e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038fc:	4b0f      	ldr	r3, [pc, #60]	; (800393c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003908:	d110      	bne.n	800392c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e00f      	b.n	800392e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800391a:	d007      	beq.n	800392c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800391c:	4b07      	ldr	r3, [pc, #28]	; (800393c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003924:	4a05      	ldr	r2, [pc, #20]	; (800393c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800392a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3714      	adds	r7, #20
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40007000 	.word	0x40007000
 8003940:	20000008 	.word	0x20000008
 8003944:	431bde83 	.word	0x431bde83

08003948 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f000 bc11 	b.w	800417e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800395c:	4ba0      	ldr	r3, [pc, #640]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 030c 	and.w	r3, r3, #12
 8003964:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003966:	4b9e      	ldr	r3, [pc, #632]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0310 	and.w	r3, r3, #16
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80e4 	beq.w	8003b46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <HAL_RCC_OscConfig+0x4c>
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b0c      	cmp	r3, #12
 8003988:	f040 808b 	bne.w	8003aa2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	2b01      	cmp	r3, #1
 8003990:	f040 8087 	bne.w	8003aa2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003994:	4b92      	ldr	r3, [pc, #584]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_OscConfig+0x64>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e3e8      	b.n	800417e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1a      	ldr	r2, [r3, #32]
 80039b0:	4b8b      	ldr	r3, [pc, #556]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0308 	and.w	r3, r3, #8
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d004      	beq.n	80039c6 <HAL_RCC_OscConfig+0x7e>
 80039bc:	4b88      	ldr	r3, [pc, #544]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c4:	e005      	b.n	80039d2 <HAL_RCC_OscConfig+0x8a>
 80039c6:	4b86      	ldr	r3, [pc, #536]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 80039c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d223      	bcs.n	8003a1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fd7a 	bl	80044d4 <RCC_SetFlashLatencyFromMSIRange>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e3c9      	b.n	800417e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039ea:	4b7d      	ldr	r3, [pc, #500]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a7c      	ldr	r2, [pc, #496]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 80039f0:	f043 0308 	orr.w	r3, r3, #8
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	4b7a      	ldr	r3, [pc, #488]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4977      	ldr	r1, [pc, #476]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a08:	4b75      	ldr	r3, [pc, #468]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	021b      	lsls	r3, r3, #8
 8003a16:	4972      	ldr	r1, [pc, #456]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	604b      	str	r3, [r1, #4]
 8003a1c:	e025      	b.n	8003a6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a1e:	4b70      	ldr	r3, [pc, #448]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a6f      	ldr	r2, [pc, #444]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003a24:	f043 0308 	orr.w	r3, r3, #8
 8003a28:	6013      	str	r3, [r2, #0]
 8003a2a:	4b6d      	ldr	r3, [pc, #436]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	496a      	ldr	r1, [pc, #424]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	69db      	ldr	r3, [r3, #28]
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	4965      	ldr	r1, [pc, #404]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fd3a 	bl	80044d4 <RCC_SetFlashLatencyFromMSIRange>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e389      	b.n	800417e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a6a:	f000 fc6f 	bl	800434c <HAL_RCC_GetSysClockFreq>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b5b      	ldr	r3, [pc, #364]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	495a      	ldr	r1, [pc, #360]	; (8003be4 <HAL_RCC_OscConfig+0x29c>)
 8003a7c:	5ccb      	ldrb	r3, [r1, r3]
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	4a58      	ldr	r2, [pc, #352]	; (8003be8 <HAL_RCC_OscConfig+0x2a0>)
 8003a88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a8a:	4b58      	ldr	r3, [pc, #352]	; (8003bec <HAL_RCC_OscConfig+0x2a4>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fb20 	bl	80020d4 <HAL_InitTick>
 8003a94:	4603      	mov	r3, r0
 8003a96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d052      	beq.n	8003b44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
 8003aa0:	e36d      	b.n	800417e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d032      	beq.n	8003b10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003aaa:	4b4d      	ldr	r3, [pc, #308]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a4c      	ldr	r2, [pc, #304]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ab6:	f7fe fb5d 	bl	8002174 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003abe:	f7fe fb59 	bl	8002174 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e356      	b.n	800417e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ad0:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0f0      	beq.n	8003abe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003adc:	4b40      	ldr	r3, [pc, #256]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a3f      	ldr	r2, [pc, #252]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003ae2:	f043 0308 	orr.w	r3, r3, #8
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b3d      	ldr	r3, [pc, #244]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	493a      	ldr	r1, [pc, #232]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003afa:	4b39      	ldr	r3, [pc, #228]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	021b      	lsls	r3, r3, #8
 8003b08:	4935      	ldr	r1, [pc, #212]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	604b      	str	r3, [r1, #4]
 8003b0e:	e01a      	b.n	8003b46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b10:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a32      	ldr	r2, [pc, #200]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003b16:	f023 0301 	bic.w	r3, r3, #1
 8003b1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fb2a 	bl	8002174 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b24:	f7fe fb26 	bl	8002174 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e323      	b.n	800417e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b36:	4b2a      	ldr	r3, [pc, #168]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f0      	bne.n	8003b24 <HAL_RCC_OscConfig+0x1dc>
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d073      	beq.n	8003c3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_OscConfig+0x21c>
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	2b0c      	cmp	r3, #12
 8003b5c:	d10e      	bne.n	8003b7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b03      	cmp	r3, #3
 8003b62:	d10b      	bne.n	8003b7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b64:	4b1e      	ldr	r3, [pc, #120]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d063      	beq.n	8003c38 <HAL_RCC_OscConfig+0x2f0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d15f      	bne.n	8003c38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e300      	b.n	800417e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d106      	bne.n	8003b94 <HAL_RCC_OscConfig+0x24c>
 8003b86:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e01d      	b.n	8003bd0 <HAL_RCC_OscConfig+0x288>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x270>
 8003b9e:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a0f      	ldr	r2, [pc, #60]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a0c      	ldr	r2, [pc, #48]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCC_OscConfig+0x288>
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a08      	ldr	r2, [pc, #32]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a05      	ldr	r2, [pc, #20]	; (8003be0 <HAL_RCC_OscConfig+0x298>)
 8003bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d01b      	beq.n	8003c10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd8:	f7fe facc 	bl	8002174 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bde:	e010      	b.n	8003c02 <HAL_RCC_OscConfig+0x2ba>
 8003be0:	40021000 	.word	0x40021000
 8003be4:	080082ac 	.word	0x080082ac
 8003be8:	20000008 	.word	0x20000008
 8003bec:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bf0:	f7fe fac0 	bl	8002174 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b64      	cmp	r3, #100	; 0x64
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e2bd      	b.n	800417e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c02:	4baf      	ldr	r3, [pc, #700]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x2a8>
 8003c0e:	e014      	b.n	8003c3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe fab0 	bl	8002174 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c18:	f7fe faac 	bl	8002174 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b64      	cmp	r3, #100	; 0x64
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e2a9      	b.n	800417e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c2a:	4ba5      	ldr	r3, [pc, #660]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x2d0>
 8003c36:	e000      	b.n	8003c3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d060      	beq.n	8003d08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_OscConfig+0x310>
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d119      	bne.n	8003c86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d116      	bne.n	8003c86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c58:	4b99      	ldr	r3, [pc, #612]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d005      	beq.n	8003c70 <HAL_RCC_OscConfig+0x328>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e286      	b.n	800417e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c70:	4b93      	ldr	r3, [pc, #588]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	061b      	lsls	r3, r3, #24
 8003c7e:	4990      	ldr	r1, [pc, #576]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c84:	e040      	b.n	8003d08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d023      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c8e:	4b8c      	ldr	r3, [pc, #560]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a8b      	ldr	r2, [pc, #556]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9a:	f7fe fa6b 	bl	8002174 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca2:	f7fe fa67 	bl	8002174 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e264      	b.n	800417e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cb4:	4b82      	ldr	r3, [pc, #520]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d0f0      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc0:	4b7f      	ldr	r3, [pc, #508]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	497c      	ldr	r1, [pc, #496]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
 8003cd4:	e018      	b.n	8003d08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd6:	4b7a      	ldr	r3, [pc, #488]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a79      	ldr	r2, [pc, #484]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fe fa47 	bl	8002174 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fe fa43 	bl	8002174 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e240      	b.n	800417e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cfc:	4b70      	ldr	r3, [pc, #448]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d1f0      	bne.n	8003cea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0308 	and.w	r3, r3, #8
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d03c      	beq.n	8003d8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d01c      	beq.n	8003d56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d1c:	4b68      	ldr	r3, [pc, #416]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d22:	4a67      	ldr	r2, [pc, #412]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003d24:	f043 0301 	orr.w	r3, r3, #1
 8003d28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d2c:	f7fe fa22 	bl	8002174 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d34:	f7fe fa1e 	bl	8002174 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e21b      	b.n	800417e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d46:	4b5e      	ldr	r3, [pc, #376]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0ef      	beq.n	8003d34 <HAL_RCC_OscConfig+0x3ec>
 8003d54:	e01b      	b.n	8003d8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d56:	4b5a      	ldr	r3, [pc, #360]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003d58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d5c:	4a58      	ldr	r2, [pc, #352]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003d5e:	f023 0301 	bic.w	r3, r3, #1
 8003d62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fe fa05 	bl	8002174 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6e:	f7fe fa01 	bl	8002174 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e1fe      	b.n	800417e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d80:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1ef      	bne.n	8003d6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80a6 	beq.w	8003ee8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003da0:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10d      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dac:	4b44      	ldr	r3, [pc, #272]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	4a43      	ldr	r2, [pc, #268]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db6:	6593      	str	r3, [r2, #88]	; 0x58
 8003db8:	4b41      	ldr	r3, [pc, #260]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	60bb      	str	r3, [r7, #8]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dc8:	4b3e      	ldr	r3, [pc, #248]	; (8003ec4 <HAL_RCC_OscConfig+0x57c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d118      	bne.n	8003e06 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd4:	4b3b      	ldr	r3, [pc, #236]	; (8003ec4 <HAL_RCC_OscConfig+0x57c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a3a      	ldr	r2, [pc, #232]	; (8003ec4 <HAL_RCC_OscConfig+0x57c>)
 8003dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de0:	f7fe f9c8 	bl	8002174 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de8:	f7fe f9c4 	bl	8002174 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e1c1      	b.n	800417e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dfa:	4b32      	ldr	r3, [pc, #200]	; (8003ec4 <HAL_RCC_OscConfig+0x57c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d0f0      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d108      	bne.n	8003e20 <HAL_RCC_OscConfig+0x4d8>
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	4a2a      	ldr	r2, [pc, #168]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e1e:	e024      	b.n	8003e6a <HAL_RCC_OscConfig+0x522>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b05      	cmp	r3, #5
 8003e26:	d110      	bne.n	8003e4a <HAL_RCC_OscConfig+0x502>
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a24      	ldr	r2, [pc, #144]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e38:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003e40:	f043 0301 	orr.w	r3, r3, #1
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e48:	e00f      	b.n	8003e6a <HAL_RCC_OscConfig+0x522>
 8003e4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e50:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003e52:	f023 0301 	bic.w	r3, r3, #1
 8003e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e5a:	4b19      	ldr	r3, [pc, #100]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e60:	4a17      	ldr	r2, [pc, #92]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003e62:	f023 0304 	bic.w	r3, r3, #4
 8003e66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d016      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e72:	f7fe f97f 	bl	8002174 <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7a:	f7fe f97b 	bl	8002174 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e176      	b.n	800417e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_OscConfig+0x578>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0ed      	beq.n	8003e7a <HAL_RCC_OscConfig+0x532>
 8003e9e:	e01a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fe f968 	bl	8002174 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea6:	e00f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7fe f964 	bl	8002174 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d906      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e15f      	b.n	800417e <HAL_RCC_OscConfig+0x836>
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec8:	4baa      	ldr	r3, [pc, #680]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e8      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ed6:	7ffb      	ldrb	r3, [r7, #31]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d105      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003edc:	4ba5      	ldr	r3, [pc, #660]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	4aa4      	ldr	r2, [pc, #656]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8003ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d03c      	beq.n	8003f6e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d01c      	beq.n	8003f36 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003efc:	4b9d      	ldr	r3, [pc, #628]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8003efe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f02:	4a9c      	ldr	r2, [pc, #624]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fe f932 	bl	8002174 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f14:	f7fe f92e 	bl	8002174 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e12b      	b.n	800417e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f26:	4b93      	ldr	r3, [pc, #588]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8003f28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0ef      	beq.n	8003f14 <HAL_RCC_OscConfig+0x5cc>
 8003f34:	e01b      	b.n	8003f6e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f36:	4b8f      	ldr	r3, [pc, #572]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8003f38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f3c:	4a8d      	ldr	r2, [pc, #564]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8003f3e:	f023 0301 	bic.w	r3, r3, #1
 8003f42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f46:	f7fe f915 	bl	8002174 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f4e:	f7fe f911 	bl	8002174 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e10e      	b.n	800417e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f60:	4b84      	ldr	r3, [pc, #528]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8003f62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1ef      	bne.n	8003f4e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 8102 	beq.w	800417c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	f040 80c5 	bne.w	800410c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f82:	4b7c      	ldr	r3, [pc, #496]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f003 0203 	and.w	r2, r3, #3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d12c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d123      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fb2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d11b      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d113      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d109      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	3b01      	subs	r3, #1
 8003fea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d067      	beq.n	80040c0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	2b0c      	cmp	r3, #12
 8003ff4:	d062      	beq.n	80040bc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003ff6:	4b5f      	ldr	r3, [pc, #380]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e0bb      	b.n	800417e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004006:	4b5b      	ldr	r3, [pc, #364]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a5a      	ldr	r2, [pc, #360]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 800400c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004010:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004012:	f7fe f8af 	bl	8002174 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401a:	f7fe f8ab 	bl	8002174 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e0a8      	b.n	800417e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800402c:	4b51      	ldr	r3, [pc, #324]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004038:	4b4e      	ldr	r3, [pc, #312]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	4b4e      	ldr	r3, [pc, #312]	; (8004178 <HAL_RCC_OscConfig+0x830>)
 800403e:	4013      	ands	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004048:	3a01      	subs	r2, #1
 800404a:	0112      	lsls	r2, r2, #4
 800404c:	4311      	orrs	r1, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004052:	0212      	lsls	r2, r2, #8
 8004054:	4311      	orrs	r1, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800405a:	0852      	lsrs	r2, r2, #1
 800405c:	3a01      	subs	r2, #1
 800405e:	0552      	lsls	r2, r2, #21
 8004060:	4311      	orrs	r1, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004066:	0852      	lsrs	r2, r2, #1
 8004068:	3a01      	subs	r2, #1
 800406a:	0652      	lsls	r2, r2, #25
 800406c:	4311      	orrs	r1, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004072:	06d2      	lsls	r2, r2, #27
 8004074:	430a      	orrs	r2, r1
 8004076:	493f      	ldr	r1, [pc, #252]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800407c:	4b3d      	ldr	r3, [pc, #244]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a3c      	ldr	r2, [pc, #240]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8004082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004086:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004088:	4b3a      	ldr	r3, [pc, #232]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a39      	ldr	r2, [pc, #228]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 800408e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004092:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004094:	f7fe f86e 	bl	8002174 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409c:	f7fe f86a 	bl	8002174 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e067      	b.n	800417e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ae:	4b31      	ldr	r3, [pc, #196]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ba:	e05f      	b.n	800417c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e05e      	b.n	800417e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c0:	4b2c      	ldr	r3, [pc, #176]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d157      	bne.n	800417c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040cc:	4b29      	ldr	r3, [pc, #164]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a28      	ldr	r2, [pc, #160]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 80040d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d8:	4b26      	ldr	r3, [pc, #152]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	4a25      	ldr	r2, [pc, #148]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 80040de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040e4:	f7fe f846 	bl	8002174 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fe f842 	bl	8002174 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e03f      	b.n	800417e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040fe:	4b1d      	ldr	r3, [pc, #116]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x7a4>
 800410a:	e037      	b.n	800417c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	2b0c      	cmp	r3, #12
 8004110:	d02d      	beq.n	800416e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b18      	ldr	r3, [pc, #96]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a17      	ldr	r2, [pc, #92]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8004118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d105      	bne.n	8004136 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	4a11      	ldr	r2, [pc, #68]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8004130:	f023 0303 	bic.w	r3, r3, #3
 8004134:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	4a0e      	ldr	r2, [pc, #56]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 800413c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004144:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004146:	f7fe f815 	bl	8002174 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414e:	f7fe f811 	bl	8002174 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e00e      	b.n	800417e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <HAL_RCC_OscConfig+0x82c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <HAL_RCC_OscConfig+0x806>
 800416c:	e006      	b.n	800417c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e005      	b.n	800417e <HAL_RCC_OscConfig+0x836>
 8004172:	bf00      	nop
 8004174:	40021000 	.word	0x40021000
 8004178:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3720      	adds	r7, #32
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop

08004188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0c8      	b.n	800432e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800419c:	4b66      	ldr	r3, [pc, #408]	; (8004338 <HAL_RCC_ClockConfig+0x1b0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d910      	bls.n	80041cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b63      	ldr	r3, [pc, #396]	; (8004338 <HAL_RCC_ClockConfig+0x1b0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f023 0207 	bic.w	r2, r3, #7
 80041b2:	4961      	ldr	r1, [pc, #388]	; (8004338 <HAL_RCC_ClockConfig+0x1b0>)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ba:	4b5f      	ldr	r3, [pc, #380]	; (8004338 <HAL_RCC_ClockConfig+0x1b0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d001      	beq.n	80041cc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0b0      	b.n	800432e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d04c      	beq.n	8004272 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e0:	4b56      	ldr	r3, [pc, #344]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d121      	bne.n	8004230 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e09e      	b.n	800432e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f8:	4b50      	ldr	r3, [pc, #320]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d115      	bne.n	8004230 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e092      	b.n	800432e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d107      	bne.n	8004220 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004210:	4b4a      	ldr	r3, [pc, #296]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e086      	b.n	800432e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004220:	4b46      	ldr	r3, [pc, #280]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e07e      	b.n	800432e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004230:	4b42      	ldr	r3, [pc, #264]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f023 0203 	bic.w	r2, r3, #3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	493f      	ldr	r1, [pc, #252]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 800423e:	4313      	orrs	r3, r2
 8004240:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004242:	f7fd ff97 	bl	8002174 <HAL_GetTick>
 8004246:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004248:	e00a      	b.n	8004260 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800424a:	f7fd ff93 	bl	8002174 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	f241 3288 	movw	r2, #5000	; 0x1388
 8004258:	4293      	cmp	r3, r2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e066      	b.n	800432e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004260:	4b36      	ldr	r3, [pc, #216]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 020c 	and.w	r2, r3, #12
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	429a      	cmp	r2, r3
 8004270:	d1eb      	bne.n	800424a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800427e:	4b2f      	ldr	r3, [pc, #188]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	492c      	ldr	r1, [pc, #176]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 800428c:	4313      	orrs	r3, r2
 800428e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004290:	4b29      	ldr	r3, [pc, #164]	; (8004338 <HAL_RCC_ClockConfig+0x1b0>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d210      	bcs.n	80042c0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429e:	4b26      	ldr	r3, [pc, #152]	; (8004338 <HAL_RCC_ClockConfig+0x1b0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f023 0207 	bic.w	r2, r3, #7
 80042a6:	4924      	ldr	r1, [pc, #144]	; (8004338 <HAL_RCC_ClockConfig+0x1b0>)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b22      	ldr	r3, [pc, #136]	; (8004338 <HAL_RCC_ClockConfig+0x1b0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e036      	b.n	800432e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042cc:	4b1b      	ldr	r3, [pc, #108]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4918      	ldr	r1, [pc, #96]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ea:	4b14      	ldr	r3, [pc, #80]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4910      	ldr	r1, [pc, #64]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042fe:	f000 f825 	bl	800434c <HAL_RCC_GetSysClockFreq>
 8004302:	4602      	mov	r2, r0
 8004304:	4b0d      	ldr	r3, [pc, #52]	; (800433c <HAL_RCC_ClockConfig+0x1b4>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	091b      	lsrs	r3, r3, #4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	490c      	ldr	r1, [pc, #48]	; (8004340 <HAL_RCC_ClockConfig+0x1b8>)
 8004310:	5ccb      	ldrb	r3, [r1, r3]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	fa22 f303 	lsr.w	r3, r2, r3
 800431a:	4a0a      	ldr	r2, [pc, #40]	; (8004344 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800431e:	4b0a      	ldr	r3, [pc, #40]	; (8004348 <HAL_RCC_ClockConfig+0x1c0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f7fd fed6 	bl	80020d4 <HAL_InitTick>
 8004328:	4603      	mov	r3, r0
 800432a:	72fb      	strb	r3, [r7, #11]

  return status;
 800432c:	7afb      	ldrb	r3, [r7, #11]
}
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	40022000 	.word	0x40022000
 800433c:	40021000 	.word	0x40021000
 8004340:	080082ac 	.word	0x080082ac
 8004344:	20000008 	.word	0x20000008
 8004348:	2000000c 	.word	0x2000000c

0800434c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800434c:	b480      	push	{r7}
 800434e:	b089      	sub	sp, #36	; 0x24
 8004350:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	2300      	movs	r3, #0
 8004358:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800435a:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004364:	4b3b      	ldr	r3, [pc, #236]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x34>
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d121      	bne.n	80043be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d11e      	bne.n	80043be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004380:	4b34      	ldr	r3, [pc, #208]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800438c:	4b31      	ldr	r3, [pc, #196]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 800438e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004392:	0a1b      	lsrs	r3, r3, #8
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	e005      	b.n	80043a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800439c:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043a8:	4a2b      	ldr	r2, [pc, #172]	; (8004458 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10d      	bne.n	80043d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b04      	cmp	r3, #4
 80043c2:	d102      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043c4:	4b25      	ldr	r3, [pc, #148]	; (800445c <HAL_RCC_GetSysClockFreq+0x110>)
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	e004      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043d0:	4b23      	ldr	r3, [pc, #140]	; (8004460 <HAL_RCC_GetSysClockFreq+0x114>)
 80043d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	2b0c      	cmp	r3, #12
 80043d8:	d134      	bne.n	8004444 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043da:	4b1e      	ldr	r3, [pc, #120]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d003      	beq.n	80043f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d003      	beq.n	80043f8 <HAL_RCC_GetSysClockFreq+0xac>
 80043f0:	e005      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043f2:	4b1a      	ldr	r3, [pc, #104]	; (800445c <HAL_RCC_GetSysClockFreq+0x110>)
 80043f4:	617b      	str	r3, [r7, #20]
      break;
 80043f6:	e005      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043f8:	4b19      	ldr	r3, [pc, #100]	; (8004460 <HAL_RCC_GetSysClockFreq+0x114>)
 80043fa:	617b      	str	r3, [r7, #20]
      break;
 80043fc:	e002      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	617b      	str	r3, [r7, #20]
      break;
 8004402:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004404:	4b13      	ldr	r3, [pc, #76]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	3301      	adds	r3, #1
 8004410:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004412:	4b10      	ldr	r3, [pc, #64]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	0a1b      	lsrs	r3, r3, #8
 8004418:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	fb02 f203 	mul.w	r2, r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800442a:	4b0a      	ldr	r3, [pc, #40]	; (8004454 <HAL_RCC_GetSysClockFreq+0x108>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	0e5b      	lsrs	r3, r3, #25
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	3301      	adds	r3, #1
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004442:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004444:	69bb      	ldr	r3, [r7, #24]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3724      	adds	r7, #36	; 0x24
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000
 8004458:	080082c4 	.word	0x080082c4
 800445c:	00f42400 	.word	0x00f42400
 8004460:	007a1200 	.word	0x007a1200

08004464 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004468:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_RCC_GetHCLKFreq+0x14>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	20000008 	.word	0x20000008

0800447c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004480:	f7ff fff0 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	0a1b      	lsrs	r3, r3, #8
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4904      	ldr	r1, [pc, #16]	; (80044a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800449c:	4618      	mov	r0, r3
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40021000 	.word	0x40021000
 80044a4:	080082bc 	.word	0x080082bc

080044a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044ac:	f7ff ffda 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b06      	ldr	r3, [pc, #24]	; (80044cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0adb      	lsrs	r3, r3, #11
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4904      	ldr	r1, [pc, #16]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000
 80044d0:	080082bc 	.word	0x080082bc

080044d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044e0:	4b2a      	ldr	r3, [pc, #168]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044ec:	f7ff f9c8 	bl	8003880 <HAL_PWREx_GetVoltageRange>
 80044f0:	6178      	str	r0, [r7, #20]
 80044f2:	e014      	b.n	800451e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044f4:	4b25      	ldr	r3, [pc, #148]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	4a24      	ldr	r2, [pc, #144]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004500:	4b22      	ldr	r3, [pc, #136]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800450c:	f7ff f9b8 	bl	8003880 <HAL_PWREx_GetVoltageRange>
 8004510:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	4b1e      	ldr	r3, [pc, #120]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	4a1d      	ldr	r2, [pc, #116]	; (800458c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004524:	d10b      	bne.n	800453e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b80      	cmp	r3, #128	; 0x80
 800452a:	d919      	bls.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2ba0      	cmp	r3, #160	; 0xa0
 8004530:	d902      	bls.n	8004538 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004532:	2302      	movs	r3, #2
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	e013      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004538:	2301      	movs	r3, #1
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	e010      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b80      	cmp	r3, #128	; 0x80
 8004542:	d902      	bls.n	800454a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004544:	2303      	movs	r3, #3
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	e00a      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b80      	cmp	r3, #128	; 0x80
 800454e:	d102      	bne.n	8004556 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004550:	2302      	movs	r3, #2
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	e004      	b.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b70      	cmp	r3, #112	; 0x70
 800455a:	d101      	bne.n	8004560 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800455c:	2301      	movs	r3, #1
 800455e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f023 0207 	bic.w	r2, r3, #7
 8004568:	4909      	ldr	r1, [pc, #36]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004570:	4b07      	ldr	r3, [pc, #28]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	429a      	cmp	r2, r3
 800457c:	d001      	beq.n	8004582 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e000      	b.n	8004584 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40021000 	.word	0x40021000
 8004590:	40022000 	.word	0x40022000

08004594 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800459c:	2300      	movs	r3, #0
 800459e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045a0:	2300      	movs	r3, #0
 80045a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d031      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045b8:	d01a      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80045ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045be:	d814      	bhi.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d009      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045c8:	d10f      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80045ca:	4bac      	ldr	r3, [pc, #688]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	4aab      	ldr	r2, [pc, #684]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045d4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d6:	e00c      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	2100      	movs	r1, #0
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f9dc 	bl	800499c <RCCEx_PLLSAI1_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e8:	e003      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	74fb      	strb	r3, [r7, #19]
      break;
 80045ee:	e000      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80045f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045f2:	7cfb      	ldrb	r3, [r7, #19]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d10b      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045f8:	4ba0      	ldr	r3, [pc, #640]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004606:	499d      	ldr	r1, [pc, #628]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800460e:	e001      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	7cfb      	ldrb	r3, [r7, #19]
 8004612:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 8099 	beq.w	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004622:	2300      	movs	r3, #0
 8004624:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004626:	4b95      	ldr	r3, [pc, #596]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004636:	2300      	movs	r3, #0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00d      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463c:	4b8f      	ldr	r3, [pc, #572]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800463e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004640:	4a8e      	ldr	r2, [pc, #568]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004646:	6593      	str	r3, [r2, #88]	; 0x58
 8004648:	4b8c      	ldr	r3, [pc, #560]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800464a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004654:	2301      	movs	r3, #1
 8004656:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004658:	4b89      	ldr	r3, [pc, #548]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a88      	ldr	r2, [pc, #544]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800465e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004662:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004664:	f7fd fd86 	bl	8002174 <HAL_GetTick>
 8004668:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800466a:	e009      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466c:	f7fd fd82 	bl	8002174 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d902      	bls.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	74fb      	strb	r3, [r7, #19]
        break;
 800467e:	e005      	b.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004680:	4b7f      	ldr	r3, [pc, #508]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0ef      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800468c:	7cfb      	ldrb	r3, [r7, #19]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d155      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004692:	4b7a      	ldr	r3, [pc, #488]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01e      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d019      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046ae:	4b73      	ldr	r3, [pc, #460]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046ba:	4b70      	ldr	r3, [pc, #448]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c0:	4a6e      	ldr	r2, [pc, #440]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ca:	4b6c      	ldr	r3, [pc, #432]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	4a6a      	ldr	r2, [pc, #424]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046da:	4a68      	ldr	r2, [pc, #416]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d016      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd fd42 	bl	8002174 <HAL_GetTick>
 80046f0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f2:	e00b      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fd fd3e 	bl	8002174 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d902      	bls.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	74fb      	strb	r3, [r7, #19]
            break;
 800470a:	e006      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800470c:	4b5b      	ldr	r3, [pc, #364]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800470e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0ec      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800471a:	7cfb      	ldrb	r3, [r7, #19]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004720:	4b56      	ldr	r3, [pc, #344]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472e:	4953      	ldr	r1, [pc, #332]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004736:	e004      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004738:	7cfb      	ldrb	r3, [r7, #19]
 800473a:	74bb      	strb	r3, [r7, #18]
 800473c:	e001      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004742:	7c7b      	ldrb	r3, [r7, #17]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d105      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004748:	4b4c      	ldr	r3, [pc, #304]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	4a4b      	ldr	r2, [pc, #300]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800474e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004752:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00a      	beq.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004760:	4b46      	ldr	r3, [pc, #280]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f023 0203 	bic.w	r2, r3, #3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6a1b      	ldr	r3, [r3, #32]
 800476e:	4943      	ldr	r1, [pc, #268]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d00a      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004782:	4b3e      	ldr	r3, [pc, #248]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004788:	f023 020c 	bic.w	r2, r3, #12
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004790:	493a      	ldr	r1, [pc, #232]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004792:	4313      	orrs	r3, r2
 8004794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0320 	and.w	r3, r3, #32
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047a4:	4b35      	ldr	r3, [pc, #212]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	4932      	ldr	r1, [pc, #200]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047c6:	4b2d      	ldr	r3, [pc, #180]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d4:	4929      	ldr	r1, [pc, #164]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047e8:	4b24      	ldr	r3, [pc, #144]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	4921      	ldr	r1, [pc, #132]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800480a:	4b1c      	ldr	r3, [pc, #112]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	4918      	ldr	r1, [pc, #96]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800482c:	4b13      	ldr	r3, [pc, #76]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	4910      	ldr	r1, [pc, #64]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d02c      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800484e:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	4907      	ldr	r1, [pc, #28]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800486c:	d10a      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800486e:	4b03      	ldr	r3, [pc, #12]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	4a02      	ldr	r2, [pc, #8]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004878:	60d3      	str	r3, [r2, #12]
 800487a:	e015      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 800487c:	40021000 	.word	0x40021000
 8004880:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800488c:	d10c      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3304      	adds	r3, #4
 8004892:	2101      	movs	r1, #1
 8004894:	4618      	mov	r0, r3
 8004896:	f000 f881 	bl	800499c <RCCEx_PLLSAI1_Config>
 800489a:	4603      	mov	r3, r0
 800489c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800489e:	7cfb      	ldrb	r3, [r7, #19]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d001      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80048a4:	7cfb      	ldrb	r3, [r7, #19]
 80048a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d028      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80048b4:	4b30      	ldr	r3, [pc, #192]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c2:	492d      	ldr	r1, [pc, #180]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048d2:	d106      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048d4:	4b28      	ldr	r3, [pc, #160]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4a27      	ldr	r2, [pc, #156]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048de:	60d3      	str	r3, [r2, #12]
 80048e0:	e011      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048ea:	d10c      	bne.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	2101      	movs	r1, #1
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f852 	bl	800499c <RCCEx_PLLSAI1_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004902:	7cfb      	ldrb	r3, [r7, #19]
 8004904:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01c      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004912:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004918:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004920:	4915      	ldr	r1, [pc, #84]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004930:	d10c      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	3304      	adds	r3, #4
 8004936:	2102      	movs	r1, #2
 8004938:	4618      	mov	r0, r3
 800493a:	f000 f82f 	bl	800499c <RCCEx_PLLSAI1_Config>
 800493e:	4603      	mov	r3, r0
 8004940:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004942:	7cfb      	ldrb	r3, [r7, #19]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004948:	7cfb      	ldrb	r3, [r7, #19]
 800494a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00a      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004958:	4b07      	ldr	r3, [pc, #28]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004966:	4904      	ldr	r1, [pc, #16]	; (8004978 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800496e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004970:	4618      	mov	r0, r3
 8004972:	3718      	adds	r7, #24
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40021000 	.word	0x40021000

0800497c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a04      	ldr	r2, [pc, #16]	; (8004998 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004986:	f043 0304 	orr.w	r3, r3, #4
 800498a:	6013      	str	r3, [r2, #0]
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000

0800499c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049aa:	4b74      	ldr	r3, [pc, #464]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d018      	beq.n	80049e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049b6:	4b71      	ldr	r3, [pc, #452]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0203 	and.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d10d      	bne.n	80049e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
       ||
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d009      	beq.n	80049e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80049ce:	4b6b      	ldr	r3, [pc, #428]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	f003 0307 	and.w	r3, r3, #7
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
       ||
 80049de:	429a      	cmp	r2, r3
 80049e0:	d047      	beq.n	8004a72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	73fb      	strb	r3, [r7, #15]
 80049e6:	e044      	b.n	8004a72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d018      	beq.n	8004a22 <RCCEx_PLLSAI1_Config+0x86>
 80049f0:	2b03      	cmp	r3, #3
 80049f2:	d825      	bhi.n	8004a40 <RCCEx_PLLSAI1_Config+0xa4>
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d002      	beq.n	80049fe <RCCEx_PLLSAI1_Config+0x62>
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d009      	beq.n	8004a10 <RCCEx_PLLSAI1_Config+0x74>
 80049fc:	e020      	b.n	8004a40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049fe:	4b5f      	ldr	r3, [pc, #380]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d11d      	bne.n	8004a46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a0e:	e01a      	b.n	8004a46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a10:	4b5a      	ldr	r3, [pc, #360]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d116      	bne.n	8004a4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a20:	e013      	b.n	8004a4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a22:	4b56      	ldr	r3, [pc, #344]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a2e:	4b53      	ldr	r3, [pc, #332]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a3e:	e006      	b.n	8004a4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
      break;
 8004a44:	e004      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a46:	bf00      	nop
 8004a48:	e002      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e000      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004a4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10d      	bne.n	8004a72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004a56:	4b49      	ldr	r3, [pc, #292]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6819      	ldr	r1, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	430b      	orrs	r3, r1
 8004a6c:	4943      	ldr	r1, [pc, #268]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d17c      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a78:	4b40      	ldr	r3, [pc, #256]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a3f      	ldr	r2, [pc, #252]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a84:	f7fd fb76 	bl	8002174 <HAL_GetTick>
 8004a88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a8a:	e009      	b.n	8004aa0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a8c:	f7fd fb72 	bl	8002174 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d902      	bls.n	8004aa0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	73fb      	strb	r3, [r7, #15]
        break;
 8004a9e:	e005      	b.n	8004aac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004aa0:	4b36      	ldr	r3, [pc, #216]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1ef      	bne.n	8004a8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d15f      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d110      	bne.n	8004ada <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ab8:	4b30      	ldr	r3, [pc, #192]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004ac0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6892      	ldr	r2, [r2, #8]
 8004ac8:	0211      	lsls	r1, r2, #8
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68d2      	ldr	r2, [r2, #12]
 8004ace:	06d2      	lsls	r2, r2, #27
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	492a      	ldr	r1, [pc, #168]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	610b      	str	r3, [r1, #16]
 8004ad8:	e027      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d112      	bne.n	8004b06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ae0:	4b26      	ldr	r3, [pc, #152]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ae8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6892      	ldr	r2, [r2, #8]
 8004af0:	0211      	lsls	r1, r2, #8
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6912      	ldr	r2, [r2, #16]
 8004af6:	0852      	lsrs	r2, r2, #1
 8004af8:	3a01      	subs	r2, #1
 8004afa:	0552      	lsls	r2, r2, #21
 8004afc:	430a      	orrs	r2, r1
 8004afe:	491f      	ldr	r1, [pc, #124]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	610b      	str	r3, [r1, #16]
 8004b04:	e011      	b.n	8004b2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b06:	4b1d      	ldr	r3, [pc, #116]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	6892      	ldr	r2, [r2, #8]
 8004b16:	0211      	lsls	r1, r2, #8
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	6952      	ldr	r2, [r2, #20]
 8004b1c:	0852      	lsrs	r2, r2, #1
 8004b1e:	3a01      	subs	r2, #1
 8004b20:	0652      	lsls	r2, r2, #25
 8004b22:	430a      	orrs	r2, r1
 8004b24:	4915      	ldr	r1, [pc, #84]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b2a:	4b14      	ldr	r3, [pc, #80]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a13      	ldr	r2, [pc, #76]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fd fb1d 	bl	8002174 <HAL_GetTick>
 8004b3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b3c:	e009      	b.n	8004b52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b3e:	f7fd fb19 	bl	8002174 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d902      	bls.n	8004b52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	73fb      	strb	r3, [r7, #15]
          break;
 8004b50:	e005      	b.n	8004b5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b52:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0ef      	beq.n	8004b3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	4903      	ldr	r1, [pc, #12]	; (8004b7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40021000 	.word	0x40021000

08004b80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e040      	b.n	8004c14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fd f862 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2224      	movs	r2, #36	; 0x24
 8004bac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0201 	bic.w	r2, r2, #1
 8004bbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f95e 	bl	8004e80 <UART_SetConfig>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d101      	bne.n	8004bce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e022      	b.n	8004c14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fb5e 	bl	8005298 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689a      	ldr	r2, [r3, #8]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004bfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0201 	orr.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fbe5 	bl	80053dc <UART_CheckIdleState>
 8004c12:	4603      	mov	r3, r0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d166      	bne.n	8004d00 <HAL_UART_Transmit_DMA+0xe4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_UART_Transmit_DMA+0x22>
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e05f      	b.n	8004d02 <HAL_UART_Transmit_DMA+0xe6>
    }

    __HAL_LOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d101      	bne.n	8004c50 <HAL_UART_Transmit_DMA+0x34>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	e058      	b.n	8004d02 <HAL_UART_Transmit_DMA+0xe6>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	88fa      	ldrh	r2, [r7, #6]
 8004c6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2221      	movs	r2, #33	; 0x21
 8004c7a:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d02b      	beq.n	8004cdc <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c88:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <HAL_UART_Transmit_DMA+0xf0>)
 8004c8a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c90:	4a1f      	ldr	r2, [pc, #124]	; (8004d10 <HAL_UART_Transmit_DMA+0xf4>)
 8004c92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c98:	4a1e      	ldr	r2, [pc, #120]	; (8004d14 <HAL_UART_Transmit_DMA+0xf8>)
 8004c9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cac:	4619      	mov	r1, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3328      	adds	r3, #40	; 0x28
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	88fb      	ldrh	r3, [r7, #6]
 8004cb8:	f7fe fac6 	bl	8003248 <HAL_DMA_Start_IT>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e012      	b.n	8004d02 <HAL_UART_Transmit_DMA+0xe6>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2240      	movs	r2, #64	; 0x40
 8004ce2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004cfa:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	e000      	b.n	8004d02 <HAL_UART_Transmit_DMA+0xe6>
  }
  else
  {
    return HAL_BUSY;
 8004d00:	2302      	movs	r3, #2
  }
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	080056c9 	.word	0x080056c9
 8004d10:	0800571d 	.word	0x0800571d
 8004d14:	08005809 	.word	0x08005809

08004d18 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	4613      	mov	r3, r2
 8004d24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d131      	bne.n	8004d92 <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <HAL_UART_Receive_DMA+0x22>
 8004d34:	88fb      	ldrh	r3, [r7, #6]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e02a      	b.n	8004d94 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_UART_Receive_DMA+0x34>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e023      	b.n	8004d94 <HAL_UART_Receive_DMA+0x7c>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a0f      	ldr	r2, [pc, #60]	; (8004d9c <HAL_UART_Receive_DMA+0x84>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00e      	beq.n	8004d82 <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004d80:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	461a      	mov	r2, r3
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 fbed 	bl	8005568 <UART_Start_Receive_DMA>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	e000      	b.n	8004d94 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8004d92:	2302      	movs	r3, #2
  }
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}
 8004d9c:	40008000 	.word	0x40008000

08004da0 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Disable TCIE, TXEIE and TXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004db6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc2:	2b80      	cmp	r3, #128	; 0x80
 8004dc4:	d125      	bne.n	8004e12 <HAL_UART_AbortTransmit+0x72>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	689a      	ldr	r2, [r3, #8]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dd4:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d019      	beq.n	8004e12 <HAL_UART_AbortTransmit+0x72>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004de2:	2200      	movs	r2, #0
 8004de4:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fa8c 	bl	8003308 <HAL_DMA_Abort>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00d      	beq.n	8004e12 <HAL_UART_AbortTransmit+0x72>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe fb71 	bl	80034e2 <HAL_DMA_GetError>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b20      	cmp	r3, #32
 8004e04:	d105      	bne.n	8004e12 <HAL_UART_AbortTransmit+0x72>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2210      	movs	r2, #16
 8004e0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e007      	b.n	8004e22 <HAL_UART_AbortTransmit+0x82>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
  }
#endif /* USART_CR1_FIFOEN */

  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2220      	movs	r2, #32
 8004e1e:	679a      	str	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	460b      	mov	r3, r1
 8004e70:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
	...

08004e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e80:	b5b0      	push	{r4, r5, r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4baf      	ldr	r3, [pc, #700]	; (8005168 <UART_SetConfig+0x2e8>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	69f9      	ldr	r1, [r7, #28]
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4aa4      	ldr	r2, [pc, #656]	; (800516c <UART_SetConfig+0x2ec>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	69fa      	ldr	r2, [r7, #28]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	69fa      	ldr	r2, [r7, #28]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a9b      	ldr	r2, [pc, #620]	; (8005170 <UART_SetConfig+0x2f0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d121      	bne.n	8004f4a <UART_SetConfig+0xca>
 8004f06:	4b9b      	ldr	r3, [pc, #620]	; (8005174 <UART_SetConfig+0x2f4>)
 8004f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b03      	cmp	r3, #3
 8004f12:	d817      	bhi.n	8004f44 <UART_SetConfig+0xc4>
 8004f14:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <UART_SetConfig+0x9c>)
 8004f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1a:	bf00      	nop
 8004f1c:	08004f2d 	.word	0x08004f2d
 8004f20:	08004f39 	.word	0x08004f39
 8004f24:	08004f33 	.word	0x08004f33
 8004f28:	08004f3f 	.word	0x08004f3f
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	76fb      	strb	r3, [r7, #27]
 8004f30:	e070      	b.n	8005014 <UART_SetConfig+0x194>
 8004f32:	2302      	movs	r3, #2
 8004f34:	76fb      	strb	r3, [r7, #27]
 8004f36:	e06d      	b.n	8005014 <UART_SetConfig+0x194>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	76fb      	strb	r3, [r7, #27]
 8004f3c:	e06a      	b.n	8005014 <UART_SetConfig+0x194>
 8004f3e:	2308      	movs	r3, #8
 8004f40:	76fb      	strb	r3, [r7, #27]
 8004f42:	e067      	b.n	8005014 <UART_SetConfig+0x194>
 8004f44:	2310      	movs	r3, #16
 8004f46:	76fb      	strb	r3, [r7, #27]
 8004f48:	e064      	b.n	8005014 <UART_SetConfig+0x194>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a8a      	ldr	r2, [pc, #552]	; (8005178 <UART_SetConfig+0x2f8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d132      	bne.n	8004fba <UART_SetConfig+0x13a>
 8004f54:	4b87      	ldr	r3, [pc, #540]	; (8005174 <UART_SetConfig+0x2f4>)
 8004f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f5a:	f003 030c 	and.w	r3, r3, #12
 8004f5e:	2b0c      	cmp	r3, #12
 8004f60:	d828      	bhi.n	8004fb4 <UART_SetConfig+0x134>
 8004f62:	a201      	add	r2, pc, #4	; (adr r2, 8004f68 <UART_SetConfig+0xe8>)
 8004f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f68:	08004f9d 	.word	0x08004f9d
 8004f6c:	08004fb5 	.word	0x08004fb5
 8004f70:	08004fb5 	.word	0x08004fb5
 8004f74:	08004fb5 	.word	0x08004fb5
 8004f78:	08004fa9 	.word	0x08004fa9
 8004f7c:	08004fb5 	.word	0x08004fb5
 8004f80:	08004fb5 	.word	0x08004fb5
 8004f84:	08004fb5 	.word	0x08004fb5
 8004f88:	08004fa3 	.word	0x08004fa3
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08004fb5 	.word	0x08004fb5
 8004f98:	08004faf 	.word	0x08004faf
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	76fb      	strb	r3, [r7, #27]
 8004fa0:	e038      	b.n	8005014 <UART_SetConfig+0x194>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	76fb      	strb	r3, [r7, #27]
 8004fa6:	e035      	b.n	8005014 <UART_SetConfig+0x194>
 8004fa8:	2304      	movs	r3, #4
 8004faa:	76fb      	strb	r3, [r7, #27]
 8004fac:	e032      	b.n	8005014 <UART_SetConfig+0x194>
 8004fae:	2308      	movs	r3, #8
 8004fb0:	76fb      	strb	r3, [r7, #27]
 8004fb2:	e02f      	b.n	8005014 <UART_SetConfig+0x194>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	76fb      	strb	r3, [r7, #27]
 8004fb8:	e02c      	b.n	8005014 <UART_SetConfig+0x194>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a6b      	ldr	r2, [pc, #428]	; (800516c <UART_SetConfig+0x2ec>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d125      	bne.n	8005010 <UART_SetConfig+0x190>
 8004fc4:	4b6b      	ldr	r3, [pc, #428]	; (8005174 <UART_SetConfig+0x2f4>)
 8004fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fd2:	d017      	beq.n	8005004 <UART_SetConfig+0x184>
 8004fd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fd8:	d817      	bhi.n	800500a <UART_SetConfig+0x18a>
 8004fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fde:	d00b      	beq.n	8004ff8 <UART_SetConfig+0x178>
 8004fe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fe4:	d811      	bhi.n	800500a <UART_SetConfig+0x18a>
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <UART_SetConfig+0x172>
 8004fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fee:	d006      	beq.n	8004ffe <UART_SetConfig+0x17e>
 8004ff0:	e00b      	b.n	800500a <UART_SetConfig+0x18a>
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	76fb      	strb	r3, [r7, #27]
 8004ff6:	e00d      	b.n	8005014 <UART_SetConfig+0x194>
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	76fb      	strb	r3, [r7, #27]
 8004ffc:	e00a      	b.n	8005014 <UART_SetConfig+0x194>
 8004ffe:	2304      	movs	r3, #4
 8005000:	76fb      	strb	r3, [r7, #27]
 8005002:	e007      	b.n	8005014 <UART_SetConfig+0x194>
 8005004:	2308      	movs	r3, #8
 8005006:	76fb      	strb	r3, [r7, #27]
 8005008:	e004      	b.n	8005014 <UART_SetConfig+0x194>
 800500a:	2310      	movs	r3, #16
 800500c:	76fb      	strb	r3, [r7, #27]
 800500e:	e001      	b.n	8005014 <UART_SetConfig+0x194>
 8005010:	2310      	movs	r3, #16
 8005012:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a54      	ldr	r2, [pc, #336]	; (800516c <UART_SetConfig+0x2ec>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d173      	bne.n	8005106 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800501e:	7efb      	ldrb	r3, [r7, #27]
 8005020:	2b08      	cmp	r3, #8
 8005022:	d824      	bhi.n	800506e <UART_SetConfig+0x1ee>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <UART_SetConfig+0x1ac>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005051 	.word	0x08005051
 8005030:	0800506f 	.word	0x0800506f
 8005034:	08005059 	.word	0x08005059
 8005038:	0800506f 	.word	0x0800506f
 800503c:	0800505f 	.word	0x0800505f
 8005040:	0800506f 	.word	0x0800506f
 8005044:	0800506f 	.word	0x0800506f
 8005048:	0800506f 	.word	0x0800506f
 800504c:	08005067 	.word	0x08005067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005050:	f7ff fa14 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8005054:	6178      	str	r0, [r7, #20]
        break;
 8005056:	e00f      	b.n	8005078 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005058:	4b48      	ldr	r3, [pc, #288]	; (800517c <UART_SetConfig+0x2fc>)
 800505a:	617b      	str	r3, [r7, #20]
        break;
 800505c:	e00c      	b.n	8005078 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505e:	f7ff f975 	bl	800434c <HAL_RCC_GetSysClockFreq>
 8005062:	6178      	str	r0, [r7, #20]
        break;
 8005064:	e008      	b.n	8005078 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800506a:	617b      	str	r3, [r7, #20]
        break;
 800506c:	e004      	b.n	8005078 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	76bb      	strb	r3, [r7, #26]
        break;
 8005076:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 80fe 	beq.w	800527c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	4613      	mov	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	4413      	add	r3, r2
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	429a      	cmp	r2, r3
 800508e:	d305      	bcc.n	800509c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	429a      	cmp	r2, r3
 800509a:	d902      	bls.n	80050a2 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	76bb      	strb	r3, [r7, #26]
 80050a0:	e0ec      	b.n	800527c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f04f 0100 	mov.w	r1, #0
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	f04f 0300 	mov.w	r3, #0
 80050b2:	020b      	lsls	r3, r1, #8
 80050b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050b8:	0202      	lsls	r2, r0, #8
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	6849      	ldr	r1, [r1, #4]
 80050be:	0849      	lsrs	r1, r1, #1
 80050c0:	4608      	mov	r0, r1
 80050c2:	f04f 0100 	mov.w	r1, #0
 80050c6:	1814      	adds	r4, r2, r0
 80050c8:	eb43 0501 	adc.w	r5, r3, r1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	461a      	mov	r2, r3
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	4620      	mov	r0, r4
 80050d8:	4629      	mov	r1, r5
 80050da:	f7fb fd65 	bl	8000ba8 <__aeabi_uldivmod>
 80050de:	4602      	mov	r2, r0
 80050e0:	460b      	mov	r3, r1
 80050e2:	4613      	mov	r3, r2
 80050e4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ec:	d308      	bcc.n	8005100 <UART_SetConfig+0x280>
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f4:	d204      	bcs.n	8005100 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	60da      	str	r2, [r3, #12]
 80050fe:	e0bd      	b.n	800527c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	76bb      	strb	r3, [r7, #26]
 8005104:	e0ba      	b.n	800527c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510e:	d168      	bne.n	80051e2 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8005110:	7efb      	ldrb	r3, [r7, #27]
 8005112:	2b08      	cmp	r3, #8
 8005114:	d834      	bhi.n	8005180 <UART_SetConfig+0x300>
 8005116:	a201      	add	r2, pc, #4	; (adr r2, 800511c <UART_SetConfig+0x29c>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005141 	.word	0x08005141
 8005120:	08005149 	.word	0x08005149
 8005124:	08005151 	.word	0x08005151
 8005128:	08005181 	.word	0x08005181
 800512c:	08005157 	.word	0x08005157
 8005130:	08005181 	.word	0x08005181
 8005134:	08005181 	.word	0x08005181
 8005138:	08005181 	.word	0x08005181
 800513c:	0800515f 	.word	0x0800515f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005140:	f7ff f99c 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8005144:	6178      	str	r0, [r7, #20]
        break;
 8005146:	e020      	b.n	800518a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005148:	f7ff f9ae 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 800514c:	6178      	str	r0, [r7, #20]
        break;
 800514e:	e01c      	b.n	800518a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005150:	4b0a      	ldr	r3, [pc, #40]	; (800517c <UART_SetConfig+0x2fc>)
 8005152:	617b      	str	r3, [r7, #20]
        break;
 8005154:	e019      	b.n	800518a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005156:	f7ff f8f9 	bl	800434c <HAL_RCC_GetSysClockFreq>
 800515a:	6178      	str	r0, [r7, #20]
        break;
 800515c:	e015      	b.n	800518a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800515e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005162:	617b      	str	r3, [r7, #20]
        break;
 8005164:	e011      	b.n	800518a <UART_SetConfig+0x30a>
 8005166:	bf00      	nop
 8005168:	efff69f3 	.word	0xefff69f3
 800516c:	40008000 	.word	0x40008000
 8005170:	40013800 	.word	0x40013800
 8005174:	40021000 	.word	0x40021000
 8005178:	40004400 	.word	0x40004400
 800517c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	76bb      	strb	r3, [r7, #26]
        break;
 8005188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d075      	beq.n	800527c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	005a      	lsls	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	441a      	add	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	2b0f      	cmp	r3, #15
 80051ac:	d916      	bls.n	80051dc <UART_SetConfig+0x35c>
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b4:	d212      	bcs.n	80051dc <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f023 030f 	bic.w	r3, r3, #15
 80051be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	89fb      	ldrh	r3, [r7, #14]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	89fa      	ldrh	r2, [r7, #14]
 80051d8:	60da      	str	r2, [r3, #12]
 80051da:	e04f      	b.n	800527c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	76bb      	strb	r3, [r7, #26]
 80051e0:	e04c      	b.n	800527c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051e2:	7efb      	ldrb	r3, [r7, #27]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d828      	bhi.n	800523a <UART_SetConfig+0x3ba>
 80051e8:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x370>)
 80051ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ee:	bf00      	nop
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005225 	.word	0x08005225
 80051fc:	0800523b 	.word	0x0800523b
 8005200:	0800522b 	.word	0x0800522b
 8005204:	0800523b 	.word	0x0800523b
 8005208:	0800523b 	.word	0x0800523b
 800520c:	0800523b 	.word	0x0800523b
 8005210:	08005233 	.word	0x08005233
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7ff f932 	bl	800447c <HAL_RCC_GetPCLK1Freq>
 8005218:	6178      	str	r0, [r7, #20]
        break;
 800521a:	e013      	b.n	8005244 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7ff f944 	bl	80044a8 <HAL_RCC_GetPCLK2Freq>
 8005220:	6178      	str	r0, [r7, #20]
        break;
 8005222:	e00f      	b.n	8005244 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005224:	4b1b      	ldr	r3, [pc, #108]	; (8005294 <UART_SetConfig+0x414>)
 8005226:	617b      	str	r3, [r7, #20]
        break;
 8005228:	e00c      	b.n	8005244 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522a:	f7ff f88f 	bl	800434c <HAL_RCC_GetSysClockFreq>
 800522e:	6178      	str	r0, [r7, #20]
        break;
 8005230:	e008      	b.n	8005244 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005232:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005236:	617b      	str	r3, [r7, #20]
        break;
 8005238:	e004      	b.n	8005244 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	76bb      	strb	r3, [r7, #26]
        break;
 8005242:	bf00      	nop
    }

    if (pclk != 0U)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d018      	beq.n	800527c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	085a      	lsrs	r2, r3, #1
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	441a      	add	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	fbb2 f3f3 	udiv	r3, r2, r3
 800525c:	b29b      	uxth	r3, r3
 800525e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	d908      	bls.n	8005278 <UART_SetConfig+0x3f8>
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526c:	d204      	bcs.n	8005278 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	60da      	str	r2, [r3, #12]
 8005276:	e001      	b.n	800527c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005288:	7ebb      	ldrb	r3, [r7, #26]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bdb0      	pop	{r4, r5, r7, pc}
 8005292:	bf00      	nop
 8005294:	00f42400 	.word	0x00f42400

08005298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	f003 0301 	and.w	r3, r3, #1
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530a:	f003 0308 	and.w	r3, r3, #8
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534e:	f003 0320 	and.w	r3, r3, #32
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01a      	beq.n	80053ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005396:	d10a      	bne.n	80053ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053ec:	f7fc fec2 	bl	8002174 <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d10e      	bne.n	800541e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005400:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f82d 	bl	800546e <UART_WaitOnFlagUntilTimeout>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e023      	b.n	8005466 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b04      	cmp	r3, #4
 800542a:	d10e      	bne.n	800544a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800542c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f817 	bl	800546e <UART_WaitOnFlagUntilTimeout>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d001      	beq.n	800544a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e00d      	b.n	8005466 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	603b      	str	r3, [r7, #0]
 800547a:	4613      	mov	r3, r2
 800547c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800547e:	e05e      	b.n	800553e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005486:	d05a      	beq.n	800553e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005488:	f7fc fe74 	bl	8002174 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	429a      	cmp	r2, r3
 8005496:	d302      	bcc.n	800549e <UART_WaitOnFlagUntilTimeout+0x30>
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d11b      	bne.n	80054d6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689a      	ldr	r2, [r3, #8]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 0201 	bic.w	r2, r2, #1
 80054bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e043      	b.n	800555e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d02c      	beq.n	800553e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054f2:	d124      	bne.n	800553e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054fc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800550c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f022 0201 	bic.w	r2, r2, #1
 800551c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2220      	movs	r2, #32
 800552e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e00f      	b.n	800555e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	69da      	ldr	r2, [r3, #28]
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	4013      	ands	r3, r2
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	429a      	cmp	r2, r3
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	429a      	cmp	r2, r3
 800555a:	d091      	beq.n	8005480 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800555c:	2300      	movs	r3, #0
}
 800555e:	4618      	mov	r0, r3
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	4613      	mov	r3, r2
 8005574:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	88fa      	ldrh	r2, [r7, #6]
 8005580:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2222      	movs	r2, #34	; 0x22
 8005590:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005596:	2b00      	cmp	r3, #0
 8005598:	d02b      	beq.n	80055f2 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559e:	4a25      	ldr	r2, [pc, #148]	; (8005634 <UART_Start_Receive_DMA+0xcc>)
 80055a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a24      	ldr	r2, [pc, #144]	; (8005638 <UART_Start_Receive_DMA+0xd0>)
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ae:	4a23      	ldr	r2, [pc, #140]	; (800563c <UART_Start_Receive_DMA+0xd4>)
 80055b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b6:	2200      	movs	r2, #0
 80055b8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	3324      	adds	r3, #36	; 0x24
 80055c4:	4619      	mov	r1, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ca:	461a      	mov	r2, r3
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	f7fd fe3b 	bl	8003248 <HAL_DMA_Start_IT>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00c      	beq.n	80055f2 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2210      	movs	r2, #16
 80055dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e01c      	b.n	800562c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005608:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689a      	ldr	r2, [r3, #8]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0201 	orr.w	r2, r2, #1
 8005618:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005628:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	08005739 	.word	0x08005739
 8005638:	080057d1 	.word	0x080057d1
 800563c:	08005809 	.word	0x08005809

08005640 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005656:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2220      	movs	r2, #32
 800565c:	679a      	str	r2, [r3, #120]	; 0x78
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005680:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0201 	bic.w	r2, r2, #1
 8005690:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005696:	2b01      	cmp	r3, #1
 8005698:	d107      	bne.n	80056aa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f022 0210 	bic.w	r2, r2, #16
 80056a8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2220      	movs	r2, #32
 80056ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	665a      	str	r2, [r3, #100]	; 0x64
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 0320 	and.w	r3, r3, #32
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d114      	bne.n	800570e <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056fa:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800570a:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800570c:	e002      	b.n	8005714 <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7fc f8e8 	bl	80018e4 <HAL_UART_TxCpltCallback>
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005728:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f7ff fb7d 	bl	8004e2a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005730:	bf00      	nop
 8005732:	3710      	adds	r7, #16
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005744:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0320 	and.w	r3, r3, #32
 8005750:	2b00      	cmp	r3, #0
 8005752:	d12a      	bne.n	80057aa <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800576a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0201 	bic.w	r2, r2, #1
 800577a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800578a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005796:	2b01      	cmp	r3, #1
 8005798:	d107      	bne.n	80057aa <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0210 	bic.w	r2, r2, #16
 80057a8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d107      	bne.n	80057c2 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057b8:	4619      	mov	r1, r3
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff fb53 	bl	8004e66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057c0:	e002      	b.n	80057c8 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7fc f89e 	bl	8001904 <HAL_UART_RxCpltCallback>
}
 80057c8:	bf00      	nop
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d109      	bne.n	80057fa <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80057ec:	085b      	lsrs	r3, r3, #1
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	4619      	mov	r1, r3
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f7ff fb37 	bl	8004e66 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057f8:	e002      	b.n	8005800 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 80057fa:	68f8      	ldr	r0, [r7, #12]
 80057fc:	f7ff fb1f 	bl	8004e3e <HAL_UART_RxHalfCpltCallback>
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005814:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800581a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005820:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582c:	2b80      	cmp	r3, #128	; 0x80
 800582e:	d109      	bne.n	8005844 <UART_DMAError+0x3c>
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	2b21      	cmp	r3, #33	; 0x21
 8005834:	d106      	bne.n	8005844 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	2200      	movs	r2, #0
 800583a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800583e:	6978      	ldr	r0, [r7, #20]
 8005840:	f7ff fefe 	bl	8005640 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800584e:	2b40      	cmp	r3, #64	; 0x40
 8005850:	d109      	bne.n	8005866 <UART_DMAError+0x5e>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2b22      	cmp	r3, #34	; 0x22
 8005856:	d106      	bne.n	8005866 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	2200      	movs	r2, #0
 800585c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8005860:	6978      	ldr	r0, [r7, #20]
 8005862:	f7ff ff02 	bl	800566a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800586c:	f043 0210 	orr.w	r2, r3, #16
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005876:	6978      	ldr	r0, [r7, #20]
 8005878:	f7ff faeb 	bl	8004e52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800587c:	bf00      	nop
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <__errno>:
 8005884:	4b01      	ldr	r3, [pc, #4]	; (800588c <__errno+0x8>)
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000014 	.word	0x20000014

08005890 <__libc_init_array>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	4d0d      	ldr	r5, [pc, #52]	; (80058c8 <__libc_init_array+0x38>)
 8005894:	4c0d      	ldr	r4, [pc, #52]	; (80058cc <__libc_init_array+0x3c>)
 8005896:	1b64      	subs	r4, r4, r5
 8005898:	10a4      	asrs	r4, r4, #2
 800589a:	2600      	movs	r6, #0
 800589c:	42a6      	cmp	r6, r4
 800589e:	d109      	bne.n	80058b4 <__libc_init_array+0x24>
 80058a0:	4d0b      	ldr	r5, [pc, #44]	; (80058d0 <__libc_init_array+0x40>)
 80058a2:	4c0c      	ldr	r4, [pc, #48]	; (80058d4 <__libc_init_array+0x44>)
 80058a4:	f002 fcf0 	bl	8008288 <_init>
 80058a8:	1b64      	subs	r4, r4, r5
 80058aa:	10a4      	asrs	r4, r4, #2
 80058ac:	2600      	movs	r6, #0
 80058ae:	42a6      	cmp	r6, r4
 80058b0:	d105      	bne.n	80058be <__libc_init_array+0x2e>
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b8:	4798      	blx	r3
 80058ba:	3601      	adds	r6, #1
 80058bc:	e7ee      	b.n	800589c <__libc_init_array+0xc>
 80058be:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c2:	4798      	blx	r3
 80058c4:	3601      	adds	r6, #1
 80058c6:	e7f2      	b.n	80058ae <__libc_init_array+0x1e>
 80058c8:	080086dc 	.word	0x080086dc
 80058cc:	080086dc 	.word	0x080086dc
 80058d0:	080086dc 	.word	0x080086dc
 80058d4:	080086e0 	.word	0x080086e0

080058d8 <memcpy>:
 80058d8:	440a      	add	r2, r1
 80058da:	4291      	cmp	r1, r2
 80058dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80058e0:	d100      	bne.n	80058e4 <memcpy+0xc>
 80058e2:	4770      	bx	lr
 80058e4:	b510      	push	{r4, lr}
 80058e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ee:	4291      	cmp	r1, r2
 80058f0:	d1f9      	bne.n	80058e6 <memcpy+0xe>
 80058f2:	bd10      	pop	{r4, pc}

080058f4 <memset>:
 80058f4:	4402      	add	r2, r0
 80058f6:	4603      	mov	r3, r0
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d100      	bne.n	80058fe <memset+0xa>
 80058fc:	4770      	bx	lr
 80058fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005902:	e7f9      	b.n	80058f8 <memset+0x4>

08005904 <__cvt>:
 8005904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005908:	ec55 4b10 	vmov	r4, r5, d0
 800590c:	2d00      	cmp	r5, #0
 800590e:	460e      	mov	r6, r1
 8005910:	4619      	mov	r1, r3
 8005912:	462b      	mov	r3, r5
 8005914:	bfbb      	ittet	lt
 8005916:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800591a:	461d      	movlt	r5, r3
 800591c:	2300      	movge	r3, #0
 800591e:	232d      	movlt	r3, #45	; 0x2d
 8005920:	700b      	strb	r3, [r1, #0]
 8005922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005924:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005928:	4691      	mov	r9, r2
 800592a:	f023 0820 	bic.w	r8, r3, #32
 800592e:	bfbc      	itt	lt
 8005930:	4622      	movlt	r2, r4
 8005932:	4614      	movlt	r4, r2
 8005934:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005938:	d005      	beq.n	8005946 <__cvt+0x42>
 800593a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800593e:	d100      	bne.n	8005942 <__cvt+0x3e>
 8005940:	3601      	adds	r6, #1
 8005942:	2102      	movs	r1, #2
 8005944:	e000      	b.n	8005948 <__cvt+0x44>
 8005946:	2103      	movs	r1, #3
 8005948:	ab03      	add	r3, sp, #12
 800594a:	9301      	str	r3, [sp, #4]
 800594c:	ab02      	add	r3, sp, #8
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	ec45 4b10 	vmov	d0, r4, r5
 8005954:	4653      	mov	r3, sl
 8005956:	4632      	mov	r2, r6
 8005958:	f000 fcca 	bl	80062f0 <_dtoa_r>
 800595c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005960:	4607      	mov	r7, r0
 8005962:	d102      	bne.n	800596a <__cvt+0x66>
 8005964:	f019 0f01 	tst.w	r9, #1
 8005968:	d022      	beq.n	80059b0 <__cvt+0xac>
 800596a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800596e:	eb07 0906 	add.w	r9, r7, r6
 8005972:	d110      	bne.n	8005996 <__cvt+0x92>
 8005974:	783b      	ldrb	r3, [r7, #0]
 8005976:	2b30      	cmp	r3, #48	; 0x30
 8005978:	d10a      	bne.n	8005990 <__cvt+0x8c>
 800597a:	2200      	movs	r2, #0
 800597c:	2300      	movs	r3, #0
 800597e:	4620      	mov	r0, r4
 8005980:	4629      	mov	r1, r5
 8005982:	f7fb f8a1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005986:	b918      	cbnz	r0, 8005990 <__cvt+0x8c>
 8005988:	f1c6 0601 	rsb	r6, r6, #1
 800598c:	f8ca 6000 	str.w	r6, [sl]
 8005990:	f8da 3000 	ldr.w	r3, [sl]
 8005994:	4499      	add	r9, r3
 8005996:	2200      	movs	r2, #0
 8005998:	2300      	movs	r3, #0
 800599a:	4620      	mov	r0, r4
 800599c:	4629      	mov	r1, r5
 800599e:	f7fb f893 	bl	8000ac8 <__aeabi_dcmpeq>
 80059a2:	b108      	cbz	r0, 80059a8 <__cvt+0xa4>
 80059a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80059a8:	2230      	movs	r2, #48	; 0x30
 80059aa:	9b03      	ldr	r3, [sp, #12]
 80059ac:	454b      	cmp	r3, r9
 80059ae:	d307      	bcc.n	80059c0 <__cvt+0xbc>
 80059b0:	9b03      	ldr	r3, [sp, #12]
 80059b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059b4:	1bdb      	subs	r3, r3, r7
 80059b6:	4638      	mov	r0, r7
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	b004      	add	sp, #16
 80059bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059c0:	1c59      	adds	r1, r3, #1
 80059c2:	9103      	str	r1, [sp, #12]
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	e7f0      	b.n	80059aa <__cvt+0xa6>

080059c8 <__exponent>:
 80059c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ca:	4603      	mov	r3, r0
 80059cc:	2900      	cmp	r1, #0
 80059ce:	bfb8      	it	lt
 80059d0:	4249      	neglt	r1, r1
 80059d2:	f803 2b02 	strb.w	r2, [r3], #2
 80059d6:	bfb4      	ite	lt
 80059d8:	222d      	movlt	r2, #45	; 0x2d
 80059da:	222b      	movge	r2, #43	; 0x2b
 80059dc:	2909      	cmp	r1, #9
 80059de:	7042      	strb	r2, [r0, #1]
 80059e0:	dd2a      	ble.n	8005a38 <__exponent+0x70>
 80059e2:	f10d 0407 	add.w	r4, sp, #7
 80059e6:	46a4      	mov	ip, r4
 80059e8:	270a      	movs	r7, #10
 80059ea:	46a6      	mov	lr, r4
 80059ec:	460a      	mov	r2, r1
 80059ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80059f2:	fb07 1516 	mls	r5, r7, r6, r1
 80059f6:	3530      	adds	r5, #48	; 0x30
 80059f8:	2a63      	cmp	r2, #99	; 0x63
 80059fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80059fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005a02:	4631      	mov	r1, r6
 8005a04:	dcf1      	bgt.n	80059ea <__exponent+0x22>
 8005a06:	3130      	adds	r1, #48	; 0x30
 8005a08:	f1ae 0502 	sub.w	r5, lr, #2
 8005a0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005a10:	1c44      	adds	r4, r0, #1
 8005a12:	4629      	mov	r1, r5
 8005a14:	4561      	cmp	r1, ip
 8005a16:	d30a      	bcc.n	8005a2e <__exponent+0x66>
 8005a18:	f10d 0209 	add.w	r2, sp, #9
 8005a1c:	eba2 020e 	sub.w	r2, r2, lr
 8005a20:	4565      	cmp	r5, ip
 8005a22:	bf88      	it	hi
 8005a24:	2200      	movhi	r2, #0
 8005a26:	4413      	add	r3, r2
 8005a28:	1a18      	subs	r0, r3, r0
 8005a2a:	b003      	add	sp, #12
 8005a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a32:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005a36:	e7ed      	b.n	8005a14 <__exponent+0x4c>
 8005a38:	2330      	movs	r3, #48	; 0x30
 8005a3a:	3130      	adds	r1, #48	; 0x30
 8005a3c:	7083      	strb	r3, [r0, #2]
 8005a3e:	70c1      	strb	r1, [r0, #3]
 8005a40:	1d03      	adds	r3, r0, #4
 8005a42:	e7f1      	b.n	8005a28 <__exponent+0x60>

08005a44 <_printf_float>:
 8005a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a48:	ed2d 8b02 	vpush	{d8}
 8005a4c:	b08d      	sub	sp, #52	; 0x34
 8005a4e:	460c      	mov	r4, r1
 8005a50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005a54:	4616      	mov	r6, r2
 8005a56:	461f      	mov	r7, r3
 8005a58:	4605      	mov	r5, r0
 8005a5a:	f001 fa35 	bl	8006ec8 <_localeconv_r>
 8005a5e:	f8d0 a000 	ldr.w	sl, [r0]
 8005a62:	4650      	mov	r0, sl
 8005a64:	f7fa fbb4 	bl	80001d0 <strlen>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8005a6c:	6823      	ldr	r3, [r4, #0]
 8005a6e:	9305      	str	r3, [sp, #20]
 8005a70:	f8d8 3000 	ldr.w	r3, [r8]
 8005a74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a78:	3307      	adds	r3, #7
 8005a7a:	f023 0307 	bic.w	r3, r3, #7
 8005a7e:	f103 0208 	add.w	r2, r3, #8
 8005a82:	f8c8 2000 	str.w	r2, [r8]
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a96:	9307      	str	r3, [sp, #28]
 8005a98:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a9c:	ee08 0a10 	vmov	s16, r0
 8005aa0:	4b9f      	ldr	r3, [pc, #636]	; (8005d20 <_printf_float+0x2dc>)
 8005aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aaa:	f7fb f83f 	bl	8000b2c <__aeabi_dcmpun>
 8005aae:	bb88      	cbnz	r0, 8005b14 <_printf_float+0xd0>
 8005ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ab4:	4b9a      	ldr	r3, [pc, #616]	; (8005d20 <_printf_float+0x2dc>)
 8005ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aba:	f7fb f819 	bl	8000af0 <__aeabi_dcmple>
 8005abe:	bb48      	cbnz	r0, 8005b14 <_printf_float+0xd0>
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	f7fb f808 	bl	8000adc <__aeabi_dcmplt>
 8005acc:	b110      	cbz	r0, 8005ad4 <_printf_float+0x90>
 8005ace:	232d      	movs	r3, #45	; 0x2d
 8005ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ad4:	4b93      	ldr	r3, [pc, #588]	; (8005d24 <_printf_float+0x2e0>)
 8005ad6:	4894      	ldr	r0, [pc, #592]	; (8005d28 <_printf_float+0x2e4>)
 8005ad8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005adc:	bf94      	ite	ls
 8005ade:	4698      	movls	r8, r3
 8005ae0:	4680      	movhi	r8, r0
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	6123      	str	r3, [r4, #16]
 8005ae6:	9b05      	ldr	r3, [sp, #20]
 8005ae8:	f023 0204 	bic.w	r2, r3, #4
 8005aec:	6022      	str	r2, [r4, #0]
 8005aee:	f04f 0900 	mov.w	r9, #0
 8005af2:	9700      	str	r7, [sp, #0]
 8005af4:	4633      	mov	r3, r6
 8005af6:	aa0b      	add	r2, sp, #44	; 0x2c
 8005af8:	4621      	mov	r1, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 f9d8 	bl	8005eb0 <_printf_common>
 8005b00:	3001      	adds	r0, #1
 8005b02:	f040 8090 	bne.w	8005c26 <_printf_float+0x1e2>
 8005b06:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0a:	b00d      	add	sp, #52	; 0x34
 8005b0c:	ecbd 8b02 	vpop	{d8}
 8005b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b14:	4642      	mov	r2, r8
 8005b16:	464b      	mov	r3, r9
 8005b18:	4640      	mov	r0, r8
 8005b1a:	4649      	mov	r1, r9
 8005b1c:	f7fb f806 	bl	8000b2c <__aeabi_dcmpun>
 8005b20:	b140      	cbz	r0, 8005b34 <_printf_float+0xf0>
 8005b22:	464b      	mov	r3, r9
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	bfbc      	itt	lt
 8005b28:	232d      	movlt	r3, #45	; 0x2d
 8005b2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005b2e:	487f      	ldr	r0, [pc, #508]	; (8005d2c <_printf_float+0x2e8>)
 8005b30:	4b7f      	ldr	r3, [pc, #508]	; (8005d30 <_printf_float+0x2ec>)
 8005b32:	e7d1      	b.n	8005ad8 <_printf_float+0x94>
 8005b34:	6863      	ldr	r3, [r4, #4]
 8005b36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005b3a:	9206      	str	r2, [sp, #24]
 8005b3c:	1c5a      	adds	r2, r3, #1
 8005b3e:	d13f      	bne.n	8005bc0 <_printf_float+0x17c>
 8005b40:	2306      	movs	r3, #6
 8005b42:	6063      	str	r3, [r4, #4]
 8005b44:	9b05      	ldr	r3, [sp, #20]
 8005b46:	6861      	ldr	r1, [r4, #4]
 8005b48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9303      	str	r3, [sp, #12]
 8005b50:	ab0a      	add	r3, sp, #40	; 0x28
 8005b52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005b56:	ab09      	add	r3, sp, #36	; 0x24
 8005b58:	ec49 8b10 	vmov	d0, r8, r9
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	6022      	str	r2, [r4, #0]
 8005b60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b64:	4628      	mov	r0, r5
 8005b66:	f7ff fecd 	bl	8005904 <__cvt>
 8005b6a:	9b06      	ldr	r3, [sp, #24]
 8005b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b6e:	2b47      	cmp	r3, #71	; 0x47
 8005b70:	4680      	mov	r8, r0
 8005b72:	d108      	bne.n	8005b86 <_printf_float+0x142>
 8005b74:	1cc8      	adds	r0, r1, #3
 8005b76:	db02      	blt.n	8005b7e <_printf_float+0x13a>
 8005b78:	6863      	ldr	r3, [r4, #4]
 8005b7a:	4299      	cmp	r1, r3
 8005b7c:	dd41      	ble.n	8005c02 <_printf_float+0x1be>
 8005b7e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005b82:	fa5f fb8b 	uxtb.w	fp, fp
 8005b86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b8a:	d820      	bhi.n	8005bce <_printf_float+0x18a>
 8005b8c:	3901      	subs	r1, #1
 8005b8e:	465a      	mov	r2, fp
 8005b90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b94:	9109      	str	r1, [sp, #36]	; 0x24
 8005b96:	f7ff ff17 	bl	80059c8 <__exponent>
 8005b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b9c:	1813      	adds	r3, r2, r0
 8005b9e:	2a01      	cmp	r2, #1
 8005ba0:	4681      	mov	r9, r0
 8005ba2:	6123      	str	r3, [r4, #16]
 8005ba4:	dc02      	bgt.n	8005bac <_printf_float+0x168>
 8005ba6:	6822      	ldr	r2, [r4, #0]
 8005ba8:	07d2      	lsls	r2, r2, #31
 8005baa:	d501      	bpl.n	8005bb0 <_printf_float+0x16c>
 8005bac:	3301      	adds	r3, #1
 8005bae:	6123      	str	r3, [r4, #16]
 8005bb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d09c      	beq.n	8005af2 <_printf_float+0xae>
 8005bb8:	232d      	movs	r3, #45	; 0x2d
 8005bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bbe:	e798      	b.n	8005af2 <_printf_float+0xae>
 8005bc0:	9a06      	ldr	r2, [sp, #24]
 8005bc2:	2a47      	cmp	r2, #71	; 0x47
 8005bc4:	d1be      	bne.n	8005b44 <_printf_float+0x100>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1bc      	bne.n	8005b44 <_printf_float+0x100>
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e7b9      	b.n	8005b42 <_printf_float+0xfe>
 8005bce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005bd2:	d118      	bne.n	8005c06 <_printf_float+0x1c2>
 8005bd4:	2900      	cmp	r1, #0
 8005bd6:	6863      	ldr	r3, [r4, #4]
 8005bd8:	dd0b      	ble.n	8005bf2 <_printf_float+0x1ae>
 8005bda:	6121      	str	r1, [r4, #16]
 8005bdc:	b913      	cbnz	r3, 8005be4 <_printf_float+0x1a0>
 8005bde:	6822      	ldr	r2, [r4, #0]
 8005be0:	07d0      	lsls	r0, r2, #31
 8005be2:	d502      	bpl.n	8005bea <_printf_float+0x1a6>
 8005be4:	3301      	adds	r3, #1
 8005be6:	440b      	add	r3, r1
 8005be8:	6123      	str	r3, [r4, #16]
 8005bea:	65a1      	str	r1, [r4, #88]	; 0x58
 8005bec:	f04f 0900 	mov.w	r9, #0
 8005bf0:	e7de      	b.n	8005bb0 <_printf_float+0x16c>
 8005bf2:	b913      	cbnz	r3, 8005bfa <_printf_float+0x1b6>
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	07d2      	lsls	r2, r2, #31
 8005bf8:	d501      	bpl.n	8005bfe <_printf_float+0x1ba>
 8005bfa:	3302      	adds	r3, #2
 8005bfc:	e7f4      	b.n	8005be8 <_printf_float+0x1a4>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e7f2      	b.n	8005be8 <_printf_float+0x1a4>
 8005c02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c08:	4299      	cmp	r1, r3
 8005c0a:	db05      	blt.n	8005c18 <_printf_float+0x1d4>
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	6121      	str	r1, [r4, #16]
 8005c10:	07d8      	lsls	r0, r3, #31
 8005c12:	d5ea      	bpl.n	8005bea <_printf_float+0x1a6>
 8005c14:	1c4b      	adds	r3, r1, #1
 8005c16:	e7e7      	b.n	8005be8 <_printf_float+0x1a4>
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	bfd4      	ite	le
 8005c1c:	f1c1 0202 	rsble	r2, r1, #2
 8005c20:	2201      	movgt	r2, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	e7e0      	b.n	8005be8 <_printf_float+0x1a4>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	055a      	lsls	r2, r3, #21
 8005c2a:	d407      	bmi.n	8005c3c <_printf_float+0x1f8>
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	4642      	mov	r2, r8
 8005c30:	4631      	mov	r1, r6
 8005c32:	4628      	mov	r0, r5
 8005c34:	47b8      	blx	r7
 8005c36:	3001      	adds	r0, #1
 8005c38:	d12c      	bne.n	8005c94 <_printf_float+0x250>
 8005c3a:	e764      	b.n	8005b06 <_printf_float+0xc2>
 8005c3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005c40:	f240 80e0 	bls.w	8005e04 <_printf_float+0x3c0>
 8005c44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f7fa ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d034      	beq.n	8005cbe <_printf_float+0x27a>
 8005c54:	4a37      	ldr	r2, [pc, #220]	; (8005d34 <_printf_float+0x2f0>)
 8005c56:	2301      	movs	r3, #1
 8005c58:	4631      	mov	r1, r6
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	47b8      	blx	r7
 8005c5e:	3001      	adds	r0, #1
 8005c60:	f43f af51 	beq.w	8005b06 <_printf_float+0xc2>
 8005c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	db02      	blt.n	8005c72 <_printf_float+0x22e>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	07d8      	lsls	r0, r3, #31
 8005c70:	d510      	bpl.n	8005c94 <_printf_float+0x250>
 8005c72:	ee18 3a10 	vmov	r3, s16
 8005c76:	4652      	mov	r2, sl
 8005c78:	4631      	mov	r1, r6
 8005c7a:	4628      	mov	r0, r5
 8005c7c:	47b8      	blx	r7
 8005c7e:	3001      	adds	r0, #1
 8005c80:	f43f af41 	beq.w	8005b06 <_printf_float+0xc2>
 8005c84:	f04f 0800 	mov.w	r8, #0
 8005c88:	f104 091a 	add.w	r9, r4, #26
 8005c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	4543      	cmp	r3, r8
 8005c92:	dc09      	bgt.n	8005ca8 <_printf_float+0x264>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	079b      	lsls	r3, r3, #30
 8005c98:	f100 8105 	bmi.w	8005ea6 <_printf_float+0x462>
 8005c9c:	68e0      	ldr	r0, [r4, #12]
 8005c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ca0:	4298      	cmp	r0, r3
 8005ca2:	bfb8      	it	lt
 8005ca4:	4618      	movlt	r0, r3
 8005ca6:	e730      	b.n	8005b0a <_printf_float+0xc6>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	464a      	mov	r2, r9
 8005cac:	4631      	mov	r1, r6
 8005cae:	4628      	mov	r0, r5
 8005cb0:	47b8      	blx	r7
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	f43f af27 	beq.w	8005b06 <_printf_float+0xc2>
 8005cb8:	f108 0801 	add.w	r8, r8, #1
 8005cbc:	e7e6      	b.n	8005c8c <_printf_float+0x248>
 8005cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	dc39      	bgt.n	8005d38 <_printf_float+0x2f4>
 8005cc4:	4a1b      	ldr	r2, [pc, #108]	; (8005d34 <_printf_float+0x2f0>)
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	4631      	mov	r1, r6
 8005cca:	4628      	mov	r0, r5
 8005ccc:	47b8      	blx	r7
 8005cce:	3001      	adds	r0, #1
 8005cd0:	f43f af19 	beq.w	8005b06 <_printf_float+0xc2>
 8005cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	d102      	bne.n	8005ce2 <_printf_float+0x29e>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	07d9      	lsls	r1, r3, #31
 8005ce0:	d5d8      	bpl.n	8005c94 <_printf_float+0x250>
 8005ce2:	ee18 3a10 	vmov	r3, s16
 8005ce6:	4652      	mov	r2, sl
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4628      	mov	r0, r5
 8005cec:	47b8      	blx	r7
 8005cee:	3001      	adds	r0, #1
 8005cf0:	f43f af09 	beq.w	8005b06 <_printf_float+0xc2>
 8005cf4:	f04f 0900 	mov.w	r9, #0
 8005cf8:	f104 0a1a 	add.w	sl, r4, #26
 8005cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cfe:	425b      	negs	r3, r3
 8005d00:	454b      	cmp	r3, r9
 8005d02:	dc01      	bgt.n	8005d08 <_printf_float+0x2c4>
 8005d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d06:	e792      	b.n	8005c2e <_printf_float+0x1ea>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	4652      	mov	r2, sl
 8005d0c:	4631      	mov	r1, r6
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	f43f aef7 	beq.w	8005b06 <_printf_float+0xc2>
 8005d18:	f109 0901 	add.w	r9, r9, #1
 8005d1c:	e7ee      	b.n	8005cfc <_printf_float+0x2b8>
 8005d1e:	bf00      	nop
 8005d20:	7fefffff 	.word	0x7fefffff
 8005d24:	080082f8 	.word	0x080082f8
 8005d28:	080082fc 	.word	0x080082fc
 8005d2c:	08008304 	.word	0x08008304
 8005d30:	08008300 	.word	0x08008300
 8005d34:	08008308 	.word	0x08008308
 8005d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	bfa8      	it	ge
 8005d40:	461a      	movge	r2, r3
 8005d42:	2a00      	cmp	r2, #0
 8005d44:	4691      	mov	r9, r2
 8005d46:	dc37      	bgt.n	8005db8 <_printf_float+0x374>
 8005d48:	f04f 0b00 	mov.w	fp, #0
 8005d4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d50:	f104 021a 	add.w	r2, r4, #26
 8005d54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005d56:	9305      	str	r3, [sp, #20]
 8005d58:	eba3 0309 	sub.w	r3, r3, r9
 8005d5c:	455b      	cmp	r3, fp
 8005d5e:	dc33      	bgt.n	8005dc8 <_printf_float+0x384>
 8005d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d64:	429a      	cmp	r2, r3
 8005d66:	db3b      	blt.n	8005de0 <_printf_float+0x39c>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	07da      	lsls	r2, r3, #31
 8005d6c:	d438      	bmi.n	8005de0 <_printf_float+0x39c>
 8005d6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d70:	9b05      	ldr	r3, [sp, #20]
 8005d72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	eba2 0901 	sub.w	r9, r2, r1
 8005d7a:	4599      	cmp	r9, r3
 8005d7c:	bfa8      	it	ge
 8005d7e:	4699      	movge	r9, r3
 8005d80:	f1b9 0f00 	cmp.w	r9, #0
 8005d84:	dc35      	bgt.n	8005df2 <_printf_float+0x3ae>
 8005d86:	f04f 0800 	mov.w	r8, #0
 8005d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d8e:	f104 0a1a 	add.w	sl, r4, #26
 8005d92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d96:	1a9b      	subs	r3, r3, r2
 8005d98:	eba3 0309 	sub.w	r3, r3, r9
 8005d9c:	4543      	cmp	r3, r8
 8005d9e:	f77f af79 	ble.w	8005c94 <_printf_float+0x250>
 8005da2:	2301      	movs	r3, #1
 8005da4:	4652      	mov	r2, sl
 8005da6:	4631      	mov	r1, r6
 8005da8:	4628      	mov	r0, r5
 8005daa:	47b8      	blx	r7
 8005dac:	3001      	adds	r0, #1
 8005dae:	f43f aeaa 	beq.w	8005b06 <_printf_float+0xc2>
 8005db2:	f108 0801 	add.w	r8, r8, #1
 8005db6:	e7ec      	b.n	8005d92 <_printf_float+0x34e>
 8005db8:	4613      	mov	r3, r2
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	47b8      	blx	r7
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d1c0      	bne.n	8005d48 <_printf_float+0x304>
 8005dc6:	e69e      	b.n	8005b06 <_printf_float+0xc2>
 8005dc8:	2301      	movs	r3, #1
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	9205      	str	r2, [sp, #20]
 8005dd0:	47b8      	blx	r7
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f43f ae97 	beq.w	8005b06 <_printf_float+0xc2>
 8005dd8:	9a05      	ldr	r2, [sp, #20]
 8005dda:	f10b 0b01 	add.w	fp, fp, #1
 8005dde:	e7b9      	b.n	8005d54 <_printf_float+0x310>
 8005de0:	ee18 3a10 	vmov	r3, s16
 8005de4:	4652      	mov	r2, sl
 8005de6:	4631      	mov	r1, r6
 8005de8:	4628      	mov	r0, r5
 8005dea:	47b8      	blx	r7
 8005dec:	3001      	adds	r0, #1
 8005dee:	d1be      	bne.n	8005d6e <_printf_float+0x32a>
 8005df0:	e689      	b.n	8005b06 <_printf_float+0xc2>
 8005df2:	9a05      	ldr	r2, [sp, #20]
 8005df4:	464b      	mov	r3, r9
 8005df6:	4442      	add	r2, r8
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d1c1      	bne.n	8005d86 <_printf_float+0x342>
 8005e02:	e680      	b.n	8005b06 <_printf_float+0xc2>
 8005e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e06:	2a01      	cmp	r2, #1
 8005e08:	dc01      	bgt.n	8005e0e <_printf_float+0x3ca>
 8005e0a:	07db      	lsls	r3, r3, #31
 8005e0c:	d538      	bpl.n	8005e80 <_printf_float+0x43c>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	4642      	mov	r2, r8
 8005e12:	4631      	mov	r1, r6
 8005e14:	4628      	mov	r0, r5
 8005e16:	47b8      	blx	r7
 8005e18:	3001      	adds	r0, #1
 8005e1a:	f43f ae74 	beq.w	8005b06 <_printf_float+0xc2>
 8005e1e:	ee18 3a10 	vmov	r3, s16
 8005e22:	4652      	mov	r2, sl
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f43f ae6b 	beq.w	8005b06 <_printf_float+0xc2>
 8005e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e34:	2200      	movs	r2, #0
 8005e36:	2300      	movs	r3, #0
 8005e38:	f7fa fe46 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e3c:	b9d8      	cbnz	r0, 8005e76 <_printf_float+0x432>
 8005e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e40:	f108 0201 	add.w	r2, r8, #1
 8005e44:	3b01      	subs	r3, #1
 8005e46:	4631      	mov	r1, r6
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b8      	blx	r7
 8005e4c:	3001      	adds	r0, #1
 8005e4e:	d10e      	bne.n	8005e6e <_printf_float+0x42a>
 8005e50:	e659      	b.n	8005b06 <_printf_float+0xc2>
 8005e52:	2301      	movs	r3, #1
 8005e54:	4652      	mov	r2, sl
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	47b8      	blx	r7
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	f43f ae52 	beq.w	8005b06 <_printf_float+0xc2>
 8005e62:	f108 0801 	add.w	r8, r8, #1
 8005e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	4543      	cmp	r3, r8
 8005e6c:	dcf1      	bgt.n	8005e52 <_printf_float+0x40e>
 8005e6e:	464b      	mov	r3, r9
 8005e70:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e74:	e6dc      	b.n	8005c30 <_printf_float+0x1ec>
 8005e76:	f04f 0800 	mov.w	r8, #0
 8005e7a:	f104 0a1a 	add.w	sl, r4, #26
 8005e7e:	e7f2      	b.n	8005e66 <_printf_float+0x422>
 8005e80:	2301      	movs	r3, #1
 8005e82:	4642      	mov	r2, r8
 8005e84:	e7df      	b.n	8005e46 <_printf_float+0x402>
 8005e86:	2301      	movs	r3, #1
 8005e88:	464a      	mov	r2, r9
 8005e8a:	4631      	mov	r1, r6
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	47b8      	blx	r7
 8005e90:	3001      	adds	r0, #1
 8005e92:	f43f ae38 	beq.w	8005b06 <_printf_float+0xc2>
 8005e96:	f108 0801 	add.w	r8, r8, #1
 8005e9a:	68e3      	ldr	r3, [r4, #12]
 8005e9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e9e:	1a5b      	subs	r3, r3, r1
 8005ea0:	4543      	cmp	r3, r8
 8005ea2:	dcf0      	bgt.n	8005e86 <_printf_float+0x442>
 8005ea4:	e6fa      	b.n	8005c9c <_printf_float+0x258>
 8005ea6:	f04f 0800 	mov.w	r8, #0
 8005eaa:	f104 0919 	add.w	r9, r4, #25
 8005eae:	e7f4      	b.n	8005e9a <_printf_float+0x456>

08005eb0 <_printf_common>:
 8005eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb4:	4616      	mov	r6, r2
 8005eb6:	4699      	mov	r9, r3
 8005eb8:	688a      	ldr	r2, [r1, #8]
 8005eba:	690b      	ldr	r3, [r1, #16]
 8005ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	bfb8      	it	lt
 8005ec4:	4613      	movlt	r3, r2
 8005ec6:	6033      	str	r3, [r6, #0]
 8005ec8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ecc:	4607      	mov	r7, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	b10a      	cbz	r2, 8005ed6 <_printf_common+0x26>
 8005ed2:	3301      	adds	r3, #1
 8005ed4:	6033      	str	r3, [r6, #0]
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	0699      	lsls	r1, r3, #26
 8005eda:	bf42      	ittt	mi
 8005edc:	6833      	ldrmi	r3, [r6, #0]
 8005ede:	3302      	addmi	r3, #2
 8005ee0:	6033      	strmi	r3, [r6, #0]
 8005ee2:	6825      	ldr	r5, [r4, #0]
 8005ee4:	f015 0506 	ands.w	r5, r5, #6
 8005ee8:	d106      	bne.n	8005ef8 <_printf_common+0x48>
 8005eea:	f104 0a19 	add.w	sl, r4, #25
 8005eee:	68e3      	ldr	r3, [r4, #12]
 8005ef0:	6832      	ldr	r2, [r6, #0]
 8005ef2:	1a9b      	subs	r3, r3, r2
 8005ef4:	42ab      	cmp	r3, r5
 8005ef6:	dc26      	bgt.n	8005f46 <_printf_common+0x96>
 8005ef8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005efc:	1e13      	subs	r3, r2, #0
 8005efe:	6822      	ldr	r2, [r4, #0]
 8005f00:	bf18      	it	ne
 8005f02:	2301      	movne	r3, #1
 8005f04:	0692      	lsls	r2, r2, #26
 8005f06:	d42b      	bmi.n	8005f60 <_printf_common+0xb0>
 8005f08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f0c:	4649      	mov	r1, r9
 8005f0e:	4638      	mov	r0, r7
 8005f10:	47c0      	blx	r8
 8005f12:	3001      	adds	r0, #1
 8005f14:	d01e      	beq.n	8005f54 <_printf_common+0xa4>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	68e5      	ldr	r5, [r4, #12]
 8005f1a:	6832      	ldr	r2, [r6, #0]
 8005f1c:	f003 0306 	and.w	r3, r3, #6
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	bf08      	it	eq
 8005f24:	1aad      	subeq	r5, r5, r2
 8005f26:	68a3      	ldr	r3, [r4, #8]
 8005f28:	6922      	ldr	r2, [r4, #16]
 8005f2a:	bf0c      	ite	eq
 8005f2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f30:	2500      	movne	r5, #0
 8005f32:	4293      	cmp	r3, r2
 8005f34:	bfc4      	itt	gt
 8005f36:	1a9b      	subgt	r3, r3, r2
 8005f38:	18ed      	addgt	r5, r5, r3
 8005f3a:	2600      	movs	r6, #0
 8005f3c:	341a      	adds	r4, #26
 8005f3e:	42b5      	cmp	r5, r6
 8005f40:	d11a      	bne.n	8005f78 <_printf_common+0xc8>
 8005f42:	2000      	movs	r0, #0
 8005f44:	e008      	b.n	8005f58 <_printf_common+0xa8>
 8005f46:	2301      	movs	r3, #1
 8005f48:	4652      	mov	r2, sl
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	47c0      	blx	r8
 8005f50:	3001      	adds	r0, #1
 8005f52:	d103      	bne.n	8005f5c <_printf_common+0xac>
 8005f54:	f04f 30ff 	mov.w	r0, #4294967295
 8005f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	e7c6      	b.n	8005eee <_printf_common+0x3e>
 8005f60:	18e1      	adds	r1, r4, r3
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	2030      	movs	r0, #48	; 0x30
 8005f66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f6a:	4422      	add	r2, r4
 8005f6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f74:	3302      	adds	r3, #2
 8005f76:	e7c7      	b.n	8005f08 <_printf_common+0x58>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4622      	mov	r2, r4
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	4638      	mov	r0, r7
 8005f80:	47c0      	blx	r8
 8005f82:	3001      	adds	r0, #1
 8005f84:	d0e6      	beq.n	8005f54 <_printf_common+0xa4>
 8005f86:	3601      	adds	r6, #1
 8005f88:	e7d9      	b.n	8005f3e <_printf_common+0x8e>
	...

08005f8c <_printf_i>:
 8005f8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	460c      	mov	r4, r1
 8005f92:	4691      	mov	r9, r2
 8005f94:	7e27      	ldrb	r7, [r4, #24]
 8005f96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005f98:	2f78      	cmp	r7, #120	; 0x78
 8005f9a:	4680      	mov	r8, r0
 8005f9c:	469a      	mov	sl, r3
 8005f9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fa2:	d807      	bhi.n	8005fb4 <_printf_i+0x28>
 8005fa4:	2f62      	cmp	r7, #98	; 0x62
 8005fa6:	d80a      	bhi.n	8005fbe <_printf_i+0x32>
 8005fa8:	2f00      	cmp	r7, #0
 8005faa:	f000 80d8 	beq.w	800615e <_printf_i+0x1d2>
 8005fae:	2f58      	cmp	r7, #88	; 0x58
 8005fb0:	f000 80a3 	beq.w	80060fa <_printf_i+0x16e>
 8005fb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005fb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fbc:	e03a      	b.n	8006034 <_printf_i+0xa8>
 8005fbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fc2:	2b15      	cmp	r3, #21
 8005fc4:	d8f6      	bhi.n	8005fb4 <_printf_i+0x28>
 8005fc6:	a001      	add	r0, pc, #4	; (adr r0, 8005fcc <_printf_i+0x40>)
 8005fc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005fcc:	08006025 	.word	0x08006025
 8005fd0:	08006039 	.word	0x08006039
 8005fd4:	08005fb5 	.word	0x08005fb5
 8005fd8:	08005fb5 	.word	0x08005fb5
 8005fdc:	08005fb5 	.word	0x08005fb5
 8005fe0:	08005fb5 	.word	0x08005fb5
 8005fe4:	08006039 	.word	0x08006039
 8005fe8:	08005fb5 	.word	0x08005fb5
 8005fec:	08005fb5 	.word	0x08005fb5
 8005ff0:	08005fb5 	.word	0x08005fb5
 8005ff4:	08005fb5 	.word	0x08005fb5
 8005ff8:	08006145 	.word	0x08006145
 8005ffc:	08006069 	.word	0x08006069
 8006000:	08006127 	.word	0x08006127
 8006004:	08005fb5 	.word	0x08005fb5
 8006008:	08005fb5 	.word	0x08005fb5
 800600c:	08006167 	.word	0x08006167
 8006010:	08005fb5 	.word	0x08005fb5
 8006014:	08006069 	.word	0x08006069
 8006018:	08005fb5 	.word	0x08005fb5
 800601c:	08005fb5 	.word	0x08005fb5
 8006020:	0800612f 	.word	0x0800612f
 8006024:	680b      	ldr	r3, [r1, #0]
 8006026:	1d1a      	adds	r2, r3, #4
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	600a      	str	r2, [r1, #0]
 800602c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006030:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006034:	2301      	movs	r3, #1
 8006036:	e0a3      	b.n	8006180 <_printf_i+0x1f4>
 8006038:	6825      	ldr	r5, [r4, #0]
 800603a:	6808      	ldr	r0, [r1, #0]
 800603c:	062e      	lsls	r6, r5, #24
 800603e:	f100 0304 	add.w	r3, r0, #4
 8006042:	d50a      	bpl.n	800605a <_printf_i+0xce>
 8006044:	6805      	ldr	r5, [r0, #0]
 8006046:	600b      	str	r3, [r1, #0]
 8006048:	2d00      	cmp	r5, #0
 800604a:	da03      	bge.n	8006054 <_printf_i+0xc8>
 800604c:	232d      	movs	r3, #45	; 0x2d
 800604e:	426d      	negs	r5, r5
 8006050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006054:	485e      	ldr	r0, [pc, #376]	; (80061d0 <_printf_i+0x244>)
 8006056:	230a      	movs	r3, #10
 8006058:	e019      	b.n	800608e <_printf_i+0x102>
 800605a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800605e:	6805      	ldr	r5, [r0, #0]
 8006060:	600b      	str	r3, [r1, #0]
 8006062:	bf18      	it	ne
 8006064:	b22d      	sxthne	r5, r5
 8006066:	e7ef      	b.n	8006048 <_printf_i+0xbc>
 8006068:	680b      	ldr	r3, [r1, #0]
 800606a:	6825      	ldr	r5, [r4, #0]
 800606c:	1d18      	adds	r0, r3, #4
 800606e:	6008      	str	r0, [r1, #0]
 8006070:	0628      	lsls	r0, r5, #24
 8006072:	d501      	bpl.n	8006078 <_printf_i+0xec>
 8006074:	681d      	ldr	r5, [r3, #0]
 8006076:	e002      	b.n	800607e <_printf_i+0xf2>
 8006078:	0669      	lsls	r1, r5, #25
 800607a:	d5fb      	bpl.n	8006074 <_printf_i+0xe8>
 800607c:	881d      	ldrh	r5, [r3, #0]
 800607e:	4854      	ldr	r0, [pc, #336]	; (80061d0 <_printf_i+0x244>)
 8006080:	2f6f      	cmp	r7, #111	; 0x6f
 8006082:	bf0c      	ite	eq
 8006084:	2308      	moveq	r3, #8
 8006086:	230a      	movne	r3, #10
 8006088:	2100      	movs	r1, #0
 800608a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800608e:	6866      	ldr	r6, [r4, #4]
 8006090:	60a6      	str	r6, [r4, #8]
 8006092:	2e00      	cmp	r6, #0
 8006094:	bfa2      	ittt	ge
 8006096:	6821      	ldrge	r1, [r4, #0]
 8006098:	f021 0104 	bicge.w	r1, r1, #4
 800609c:	6021      	strge	r1, [r4, #0]
 800609e:	b90d      	cbnz	r5, 80060a4 <_printf_i+0x118>
 80060a0:	2e00      	cmp	r6, #0
 80060a2:	d04d      	beq.n	8006140 <_printf_i+0x1b4>
 80060a4:	4616      	mov	r6, r2
 80060a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80060aa:	fb03 5711 	mls	r7, r3, r1, r5
 80060ae:	5dc7      	ldrb	r7, [r0, r7]
 80060b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060b4:	462f      	mov	r7, r5
 80060b6:	42bb      	cmp	r3, r7
 80060b8:	460d      	mov	r5, r1
 80060ba:	d9f4      	bls.n	80060a6 <_printf_i+0x11a>
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d10b      	bne.n	80060d8 <_printf_i+0x14c>
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	07df      	lsls	r7, r3, #31
 80060c4:	d508      	bpl.n	80060d8 <_printf_i+0x14c>
 80060c6:	6923      	ldr	r3, [r4, #16]
 80060c8:	6861      	ldr	r1, [r4, #4]
 80060ca:	4299      	cmp	r1, r3
 80060cc:	bfde      	ittt	le
 80060ce:	2330      	movle	r3, #48	; 0x30
 80060d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060d8:	1b92      	subs	r2, r2, r6
 80060da:	6122      	str	r2, [r4, #16]
 80060dc:	f8cd a000 	str.w	sl, [sp]
 80060e0:	464b      	mov	r3, r9
 80060e2:	aa03      	add	r2, sp, #12
 80060e4:	4621      	mov	r1, r4
 80060e6:	4640      	mov	r0, r8
 80060e8:	f7ff fee2 	bl	8005eb0 <_printf_common>
 80060ec:	3001      	adds	r0, #1
 80060ee:	d14c      	bne.n	800618a <_printf_i+0x1fe>
 80060f0:	f04f 30ff 	mov.w	r0, #4294967295
 80060f4:	b004      	add	sp, #16
 80060f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fa:	4835      	ldr	r0, [pc, #212]	; (80061d0 <_printf_i+0x244>)
 80060fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	680e      	ldr	r6, [r1, #0]
 8006104:	061f      	lsls	r7, r3, #24
 8006106:	f856 5b04 	ldr.w	r5, [r6], #4
 800610a:	600e      	str	r6, [r1, #0]
 800610c:	d514      	bpl.n	8006138 <_printf_i+0x1ac>
 800610e:	07d9      	lsls	r1, r3, #31
 8006110:	bf44      	itt	mi
 8006112:	f043 0320 	orrmi.w	r3, r3, #32
 8006116:	6023      	strmi	r3, [r4, #0]
 8006118:	b91d      	cbnz	r5, 8006122 <_printf_i+0x196>
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	f023 0320 	bic.w	r3, r3, #32
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	2310      	movs	r3, #16
 8006124:	e7b0      	b.n	8006088 <_printf_i+0xfc>
 8006126:	6823      	ldr	r3, [r4, #0]
 8006128:	f043 0320 	orr.w	r3, r3, #32
 800612c:	6023      	str	r3, [r4, #0]
 800612e:	2378      	movs	r3, #120	; 0x78
 8006130:	4828      	ldr	r0, [pc, #160]	; (80061d4 <_printf_i+0x248>)
 8006132:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006136:	e7e3      	b.n	8006100 <_printf_i+0x174>
 8006138:	065e      	lsls	r6, r3, #25
 800613a:	bf48      	it	mi
 800613c:	b2ad      	uxthmi	r5, r5
 800613e:	e7e6      	b.n	800610e <_printf_i+0x182>
 8006140:	4616      	mov	r6, r2
 8006142:	e7bb      	b.n	80060bc <_printf_i+0x130>
 8006144:	680b      	ldr	r3, [r1, #0]
 8006146:	6826      	ldr	r6, [r4, #0]
 8006148:	6960      	ldr	r0, [r4, #20]
 800614a:	1d1d      	adds	r5, r3, #4
 800614c:	600d      	str	r5, [r1, #0]
 800614e:	0635      	lsls	r5, r6, #24
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	d501      	bpl.n	8006158 <_printf_i+0x1cc>
 8006154:	6018      	str	r0, [r3, #0]
 8006156:	e002      	b.n	800615e <_printf_i+0x1d2>
 8006158:	0671      	lsls	r1, r6, #25
 800615a:	d5fb      	bpl.n	8006154 <_printf_i+0x1c8>
 800615c:	8018      	strh	r0, [r3, #0]
 800615e:	2300      	movs	r3, #0
 8006160:	6123      	str	r3, [r4, #16]
 8006162:	4616      	mov	r6, r2
 8006164:	e7ba      	b.n	80060dc <_printf_i+0x150>
 8006166:	680b      	ldr	r3, [r1, #0]
 8006168:	1d1a      	adds	r2, r3, #4
 800616a:	600a      	str	r2, [r1, #0]
 800616c:	681e      	ldr	r6, [r3, #0]
 800616e:	6862      	ldr	r2, [r4, #4]
 8006170:	2100      	movs	r1, #0
 8006172:	4630      	mov	r0, r6
 8006174:	f7fa f834 	bl	80001e0 <memchr>
 8006178:	b108      	cbz	r0, 800617e <_printf_i+0x1f2>
 800617a:	1b80      	subs	r0, r0, r6
 800617c:	6060      	str	r0, [r4, #4]
 800617e:	6863      	ldr	r3, [r4, #4]
 8006180:	6123      	str	r3, [r4, #16]
 8006182:	2300      	movs	r3, #0
 8006184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006188:	e7a8      	b.n	80060dc <_printf_i+0x150>
 800618a:	6923      	ldr	r3, [r4, #16]
 800618c:	4632      	mov	r2, r6
 800618e:	4649      	mov	r1, r9
 8006190:	4640      	mov	r0, r8
 8006192:	47d0      	blx	sl
 8006194:	3001      	adds	r0, #1
 8006196:	d0ab      	beq.n	80060f0 <_printf_i+0x164>
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	079b      	lsls	r3, r3, #30
 800619c:	d413      	bmi.n	80061c6 <_printf_i+0x23a>
 800619e:	68e0      	ldr	r0, [r4, #12]
 80061a0:	9b03      	ldr	r3, [sp, #12]
 80061a2:	4298      	cmp	r0, r3
 80061a4:	bfb8      	it	lt
 80061a6:	4618      	movlt	r0, r3
 80061a8:	e7a4      	b.n	80060f4 <_printf_i+0x168>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4632      	mov	r2, r6
 80061ae:	4649      	mov	r1, r9
 80061b0:	4640      	mov	r0, r8
 80061b2:	47d0      	blx	sl
 80061b4:	3001      	adds	r0, #1
 80061b6:	d09b      	beq.n	80060f0 <_printf_i+0x164>
 80061b8:	3501      	adds	r5, #1
 80061ba:	68e3      	ldr	r3, [r4, #12]
 80061bc:	9903      	ldr	r1, [sp, #12]
 80061be:	1a5b      	subs	r3, r3, r1
 80061c0:	42ab      	cmp	r3, r5
 80061c2:	dcf2      	bgt.n	80061aa <_printf_i+0x21e>
 80061c4:	e7eb      	b.n	800619e <_printf_i+0x212>
 80061c6:	2500      	movs	r5, #0
 80061c8:	f104 0619 	add.w	r6, r4, #25
 80061cc:	e7f5      	b.n	80061ba <_printf_i+0x22e>
 80061ce:	bf00      	nop
 80061d0:	0800830a 	.word	0x0800830a
 80061d4:	0800831b 	.word	0x0800831b

080061d8 <quorem>:
 80061d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061dc:	6903      	ldr	r3, [r0, #16]
 80061de:	690c      	ldr	r4, [r1, #16]
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	4607      	mov	r7, r0
 80061e4:	f2c0 8081 	blt.w	80062ea <quorem+0x112>
 80061e8:	3c01      	subs	r4, #1
 80061ea:	f101 0814 	add.w	r8, r1, #20
 80061ee:	f100 0514 	add.w	r5, r0, #20
 80061f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006200:	3301      	adds	r3, #1
 8006202:	429a      	cmp	r2, r3
 8006204:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006208:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800620c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006210:	d331      	bcc.n	8006276 <quorem+0x9e>
 8006212:	f04f 0e00 	mov.w	lr, #0
 8006216:	4640      	mov	r0, r8
 8006218:	46ac      	mov	ip, r5
 800621a:	46f2      	mov	sl, lr
 800621c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006220:	b293      	uxth	r3, r2
 8006222:	fb06 e303 	mla	r3, r6, r3, lr
 8006226:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800622a:	b29b      	uxth	r3, r3
 800622c:	ebaa 0303 	sub.w	r3, sl, r3
 8006230:	0c12      	lsrs	r2, r2, #16
 8006232:	f8dc a000 	ldr.w	sl, [ip]
 8006236:	fb06 e202 	mla	r2, r6, r2, lr
 800623a:	fa13 f38a 	uxtah	r3, r3, sl
 800623e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006242:	fa1f fa82 	uxth.w	sl, r2
 8006246:	f8dc 2000 	ldr.w	r2, [ip]
 800624a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800624e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006252:	b29b      	uxth	r3, r3
 8006254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006258:	4581      	cmp	r9, r0
 800625a:	f84c 3b04 	str.w	r3, [ip], #4
 800625e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006262:	d2db      	bcs.n	800621c <quorem+0x44>
 8006264:	f855 300b 	ldr.w	r3, [r5, fp]
 8006268:	b92b      	cbnz	r3, 8006276 <quorem+0x9e>
 800626a:	9b01      	ldr	r3, [sp, #4]
 800626c:	3b04      	subs	r3, #4
 800626e:	429d      	cmp	r5, r3
 8006270:	461a      	mov	r2, r3
 8006272:	d32e      	bcc.n	80062d2 <quorem+0xfa>
 8006274:	613c      	str	r4, [r7, #16]
 8006276:	4638      	mov	r0, r7
 8006278:	f001 f8b0 	bl	80073dc <__mcmp>
 800627c:	2800      	cmp	r0, #0
 800627e:	db24      	blt.n	80062ca <quorem+0xf2>
 8006280:	3601      	adds	r6, #1
 8006282:	4628      	mov	r0, r5
 8006284:	f04f 0c00 	mov.w	ip, #0
 8006288:	f858 2b04 	ldr.w	r2, [r8], #4
 800628c:	f8d0 e000 	ldr.w	lr, [r0]
 8006290:	b293      	uxth	r3, r2
 8006292:	ebac 0303 	sub.w	r3, ip, r3
 8006296:	0c12      	lsrs	r2, r2, #16
 8006298:	fa13 f38e 	uxtah	r3, r3, lr
 800629c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80062a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062aa:	45c1      	cmp	r9, r8
 80062ac:	f840 3b04 	str.w	r3, [r0], #4
 80062b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062b4:	d2e8      	bcs.n	8006288 <quorem+0xb0>
 80062b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062be:	b922      	cbnz	r2, 80062ca <quorem+0xf2>
 80062c0:	3b04      	subs	r3, #4
 80062c2:	429d      	cmp	r5, r3
 80062c4:	461a      	mov	r2, r3
 80062c6:	d30a      	bcc.n	80062de <quorem+0x106>
 80062c8:	613c      	str	r4, [r7, #16]
 80062ca:	4630      	mov	r0, r6
 80062cc:	b003      	add	sp, #12
 80062ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	3b04      	subs	r3, #4
 80062d6:	2a00      	cmp	r2, #0
 80062d8:	d1cc      	bne.n	8006274 <quorem+0x9c>
 80062da:	3c01      	subs	r4, #1
 80062dc:	e7c7      	b.n	800626e <quorem+0x96>
 80062de:	6812      	ldr	r2, [r2, #0]
 80062e0:	3b04      	subs	r3, #4
 80062e2:	2a00      	cmp	r2, #0
 80062e4:	d1f0      	bne.n	80062c8 <quorem+0xf0>
 80062e6:	3c01      	subs	r4, #1
 80062e8:	e7eb      	b.n	80062c2 <quorem+0xea>
 80062ea:	2000      	movs	r0, #0
 80062ec:	e7ee      	b.n	80062cc <quorem+0xf4>
	...

080062f0 <_dtoa_r>:
 80062f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f4:	ed2d 8b02 	vpush	{d8}
 80062f8:	ec57 6b10 	vmov	r6, r7, d0
 80062fc:	b095      	sub	sp, #84	; 0x54
 80062fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006300:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006304:	9105      	str	r1, [sp, #20]
 8006306:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800630a:	4604      	mov	r4, r0
 800630c:	9209      	str	r2, [sp, #36]	; 0x24
 800630e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006310:	b975      	cbnz	r5, 8006330 <_dtoa_r+0x40>
 8006312:	2010      	movs	r0, #16
 8006314:	f000 fddc 	bl	8006ed0 <malloc>
 8006318:	4602      	mov	r2, r0
 800631a:	6260      	str	r0, [r4, #36]	; 0x24
 800631c:	b920      	cbnz	r0, 8006328 <_dtoa_r+0x38>
 800631e:	4bb2      	ldr	r3, [pc, #712]	; (80065e8 <_dtoa_r+0x2f8>)
 8006320:	21ea      	movs	r1, #234	; 0xea
 8006322:	48b2      	ldr	r0, [pc, #712]	; (80065ec <_dtoa_r+0x2fc>)
 8006324:	f001 fa24 	bl	8007770 <__assert_func>
 8006328:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800632c:	6005      	str	r5, [r0, #0]
 800632e:	60c5      	str	r5, [r0, #12]
 8006330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006332:	6819      	ldr	r1, [r3, #0]
 8006334:	b151      	cbz	r1, 800634c <_dtoa_r+0x5c>
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	604a      	str	r2, [r1, #4]
 800633a:	2301      	movs	r3, #1
 800633c:	4093      	lsls	r3, r2
 800633e:	608b      	str	r3, [r1, #8]
 8006340:	4620      	mov	r0, r4
 8006342:	f000 fe0d 	bl	8006f60 <_Bfree>
 8006346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	1e3b      	subs	r3, r7, #0
 800634e:	bfb9      	ittee	lt
 8006350:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006354:	9303      	strlt	r3, [sp, #12]
 8006356:	2300      	movge	r3, #0
 8006358:	f8c8 3000 	strge.w	r3, [r8]
 800635c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006360:	4ba3      	ldr	r3, [pc, #652]	; (80065f0 <_dtoa_r+0x300>)
 8006362:	bfbc      	itt	lt
 8006364:	2201      	movlt	r2, #1
 8006366:	f8c8 2000 	strlt.w	r2, [r8]
 800636a:	ea33 0309 	bics.w	r3, r3, r9
 800636e:	d11b      	bne.n	80063a8 <_dtoa_r+0xb8>
 8006370:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006372:	f242 730f 	movw	r3, #9999	; 0x270f
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800637c:	4333      	orrs	r3, r6
 800637e:	f000 857a 	beq.w	8006e76 <_dtoa_r+0xb86>
 8006382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006384:	b963      	cbnz	r3, 80063a0 <_dtoa_r+0xb0>
 8006386:	4b9b      	ldr	r3, [pc, #620]	; (80065f4 <_dtoa_r+0x304>)
 8006388:	e024      	b.n	80063d4 <_dtoa_r+0xe4>
 800638a:	4b9b      	ldr	r3, [pc, #620]	; (80065f8 <_dtoa_r+0x308>)
 800638c:	9300      	str	r3, [sp, #0]
 800638e:	3308      	adds	r3, #8
 8006390:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	9800      	ldr	r0, [sp, #0]
 8006396:	b015      	add	sp, #84	; 0x54
 8006398:	ecbd 8b02 	vpop	{d8}
 800639c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a0:	4b94      	ldr	r3, [pc, #592]	; (80065f4 <_dtoa_r+0x304>)
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	3303      	adds	r3, #3
 80063a6:	e7f3      	b.n	8006390 <_dtoa_r+0xa0>
 80063a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063ac:	2200      	movs	r2, #0
 80063ae:	ec51 0b17 	vmov	r0, r1, d7
 80063b2:	2300      	movs	r3, #0
 80063b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80063b8:	f7fa fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 80063bc:	4680      	mov	r8, r0
 80063be:	b158      	cbz	r0, 80063d8 <_dtoa_r+0xe8>
 80063c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063c2:	2301      	movs	r3, #1
 80063c4:	6013      	str	r3, [r2, #0]
 80063c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8551 	beq.w	8006e70 <_dtoa_r+0xb80>
 80063ce:	488b      	ldr	r0, [pc, #556]	; (80065fc <_dtoa_r+0x30c>)
 80063d0:	6018      	str	r0, [r3, #0]
 80063d2:	1e43      	subs	r3, r0, #1
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	e7dd      	b.n	8006394 <_dtoa_r+0xa4>
 80063d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80063dc:	aa12      	add	r2, sp, #72	; 0x48
 80063de:	a913      	add	r1, sp, #76	; 0x4c
 80063e0:	4620      	mov	r0, r4
 80063e2:	f001 f89f 	bl	8007524 <__d2b>
 80063e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80063ea:	4683      	mov	fp, r0
 80063ec:	2d00      	cmp	r5, #0
 80063ee:	d07c      	beq.n	80064ea <_dtoa_r+0x1fa>
 80063f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80063f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80063fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006402:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006406:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800640a:	4b7d      	ldr	r3, [pc, #500]	; (8006600 <_dtoa_r+0x310>)
 800640c:	2200      	movs	r2, #0
 800640e:	4630      	mov	r0, r6
 8006410:	4639      	mov	r1, r7
 8006412:	f7f9 ff39 	bl	8000288 <__aeabi_dsub>
 8006416:	a36e      	add	r3, pc, #440	; (adr r3, 80065d0 <_dtoa_r+0x2e0>)
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f7fa f8ec 	bl	80005f8 <__aeabi_dmul>
 8006420:	a36d      	add	r3, pc, #436	; (adr r3, 80065d8 <_dtoa_r+0x2e8>)
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	f7f9 ff31 	bl	800028c <__adddf3>
 800642a:	4606      	mov	r6, r0
 800642c:	4628      	mov	r0, r5
 800642e:	460f      	mov	r7, r1
 8006430:	f7fa f878 	bl	8000524 <__aeabi_i2d>
 8006434:	a36a      	add	r3, pc, #424	; (adr r3, 80065e0 <_dtoa_r+0x2f0>)
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f7fa f8dd 	bl	80005f8 <__aeabi_dmul>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4630      	mov	r0, r6
 8006444:	4639      	mov	r1, r7
 8006446:	f7f9 ff21 	bl	800028c <__adddf3>
 800644a:	4606      	mov	r6, r0
 800644c:	460f      	mov	r7, r1
 800644e:	f7fa fb83 	bl	8000b58 <__aeabi_d2iz>
 8006452:	2200      	movs	r2, #0
 8006454:	4682      	mov	sl, r0
 8006456:	2300      	movs	r3, #0
 8006458:	4630      	mov	r0, r6
 800645a:	4639      	mov	r1, r7
 800645c:	f7fa fb3e 	bl	8000adc <__aeabi_dcmplt>
 8006460:	b148      	cbz	r0, 8006476 <_dtoa_r+0x186>
 8006462:	4650      	mov	r0, sl
 8006464:	f7fa f85e 	bl	8000524 <__aeabi_i2d>
 8006468:	4632      	mov	r2, r6
 800646a:	463b      	mov	r3, r7
 800646c:	f7fa fb2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006470:	b908      	cbnz	r0, 8006476 <_dtoa_r+0x186>
 8006472:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006476:	f1ba 0f16 	cmp.w	sl, #22
 800647a:	d854      	bhi.n	8006526 <_dtoa_r+0x236>
 800647c:	4b61      	ldr	r3, [pc, #388]	; (8006604 <_dtoa_r+0x314>)
 800647e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006486:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800648a:	f7fa fb27 	bl	8000adc <__aeabi_dcmplt>
 800648e:	2800      	cmp	r0, #0
 8006490:	d04b      	beq.n	800652a <_dtoa_r+0x23a>
 8006492:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006496:	2300      	movs	r3, #0
 8006498:	930e      	str	r3, [sp, #56]	; 0x38
 800649a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800649c:	1b5d      	subs	r5, r3, r5
 800649e:	1e6b      	subs	r3, r5, #1
 80064a0:	9304      	str	r3, [sp, #16]
 80064a2:	bf43      	ittte	mi
 80064a4:	2300      	movmi	r3, #0
 80064a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80064aa:	9304      	strmi	r3, [sp, #16]
 80064ac:	f04f 0800 	movpl.w	r8, #0
 80064b0:	f1ba 0f00 	cmp.w	sl, #0
 80064b4:	db3b      	blt.n	800652e <_dtoa_r+0x23e>
 80064b6:	9b04      	ldr	r3, [sp, #16]
 80064b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80064bc:	4453      	add	r3, sl
 80064be:	9304      	str	r3, [sp, #16]
 80064c0:	2300      	movs	r3, #0
 80064c2:	9306      	str	r3, [sp, #24]
 80064c4:	9b05      	ldr	r3, [sp, #20]
 80064c6:	2b09      	cmp	r3, #9
 80064c8:	d869      	bhi.n	800659e <_dtoa_r+0x2ae>
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	bfc4      	itt	gt
 80064ce:	3b04      	subgt	r3, #4
 80064d0:	9305      	strgt	r3, [sp, #20]
 80064d2:	9b05      	ldr	r3, [sp, #20]
 80064d4:	f1a3 0302 	sub.w	r3, r3, #2
 80064d8:	bfcc      	ite	gt
 80064da:	2500      	movgt	r5, #0
 80064dc:	2501      	movle	r5, #1
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d869      	bhi.n	80065b6 <_dtoa_r+0x2c6>
 80064e2:	e8df f003 	tbb	[pc, r3]
 80064e6:	4e2c      	.short	0x4e2c
 80064e8:	5a4c      	.short	0x5a4c
 80064ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80064ee:	441d      	add	r5, r3
 80064f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80064f4:	2b20      	cmp	r3, #32
 80064f6:	bfc1      	itttt	gt
 80064f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006500:	fa09 f303 	lslgt.w	r3, r9, r3
 8006504:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006508:	bfda      	itte	le
 800650a:	f1c3 0320 	rsble	r3, r3, #32
 800650e:	fa06 f003 	lslle.w	r0, r6, r3
 8006512:	4318      	orrgt	r0, r3
 8006514:	f7f9 fff6 	bl	8000504 <__aeabi_ui2d>
 8006518:	2301      	movs	r3, #1
 800651a:	4606      	mov	r6, r0
 800651c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006520:	3d01      	subs	r5, #1
 8006522:	9310      	str	r3, [sp, #64]	; 0x40
 8006524:	e771      	b.n	800640a <_dtoa_r+0x11a>
 8006526:	2301      	movs	r3, #1
 8006528:	e7b6      	b.n	8006498 <_dtoa_r+0x1a8>
 800652a:	900e      	str	r0, [sp, #56]	; 0x38
 800652c:	e7b5      	b.n	800649a <_dtoa_r+0x1aa>
 800652e:	f1ca 0300 	rsb	r3, sl, #0
 8006532:	9306      	str	r3, [sp, #24]
 8006534:	2300      	movs	r3, #0
 8006536:	eba8 080a 	sub.w	r8, r8, sl
 800653a:	930d      	str	r3, [sp, #52]	; 0x34
 800653c:	e7c2      	b.n	80064c4 <_dtoa_r+0x1d4>
 800653e:	2300      	movs	r3, #0
 8006540:	9308      	str	r3, [sp, #32]
 8006542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	dc39      	bgt.n	80065bc <_dtoa_r+0x2cc>
 8006548:	f04f 0901 	mov.w	r9, #1
 800654c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006550:	464b      	mov	r3, r9
 8006552:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006556:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006558:	2200      	movs	r2, #0
 800655a:	6042      	str	r2, [r0, #4]
 800655c:	2204      	movs	r2, #4
 800655e:	f102 0614 	add.w	r6, r2, #20
 8006562:	429e      	cmp	r6, r3
 8006564:	6841      	ldr	r1, [r0, #4]
 8006566:	d92f      	bls.n	80065c8 <_dtoa_r+0x2d8>
 8006568:	4620      	mov	r0, r4
 800656a:	f000 fcb9 	bl	8006ee0 <_Balloc>
 800656e:	9000      	str	r0, [sp, #0]
 8006570:	2800      	cmp	r0, #0
 8006572:	d14b      	bne.n	800660c <_dtoa_r+0x31c>
 8006574:	4b24      	ldr	r3, [pc, #144]	; (8006608 <_dtoa_r+0x318>)
 8006576:	4602      	mov	r2, r0
 8006578:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800657c:	e6d1      	b.n	8006322 <_dtoa_r+0x32>
 800657e:	2301      	movs	r3, #1
 8006580:	e7de      	b.n	8006540 <_dtoa_r+0x250>
 8006582:	2300      	movs	r3, #0
 8006584:	9308      	str	r3, [sp, #32]
 8006586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006588:	eb0a 0903 	add.w	r9, sl, r3
 800658c:	f109 0301 	add.w	r3, r9, #1
 8006590:	2b01      	cmp	r3, #1
 8006592:	9301      	str	r3, [sp, #4]
 8006594:	bfb8      	it	lt
 8006596:	2301      	movlt	r3, #1
 8006598:	e7dd      	b.n	8006556 <_dtoa_r+0x266>
 800659a:	2301      	movs	r3, #1
 800659c:	e7f2      	b.n	8006584 <_dtoa_r+0x294>
 800659e:	2501      	movs	r5, #1
 80065a0:	2300      	movs	r3, #0
 80065a2:	9305      	str	r3, [sp, #20]
 80065a4:	9508      	str	r5, [sp, #32]
 80065a6:	f04f 39ff 	mov.w	r9, #4294967295
 80065aa:	2200      	movs	r2, #0
 80065ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80065b0:	2312      	movs	r3, #18
 80065b2:	9209      	str	r2, [sp, #36]	; 0x24
 80065b4:	e7cf      	b.n	8006556 <_dtoa_r+0x266>
 80065b6:	2301      	movs	r3, #1
 80065b8:	9308      	str	r3, [sp, #32]
 80065ba:	e7f4      	b.n	80065a6 <_dtoa_r+0x2b6>
 80065bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80065c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80065c4:	464b      	mov	r3, r9
 80065c6:	e7c6      	b.n	8006556 <_dtoa_r+0x266>
 80065c8:	3101      	adds	r1, #1
 80065ca:	6041      	str	r1, [r0, #4]
 80065cc:	0052      	lsls	r2, r2, #1
 80065ce:	e7c6      	b.n	800655e <_dtoa_r+0x26e>
 80065d0:	636f4361 	.word	0x636f4361
 80065d4:	3fd287a7 	.word	0x3fd287a7
 80065d8:	8b60c8b3 	.word	0x8b60c8b3
 80065dc:	3fc68a28 	.word	0x3fc68a28
 80065e0:	509f79fb 	.word	0x509f79fb
 80065e4:	3fd34413 	.word	0x3fd34413
 80065e8:	08008339 	.word	0x08008339
 80065ec:	08008350 	.word	0x08008350
 80065f0:	7ff00000 	.word	0x7ff00000
 80065f4:	08008335 	.word	0x08008335
 80065f8:	0800832c 	.word	0x0800832c
 80065fc:	08008309 	.word	0x08008309
 8006600:	3ff80000 	.word	0x3ff80000
 8006604:	08008448 	.word	0x08008448
 8006608:	080083af 	.word	0x080083af
 800660c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800660e:	9a00      	ldr	r2, [sp, #0]
 8006610:	601a      	str	r2, [r3, #0]
 8006612:	9b01      	ldr	r3, [sp, #4]
 8006614:	2b0e      	cmp	r3, #14
 8006616:	f200 80ad 	bhi.w	8006774 <_dtoa_r+0x484>
 800661a:	2d00      	cmp	r5, #0
 800661c:	f000 80aa 	beq.w	8006774 <_dtoa_r+0x484>
 8006620:	f1ba 0f00 	cmp.w	sl, #0
 8006624:	dd36      	ble.n	8006694 <_dtoa_r+0x3a4>
 8006626:	4ac3      	ldr	r2, [pc, #780]	; (8006934 <_dtoa_r+0x644>)
 8006628:	f00a 030f 	and.w	r3, sl, #15
 800662c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006630:	ed93 7b00 	vldr	d7, [r3]
 8006634:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006638:	ea4f 172a 	mov.w	r7, sl, asr #4
 800663c:	eeb0 8a47 	vmov.f32	s16, s14
 8006640:	eef0 8a67 	vmov.f32	s17, s15
 8006644:	d016      	beq.n	8006674 <_dtoa_r+0x384>
 8006646:	4bbc      	ldr	r3, [pc, #752]	; (8006938 <_dtoa_r+0x648>)
 8006648:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800664c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006650:	f7fa f8fc 	bl	800084c <__aeabi_ddiv>
 8006654:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006658:	f007 070f 	and.w	r7, r7, #15
 800665c:	2503      	movs	r5, #3
 800665e:	4eb6      	ldr	r6, [pc, #728]	; (8006938 <_dtoa_r+0x648>)
 8006660:	b957      	cbnz	r7, 8006678 <_dtoa_r+0x388>
 8006662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006666:	ec53 2b18 	vmov	r2, r3, d8
 800666a:	f7fa f8ef 	bl	800084c <__aeabi_ddiv>
 800666e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006672:	e029      	b.n	80066c8 <_dtoa_r+0x3d8>
 8006674:	2502      	movs	r5, #2
 8006676:	e7f2      	b.n	800665e <_dtoa_r+0x36e>
 8006678:	07f9      	lsls	r1, r7, #31
 800667a:	d508      	bpl.n	800668e <_dtoa_r+0x39e>
 800667c:	ec51 0b18 	vmov	r0, r1, d8
 8006680:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006684:	f7f9 ffb8 	bl	80005f8 <__aeabi_dmul>
 8006688:	ec41 0b18 	vmov	d8, r0, r1
 800668c:	3501      	adds	r5, #1
 800668e:	107f      	asrs	r7, r7, #1
 8006690:	3608      	adds	r6, #8
 8006692:	e7e5      	b.n	8006660 <_dtoa_r+0x370>
 8006694:	f000 80a6 	beq.w	80067e4 <_dtoa_r+0x4f4>
 8006698:	f1ca 0600 	rsb	r6, sl, #0
 800669c:	4ba5      	ldr	r3, [pc, #660]	; (8006934 <_dtoa_r+0x644>)
 800669e:	4fa6      	ldr	r7, [pc, #664]	; (8006938 <_dtoa_r+0x648>)
 80066a0:	f006 020f 	and.w	r2, r6, #15
 80066a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80066b0:	f7f9 ffa2 	bl	80005f8 <__aeabi_dmul>
 80066b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066b8:	1136      	asrs	r6, r6, #4
 80066ba:	2300      	movs	r3, #0
 80066bc:	2502      	movs	r5, #2
 80066be:	2e00      	cmp	r6, #0
 80066c0:	f040 8085 	bne.w	80067ce <_dtoa_r+0x4de>
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d1d2      	bne.n	800666e <_dtoa_r+0x37e>
 80066c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 808c 	beq.w	80067e8 <_dtoa_r+0x4f8>
 80066d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066d4:	4b99      	ldr	r3, [pc, #612]	; (800693c <_dtoa_r+0x64c>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	4630      	mov	r0, r6
 80066da:	4639      	mov	r1, r7
 80066dc:	f7fa f9fe 	bl	8000adc <__aeabi_dcmplt>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f000 8081 	beq.w	80067e8 <_dtoa_r+0x4f8>
 80066e6:	9b01      	ldr	r3, [sp, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d07d      	beq.n	80067e8 <_dtoa_r+0x4f8>
 80066ec:	f1b9 0f00 	cmp.w	r9, #0
 80066f0:	dd3c      	ble.n	800676c <_dtoa_r+0x47c>
 80066f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80066f6:	9307      	str	r3, [sp, #28]
 80066f8:	2200      	movs	r2, #0
 80066fa:	4b91      	ldr	r3, [pc, #580]	; (8006940 <_dtoa_r+0x650>)
 80066fc:	4630      	mov	r0, r6
 80066fe:	4639      	mov	r1, r7
 8006700:	f7f9 ff7a 	bl	80005f8 <__aeabi_dmul>
 8006704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006708:	3501      	adds	r5, #1
 800670a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800670e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006712:	4628      	mov	r0, r5
 8006714:	f7f9 ff06 	bl	8000524 <__aeabi_i2d>
 8006718:	4632      	mov	r2, r6
 800671a:	463b      	mov	r3, r7
 800671c:	f7f9 ff6c 	bl	80005f8 <__aeabi_dmul>
 8006720:	4b88      	ldr	r3, [pc, #544]	; (8006944 <_dtoa_r+0x654>)
 8006722:	2200      	movs	r2, #0
 8006724:	f7f9 fdb2 	bl	800028c <__adddf3>
 8006728:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800672c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006730:	9303      	str	r3, [sp, #12]
 8006732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006734:	2b00      	cmp	r3, #0
 8006736:	d15c      	bne.n	80067f2 <_dtoa_r+0x502>
 8006738:	4b83      	ldr	r3, [pc, #524]	; (8006948 <_dtoa_r+0x658>)
 800673a:	2200      	movs	r2, #0
 800673c:	4630      	mov	r0, r6
 800673e:	4639      	mov	r1, r7
 8006740:	f7f9 fda2 	bl	8000288 <__aeabi_dsub>
 8006744:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006748:	4606      	mov	r6, r0
 800674a:	460f      	mov	r7, r1
 800674c:	f7fa f9e4 	bl	8000b18 <__aeabi_dcmpgt>
 8006750:	2800      	cmp	r0, #0
 8006752:	f040 8296 	bne.w	8006c82 <_dtoa_r+0x992>
 8006756:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800675a:	4630      	mov	r0, r6
 800675c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006760:	4639      	mov	r1, r7
 8006762:	f7fa f9bb 	bl	8000adc <__aeabi_dcmplt>
 8006766:	2800      	cmp	r0, #0
 8006768:	f040 8288 	bne.w	8006c7c <_dtoa_r+0x98c>
 800676c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006770:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006774:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006776:	2b00      	cmp	r3, #0
 8006778:	f2c0 8158 	blt.w	8006a2c <_dtoa_r+0x73c>
 800677c:	f1ba 0f0e 	cmp.w	sl, #14
 8006780:	f300 8154 	bgt.w	8006a2c <_dtoa_r+0x73c>
 8006784:	4b6b      	ldr	r3, [pc, #428]	; (8006934 <_dtoa_r+0x644>)
 8006786:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800678a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800678e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006790:	2b00      	cmp	r3, #0
 8006792:	f280 80e3 	bge.w	800695c <_dtoa_r+0x66c>
 8006796:	9b01      	ldr	r3, [sp, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f300 80df 	bgt.w	800695c <_dtoa_r+0x66c>
 800679e:	f040 826d 	bne.w	8006c7c <_dtoa_r+0x98c>
 80067a2:	4b69      	ldr	r3, [pc, #420]	; (8006948 <_dtoa_r+0x658>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	4640      	mov	r0, r8
 80067a8:	4649      	mov	r1, r9
 80067aa:	f7f9 ff25 	bl	80005f8 <__aeabi_dmul>
 80067ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067b2:	f7fa f9a7 	bl	8000b04 <__aeabi_dcmpge>
 80067b6:	9e01      	ldr	r6, [sp, #4]
 80067b8:	4637      	mov	r7, r6
 80067ba:	2800      	cmp	r0, #0
 80067bc:	f040 8243 	bne.w	8006c46 <_dtoa_r+0x956>
 80067c0:	9d00      	ldr	r5, [sp, #0]
 80067c2:	2331      	movs	r3, #49	; 0x31
 80067c4:	f805 3b01 	strb.w	r3, [r5], #1
 80067c8:	f10a 0a01 	add.w	sl, sl, #1
 80067cc:	e23f      	b.n	8006c4e <_dtoa_r+0x95e>
 80067ce:	07f2      	lsls	r2, r6, #31
 80067d0:	d505      	bpl.n	80067de <_dtoa_r+0x4ee>
 80067d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d6:	f7f9 ff0f 	bl	80005f8 <__aeabi_dmul>
 80067da:	3501      	adds	r5, #1
 80067dc:	2301      	movs	r3, #1
 80067de:	1076      	asrs	r6, r6, #1
 80067e0:	3708      	adds	r7, #8
 80067e2:	e76c      	b.n	80066be <_dtoa_r+0x3ce>
 80067e4:	2502      	movs	r5, #2
 80067e6:	e76f      	b.n	80066c8 <_dtoa_r+0x3d8>
 80067e8:	9b01      	ldr	r3, [sp, #4]
 80067ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80067ee:	930c      	str	r3, [sp, #48]	; 0x30
 80067f0:	e78d      	b.n	800670e <_dtoa_r+0x41e>
 80067f2:	9900      	ldr	r1, [sp, #0]
 80067f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80067f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067f8:	4b4e      	ldr	r3, [pc, #312]	; (8006934 <_dtoa_r+0x644>)
 80067fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067fe:	4401      	add	r1, r0
 8006800:	9102      	str	r1, [sp, #8]
 8006802:	9908      	ldr	r1, [sp, #32]
 8006804:	eeb0 8a47 	vmov.f32	s16, s14
 8006808:	eef0 8a67 	vmov.f32	s17, s15
 800680c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006810:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006814:	2900      	cmp	r1, #0
 8006816:	d045      	beq.n	80068a4 <_dtoa_r+0x5b4>
 8006818:	494c      	ldr	r1, [pc, #304]	; (800694c <_dtoa_r+0x65c>)
 800681a:	2000      	movs	r0, #0
 800681c:	f7fa f816 	bl	800084c <__aeabi_ddiv>
 8006820:	ec53 2b18 	vmov	r2, r3, d8
 8006824:	f7f9 fd30 	bl	8000288 <__aeabi_dsub>
 8006828:	9d00      	ldr	r5, [sp, #0]
 800682a:	ec41 0b18 	vmov	d8, r0, r1
 800682e:	4639      	mov	r1, r7
 8006830:	4630      	mov	r0, r6
 8006832:	f7fa f991 	bl	8000b58 <__aeabi_d2iz>
 8006836:	900c      	str	r0, [sp, #48]	; 0x30
 8006838:	f7f9 fe74 	bl	8000524 <__aeabi_i2d>
 800683c:	4602      	mov	r2, r0
 800683e:	460b      	mov	r3, r1
 8006840:	4630      	mov	r0, r6
 8006842:	4639      	mov	r1, r7
 8006844:	f7f9 fd20 	bl	8000288 <__aeabi_dsub>
 8006848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800684a:	3330      	adds	r3, #48	; 0x30
 800684c:	f805 3b01 	strb.w	r3, [r5], #1
 8006850:	ec53 2b18 	vmov	r2, r3, d8
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
 8006858:	f7fa f940 	bl	8000adc <__aeabi_dcmplt>
 800685c:	2800      	cmp	r0, #0
 800685e:	d165      	bne.n	800692c <_dtoa_r+0x63c>
 8006860:	4632      	mov	r2, r6
 8006862:	463b      	mov	r3, r7
 8006864:	4935      	ldr	r1, [pc, #212]	; (800693c <_dtoa_r+0x64c>)
 8006866:	2000      	movs	r0, #0
 8006868:	f7f9 fd0e 	bl	8000288 <__aeabi_dsub>
 800686c:	ec53 2b18 	vmov	r2, r3, d8
 8006870:	f7fa f934 	bl	8000adc <__aeabi_dcmplt>
 8006874:	2800      	cmp	r0, #0
 8006876:	f040 80b9 	bne.w	80069ec <_dtoa_r+0x6fc>
 800687a:	9b02      	ldr	r3, [sp, #8]
 800687c:	429d      	cmp	r5, r3
 800687e:	f43f af75 	beq.w	800676c <_dtoa_r+0x47c>
 8006882:	4b2f      	ldr	r3, [pc, #188]	; (8006940 <_dtoa_r+0x650>)
 8006884:	ec51 0b18 	vmov	r0, r1, d8
 8006888:	2200      	movs	r2, #0
 800688a:	f7f9 feb5 	bl	80005f8 <__aeabi_dmul>
 800688e:	4b2c      	ldr	r3, [pc, #176]	; (8006940 <_dtoa_r+0x650>)
 8006890:	ec41 0b18 	vmov	d8, r0, r1
 8006894:	2200      	movs	r2, #0
 8006896:	4630      	mov	r0, r6
 8006898:	4639      	mov	r1, r7
 800689a:	f7f9 fead 	bl	80005f8 <__aeabi_dmul>
 800689e:	4606      	mov	r6, r0
 80068a0:	460f      	mov	r7, r1
 80068a2:	e7c4      	b.n	800682e <_dtoa_r+0x53e>
 80068a4:	ec51 0b17 	vmov	r0, r1, d7
 80068a8:	f7f9 fea6 	bl	80005f8 <__aeabi_dmul>
 80068ac:	9b02      	ldr	r3, [sp, #8]
 80068ae:	9d00      	ldr	r5, [sp, #0]
 80068b0:	930c      	str	r3, [sp, #48]	; 0x30
 80068b2:	ec41 0b18 	vmov	d8, r0, r1
 80068b6:	4639      	mov	r1, r7
 80068b8:	4630      	mov	r0, r6
 80068ba:	f7fa f94d 	bl	8000b58 <__aeabi_d2iz>
 80068be:	9011      	str	r0, [sp, #68]	; 0x44
 80068c0:	f7f9 fe30 	bl	8000524 <__aeabi_i2d>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	4630      	mov	r0, r6
 80068ca:	4639      	mov	r1, r7
 80068cc:	f7f9 fcdc 	bl	8000288 <__aeabi_dsub>
 80068d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068d2:	3330      	adds	r3, #48	; 0x30
 80068d4:	f805 3b01 	strb.w	r3, [r5], #1
 80068d8:	9b02      	ldr	r3, [sp, #8]
 80068da:	429d      	cmp	r5, r3
 80068dc:	4606      	mov	r6, r0
 80068de:	460f      	mov	r7, r1
 80068e0:	f04f 0200 	mov.w	r2, #0
 80068e4:	d134      	bne.n	8006950 <_dtoa_r+0x660>
 80068e6:	4b19      	ldr	r3, [pc, #100]	; (800694c <_dtoa_r+0x65c>)
 80068e8:	ec51 0b18 	vmov	r0, r1, d8
 80068ec:	f7f9 fcce 	bl	800028c <__adddf3>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4630      	mov	r0, r6
 80068f6:	4639      	mov	r1, r7
 80068f8:	f7fa f90e 	bl	8000b18 <__aeabi_dcmpgt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	d175      	bne.n	80069ec <_dtoa_r+0x6fc>
 8006900:	ec53 2b18 	vmov	r2, r3, d8
 8006904:	4911      	ldr	r1, [pc, #68]	; (800694c <_dtoa_r+0x65c>)
 8006906:	2000      	movs	r0, #0
 8006908:	f7f9 fcbe 	bl	8000288 <__aeabi_dsub>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4630      	mov	r0, r6
 8006912:	4639      	mov	r1, r7
 8006914:	f7fa f8e2 	bl	8000adc <__aeabi_dcmplt>
 8006918:	2800      	cmp	r0, #0
 800691a:	f43f af27 	beq.w	800676c <_dtoa_r+0x47c>
 800691e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006920:	1e6b      	subs	r3, r5, #1
 8006922:	930c      	str	r3, [sp, #48]	; 0x30
 8006924:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006928:	2b30      	cmp	r3, #48	; 0x30
 800692a:	d0f8      	beq.n	800691e <_dtoa_r+0x62e>
 800692c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006930:	e04a      	b.n	80069c8 <_dtoa_r+0x6d8>
 8006932:	bf00      	nop
 8006934:	08008448 	.word	0x08008448
 8006938:	08008420 	.word	0x08008420
 800693c:	3ff00000 	.word	0x3ff00000
 8006940:	40240000 	.word	0x40240000
 8006944:	401c0000 	.word	0x401c0000
 8006948:	40140000 	.word	0x40140000
 800694c:	3fe00000 	.word	0x3fe00000
 8006950:	4baf      	ldr	r3, [pc, #700]	; (8006c10 <_dtoa_r+0x920>)
 8006952:	f7f9 fe51 	bl	80005f8 <__aeabi_dmul>
 8006956:	4606      	mov	r6, r0
 8006958:	460f      	mov	r7, r1
 800695a:	e7ac      	b.n	80068b6 <_dtoa_r+0x5c6>
 800695c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006960:	9d00      	ldr	r5, [sp, #0]
 8006962:	4642      	mov	r2, r8
 8006964:	464b      	mov	r3, r9
 8006966:	4630      	mov	r0, r6
 8006968:	4639      	mov	r1, r7
 800696a:	f7f9 ff6f 	bl	800084c <__aeabi_ddiv>
 800696e:	f7fa f8f3 	bl	8000b58 <__aeabi_d2iz>
 8006972:	9002      	str	r0, [sp, #8]
 8006974:	f7f9 fdd6 	bl	8000524 <__aeabi_i2d>
 8006978:	4642      	mov	r2, r8
 800697a:	464b      	mov	r3, r9
 800697c:	f7f9 fe3c 	bl	80005f8 <__aeabi_dmul>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4630      	mov	r0, r6
 8006986:	4639      	mov	r1, r7
 8006988:	f7f9 fc7e 	bl	8000288 <__aeabi_dsub>
 800698c:	9e02      	ldr	r6, [sp, #8]
 800698e:	9f01      	ldr	r7, [sp, #4]
 8006990:	3630      	adds	r6, #48	; 0x30
 8006992:	f805 6b01 	strb.w	r6, [r5], #1
 8006996:	9e00      	ldr	r6, [sp, #0]
 8006998:	1bae      	subs	r6, r5, r6
 800699a:	42b7      	cmp	r7, r6
 800699c:	4602      	mov	r2, r0
 800699e:	460b      	mov	r3, r1
 80069a0:	d137      	bne.n	8006a12 <_dtoa_r+0x722>
 80069a2:	f7f9 fc73 	bl	800028c <__adddf3>
 80069a6:	4642      	mov	r2, r8
 80069a8:	464b      	mov	r3, r9
 80069aa:	4606      	mov	r6, r0
 80069ac:	460f      	mov	r7, r1
 80069ae:	f7fa f8b3 	bl	8000b18 <__aeabi_dcmpgt>
 80069b2:	b9c8      	cbnz	r0, 80069e8 <_dtoa_r+0x6f8>
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	4630      	mov	r0, r6
 80069ba:	4639      	mov	r1, r7
 80069bc:	f7fa f884 	bl	8000ac8 <__aeabi_dcmpeq>
 80069c0:	b110      	cbz	r0, 80069c8 <_dtoa_r+0x6d8>
 80069c2:	9b02      	ldr	r3, [sp, #8]
 80069c4:	07d9      	lsls	r1, r3, #31
 80069c6:	d40f      	bmi.n	80069e8 <_dtoa_r+0x6f8>
 80069c8:	4620      	mov	r0, r4
 80069ca:	4659      	mov	r1, fp
 80069cc:	f000 fac8 	bl	8006f60 <_Bfree>
 80069d0:	2300      	movs	r3, #0
 80069d2:	702b      	strb	r3, [r5, #0]
 80069d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069d6:	f10a 0001 	add.w	r0, sl, #1
 80069da:	6018      	str	r0, [r3, #0]
 80069dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f43f acd8 	beq.w	8006394 <_dtoa_r+0xa4>
 80069e4:	601d      	str	r5, [r3, #0]
 80069e6:	e4d5      	b.n	8006394 <_dtoa_r+0xa4>
 80069e8:	f8cd a01c 	str.w	sl, [sp, #28]
 80069ec:	462b      	mov	r3, r5
 80069ee:	461d      	mov	r5, r3
 80069f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069f4:	2a39      	cmp	r2, #57	; 0x39
 80069f6:	d108      	bne.n	8006a0a <_dtoa_r+0x71a>
 80069f8:	9a00      	ldr	r2, [sp, #0]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d1f7      	bne.n	80069ee <_dtoa_r+0x6fe>
 80069fe:	9a07      	ldr	r2, [sp, #28]
 8006a00:	9900      	ldr	r1, [sp, #0]
 8006a02:	3201      	adds	r2, #1
 8006a04:	9207      	str	r2, [sp, #28]
 8006a06:	2230      	movs	r2, #48	; 0x30
 8006a08:	700a      	strb	r2, [r1, #0]
 8006a0a:	781a      	ldrb	r2, [r3, #0]
 8006a0c:	3201      	adds	r2, #1
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	e78c      	b.n	800692c <_dtoa_r+0x63c>
 8006a12:	4b7f      	ldr	r3, [pc, #508]	; (8006c10 <_dtoa_r+0x920>)
 8006a14:	2200      	movs	r2, #0
 8006a16:	f7f9 fdef 	bl	80005f8 <__aeabi_dmul>
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460f      	mov	r7, r1
 8006a22:	f7fa f851 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	d09b      	beq.n	8006962 <_dtoa_r+0x672>
 8006a2a:	e7cd      	b.n	80069c8 <_dtoa_r+0x6d8>
 8006a2c:	9a08      	ldr	r2, [sp, #32]
 8006a2e:	2a00      	cmp	r2, #0
 8006a30:	f000 80c4 	beq.w	8006bbc <_dtoa_r+0x8cc>
 8006a34:	9a05      	ldr	r2, [sp, #20]
 8006a36:	2a01      	cmp	r2, #1
 8006a38:	f300 80a8 	bgt.w	8006b8c <_dtoa_r+0x89c>
 8006a3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006a3e:	2a00      	cmp	r2, #0
 8006a40:	f000 80a0 	beq.w	8006b84 <_dtoa_r+0x894>
 8006a44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a48:	9e06      	ldr	r6, [sp, #24]
 8006a4a:	4645      	mov	r5, r8
 8006a4c:	9a04      	ldr	r2, [sp, #16]
 8006a4e:	2101      	movs	r1, #1
 8006a50:	441a      	add	r2, r3
 8006a52:	4620      	mov	r0, r4
 8006a54:	4498      	add	r8, r3
 8006a56:	9204      	str	r2, [sp, #16]
 8006a58:	f000 fb3e 	bl	80070d8 <__i2b>
 8006a5c:	4607      	mov	r7, r0
 8006a5e:	2d00      	cmp	r5, #0
 8006a60:	dd0b      	ble.n	8006a7a <_dtoa_r+0x78a>
 8006a62:	9b04      	ldr	r3, [sp, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	dd08      	ble.n	8006a7a <_dtoa_r+0x78a>
 8006a68:	42ab      	cmp	r3, r5
 8006a6a:	9a04      	ldr	r2, [sp, #16]
 8006a6c:	bfa8      	it	ge
 8006a6e:	462b      	movge	r3, r5
 8006a70:	eba8 0803 	sub.w	r8, r8, r3
 8006a74:	1aed      	subs	r5, r5, r3
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	9b06      	ldr	r3, [sp, #24]
 8006a7c:	b1fb      	cbz	r3, 8006abe <_dtoa_r+0x7ce>
 8006a7e:	9b08      	ldr	r3, [sp, #32]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	f000 809f 	beq.w	8006bc4 <_dtoa_r+0x8d4>
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	dd11      	ble.n	8006aae <_dtoa_r+0x7be>
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	4632      	mov	r2, r6
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f000 fbde 	bl	8007250 <__pow5mult>
 8006a94:	465a      	mov	r2, fp
 8006a96:	4601      	mov	r1, r0
 8006a98:	4607      	mov	r7, r0
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f000 fb32 	bl	8007104 <__multiply>
 8006aa0:	4659      	mov	r1, fp
 8006aa2:	9007      	str	r0, [sp, #28]
 8006aa4:	4620      	mov	r0, r4
 8006aa6:	f000 fa5b 	bl	8006f60 <_Bfree>
 8006aaa:	9b07      	ldr	r3, [sp, #28]
 8006aac:	469b      	mov	fp, r3
 8006aae:	9b06      	ldr	r3, [sp, #24]
 8006ab0:	1b9a      	subs	r2, r3, r6
 8006ab2:	d004      	beq.n	8006abe <_dtoa_r+0x7ce>
 8006ab4:	4659      	mov	r1, fp
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 fbca 	bl	8007250 <__pow5mult>
 8006abc:	4683      	mov	fp, r0
 8006abe:	2101      	movs	r1, #1
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	f000 fb09 	bl	80070d8 <__i2b>
 8006ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	4606      	mov	r6, r0
 8006acc:	dd7c      	ble.n	8006bc8 <_dtoa_r+0x8d8>
 8006ace:	461a      	mov	r2, r3
 8006ad0:	4601      	mov	r1, r0
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f000 fbbc 	bl	8007250 <__pow5mult>
 8006ad8:	9b05      	ldr	r3, [sp, #20]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	4606      	mov	r6, r0
 8006ade:	dd76      	ble.n	8006bce <_dtoa_r+0x8de>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9306      	str	r3, [sp, #24]
 8006ae4:	6933      	ldr	r3, [r6, #16]
 8006ae6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006aea:	6918      	ldr	r0, [r3, #16]
 8006aec:	f000 faa4 	bl	8007038 <__hi0bits>
 8006af0:	f1c0 0020 	rsb	r0, r0, #32
 8006af4:	9b04      	ldr	r3, [sp, #16]
 8006af6:	4418      	add	r0, r3
 8006af8:	f010 001f 	ands.w	r0, r0, #31
 8006afc:	f000 8086 	beq.w	8006c0c <_dtoa_r+0x91c>
 8006b00:	f1c0 0320 	rsb	r3, r0, #32
 8006b04:	2b04      	cmp	r3, #4
 8006b06:	dd7f      	ble.n	8006c08 <_dtoa_r+0x918>
 8006b08:	f1c0 001c 	rsb	r0, r0, #28
 8006b0c:	9b04      	ldr	r3, [sp, #16]
 8006b0e:	4403      	add	r3, r0
 8006b10:	4480      	add	r8, r0
 8006b12:	4405      	add	r5, r0
 8006b14:	9304      	str	r3, [sp, #16]
 8006b16:	f1b8 0f00 	cmp.w	r8, #0
 8006b1a:	dd05      	ble.n	8006b28 <_dtoa_r+0x838>
 8006b1c:	4659      	mov	r1, fp
 8006b1e:	4642      	mov	r2, r8
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 fbef 	bl	8007304 <__lshift>
 8006b26:	4683      	mov	fp, r0
 8006b28:	9b04      	ldr	r3, [sp, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dd05      	ble.n	8006b3a <_dtoa_r+0x84a>
 8006b2e:	4631      	mov	r1, r6
 8006b30:	461a      	mov	r2, r3
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 fbe6 	bl	8007304 <__lshift>
 8006b38:	4606      	mov	r6, r0
 8006b3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d069      	beq.n	8006c14 <_dtoa_r+0x924>
 8006b40:	4631      	mov	r1, r6
 8006b42:	4658      	mov	r0, fp
 8006b44:	f000 fc4a 	bl	80073dc <__mcmp>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	da63      	bge.n	8006c14 <_dtoa_r+0x924>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4659      	mov	r1, fp
 8006b50:	220a      	movs	r2, #10
 8006b52:	4620      	mov	r0, r4
 8006b54:	f000 fa26 	bl	8006fa4 <__multadd>
 8006b58:	9b08      	ldr	r3, [sp, #32]
 8006b5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b5e:	4683      	mov	fp, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 818f 	beq.w	8006e84 <_dtoa_r+0xb94>
 8006b66:	4639      	mov	r1, r7
 8006b68:	2300      	movs	r3, #0
 8006b6a:	220a      	movs	r2, #10
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 fa19 	bl	8006fa4 <__multadd>
 8006b72:	f1b9 0f00 	cmp.w	r9, #0
 8006b76:	4607      	mov	r7, r0
 8006b78:	f300 808e 	bgt.w	8006c98 <_dtoa_r+0x9a8>
 8006b7c:	9b05      	ldr	r3, [sp, #20]
 8006b7e:	2b02      	cmp	r3, #2
 8006b80:	dc50      	bgt.n	8006c24 <_dtoa_r+0x934>
 8006b82:	e089      	b.n	8006c98 <_dtoa_r+0x9a8>
 8006b84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b8a:	e75d      	b.n	8006a48 <_dtoa_r+0x758>
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	1e5e      	subs	r6, r3, #1
 8006b90:	9b06      	ldr	r3, [sp, #24]
 8006b92:	42b3      	cmp	r3, r6
 8006b94:	bfbf      	itttt	lt
 8006b96:	9b06      	ldrlt	r3, [sp, #24]
 8006b98:	9606      	strlt	r6, [sp, #24]
 8006b9a:	1af2      	sublt	r2, r6, r3
 8006b9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006b9e:	bfb6      	itet	lt
 8006ba0:	189b      	addlt	r3, r3, r2
 8006ba2:	1b9e      	subge	r6, r3, r6
 8006ba4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8006ba6:	9b01      	ldr	r3, [sp, #4]
 8006ba8:	bfb8      	it	lt
 8006baa:	2600      	movlt	r6, #0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	bfb5      	itete	lt
 8006bb0:	eba8 0503 	sublt.w	r5, r8, r3
 8006bb4:	9b01      	ldrge	r3, [sp, #4]
 8006bb6:	2300      	movlt	r3, #0
 8006bb8:	4645      	movge	r5, r8
 8006bba:	e747      	b.n	8006a4c <_dtoa_r+0x75c>
 8006bbc:	9e06      	ldr	r6, [sp, #24]
 8006bbe:	9f08      	ldr	r7, [sp, #32]
 8006bc0:	4645      	mov	r5, r8
 8006bc2:	e74c      	b.n	8006a5e <_dtoa_r+0x76e>
 8006bc4:	9a06      	ldr	r2, [sp, #24]
 8006bc6:	e775      	b.n	8006ab4 <_dtoa_r+0x7c4>
 8006bc8:	9b05      	ldr	r3, [sp, #20]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	dc18      	bgt.n	8006c00 <_dtoa_r+0x910>
 8006bce:	9b02      	ldr	r3, [sp, #8]
 8006bd0:	b9b3      	cbnz	r3, 8006c00 <_dtoa_r+0x910>
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006bd8:	b9a3      	cbnz	r3, 8006c04 <_dtoa_r+0x914>
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006be0:	0d1b      	lsrs	r3, r3, #20
 8006be2:	051b      	lsls	r3, r3, #20
 8006be4:	b12b      	cbz	r3, 8006bf2 <_dtoa_r+0x902>
 8006be6:	9b04      	ldr	r3, [sp, #16]
 8006be8:	3301      	adds	r3, #1
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	f108 0801 	add.w	r8, r8, #1
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	9306      	str	r3, [sp, #24]
 8006bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f47f af74 	bne.w	8006ae4 <_dtoa_r+0x7f4>
 8006bfc:	2001      	movs	r0, #1
 8006bfe:	e779      	b.n	8006af4 <_dtoa_r+0x804>
 8006c00:	2300      	movs	r3, #0
 8006c02:	e7f6      	b.n	8006bf2 <_dtoa_r+0x902>
 8006c04:	9b02      	ldr	r3, [sp, #8]
 8006c06:	e7f4      	b.n	8006bf2 <_dtoa_r+0x902>
 8006c08:	d085      	beq.n	8006b16 <_dtoa_r+0x826>
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	301c      	adds	r0, #28
 8006c0e:	e77d      	b.n	8006b0c <_dtoa_r+0x81c>
 8006c10:	40240000 	.word	0x40240000
 8006c14:	9b01      	ldr	r3, [sp, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	dc38      	bgt.n	8006c8c <_dtoa_r+0x99c>
 8006c1a:	9b05      	ldr	r3, [sp, #20]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	dd35      	ble.n	8006c8c <_dtoa_r+0x99c>
 8006c20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c24:	f1b9 0f00 	cmp.w	r9, #0
 8006c28:	d10d      	bne.n	8006c46 <_dtoa_r+0x956>
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	464b      	mov	r3, r9
 8006c2e:	2205      	movs	r2, #5
 8006c30:	4620      	mov	r0, r4
 8006c32:	f000 f9b7 	bl	8006fa4 <__multadd>
 8006c36:	4601      	mov	r1, r0
 8006c38:	4606      	mov	r6, r0
 8006c3a:	4658      	mov	r0, fp
 8006c3c:	f000 fbce 	bl	80073dc <__mcmp>
 8006c40:	2800      	cmp	r0, #0
 8006c42:	f73f adbd 	bgt.w	80067c0 <_dtoa_r+0x4d0>
 8006c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c48:	9d00      	ldr	r5, [sp, #0]
 8006c4a:	ea6f 0a03 	mvn.w	sl, r3
 8006c4e:	f04f 0800 	mov.w	r8, #0
 8006c52:	4631      	mov	r1, r6
 8006c54:	4620      	mov	r0, r4
 8006c56:	f000 f983 	bl	8006f60 <_Bfree>
 8006c5a:	2f00      	cmp	r7, #0
 8006c5c:	f43f aeb4 	beq.w	80069c8 <_dtoa_r+0x6d8>
 8006c60:	f1b8 0f00 	cmp.w	r8, #0
 8006c64:	d005      	beq.n	8006c72 <_dtoa_r+0x982>
 8006c66:	45b8      	cmp	r8, r7
 8006c68:	d003      	beq.n	8006c72 <_dtoa_r+0x982>
 8006c6a:	4641      	mov	r1, r8
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	f000 f977 	bl	8006f60 <_Bfree>
 8006c72:	4639      	mov	r1, r7
 8006c74:	4620      	mov	r0, r4
 8006c76:	f000 f973 	bl	8006f60 <_Bfree>
 8006c7a:	e6a5      	b.n	80069c8 <_dtoa_r+0x6d8>
 8006c7c:	2600      	movs	r6, #0
 8006c7e:	4637      	mov	r7, r6
 8006c80:	e7e1      	b.n	8006c46 <_dtoa_r+0x956>
 8006c82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006c84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006c88:	4637      	mov	r7, r6
 8006c8a:	e599      	b.n	80067c0 <_dtoa_r+0x4d0>
 8006c8c:	9b08      	ldr	r3, [sp, #32]
 8006c8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	f000 80fd 	beq.w	8006e92 <_dtoa_r+0xba2>
 8006c98:	2d00      	cmp	r5, #0
 8006c9a:	dd05      	ble.n	8006ca8 <_dtoa_r+0x9b8>
 8006c9c:	4639      	mov	r1, r7
 8006c9e:	462a      	mov	r2, r5
 8006ca0:	4620      	mov	r0, r4
 8006ca2:	f000 fb2f 	bl	8007304 <__lshift>
 8006ca6:	4607      	mov	r7, r0
 8006ca8:	9b06      	ldr	r3, [sp, #24]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d05c      	beq.n	8006d68 <_dtoa_r+0xa78>
 8006cae:	6879      	ldr	r1, [r7, #4]
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f000 f915 	bl	8006ee0 <_Balloc>
 8006cb6:	4605      	mov	r5, r0
 8006cb8:	b928      	cbnz	r0, 8006cc6 <_dtoa_r+0x9d6>
 8006cba:	4b80      	ldr	r3, [pc, #512]	; (8006ebc <_dtoa_r+0xbcc>)
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006cc2:	f7ff bb2e 	b.w	8006322 <_dtoa_r+0x32>
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	3202      	adds	r2, #2
 8006cca:	0092      	lsls	r2, r2, #2
 8006ccc:	f107 010c 	add.w	r1, r7, #12
 8006cd0:	300c      	adds	r0, #12
 8006cd2:	f7fe fe01 	bl	80058d8 <memcpy>
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 fb12 	bl	8007304 <__lshift>
 8006ce0:	9b00      	ldr	r3, [sp, #0]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	9b00      	ldr	r3, [sp, #0]
 8006ce8:	444b      	add	r3, r9
 8006cea:	9307      	str	r3, [sp, #28]
 8006cec:	9b02      	ldr	r3, [sp, #8]
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	46b8      	mov	r8, r7
 8006cf4:	9306      	str	r3, [sp, #24]
 8006cf6:	4607      	mov	r7, r0
 8006cf8:	9b01      	ldr	r3, [sp, #4]
 8006cfa:	4631      	mov	r1, r6
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	4658      	mov	r0, fp
 8006d00:	9302      	str	r3, [sp, #8]
 8006d02:	f7ff fa69 	bl	80061d8 <quorem>
 8006d06:	4603      	mov	r3, r0
 8006d08:	3330      	adds	r3, #48	; 0x30
 8006d0a:	9004      	str	r0, [sp, #16]
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	4658      	mov	r0, fp
 8006d10:	9308      	str	r3, [sp, #32]
 8006d12:	f000 fb63 	bl	80073dc <__mcmp>
 8006d16:	463a      	mov	r2, r7
 8006d18:	4681      	mov	r9, r0
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	f000 fb79 	bl	8007414 <__mdiff>
 8006d22:	68c2      	ldr	r2, [r0, #12]
 8006d24:	9b08      	ldr	r3, [sp, #32]
 8006d26:	4605      	mov	r5, r0
 8006d28:	bb02      	cbnz	r2, 8006d6c <_dtoa_r+0xa7c>
 8006d2a:	4601      	mov	r1, r0
 8006d2c:	4658      	mov	r0, fp
 8006d2e:	f000 fb55 	bl	80073dc <__mcmp>
 8006d32:	9b08      	ldr	r3, [sp, #32]
 8006d34:	4602      	mov	r2, r0
 8006d36:	4629      	mov	r1, r5
 8006d38:	4620      	mov	r0, r4
 8006d3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006d3e:	f000 f90f 	bl	8006f60 <_Bfree>
 8006d42:	9b05      	ldr	r3, [sp, #20]
 8006d44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d46:	9d01      	ldr	r5, [sp, #4]
 8006d48:	ea43 0102 	orr.w	r1, r3, r2
 8006d4c:	9b06      	ldr	r3, [sp, #24]
 8006d4e:	430b      	orrs	r3, r1
 8006d50:	9b08      	ldr	r3, [sp, #32]
 8006d52:	d10d      	bne.n	8006d70 <_dtoa_r+0xa80>
 8006d54:	2b39      	cmp	r3, #57	; 0x39
 8006d56:	d029      	beq.n	8006dac <_dtoa_r+0xabc>
 8006d58:	f1b9 0f00 	cmp.w	r9, #0
 8006d5c:	dd01      	ble.n	8006d62 <_dtoa_r+0xa72>
 8006d5e:	9b04      	ldr	r3, [sp, #16]
 8006d60:	3331      	adds	r3, #49	; 0x31
 8006d62:	9a02      	ldr	r2, [sp, #8]
 8006d64:	7013      	strb	r3, [r2, #0]
 8006d66:	e774      	b.n	8006c52 <_dtoa_r+0x962>
 8006d68:	4638      	mov	r0, r7
 8006d6a:	e7b9      	b.n	8006ce0 <_dtoa_r+0x9f0>
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	e7e2      	b.n	8006d36 <_dtoa_r+0xa46>
 8006d70:	f1b9 0f00 	cmp.w	r9, #0
 8006d74:	db06      	blt.n	8006d84 <_dtoa_r+0xa94>
 8006d76:	9905      	ldr	r1, [sp, #20]
 8006d78:	ea41 0909 	orr.w	r9, r1, r9
 8006d7c:	9906      	ldr	r1, [sp, #24]
 8006d7e:	ea59 0101 	orrs.w	r1, r9, r1
 8006d82:	d120      	bne.n	8006dc6 <_dtoa_r+0xad6>
 8006d84:	2a00      	cmp	r2, #0
 8006d86:	ddec      	ble.n	8006d62 <_dtoa_r+0xa72>
 8006d88:	4659      	mov	r1, fp
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	f000 fab8 	bl	8007304 <__lshift>
 8006d94:	4631      	mov	r1, r6
 8006d96:	4683      	mov	fp, r0
 8006d98:	f000 fb20 	bl	80073dc <__mcmp>
 8006d9c:	2800      	cmp	r0, #0
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	dc02      	bgt.n	8006da8 <_dtoa_r+0xab8>
 8006da2:	d1de      	bne.n	8006d62 <_dtoa_r+0xa72>
 8006da4:	07da      	lsls	r2, r3, #31
 8006da6:	d5dc      	bpl.n	8006d62 <_dtoa_r+0xa72>
 8006da8:	2b39      	cmp	r3, #57	; 0x39
 8006daa:	d1d8      	bne.n	8006d5e <_dtoa_r+0xa6e>
 8006dac:	9a02      	ldr	r2, [sp, #8]
 8006dae:	2339      	movs	r3, #57	; 0x39
 8006db0:	7013      	strb	r3, [r2, #0]
 8006db2:	462b      	mov	r3, r5
 8006db4:	461d      	mov	r5, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006dbc:	2a39      	cmp	r2, #57	; 0x39
 8006dbe:	d050      	beq.n	8006e62 <_dtoa_r+0xb72>
 8006dc0:	3201      	adds	r2, #1
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	e745      	b.n	8006c52 <_dtoa_r+0x962>
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	dd03      	ble.n	8006dd2 <_dtoa_r+0xae2>
 8006dca:	2b39      	cmp	r3, #57	; 0x39
 8006dcc:	d0ee      	beq.n	8006dac <_dtoa_r+0xabc>
 8006dce:	3301      	adds	r3, #1
 8006dd0:	e7c7      	b.n	8006d62 <_dtoa_r+0xa72>
 8006dd2:	9a01      	ldr	r2, [sp, #4]
 8006dd4:	9907      	ldr	r1, [sp, #28]
 8006dd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006dda:	428a      	cmp	r2, r1
 8006ddc:	d02a      	beq.n	8006e34 <_dtoa_r+0xb44>
 8006dde:	4659      	mov	r1, fp
 8006de0:	2300      	movs	r3, #0
 8006de2:	220a      	movs	r2, #10
 8006de4:	4620      	mov	r0, r4
 8006de6:	f000 f8dd 	bl	8006fa4 <__multadd>
 8006dea:	45b8      	cmp	r8, r7
 8006dec:	4683      	mov	fp, r0
 8006dee:	f04f 0300 	mov.w	r3, #0
 8006df2:	f04f 020a 	mov.w	r2, #10
 8006df6:	4641      	mov	r1, r8
 8006df8:	4620      	mov	r0, r4
 8006dfa:	d107      	bne.n	8006e0c <_dtoa_r+0xb1c>
 8006dfc:	f000 f8d2 	bl	8006fa4 <__multadd>
 8006e00:	4680      	mov	r8, r0
 8006e02:	4607      	mov	r7, r0
 8006e04:	9b01      	ldr	r3, [sp, #4]
 8006e06:	3301      	adds	r3, #1
 8006e08:	9301      	str	r3, [sp, #4]
 8006e0a:	e775      	b.n	8006cf8 <_dtoa_r+0xa08>
 8006e0c:	f000 f8ca 	bl	8006fa4 <__multadd>
 8006e10:	4639      	mov	r1, r7
 8006e12:	4680      	mov	r8, r0
 8006e14:	2300      	movs	r3, #0
 8006e16:	220a      	movs	r2, #10
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 f8c3 	bl	8006fa4 <__multadd>
 8006e1e:	4607      	mov	r7, r0
 8006e20:	e7f0      	b.n	8006e04 <_dtoa_r+0xb14>
 8006e22:	f1b9 0f00 	cmp.w	r9, #0
 8006e26:	9a00      	ldr	r2, [sp, #0]
 8006e28:	bfcc      	ite	gt
 8006e2a:	464d      	movgt	r5, r9
 8006e2c:	2501      	movle	r5, #1
 8006e2e:	4415      	add	r5, r2
 8006e30:	f04f 0800 	mov.w	r8, #0
 8006e34:	4659      	mov	r1, fp
 8006e36:	2201      	movs	r2, #1
 8006e38:	4620      	mov	r0, r4
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	f000 fa62 	bl	8007304 <__lshift>
 8006e40:	4631      	mov	r1, r6
 8006e42:	4683      	mov	fp, r0
 8006e44:	f000 faca 	bl	80073dc <__mcmp>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	dcb2      	bgt.n	8006db2 <_dtoa_r+0xac2>
 8006e4c:	d102      	bne.n	8006e54 <_dtoa_r+0xb64>
 8006e4e:	9b01      	ldr	r3, [sp, #4]
 8006e50:	07db      	lsls	r3, r3, #31
 8006e52:	d4ae      	bmi.n	8006db2 <_dtoa_r+0xac2>
 8006e54:	462b      	mov	r3, r5
 8006e56:	461d      	mov	r5, r3
 8006e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e5c:	2a30      	cmp	r2, #48	; 0x30
 8006e5e:	d0fa      	beq.n	8006e56 <_dtoa_r+0xb66>
 8006e60:	e6f7      	b.n	8006c52 <_dtoa_r+0x962>
 8006e62:	9a00      	ldr	r2, [sp, #0]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d1a5      	bne.n	8006db4 <_dtoa_r+0xac4>
 8006e68:	f10a 0a01 	add.w	sl, sl, #1
 8006e6c:	2331      	movs	r3, #49	; 0x31
 8006e6e:	e779      	b.n	8006d64 <_dtoa_r+0xa74>
 8006e70:	4b13      	ldr	r3, [pc, #76]	; (8006ec0 <_dtoa_r+0xbd0>)
 8006e72:	f7ff baaf 	b.w	80063d4 <_dtoa_r+0xe4>
 8006e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f47f aa86 	bne.w	800638a <_dtoa_r+0x9a>
 8006e7e:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <_dtoa_r+0xbd4>)
 8006e80:	f7ff baa8 	b.w	80063d4 <_dtoa_r+0xe4>
 8006e84:	f1b9 0f00 	cmp.w	r9, #0
 8006e88:	dc03      	bgt.n	8006e92 <_dtoa_r+0xba2>
 8006e8a:	9b05      	ldr	r3, [sp, #20]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	f73f aec9 	bgt.w	8006c24 <_dtoa_r+0x934>
 8006e92:	9d00      	ldr	r5, [sp, #0]
 8006e94:	4631      	mov	r1, r6
 8006e96:	4658      	mov	r0, fp
 8006e98:	f7ff f99e 	bl	80061d8 <quorem>
 8006e9c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006ea0:	f805 3b01 	strb.w	r3, [r5], #1
 8006ea4:	9a00      	ldr	r2, [sp, #0]
 8006ea6:	1aaa      	subs	r2, r5, r2
 8006ea8:	4591      	cmp	r9, r2
 8006eaa:	ddba      	ble.n	8006e22 <_dtoa_r+0xb32>
 8006eac:	4659      	mov	r1, fp
 8006eae:	2300      	movs	r3, #0
 8006eb0:	220a      	movs	r2, #10
 8006eb2:	4620      	mov	r0, r4
 8006eb4:	f000 f876 	bl	8006fa4 <__multadd>
 8006eb8:	4683      	mov	fp, r0
 8006eba:	e7eb      	b.n	8006e94 <_dtoa_r+0xba4>
 8006ebc:	080083af 	.word	0x080083af
 8006ec0:	08008308 	.word	0x08008308
 8006ec4:	0800832c 	.word	0x0800832c

08006ec8 <_localeconv_r>:
 8006ec8:	4800      	ldr	r0, [pc, #0]	; (8006ecc <_localeconv_r+0x4>)
 8006eca:	4770      	bx	lr
 8006ecc:	20000168 	.word	0x20000168

08006ed0 <malloc>:
 8006ed0:	4b02      	ldr	r3, [pc, #8]	; (8006edc <malloc+0xc>)
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	f000 bbe1 	b.w	800769c <_malloc_r>
 8006eda:	bf00      	nop
 8006edc:	20000014 	.word	0x20000014

08006ee0 <_Balloc>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ee4:	4604      	mov	r4, r0
 8006ee6:	460d      	mov	r5, r1
 8006ee8:	b976      	cbnz	r6, 8006f08 <_Balloc+0x28>
 8006eea:	2010      	movs	r0, #16
 8006eec:	f7ff fff0 	bl	8006ed0 <malloc>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ef4:	b920      	cbnz	r0, 8006f00 <_Balloc+0x20>
 8006ef6:	4b18      	ldr	r3, [pc, #96]	; (8006f58 <_Balloc+0x78>)
 8006ef8:	4818      	ldr	r0, [pc, #96]	; (8006f5c <_Balloc+0x7c>)
 8006efa:	2166      	movs	r1, #102	; 0x66
 8006efc:	f000 fc38 	bl	8007770 <__assert_func>
 8006f00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f04:	6006      	str	r6, [r0, #0]
 8006f06:	60c6      	str	r6, [r0, #12]
 8006f08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f0a:	68f3      	ldr	r3, [r6, #12]
 8006f0c:	b183      	cbz	r3, 8006f30 <_Balloc+0x50>
 8006f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f16:	b9b8      	cbnz	r0, 8006f48 <_Balloc+0x68>
 8006f18:	2101      	movs	r1, #1
 8006f1a:	fa01 f605 	lsl.w	r6, r1, r5
 8006f1e:	1d72      	adds	r2, r6, #5
 8006f20:	0092      	lsls	r2, r2, #2
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 fb5a 	bl	80075dc <_calloc_r>
 8006f28:	b160      	cbz	r0, 8006f44 <_Balloc+0x64>
 8006f2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f2e:	e00e      	b.n	8006f4e <_Balloc+0x6e>
 8006f30:	2221      	movs	r2, #33	; 0x21
 8006f32:	2104      	movs	r1, #4
 8006f34:	4620      	mov	r0, r4
 8006f36:	f000 fb51 	bl	80075dc <_calloc_r>
 8006f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f3c:	60f0      	str	r0, [r6, #12]
 8006f3e:	68db      	ldr	r3, [r3, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e4      	bne.n	8006f0e <_Balloc+0x2e>
 8006f44:	2000      	movs	r0, #0
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	6802      	ldr	r2, [r0, #0]
 8006f4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f54:	e7f7      	b.n	8006f46 <_Balloc+0x66>
 8006f56:	bf00      	nop
 8006f58:	08008339 	.word	0x08008339
 8006f5c:	080083c0 	.word	0x080083c0

08006f60 <_Bfree>:
 8006f60:	b570      	push	{r4, r5, r6, lr}
 8006f62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f64:	4605      	mov	r5, r0
 8006f66:	460c      	mov	r4, r1
 8006f68:	b976      	cbnz	r6, 8006f88 <_Bfree+0x28>
 8006f6a:	2010      	movs	r0, #16
 8006f6c:	f7ff ffb0 	bl	8006ed0 <malloc>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6268      	str	r0, [r5, #36]	; 0x24
 8006f74:	b920      	cbnz	r0, 8006f80 <_Bfree+0x20>
 8006f76:	4b09      	ldr	r3, [pc, #36]	; (8006f9c <_Bfree+0x3c>)
 8006f78:	4809      	ldr	r0, [pc, #36]	; (8006fa0 <_Bfree+0x40>)
 8006f7a:	218a      	movs	r1, #138	; 0x8a
 8006f7c:	f000 fbf8 	bl	8007770 <__assert_func>
 8006f80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f84:	6006      	str	r6, [r0, #0]
 8006f86:	60c6      	str	r6, [r0, #12]
 8006f88:	b13c      	cbz	r4, 8006f9a <_Bfree+0x3a>
 8006f8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f8c:	6862      	ldr	r2, [r4, #4]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f94:	6021      	str	r1, [r4, #0]
 8006f96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f9a:	bd70      	pop	{r4, r5, r6, pc}
 8006f9c:	08008339 	.word	0x08008339
 8006fa0:	080083c0 	.word	0x080083c0

08006fa4 <__multadd>:
 8006fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fa8:	690e      	ldr	r6, [r1, #16]
 8006faa:	4607      	mov	r7, r0
 8006fac:	4698      	mov	r8, r3
 8006fae:	460c      	mov	r4, r1
 8006fb0:	f101 0014 	add.w	r0, r1, #20
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	6805      	ldr	r5, [r0, #0]
 8006fb8:	b2a9      	uxth	r1, r5
 8006fba:	fb02 8101 	mla	r1, r2, r1, r8
 8006fbe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006fc2:	0c2d      	lsrs	r5, r5, #16
 8006fc4:	fb02 c505 	mla	r5, r2, r5, ip
 8006fc8:	b289      	uxth	r1, r1
 8006fca:	3301      	adds	r3, #1
 8006fcc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006fd0:	429e      	cmp	r6, r3
 8006fd2:	f840 1b04 	str.w	r1, [r0], #4
 8006fd6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006fda:	dcec      	bgt.n	8006fb6 <__multadd+0x12>
 8006fdc:	f1b8 0f00 	cmp.w	r8, #0
 8006fe0:	d022      	beq.n	8007028 <__multadd+0x84>
 8006fe2:	68a3      	ldr	r3, [r4, #8]
 8006fe4:	42b3      	cmp	r3, r6
 8006fe6:	dc19      	bgt.n	800701c <__multadd+0x78>
 8006fe8:	6861      	ldr	r1, [r4, #4]
 8006fea:	4638      	mov	r0, r7
 8006fec:	3101      	adds	r1, #1
 8006fee:	f7ff ff77 	bl	8006ee0 <_Balloc>
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	b928      	cbnz	r0, 8007002 <__multadd+0x5e>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	4b0d      	ldr	r3, [pc, #52]	; (8007030 <__multadd+0x8c>)
 8006ffa:	480e      	ldr	r0, [pc, #56]	; (8007034 <__multadd+0x90>)
 8006ffc:	21b5      	movs	r1, #181	; 0xb5
 8006ffe:	f000 fbb7 	bl	8007770 <__assert_func>
 8007002:	6922      	ldr	r2, [r4, #16]
 8007004:	3202      	adds	r2, #2
 8007006:	f104 010c 	add.w	r1, r4, #12
 800700a:	0092      	lsls	r2, r2, #2
 800700c:	300c      	adds	r0, #12
 800700e:	f7fe fc63 	bl	80058d8 <memcpy>
 8007012:	4621      	mov	r1, r4
 8007014:	4638      	mov	r0, r7
 8007016:	f7ff ffa3 	bl	8006f60 <_Bfree>
 800701a:	462c      	mov	r4, r5
 800701c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8007020:	3601      	adds	r6, #1
 8007022:	f8c3 8014 	str.w	r8, [r3, #20]
 8007026:	6126      	str	r6, [r4, #16]
 8007028:	4620      	mov	r0, r4
 800702a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800702e:	bf00      	nop
 8007030:	080083af 	.word	0x080083af
 8007034:	080083c0 	.word	0x080083c0

08007038 <__hi0bits>:
 8007038:	0c03      	lsrs	r3, r0, #16
 800703a:	041b      	lsls	r3, r3, #16
 800703c:	b9d3      	cbnz	r3, 8007074 <__hi0bits+0x3c>
 800703e:	0400      	lsls	r0, r0, #16
 8007040:	2310      	movs	r3, #16
 8007042:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007046:	bf04      	itt	eq
 8007048:	0200      	lsleq	r0, r0, #8
 800704a:	3308      	addeq	r3, #8
 800704c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007050:	bf04      	itt	eq
 8007052:	0100      	lsleq	r0, r0, #4
 8007054:	3304      	addeq	r3, #4
 8007056:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800705a:	bf04      	itt	eq
 800705c:	0080      	lsleq	r0, r0, #2
 800705e:	3302      	addeq	r3, #2
 8007060:	2800      	cmp	r0, #0
 8007062:	db05      	blt.n	8007070 <__hi0bits+0x38>
 8007064:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007068:	f103 0301 	add.w	r3, r3, #1
 800706c:	bf08      	it	eq
 800706e:	2320      	moveq	r3, #32
 8007070:	4618      	mov	r0, r3
 8007072:	4770      	bx	lr
 8007074:	2300      	movs	r3, #0
 8007076:	e7e4      	b.n	8007042 <__hi0bits+0xa>

08007078 <__lo0bits>:
 8007078:	6803      	ldr	r3, [r0, #0]
 800707a:	f013 0207 	ands.w	r2, r3, #7
 800707e:	4601      	mov	r1, r0
 8007080:	d00b      	beq.n	800709a <__lo0bits+0x22>
 8007082:	07da      	lsls	r2, r3, #31
 8007084:	d424      	bmi.n	80070d0 <__lo0bits+0x58>
 8007086:	0798      	lsls	r0, r3, #30
 8007088:	bf49      	itett	mi
 800708a:	085b      	lsrmi	r3, r3, #1
 800708c:	089b      	lsrpl	r3, r3, #2
 800708e:	2001      	movmi	r0, #1
 8007090:	600b      	strmi	r3, [r1, #0]
 8007092:	bf5c      	itt	pl
 8007094:	600b      	strpl	r3, [r1, #0]
 8007096:	2002      	movpl	r0, #2
 8007098:	4770      	bx	lr
 800709a:	b298      	uxth	r0, r3
 800709c:	b9b0      	cbnz	r0, 80070cc <__lo0bits+0x54>
 800709e:	0c1b      	lsrs	r3, r3, #16
 80070a0:	2010      	movs	r0, #16
 80070a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80070a6:	bf04      	itt	eq
 80070a8:	0a1b      	lsreq	r3, r3, #8
 80070aa:	3008      	addeq	r0, #8
 80070ac:	071a      	lsls	r2, r3, #28
 80070ae:	bf04      	itt	eq
 80070b0:	091b      	lsreq	r3, r3, #4
 80070b2:	3004      	addeq	r0, #4
 80070b4:	079a      	lsls	r2, r3, #30
 80070b6:	bf04      	itt	eq
 80070b8:	089b      	lsreq	r3, r3, #2
 80070ba:	3002      	addeq	r0, #2
 80070bc:	07da      	lsls	r2, r3, #31
 80070be:	d403      	bmi.n	80070c8 <__lo0bits+0x50>
 80070c0:	085b      	lsrs	r3, r3, #1
 80070c2:	f100 0001 	add.w	r0, r0, #1
 80070c6:	d005      	beq.n	80070d4 <__lo0bits+0x5c>
 80070c8:	600b      	str	r3, [r1, #0]
 80070ca:	4770      	bx	lr
 80070cc:	4610      	mov	r0, r2
 80070ce:	e7e8      	b.n	80070a2 <__lo0bits+0x2a>
 80070d0:	2000      	movs	r0, #0
 80070d2:	4770      	bx	lr
 80070d4:	2020      	movs	r0, #32
 80070d6:	4770      	bx	lr

080070d8 <__i2b>:
 80070d8:	b510      	push	{r4, lr}
 80070da:	460c      	mov	r4, r1
 80070dc:	2101      	movs	r1, #1
 80070de:	f7ff feff 	bl	8006ee0 <_Balloc>
 80070e2:	4602      	mov	r2, r0
 80070e4:	b928      	cbnz	r0, 80070f2 <__i2b+0x1a>
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <__i2b+0x24>)
 80070e8:	4805      	ldr	r0, [pc, #20]	; (8007100 <__i2b+0x28>)
 80070ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80070ee:	f000 fb3f 	bl	8007770 <__assert_func>
 80070f2:	2301      	movs	r3, #1
 80070f4:	6144      	str	r4, [r0, #20]
 80070f6:	6103      	str	r3, [r0, #16]
 80070f8:	bd10      	pop	{r4, pc}
 80070fa:	bf00      	nop
 80070fc:	080083af 	.word	0x080083af
 8007100:	080083c0 	.word	0x080083c0

08007104 <__multiply>:
 8007104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007108:	4614      	mov	r4, r2
 800710a:	690a      	ldr	r2, [r1, #16]
 800710c:	6923      	ldr	r3, [r4, #16]
 800710e:	429a      	cmp	r2, r3
 8007110:	bfb8      	it	lt
 8007112:	460b      	movlt	r3, r1
 8007114:	460d      	mov	r5, r1
 8007116:	bfbc      	itt	lt
 8007118:	4625      	movlt	r5, r4
 800711a:	461c      	movlt	r4, r3
 800711c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007120:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007124:	68ab      	ldr	r3, [r5, #8]
 8007126:	6869      	ldr	r1, [r5, #4]
 8007128:	eb0a 0709 	add.w	r7, sl, r9
 800712c:	42bb      	cmp	r3, r7
 800712e:	b085      	sub	sp, #20
 8007130:	bfb8      	it	lt
 8007132:	3101      	addlt	r1, #1
 8007134:	f7ff fed4 	bl	8006ee0 <_Balloc>
 8007138:	b930      	cbnz	r0, 8007148 <__multiply+0x44>
 800713a:	4602      	mov	r2, r0
 800713c:	4b42      	ldr	r3, [pc, #264]	; (8007248 <__multiply+0x144>)
 800713e:	4843      	ldr	r0, [pc, #268]	; (800724c <__multiply+0x148>)
 8007140:	f240 115d 	movw	r1, #349	; 0x15d
 8007144:	f000 fb14 	bl	8007770 <__assert_func>
 8007148:	f100 0614 	add.w	r6, r0, #20
 800714c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007150:	4633      	mov	r3, r6
 8007152:	2200      	movs	r2, #0
 8007154:	4543      	cmp	r3, r8
 8007156:	d31e      	bcc.n	8007196 <__multiply+0x92>
 8007158:	f105 0c14 	add.w	ip, r5, #20
 800715c:	f104 0314 	add.w	r3, r4, #20
 8007160:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007164:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007168:	9202      	str	r2, [sp, #8]
 800716a:	ebac 0205 	sub.w	r2, ip, r5
 800716e:	3a15      	subs	r2, #21
 8007170:	f022 0203 	bic.w	r2, r2, #3
 8007174:	3204      	adds	r2, #4
 8007176:	f105 0115 	add.w	r1, r5, #21
 800717a:	458c      	cmp	ip, r1
 800717c:	bf38      	it	cc
 800717e:	2204      	movcc	r2, #4
 8007180:	9201      	str	r2, [sp, #4]
 8007182:	9a02      	ldr	r2, [sp, #8]
 8007184:	9303      	str	r3, [sp, #12]
 8007186:	429a      	cmp	r2, r3
 8007188:	d808      	bhi.n	800719c <__multiply+0x98>
 800718a:	2f00      	cmp	r7, #0
 800718c:	dc55      	bgt.n	800723a <__multiply+0x136>
 800718e:	6107      	str	r7, [r0, #16]
 8007190:	b005      	add	sp, #20
 8007192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007196:	f843 2b04 	str.w	r2, [r3], #4
 800719a:	e7db      	b.n	8007154 <__multiply+0x50>
 800719c:	f8b3 a000 	ldrh.w	sl, [r3]
 80071a0:	f1ba 0f00 	cmp.w	sl, #0
 80071a4:	d020      	beq.n	80071e8 <__multiply+0xe4>
 80071a6:	f105 0e14 	add.w	lr, r5, #20
 80071aa:	46b1      	mov	r9, r6
 80071ac:	2200      	movs	r2, #0
 80071ae:	f85e 4b04 	ldr.w	r4, [lr], #4
 80071b2:	f8d9 b000 	ldr.w	fp, [r9]
 80071b6:	b2a1      	uxth	r1, r4
 80071b8:	fa1f fb8b 	uxth.w	fp, fp
 80071bc:	fb0a b101 	mla	r1, sl, r1, fp
 80071c0:	4411      	add	r1, r2
 80071c2:	f8d9 2000 	ldr.w	r2, [r9]
 80071c6:	0c24      	lsrs	r4, r4, #16
 80071c8:	0c12      	lsrs	r2, r2, #16
 80071ca:	fb0a 2404 	mla	r4, sl, r4, r2
 80071ce:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80071d2:	b289      	uxth	r1, r1
 80071d4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80071d8:	45f4      	cmp	ip, lr
 80071da:	f849 1b04 	str.w	r1, [r9], #4
 80071de:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80071e2:	d8e4      	bhi.n	80071ae <__multiply+0xaa>
 80071e4:	9901      	ldr	r1, [sp, #4]
 80071e6:	5072      	str	r2, [r6, r1]
 80071e8:	9a03      	ldr	r2, [sp, #12]
 80071ea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80071ee:	3304      	adds	r3, #4
 80071f0:	f1b9 0f00 	cmp.w	r9, #0
 80071f4:	d01f      	beq.n	8007236 <__multiply+0x132>
 80071f6:	6834      	ldr	r4, [r6, #0]
 80071f8:	f105 0114 	add.w	r1, r5, #20
 80071fc:	46b6      	mov	lr, r6
 80071fe:	f04f 0a00 	mov.w	sl, #0
 8007202:	880a      	ldrh	r2, [r1, #0]
 8007204:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007208:	fb09 b202 	mla	r2, r9, r2, fp
 800720c:	4492      	add	sl, r2
 800720e:	b2a4      	uxth	r4, r4
 8007210:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007214:	f84e 4b04 	str.w	r4, [lr], #4
 8007218:	f851 4b04 	ldr.w	r4, [r1], #4
 800721c:	f8be 2000 	ldrh.w	r2, [lr]
 8007220:	0c24      	lsrs	r4, r4, #16
 8007222:	fb09 2404 	mla	r4, r9, r4, r2
 8007226:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800722a:	458c      	cmp	ip, r1
 800722c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007230:	d8e7      	bhi.n	8007202 <__multiply+0xfe>
 8007232:	9a01      	ldr	r2, [sp, #4]
 8007234:	50b4      	str	r4, [r6, r2]
 8007236:	3604      	adds	r6, #4
 8007238:	e7a3      	b.n	8007182 <__multiply+0x7e>
 800723a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1a5      	bne.n	800718e <__multiply+0x8a>
 8007242:	3f01      	subs	r7, #1
 8007244:	e7a1      	b.n	800718a <__multiply+0x86>
 8007246:	bf00      	nop
 8007248:	080083af 	.word	0x080083af
 800724c:	080083c0 	.word	0x080083c0

08007250 <__pow5mult>:
 8007250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007254:	4615      	mov	r5, r2
 8007256:	f012 0203 	ands.w	r2, r2, #3
 800725a:	4606      	mov	r6, r0
 800725c:	460f      	mov	r7, r1
 800725e:	d007      	beq.n	8007270 <__pow5mult+0x20>
 8007260:	4c25      	ldr	r4, [pc, #148]	; (80072f8 <__pow5mult+0xa8>)
 8007262:	3a01      	subs	r2, #1
 8007264:	2300      	movs	r3, #0
 8007266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800726a:	f7ff fe9b 	bl	8006fa4 <__multadd>
 800726e:	4607      	mov	r7, r0
 8007270:	10ad      	asrs	r5, r5, #2
 8007272:	d03d      	beq.n	80072f0 <__pow5mult+0xa0>
 8007274:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007276:	b97c      	cbnz	r4, 8007298 <__pow5mult+0x48>
 8007278:	2010      	movs	r0, #16
 800727a:	f7ff fe29 	bl	8006ed0 <malloc>
 800727e:	4602      	mov	r2, r0
 8007280:	6270      	str	r0, [r6, #36]	; 0x24
 8007282:	b928      	cbnz	r0, 8007290 <__pow5mult+0x40>
 8007284:	4b1d      	ldr	r3, [pc, #116]	; (80072fc <__pow5mult+0xac>)
 8007286:	481e      	ldr	r0, [pc, #120]	; (8007300 <__pow5mult+0xb0>)
 8007288:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800728c:	f000 fa70 	bl	8007770 <__assert_func>
 8007290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007294:	6004      	str	r4, [r0, #0]
 8007296:	60c4      	str	r4, [r0, #12]
 8007298:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800729c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072a0:	b94c      	cbnz	r4, 80072b6 <__pow5mult+0x66>
 80072a2:	f240 2171 	movw	r1, #625	; 0x271
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff ff16 	bl	80070d8 <__i2b>
 80072ac:	2300      	movs	r3, #0
 80072ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80072b2:	4604      	mov	r4, r0
 80072b4:	6003      	str	r3, [r0, #0]
 80072b6:	f04f 0900 	mov.w	r9, #0
 80072ba:	07eb      	lsls	r3, r5, #31
 80072bc:	d50a      	bpl.n	80072d4 <__pow5mult+0x84>
 80072be:	4639      	mov	r1, r7
 80072c0:	4622      	mov	r2, r4
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7ff ff1e 	bl	8007104 <__multiply>
 80072c8:	4639      	mov	r1, r7
 80072ca:	4680      	mov	r8, r0
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff fe47 	bl	8006f60 <_Bfree>
 80072d2:	4647      	mov	r7, r8
 80072d4:	106d      	asrs	r5, r5, #1
 80072d6:	d00b      	beq.n	80072f0 <__pow5mult+0xa0>
 80072d8:	6820      	ldr	r0, [r4, #0]
 80072da:	b938      	cbnz	r0, 80072ec <__pow5mult+0x9c>
 80072dc:	4622      	mov	r2, r4
 80072de:	4621      	mov	r1, r4
 80072e0:	4630      	mov	r0, r6
 80072e2:	f7ff ff0f 	bl	8007104 <__multiply>
 80072e6:	6020      	str	r0, [r4, #0]
 80072e8:	f8c0 9000 	str.w	r9, [r0]
 80072ec:	4604      	mov	r4, r0
 80072ee:	e7e4      	b.n	80072ba <__pow5mult+0x6a>
 80072f0:	4638      	mov	r0, r7
 80072f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f6:	bf00      	nop
 80072f8:	08008510 	.word	0x08008510
 80072fc:	08008339 	.word	0x08008339
 8007300:	080083c0 	.word	0x080083c0

08007304 <__lshift>:
 8007304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007308:	460c      	mov	r4, r1
 800730a:	6849      	ldr	r1, [r1, #4]
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007312:	68a3      	ldr	r3, [r4, #8]
 8007314:	4607      	mov	r7, r0
 8007316:	4691      	mov	r9, r2
 8007318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800731c:	f108 0601 	add.w	r6, r8, #1
 8007320:	42b3      	cmp	r3, r6
 8007322:	db0b      	blt.n	800733c <__lshift+0x38>
 8007324:	4638      	mov	r0, r7
 8007326:	f7ff fddb 	bl	8006ee0 <_Balloc>
 800732a:	4605      	mov	r5, r0
 800732c:	b948      	cbnz	r0, 8007342 <__lshift+0x3e>
 800732e:	4602      	mov	r2, r0
 8007330:	4b28      	ldr	r3, [pc, #160]	; (80073d4 <__lshift+0xd0>)
 8007332:	4829      	ldr	r0, [pc, #164]	; (80073d8 <__lshift+0xd4>)
 8007334:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007338:	f000 fa1a 	bl	8007770 <__assert_func>
 800733c:	3101      	adds	r1, #1
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	e7ee      	b.n	8007320 <__lshift+0x1c>
 8007342:	2300      	movs	r3, #0
 8007344:	f100 0114 	add.w	r1, r0, #20
 8007348:	f100 0210 	add.w	r2, r0, #16
 800734c:	4618      	mov	r0, r3
 800734e:	4553      	cmp	r3, sl
 8007350:	db33      	blt.n	80073ba <__lshift+0xb6>
 8007352:	6920      	ldr	r0, [r4, #16]
 8007354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007358:	f104 0314 	add.w	r3, r4, #20
 800735c:	f019 091f 	ands.w	r9, r9, #31
 8007360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007364:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007368:	d02b      	beq.n	80073c2 <__lshift+0xbe>
 800736a:	f1c9 0e20 	rsb	lr, r9, #32
 800736e:	468a      	mov	sl, r1
 8007370:	2200      	movs	r2, #0
 8007372:	6818      	ldr	r0, [r3, #0]
 8007374:	fa00 f009 	lsl.w	r0, r0, r9
 8007378:	4302      	orrs	r2, r0
 800737a:	f84a 2b04 	str.w	r2, [sl], #4
 800737e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007382:	459c      	cmp	ip, r3
 8007384:	fa22 f20e 	lsr.w	r2, r2, lr
 8007388:	d8f3      	bhi.n	8007372 <__lshift+0x6e>
 800738a:	ebac 0304 	sub.w	r3, ip, r4
 800738e:	3b15      	subs	r3, #21
 8007390:	f023 0303 	bic.w	r3, r3, #3
 8007394:	3304      	adds	r3, #4
 8007396:	f104 0015 	add.w	r0, r4, #21
 800739a:	4584      	cmp	ip, r0
 800739c:	bf38      	it	cc
 800739e:	2304      	movcc	r3, #4
 80073a0:	50ca      	str	r2, [r1, r3]
 80073a2:	b10a      	cbz	r2, 80073a8 <__lshift+0xa4>
 80073a4:	f108 0602 	add.w	r6, r8, #2
 80073a8:	3e01      	subs	r6, #1
 80073aa:	4638      	mov	r0, r7
 80073ac:	612e      	str	r6, [r5, #16]
 80073ae:	4621      	mov	r1, r4
 80073b0:	f7ff fdd6 	bl	8006f60 <_Bfree>
 80073b4:	4628      	mov	r0, r5
 80073b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80073be:	3301      	adds	r3, #1
 80073c0:	e7c5      	b.n	800734e <__lshift+0x4a>
 80073c2:	3904      	subs	r1, #4
 80073c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80073cc:	459c      	cmp	ip, r3
 80073ce:	d8f9      	bhi.n	80073c4 <__lshift+0xc0>
 80073d0:	e7ea      	b.n	80073a8 <__lshift+0xa4>
 80073d2:	bf00      	nop
 80073d4:	080083af 	.word	0x080083af
 80073d8:	080083c0 	.word	0x080083c0

080073dc <__mcmp>:
 80073dc:	b530      	push	{r4, r5, lr}
 80073de:	6902      	ldr	r2, [r0, #16]
 80073e0:	690c      	ldr	r4, [r1, #16]
 80073e2:	1b12      	subs	r2, r2, r4
 80073e4:	d10e      	bne.n	8007404 <__mcmp+0x28>
 80073e6:	f100 0314 	add.w	r3, r0, #20
 80073ea:	3114      	adds	r1, #20
 80073ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80073f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80073f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80073f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80073fc:	42a5      	cmp	r5, r4
 80073fe:	d003      	beq.n	8007408 <__mcmp+0x2c>
 8007400:	d305      	bcc.n	800740e <__mcmp+0x32>
 8007402:	2201      	movs	r2, #1
 8007404:	4610      	mov	r0, r2
 8007406:	bd30      	pop	{r4, r5, pc}
 8007408:	4283      	cmp	r3, r0
 800740a:	d3f3      	bcc.n	80073f4 <__mcmp+0x18>
 800740c:	e7fa      	b.n	8007404 <__mcmp+0x28>
 800740e:	f04f 32ff 	mov.w	r2, #4294967295
 8007412:	e7f7      	b.n	8007404 <__mcmp+0x28>

08007414 <__mdiff>:
 8007414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	460c      	mov	r4, r1
 800741a:	4606      	mov	r6, r0
 800741c:	4611      	mov	r1, r2
 800741e:	4620      	mov	r0, r4
 8007420:	4617      	mov	r7, r2
 8007422:	f7ff ffdb 	bl	80073dc <__mcmp>
 8007426:	1e05      	subs	r5, r0, #0
 8007428:	d110      	bne.n	800744c <__mdiff+0x38>
 800742a:	4629      	mov	r1, r5
 800742c:	4630      	mov	r0, r6
 800742e:	f7ff fd57 	bl	8006ee0 <_Balloc>
 8007432:	b930      	cbnz	r0, 8007442 <__mdiff+0x2e>
 8007434:	4b39      	ldr	r3, [pc, #228]	; (800751c <__mdiff+0x108>)
 8007436:	4602      	mov	r2, r0
 8007438:	f240 2132 	movw	r1, #562	; 0x232
 800743c:	4838      	ldr	r0, [pc, #224]	; (8007520 <__mdiff+0x10c>)
 800743e:	f000 f997 	bl	8007770 <__assert_func>
 8007442:	2301      	movs	r3, #1
 8007444:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744c:	bfa4      	itt	ge
 800744e:	463b      	movge	r3, r7
 8007450:	4627      	movge	r7, r4
 8007452:	4630      	mov	r0, r6
 8007454:	6879      	ldr	r1, [r7, #4]
 8007456:	bfa6      	itte	ge
 8007458:	461c      	movge	r4, r3
 800745a:	2500      	movge	r5, #0
 800745c:	2501      	movlt	r5, #1
 800745e:	f7ff fd3f 	bl	8006ee0 <_Balloc>
 8007462:	b920      	cbnz	r0, 800746e <__mdiff+0x5a>
 8007464:	4b2d      	ldr	r3, [pc, #180]	; (800751c <__mdiff+0x108>)
 8007466:	4602      	mov	r2, r0
 8007468:	f44f 7110 	mov.w	r1, #576	; 0x240
 800746c:	e7e6      	b.n	800743c <__mdiff+0x28>
 800746e:	693e      	ldr	r6, [r7, #16]
 8007470:	60c5      	str	r5, [r0, #12]
 8007472:	6925      	ldr	r5, [r4, #16]
 8007474:	f107 0114 	add.w	r1, r7, #20
 8007478:	f104 0914 	add.w	r9, r4, #20
 800747c:	f100 0e14 	add.w	lr, r0, #20
 8007480:	f107 0210 	add.w	r2, r7, #16
 8007484:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8007488:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800748c:	46f2      	mov	sl, lr
 800748e:	2700      	movs	r7, #0
 8007490:	f859 3b04 	ldr.w	r3, [r9], #4
 8007494:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007498:	fa1f f883 	uxth.w	r8, r3
 800749c:	fa17 f78b 	uxtah	r7, r7, fp
 80074a0:	0c1b      	lsrs	r3, r3, #16
 80074a2:	eba7 0808 	sub.w	r8, r7, r8
 80074a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80074ae:	fa1f f888 	uxth.w	r8, r8
 80074b2:	141f      	asrs	r7, r3, #16
 80074b4:	454d      	cmp	r5, r9
 80074b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074ba:	f84a 3b04 	str.w	r3, [sl], #4
 80074be:	d8e7      	bhi.n	8007490 <__mdiff+0x7c>
 80074c0:	1b2b      	subs	r3, r5, r4
 80074c2:	3b15      	subs	r3, #21
 80074c4:	f023 0303 	bic.w	r3, r3, #3
 80074c8:	3304      	adds	r3, #4
 80074ca:	3415      	adds	r4, #21
 80074cc:	42a5      	cmp	r5, r4
 80074ce:	bf38      	it	cc
 80074d0:	2304      	movcc	r3, #4
 80074d2:	4419      	add	r1, r3
 80074d4:	4473      	add	r3, lr
 80074d6:	469e      	mov	lr, r3
 80074d8:	460d      	mov	r5, r1
 80074da:	4565      	cmp	r5, ip
 80074dc:	d30e      	bcc.n	80074fc <__mdiff+0xe8>
 80074de:	f10c 0203 	add.w	r2, ip, #3
 80074e2:	1a52      	subs	r2, r2, r1
 80074e4:	f022 0203 	bic.w	r2, r2, #3
 80074e8:	3903      	subs	r1, #3
 80074ea:	458c      	cmp	ip, r1
 80074ec:	bf38      	it	cc
 80074ee:	2200      	movcc	r2, #0
 80074f0:	441a      	add	r2, r3
 80074f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80074f6:	b17b      	cbz	r3, 8007518 <__mdiff+0x104>
 80074f8:	6106      	str	r6, [r0, #16]
 80074fa:	e7a5      	b.n	8007448 <__mdiff+0x34>
 80074fc:	f855 8b04 	ldr.w	r8, [r5], #4
 8007500:	fa17 f488 	uxtah	r4, r7, r8
 8007504:	1422      	asrs	r2, r4, #16
 8007506:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800750a:	b2a4      	uxth	r4, r4
 800750c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007510:	f84e 4b04 	str.w	r4, [lr], #4
 8007514:	1417      	asrs	r7, r2, #16
 8007516:	e7e0      	b.n	80074da <__mdiff+0xc6>
 8007518:	3e01      	subs	r6, #1
 800751a:	e7ea      	b.n	80074f2 <__mdiff+0xde>
 800751c:	080083af 	.word	0x080083af
 8007520:	080083c0 	.word	0x080083c0

08007524 <__d2b>:
 8007524:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007528:	4689      	mov	r9, r1
 800752a:	2101      	movs	r1, #1
 800752c:	ec57 6b10 	vmov	r6, r7, d0
 8007530:	4690      	mov	r8, r2
 8007532:	f7ff fcd5 	bl	8006ee0 <_Balloc>
 8007536:	4604      	mov	r4, r0
 8007538:	b930      	cbnz	r0, 8007548 <__d2b+0x24>
 800753a:	4602      	mov	r2, r0
 800753c:	4b25      	ldr	r3, [pc, #148]	; (80075d4 <__d2b+0xb0>)
 800753e:	4826      	ldr	r0, [pc, #152]	; (80075d8 <__d2b+0xb4>)
 8007540:	f240 310a 	movw	r1, #778	; 0x30a
 8007544:	f000 f914 	bl	8007770 <__assert_func>
 8007548:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800754c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007550:	bb35      	cbnz	r5, 80075a0 <__d2b+0x7c>
 8007552:	2e00      	cmp	r6, #0
 8007554:	9301      	str	r3, [sp, #4]
 8007556:	d028      	beq.n	80075aa <__d2b+0x86>
 8007558:	4668      	mov	r0, sp
 800755a:	9600      	str	r6, [sp, #0]
 800755c:	f7ff fd8c 	bl	8007078 <__lo0bits>
 8007560:	9900      	ldr	r1, [sp, #0]
 8007562:	b300      	cbz	r0, 80075a6 <__d2b+0x82>
 8007564:	9a01      	ldr	r2, [sp, #4]
 8007566:	f1c0 0320 	rsb	r3, r0, #32
 800756a:	fa02 f303 	lsl.w	r3, r2, r3
 800756e:	430b      	orrs	r3, r1
 8007570:	40c2      	lsrs	r2, r0
 8007572:	6163      	str	r3, [r4, #20]
 8007574:	9201      	str	r2, [sp, #4]
 8007576:	9b01      	ldr	r3, [sp, #4]
 8007578:	61a3      	str	r3, [r4, #24]
 800757a:	2b00      	cmp	r3, #0
 800757c:	bf14      	ite	ne
 800757e:	2202      	movne	r2, #2
 8007580:	2201      	moveq	r2, #1
 8007582:	6122      	str	r2, [r4, #16]
 8007584:	b1d5      	cbz	r5, 80075bc <__d2b+0x98>
 8007586:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800758a:	4405      	add	r5, r0
 800758c:	f8c9 5000 	str.w	r5, [r9]
 8007590:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007594:	f8c8 0000 	str.w	r0, [r8]
 8007598:	4620      	mov	r0, r4
 800759a:	b003      	add	sp, #12
 800759c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075a4:	e7d5      	b.n	8007552 <__d2b+0x2e>
 80075a6:	6161      	str	r1, [r4, #20]
 80075a8:	e7e5      	b.n	8007576 <__d2b+0x52>
 80075aa:	a801      	add	r0, sp, #4
 80075ac:	f7ff fd64 	bl	8007078 <__lo0bits>
 80075b0:	9b01      	ldr	r3, [sp, #4]
 80075b2:	6163      	str	r3, [r4, #20]
 80075b4:	2201      	movs	r2, #1
 80075b6:	6122      	str	r2, [r4, #16]
 80075b8:	3020      	adds	r0, #32
 80075ba:	e7e3      	b.n	8007584 <__d2b+0x60>
 80075bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075c4:	f8c9 0000 	str.w	r0, [r9]
 80075c8:	6918      	ldr	r0, [r3, #16]
 80075ca:	f7ff fd35 	bl	8007038 <__hi0bits>
 80075ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075d2:	e7df      	b.n	8007594 <__d2b+0x70>
 80075d4:	080083af 	.word	0x080083af
 80075d8:	080083c0 	.word	0x080083c0

080075dc <_calloc_r>:
 80075dc:	b513      	push	{r0, r1, r4, lr}
 80075de:	434a      	muls	r2, r1
 80075e0:	4611      	mov	r1, r2
 80075e2:	9201      	str	r2, [sp, #4]
 80075e4:	f000 f85a 	bl	800769c <_malloc_r>
 80075e8:	4604      	mov	r4, r0
 80075ea:	b118      	cbz	r0, 80075f4 <_calloc_r+0x18>
 80075ec:	9a01      	ldr	r2, [sp, #4]
 80075ee:	2100      	movs	r1, #0
 80075f0:	f7fe f980 	bl	80058f4 <memset>
 80075f4:	4620      	mov	r0, r4
 80075f6:	b002      	add	sp, #8
 80075f8:	bd10      	pop	{r4, pc}
	...

080075fc <_free_r>:
 80075fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075fe:	2900      	cmp	r1, #0
 8007600:	d048      	beq.n	8007694 <_free_r+0x98>
 8007602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007606:	9001      	str	r0, [sp, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	f1a1 0404 	sub.w	r4, r1, #4
 800760e:	bfb8      	it	lt
 8007610:	18e4      	addlt	r4, r4, r3
 8007612:	f000 f8ef 	bl	80077f4 <__malloc_lock>
 8007616:	4a20      	ldr	r2, [pc, #128]	; (8007698 <_free_r+0x9c>)
 8007618:	9801      	ldr	r0, [sp, #4]
 800761a:	6813      	ldr	r3, [r2, #0]
 800761c:	4615      	mov	r5, r2
 800761e:	b933      	cbnz	r3, 800762e <_free_r+0x32>
 8007620:	6063      	str	r3, [r4, #4]
 8007622:	6014      	str	r4, [r2, #0]
 8007624:	b003      	add	sp, #12
 8007626:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800762a:	f000 b8e9 	b.w	8007800 <__malloc_unlock>
 800762e:	42a3      	cmp	r3, r4
 8007630:	d90b      	bls.n	800764a <_free_r+0x4e>
 8007632:	6821      	ldr	r1, [r4, #0]
 8007634:	1862      	adds	r2, r4, r1
 8007636:	4293      	cmp	r3, r2
 8007638:	bf04      	itt	eq
 800763a:	681a      	ldreq	r2, [r3, #0]
 800763c:	685b      	ldreq	r3, [r3, #4]
 800763e:	6063      	str	r3, [r4, #4]
 8007640:	bf04      	itt	eq
 8007642:	1852      	addeq	r2, r2, r1
 8007644:	6022      	streq	r2, [r4, #0]
 8007646:	602c      	str	r4, [r5, #0]
 8007648:	e7ec      	b.n	8007624 <_free_r+0x28>
 800764a:	461a      	mov	r2, r3
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	b10b      	cbz	r3, 8007654 <_free_r+0x58>
 8007650:	42a3      	cmp	r3, r4
 8007652:	d9fa      	bls.n	800764a <_free_r+0x4e>
 8007654:	6811      	ldr	r1, [r2, #0]
 8007656:	1855      	adds	r5, r2, r1
 8007658:	42a5      	cmp	r5, r4
 800765a:	d10b      	bne.n	8007674 <_free_r+0x78>
 800765c:	6824      	ldr	r4, [r4, #0]
 800765e:	4421      	add	r1, r4
 8007660:	1854      	adds	r4, r2, r1
 8007662:	42a3      	cmp	r3, r4
 8007664:	6011      	str	r1, [r2, #0]
 8007666:	d1dd      	bne.n	8007624 <_free_r+0x28>
 8007668:	681c      	ldr	r4, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	6053      	str	r3, [r2, #4]
 800766e:	4421      	add	r1, r4
 8007670:	6011      	str	r1, [r2, #0]
 8007672:	e7d7      	b.n	8007624 <_free_r+0x28>
 8007674:	d902      	bls.n	800767c <_free_r+0x80>
 8007676:	230c      	movs	r3, #12
 8007678:	6003      	str	r3, [r0, #0]
 800767a:	e7d3      	b.n	8007624 <_free_r+0x28>
 800767c:	6825      	ldr	r5, [r4, #0]
 800767e:	1961      	adds	r1, r4, r5
 8007680:	428b      	cmp	r3, r1
 8007682:	bf04      	itt	eq
 8007684:	6819      	ldreq	r1, [r3, #0]
 8007686:	685b      	ldreq	r3, [r3, #4]
 8007688:	6063      	str	r3, [r4, #4]
 800768a:	bf04      	itt	eq
 800768c:	1949      	addeq	r1, r1, r5
 800768e:	6021      	streq	r1, [r4, #0]
 8007690:	6054      	str	r4, [r2, #4]
 8007692:	e7c7      	b.n	8007624 <_free_r+0x28>
 8007694:	b003      	add	sp, #12
 8007696:	bd30      	pop	{r4, r5, pc}
 8007698:	2000134c 	.word	0x2000134c

0800769c <_malloc_r>:
 800769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800769e:	1ccd      	adds	r5, r1, #3
 80076a0:	f025 0503 	bic.w	r5, r5, #3
 80076a4:	3508      	adds	r5, #8
 80076a6:	2d0c      	cmp	r5, #12
 80076a8:	bf38      	it	cc
 80076aa:	250c      	movcc	r5, #12
 80076ac:	2d00      	cmp	r5, #0
 80076ae:	4606      	mov	r6, r0
 80076b0:	db01      	blt.n	80076b6 <_malloc_r+0x1a>
 80076b2:	42a9      	cmp	r1, r5
 80076b4:	d903      	bls.n	80076be <_malloc_r+0x22>
 80076b6:	230c      	movs	r3, #12
 80076b8:	6033      	str	r3, [r6, #0]
 80076ba:	2000      	movs	r0, #0
 80076bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076be:	f000 f899 	bl	80077f4 <__malloc_lock>
 80076c2:	4921      	ldr	r1, [pc, #132]	; (8007748 <_malloc_r+0xac>)
 80076c4:	680a      	ldr	r2, [r1, #0]
 80076c6:	4614      	mov	r4, r2
 80076c8:	b99c      	cbnz	r4, 80076f2 <_malloc_r+0x56>
 80076ca:	4f20      	ldr	r7, [pc, #128]	; (800774c <_malloc_r+0xb0>)
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	b923      	cbnz	r3, 80076da <_malloc_r+0x3e>
 80076d0:	4621      	mov	r1, r4
 80076d2:	4630      	mov	r0, r6
 80076d4:	f000 f83c 	bl	8007750 <_sbrk_r>
 80076d8:	6038      	str	r0, [r7, #0]
 80076da:	4629      	mov	r1, r5
 80076dc:	4630      	mov	r0, r6
 80076de:	f000 f837 	bl	8007750 <_sbrk_r>
 80076e2:	1c43      	adds	r3, r0, #1
 80076e4:	d123      	bne.n	800772e <_malloc_r+0x92>
 80076e6:	230c      	movs	r3, #12
 80076e8:	6033      	str	r3, [r6, #0]
 80076ea:	4630      	mov	r0, r6
 80076ec:	f000 f888 	bl	8007800 <__malloc_unlock>
 80076f0:	e7e3      	b.n	80076ba <_malloc_r+0x1e>
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	1b5b      	subs	r3, r3, r5
 80076f6:	d417      	bmi.n	8007728 <_malloc_r+0x8c>
 80076f8:	2b0b      	cmp	r3, #11
 80076fa:	d903      	bls.n	8007704 <_malloc_r+0x68>
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	441c      	add	r4, r3
 8007700:	6025      	str	r5, [r4, #0]
 8007702:	e004      	b.n	800770e <_malloc_r+0x72>
 8007704:	6863      	ldr	r3, [r4, #4]
 8007706:	42a2      	cmp	r2, r4
 8007708:	bf0c      	ite	eq
 800770a:	600b      	streq	r3, [r1, #0]
 800770c:	6053      	strne	r3, [r2, #4]
 800770e:	4630      	mov	r0, r6
 8007710:	f000 f876 	bl	8007800 <__malloc_unlock>
 8007714:	f104 000b 	add.w	r0, r4, #11
 8007718:	1d23      	adds	r3, r4, #4
 800771a:	f020 0007 	bic.w	r0, r0, #7
 800771e:	1ac2      	subs	r2, r0, r3
 8007720:	d0cc      	beq.n	80076bc <_malloc_r+0x20>
 8007722:	1a1b      	subs	r3, r3, r0
 8007724:	50a3      	str	r3, [r4, r2]
 8007726:	e7c9      	b.n	80076bc <_malloc_r+0x20>
 8007728:	4622      	mov	r2, r4
 800772a:	6864      	ldr	r4, [r4, #4]
 800772c:	e7cc      	b.n	80076c8 <_malloc_r+0x2c>
 800772e:	1cc4      	adds	r4, r0, #3
 8007730:	f024 0403 	bic.w	r4, r4, #3
 8007734:	42a0      	cmp	r0, r4
 8007736:	d0e3      	beq.n	8007700 <_malloc_r+0x64>
 8007738:	1a21      	subs	r1, r4, r0
 800773a:	4630      	mov	r0, r6
 800773c:	f000 f808 	bl	8007750 <_sbrk_r>
 8007740:	3001      	adds	r0, #1
 8007742:	d1dd      	bne.n	8007700 <_malloc_r+0x64>
 8007744:	e7cf      	b.n	80076e6 <_malloc_r+0x4a>
 8007746:	bf00      	nop
 8007748:	2000134c 	.word	0x2000134c
 800774c:	20001350 	.word	0x20001350

08007750 <_sbrk_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d06      	ldr	r5, [pc, #24]	; (800776c <_sbrk_r+0x1c>)
 8007754:	2300      	movs	r3, #0
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	f7fa fc10 	bl	8001f80 <_sbrk>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d102      	bne.n	800776a <_sbrk_r+0x1a>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	b103      	cbz	r3, 800776a <_sbrk_r+0x1a>
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	20001500 	.word	0x20001500

08007770 <__assert_func>:
 8007770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007772:	4614      	mov	r4, r2
 8007774:	461a      	mov	r2, r3
 8007776:	4b09      	ldr	r3, [pc, #36]	; (800779c <__assert_func+0x2c>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4605      	mov	r5, r0
 800777c:	68d8      	ldr	r0, [r3, #12]
 800777e:	b14c      	cbz	r4, 8007794 <__assert_func+0x24>
 8007780:	4b07      	ldr	r3, [pc, #28]	; (80077a0 <__assert_func+0x30>)
 8007782:	9100      	str	r1, [sp, #0]
 8007784:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007788:	4906      	ldr	r1, [pc, #24]	; (80077a4 <__assert_func+0x34>)
 800778a:	462b      	mov	r3, r5
 800778c:	f000 f80e 	bl	80077ac <fiprintf>
 8007790:	f000 fa64 	bl	8007c5c <abort>
 8007794:	4b04      	ldr	r3, [pc, #16]	; (80077a8 <__assert_func+0x38>)
 8007796:	461c      	mov	r4, r3
 8007798:	e7f3      	b.n	8007782 <__assert_func+0x12>
 800779a:	bf00      	nop
 800779c:	20000014 	.word	0x20000014
 80077a0:	0800851c 	.word	0x0800851c
 80077a4:	08008529 	.word	0x08008529
 80077a8:	08008557 	.word	0x08008557

080077ac <fiprintf>:
 80077ac:	b40e      	push	{r1, r2, r3}
 80077ae:	b503      	push	{r0, r1, lr}
 80077b0:	4601      	mov	r1, r0
 80077b2:	ab03      	add	r3, sp, #12
 80077b4:	4805      	ldr	r0, [pc, #20]	; (80077cc <fiprintf+0x20>)
 80077b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077ba:	6800      	ldr	r0, [r0, #0]
 80077bc:	9301      	str	r3, [sp, #4]
 80077be:	f000 f84f 	bl	8007860 <_vfiprintf_r>
 80077c2:	b002      	add	sp, #8
 80077c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077c8:	b003      	add	sp, #12
 80077ca:	4770      	bx	lr
 80077cc:	20000014 	.word	0x20000014

080077d0 <__ascii_mbtowc>:
 80077d0:	b082      	sub	sp, #8
 80077d2:	b901      	cbnz	r1, 80077d6 <__ascii_mbtowc+0x6>
 80077d4:	a901      	add	r1, sp, #4
 80077d6:	b142      	cbz	r2, 80077ea <__ascii_mbtowc+0x1a>
 80077d8:	b14b      	cbz	r3, 80077ee <__ascii_mbtowc+0x1e>
 80077da:	7813      	ldrb	r3, [r2, #0]
 80077dc:	600b      	str	r3, [r1, #0]
 80077de:	7812      	ldrb	r2, [r2, #0]
 80077e0:	1e10      	subs	r0, r2, #0
 80077e2:	bf18      	it	ne
 80077e4:	2001      	movne	r0, #1
 80077e6:	b002      	add	sp, #8
 80077e8:	4770      	bx	lr
 80077ea:	4610      	mov	r0, r2
 80077ec:	e7fb      	b.n	80077e6 <__ascii_mbtowc+0x16>
 80077ee:	f06f 0001 	mvn.w	r0, #1
 80077f2:	e7f8      	b.n	80077e6 <__ascii_mbtowc+0x16>

080077f4 <__malloc_lock>:
 80077f4:	4801      	ldr	r0, [pc, #4]	; (80077fc <__malloc_lock+0x8>)
 80077f6:	f000 bbf1 	b.w	8007fdc <__retarget_lock_acquire_recursive>
 80077fa:	bf00      	nop
 80077fc:	20001508 	.word	0x20001508

08007800 <__malloc_unlock>:
 8007800:	4801      	ldr	r0, [pc, #4]	; (8007808 <__malloc_unlock+0x8>)
 8007802:	f000 bbec 	b.w	8007fde <__retarget_lock_release_recursive>
 8007806:	bf00      	nop
 8007808:	20001508 	.word	0x20001508

0800780c <__sfputc_r>:
 800780c:	6893      	ldr	r3, [r2, #8]
 800780e:	3b01      	subs	r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	b410      	push	{r4}
 8007814:	6093      	str	r3, [r2, #8]
 8007816:	da08      	bge.n	800782a <__sfputc_r+0x1e>
 8007818:	6994      	ldr	r4, [r2, #24]
 800781a:	42a3      	cmp	r3, r4
 800781c:	db01      	blt.n	8007822 <__sfputc_r+0x16>
 800781e:	290a      	cmp	r1, #10
 8007820:	d103      	bne.n	800782a <__sfputc_r+0x1e>
 8007822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007826:	f000 b94b 	b.w	8007ac0 <__swbuf_r>
 800782a:	6813      	ldr	r3, [r2, #0]
 800782c:	1c58      	adds	r0, r3, #1
 800782e:	6010      	str	r0, [r2, #0]
 8007830:	7019      	strb	r1, [r3, #0]
 8007832:	4608      	mov	r0, r1
 8007834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007838:	4770      	bx	lr

0800783a <__sfputs_r>:
 800783a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783c:	4606      	mov	r6, r0
 800783e:	460f      	mov	r7, r1
 8007840:	4614      	mov	r4, r2
 8007842:	18d5      	adds	r5, r2, r3
 8007844:	42ac      	cmp	r4, r5
 8007846:	d101      	bne.n	800784c <__sfputs_r+0x12>
 8007848:	2000      	movs	r0, #0
 800784a:	e007      	b.n	800785c <__sfputs_r+0x22>
 800784c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007850:	463a      	mov	r2, r7
 8007852:	4630      	mov	r0, r6
 8007854:	f7ff ffda 	bl	800780c <__sfputc_r>
 8007858:	1c43      	adds	r3, r0, #1
 800785a:	d1f3      	bne.n	8007844 <__sfputs_r+0xa>
 800785c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007860 <_vfiprintf_r>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	460d      	mov	r5, r1
 8007866:	b09d      	sub	sp, #116	; 0x74
 8007868:	4614      	mov	r4, r2
 800786a:	4698      	mov	r8, r3
 800786c:	4606      	mov	r6, r0
 800786e:	b118      	cbz	r0, 8007878 <_vfiprintf_r+0x18>
 8007870:	6983      	ldr	r3, [r0, #24]
 8007872:	b90b      	cbnz	r3, 8007878 <_vfiprintf_r+0x18>
 8007874:	f000 fb14 	bl	8007ea0 <__sinit>
 8007878:	4b89      	ldr	r3, [pc, #548]	; (8007aa0 <_vfiprintf_r+0x240>)
 800787a:	429d      	cmp	r5, r3
 800787c:	d11b      	bne.n	80078b6 <_vfiprintf_r+0x56>
 800787e:	6875      	ldr	r5, [r6, #4]
 8007880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007882:	07d9      	lsls	r1, r3, #31
 8007884:	d405      	bmi.n	8007892 <_vfiprintf_r+0x32>
 8007886:	89ab      	ldrh	r3, [r5, #12]
 8007888:	059a      	lsls	r2, r3, #22
 800788a:	d402      	bmi.n	8007892 <_vfiprintf_r+0x32>
 800788c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800788e:	f000 fba5 	bl	8007fdc <__retarget_lock_acquire_recursive>
 8007892:	89ab      	ldrh	r3, [r5, #12]
 8007894:	071b      	lsls	r3, r3, #28
 8007896:	d501      	bpl.n	800789c <_vfiprintf_r+0x3c>
 8007898:	692b      	ldr	r3, [r5, #16]
 800789a:	b9eb      	cbnz	r3, 80078d8 <_vfiprintf_r+0x78>
 800789c:	4629      	mov	r1, r5
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 f96e 	bl	8007b80 <__swsetup_r>
 80078a4:	b1c0      	cbz	r0, 80078d8 <_vfiprintf_r+0x78>
 80078a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078a8:	07dc      	lsls	r4, r3, #31
 80078aa:	d50e      	bpl.n	80078ca <_vfiprintf_r+0x6a>
 80078ac:	f04f 30ff 	mov.w	r0, #4294967295
 80078b0:	b01d      	add	sp, #116	; 0x74
 80078b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b6:	4b7b      	ldr	r3, [pc, #492]	; (8007aa4 <_vfiprintf_r+0x244>)
 80078b8:	429d      	cmp	r5, r3
 80078ba:	d101      	bne.n	80078c0 <_vfiprintf_r+0x60>
 80078bc:	68b5      	ldr	r5, [r6, #8]
 80078be:	e7df      	b.n	8007880 <_vfiprintf_r+0x20>
 80078c0:	4b79      	ldr	r3, [pc, #484]	; (8007aa8 <_vfiprintf_r+0x248>)
 80078c2:	429d      	cmp	r5, r3
 80078c4:	bf08      	it	eq
 80078c6:	68f5      	ldreq	r5, [r6, #12]
 80078c8:	e7da      	b.n	8007880 <_vfiprintf_r+0x20>
 80078ca:	89ab      	ldrh	r3, [r5, #12]
 80078cc:	0598      	lsls	r0, r3, #22
 80078ce:	d4ed      	bmi.n	80078ac <_vfiprintf_r+0x4c>
 80078d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078d2:	f000 fb84 	bl	8007fde <__retarget_lock_release_recursive>
 80078d6:	e7e9      	b.n	80078ac <_vfiprintf_r+0x4c>
 80078d8:	2300      	movs	r3, #0
 80078da:	9309      	str	r3, [sp, #36]	; 0x24
 80078dc:	2320      	movs	r3, #32
 80078de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80078e6:	2330      	movs	r3, #48	; 0x30
 80078e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007aac <_vfiprintf_r+0x24c>
 80078ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078f0:	f04f 0901 	mov.w	r9, #1
 80078f4:	4623      	mov	r3, r4
 80078f6:	469a      	mov	sl, r3
 80078f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078fc:	b10a      	cbz	r2, 8007902 <_vfiprintf_r+0xa2>
 80078fe:	2a25      	cmp	r2, #37	; 0x25
 8007900:	d1f9      	bne.n	80078f6 <_vfiprintf_r+0x96>
 8007902:	ebba 0b04 	subs.w	fp, sl, r4
 8007906:	d00b      	beq.n	8007920 <_vfiprintf_r+0xc0>
 8007908:	465b      	mov	r3, fp
 800790a:	4622      	mov	r2, r4
 800790c:	4629      	mov	r1, r5
 800790e:	4630      	mov	r0, r6
 8007910:	f7ff ff93 	bl	800783a <__sfputs_r>
 8007914:	3001      	adds	r0, #1
 8007916:	f000 80aa 	beq.w	8007a6e <_vfiprintf_r+0x20e>
 800791a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800791c:	445a      	add	r2, fp
 800791e:	9209      	str	r2, [sp, #36]	; 0x24
 8007920:	f89a 3000 	ldrb.w	r3, [sl]
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 80a2 	beq.w	8007a6e <_vfiprintf_r+0x20e>
 800792a:	2300      	movs	r3, #0
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007934:	f10a 0a01 	add.w	sl, sl, #1
 8007938:	9304      	str	r3, [sp, #16]
 800793a:	9307      	str	r3, [sp, #28]
 800793c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007940:	931a      	str	r3, [sp, #104]	; 0x68
 8007942:	4654      	mov	r4, sl
 8007944:	2205      	movs	r2, #5
 8007946:	f814 1b01 	ldrb.w	r1, [r4], #1
 800794a:	4858      	ldr	r0, [pc, #352]	; (8007aac <_vfiprintf_r+0x24c>)
 800794c:	f7f8 fc48 	bl	80001e0 <memchr>
 8007950:	9a04      	ldr	r2, [sp, #16]
 8007952:	b9d8      	cbnz	r0, 800798c <_vfiprintf_r+0x12c>
 8007954:	06d1      	lsls	r1, r2, #27
 8007956:	bf44      	itt	mi
 8007958:	2320      	movmi	r3, #32
 800795a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800795e:	0713      	lsls	r3, r2, #28
 8007960:	bf44      	itt	mi
 8007962:	232b      	movmi	r3, #43	; 0x2b
 8007964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007968:	f89a 3000 	ldrb.w	r3, [sl]
 800796c:	2b2a      	cmp	r3, #42	; 0x2a
 800796e:	d015      	beq.n	800799c <_vfiprintf_r+0x13c>
 8007970:	9a07      	ldr	r2, [sp, #28]
 8007972:	4654      	mov	r4, sl
 8007974:	2000      	movs	r0, #0
 8007976:	f04f 0c0a 	mov.w	ip, #10
 800797a:	4621      	mov	r1, r4
 800797c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007980:	3b30      	subs	r3, #48	; 0x30
 8007982:	2b09      	cmp	r3, #9
 8007984:	d94e      	bls.n	8007a24 <_vfiprintf_r+0x1c4>
 8007986:	b1b0      	cbz	r0, 80079b6 <_vfiprintf_r+0x156>
 8007988:	9207      	str	r2, [sp, #28]
 800798a:	e014      	b.n	80079b6 <_vfiprintf_r+0x156>
 800798c:	eba0 0308 	sub.w	r3, r0, r8
 8007990:	fa09 f303 	lsl.w	r3, r9, r3
 8007994:	4313      	orrs	r3, r2
 8007996:	9304      	str	r3, [sp, #16]
 8007998:	46a2      	mov	sl, r4
 800799a:	e7d2      	b.n	8007942 <_vfiprintf_r+0xe2>
 800799c:	9b03      	ldr	r3, [sp, #12]
 800799e:	1d19      	adds	r1, r3, #4
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	9103      	str	r1, [sp, #12]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bfbb      	ittet	lt
 80079a8:	425b      	neglt	r3, r3
 80079aa:	f042 0202 	orrlt.w	r2, r2, #2
 80079ae:	9307      	strge	r3, [sp, #28]
 80079b0:	9307      	strlt	r3, [sp, #28]
 80079b2:	bfb8      	it	lt
 80079b4:	9204      	strlt	r2, [sp, #16]
 80079b6:	7823      	ldrb	r3, [r4, #0]
 80079b8:	2b2e      	cmp	r3, #46	; 0x2e
 80079ba:	d10c      	bne.n	80079d6 <_vfiprintf_r+0x176>
 80079bc:	7863      	ldrb	r3, [r4, #1]
 80079be:	2b2a      	cmp	r3, #42	; 0x2a
 80079c0:	d135      	bne.n	8007a2e <_vfiprintf_r+0x1ce>
 80079c2:	9b03      	ldr	r3, [sp, #12]
 80079c4:	1d1a      	adds	r2, r3, #4
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	9203      	str	r2, [sp, #12]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bfb8      	it	lt
 80079ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80079d2:	3402      	adds	r4, #2
 80079d4:	9305      	str	r3, [sp, #20]
 80079d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007abc <_vfiprintf_r+0x25c>
 80079da:	7821      	ldrb	r1, [r4, #0]
 80079dc:	2203      	movs	r2, #3
 80079de:	4650      	mov	r0, sl
 80079e0:	f7f8 fbfe 	bl	80001e0 <memchr>
 80079e4:	b140      	cbz	r0, 80079f8 <_vfiprintf_r+0x198>
 80079e6:	2340      	movs	r3, #64	; 0x40
 80079e8:	eba0 000a 	sub.w	r0, r0, sl
 80079ec:	fa03 f000 	lsl.w	r0, r3, r0
 80079f0:	9b04      	ldr	r3, [sp, #16]
 80079f2:	4303      	orrs	r3, r0
 80079f4:	3401      	adds	r4, #1
 80079f6:	9304      	str	r3, [sp, #16]
 80079f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fc:	482c      	ldr	r0, [pc, #176]	; (8007ab0 <_vfiprintf_r+0x250>)
 80079fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a02:	2206      	movs	r2, #6
 8007a04:	f7f8 fbec 	bl	80001e0 <memchr>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	d03f      	beq.n	8007a8c <_vfiprintf_r+0x22c>
 8007a0c:	4b29      	ldr	r3, [pc, #164]	; (8007ab4 <_vfiprintf_r+0x254>)
 8007a0e:	bb1b      	cbnz	r3, 8007a58 <_vfiprintf_r+0x1f8>
 8007a10:	9b03      	ldr	r3, [sp, #12]
 8007a12:	3307      	adds	r3, #7
 8007a14:	f023 0307 	bic.w	r3, r3, #7
 8007a18:	3308      	adds	r3, #8
 8007a1a:	9303      	str	r3, [sp, #12]
 8007a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a1e:	443b      	add	r3, r7
 8007a20:	9309      	str	r3, [sp, #36]	; 0x24
 8007a22:	e767      	b.n	80078f4 <_vfiprintf_r+0x94>
 8007a24:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a28:	460c      	mov	r4, r1
 8007a2a:	2001      	movs	r0, #1
 8007a2c:	e7a5      	b.n	800797a <_vfiprintf_r+0x11a>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	3401      	adds	r4, #1
 8007a32:	9305      	str	r3, [sp, #20]
 8007a34:	4619      	mov	r1, r3
 8007a36:	f04f 0c0a 	mov.w	ip, #10
 8007a3a:	4620      	mov	r0, r4
 8007a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a40:	3a30      	subs	r2, #48	; 0x30
 8007a42:	2a09      	cmp	r2, #9
 8007a44:	d903      	bls.n	8007a4e <_vfiprintf_r+0x1ee>
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0c5      	beq.n	80079d6 <_vfiprintf_r+0x176>
 8007a4a:	9105      	str	r1, [sp, #20]
 8007a4c:	e7c3      	b.n	80079d6 <_vfiprintf_r+0x176>
 8007a4e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a52:	4604      	mov	r4, r0
 8007a54:	2301      	movs	r3, #1
 8007a56:	e7f0      	b.n	8007a3a <_vfiprintf_r+0x1da>
 8007a58:	ab03      	add	r3, sp, #12
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	462a      	mov	r2, r5
 8007a5e:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <_vfiprintf_r+0x258>)
 8007a60:	a904      	add	r1, sp, #16
 8007a62:	4630      	mov	r0, r6
 8007a64:	f7fd ffee 	bl	8005a44 <_printf_float>
 8007a68:	4607      	mov	r7, r0
 8007a6a:	1c78      	adds	r0, r7, #1
 8007a6c:	d1d6      	bne.n	8007a1c <_vfiprintf_r+0x1bc>
 8007a6e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a70:	07d9      	lsls	r1, r3, #31
 8007a72:	d405      	bmi.n	8007a80 <_vfiprintf_r+0x220>
 8007a74:	89ab      	ldrh	r3, [r5, #12]
 8007a76:	059a      	lsls	r2, r3, #22
 8007a78:	d402      	bmi.n	8007a80 <_vfiprintf_r+0x220>
 8007a7a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a7c:	f000 faaf 	bl	8007fde <__retarget_lock_release_recursive>
 8007a80:	89ab      	ldrh	r3, [r5, #12]
 8007a82:	065b      	lsls	r3, r3, #25
 8007a84:	f53f af12 	bmi.w	80078ac <_vfiprintf_r+0x4c>
 8007a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a8a:	e711      	b.n	80078b0 <_vfiprintf_r+0x50>
 8007a8c:	ab03      	add	r3, sp, #12
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	462a      	mov	r2, r5
 8007a92:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <_vfiprintf_r+0x258>)
 8007a94:	a904      	add	r1, sp, #16
 8007a96:	4630      	mov	r0, r6
 8007a98:	f7fe fa78 	bl	8005f8c <_printf_i>
 8007a9c:	e7e4      	b.n	8007a68 <_vfiprintf_r+0x208>
 8007a9e:	bf00      	nop
 8007aa0:	08008694 	.word	0x08008694
 8007aa4:	080086b4 	.word	0x080086b4
 8007aa8:	08008674 	.word	0x08008674
 8007aac:	08008562 	.word	0x08008562
 8007ab0:	0800856c 	.word	0x0800856c
 8007ab4:	08005a45 	.word	0x08005a45
 8007ab8:	0800783b 	.word	0x0800783b
 8007abc:	08008568 	.word	0x08008568

08007ac0 <__swbuf_r>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	460e      	mov	r6, r1
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	b118      	cbz	r0, 8007ad2 <__swbuf_r+0x12>
 8007aca:	6983      	ldr	r3, [r0, #24]
 8007acc:	b90b      	cbnz	r3, 8007ad2 <__swbuf_r+0x12>
 8007ace:	f000 f9e7 	bl	8007ea0 <__sinit>
 8007ad2:	4b21      	ldr	r3, [pc, #132]	; (8007b58 <__swbuf_r+0x98>)
 8007ad4:	429c      	cmp	r4, r3
 8007ad6:	d12b      	bne.n	8007b30 <__swbuf_r+0x70>
 8007ad8:	686c      	ldr	r4, [r5, #4]
 8007ada:	69a3      	ldr	r3, [r4, #24]
 8007adc:	60a3      	str	r3, [r4, #8]
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	071a      	lsls	r2, r3, #28
 8007ae2:	d52f      	bpl.n	8007b44 <__swbuf_r+0x84>
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	b36b      	cbz	r3, 8007b44 <__swbuf_r+0x84>
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	6820      	ldr	r0, [r4, #0]
 8007aec:	1ac0      	subs	r0, r0, r3
 8007aee:	6963      	ldr	r3, [r4, #20]
 8007af0:	b2f6      	uxtb	r6, r6
 8007af2:	4283      	cmp	r3, r0
 8007af4:	4637      	mov	r7, r6
 8007af6:	dc04      	bgt.n	8007b02 <__swbuf_r+0x42>
 8007af8:	4621      	mov	r1, r4
 8007afa:	4628      	mov	r0, r5
 8007afc:	f000 f93c 	bl	8007d78 <_fflush_r>
 8007b00:	bb30      	cbnz	r0, 8007b50 <__swbuf_r+0x90>
 8007b02:	68a3      	ldr	r3, [r4, #8]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	60a3      	str	r3, [r4, #8]
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	1c5a      	adds	r2, r3, #1
 8007b0c:	6022      	str	r2, [r4, #0]
 8007b0e:	701e      	strb	r6, [r3, #0]
 8007b10:	6963      	ldr	r3, [r4, #20]
 8007b12:	3001      	adds	r0, #1
 8007b14:	4283      	cmp	r3, r0
 8007b16:	d004      	beq.n	8007b22 <__swbuf_r+0x62>
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	07db      	lsls	r3, r3, #31
 8007b1c:	d506      	bpl.n	8007b2c <__swbuf_r+0x6c>
 8007b1e:	2e0a      	cmp	r6, #10
 8007b20:	d104      	bne.n	8007b2c <__swbuf_r+0x6c>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4628      	mov	r0, r5
 8007b26:	f000 f927 	bl	8007d78 <_fflush_r>
 8007b2a:	b988      	cbnz	r0, 8007b50 <__swbuf_r+0x90>
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b30:	4b0a      	ldr	r3, [pc, #40]	; (8007b5c <__swbuf_r+0x9c>)
 8007b32:	429c      	cmp	r4, r3
 8007b34:	d101      	bne.n	8007b3a <__swbuf_r+0x7a>
 8007b36:	68ac      	ldr	r4, [r5, #8]
 8007b38:	e7cf      	b.n	8007ada <__swbuf_r+0x1a>
 8007b3a:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <__swbuf_r+0xa0>)
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	bf08      	it	eq
 8007b40:	68ec      	ldreq	r4, [r5, #12]
 8007b42:	e7ca      	b.n	8007ada <__swbuf_r+0x1a>
 8007b44:	4621      	mov	r1, r4
 8007b46:	4628      	mov	r0, r5
 8007b48:	f000 f81a 	bl	8007b80 <__swsetup_r>
 8007b4c:	2800      	cmp	r0, #0
 8007b4e:	d0cb      	beq.n	8007ae8 <__swbuf_r+0x28>
 8007b50:	f04f 37ff 	mov.w	r7, #4294967295
 8007b54:	e7ea      	b.n	8007b2c <__swbuf_r+0x6c>
 8007b56:	bf00      	nop
 8007b58:	08008694 	.word	0x08008694
 8007b5c:	080086b4 	.word	0x080086b4
 8007b60:	08008674 	.word	0x08008674

08007b64 <__ascii_wctomb>:
 8007b64:	b149      	cbz	r1, 8007b7a <__ascii_wctomb+0x16>
 8007b66:	2aff      	cmp	r2, #255	; 0xff
 8007b68:	bf85      	ittet	hi
 8007b6a:	238a      	movhi	r3, #138	; 0x8a
 8007b6c:	6003      	strhi	r3, [r0, #0]
 8007b6e:	700a      	strbls	r2, [r1, #0]
 8007b70:	f04f 30ff 	movhi.w	r0, #4294967295
 8007b74:	bf98      	it	ls
 8007b76:	2001      	movls	r0, #1
 8007b78:	4770      	bx	lr
 8007b7a:	4608      	mov	r0, r1
 8007b7c:	4770      	bx	lr
	...

08007b80 <__swsetup_r>:
 8007b80:	4b32      	ldr	r3, [pc, #200]	; (8007c4c <__swsetup_r+0xcc>)
 8007b82:	b570      	push	{r4, r5, r6, lr}
 8007b84:	681d      	ldr	r5, [r3, #0]
 8007b86:	4606      	mov	r6, r0
 8007b88:	460c      	mov	r4, r1
 8007b8a:	b125      	cbz	r5, 8007b96 <__swsetup_r+0x16>
 8007b8c:	69ab      	ldr	r3, [r5, #24]
 8007b8e:	b913      	cbnz	r3, 8007b96 <__swsetup_r+0x16>
 8007b90:	4628      	mov	r0, r5
 8007b92:	f000 f985 	bl	8007ea0 <__sinit>
 8007b96:	4b2e      	ldr	r3, [pc, #184]	; (8007c50 <__swsetup_r+0xd0>)
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	d10f      	bne.n	8007bbc <__swsetup_r+0x3c>
 8007b9c:	686c      	ldr	r4, [r5, #4]
 8007b9e:	89a3      	ldrh	r3, [r4, #12]
 8007ba0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ba4:	0719      	lsls	r1, r3, #28
 8007ba6:	d42c      	bmi.n	8007c02 <__swsetup_r+0x82>
 8007ba8:	06dd      	lsls	r5, r3, #27
 8007baa:	d411      	bmi.n	8007bd0 <__swsetup_r+0x50>
 8007bac:	2309      	movs	r3, #9
 8007bae:	6033      	str	r3, [r6, #0]
 8007bb0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007bb4:	81a3      	strh	r3, [r4, #12]
 8007bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bba:	e03e      	b.n	8007c3a <__swsetup_r+0xba>
 8007bbc:	4b25      	ldr	r3, [pc, #148]	; (8007c54 <__swsetup_r+0xd4>)
 8007bbe:	429c      	cmp	r4, r3
 8007bc0:	d101      	bne.n	8007bc6 <__swsetup_r+0x46>
 8007bc2:	68ac      	ldr	r4, [r5, #8]
 8007bc4:	e7eb      	b.n	8007b9e <__swsetup_r+0x1e>
 8007bc6:	4b24      	ldr	r3, [pc, #144]	; (8007c58 <__swsetup_r+0xd8>)
 8007bc8:	429c      	cmp	r4, r3
 8007bca:	bf08      	it	eq
 8007bcc:	68ec      	ldreq	r4, [r5, #12]
 8007bce:	e7e6      	b.n	8007b9e <__swsetup_r+0x1e>
 8007bd0:	0758      	lsls	r0, r3, #29
 8007bd2:	d512      	bpl.n	8007bfa <__swsetup_r+0x7a>
 8007bd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bd6:	b141      	cbz	r1, 8007bea <__swsetup_r+0x6a>
 8007bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bdc:	4299      	cmp	r1, r3
 8007bde:	d002      	beq.n	8007be6 <__swsetup_r+0x66>
 8007be0:	4630      	mov	r0, r6
 8007be2:	f7ff fd0b 	bl	80075fc <_free_r>
 8007be6:	2300      	movs	r3, #0
 8007be8:	6363      	str	r3, [r4, #52]	; 0x34
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bf0:	81a3      	strh	r3, [r4, #12]
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6063      	str	r3, [r4, #4]
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	6023      	str	r3, [r4, #0]
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f043 0308 	orr.w	r3, r3, #8
 8007c00:	81a3      	strh	r3, [r4, #12]
 8007c02:	6923      	ldr	r3, [r4, #16]
 8007c04:	b94b      	cbnz	r3, 8007c1a <__swsetup_r+0x9a>
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c10:	d003      	beq.n	8007c1a <__swsetup_r+0x9a>
 8007c12:	4621      	mov	r1, r4
 8007c14:	4630      	mov	r0, r6
 8007c16:	f000 fa07 	bl	8008028 <__smakebuf_r>
 8007c1a:	89a0      	ldrh	r0, [r4, #12]
 8007c1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007c20:	f010 0301 	ands.w	r3, r0, #1
 8007c24:	d00a      	beq.n	8007c3c <__swsetup_r+0xbc>
 8007c26:	2300      	movs	r3, #0
 8007c28:	60a3      	str	r3, [r4, #8]
 8007c2a:	6963      	ldr	r3, [r4, #20]
 8007c2c:	425b      	negs	r3, r3
 8007c2e:	61a3      	str	r3, [r4, #24]
 8007c30:	6923      	ldr	r3, [r4, #16]
 8007c32:	b943      	cbnz	r3, 8007c46 <__swsetup_r+0xc6>
 8007c34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007c38:	d1ba      	bne.n	8007bb0 <__swsetup_r+0x30>
 8007c3a:	bd70      	pop	{r4, r5, r6, pc}
 8007c3c:	0781      	lsls	r1, r0, #30
 8007c3e:	bf58      	it	pl
 8007c40:	6963      	ldrpl	r3, [r4, #20]
 8007c42:	60a3      	str	r3, [r4, #8]
 8007c44:	e7f4      	b.n	8007c30 <__swsetup_r+0xb0>
 8007c46:	2000      	movs	r0, #0
 8007c48:	e7f7      	b.n	8007c3a <__swsetup_r+0xba>
 8007c4a:	bf00      	nop
 8007c4c:	20000014 	.word	0x20000014
 8007c50:	08008694 	.word	0x08008694
 8007c54:	080086b4 	.word	0x080086b4
 8007c58:	08008674 	.word	0x08008674

08007c5c <abort>:
 8007c5c:	b508      	push	{r3, lr}
 8007c5e:	2006      	movs	r0, #6
 8007c60:	f000 fa4a 	bl	80080f8 <raise>
 8007c64:	2001      	movs	r0, #1
 8007c66:	f7fa f913 	bl	8001e90 <_exit>
	...

08007c6c <__sflush_r>:
 8007c6c:	898a      	ldrh	r2, [r1, #12]
 8007c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c72:	4605      	mov	r5, r0
 8007c74:	0710      	lsls	r0, r2, #28
 8007c76:	460c      	mov	r4, r1
 8007c78:	d458      	bmi.n	8007d2c <__sflush_r+0xc0>
 8007c7a:	684b      	ldr	r3, [r1, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	dc05      	bgt.n	8007c8c <__sflush_r+0x20>
 8007c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	dc02      	bgt.n	8007c8c <__sflush_r+0x20>
 8007c86:	2000      	movs	r0, #0
 8007c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c8e:	2e00      	cmp	r6, #0
 8007c90:	d0f9      	beq.n	8007c86 <__sflush_r+0x1a>
 8007c92:	2300      	movs	r3, #0
 8007c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c98:	682f      	ldr	r7, [r5, #0]
 8007c9a:	602b      	str	r3, [r5, #0]
 8007c9c:	d032      	beq.n	8007d04 <__sflush_r+0x98>
 8007c9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	075a      	lsls	r2, r3, #29
 8007ca4:	d505      	bpl.n	8007cb2 <__sflush_r+0x46>
 8007ca6:	6863      	ldr	r3, [r4, #4]
 8007ca8:	1ac0      	subs	r0, r0, r3
 8007caa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007cac:	b10b      	cbz	r3, 8007cb2 <__sflush_r+0x46>
 8007cae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007cb0:	1ac0      	subs	r0, r0, r3
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007cb8:	6a21      	ldr	r1, [r4, #32]
 8007cba:	4628      	mov	r0, r5
 8007cbc:	47b0      	blx	r6
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	89a3      	ldrh	r3, [r4, #12]
 8007cc2:	d106      	bne.n	8007cd2 <__sflush_r+0x66>
 8007cc4:	6829      	ldr	r1, [r5, #0]
 8007cc6:	291d      	cmp	r1, #29
 8007cc8:	d82c      	bhi.n	8007d24 <__sflush_r+0xb8>
 8007cca:	4a2a      	ldr	r2, [pc, #168]	; (8007d74 <__sflush_r+0x108>)
 8007ccc:	40ca      	lsrs	r2, r1
 8007cce:	07d6      	lsls	r6, r2, #31
 8007cd0:	d528      	bpl.n	8007d24 <__sflush_r+0xb8>
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	6062      	str	r2, [r4, #4]
 8007cd6:	04d9      	lsls	r1, r3, #19
 8007cd8:	6922      	ldr	r2, [r4, #16]
 8007cda:	6022      	str	r2, [r4, #0]
 8007cdc:	d504      	bpl.n	8007ce8 <__sflush_r+0x7c>
 8007cde:	1c42      	adds	r2, r0, #1
 8007ce0:	d101      	bne.n	8007ce6 <__sflush_r+0x7a>
 8007ce2:	682b      	ldr	r3, [r5, #0]
 8007ce4:	b903      	cbnz	r3, 8007ce8 <__sflush_r+0x7c>
 8007ce6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ce8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cea:	602f      	str	r7, [r5, #0]
 8007cec:	2900      	cmp	r1, #0
 8007cee:	d0ca      	beq.n	8007c86 <__sflush_r+0x1a>
 8007cf0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cf4:	4299      	cmp	r1, r3
 8007cf6:	d002      	beq.n	8007cfe <__sflush_r+0x92>
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f7ff fc7f 	bl	80075fc <_free_r>
 8007cfe:	2000      	movs	r0, #0
 8007d00:	6360      	str	r0, [r4, #52]	; 0x34
 8007d02:	e7c1      	b.n	8007c88 <__sflush_r+0x1c>
 8007d04:	6a21      	ldr	r1, [r4, #32]
 8007d06:	2301      	movs	r3, #1
 8007d08:	4628      	mov	r0, r5
 8007d0a:	47b0      	blx	r6
 8007d0c:	1c41      	adds	r1, r0, #1
 8007d0e:	d1c7      	bne.n	8007ca0 <__sflush_r+0x34>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0c4      	beq.n	8007ca0 <__sflush_r+0x34>
 8007d16:	2b1d      	cmp	r3, #29
 8007d18:	d001      	beq.n	8007d1e <__sflush_r+0xb2>
 8007d1a:	2b16      	cmp	r3, #22
 8007d1c:	d101      	bne.n	8007d22 <__sflush_r+0xb6>
 8007d1e:	602f      	str	r7, [r5, #0]
 8007d20:	e7b1      	b.n	8007c86 <__sflush_r+0x1a>
 8007d22:	89a3      	ldrh	r3, [r4, #12]
 8007d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d28:	81a3      	strh	r3, [r4, #12]
 8007d2a:	e7ad      	b.n	8007c88 <__sflush_r+0x1c>
 8007d2c:	690f      	ldr	r7, [r1, #16]
 8007d2e:	2f00      	cmp	r7, #0
 8007d30:	d0a9      	beq.n	8007c86 <__sflush_r+0x1a>
 8007d32:	0793      	lsls	r3, r2, #30
 8007d34:	680e      	ldr	r6, [r1, #0]
 8007d36:	bf08      	it	eq
 8007d38:	694b      	ldreq	r3, [r1, #20]
 8007d3a:	600f      	str	r7, [r1, #0]
 8007d3c:	bf18      	it	ne
 8007d3e:	2300      	movne	r3, #0
 8007d40:	eba6 0807 	sub.w	r8, r6, r7
 8007d44:	608b      	str	r3, [r1, #8]
 8007d46:	f1b8 0f00 	cmp.w	r8, #0
 8007d4a:	dd9c      	ble.n	8007c86 <__sflush_r+0x1a>
 8007d4c:	6a21      	ldr	r1, [r4, #32]
 8007d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007d50:	4643      	mov	r3, r8
 8007d52:	463a      	mov	r2, r7
 8007d54:	4628      	mov	r0, r5
 8007d56:	47b0      	blx	r6
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	dc06      	bgt.n	8007d6a <__sflush_r+0xfe>
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d62:	81a3      	strh	r3, [r4, #12]
 8007d64:	f04f 30ff 	mov.w	r0, #4294967295
 8007d68:	e78e      	b.n	8007c88 <__sflush_r+0x1c>
 8007d6a:	4407      	add	r7, r0
 8007d6c:	eba8 0800 	sub.w	r8, r8, r0
 8007d70:	e7e9      	b.n	8007d46 <__sflush_r+0xda>
 8007d72:	bf00      	nop
 8007d74:	20400001 	.word	0x20400001

08007d78 <_fflush_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	690b      	ldr	r3, [r1, #16]
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	b913      	cbnz	r3, 8007d88 <_fflush_r+0x10>
 8007d82:	2500      	movs	r5, #0
 8007d84:	4628      	mov	r0, r5
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	b118      	cbz	r0, 8007d92 <_fflush_r+0x1a>
 8007d8a:	6983      	ldr	r3, [r0, #24]
 8007d8c:	b90b      	cbnz	r3, 8007d92 <_fflush_r+0x1a>
 8007d8e:	f000 f887 	bl	8007ea0 <__sinit>
 8007d92:	4b14      	ldr	r3, [pc, #80]	; (8007de4 <_fflush_r+0x6c>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	d11b      	bne.n	8007dd0 <_fflush_r+0x58>
 8007d98:	686c      	ldr	r4, [r5, #4]
 8007d9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d0ef      	beq.n	8007d82 <_fflush_r+0xa>
 8007da2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007da4:	07d0      	lsls	r0, r2, #31
 8007da6:	d404      	bmi.n	8007db2 <_fflush_r+0x3a>
 8007da8:	0599      	lsls	r1, r3, #22
 8007daa:	d402      	bmi.n	8007db2 <_fflush_r+0x3a>
 8007dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dae:	f000 f915 	bl	8007fdc <__retarget_lock_acquire_recursive>
 8007db2:	4628      	mov	r0, r5
 8007db4:	4621      	mov	r1, r4
 8007db6:	f7ff ff59 	bl	8007c6c <__sflush_r>
 8007dba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dbc:	07da      	lsls	r2, r3, #31
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	d4e0      	bmi.n	8007d84 <_fflush_r+0xc>
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	059b      	lsls	r3, r3, #22
 8007dc6:	d4dd      	bmi.n	8007d84 <_fflush_r+0xc>
 8007dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dca:	f000 f908 	bl	8007fde <__retarget_lock_release_recursive>
 8007dce:	e7d9      	b.n	8007d84 <_fflush_r+0xc>
 8007dd0:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <_fflush_r+0x70>)
 8007dd2:	429c      	cmp	r4, r3
 8007dd4:	d101      	bne.n	8007dda <_fflush_r+0x62>
 8007dd6:	68ac      	ldr	r4, [r5, #8]
 8007dd8:	e7df      	b.n	8007d9a <_fflush_r+0x22>
 8007dda:	4b04      	ldr	r3, [pc, #16]	; (8007dec <_fflush_r+0x74>)
 8007ddc:	429c      	cmp	r4, r3
 8007dde:	bf08      	it	eq
 8007de0:	68ec      	ldreq	r4, [r5, #12]
 8007de2:	e7da      	b.n	8007d9a <_fflush_r+0x22>
 8007de4:	08008694 	.word	0x08008694
 8007de8:	080086b4 	.word	0x080086b4
 8007dec:	08008674 	.word	0x08008674

08007df0 <std>:
 8007df0:	2300      	movs	r3, #0
 8007df2:	b510      	push	{r4, lr}
 8007df4:	4604      	mov	r4, r0
 8007df6:	e9c0 3300 	strd	r3, r3, [r0]
 8007dfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dfe:	6083      	str	r3, [r0, #8]
 8007e00:	8181      	strh	r1, [r0, #12]
 8007e02:	6643      	str	r3, [r0, #100]	; 0x64
 8007e04:	81c2      	strh	r2, [r0, #14]
 8007e06:	6183      	str	r3, [r0, #24]
 8007e08:	4619      	mov	r1, r3
 8007e0a:	2208      	movs	r2, #8
 8007e0c:	305c      	adds	r0, #92	; 0x5c
 8007e0e:	f7fd fd71 	bl	80058f4 <memset>
 8007e12:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <std+0x38>)
 8007e14:	6263      	str	r3, [r4, #36]	; 0x24
 8007e16:	4b05      	ldr	r3, [pc, #20]	; (8007e2c <std+0x3c>)
 8007e18:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <std+0x40>)
 8007e1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <std+0x44>)
 8007e20:	6224      	str	r4, [r4, #32]
 8007e22:	6323      	str	r3, [r4, #48]	; 0x30
 8007e24:	bd10      	pop	{r4, pc}
 8007e26:	bf00      	nop
 8007e28:	08008131 	.word	0x08008131
 8007e2c:	08008153 	.word	0x08008153
 8007e30:	0800818b 	.word	0x0800818b
 8007e34:	080081af 	.word	0x080081af

08007e38 <_cleanup_r>:
 8007e38:	4901      	ldr	r1, [pc, #4]	; (8007e40 <_cleanup_r+0x8>)
 8007e3a:	f000 b8af 	b.w	8007f9c <_fwalk_reent>
 8007e3e:	bf00      	nop
 8007e40:	08007d79 	.word	0x08007d79

08007e44 <__sfmoreglue>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	1e4a      	subs	r2, r1, #1
 8007e48:	2568      	movs	r5, #104	; 0x68
 8007e4a:	4355      	muls	r5, r2
 8007e4c:	460e      	mov	r6, r1
 8007e4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e52:	f7ff fc23 	bl	800769c <_malloc_r>
 8007e56:	4604      	mov	r4, r0
 8007e58:	b140      	cbz	r0, 8007e6c <__sfmoreglue+0x28>
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	e9c0 1600 	strd	r1, r6, [r0]
 8007e60:	300c      	adds	r0, #12
 8007e62:	60a0      	str	r0, [r4, #8]
 8007e64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e68:	f7fd fd44 	bl	80058f4 <memset>
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	bd70      	pop	{r4, r5, r6, pc}

08007e70 <__sfp_lock_acquire>:
 8007e70:	4801      	ldr	r0, [pc, #4]	; (8007e78 <__sfp_lock_acquire+0x8>)
 8007e72:	f000 b8b3 	b.w	8007fdc <__retarget_lock_acquire_recursive>
 8007e76:	bf00      	nop
 8007e78:	2000150c 	.word	0x2000150c

08007e7c <__sfp_lock_release>:
 8007e7c:	4801      	ldr	r0, [pc, #4]	; (8007e84 <__sfp_lock_release+0x8>)
 8007e7e:	f000 b8ae 	b.w	8007fde <__retarget_lock_release_recursive>
 8007e82:	bf00      	nop
 8007e84:	2000150c 	.word	0x2000150c

08007e88 <__sinit_lock_acquire>:
 8007e88:	4801      	ldr	r0, [pc, #4]	; (8007e90 <__sinit_lock_acquire+0x8>)
 8007e8a:	f000 b8a7 	b.w	8007fdc <__retarget_lock_acquire_recursive>
 8007e8e:	bf00      	nop
 8007e90:	20001507 	.word	0x20001507

08007e94 <__sinit_lock_release>:
 8007e94:	4801      	ldr	r0, [pc, #4]	; (8007e9c <__sinit_lock_release+0x8>)
 8007e96:	f000 b8a2 	b.w	8007fde <__retarget_lock_release_recursive>
 8007e9a:	bf00      	nop
 8007e9c:	20001507 	.word	0x20001507

08007ea0 <__sinit>:
 8007ea0:	b510      	push	{r4, lr}
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	f7ff fff0 	bl	8007e88 <__sinit_lock_acquire>
 8007ea8:	69a3      	ldr	r3, [r4, #24]
 8007eaa:	b11b      	cbz	r3, 8007eb4 <__sinit+0x14>
 8007eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007eb0:	f7ff bff0 	b.w	8007e94 <__sinit_lock_release>
 8007eb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007eb8:	6523      	str	r3, [r4, #80]	; 0x50
 8007eba:	4b13      	ldr	r3, [pc, #76]	; (8007f08 <__sinit+0x68>)
 8007ebc:	4a13      	ldr	r2, [pc, #76]	; (8007f0c <__sinit+0x6c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	62a2      	str	r2, [r4, #40]	; 0x28
 8007ec2:	42a3      	cmp	r3, r4
 8007ec4:	bf04      	itt	eq
 8007ec6:	2301      	moveq	r3, #1
 8007ec8:	61a3      	streq	r3, [r4, #24]
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f000 f820 	bl	8007f10 <__sfp>
 8007ed0:	6060      	str	r0, [r4, #4]
 8007ed2:	4620      	mov	r0, r4
 8007ed4:	f000 f81c 	bl	8007f10 <__sfp>
 8007ed8:	60a0      	str	r0, [r4, #8]
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 f818 	bl	8007f10 <__sfp>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	60e0      	str	r0, [r4, #12]
 8007ee4:	2104      	movs	r1, #4
 8007ee6:	6860      	ldr	r0, [r4, #4]
 8007ee8:	f7ff ff82 	bl	8007df0 <std>
 8007eec:	68a0      	ldr	r0, [r4, #8]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	2109      	movs	r1, #9
 8007ef2:	f7ff ff7d 	bl	8007df0 <std>
 8007ef6:	68e0      	ldr	r0, [r4, #12]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	2112      	movs	r1, #18
 8007efc:	f7ff ff78 	bl	8007df0 <std>
 8007f00:	2301      	movs	r3, #1
 8007f02:	61a3      	str	r3, [r4, #24]
 8007f04:	e7d2      	b.n	8007eac <__sinit+0xc>
 8007f06:	bf00      	nop
 8007f08:	080082f4 	.word	0x080082f4
 8007f0c:	08007e39 	.word	0x08007e39

08007f10 <__sfp>:
 8007f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f12:	4607      	mov	r7, r0
 8007f14:	f7ff ffac 	bl	8007e70 <__sfp_lock_acquire>
 8007f18:	4b1e      	ldr	r3, [pc, #120]	; (8007f94 <__sfp+0x84>)
 8007f1a:	681e      	ldr	r6, [r3, #0]
 8007f1c:	69b3      	ldr	r3, [r6, #24]
 8007f1e:	b913      	cbnz	r3, 8007f26 <__sfp+0x16>
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7ff ffbd 	bl	8007ea0 <__sinit>
 8007f26:	3648      	adds	r6, #72	; 0x48
 8007f28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007f2c:	3b01      	subs	r3, #1
 8007f2e:	d503      	bpl.n	8007f38 <__sfp+0x28>
 8007f30:	6833      	ldr	r3, [r6, #0]
 8007f32:	b30b      	cbz	r3, 8007f78 <__sfp+0x68>
 8007f34:	6836      	ldr	r6, [r6, #0]
 8007f36:	e7f7      	b.n	8007f28 <__sfp+0x18>
 8007f38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007f3c:	b9d5      	cbnz	r5, 8007f74 <__sfp+0x64>
 8007f3e:	4b16      	ldr	r3, [pc, #88]	; (8007f98 <__sfp+0x88>)
 8007f40:	60e3      	str	r3, [r4, #12]
 8007f42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f46:	6665      	str	r5, [r4, #100]	; 0x64
 8007f48:	f000 f847 	bl	8007fda <__retarget_lock_init_recursive>
 8007f4c:	f7ff ff96 	bl	8007e7c <__sfp_lock_release>
 8007f50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f58:	6025      	str	r5, [r4, #0]
 8007f5a:	61a5      	str	r5, [r4, #24]
 8007f5c:	2208      	movs	r2, #8
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f64:	f7fd fcc6 	bl	80058f4 <memset>
 8007f68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f70:	4620      	mov	r0, r4
 8007f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f74:	3468      	adds	r4, #104	; 0x68
 8007f76:	e7d9      	b.n	8007f2c <__sfp+0x1c>
 8007f78:	2104      	movs	r1, #4
 8007f7a:	4638      	mov	r0, r7
 8007f7c:	f7ff ff62 	bl	8007e44 <__sfmoreglue>
 8007f80:	4604      	mov	r4, r0
 8007f82:	6030      	str	r0, [r6, #0]
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d1d5      	bne.n	8007f34 <__sfp+0x24>
 8007f88:	f7ff ff78 	bl	8007e7c <__sfp_lock_release>
 8007f8c:	230c      	movs	r3, #12
 8007f8e:	603b      	str	r3, [r7, #0]
 8007f90:	e7ee      	b.n	8007f70 <__sfp+0x60>
 8007f92:	bf00      	nop
 8007f94:	080082f4 	.word	0x080082f4
 8007f98:	ffff0001 	.word	0xffff0001

08007f9c <_fwalk_reent>:
 8007f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa0:	4606      	mov	r6, r0
 8007fa2:	4688      	mov	r8, r1
 8007fa4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007fa8:	2700      	movs	r7, #0
 8007faa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fae:	f1b9 0901 	subs.w	r9, r9, #1
 8007fb2:	d505      	bpl.n	8007fc0 <_fwalk_reent+0x24>
 8007fb4:	6824      	ldr	r4, [r4, #0]
 8007fb6:	2c00      	cmp	r4, #0
 8007fb8:	d1f7      	bne.n	8007faa <_fwalk_reent+0xe>
 8007fba:	4638      	mov	r0, r7
 8007fbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fc0:	89ab      	ldrh	r3, [r5, #12]
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d907      	bls.n	8007fd6 <_fwalk_reent+0x3a>
 8007fc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	d003      	beq.n	8007fd6 <_fwalk_reent+0x3a>
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	47c0      	blx	r8
 8007fd4:	4307      	orrs	r7, r0
 8007fd6:	3568      	adds	r5, #104	; 0x68
 8007fd8:	e7e9      	b.n	8007fae <_fwalk_reent+0x12>

08007fda <__retarget_lock_init_recursive>:
 8007fda:	4770      	bx	lr

08007fdc <__retarget_lock_acquire_recursive>:
 8007fdc:	4770      	bx	lr

08007fde <__retarget_lock_release_recursive>:
 8007fde:	4770      	bx	lr

08007fe0 <__swhatbuf_r>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	460e      	mov	r6, r1
 8007fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe8:	2900      	cmp	r1, #0
 8007fea:	b096      	sub	sp, #88	; 0x58
 8007fec:	4614      	mov	r4, r2
 8007fee:	461d      	mov	r5, r3
 8007ff0:	da07      	bge.n	8008002 <__swhatbuf_r+0x22>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	602b      	str	r3, [r5, #0]
 8007ff6:	89b3      	ldrh	r3, [r6, #12]
 8007ff8:	061a      	lsls	r2, r3, #24
 8007ffa:	d410      	bmi.n	800801e <__swhatbuf_r+0x3e>
 8007ffc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008000:	e00e      	b.n	8008020 <__swhatbuf_r+0x40>
 8008002:	466a      	mov	r2, sp
 8008004:	f000 f8fa 	bl	80081fc <_fstat_r>
 8008008:	2800      	cmp	r0, #0
 800800a:	dbf2      	blt.n	8007ff2 <__swhatbuf_r+0x12>
 800800c:	9a01      	ldr	r2, [sp, #4]
 800800e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008012:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008016:	425a      	negs	r2, r3
 8008018:	415a      	adcs	r2, r3
 800801a:	602a      	str	r2, [r5, #0]
 800801c:	e7ee      	b.n	8007ffc <__swhatbuf_r+0x1c>
 800801e:	2340      	movs	r3, #64	; 0x40
 8008020:	2000      	movs	r0, #0
 8008022:	6023      	str	r3, [r4, #0]
 8008024:	b016      	add	sp, #88	; 0x58
 8008026:	bd70      	pop	{r4, r5, r6, pc}

08008028 <__smakebuf_r>:
 8008028:	898b      	ldrh	r3, [r1, #12]
 800802a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800802c:	079d      	lsls	r5, r3, #30
 800802e:	4606      	mov	r6, r0
 8008030:	460c      	mov	r4, r1
 8008032:	d507      	bpl.n	8008044 <__smakebuf_r+0x1c>
 8008034:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	6123      	str	r3, [r4, #16]
 800803c:	2301      	movs	r3, #1
 800803e:	6163      	str	r3, [r4, #20]
 8008040:	b002      	add	sp, #8
 8008042:	bd70      	pop	{r4, r5, r6, pc}
 8008044:	ab01      	add	r3, sp, #4
 8008046:	466a      	mov	r2, sp
 8008048:	f7ff ffca 	bl	8007fe0 <__swhatbuf_r>
 800804c:	9900      	ldr	r1, [sp, #0]
 800804e:	4605      	mov	r5, r0
 8008050:	4630      	mov	r0, r6
 8008052:	f7ff fb23 	bl	800769c <_malloc_r>
 8008056:	b948      	cbnz	r0, 800806c <__smakebuf_r+0x44>
 8008058:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800805c:	059a      	lsls	r2, r3, #22
 800805e:	d4ef      	bmi.n	8008040 <__smakebuf_r+0x18>
 8008060:	f023 0303 	bic.w	r3, r3, #3
 8008064:	f043 0302 	orr.w	r3, r3, #2
 8008068:	81a3      	strh	r3, [r4, #12]
 800806a:	e7e3      	b.n	8008034 <__smakebuf_r+0xc>
 800806c:	4b0d      	ldr	r3, [pc, #52]	; (80080a4 <__smakebuf_r+0x7c>)
 800806e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008070:	89a3      	ldrh	r3, [r4, #12]
 8008072:	6020      	str	r0, [r4, #0]
 8008074:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008078:	81a3      	strh	r3, [r4, #12]
 800807a:	9b00      	ldr	r3, [sp, #0]
 800807c:	6163      	str	r3, [r4, #20]
 800807e:	9b01      	ldr	r3, [sp, #4]
 8008080:	6120      	str	r0, [r4, #16]
 8008082:	b15b      	cbz	r3, 800809c <__smakebuf_r+0x74>
 8008084:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008088:	4630      	mov	r0, r6
 800808a:	f000 f8c9 	bl	8008220 <_isatty_r>
 800808e:	b128      	cbz	r0, 800809c <__smakebuf_r+0x74>
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	f023 0303 	bic.w	r3, r3, #3
 8008096:	f043 0301 	orr.w	r3, r3, #1
 800809a:	81a3      	strh	r3, [r4, #12]
 800809c:	89a0      	ldrh	r0, [r4, #12]
 800809e:	4305      	orrs	r5, r0
 80080a0:	81a5      	strh	r5, [r4, #12]
 80080a2:	e7cd      	b.n	8008040 <__smakebuf_r+0x18>
 80080a4:	08007e39 	.word	0x08007e39

080080a8 <_raise_r>:
 80080a8:	291f      	cmp	r1, #31
 80080aa:	b538      	push	{r3, r4, r5, lr}
 80080ac:	4604      	mov	r4, r0
 80080ae:	460d      	mov	r5, r1
 80080b0:	d904      	bls.n	80080bc <_raise_r+0x14>
 80080b2:	2316      	movs	r3, #22
 80080b4:	6003      	str	r3, [r0, #0]
 80080b6:	f04f 30ff 	mov.w	r0, #4294967295
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80080be:	b112      	cbz	r2, 80080c6 <_raise_r+0x1e>
 80080c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80080c4:	b94b      	cbnz	r3, 80080da <_raise_r+0x32>
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 f830 	bl	800812c <_getpid_r>
 80080cc:	462a      	mov	r2, r5
 80080ce:	4601      	mov	r1, r0
 80080d0:	4620      	mov	r0, r4
 80080d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080d6:	f000 b817 	b.w	8008108 <_kill_r>
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d00a      	beq.n	80080f4 <_raise_r+0x4c>
 80080de:	1c59      	adds	r1, r3, #1
 80080e0:	d103      	bne.n	80080ea <_raise_r+0x42>
 80080e2:	2316      	movs	r3, #22
 80080e4:	6003      	str	r3, [r0, #0]
 80080e6:	2001      	movs	r0, #1
 80080e8:	e7e7      	b.n	80080ba <_raise_r+0x12>
 80080ea:	2400      	movs	r4, #0
 80080ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80080f0:	4628      	mov	r0, r5
 80080f2:	4798      	blx	r3
 80080f4:	2000      	movs	r0, #0
 80080f6:	e7e0      	b.n	80080ba <_raise_r+0x12>

080080f8 <raise>:
 80080f8:	4b02      	ldr	r3, [pc, #8]	; (8008104 <raise+0xc>)
 80080fa:	4601      	mov	r1, r0
 80080fc:	6818      	ldr	r0, [r3, #0]
 80080fe:	f7ff bfd3 	b.w	80080a8 <_raise_r>
 8008102:	bf00      	nop
 8008104:	20000014 	.word	0x20000014

08008108 <_kill_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d07      	ldr	r5, [pc, #28]	; (8008128 <_kill_r+0x20>)
 800810c:	2300      	movs	r3, #0
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	4611      	mov	r1, r2
 8008114:	602b      	str	r3, [r5, #0]
 8008116:	f7f9 feab 	bl	8001e70 <_kill>
 800811a:	1c43      	adds	r3, r0, #1
 800811c:	d102      	bne.n	8008124 <_kill_r+0x1c>
 800811e:	682b      	ldr	r3, [r5, #0]
 8008120:	b103      	cbz	r3, 8008124 <_kill_r+0x1c>
 8008122:	6023      	str	r3, [r4, #0]
 8008124:	bd38      	pop	{r3, r4, r5, pc}
 8008126:	bf00      	nop
 8008128:	20001500 	.word	0x20001500

0800812c <_getpid_r>:
 800812c:	f7f9 be98 	b.w	8001e60 <_getpid>

08008130 <__sread>:
 8008130:	b510      	push	{r4, lr}
 8008132:	460c      	mov	r4, r1
 8008134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008138:	f000 f894 	bl	8008264 <_read_r>
 800813c:	2800      	cmp	r0, #0
 800813e:	bfab      	itete	ge
 8008140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008142:	89a3      	ldrhlt	r3, [r4, #12]
 8008144:	181b      	addge	r3, r3, r0
 8008146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800814a:	bfac      	ite	ge
 800814c:	6563      	strge	r3, [r4, #84]	; 0x54
 800814e:	81a3      	strhlt	r3, [r4, #12]
 8008150:	bd10      	pop	{r4, pc}

08008152 <__swrite>:
 8008152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008156:	461f      	mov	r7, r3
 8008158:	898b      	ldrh	r3, [r1, #12]
 800815a:	05db      	lsls	r3, r3, #23
 800815c:	4605      	mov	r5, r0
 800815e:	460c      	mov	r4, r1
 8008160:	4616      	mov	r6, r2
 8008162:	d505      	bpl.n	8008170 <__swrite+0x1e>
 8008164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008168:	2302      	movs	r3, #2
 800816a:	2200      	movs	r2, #0
 800816c:	f000 f868 	bl	8008240 <_lseek_r>
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800817a:	81a3      	strh	r3, [r4, #12]
 800817c:	4632      	mov	r2, r6
 800817e:	463b      	mov	r3, r7
 8008180:	4628      	mov	r0, r5
 8008182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008186:	f000 b817 	b.w	80081b8 <_write_r>

0800818a <__sseek>:
 800818a:	b510      	push	{r4, lr}
 800818c:	460c      	mov	r4, r1
 800818e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008192:	f000 f855 	bl	8008240 <_lseek_r>
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	89a3      	ldrh	r3, [r4, #12]
 800819a:	bf15      	itete	ne
 800819c:	6560      	strne	r0, [r4, #84]	; 0x54
 800819e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081a6:	81a3      	strheq	r3, [r4, #12]
 80081a8:	bf18      	it	ne
 80081aa:	81a3      	strhne	r3, [r4, #12]
 80081ac:	bd10      	pop	{r4, pc}

080081ae <__sclose>:
 80081ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b2:	f000 b813 	b.w	80081dc <_close_r>
	...

080081b8 <_write_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4d07      	ldr	r5, [pc, #28]	; (80081d8 <_write_r+0x20>)
 80081bc:	4604      	mov	r4, r0
 80081be:	4608      	mov	r0, r1
 80081c0:	4611      	mov	r1, r2
 80081c2:	2200      	movs	r2, #0
 80081c4:	602a      	str	r2, [r5, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	f7f9 fe89 	bl	8001ede <_write>
 80081cc:	1c43      	adds	r3, r0, #1
 80081ce:	d102      	bne.n	80081d6 <_write_r+0x1e>
 80081d0:	682b      	ldr	r3, [r5, #0]
 80081d2:	b103      	cbz	r3, 80081d6 <_write_r+0x1e>
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	bd38      	pop	{r3, r4, r5, pc}
 80081d8:	20001500 	.word	0x20001500

080081dc <_close_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d06      	ldr	r5, [pc, #24]	; (80081f8 <_close_r+0x1c>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	f7f9 fe95 	bl	8001f16 <_close>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_close_r+0x1a>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_close_r+0x1a>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20001500 	.word	0x20001500

080081fc <_fstat_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d07      	ldr	r5, [pc, #28]	; (800821c <_fstat_r+0x20>)
 8008200:	2300      	movs	r3, #0
 8008202:	4604      	mov	r4, r0
 8008204:	4608      	mov	r0, r1
 8008206:	4611      	mov	r1, r2
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	f7f9 fe90 	bl	8001f2e <_fstat>
 800820e:	1c43      	adds	r3, r0, #1
 8008210:	d102      	bne.n	8008218 <_fstat_r+0x1c>
 8008212:	682b      	ldr	r3, [r5, #0]
 8008214:	b103      	cbz	r3, 8008218 <_fstat_r+0x1c>
 8008216:	6023      	str	r3, [r4, #0]
 8008218:	bd38      	pop	{r3, r4, r5, pc}
 800821a:	bf00      	nop
 800821c:	20001500 	.word	0x20001500

08008220 <_isatty_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4d06      	ldr	r5, [pc, #24]	; (800823c <_isatty_r+0x1c>)
 8008224:	2300      	movs	r3, #0
 8008226:	4604      	mov	r4, r0
 8008228:	4608      	mov	r0, r1
 800822a:	602b      	str	r3, [r5, #0]
 800822c:	f7f9 fe8f 	bl	8001f4e <_isatty>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d102      	bne.n	800823a <_isatty_r+0x1a>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	b103      	cbz	r3, 800823a <_isatty_r+0x1a>
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	20001500 	.word	0x20001500

08008240 <_lseek_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4d07      	ldr	r5, [pc, #28]	; (8008260 <_lseek_r+0x20>)
 8008244:	4604      	mov	r4, r0
 8008246:	4608      	mov	r0, r1
 8008248:	4611      	mov	r1, r2
 800824a:	2200      	movs	r2, #0
 800824c:	602a      	str	r2, [r5, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	f7f9 fe88 	bl	8001f64 <_lseek>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d102      	bne.n	800825e <_lseek_r+0x1e>
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	b103      	cbz	r3, 800825e <_lseek_r+0x1e>
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	20001500 	.word	0x20001500

08008264 <_read_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4d07      	ldr	r5, [pc, #28]	; (8008284 <_read_r+0x20>)
 8008268:	4604      	mov	r4, r0
 800826a:	4608      	mov	r0, r1
 800826c:	4611      	mov	r1, r2
 800826e:	2200      	movs	r2, #0
 8008270:	602a      	str	r2, [r5, #0]
 8008272:	461a      	mov	r2, r3
 8008274:	f7f9 fe16 	bl	8001ea4 <_read>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d102      	bne.n	8008282 <_read_r+0x1e>
 800827c:	682b      	ldr	r3, [r5, #0]
 800827e:	b103      	cbz	r3, 8008282 <_read_r+0x1e>
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	bd38      	pop	{r3, r4, r5, pc}
 8008284:	20001500 	.word	0x20001500

08008288 <_init>:
 8008288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800828a:	bf00      	nop
 800828c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828e:	bc08      	pop	{r3}
 8008290:	469e      	mov	lr, r3
 8008292:	4770      	bx	lr

08008294 <_fini>:
 8008294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008296:	bf00      	nop
 8008298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800829a:	bc08      	pop	{r3}
 800829c:	469e      	mov	lr, r3
 800829e:	4770      	bx	lr
