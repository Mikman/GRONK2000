
STM32_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026c8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080027d8  080027d8  000127d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002800  08002800  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002800  08002800  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002800  08002800  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002800  08002800  00012800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002804  08002804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002808  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002814  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002814  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063c7  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011f4  00000000  00000000  000263fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  000275f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000618  00000000  00000000  00027c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d5e  00000000  00000000  00028290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008187  00000000  00000000  0003dfee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007de9e  00000000  00000000  00046175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4013  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001abc  00000000  00000000  000c4068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	080027c0 	.word	0x080027c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	080027c0 	.word	0x080027c0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2f>:
 80004c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80004cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80004d0:	bf24      	itt	cs
 80004d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80004d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80004da:	d90d      	bls.n	80004f8 <__aeabi_d2f+0x30>
 80004dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80004e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80004e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80004ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80004f0:	bf08      	it	eq
 80004f2:	f020 0001 	biceq.w	r0, r0, #1
 80004f6:	4770      	bx	lr
 80004f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80004fc:	d121      	bne.n	8000542 <__aeabi_d2f+0x7a>
 80004fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000502:	bfbc      	itt	lt
 8000504:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000508:	4770      	bxlt	lr
 800050a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000512:	f1c2 0218 	rsb	r2, r2, #24
 8000516:	f1c2 0c20 	rsb	ip, r2, #32
 800051a:	fa10 f30c 	lsls.w	r3, r0, ip
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	bf18      	it	ne
 8000524:	f040 0001 	orrne.w	r0, r0, #1
 8000528:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800052c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000530:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000534:	ea40 000c 	orr.w	r0, r0, ip
 8000538:	fa23 f302 	lsr.w	r3, r3, r2
 800053c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000540:	e7cc      	b.n	80004dc <__aeabi_d2f+0x14>
 8000542:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000546:	d107      	bne.n	8000558 <__aeabi_d2f+0x90>
 8000548:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800054c:	bf1e      	ittt	ne
 800054e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000552:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000556:	4770      	bxne	lr
 8000558:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800055c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000560:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	// En enumeration der beskriver en evt. fejl
	HAL_StatusTypeDef returnValue = HAL_ERROR;
 800056e:	2301      	movs	r3, #1
 8000570:	77fb      	strb	r3, [r7, #31]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000572:	f000 fa1f 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000576:	f000 f89d 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057a:	f000 f905 	bl	8000788 <MX_GPIO_Init>
  MX_I2C1_Init();
 800057e:	f000 f8d5 	bl	800072c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  tempBuf[0] = configRegister;
 8000582:	2334      	movs	r3, #52	; 0x34
 8000584:	703b      	strb	r3, [r7, #0]
  tempBuf[1] = 0b00001000;
 8000586:	2308      	movs	r3, #8
 8000588:	707b      	strb	r3, [r7, #1]

  HAL_I2C_Master_Transmit(&hi2c1, MPU_Address, tempBuf, 1, HAL_MAX_DELAY);
 800058a:	23d0      	movs	r3, #208	; 0xd0
 800058c:	b299      	uxth	r1, r3
 800058e:	463a      	mov	r2, r7
 8000590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2301      	movs	r3, #1
 8000598:	4843      	ldr	r0, [pc, #268]	; (80006a8 <main+0x140>)
 800059a:	f000 fe55 	bl	8001248 <HAL_I2C_Master_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005a4:	4841      	ldr	r0, [pc, #260]	; (80006ac <main+0x144>)
 80005a6:	f000 fcf3 	bl	8000f90 <HAL_GPIO_WritePin>
	  tempBuf[0] = MPU_TempRegMSB;
 80005aa:	2384      	movs	r3, #132	; 0x84
 80005ac:	703b      	strb	r3, [r7, #0]
	  tempBuf[1] = MPU_TempRegLSB;
 80005ae:	2382      	movs	r3, #130	; 0x82
 80005b0:	707b      	strb	r3, [r7, #1]

	  returnValue = HAL_I2C_Master_Transmit(&hi2c1, MPU_Address, tempBuf, 1, HAL_MAX_DELAY);
 80005b2:	23d0      	movs	r3, #208	; 0xd0
 80005b4:	b299      	uxth	r1, r3
 80005b6:	463a      	mov	r2, r7
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2301      	movs	r3, #1
 80005c0:	4839      	ldr	r0, [pc, #228]	; (80006a8 <main+0x140>)
 80005c2:	f000 fe41 	bl	8001248 <HAL_I2C_Master_Transmit>
 80005c6:	4603      	mov	r3, r0
 80005c8:	77fb      	strb	r3, [r7, #31]

	  if (returnValue != HAL_OK){
 80005ca:	7ffb      	ldrb	r3, [r7, #31]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d010      	beq.n	80005f2 <main+0x8a>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d6:	4835      	ldr	r0, [pc, #212]	; (80006ac <main+0x144>)
 80005d8:	f000 fcda 	bl	8000f90 <HAL_GPIO_WritePin>
		  HAL_Delay(2000);
 80005dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005e0:	f000 fa4a 	bl	8000a78 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ea:	4830      	ldr	r0, [pc, #192]	; (80006ac <main+0x144>)
 80005ec:	f000 fcd0 	bl	8000f90 <HAL_GPIO_WritePin>
 80005f0:	e00b      	b.n	800060a <main+0xa2>
	  }else{
		  returnValue = HAL_I2C_Master_Receive(&hi2c1, MPU_Address, tempBuf, 2, HAL_MAX_DELAY);
 80005f2:	23d0      	movs	r3, #208	; 0xd0
 80005f4:	b299      	uxth	r1, r3
 80005f6:	463a      	mov	r2, r7
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2302      	movs	r3, #2
 8000600:	4829      	ldr	r0, [pc, #164]	; (80006a8 <main+0x140>)
 8000602:	f000 ff1f 	bl	8001444 <HAL_I2C_Master_Receive>
 8000606:	4603      	mov	r3, r0
 8000608:	77fb      	strb	r3, [r7, #31]
	  }

	  if (returnValue != HAL_OK){
 800060a:	7ffb      	ldrb	r3, [r7, #31]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d01d      	beq.n	800064c <main+0xe4>

		  for(int i = 0 ; i < 5 ; i = i + 1){
 8000610:	2300      	movs	r3, #0
 8000612:	61bb      	str	r3, [r7, #24]
 8000614:	e016      	b.n	8000644 <main+0xdc>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061c:	4823      	ldr	r0, [pc, #140]	; (80006ac <main+0x144>)
 800061e:	f000 fcb7 	bl	8000f90 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 8000622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000626:	f000 fa27 	bl	8000a78 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000630:	481e      	ldr	r0, [pc, #120]	; (80006ac <main+0x144>)
 8000632:	f000 fcad 	bl	8000f90 <HAL_GPIO_WritePin>
			  HAL_Delay(500);
 8000636:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800063a:	f000 fa1d 	bl	8000a78 <HAL_Delay>
		  for(int i = 0 ; i < 5 ; i = i + 1){
 800063e:	69bb      	ldr	r3, [r7, #24]
 8000640:	3301      	adds	r3, #1
 8000642:	61bb      	str	r3, [r7, #24]
 8000644:	69bb      	ldr	r3, [r7, #24]
 8000646:	2b04      	cmp	r3, #4
 8000648:	dde5      	ble.n	8000616 <main+0xae>
 800064a:	e7a8      	b.n	800059e <main+0x36>
		  }

	  }else {

		  // sammensætning af rå data
		  rawTempVal = ((int16_t)tempBuf[0] << 8 | tempBuf[1]);
 800064c:	783b      	ldrb	r3, [r7, #0]
 800064e:	021b      	lsls	r3, r3, #8
 8000650:	b21a      	sxth	r2, r3
 8000652:	787b      	ldrb	r3, [r7, #1]
 8000654:	b21b      	sxth	r3, r3
 8000656:	4313      	orrs	r3, r2
 8000658:	82fb      	strh	r3, [r7, #22]
		  tempVal = (rawTempVal)/340 + 36.53;
 800065a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <main+0x148>)
 8000660:	fb82 1203 	smull	r1, r2, r2, r3
 8000664:	11d2      	asrs	r2, r2, #7
 8000666:	17db      	asrs	r3, r3, #31
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	b21b      	sxth	r3, r3
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fec1 	bl	80003f4 <__aeabi_i2d>
 8000672:	a30b      	add	r3, pc, #44	; (adr r3, 80006a0 <main+0x138>)
 8000674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000678:	f7ff fd70 	bl	800015c <__adddf3>
 800067c:	4602      	mov	r2, r0
 800067e:	460b      	mov	r3, r1
 8000680:	4610      	mov	r0, r2
 8000682:	4619      	mov	r1, r3
 8000684:	f7ff ff20 	bl	80004c8 <__aeabi_d2f>
 8000688:	4603      	mov	r3, r0
 800068a:	613b      	str	r3, [r7, #16]
		  rawTempVal = ((int16_t)tempBuf[0] << 8 | tempBuf[1]);
 800068c:	783b      	ldrb	r3, [r7, #0]
 800068e:	021b      	lsls	r3, r3, #8
 8000690:	b21a      	sxth	r2, r3
 8000692:	787b      	ldrb	r3, [r7, #1]
 8000694:	b21b      	sxth	r3, r3
 8000696:	4313      	orrs	r3, r2
 8000698:	82fb      	strh	r3, [r7, #22]
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800069a:	e780      	b.n	800059e <main+0x36>
 800069c:	f3af 8000 	nop.w
 80006a0:	0a3d70a4 	.word	0x0a3d70a4
 80006a4:	404243d7 	.word	0x404243d7
 80006a8:	20000028 	.word	0x20000028
 80006ac:	40011000 	.word	0x40011000
 80006b0:	60606061 	.word	0x60606061

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b090      	sub	sp, #64	; 0x40
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	2228      	movs	r2, #40	; 0x28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 f874 	bl	80027b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006da:	2301      	movs	r3, #1
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006de:	2310      	movs	r3, #16
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0318 	add.w	r3, r7, #24
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fc36 	bl	8001f5c <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80006f6:	f000 f893 	bl	8000820 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fea2 	bl	800245c <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800071e:	f000 f87f 	bl	8000820 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3740      	adds	r7, #64	; 0x40
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C1_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_I2C1_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C1_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_I2C1_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C1_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_I2C1_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_I2C1_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_I2C1_Init+0x50>)
 800076a:	f000 fc29 	bl	8000fc0 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 f854 	bl	8000820 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	20000028 	.word	0x20000028
 8000780:	40005400 	.word	0x40005400
 8000784:	000186a0 	.word	0x000186a0

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 0310 	add.w	r3, r7, #16
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_GPIO_Init+0x90>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a1d      	ldr	r2, [pc, #116]	; (8000818 <MX_GPIO_Init+0x90>)
 80007a2:	f043 0310 	orr.w	r3, r3, #16
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_GPIO_Init+0x90>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0310 	and.w	r3, r3, #16
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_GPIO_Init+0x90>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a17      	ldr	r2, [pc, #92]	; (8000818 <MX_GPIO_Init+0x90>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_GPIO_Init+0x90>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007cc:	4b12      	ldr	r3, [pc, #72]	; (8000818 <MX_GPIO_Init+0x90>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a11      	ldr	r2, [pc, #68]	; (8000818 <MX_GPIO_Init+0x90>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <MX_GPIO_Init+0x90>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0308 	and.w	r3, r3, #8
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ea:	480c      	ldr	r0, [pc, #48]	; (800081c <MX_GPIO_Init+0x94>)
 80007ec:	f000 fbd0 	bl	8000f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2302      	movs	r3, #2
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0310 	add.w	r3, r7, #16
 8000806:	4619      	mov	r1, r3
 8000808:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_GPIO_Init+0x94>)
 800080a:	f000 fa3d 	bl	8000c88 <HAL_GPIO_Init>

}
 800080e:	bf00      	nop
 8000810:	3720      	adds	r7, #32
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40021000 	.word	0x40021000
 800081c:	40011000 	.word	0x40011000

08000820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000824:	b672      	cpsid	i
}
 8000826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000828:	e7fe      	b.n	8000828 <Error_Handler+0x8>
	...

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <HAL_MspInit+0x5c>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	4a14      	ldr	r2, [pc, #80]	; (8000888 <HAL_MspInit+0x5c>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6193      	str	r3, [r2, #24]
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <HAL_MspInit+0x5c>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <HAL_MspInit+0x5c>)
 800084c:	69db      	ldr	r3, [r3, #28]
 800084e:	4a0e      	ldr	r2, [pc, #56]	; (8000888 <HAL_MspInit+0x5c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	61d3      	str	r3, [r2, #28]
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_MspInit+0x5c>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000862:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_MspInit+0x60>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_MspInit+0x60>)
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	40021000 	.word	0x40021000
 800088c:	40010000 	.word	0x40010000

08000890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a15      	ldr	r2, [pc, #84]	; (8000900 <HAL_I2C_MspInit+0x70>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d123      	bne.n	80008f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b0:	4b14      	ldr	r3, [pc, #80]	; (8000904 <HAL_I2C_MspInit+0x74>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a13      	ldr	r2, [pc, #76]	; (8000904 <HAL_I2C_MspInit+0x74>)
 80008b6:	f043 0308 	orr.w	r3, r3, #8
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <HAL_I2C_MspInit+0x74>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0308 	and.w	r3, r3, #8
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008c8:	23c0      	movs	r3, #192	; 0xc0
 80008ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008cc:	2312      	movs	r3, #18
 80008ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d0:	2303      	movs	r3, #3
 80008d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	480b      	ldr	r0, [pc, #44]	; (8000908 <HAL_I2C_MspInit+0x78>)
 80008dc:	f000 f9d4 	bl	8000c88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_I2C_MspInit+0x74>)
 80008e2:	69db      	ldr	r3, [r3, #28]
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_I2C_MspInit+0x74>)
 80008e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ea:	61d3      	str	r3, [r2, #28]
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_I2C_MspInit+0x74>)
 80008ee:	69db      	ldr	r3, [r3, #28]
 80008f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40005400 	.word	0x40005400
 8000904:	40021000 	.word	0x40021000
 8000908:	40010c00 	.word	0x40010c00

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	e7fe      	b.n	800091c <MemManage_Handler+0x4>

0800091e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <BusFault_Handler+0x4>

08000924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <UsageFault_Handler+0x4>

0800092a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f000 f875 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}

0800095a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
	...

08000968 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000968:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800096a:	e003      	b.n	8000974 <LoopCopyDataInit>

0800096c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800096c:	4b0b      	ldr	r3, [pc, #44]	; (800099c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800096e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000970:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000972:	3104      	adds	r1, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000974:	480a      	ldr	r0, [pc, #40]	; (80009a0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000978:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800097a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800097c:	d3f6      	bcc.n	800096c <CopyDataInit>
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000980:	e002      	b.n	8000988 <LoopFillZerobss>

08000982 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000984:	f842 3b04 	str.w	r3, [r2], #4

08000988 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <LoopFillZerobss+0x24>)
  cmp r2, r3
 800098a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800098c:	d3f9      	bcc.n	8000982 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800098e:	f7ff ffe4 	bl	800095a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000992:	f001 fee9 	bl	8002768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000996:	f7ff fde7 	bl	8000568 <main>
  bx lr
 800099a:	4770      	bx	lr
  ldr r3, =_sidata
 800099c:	08002808 	.word	0x08002808
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80009a8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80009ac:	20000080 	.word	0x20000080

080009b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_2_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_Init+0x28>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_Init+0x28>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f92b 	bl	8000c20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 f808 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff ff2c 	bl	800082c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x54>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x58>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f935 	bl	8000c6e <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00e      	b.n	8000a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d80a      	bhi.n	8000a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a1c:	f000 f90b 	bl	8000c36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_InitTick+0x5c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x1c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x20>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <HAL_IncTick+0x20>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	2000007c 	.word	0x2000007c

08000a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <HAL_GetTick+0x10>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	2000007c 	.word	0x2000007c

08000a78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a80:	f7ff fff0 	bl	8000a64 <HAL_GetTick>
 8000a84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a90:	d005      	beq.n	8000a9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a92:	4b0a      	ldr	r3, [pc, #40]	; (8000abc <HAL_Delay+0x44>)
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	461a      	mov	r2, r3
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a9e:	bf00      	nop
 8000aa0:	f7ff ffe0 	bl	8000a64 <HAL_GetTick>
 8000aa4:	4602      	mov	r2, r0
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d8f7      	bhi.n	8000aa0 <HAL_Delay+0x28>
  {
  }
}
 8000ab0:	bf00      	nop
 8000ab2:	bf00      	nop
 8000ab4:	3710      	adds	r7, #16
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000008 	.word	0x20000008

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bec:	d301      	bcc.n	8000bf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00f      	b.n	8000c12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <SysTick_Config+0x40>)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfa:	210f      	movs	r1, #15
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c00:	f7ff ff90 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c04:	4b05      	ldr	r3, [pc, #20]	; (8000c1c <SysTick_Config+0x40>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0a:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <SysTick_Config+0x40>)
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	e000e010 	.word	0xe000e010

08000c20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff ff49 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b086      	sub	sp, #24
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	60b9      	str	r1, [r7, #8]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff5e 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff90 	bl	8000b78 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5f 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffb0 	bl	8000bdc <SysTick_Config>
 8000c7c:	4603      	mov	r3, r0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b08b      	sub	sp, #44	; 0x2c
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c96:	2300      	movs	r3, #0
 8000c98:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9a:	e169      	b.n	8000f70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	69fa      	ldr	r2, [r7, #28]
 8000cac:	4013      	ands	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	f040 8158 	bne.w	8000f6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	4a9a      	ldr	r2, [pc, #616]	; (8000f28 <HAL_GPIO_Init+0x2a0>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d05e      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cc4:	4a98      	ldr	r2, [pc, #608]	; (8000f28 <HAL_GPIO_Init+0x2a0>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d875      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cca:	4a98      	ldr	r2, [pc, #608]	; (8000f2c <HAL_GPIO_Init+0x2a4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d058      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cd0:	4a96      	ldr	r2, [pc, #600]	; (8000f2c <HAL_GPIO_Init+0x2a4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d86f      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cd6:	4a96      	ldr	r2, [pc, #600]	; (8000f30 <HAL_GPIO_Init+0x2a8>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d052      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cdc:	4a94      	ldr	r2, [pc, #592]	; (8000f30 <HAL_GPIO_Init+0x2a8>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d869      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000ce2:	4a94      	ldr	r2, [pc, #592]	; (8000f34 <HAL_GPIO_Init+0x2ac>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d04c      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000ce8:	4a92      	ldr	r2, [pc, #584]	; (8000f34 <HAL_GPIO_Init+0x2ac>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d863      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cee:	4a92      	ldr	r2, [pc, #584]	; (8000f38 <HAL_GPIO_Init+0x2b0>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d046      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
 8000cf4:	4a90      	ldr	r2, [pc, #576]	; (8000f38 <HAL_GPIO_Init+0x2b0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d85d      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000cfa:	2b12      	cmp	r3, #18
 8000cfc:	d82a      	bhi.n	8000d54 <HAL_GPIO_Init+0xcc>
 8000cfe:	2b12      	cmp	r3, #18
 8000d00:	d859      	bhi.n	8000db6 <HAL_GPIO_Init+0x12e>
 8000d02:	a201      	add	r2, pc, #4	; (adr r2, 8000d08 <HAL_GPIO_Init+0x80>)
 8000d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d08:	08000d83 	.word	0x08000d83
 8000d0c:	08000d5d 	.word	0x08000d5d
 8000d10:	08000d6f 	.word	0x08000d6f
 8000d14:	08000db1 	.word	0x08000db1
 8000d18:	08000db7 	.word	0x08000db7
 8000d1c:	08000db7 	.word	0x08000db7
 8000d20:	08000db7 	.word	0x08000db7
 8000d24:	08000db7 	.word	0x08000db7
 8000d28:	08000db7 	.word	0x08000db7
 8000d2c:	08000db7 	.word	0x08000db7
 8000d30:	08000db7 	.word	0x08000db7
 8000d34:	08000db7 	.word	0x08000db7
 8000d38:	08000db7 	.word	0x08000db7
 8000d3c:	08000db7 	.word	0x08000db7
 8000d40:	08000db7 	.word	0x08000db7
 8000d44:	08000db7 	.word	0x08000db7
 8000d48:	08000db7 	.word	0x08000db7
 8000d4c:	08000d65 	.word	0x08000d65
 8000d50:	08000d79 	.word	0x08000d79
 8000d54:	4a79      	ldr	r2, [pc, #484]	; (8000f3c <HAL_GPIO_Init+0x2b4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d013      	beq.n	8000d82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d5a:	e02c      	b.n	8000db6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e029      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	3304      	adds	r3, #4
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e024      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	3308      	adds	r3, #8
 8000d74:	623b      	str	r3, [r7, #32]
          break;
 8000d76:	e01f      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	68db      	ldr	r3, [r3, #12]
 8000d7c:	330c      	adds	r3, #12
 8000d7e:	623b      	str	r3, [r7, #32]
          break;
 8000d80:	e01a      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d8a:	2304      	movs	r3, #4
 8000d8c:	623b      	str	r3, [r7, #32]
          break;
 8000d8e:	e013      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d105      	bne.n	8000da4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	611a      	str	r2, [r3, #16]
          break;
 8000da2:	e009      	b.n	8000db8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000da4:	2308      	movs	r3, #8
 8000da6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	69fa      	ldr	r2, [r7, #28]
 8000dac:	615a      	str	r2, [r3, #20]
          break;
 8000dae:	e003      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
          break;
 8000db4:	e000      	b.n	8000db8 <HAL_GPIO_Init+0x130>
          break;
 8000db6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	2bff      	cmp	r3, #255	; 0xff
 8000dbc:	d801      	bhi.n	8000dc2 <HAL_GPIO_Init+0x13a>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	e001      	b.n	8000dc6 <HAL_GPIO_Init+0x13e>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	2bff      	cmp	r3, #255	; 0xff
 8000dcc:	d802      	bhi.n	8000dd4 <HAL_GPIO_Init+0x14c>
 8000dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	e002      	b.n	8000dda <HAL_GPIO_Init+0x152>
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	3b08      	subs	r3, #8
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	210f      	movs	r1, #15
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	401a      	ands	r2, r3
 8000dec:	6a39      	ldr	r1, [r7, #32]
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	431a      	orrs	r2, r3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 80b1 	beq.w	8000f6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e08:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	4a4c      	ldr	r2, [pc, #304]	; (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6193      	str	r3, [r2, #24]
 8000e14:	4b4a      	ldr	r3, [pc, #296]	; (8000f40 <HAL_GPIO_Init+0x2b8>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e20:	4a48      	ldr	r2, [pc, #288]	; (8000f44 <HAL_GPIO_Init+0x2bc>)
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	3302      	adds	r3, #2
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	220f      	movs	r2, #15
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	4a40      	ldr	r2, [pc, #256]	; (8000f48 <HAL_GPIO_Init+0x2c0>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d013      	beq.n	8000e74 <HAL_GPIO_Init+0x1ec>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a3f      	ldr	r2, [pc, #252]	; (8000f4c <HAL_GPIO_Init+0x2c4>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d00d      	beq.n	8000e70 <HAL_GPIO_Init+0x1e8>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a3e      	ldr	r2, [pc, #248]	; (8000f50 <HAL_GPIO_Init+0x2c8>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d007      	beq.n	8000e6c <HAL_GPIO_Init+0x1e4>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a3d      	ldr	r2, [pc, #244]	; (8000f54 <HAL_GPIO_Init+0x2cc>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d101      	bne.n	8000e68 <HAL_GPIO_Init+0x1e0>
 8000e64:	2303      	movs	r3, #3
 8000e66:	e006      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e68:	2304      	movs	r3, #4
 8000e6a:	e004      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e002      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e70:	2301      	movs	r3, #1
 8000e72:	e000      	b.n	8000e76 <HAL_GPIO_Init+0x1ee>
 8000e74:	2300      	movs	r3, #0
 8000e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e78:	f002 0203 	and.w	r2, r2, #3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4093      	lsls	r3, r2
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e86:	492f      	ldr	r1, [pc, #188]	; (8000f44 <HAL_GPIO_Init+0x2bc>)
 8000e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3302      	adds	r3, #2
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ea0:	4b2d      	ldr	r3, [pc, #180]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	492c      	ldr	r1, [pc, #176]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	600b      	str	r3, [r1, #0]
 8000eac:	e006      	b.n	8000ebc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000eae:	4b2a      	ldr	r3, [pc, #168]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	4928      	ldr	r1, [pc, #160]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d006      	beq.n	8000ed6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ec8:	4b23      	ldr	r3, [pc, #140]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	4922      	ldr	r1, [pc, #136]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	604b      	str	r3, [r1, #4]
 8000ed4:	e006      	b.n	8000ee4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ed6:	4b20      	ldr	r3, [pc, #128]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ed8:	685a      	ldr	r2, [r3, #4]
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	491e      	ldr	r1, [pc, #120]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ef2:	689a      	ldr	r2, [r3, #8]
 8000ef4:	4918      	ldr	r1, [pc, #96]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000ef6:	69bb      	ldr	r3, [r7, #24]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	608b      	str	r3, [r1, #8]
 8000efc:	e006      	b.n	8000f0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	4914      	ldr	r1, [pc, #80]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f08:	4013      	ands	r3, r2
 8000f0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d021      	beq.n	8000f5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	490e      	ldr	r1, [pc, #56]	; (8000f58 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	69bb      	ldr	r3, [r7, #24]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	60cb      	str	r3, [r1, #12]
 8000f24:	e021      	b.n	8000f6a <HAL_GPIO_Init+0x2e2>
 8000f26:	bf00      	nop
 8000f28:	10320000 	.word	0x10320000
 8000f2c:	10310000 	.word	0x10310000
 8000f30:	10220000 	.word	0x10220000
 8000f34:	10210000 	.word	0x10210000
 8000f38:	10120000 	.word	0x10120000
 8000f3c:	10110000 	.word	0x10110000
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40010000 	.word	0x40010000
 8000f48:	40010800 	.word	0x40010800
 8000f4c:	40010c00 	.word	0x40010c00
 8000f50:	40011000 	.word	0x40011000
 8000f54:	40011400 	.word	0x40011400
 8000f58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000f5e:	68da      	ldr	r2, [r3, #12]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	4909      	ldr	r1, [pc, #36]	; (8000f8c <HAL_GPIO_Init+0x304>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f76:	fa22 f303 	lsr.w	r3, r2, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f47f ae8e 	bne.w	8000c9c <HAL_GPIO_Init+0x14>
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	372c      	adds	r7, #44	; 0x2c
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr
 8000f8c:	40010400 	.word	0x40010400

08000f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa0:	787b      	ldrb	r3, [r7, #1]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa6:	887a      	ldrh	r2, [r7, #2]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fac:	e003      	b.n	8000fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fae:	887b      	ldrh	r3, [r7, #2]
 8000fb0:	041a      	lsls	r2, r3, #16
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	611a      	str	r2, [r3, #16]
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e12b      	b.n	800122a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d106      	bne.n	8000fec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fc52 	bl	8000890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2224      	movs	r2, #36	; 0x24
 8000ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001012:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001022:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001024:	f001 fb6e 	bl	8002704 <HAL_RCC_GetPCLK1Freq>
 8001028:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	4a81      	ldr	r2, [pc, #516]	; (8001234 <HAL_I2C_Init+0x274>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d807      	bhi.n	8001044 <HAL_I2C_Init+0x84>
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4a80      	ldr	r2, [pc, #512]	; (8001238 <HAL_I2C_Init+0x278>)
 8001038:	4293      	cmp	r3, r2
 800103a:	bf94      	ite	ls
 800103c:	2301      	movls	r3, #1
 800103e:	2300      	movhi	r3, #0
 8001040:	b2db      	uxtb	r3, r3
 8001042:	e006      	b.n	8001052 <HAL_I2C_Init+0x92>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4a7d      	ldr	r2, [pc, #500]	; (800123c <HAL_I2C_Init+0x27c>)
 8001048:	4293      	cmp	r3, r2
 800104a:	bf94      	ite	ls
 800104c:	2301      	movls	r3, #1
 800104e:	2300      	movhi	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e0e7      	b.n	800122a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4a78      	ldr	r2, [pc, #480]	; (8001240 <HAL_I2C_Init+0x280>)
 800105e:	fba2 2303 	umull	r2, r3, r2, r3
 8001062:	0c9b      	lsrs	r3, r3, #18
 8001064:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	430a      	orrs	r2, r1
 8001078:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	4a6a      	ldr	r2, [pc, #424]	; (8001234 <HAL_I2C_Init+0x274>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d802      	bhi.n	8001094 <HAL_I2C_Init+0xd4>
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	3301      	adds	r3, #1
 8001092:	e009      	b.n	80010a8 <HAL_I2C_Init+0xe8>
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	4a69      	ldr	r2, [pc, #420]	; (8001244 <HAL_I2C_Init+0x284>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	099b      	lsrs	r3, r3, #6
 80010a6:	3301      	adds	r3, #1
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	6812      	ldr	r2, [r2, #0]
 80010ac:	430b      	orrs	r3, r1
 80010ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	495c      	ldr	r1, [pc, #368]	; (8001234 <HAL_I2C_Init+0x274>)
 80010c4:	428b      	cmp	r3, r1
 80010c6:	d819      	bhi.n	80010fc <HAL_I2C_Init+0x13c>
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1e59      	subs	r1, r3, #1
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80010d6:	1c59      	adds	r1, r3, #1
 80010d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010dc:	400b      	ands	r3, r1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00a      	beq.n	80010f8 <HAL_I2C_Init+0x138>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	1e59      	subs	r1, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80010f0:	3301      	adds	r3, #1
 80010f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f6:	e051      	b.n	800119c <HAL_I2C_Init+0x1dc>
 80010f8:	2304      	movs	r3, #4
 80010fa:	e04f      	b.n	800119c <HAL_I2C_Init+0x1dc>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d111      	bne.n	8001128 <HAL_I2C_Init+0x168>
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	1e58      	subs	r0, r3, #1
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6859      	ldr	r1, [r3, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	440b      	add	r3, r1
 8001112:	fbb0 f3f3 	udiv	r3, r0, r3
 8001116:	3301      	adds	r3, #1
 8001118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf0c      	ite	eq
 8001120:	2301      	moveq	r3, #1
 8001122:	2300      	movne	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	e012      	b.n	800114e <HAL_I2C_Init+0x18e>
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	1e58      	subs	r0, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6859      	ldr	r1, [r3, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	0099      	lsls	r1, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	fbb0 f3f3 	udiv	r3, r0, r3
 800113e:	3301      	adds	r3, #1
 8001140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001144:	2b00      	cmp	r3, #0
 8001146:	bf0c      	ite	eq
 8001148:	2301      	moveq	r3, #1
 800114a:	2300      	movne	r3, #0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_I2C_Init+0x196>
 8001152:	2301      	movs	r3, #1
 8001154:	e022      	b.n	800119c <HAL_I2C_Init+0x1dc>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d10e      	bne.n	800117c <HAL_I2C_Init+0x1bc>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1e58      	subs	r0, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6859      	ldr	r1, [r3, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	440b      	add	r3, r1
 800116c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001170:	3301      	adds	r3, #1
 8001172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117a:	e00f      	b.n	800119c <HAL_I2C_Init+0x1dc>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1e58      	subs	r0, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6859      	ldr	r1, [r3, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	440b      	add	r3, r1
 800118a:	0099      	lsls	r1, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001192:	3301      	adds	r3, #1
 8001194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001198:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	6809      	ldr	r1, [r1, #0]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	69da      	ldr	r2, [r3, #28]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	430a      	orrs	r2, r1
 80011be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6911      	ldr	r1, [r2, #16]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68d2      	ldr	r2, [r2, #12]
 80011d6:	4311      	orrs	r1, r2
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	430b      	orrs	r3, r1
 80011de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	431a      	orrs	r2, r3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2220      	movs	r2, #32
 8001216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	000186a0 	.word	0x000186a0
 8001238:	001e847f 	.word	0x001e847f
 800123c:	003d08ff 	.word	0x003d08ff
 8001240:	431bde83 	.word	0x431bde83
 8001244:	10624dd3 	.word	0x10624dd3

08001248 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af02      	add	r7, sp, #8
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	461a      	mov	r2, r3
 8001254:	460b      	mov	r3, r1
 8001256:	817b      	strh	r3, [r7, #10]
 8001258:	4613      	mov	r3, r2
 800125a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff fc02 	bl	8000a64 <HAL_GetTick>
 8001260:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b20      	cmp	r3, #32
 800126c:	f040 80e0 	bne.w	8001430 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2319      	movs	r3, #25
 8001276:	2201      	movs	r2, #1
 8001278:	4970      	ldr	r1, [pc, #448]	; (800143c <HAL_I2C_Master_Transmit+0x1f4>)
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f000 fc92 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001286:	2302      	movs	r3, #2
 8001288:	e0d3      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_I2C_Master_Transmit+0x50>
 8001294:	2302      	movs	r3, #2
 8001296:	e0cc      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d007      	beq.n	80012be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0201 	orr.w	r2, r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2221      	movs	r2, #33	; 0x21
 80012d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2210      	movs	r2, #16
 80012da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	893a      	ldrh	r2, [r7, #8]
 80012ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4a50      	ldr	r2, [pc, #320]	; (8001440 <HAL_I2C_Master_Transmit+0x1f8>)
 80012fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001300:	8979      	ldrh	r1, [r7, #10]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	6a3a      	ldr	r2, [r7, #32]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 fafc 	bl	8001904 <I2C_MasterRequestWrite>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e08d      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800132c:	e066      	b.n	80013fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800132e:	697a      	ldr	r2, [r7, #20]
 8001330:	6a39      	ldr	r1, [r7, #32]
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 fd0c 	bl	8001d50 <I2C_WaitOnTXEFlagUntilTimeout>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00d      	beq.n	800135a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	2b04      	cmp	r3, #4
 8001344:	d107      	bne.n	8001356 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001354:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e06b      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136a:	1c5a      	adds	r2, r3, #1
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001374:	b29b      	uxth	r3, r3
 8001376:	3b01      	subs	r3, #1
 8001378:	b29a      	uxth	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001382:	3b01      	subs	r3, #1
 8001384:	b29a      	uxth	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	695b      	ldr	r3, [r3, #20]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b04      	cmp	r3, #4
 8001396:	d11b      	bne.n	80013d0 <HAL_I2C_Master_Transmit+0x188>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800139c:	2b00      	cmp	r3, #0
 800139e:	d017      	beq.n	80013d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	781a      	ldrb	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3b01      	subs	r3, #1
 80013be:	b29a      	uxth	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b29a      	uxth	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	6a39      	ldr	r1, [r7, #32]
 80013d4:	68f8      	ldr	r0, [r7, #12]
 80013d6:	f000 fcfc 	bl	8001dd2 <I2C_WaitOnBTFFlagUntilTimeout>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d00d      	beq.n	80013fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d107      	bne.n	80013f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e01a      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001400:	2b00      	cmp	r3, #0
 8001402:	d194      	bne.n	800132e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001412:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2220      	movs	r2, #32
 8001418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2200      	movs	r2, #0
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	e000      	b.n	8001432 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001430:	2302      	movs	r3, #2
  }
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	00100002 	.word	0x00100002
 8001440:	ffff0000 	.word	0xffff0000

08001444 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af02      	add	r7, sp, #8
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	461a      	mov	r2, r3
 8001450:	460b      	mov	r3, r1
 8001452:	817b      	strh	r3, [r7, #10]
 8001454:	4613      	mov	r3, r2
 8001456:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff fb02 	bl	8000a64 <HAL_GetTick>
 8001460:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b20      	cmp	r3, #32
 800146c:	f040 823f 	bne.w	80018ee <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2319      	movs	r3, #25
 8001476:	2201      	movs	r2, #1
 8001478:	497f      	ldr	r1, [pc, #508]	; (8001678 <HAL_I2C_Master_Receive+0x234>)
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f000 fb92 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001486:	2302      	movs	r3, #2
 8001488:	e232      	b.n	80018f0 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001490:	2b01      	cmp	r3, #1
 8001492:	d101      	bne.n	8001498 <HAL_I2C_Master_Receive+0x54>
 8001494:	2302      	movs	r3, #2
 8001496:	e22b      	b.n	80018f0 <HAL_I2C_Master_Receive+0x4ac>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d007      	beq.n	80014be <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f042 0201 	orr.w	r2, r2, #1
 80014bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2222      	movs	r2, #34	; 0x22
 80014d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2210      	movs	r2, #16
 80014da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	893a      	ldrh	r2, [r7, #8]
 80014ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4a5f      	ldr	r2, [pc, #380]	; (800167c <HAL_I2C_Master_Receive+0x238>)
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001500:	8979      	ldrh	r1, [r7, #10]
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f000 fa7e 	bl	8001a08 <I2C_MasterRequestRead>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e1ec      	b.n	80018f0 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151a:	2b00      	cmp	r3, #0
 800151c:	d113      	bne.n	8001546 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	e1c0      	b.n	80018c8 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154a:	2b01      	cmp	r3, #1
 800154c:	d11e      	bne.n	800158c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800155c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800155e:	b672      	cpsid	i
}
 8001560:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001586:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001588:	b662      	cpsie	i
}
 800158a:	e035      	b.n	80015f8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001590:	2b02      	cmp	r3, #2
 8001592:	d11e      	bne.n	80015d2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	617b      	str	r3, [r7, #20]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80015ce:	b662      	cpsie	i
}
 80015d0:	e012      	b.n	80015f8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	613b      	str	r3, [r7, #16]
 80015f6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80015f8:	e166      	b.n	80018c8 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fe:	2b03      	cmp	r3, #3
 8001600:	f200 811f 	bhi.w	8001842 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001608:	2b01      	cmp	r3, #1
 800160a:	d123      	bne.n	8001654 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800160c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f000 fc1f 	bl	8001e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e167      	b.n	80018f0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	691a      	ldr	r2, [r3, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800163c:	3b01      	subs	r3, #1
 800163e:	b29a      	uxth	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001648:	b29b      	uxth	r3, r3
 800164a:	3b01      	subs	r3, #1
 800164c:	b29a      	uxth	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001652:	e139      	b.n	80018c8 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001658:	2b02      	cmp	r3, #2
 800165a:	d152      	bne.n	8001702 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001662:	2200      	movs	r2, #0
 8001664:	4906      	ldr	r1, [pc, #24]	; (8001680 <HAL_I2C_Master_Receive+0x23c>)
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f000 fa9c 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e13c      	b.n	80018f0 <HAL_I2C_Master_Receive+0x4ac>
 8001676:	bf00      	nop
 8001678:	00100002 	.word	0x00100002
 800167c:	ffff0000 	.word	0xffff0000
 8001680:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001684:	b672      	cpsid	i
}
 8001686:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001696:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	691a      	ldr	r2, [r3, #16]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3b01      	subs	r3, #1
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80016ca:	b662      	cpsie	i
}
 80016cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691a      	ldr	r2, [r3, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001700:	e0e2      	b.n	80018c8 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001708:	2200      	movs	r2, #0
 800170a:	497b      	ldr	r1, [pc, #492]	; (80018f8 <HAL_I2C_Master_Receive+0x4b4>)
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 fa49 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0e9      	b.n	80018f0 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800172a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800172c:	b672      	cpsid	i
}
 800172e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	3b01      	subs	r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001762:	4b66      	ldr	r3, [pc, #408]	; (80018fc <HAL_I2C_Master_Receive+0x4b8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	08db      	lsrs	r3, r3, #3
 8001768:	4a65      	ldr	r2, [pc, #404]	; (8001900 <HAL_I2C_Master_Receive+0x4bc>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0a1a      	lsrs	r2, r3, #8
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00da      	lsls	r2, r3, #3
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	3b01      	subs	r3, #1
 8001780:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001782:	6a3b      	ldr	r3, [r7, #32]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d118      	bne.n	80017ba <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2220      	movs	r2, #32
 8001792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f043 0220 	orr.w	r2, r3, #32
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80017aa:	b662      	cpsie	i
}
 80017ac:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e09a      	b.n	80018f0 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b04      	cmp	r3, #4
 80017c6:	d1d9      	bne.n	800177c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691a      	ldr	r2, [r3, #16]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017f4:	3b01      	subs	r3, #1
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001800:	b29b      	uxth	r3, r3
 8001802:	3b01      	subs	r3, #1
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800180a:	b662      	cpsie	i
}
 800180c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182a:	3b01      	subs	r3, #1
 800182c:	b29a      	uxth	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001836:	b29b      	uxth	r3, r3
 8001838:	3b01      	subs	r3, #1
 800183a:	b29a      	uxth	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001840:	e042      	b.n	80018c8 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001844:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 fb04 	bl	8001e54 <I2C_WaitOnRXNEFlagUntilTimeout>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e04c      	b.n	80018f0 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187e:	b29b      	uxth	r3, r3
 8001880:	3b01      	subs	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b04      	cmp	r3, #4
 8001894:	d118      	bne.n	80018c8 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a0:	b2d2      	uxtb	r2, r2
 80018a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b2:	3b01      	subs	r3, #1
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018be:	b29b      	uxth	r3, r3
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f47f ae94 	bne.w	80015fa <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2220      	movs	r2, #32
 80018d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	e000      	b.n	80018f0 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 80018ee:	2302      	movs	r3, #2
  }
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3728      	adds	r7, #40	; 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	00010004 	.word	0x00010004
 80018fc:	20000000 	.word	0x20000000
 8001900:	14f8b589 	.word	0x14f8b589

08001904 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	603b      	str	r3, [r7, #0]
 8001910:	460b      	mov	r3, r1
 8001912:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001918:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b08      	cmp	r3, #8
 800191e:	d006      	beq.n	800192e <I2C_MasterRequestWrite+0x2a>
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d003      	beq.n	800192e <I2C_MasterRequestWrite+0x2a>
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800192c:	d108      	bne.n	8001940 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	e00b      	b.n	8001958 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	2b12      	cmp	r3, #18
 8001946:	d107      	bne.n	8001958 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001956:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 f91d 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00d      	beq.n	800198c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800197e:	d103      	bne.n	8001988 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001986:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e035      	b.n	80019f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001994:	d108      	bne.n	80019a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001996:	897b      	ldrh	r3, [r7, #10]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	e01b      	b.n	80019e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019a8:	897b      	ldrh	r3, [r7, #10]
 80019aa:	11db      	asrs	r3, r3, #7
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	f003 0306 	and.w	r3, r3, #6
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f063 030f 	orn	r3, r3, #15
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	490e      	ldr	r1, [pc, #56]	; (8001a00 <I2C_MasterRequestWrite+0xfc>)
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f943 	bl	8001c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e010      	b.n	80019f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4907      	ldr	r1, [pc, #28]	; (8001a04 <I2C_MasterRequestWrite+0x100>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f000 f933 	bl	8001c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	00010008 	.word	0x00010008
 8001a04:	00010002 	.word	0x00010002

08001a08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	603b      	str	r3, [r7, #0]
 8001a14:	460b      	mov	r3, r1
 8001a16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d006      	beq.n	8001a42 <I2C_MasterRequestRead+0x3a>
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d003      	beq.n	8001a42 <I2C_MasterRequestRead+0x3a>
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a40:	d108      	bne.n	8001a54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	e00b      	b.n	8001a6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a58:	2b11      	cmp	r3, #17
 8001a5a:	d107      	bne.n	8001a6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f000 f893 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00d      	beq.n	8001aa0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a92:	d103      	bne.n	8001a9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e079      	b.n	8001b94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001aa8:	d108      	bne.n	8001abc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001aaa:	897b      	ldrh	r3, [r7, #10]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	b2da      	uxtb	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	611a      	str	r2, [r3, #16]
 8001aba:	e05f      	b.n	8001b7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001abc:	897b      	ldrh	r3, [r7, #10]
 8001abe:	11db      	asrs	r3, r3, #7
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f003 0306 	and.w	r3, r3, #6
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f063 030f 	orn	r3, r3, #15
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4930      	ldr	r1, [pc, #192]	; (8001b9c <I2C_MasterRequestRead+0x194>)
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f8b9 	bl	8001c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e054      	b.n	8001b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001aea:	897b      	ldrh	r3, [r7, #10]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	4929      	ldr	r1, [pc, #164]	; (8001ba0 <I2C_MasterRequestRead+0x198>)
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 f8a9 	bl	8001c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e044      	b.n	8001b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f831 	bl	8001ba4 <I2C_WaitOnFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00d      	beq.n	8001b64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b56:	d103      	bne.n	8001b60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b5e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e017      	b.n	8001b94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001b64:	897b      	ldrh	r3, [r7, #10]
 8001b66:	11db      	asrs	r3, r3, #7
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f003 0306 	and.w	r3, r3, #6
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	f063 030e 	orn	r3, r3, #14
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <I2C_MasterRequestRead+0x198>)
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f865 	bl	8001c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	00010008 	.word	0x00010008
 8001ba0:	00010002 	.word	0x00010002

08001ba4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bb4:	e025      	b.n	8001c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bbc:	d021      	beq.n	8001c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbe:	f7fe ff51 	bl	8000a64 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d302      	bcc.n	8001bd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d116      	bne.n	8001c02 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2220      	movs	r2, #32
 8001bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f043 0220 	orr.w	r2, r3, #32
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e023      	b.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	0c1b      	lsrs	r3, r3, #16
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d10d      	bne.n	8001c28 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4013      	ands	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	bf0c      	ite	eq
 8001c1e:	2301      	moveq	r3, #1
 8001c20:	2300      	movne	r3, #0
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	461a      	mov	r2, r3
 8001c26:	e00c      	b.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	699b      	ldr	r3, [r3, #24]
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4013      	ands	r3, r2
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	bf0c      	ite	eq
 8001c3a:	2301      	moveq	r3, #1
 8001c3c:	2300      	movne	r3, #0
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d0b6      	beq.n	8001bb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c60:	e051      	b.n	8001d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c70:	d123      	bne.n	8001cba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c80:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c8a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2220      	movs	r2, #32
 8001c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f043 0204 	orr.w	r2, r3, #4
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e046      	b.n	8001d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001cc0:	d021      	beq.n	8001d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc2:	f7fe fecf 	bl	8000a64 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d302      	bcc.n	8001cd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d116      	bne.n	8001d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f043 0220 	orr.w	r2, r3, #32
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e020      	b.n	8001d48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d10c      	bne.n	8001d2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	43da      	mvns	r2, r3
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf14      	ite	ne
 8001d22:	2301      	movne	r3, #1
 8001d24:	2300      	moveq	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	e00b      	b.n	8001d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	43da      	mvns	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	4013      	ands	r3, r2
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d18d      	bne.n	8001c62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d5c:	e02d      	b.n	8001dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f8ce 	bl	8001f00 <I2C_IsAcknowledgeFailed>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e02d      	b.n	8001dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d74:	d021      	beq.n	8001dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d76:	f7fe fe75 	bl	8000a64 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d302      	bcc.n	8001d8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d116      	bne.n	8001dba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f043 0220 	orr.w	r2, r3, #32
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e007      	b.n	8001dca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc4:	2b80      	cmp	r3, #128	; 0x80
 8001dc6:	d1ca      	bne.n	8001d5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001dde:	e02d      	b.n	8001e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f88d 	bl	8001f00 <I2C_IsAcknowledgeFailed>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e02d      	b.n	8001e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001df6:	d021      	beq.n	8001e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001df8:	f7fe fe34 	bl	8000a64 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68ba      	ldr	r2, [r7, #8]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d302      	bcc.n	8001e0e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d116      	bne.n	8001e3c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f043 0220 	orr.w	r2, r3, #32
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e007      	b.n	8001e4c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d1ca      	bne.n	8001de0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e60:	e042      	b.n	8001ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b10      	cmp	r3, #16
 8001e6e:	d119      	bne.n	8001ea4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f06f 0210 	mvn.w	r2, #16
 8001e78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e029      	b.n	8001ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ea4:	f7fe fdde 	bl	8000a64 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d302      	bcc.n	8001eba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d116      	bne.n	8001ee8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f043 0220 	orr.w	r2, r3, #32
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e007      	b.n	8001ef8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ef2:	2b40      	cmp	r3, #64	; 0x40
 8001ef4:	d1b5      	bne.n	8001e62 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3710      	adds	r7, #16
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f16:	d11b      	bne.n	8001f50 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f20:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3c:	f043 0204 	orr.w	r2, r3, #4
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e26c      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8087 	beq.w	800208a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f7c:	4b92      	ldr	r3, [pc, #584]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d00c      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f88:	4b8f      	ldr	r3, [pc, #572]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d112      	bne.n	8001fba <HAL_RCC_OscConfig+0x5e>
 8001f94:	4b8c      	ldr	r3, [pc, #560]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa0:	d10b      	bne.n	8001fba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa2:	4b89      	ldr	r3, [pc, #548]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d06c      	beq.n	8002088 <HAL_RCC_OscConfig+0x12c>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d168      	bne.n	8002088 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e246      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x76>
 8001fc4:	4b80      	ldr	r3, [pc, #512]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a7f      	ldr	r2, [pc, #508]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e02e      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x98>
 8001fda:	4b7b      	ldr	r3, [pc, #492]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a7a      	ldr	r2, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b78      	ldr	r3, [pc, #480]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a77      	ldr	r2, [pc, #476]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e01d      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0xbc>
 8001ffe:	4b72      	ldr	r3, [pc, #456]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a71      	ldr	r2, [pc, #452]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b6f      	ldr	r3, [pc, #444]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a6e      	ldr	r2, [pc, #440]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e00b      	b.n	8002030 <HAL_RCC_OscConfig+0xd4>
 8002018:	4b6b      	ldr	r3, [pc, #428]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a6a      	ldr	r2, [pc, #424]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800201e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b68      	ldr	r3, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a67      	ldr	r2, [pc, #412]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800202a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002038:	f7fe fd14 	bl	8000a64 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002040:	f7fe fd10 	bl	8000a64 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e1fa      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d0f0      	beq.n	8002040 <HAL_RCC_OscConfig+0xe4>
 800205e:	e014      	b.n	800208a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7fe fd00 	bl	8000a64 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7fe fcfc 	bl	8000a64 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	; 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e1e6      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207a:	4b53      	ldr	r3, [pc, #332]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x10c>
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d063      	beq.n	800215e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002096:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00b      	beq.n	80020ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d11c      	bne.n	80020e8 <HAL_RCC_OscConfig+0x18c>
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d116      	bne.n	80020e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	4b43      	ldr	r3, [pc, #268]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d005      	beq.n	80020d2 <HAL_RCC_OscConfig+0x176>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d001      	beq.n	80020d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e1ba      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d2:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4939      	ldr	r1, [pc, #228]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	e03a      	b.n	800215e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f0:	4b36      	ldr	r3, [pc, #216]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f6:	f7fe fcb5 	bl	8000a64 <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fe:	f7fe fcb1 	bl	8000a64 <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e19b      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002110:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211c:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4927      	ldr	r1, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 800212c:	4313      	orrs	r3, r2
 800212e:	600b      	str	r3, [r1, #0]
 8002130:	e015      	b.n	800215e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <HAL_RCC_OscConfig+0x270>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7fe fc94 	bl	8000a64 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002140:	f7fe fc90 	bl	8000a64 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e17a      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d03a      	beq.n	80021e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d019      	beq.n	80021a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7fe fc74 	bl	8000a64 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002180:	f7fe fc70 	bl	8000a64 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e15a      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002192:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <HAL_RCC_OscConfig+0x26c>)
 8002194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800219e:	2001      	movs	r0, #1
 80021a0:	f000 fac4 	bl	800272c <RCC_Delay>
 80021a4:	e01c      	b.n	80021e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <HAL_RCC_OscConfig+0x274>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ac:	f7fe fc5a 	bl	8000a64 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b2:	e00f      	b.n	80021d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7fe fc56 	bl	8000a64 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d908      	bls.n	80021d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e140      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	42420000 	.word	0x42420000
 80021d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d4:	4b9e      	ldr	r3, [pc, #632]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e9      	bne.n	80021b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 80a6 	beq.w	800233a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b97      	ldr	r3, [pc, #604]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10d      	bne.n	800221a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	4b94      	ldr	r3, [pc, #592]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	4a93      	ldr	r2, [pc, #588]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002208:	61d3      	str	r3, [r2, #28]
 800220a:	4b91      	ldr	r3, [pc, #580]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002216:	2301      	movs	r3, #1
 8002218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b8e      	ldr	r3, [pc, #568]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d118      	bne.n	8002258 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002226:	4b8b      	ldr	r3, [pc, #556]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a8a      	ldr	r2, [pc, #552]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800222c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002232:	f7fe fc17 	bl	8000a64 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223a:	f7fe fc13 	bl	8000a64 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b64      	cmp	r3, #100	; 0x64
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e0fd      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800224c:	4b81      	ldr	r3, [pc, #516]	; (8002454 <HAL_RCC_OscConfig+0x4f8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x312>
 8002260:	4b7b      	ldr	r3, [pc, #492]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4a7a      	ldr	r2, [pc, #488]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6213      	str	r3, [r2, #32]
 800226c:	e02d      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x334>
 8002276:	4b76      	ldr	r3, [pc, #472]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a75      	ldr	r2, [pc, #468]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800227c:	f023 0301 	bic.w	r3, r3, #1
 8002280:	6213      	str	r3, [r2, #32]
 8002282:	4b73      	ldr	r3, [pc, #460]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a72      	ldr	r2, [pc, #456]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	f023 0304 	bic.w	r3, r3, #4
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	e01c      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	2b05      	cmp	r3, #5
 8002296:	d10c      	bne.n	80022b2 <HAL_RCC_OscConfig+0x356>
 8002298:	4b6d      	ldr	r3, [pc, #436]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	4a6c      	ldr	r2, [pc, #432]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6213      	str	r3, [r2, #32]
 80022a4:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4a69      	ldr	r2, [pc, #420]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6213      	str	r3, [r2, #32]
 80022b0:	e00b      	b.n	80022ca <HAL_RCC_OscConfig+0x36e>
 80022b2:	4b67      	ldr	r3, [pc, #412]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a66      	ldr	r2, [pc, #408]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6213      	str	r3, [r2, #32]
 80022be:	4b64      	ldr	r3, [pc, #400]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a63      	ldr	r2, [pc, #396]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	f023 0304 	bic.w	r3, r3, #4
 80022c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d015      	beq.n	80022fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d2:	f7fe fbc7 	bl	8000a64 <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d8:	e00a      	b.n	80022f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f7fe fbc3 	bl	8000a64 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d901      	bls.n	80022f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	e0ab      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	4b57      	ldr	r3, [pc, #348]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d0ee      	beq.n	80022da <HAL_RCC_OscConfig+0x37e>
 80022fc:	e014      	b.n	8002328 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7fe fbb1 	bl	8000a64 <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fbad 	bl	8000a64 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e095      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ee      	bne.n	8002306 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002328:	7dfb      	ldrb	r3, [r7, #23]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4b48      	ldr	r3, [pc, #288]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a47      	ldr	r2, [pc, #284]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002338:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8081 	beq.w	8002446 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002344:	4b42      	ldr	r3, [pc, #264]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d061      	beq.n	8002414 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d146      	bne.n	80023e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002358:	4b3f      	ldr	r3, [pc, #252]	; (8002458 <HAL_RCC_OscConfig+0x4fc>)
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7fe fb81 	bl	8000a64 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002366:	f7fe fb7d 	bl	8000a64 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e067      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002378:	4b35      	ldr	r3, [pc, #212]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800238c:	d108      	bne.n	80023a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800238e:	4b30      	ldr	r3, [pc, #192]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	492d      	ldr	r1, [pc, #180]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a0:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6a19      	ldr	r1, [r3, #32]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b0:	430b      	orrs	r3, r1
 80023b2:	4927      	ldr	r1, [pc, #156]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_RCC_OscConfig+0x4fc>)
 80023ba:	2201      	movs	r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023be:	f7fe fb51 	bl	8000a64 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c4:	e008      	b.n	80023d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023c6:	f7fe fb4d 	bl	8000a64 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e037      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0f0      	beq.n	80023c6 <HAL_RCC_OscConfig+0x46a>
 80023e4:	e02f      	b.n	8002446 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e6:	4b1c      	ldr	r3, [pc, #112]	; (8002458 <HAL_RCC_OscConfig+0x4fc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ec:	f7fe fb3a 	bl	8000a64 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f4:	f7fe fb36 	bl	8000a64 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e020      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002406:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d1f0      	bne.n	80023f4 <HAL_RCC_OscConfig+0x498>
 8002412:	e018      	b.n	8002446 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d101      	bne.n	8002420 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e013      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d106      	bne.n	8002442 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	429a      	cmp	r2, r3
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
 8002458:	42420060 	.word	0x42420060

0800245c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0d0      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002470:	4b6a      	ldr	r3, [pc, #424]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d910      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b67      	ldr	r3, [pc, #412]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0207 	bic.w	r2, r3, #7
 8002486:	4965      	ldr	r1, [pc, #404]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0b8      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b8:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	4a58      	ldr	r2, [pc, #352]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d0:	4b53      	ldr	r3, [pc, #332]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4a52      	ldr	r2, [pc, #328]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b50      	ldr	r3, [pc, #320]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	494d      	ldr	r1, [pc, #308]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d040      	beq.n	800257c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d115      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e07f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d107      	bne.n	800252a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800251a:	4b41      	ldr	r3, [pc, #260]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e073      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800252a:	4b3d      	ldr	r3, [pc, #244]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e06b      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800253a:	4b39      	ldr	r3, [pc, #228]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f023 0203 	bic.w	r2, r3, #3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4936      	ldr	r1, [pc, #216]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800254c:	f7fe fa8a 	bl	8000a64 <HAL_GetTick>
 8002550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002552:	e00a      	b.n	800256a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002554:	f7fe fa86 	bl	8000a64 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e053      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256a:	4b2d      	ldr	r3, [pc, #180]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 020c 	and.w	r2, r3, #12
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	429a      	cmp	r2, r3
 800257a:	d1eb      	bne.n	8002554 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800257c:	4b27      	ldr	r3, [pc, #156]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d210      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 0207 	bic.w	r2, r3, #7
 8002592:	4922      	ldr	r1, [pc, #136]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e032      	b.n	8002612 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4916      	ldr	r1, [pc, #88]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	490e      	ldr	r1, [pc, #56]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025ea:	f000 f821 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	490a      	ldr	r1, [pc, #40]	; (8002624 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	5ccb      	ldrb	r3, [r1, r3]
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a09      	ldr	r2, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x1cc>)
 8002604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_RCC_ClockConfig+0x1d0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe f9e8 	bl	80009e0 <HAL_InitTick>

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40022000 	.word	0x40022000
 8002620:	40021000 	.word	0x40021000
 8002624:	080027e8 	.word	0x080027e8
 8002628:	20000000 	.word	0x20000000
 800262c:	20000004 	.word	0x20000004

08002630 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002630:	b490      	push	{r4, r7}
 8002632:	b08a      	sub	sp, #40	; 0x28
 8002634:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002636:	4b2a      	ldr	r3, [pc, #168]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002638:	1d3c      	adds	r4, r7, #4
 800263a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800263c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002640:	f240 2301 	movw	r3, #513	; 0x201
 8002644:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
 8002652:	2300      	movs	r3, #0
 8002654:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b04      	cmp	r3, #4
 8002668:	d002      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x40>
 800266a:	2b08      	cmp	r3, #8
 800266c:	d003      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x46>
 800266e:	e02d      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002672:	623b      	str	r3, [r7, #32]
      break;
 8002674:	e02d      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002682:	4413      	add	r3, r2
 8002684:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002688:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d013      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	0c5b      	lsrs	r3, r3, #17
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80026a2:	4413      	add	r3, r2
 80026a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ae:	fb02 f203 	mul.w	r2, r2, r3
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ba:	e004      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	623b      	str	r3, [r7, #32]
      break;
 80026ca:	e002      	b.n	80026d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026ce:	623b      	str	r3, [r7, #32]
      break;
 80026d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d2:	6a3b      	ldr	r3, [r7, #32]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3728      	adds	r7, #40	; 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bc90      	pop	{r4, r7}
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	080027d8 	.word	0x080027d8
 80026e4:	40021000 	.word	0x40021000
 80026e8:	007a1200 	.word	0x007a1200
 80026ec:	003d0900 	.word	0x003d0900

080026f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026f4:	4b02      	ldr	r3, [pc, #8]	; (8002700 <HAL_RCC_GetHCLKFreq+0x10>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	20000000 	.word	0x20000000

08002704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002708:	f7ff fff2 	bl	80026f0 <HAL_RCC_GetHCLKFreq>
 800270c:	4602      	mov	r2, r0
 800270e:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	0a1b      	lsrs	r3, r3, #8
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	4903      	ldr	r1, [pc, #12]	; (8002728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800271a:	5ccb      	ldrb	r3, [r1, r3]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}
 8002724:	40021000 	.word	0x40021000
 8002728:	080027f8 	.word	0x080027f8

0800272c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <RCC_Delay+0x34>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <RCC_Delay+0x38>)
 800273a:	fba2 2303 	umull	r2, r3, r2, r3
 800273e:	0a5b      	lsrs	r3, r3, #9
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	fb02 f303 	mul.w	r3, r2, r3
 8002746:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002748:	bf00      	nop
  }
  while (Delay --);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	1e5a      	subs	r2, r3, #1
 800274e:	60fa      	str	r2, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f9      	bne.n	8002748 <RCC_Delay+0x1c>
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	20000000 	.word	0x20000000
 8002764:	10624dd3 	.word	0x10624dd3

08002768 <__libc_init_array>:
 8002768:	b570      	push	{r4, r5, r6, lr}
 800276a:	2600      	movs	r6, #0
 800276c:	4d0c      	ldr	r5, [pc, #48]	; (80027a0 <__libc_init_array+0x38>)
 800276e:	4c0d      	ldr	r4, [pc, #52]	; (80027a4 <__libc_init_array+0x3c>)
 8002770:	1b64      	subs	r4, r4, r5
 8002772:	10a4      	asrs	r4, r4, #2
 8002774:	42a6      	cmp	r6, r4
 8002776:	d109      	bne.n	800278c <__libc_init_array+0x24>
 8002778:	f000 f822 	bl	80027c0 <_init>
 800277c:	2600      	movs	r6, #0
 800277e:	4d0a      	ldr	r5, [pc, #40]	; (80027a8 <__libc_init_array+0x40>)
 8002780:	4c0a      	ldr	r4, [pc, #40]	; (80027ac <__libc_init_array+0x44>)
 8002782:	1b64      	subs	r4, r4, r5
 8002784:	10a4      	asrs	r4, r4, #2
 8002786:	42a6      	cmp	r6, r4
 8002788:	d105      	bne.n	8002796 <__libc_init_array+0x2e>
 800278a:	bd70      	pop	{r4, r5, r6, pc}
 800278c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002790:	4798      	blx	r3
 8002792:	3601      	adds	r6, #1
 8002794:	e7ee      	b.n	8002774 <__libc_init_array+0xc>
 8002796:	f855 3b04 	ldr.w	r3, [r5], #4
 800279a:	4798      	blx	r3
 800279c:	3601      	adds	r6, #1
 800279e:	e7f2      	b.n	8002786 <__libc_init_array+0x1e>
 80027a0:	08002800 	.word	0x08002800
 80027a4:	08002800 	.word	0x08002800
 80027a8:	08002800 	.word	0x08002800
 80027ac:	08002804 	.word	0x08002804

080027b0 <memset>:
 80027b0:	4603      	mov	r3, r0
 80027b2:	4402      	add	r2, r0
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d100      	bne.n	80027ba <memset+0xa>
 80027b8:	4770      	bx	lr
 80027ba:	f803 1b01 	strb.w	r1, [r3], #1
 80027be:	e7f9      	b.n	80027b4 <memset+0x4>

080027c0 <_init>:
 80027c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027c2:	bf00      	nop
 80027c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027c6:	bc08      	pop	{r3}
 80027c8:	469e      	mov	lr, r3
 80027ca:	4770      	bx	lr

080027cc <_fini>:
 80027cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ce:	bf00      	nop
 80027d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d2:	bc08      	pop	{r3}
 80027d4:	469e      	mov	lr, r3
 80027d6:	4770      	bx	lr
