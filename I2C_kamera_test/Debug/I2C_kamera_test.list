
I2C_kamera_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004504  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004638  08004638  0002028c  2**0
                  CONTENTS
  4 .ARM          00000000  08004638  08004638  0002028c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004638  08004638  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004638  08004638  00014638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800463c  0800463c  0001463c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  08004640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  2000028c  080048cc  0002028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  080048cc  00020800  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7ac  00000000  00000000  000202b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6c  00000000  00000000  0002ea61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  000309d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00031898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001726d  00000000  00000000  000326a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff02  00000000  00000000  0004990d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008874f  00000000  00000000  0005980f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1f5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ee8  00000000  00000000  000e1fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000028c 	.word	0x2000028c
 8000128:	00000000 	.word	0x00000000
 800012c:	080045f8 	.word	0x080045f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000290 	.word	0x20000290
 8000148:	080045f8 	.word	0x080045f8

0800014c <CAM_init>:
 *      Author: joach
 */

#include "camera.h"

void CAM_init(CAM_HandleTypeDef *cam) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	// init SCCB
	CAM_setReg(cam, 0x12, 0x80); // Software reset, YUV mode
 8000154:	2280      	movs	r2, #128	; 0x80
 8000156:	2112      	movs	r1, #18
 8000158:	6878      	ldr	r0, [r7, #4]
 800015a:	f000 f930 	bl	80003be <CAM_setReg>
	CAM_setReg(cam, 0x1E, 0x31); // Flip image vertically and mirror image
 800015e:	2231      	movs	r2, #49	; 0x31
 8000160:	211e      	movs	r1, #30
 8000162:	6878      	ldr	r0, [r7, #4]
 8000164:	f000 f92b 	bl	80003be <CAM_setReg>
	CAM_setReg(cam, 0x13, 0x81); // Fast algorithm and auto exposure enable
 8000168:	2281      	movs	r2, #129	; 0x81
 800016a:	2113      	movs	r1, #19
 800016c:	6878      	ldr	r0, [r7, #4]
 800016e:	f000 f926 	bl	80003be <CAM_setReg>
	CAM_setReg(cam, 0x3F, 0x01); // Edge enhancement factor
 8000172:	2201      	movs	r2, #1
 8000174:	213f      	movs	r1, #63	; 0x3f
 8000176:	6878      	ldr	r0, [r7, #4]
 8000178:	f000 f921 	bl	80003be <CAM_setReg>
	//CAM_setReg(cam, 0x71, 0xB5); // 8-bar color bar test pattern
}
 800017c:	bf00      	nop
 800017e:	3708      	adds	r7, #8
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}

08000184 <CAM_startLineTransfer>:

void CAM_startLineTransfer(CAM_HandleTypeDef *cam) {
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
	// init DMA
	while (cam->requestDataTimer->Instance->CNT <=  60) {}
 800018c:	bf00      	nop
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	685b      	ldr	r3, [r3, #4]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000196:	2b3c      	cmp	r3, #60	; 0x3c
 8000198:	d9f9      	bls.n	800018e <CAM_startLineTransfer+0xa>
	HAL_TIM_PWM_Start(cam->requestDataTimer, cam->requestDataChannel);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	685a      	ldr	r2, [r3, #4]
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	68db      	ldr	r3, [r3, #12]
 80001a2:	4619      	mov	r1, r3
 80001a4:	4610      	mov	r0, r2
 80001a6:	f003 facf 	bl	8003748 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start_DMA(cam->DMATimer, cam->DMAChannel, cam->source, cam->pic->width);
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	6898      	ldr	r0, [r3, #8]
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	6919      	ldr	r1, [r3, #16]
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	69da      	ldr	r2, [r3, #28]
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	695b      	ldr	r3, [r3, #20]
 80001ba:	889b      	ldrh	r3, [r3, #4]
 80001bc:	f003 f814 	bl	80031e8 <HAL_TIM_OC_Start_DMA>
	//HAL_DMA_Start_IT(cam->hdma, cam->source, cam->destination, cam->pic->width);
	__HAL_DMA_DISABLE_IT(cam->hdma, DMA_IT_HT);
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	681a      	ldr	r2, [r3, #0]
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	f022 0204 	bic.w	r2, r2, #4
 80001d2:	601a      	str	r2, [r3, #0]


	cam->status = RECEIVING;
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	2201      	movs	r2, #1
 80001d8:	761a      	strb	r2, [r3, #24]
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}

080001e2 <CAM_stopLineTransfer>:

void CAM_stopLineTransfer(CAM_HandleTypeDef *cam) {
 80001e2:	b580      	push	{r7, lr}
 80001e4:	b082      	sub	sp, #8
 80001e6:	af00      	add	r7, sp, #0
 80001e8:	6078      	str	r0, [r7, #4]
	// abort DMA
	//HAL_DMA_Abort_IT(cam->hdma);
	HAL_TIM_OC_Stop_DMA(cam->DMATimer, cam->DMAChannel);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	689a      	ldr	r2, [r3, #8]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	691b      	ldr	r3, [r3, #16]
 80001f2:	4619      	mov	r1, r3
 80001f4:	4610      	mov	r0, r2
 80001f6:	f003 f991 	bl	800351c <HAL_TIM_OC_Stop_DMA>
	while (cam->requestDataTimer->Instance->CNT <= 60) {}
 80001fa:	bf00      	nop
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	685b      	ldr	r3, [r3, #4]
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000204:	2b3c      	cmp	r3, #60	; 0x3c
 8000206:	d9f9      	bls.n	80001fc <CAM_stopLineTransfer+0x1a>
	HAL_TIM_PWM_Stop(cam->requestDataTimer, cam->requestDataChannel);
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	685a      	ldr	r2, [r3, #4]
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	4619      	mov	r1, r3
 8000212:	4610      	mov	r0, r2
 8000214:	f003 fb3a 	bl	800388c <HAL_TIM_PWM_Stop>

	cam->status = WAITING;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2202      	movs	r2, #2
 800021c:	761a      	strb	r2, [r3, #24]
}
 800021e:	bf00      	nop
 8000220:	3708      	adds	r7, #8
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}

08000226 <CAM_update>:

void CAM_update(CAM_HandleTypeDef *cam) {
 8000226:	b580      	push	{r7, lr}
 8000228:	b082      	sub	sp, #8
 800022a:	af00      	add	r7, sp, #0
 800022c:	6078      	str	r0, [r7, #4]
	if (cam->status == READY) {
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	7e1b      	ldrb	r3, [r3, #24]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d117      	bne.n	8000266 <CAM_update+0x40>
		if (cam->pic->y < cam->pic->height) {
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	885a      	ldrh	r2, [r3, #2]
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	88db      	ldrh	r3, [r3, #6]
 8000242:	429a      	cmp	r2, r3
 8000244:	d203      	bcs.n	800024e <CAM_update+0x28>
			CAM_startLineTransfer(cam);
 8000246:	6878      	ldr	r0, [r7, #4]
 8000248:	f7ff ff9c 	bl	8000184 <CAM_startLineTransfer>
			//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
		}
	} else if (cam->status == WAITING) {
		CAM_toOutputQueue(cam);
	}
}
 800024c:	e012      	b.n	8000274 <CAM_update+0x4e>
			cam->pic->x = 0;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	2200      	movs	r2, #0
 8000254:	801a      	strh	r2, [r3, #0]
			cam->pic->y = 0;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	2200      	movs	r2, #0
 800025c:	805a      	strh	r2, [r3, #2]
			cam->status = STANDBY;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	2203      	movs	r2, #3
 8000262:	761a      	strb	r2, [r3, #24]
}
 8000264:	e006      	b.n	8000274 <CAM_update+0x4e>
	} else if (cam->status == WAITING) {
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	7e1b      	ldrb	r3, [r3, #24]
 800026a:	2b02      	cmp	r3, #2
 800026c:	d102      	bne.n	8000274 <CAM_update+0x4e>
		CAM_toOutputQueue(cam);
 800026e:	6878      	ldr	r0, [r7, #4]
 8000270:	f000 f836 	bl	80002e0 <CAM_toOutputQueue>
}
 8000274:	bf00      	nop
 8000276:	3708      	adds	r7, #8
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}

0800027c <CAM_takePicture>:

void CAM_takePicture(CAM_HandleTypeDef *cam) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	//HUSK at ændre i OBC-filen

	// Hvis ikke vi er ved at sende et billede, pulsér getImagePin på FPGA
	if (cam->status == STANDBY) {
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	7e1b      	ldrb	r3, [r3, #24]
 8000288:	2b03      	cmp	r3, #3
 800028a:	d115      	bne.n	80002b8 <CAM_takePicture+0x3c>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	480b      	ldr	r0, [pc, #44]	; (80002c0 <CAM_takePicture+0x44>)
 8000292:	f001 fab7 	bl	8001804 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000296:	2200      	movs	r2, #0
 8000298:	2110      	movs	r1, #16
 800029a:	4809      	ldr	r0, [pc, #36]	; (80002c0 <CAM_takePicture+0x44>)
 800029c:	f001 fab2 	bl	8001804 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 80002a0:	2032      	movs	r0, #50	; 0x32
 80002a2:	f000 fd95 	bl	8000dd0 <HAL_Delay>
		cam->status = READY;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2200      	movs	r2, #0
 80002aa:	761a      	strb	r2, [r3, #24]
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002b2:	4804      	ldr	r0, [pc, #16]	; (80002c4 <CAM_takePicture+0x48>)
 80002b4:	f001 faa6 	bl	8001804 <HAL_GPIO_WritePin>

	}
}
 80002b8:	bf00      	nop
 80002ba:	3708      	adds	r7, #8
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	40010c00 	.word	0x40010c00
 80002c4:	40011000 	.word	0x40011000

080002c8 <CAN_queuePackage>:

int CAN_queuePackage(uint32_t ID, uint8_t *data, uint32_t DLC) {}
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
 80002d4:	bf00      	nop
 80002d6:	4618      	mov	r0, r3
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <CAM_toOutputQueue>:

void CAM_toOutputQueue(CAM_HandleTypeDef *cam) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	// Vent og placer pixel-koordinat-pakke i CAN-køen
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	695b      	ldr	r3, [r3, #20]
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	723b      	strb	r3, [r7, #8]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	695b      	ldr	r3, [r3, #20]
 80002f6:	881b      	ldrh	r3, [r3, #0]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	b29b      	uxth	r3, r3
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	727b      	strb	r3, [r7, #9]
									(cam->pic->y & 0x00FF), (cam->pic->y >> 8),
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	885b      	ldrh	r3, [r3, #2]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000306:	b2db      	uxtb	r3, r3
 8000308:	72bb      	strb	r3, [r7, #10]
									(cam->pic->y & 0x00FF), (cam->pic->y >> 8),
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	695b      	ldr	r3, [r3, #20]
 800030e:	885b      	ldrh	r3, [r3, #2]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000310:	0a1b      	lsrs	r3, r3, #8
 8000312:	b29b      	uxth	r3, r3
 8000314:	b2db      	uxtb	r3, r3
 8000316:	72fb      	strb	r3, [r7, #11]
									(cam->pic->width & 0x00FF), (cam->pic->width >> 8),
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	889b      	ldrh	r3, [r3, #4]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 800031e:	b2db      	uxtb	r3, r3
 8000320:	733b      	strb	r3, [r7, #12]
									(cam->pic->width & 0x00FF), (cam->pic->width >> 8),
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	889b      	ldrh	r3, [r3, #4]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	b29b      	uxth	r3, r3
 800032c:	b2db      	uxtb	r3, r3
 800032e:	737b      	strb	r3, [r7, #13]
									(cam->pic->height & 0x00FF), (cam->pic->height >> 8)};
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	88db      	ldrh	r3, [r3, #6]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000336:	b2db      	uxtb	r3, r3
 8000338:	73bb      	strb	r3, [r7, #14]
									(cam->pic->height & 0x00FF), (cam->pic->height >> 8)};
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	695b      	ldr	r3, [r3, #20]
 800033e:	88db      	ldrh	r3, [r3, #6]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000340:	0a1b      	lsrs	r3, r3, #8
 8000342:	b29b      	uxth	r3, r3
 8000344:	b2db      	uxtb	r3, r3
 8000346:	73fb      	strb	r3, [r7, #15]
	while(!CAN_queuePackage(CAN_ID_COORDINATE, coordinatePackage, 8)) {}
 8000348:	bf00      	nop
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	2208      	movs	r2, #8
 8000350:	4619      	mov	r1, r3
 8000352:	2020      	movs	r0, #32
 8000354:	f7ff ffb8 	bl	80002c8 <CAN_queuePackage>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f5      	beq.n	800034a <CAM_toOutputQueue+0x6a>

	// Vent på at der plads i CAN-køen til en pakke med 8 pixels

	while(cam->pic->x < cam->pic->width) { // Gentag indtil hele linjen er sendt / hele bufferen er tømt
 800035e:	e015      	b.n	800038c <CAM_toOutputQueue+0xac>
		// Når der er plads, put dem i køen
		if (CAN_queuePackage(CAN_ID_DATA, cam->destination + cam->pic->x, 8)) {
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	6a1b      	ldr	r3, [r3, #32]
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	6952      	ldr	r2, [r2, #20]
 8000368:	8812      	ldrh	r2, [r2, #0]
 800036a:	4413      	add	r3, r2
 800036c:	2208      	movs	r2, #8
 800036e:	4619      	mov	r1, r3
 8000370:	2021      	movs	r0, #33	; 0x21
 8000372:	f7ff ffa9 	bl	80002c8 <CAN_queuePackage>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d007      	beq.n	800038c <CAM_toOutputQueue+0xac>
			// Inkrementer x-positionen i Picture
			cam->pic->x += 8;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	881a      	ldrh	r2, [r3, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	3208      	adds	r2, #8
 8000388:	b292      	uxth	r2, r2
 800038a:	801a      	strh	r2, [r3, #0]
	while(cam->pic->x < cam->pic->width) { // Gentag indtil hele linjen er sendt / hele bufferen er tømt
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	695b      	ldr	r3, [r3, #20]
 8000390:	881a      	ldrh	r2, [r3, #0]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	889b      	ldrh	r3, [r3, #4]
 8000398:	429a      	cmp	r2, r3
 800039a:	d3e1      	bcc.n	8000360 <CAM_toOutputQueue+0x80>
		}
		*/
	}

	// Opdater koordinaterne i Picture
	cam->pic->y++;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	885a      	ldrh	r2, [r3, #2]
 80003a2:	3201      	adds	r2, #1
 80003a4:	b292      	uxth	r2, r2
 80003a6:	805a      	strh	r2, [r3, #2]
	cam->pic->x = 0;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	2200      	movs	r2, #0
 80003ae:	801a      	strh	r2, [r3, #0]

	cam->status = READY;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2200      	movs	r2, #0
 80003b4:	761a      	strb	r2, [r3, #24]
}
 80003b6:	bf00      	nop
 80003b8:	3710      	adds	r7, #16
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <CAM_setReg>:

void CAM_setReg(CAM_HandleTypeDef *cam, uint8_t reg_addr, uint8_t value) {
 80003be:	b580      	push	{r7, lr}
 80003c0:	b086      	sub	sp, #24
 80003c2:	af02      	add	r7, sp, #8
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	460b      	mov	r3, r1
 80003c8:	70fb      	strb	r3, [r7, #3]
 80003ca:	4613      	mov	r3, r2
 80003cc:	70bb      	strb	r3, [r7, #2]
	uint8_t addrAndValue[2] = {reg_addr, value};
 80003ce:	78fb      	ldrb	r3, [r7, #3]
 80003d0:	733b      	strb	r3, [r7, #12]
 80003d2:	78bb      	ldrb	r3, [r7, #2]
 80003d4:	737b      	strb	r3, [r7, #13]
	uint8_t adressentest = cam->I2C_Address<<1;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003dc:	005b      	lsls	r3, r3, #1
 80003de:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(cam->I2C_Handler, (cam->I2C_Address<<1), addrAndValue, 2, HAL_MAX_DELAY);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	005b      	lsls	r3, r3, #1
 80003ee:	b299      	uxth	r1, r3
 80003f0:	f107 020c 	add.w	r2, r7, #12
 80003f4:	f04f 33ff 	mov.w	r3, #4294967295
 80003f8:	9300      	str	r3, [sp, #0]
 80003fa:	2302      	movs	r3, #2
 80003fc:	f001 fb5e 	bl	8001abc <HAL_I2C_Master_Transmit>
}
 8000400:	bf00      	nop
 8000402:	3710      	adds	r7, #16
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}

08000408 <CAM_getReg>:

int CAM_getReg(CAM_HandleTypeDef *cam, int reg_addr) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b086      	sub	sp, #24
 800040c:	af02      	add	r7, sp, #8
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
	int buf[1] = {reg_addr};
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(cam->I2C_Handler, (cam->I2C_Address<<1), buf, 1, HAL_MAX_DELAY);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000420:	b29b      	uxth	r3, r3
 8000422:	005b      	lsls	r3, r3, #1
 8000424:	b299      	uxth	r1, r3
 8000426:	f107 020c 	add.w	r2, r7, #12
 800042a:	f04f 33ff 	mov.w	r3, #4294967295
 800042e:	9300      	str	r3, [sp, #0]
 8000430:	2301      	movs	r3, #1
 8000432:	f001 fb43 	bl	8001abc <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(cam->I2C_Handler, (cam->I2C_Address<<1) | 0x01, buf, 1, HAL_MAX_DELAY);
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	b21b      	sxth	r3, r3
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	b21b      	sxth	r3, r3
 800044a:	b299      	uxth	r1, r3
 800044c:	f107 020c 	add.w	r2, r7, #12
 8000450:	f04f 33ff 	mov.w	r3, #4294967295
 8000454:	9300      	str	r3, [sp, #0]
 8000456:	2301      	movs	r3, #1
 8000458:	f001 fc2e 	bl	8001cb8 <HAL_I2C_Master_Receive>

	return buf[0];
 800045c:	68fb      	ldr	r3, [r7, #12]
}
 800045e:	4618      	mov	r0, r3
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
	...

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046e:	f000 fc4d 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000472:	f000 f867 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000476:	f000 f9a9 	bl	80007cc <MX_GPIO_Init>
  MX_DMA_Init();
 800047a:	f000 f989 	bl	8000790 <MX_DMA_Init>
  MX_I2C1_Init();
 800047e:	f000 f8a7 	bl	80005d0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000482:	f000 f8d3 	bl	800062c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000486:	f000 f959 	bl	800073c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CAM_Handle_Init(&hcam);
 800048a:	482a      	ldr	r0, [pc, #168]	; (8000534 <main+0xcc>)
 800048c:	f000 fa18 	bl	80008c0 <CAM_Handle_Init>
  CAM_init(&hcam);
 8000490:	4828      	ldr	r0, [pc, #160]	; (8000534 <main+0xcc>)
 8000492:	f7ff fe5b 	bl	800014c <CAM_init>

  //HAL_TIM_OC_Start_DMA(&htim2, TIM_CHANNEL_3, &(GPIOA->IDR), hcam.pic->width);
  CAM_getReg(&hcam, 0x12);
 8000496:	2112      	movs	r1, #18
 8000498:	4826      	ldr	r0, [pc, #152]	; (8000534 <main+0xcc>)
 800049a:	f7ff ffb5 	bl	8000408 <CAM_getReg>
  CAM_getReg(&hcam, 0x1E);
 800049e:	211e      	movs	r1, #30
 80004a0:	4824      	ldr	r0, [pc, #144]	; (8000534 <main+0xcc>)
 80004a2:	f7ff ffb1 	bl	8000408 <CAM_getReg>
  CAM_getReg(&hcam, 0x13);
 80004a6:	2113      	movs	r1, #19
 80004a8:	4822      	ldr	r0, [pc, #136]	; (8000534 <main+0xcc>)
 80004aa:	f7ff ffad 	bl	8000408 <CAM_getReg>
  CAM_getReg(&hcam, 0x3F);
 80004ae:	213f      	movs	r1, #63	; 0x3f
 80004b0:	4820      	ldr	r0, [pc, #128]	; (8000534 <main+0xcc>)
 80004b2:	f7ff ffa9 	bl	8000408 <CAM_getReg>
  CAM_getReg(&hcam, 0x71);
 80004b6:	2171      	movs	r1, #113	; 0x71
 80004b8:	481e      	ldr	r0, [pc, #120]	; (8000534 <main+0xcc>)
 80004ba:	f7ff ffa5 	bl	8000408 <CAM_getReg>

  for (int i = 0; i < 10; i++) {
 80004be:	2300      	movs	r3, #0
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	e005      	b.n	80004d0 <main+0x68>
	  CAM_takePicture(&hcam);
 80004c4:	481b      	ldr	r0, [pc, #108]	; (8000534 <main+0xcc>)
 80004c6:	f7ff fed9 	bl	800027c <CAM_takePicture>
  for (int i = 0; i < 10; i++) {
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3301      	adds	r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b09      	cmp	r3, #9
 80004d4:	ddf6      	ble.n	80004c4 <main+0x5c>
  }

  for (int i = 0; i < 256; i++) {
 80004d6:	2300      	movs	r3, #0
 80004d8:	603b      	str	r3, [r7, #0]
 80004da:	e007      	b.n	80004ec <main+0x84>
	  sourceData[i] = i;
 80004dc:	683a      	ldr	r2, [r7, #0]
 80004de:	4916      	ldr	r1, [pc, #88]	; (8000538 <main+0xd0>)
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int i = 0; i < 256; i++) {
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	3301      	adds	r3, #1
 80004ea:	603b      	str	r3, [r7, #0]
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	2bff      	cmp	r3, #255	; 0xff
 80004f0:	ddf4      	ble.n	80004dc <main+0x74>
  }
  //HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004f2:	2104      	movs	r1, #4
 80004f4:	4811      	ldr	r0, [pc, #68]	; (800053c <main+0xd4>)
 80004f6:	f003 f927 	bl	8003748 <HAL_TIM_PWM_Start>


  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_3);
 80004fa:	2108      	movs	r1, #8
 80004fc:	480f      	ldr	r0, [pc, #60]	; (800053c <main+0xd4>)
 80004fe:	f002 fdd1 	bl	80030a4 <HAL_TIM_OC_Start>
  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8000502:	2104      	movs	r1, #4
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <main+0xd4>)
 8000506:	f003 f9c1 	bl	800388c <HAL_TIM_PWM_Stop>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CAM_update(&hcam);
 800050a:	480a      	ldr	r0, [pc, #40]	; (8000534 <main+0xcc>)
 800050c:	f7ff fe8b 	bl	8000226 <CAM_update>

	  if (htim2.Instance->CNT > 60) {
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <main+0xd4>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000516:	2b3c      	cmp	r3, #60	; 0x3c
 8000518:	d905      	bls.n	8000526 <main+0xbe>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2120      	movs	r1, #32
 800051e:	4808      	ldr	r0, [pc, #32]	; (8000540 <main+0xd8>)
 8000520:	f001 f970 	bl	8001804 <HAL_GPIO_WritePin>
 8000524:	e7f1      	b.n	800050a <main+0xa2>

	  }
	  else (HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5, GPIO_PIN_RESET));
 8000526:	2200      	movs	r2, #0
 8000528:	2120      	movs	r1, #32
 800052a:	4805      	ldr	r0, [pc, #20]	; (8000540 <main+0xd8>)
 800052c:	f001 f96a 	bl	8001804 <HAL_GPIO_WritePin>
	  CAM_update(&hcam);
 8000530:	e7eb      	b.n	800050a <main+0xa2>
 8000532:	bf00      	nop
 8000534:	200007d0 	.word	0x200007d0
 8000538:	200002a8 	.word	0x200002a8
 800053c:	20000744 	.word	0x20000744
 8000540:	40010c00 	.word	0x40010c00

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b090      	sub	sp, #64	; 0x40
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0318 	add.w	r3, r7, #24
 800054e:	2228      	movs	r2, #40	; 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 f848 	bl	80045e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000566:	2301      	movs	r3, #1
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000578:	2302      	movs	r3, #2
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000582:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0318 	add.w	r3, r7, #24
 800058c:	4618      	mov	r0, r3
 800058e:	f002 f91f 	bl	80027d0 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000598:	f000 f9ec 	bl	8000974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2102      	movs	r1, #2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fb8a 	bl	8002cd0 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005c2:	f000 f9d7 	bl	8000974 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3740      	adds	r7, #64	; 0x40
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_I2C1_Init+0x50>)
 80005d6:	4a13      	ldr	r2, [pc, #76]	; (8000624 <MX_I2C1_Init+0x54>)
 80005d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005da:	4b11      	ldr	r3, [pc, #68]	; (8000620 <MX_I2C1_Init+0x50>)
 80005dc:	4a12      	ldr	r2, [pc, #72]	; (8000628 <MX_I2C1_Init+0x58>)
 80005de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	; (8000620 <MX_I2C1_Init+0x50>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005e6:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_I2C1_Init+0x50>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <MX_I2C1_Init+0x50>)
 80005ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_I2C1_Init+0x50>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005fa:	4b09      	ldr	r3, [pc, #36]	; (8000620 <MX_I2C1_Init+0x50>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_I2C1_Init+0x50>)
 800060e:	f001 f911 	bl	8001834 <HAL_I2C_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000618:	f000 f9ac 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200006a8 	.word	0x200006a8
 8000624:	40005400 	.word	0x40005400
 8000628:	000186a0 	.word	0x000186a0

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]
 800064a:	615a      	str	r2, [r3, #20]
 800064c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800064e:	4b3a      	ldr	r3, [pc, #232]	; (8000738 <MX_TIM2_Init+0x10c>)
 8000650:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000654:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6-1;
 8000656:	4b38      	ldr	r3, [pc, #224]	; (8000738 <MX_TIM2_Init+0x10c>)
 8000658:	2205      	movs	r2, #5
 800065a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065c:	4b36      	ldr	r3, [pc, #216]	; (8000738 <MX_TIM2_Init+0x10c>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 120 -1;
 8000662:	4b35      	ldr	r3, [pc, #212]	; (8000738 <MX_TIM2_Init+0x10c>)
 8000664:	2277      	movs	r2, #119	; 0x77
 8000666:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000668:	4b33      	ldr	r3, [pc, #204]	; (8000738 <MX_TIM2_Init+0x10c>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066e:	4b32      	ldr	r3, [pc, #200]	; (8000738 <MX_TIM2_Init+0x10c>)
 8000670:	2280      	movs	r2, #128	; 0x80
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000674:	4830      	ldr	r0, [pc, #192]	; (8000738 <MX_TIM2_Init+0x10c>)
 8000676:	f002 fcc5 	bl	8003004 <HAL_TIM_OC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000680:	f000 f978 	bl	8000974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000684:	482c      	ldr	r0, [pc, #176]	; (8000738 <MX_TIM2_Init+0x10c>)
 8000686:	f003 f807 	bl	8003698 <HAL_TIM_PWM_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000690:	f000 f970 	bl	8000974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000694:	2300      	movs	r3, #0
 8000696:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4619      	mov	r1, r3
 80006a2:	4825      	ldr	r0, [pc, #148]	; (8000738 <MX_TIM2_Init+0x10c>)
 80006a4:	f003 fd66 	bl	8004174 <HAL_TIMEx_MasterConfigSynchronization>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80006ae:	f000 f961 	bl	8000974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2200      	movs	r2, #0
 80006c6:	4619      	mov	r1, r3
 80006c8:	481b      	ldr	r0, [pc, #108]	; (8000738 <MX_TIM2_Init+0x10c>)
 80006ca:	f003 f943 	bl	8003954 <HAL_TIM_OC_ConfigChannel>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80006d4:	f000 f94e 	bl	8000974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80006d8:	2370      	movs	r3, #112	; 0x70
 80006da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 60;
 80006dc:	233c      	movs	r3, #60	; 0x3c
 80006de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	2204      	movs	r2, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4813      	ldr	r0, [pc, #76]	; (8000738 <MX_TIM2_Init+0x10c>)
 80006ec:	f003 f98a 	bl	8003a04 <HAL_TIM_PWM_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM2_Init+0xce>
  {
    Error_Handler();
 80006f6:	f000 f93d 	bl	8000974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2208      	movs	r2, #8
 800070a:	4619      	mov	r1, r3
 800070c:	480a      	ldr	r0, [pc, #40]	; (8000738 <MX_TIM2_Init+0x10c>)
 800070e:	f003 f921 	bl	8003954 <HAL_TIM_OC_ConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000718:	f000 f92c 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_OC_MspInit(&htim2);
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <MX_TIM2_Init+0x10c>)
 800071e:	f000 f99f 	bl	8000a60 <HAL_TIM_OC_MspInit>
  HAL_TIM_PWM_MspInit(&htim2);
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <MX_TIM2_Init+0x10c>)
 8000724:	f003 f807 	bl	8003736 <HAL_TIM_PWM_MspInit>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000728:	4803      	ldr	r0, [pc, #12]	; (8000738 <MX_TIM2_Init+0x10c>)
 800072a:	f000 f9df 	bl	8000aec <HAL_TIM_MspPostInit>

}
 800072e:	bf00      	nop
 8000730:	3728      	adds	r7, #40	; 0x28
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000744 	.word	0x20000744

0800073c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_USART1_UART_Init+0x50>)
 8000744:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_USART1_UART_Init+0x4c>)
 8000774:	f003 fd5c 	bl	8004230 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800077e:	f000 f8f9 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000704 	.word	0x20000704
 800078c:	40013800 	.word	0x40013800

08000790 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_DMA_Init+0x38>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4a0b      	ldr	r2, [pc, #44]	; (80007c8 <MX_DMA_Init+0x38>)
 800079c:	f043 0301 	orr.w	r3, r3, #1
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_DMA_Init+0x38>)
 80007a4:	695b      	ldr	r3, [r3, #20]
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	200b      	movs	r0, #11
 80007b4:	f000 fc07 	bl	8000fc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007b8:	200b      	movs	r0, #11
 80007ba:	f000 fc20 	bl	8000ffe <HAL_NVIC_EnableIRQ>

}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000

080007cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b088      	sub	sp, #32
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e0:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <MX_GPIO_Init+0xe8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a33      	ldr	r2, [pc, #204]	; (80008b4 <MX_GPIO_Init+0xe8>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b31      	ldr	r3, [pc, #196]	; (80008b4 <MX_GPIO_Init+0xe8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0310 	and.w	r3, r3, #16
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	4b2e      	ldr	r3, [pc, #184]	; (80008b4 <MX_GPIO_Init+0xe8>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a2d      	ldr	r2, [pc, #180]	; (80008b4 <MX_GPIO_Init+0xe8>)
 80007fe:	f043 0320 	orr.w	r3, r3, #32
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b2b      	ldr	r3, [pc, #172]	; (80008b4 <MX_GPIO_Init+0xe8>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0320 	and.w	r3, r3, #32
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <MX_GPIO_Init+0xe8>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a27      	ldr	r2, [pc, #156]	; (80008b4 <MX_GPIO_Init+0xe8>)
 8000816:	f043 0308 	orr.w	r3, r3, #8
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <MX_GPIO_Init+0xe8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0308 	and.w	r3, r3, #8
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_GPIO_Init+0xe8>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <MX_GPIO_Init+0xe8>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b1f      	ldr	r3, [pc, #124]	; (80008b4 <MX_GPIO_Init+0xe8>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000846:	481c      	ldr	r0, [pc, #112]	; (80008b8 <MX_GPIO_Init+0xec>)
 8000848:	f000 ffdc 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2130      	movs	r1, #48	; 0x30
 8000850:	481a      	ldr	r0, [pc, #104]	; (80008bc <MX_GPIO_Init+0xf0>)
 8000852:	f000 ffd7 	bl	8001804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000856:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800085a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085c:	2301      	movs	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2302      	movs	r3, #2
 8000866:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	4812      	ldr	r0, [pc, #72]	; (80008b8 <MX_GPIO_Init+0xec>)
 8000870:	f000 fe44 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000874:	f64f 4303 	movw	r3, #64515	; 0xfc03
 8000878:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000882:	f107 0310 	add.w	r3, r7, #16
 8000886:	4619      	mov	r1, r3
 8000888:	480c      	ldr	r0, [pc, #48]	; (80008bc <MX_GPIO_Init+0xf0>)
 800088a:	f000 fe37 	bl	80014fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800088e:	2330      	movs	r3, #48	; 0x30
 8000890:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2302      	movs	r3, #2
 800089c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_GPIO_Init+0xf0>)
 80008a6:	f000 fe29 	bl	80014fc <HAL_GPIO_Init>

}
 80008aa:	bf00      	nop
 80008ac:	3720      	adds	r7, #32
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40011000 	.word	0x40011000
 80008bc:	40010c00 	.word	0x40010c00

080008c0 <CAM_Handle_Init>:

/* USER CODE BEGIN 4 */

void CAM_Handle_Init(CAM_HandleTypeDef *cam) {
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	cam->I2C_Address = 0x21;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2221      	movs	r2, #33	; 0x21
 80008cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cam->destination = cameraData;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a1a      	ldr	r2, [pc, #104]	; (800093c <CAM_Handle_Init+0x7c>)
 80008d4:	621a      	str	r2, [r3, #32]
	cam->hdma = &hdma_tim2_ch3;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4a19      	ldr	r2, [pc, #100]	; (8000940 <CAM_Handle_Init+0x80>)
 80008da:	601a      	str	r2, [r3, #0]
	cam->pic = &pic1;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	4a19      	ldr	r2, [pc, #100]	; (8000944 <CAM_Handle_Init+0x84>)
 80008e0:	615a      	str	r2, [r3, #20]
	cam->requestDataTimer = &htim2;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	4a18      	ldr	r2, [pc, #96]	; (8000948 <CAM_Handle_Init+0x88>)
 80008e6:	605a      	str	r2, [r3, #4]
	cam->requestDataChannel = TIM_CHANNEL_2;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2204      	movs	r2, #4
 80008ec:	60da      	str	r2, [r3, #12]
	cam->DMATimer = &htim2;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a15      	ldr	r2, [pc, #84]	; (8000948 <CAM_Handle_Init+0x88>)
 80008f2:	609a      	str	r2, [r3, #8]
	cam->DMAChannel = TIM_CHANNEL_3;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2208      	movs	r2, #8
 80008f8:	611a      	str	r2, [r3, #16]
	cam->source = &(GPIOA->IDR);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a13      	ldr	r2, [pc, #76]	; (800094c <CAM_Handle_Init+0x8c>)
 80008fe:	61da      	str	r2, [r3, #28]
	cam->status = STANDBY;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2203      	movs	r2, #3
 8000904:	761a      	strb	r2, [r3, #24]
	cam->I2C_Handler = &hi2c1;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a11      	ldr	r2, [pc, #68]	; (8000950 <CAM_Handle_Init+0x90>)
 800090a:	629a      	str	r2, [r3, #40]	; 0x28

	cam->pic->x = 0;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	2200      	movs	r2, #0
 8000912:	801a      	strh	r2, [r3, #0]
	cam->pic->y = 0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	2200      	movs	r2, #0
 800091a:	805a      	strh	r2, [r3, #2]
	cam->pic->height = 480;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000924:	80da      	strh	r2, [r3, #6]
	cam->pic->width = 640;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800092e:	809a      	strh	r2, [r3, #4]

}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000000 	.word	0x20000000
 8000940:	2000078c 	.word	0x2000078c
 8000944:	200006fc 	.word	0x200006fc
 8000948:	20000744 	.word	0x20000744
 800094c:	40010808 	.word	0x40010808
 8000950:	200006a8 	.word	0x200006a8

08000954 <transmitBuffer>:

void transmitBuffer() {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, cameraData, 640, HAL_MAX_DELAY);
 8000958:	f04f 33ff 	mov.w	r3, #4294967295
 800095c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000960:	4902      	ldr	r1, [pc, #8]	; (800096c <transmitBuffer+0x18>)
 8000962:	4803      	ldr	r0, [pc, #12]	; (8000970 <transmitBuffer+0x1c>)
 8000964:	f003 fcb1 	bl	80042ca <HAL_UART_Transmit>
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000000 	.word	0x20000000
 8000970:	20000704 	.word	0x20000704

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_MspInit+0x5c>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	4a14      	ldr	r2, [pc, #80]	; (80009dc <HAL_MspInit+0x5c>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6193      	str	r3, [r2, #24]
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <HAL_MspInit+0x5c>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60bb      	str	r3, [r7, #8]
 800099c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_MspInit+0x5c>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	4a0e      	ldr	r2, [pc, #56]	; (80009dc <HAL_MspInit+0x5c>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	61d3      	str	r3, [r2, #28]
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_MspInit+0x5c>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <HAL_MspInit+0x60>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <HAL_MspInit+0x60>)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	bf00      	nop
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010000 	.word	0x40010000

080009e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0310 	add.w	r3, r7, #16
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <HAL_I2C_MspInit+0x70>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d123      	bne.n	8000a4c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <HAL_I2C_MspInit+0x74>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <HAL_I2C_MspInit+0x74>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <HAL_I2C_MspInit+0x74>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a1c:	23c0      	movs	r3, #192	; 0xc0
 8000a1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a20:	2312      	movs	r3, #18
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480b      	ldr	r0, [pc, #44]	; (8000a5c <HAL_I2C_MspInit+0x78>)
 8000a30:	f000 fd64 	bl	80014fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a34:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_I2C_MspInit+0x74>)
 8000a36:	69db      	ldr	r3, [r3, #28]
 8000a38:	4a07      	ldr	r2, [pc, #28]	; (8000a58 <HAL_I2C_MspInit+0x74>)
 8000a3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a3e:	61d3      	str	r3, [r2, #28]
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_I2C_MspInit+0x74>)
 8000a42:	69db      	ldr	r3, [r3, #28]
 8000a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a4c:	bf00      	nop
 8000a4e:	3720      	adds	r7, #32
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40005400 	.word	0x40005400
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010c00 	.word	0x40010c00

08000a60 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM2)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a70:	d132      	bne.n	8000ad8 <HAL_TIM_OC_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_TIM_OC_MspInit+0x80>)
 8000a74:	69db      	ldr	r3, [r3, #28]
 8000a76:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <HAL_TIM_OC_MspInit+0x80>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	61d3      	str	r3, [r2, #28]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_TIM_OC_MspInit+0x80>)
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Channel1;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_TIM_OC_MspInit+0x84>)
 8000a8c:	4a16      	ldr	r2, [pc, #88]	; (8000ae8 <HAL_TIM_OC_MspInit+0x88>)
 8000a8e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_TIM_OC_MspInit+0x84>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <HAL_TIM_OC_MspInit+0x84>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_TIM_OC_MspInit+0x84>)
 8000a9e:	2280      	movs	r2, #128	; 0x80
 8000aa0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa2:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_TIM_OC_MspInit+0x84>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_TIM_OC_MspInit+0x84>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_TIM_OC_MspInit+0x84>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <HAL_TIM_OC_MspInit+0x84>)
 8000ab6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000aba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8000abc:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <HAL_TIM_OC_MspInit+0x84>)
 8000abe:	f000 fab9 	bl	8001034 <HAL_DMA_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_TIM_OC_MspInit+0x6c>
    {
      Error_Handler();
 8000ac8:	f7ff ff54 	bl	8000974 <Error_Handler>
    }

    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <HAL_TIM_OC_MspInit+0x84>)
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ad2:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_TIM_OC_MspInit+0x84>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	2000078c 	.word	0x2000078c
 8000ae8:	40020008 	.word	0x40020008

08000aec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b0a:	d142      	bne.n	8000b92 <HAL_TIM_MspPostInit+0xa6>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <HAL_TIM_MspPostInit+0xb0>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <HAL_TIM_MspPostInit+0xb0>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b20      	ldr	r3, [pc, #128]	; (8000b9c <HAL_TIM_MspPostInit+0xb0>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <HAL_TIM_MspPostInit+0xb0>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	4a1c      	ldr	r2, [pc, #112]	; (8000b9c <HAL_TIM_MspPostInit+0xb0>)
 8000b2a:	f043 0308 	orr.w	r3, r3, #8
 8000b2e:	6193      	str	r3, [r2, #24]
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <HAL_TIM_MspPostInit+0xb0>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f003 0308 	and.w	r3, r3, #8
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2302      	movs	r3, #2
 8000b48:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4813      	ldr	r0, [pc, #76]	; (8000ba0 <HAL_TIM_MspPostInit+0xb4>)
 8000b52:	f000 fcd3 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000b56:	2308      	movs	r3, #8
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	480e      	ldr	r0, [pc, #56]	; (8000ba4 <HAL_TIM_MspPostInit+0xb8>)
 8000b6a:	f000 fcc7 	bl	80014fc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_TIM_MspPostInit+0xbc>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_TIM_MspPostInit+0xbc>)
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b90:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000b92:	bf00      	nop
 8000b94:	3728      	adds	r7, #40	; 0x28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	40010c00 	.word	0x40010c00
 8000ba8:	40010000 	.word	0x40010000

08000bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a1c      	ldr	r2, [pc, #112]	; (8000c38 <HAL_UART_MspInit+0x8c>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d131      	bne.n	8000c30 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <HAL_UART_MspInit+0x90>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <HAL_UART_MspInit+0x90>)
 8000bd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_UART_MspInit+0x90>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_UART_MspInit+0x90>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <HAL_UART_MspInit+0x90>)
 8000bea:	f043 0304 	orr.w	r3, r3, #4
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_UART_MspInit+0x90>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c06:	2303      	movs	r3, #3
 8000c08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480b      	ldr	r0, [pc, #44]	; (8000c40 <HAL_UART_MspInit+0x94>)
 8000c12:	f000 fc73 	bl	80014fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <HAL_UART_MspInit+0x94>)
 8000c2c:	f000 fc66 	bl	80014fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40013800 	.word	0x40013800
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010800 	.word	0x40010800

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr

08000c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8a:	f000 f885 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <DMA1_Channel1_IRQHandler+0x18>)
 8000c9a:	f000 fafb 	bl	8001294 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */
  CAM_stopLineTransfer(&hcam);
 8000c9e:	4804      	ldr	r0, [pc, #16]	; (8000cb0 <DMA1_Channel1_IRQHandler+0x1c>)
 8000ca0:	f7ff fa9f 	bl	80001e2 <CAM_stopLineTransfer>
  transmitBuffer();
 8000ca4:	f7ff fe56 	bl	8000954 <transmitBuffer>
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	2000078c 	.word	0x2000078c
 8000cb0:	200007d0 	.word	0x200007d0

08000cb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cc0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cc2:	e003      	b.n	8000ccc <LoopCopyDataInit>

08000cc4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000cc6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000cc8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cca:	3104      	adds	r1, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ccc:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000cd0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cd2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cd4:	d3f6      	bcc.n	8000cc4 <CopyDataInit>
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000cd8:	e002      	b.n	8000ce0 <LoopFillZerobss>

08000cda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000cdc:	f842 3b04 	str.w	r3, [r2], #4

08000ce0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ce2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ce4:	d3f9      	bcc.n	8000cda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ce6:	f7ff ffe5 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f003 fc59 	bl	80045a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cee:	f7ff fbbb 	bl	8000468 <main>
  bx lr
 8000cf2:	4770      	bx	lr
  ldr r3, =_sidata
 8000cf4:	08004640 	.word	0x08004640
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000cfc:	2000028c 	.word	0x2000028c
  ldr r2, =_sbss
 8000d00:	2000028c 	.word	0x2000028c
  ldr r3, = _ebss
 8000d04:	20000800 	.word	0x20000800

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <HAL_Init+0x28>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_Init+0x28>)
 8000d16:	f043 0310 	orr.w	r3, r3, #16
 8000d1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f947 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fe2a 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40022000 	.word	0x40022000

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f95f 	bl	800101a <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f927 	bl	8000fc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	; (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000280 	.word	0x20000280
 8000d90:	20000288 	.word	0x20000288
 8000d94:	20000284 	.word	0x20000284

08000d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_IncTick+0x1c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b05      	ldr	r3, [pc, #20]	; (8000db8 <HAL_IncTick+0x20>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <HAL_IncTick+0x20>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr
 8000db4:	20000288 	.word	0x20000288
 8000db8:	200007fc 	.word	0x200007fc

08000dbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b02      	ldr	r3, [pc, #8]	; (8000dcc <HAL_GetTick+0x10>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	200007fc 	.word	0x200007fc

08000dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd8:	f7ff fff0 	bl	8000dbc <HAL_GetTick>
 8000ddc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de8:	d005      	beq.n	8000df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_Delay+0x44>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4413      	add	r3, r2
 8000df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000df6:	bf00      	nop
 8000df8:	f7ff ffe0 	bl	8000dbc <HAL_GetTick>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d8f7      	bhi.n	8000df8 <HAL_Delay+0x28>
  {
  }
}
 8000e08:	bf00      	nop
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000288 	.word	0x20000288

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bc80      	pop	{r7}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db0b      	blt.n	8000ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 021f 	and.w	r2, r3, #31
 8000e94:	4906      	ldr	r1, [pc, #24]	; (8000eb0 <__NVIC_EnableIRQ+0x34>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff90 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff2d 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff42 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff90 	bl	8000f08 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5f 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff35 	bl	8000e7c <__NVIC_EnableIRQ>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffa2 	bl	8000f6c <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e043      	b.n	80010d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <HAL_DMA_Init+0xa8>)
 8001052:	4413      	add	r3, r2
 8001054:	4a22      	ldr	r2, [pc, #136]	; (80010e0 <HAL_DMA_Init+0xac>)
 8001056:	fba2 2303 	umull	r2, r3, r2, r3
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	009a      	lsls	r2, r3, #2
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a1f      	ldr	r2, [pc, #124]	; (80010e4 <HAL_DMA_Init+0xb0>)
 8001066:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2202      	movs	r2, #2
 800106c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800107e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001082:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800108c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001098:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	695b      	ldr	r3, [r3, #20]
 800109e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	bffdfff8 	.word	0xbffdfff8
 80010e0:	cccccccd 	.word	0xcccccccd
 80010e4:	40020000 	.word	0x40020000

080010e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <HAL_DMA_Start_IT+0x20>
 8001104:	2302      	movs	r3, #2
 8001106:	e04a      	b.n	800119e <HAL_DMA_Start_IT+0xb6>
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001116:	2b01      	cmp	r3, #1
 8001118:	d13a      	bne.n	8001190 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2202      	movs	r2, #2
 800111e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2200      	movs	r2, #0
 8001126:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 0201 	bic.w	r2, r2, #1
 8001136:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	68b9      	ldr	r1, [r7, #8]
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f000 f9ae 	bl	80014a0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	2b00      	cmp	r3, #0
 800114a:	d008      	beq.n	800115e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 020e 	orr.w	r2, r2, #14
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	e00f      	b.n	800117e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 0204 	bic.w	r2, r2, #4
 800116c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 020a 	orr.w	r2, r2, #10
 800117c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0201 	orr.w	r2, r2, #1
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	e005      	b.n	800119c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001198:	2302      	movs	r3, #2
 800119a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800119c:	7dfb      	ldrb	r3, [r7, #23]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d005      	beq.n	80011ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2204      	movs	r2, #4
 80011c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e051      	b.n	800126e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 020e 	bic.w	r2, r2, #14
 80011d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0201 	bic.w	r2, r2, #1
 80011e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a22      	ldr	r2, [pc, #136]	; (8001278 <HAL_DMA_Abort_IT+0xd0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d029      	beq.n	8001248 <HAL_DMA_Abort_IT+0xa0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a20      	ldr	r2, [pc, #128]	; (800127c <HAL_DMA_Abort_IT+0xd4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d022      	beq.n	8001244 <HAL_DMA_Abort_IT+0x9c>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <HAL_DMA_Abort_IT+0xd8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d01a      	beq.n	800123e <HAL_DMA_Abort_IT+0x96>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_DMA_Abort_IT+0xdc>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d012      	beq.n	8001238 <HAL_DMA_Abort_IT+0x90>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <HAL_DMA_Abort_IT+0xe0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d00a      	beq.n	8001232 <HAL_DMA_Abort_IT+0x8a>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a1a      	ldr	r2, [pc, #104]	; (800128c <HAL_DMA_Abort_IT+0xe4>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d102      	bne.n	800122c <HAL_DMA_Abort_IT+0x84>
 8001226:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800122a:	e00e      	b.n	800124a <HAL_DMA_Abort_IT+0xa2>
 800122c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001230:	e00b      	b.n	800124a <HAL_DMA_Abort_IT+0xa2>
 8001232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001236:	e008      	b.n	800124a <HAL_DMA_Abort_IT+0xa2>
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	e005      	b.n	800124a <HAL_DMA_Abort_IT+0xa2>
 800123e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001242:	e002      	b.n	800124a <HAL_DMA_Abort_IT+0xa2>
 8001244:	2310      	movs	r3, #16
 8001246:	e000      	b.n	800124a <HAL_DMA_Abort_IT+0xa2>
 8001248:	2301      	movs	r3, #1
 800124a:	4a11      	ldr	r2, [pc, #68]	; (8001290 <HAL_DMA_Abort_IT+0xe8>)
 800124c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	4798      	blx	r3
    } 
  }
  return status;
 800126e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001270:	4618      	mov	r0, r3
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40020008 	.word	0x40020008
 800127c:	4002001c 	.word	0x4002001c
 8001280:	40020030 	.word	0x40020030
 8001284:	40020044 	.word	0x40020044
 8001288:	40020058 	.word	0x40020058
 800128c:	4002006c 	.word	0x4002006c
 8001290:	40020000 	.word	0x40020000

08001294 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	2204      	movs	r2, #4
 80012b2:	409a      	lsls	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d04f      	beq.n	800135c <HAL_DMA_IRQHandler+0xc8>
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f003 0304 	and.w	r3, r3, #4
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d04a      	beq.n	800135c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0320 	and.w	r3, r3, #32
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d107      	bne.n	80012e4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0204 	bic.w	r2, r2, #4
 80012e2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a66      	ldr	r2, [pc, #408]	; (8001484 <HAL_DMA_IRQHandler+0x1f0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d029      	beq.n	8001342 <HAL_DMA_IRQHandler+0xae>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a65      	ldr	r2, [pc, #404]	; (8001488 <HAL_DMA_IRQHandler+0x1f4>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d022      	beq.n	800133e <HAL_DMA_IRQHandler+0xaa>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a63      	ldr	r2, [pc, #396]	; (800148c <HAL_DMA_IRQHandler+0x1f8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d01a      	beq.n	8001338 <HAL_DMA_IRQHandler+0xa4>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a62      	ldr	r2, [pc, #392]	; (8001490 <HAL_DMA_IRQHandler+0x1fc>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d012      	beq.n	8001332 <HAL_DMA_IRQHandler+0x9e>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a60      	ldr	r2, [pc, #384]	; (8001494 <HAL_DMA_IRQHandler+0x200>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00a      	beq.n	800132c <HAL_DMA_IRQHandler+0x98>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a5f      	ldr	r2, [pc, #380]	; (8001498 <HAL_DMA_IRQHandler+0x204>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d102      	bne.n	8001326 <HAL_DMA_IRQHandler+0x92>
 8001320:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001324:	e00e      	b.n	8001344 <HAL_DMA_IRQHandler+0xb0>
 8001326:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800132a:	e00b      	b.n	8001344 <HAL_DMA_IRQHandler+0xb0>
 800132c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001330:	e008      	b.n	8001344 <HAL_DMA_IRQHandler+0xb0>
 8001332:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001336:	e005      	b.n	8001344 <HAL_DMA_IRQHandler+0xb0>
 8001338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133c:	e002      	b.n	8001344 <HAL_DMA_IRQHandler+0xb0>
 800133e:	2340      	movs	r3, #64	; 0x40
 8001340:	e000      	b.n	8001344 <HAL_DMA_IRQHandler+0xb0>
 8001342:	2304      	movs	r3, #4
 8001344:	4a55      	ldr	r2, [pc, #340]	; (800149c <HAL_DMA_IRQHandler+0x208>)
 8001346:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8094 	beq.w	800147a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800135a:	e08e      	b.n	800147a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	2202      	movs	r2, #2
 8001362:	409a      	lsls	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4013      	ands	r3, r2
 8001368:	2b00      	cmp	r3, #0
 800136a:	d056      	beq.n	800141a <HAL_DMA_IRQHandler+0x186>
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d051      	beq.n	800141a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10b      	bne.n	800139c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 020a 	bic.w	r2, r2, #10
 8001392:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a38      	ldr	r2, [pc, #224]	; (8001484 <HAL_DMA_IRQHandler+0x1f0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d029      	beq.n	80013fa <HAL_DMA_IRQHandler+0x166>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a37      	ldr	r2, [pc, #220]	; (8001488 <HAL_DMA_IRQHandler+0x1f4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d022      	beq.n	80013f6 <HAL_DMA_IRQHandler+0x162>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a35      	ldr	r2, [pc, #212]	; (800148c <HAL_DMA_IRQHandler+0x1f8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d01a      	beq.n	80013f0 <HAL_DMA_IRQHandler+0x15c>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a34      	ldr	r2, [pc, #208]	; (8001490 <HAL_DMA_IRQHandler+0x1fc>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d012      	beq.n	80013ea <HAL_DMA_IRQHandler+0x156>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_DMA_IRQHandler+0x200>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00a      	beq.n	80013e4 <HAL_DMA_IRQHandler+0x150>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a31      	ldr	r2, [pc, #196]	; (8001498 <HAL_DMA_IRQHandler+0x204>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d102      	bne.n	80013de <HAL_DMA_IRQHandler+0x14a>
 80013d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013dc:	e00e      	b.n	80013fc <HAL_DMA_IRQHandler+0x168>
 80013de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013e2:	e00b      	b.n	80013fc <HAL_DMA_IRQHandler+0x168>
 80013e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013e8:	e008      	b.n	80013fc <HAL_DMA_IRQHandler+0x168>
 80013ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ee:	e005      	b.n	80013fc <HAL_DMA_IRQHandler+0x168>
 80013f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013f4:	e002      	b.n	80013fc <HAL_DMA_IRQHandler+0x168>
 80013f6:	2320      	movs	r3, #32
 80013f8:	e000      	b.n	80013fc <HAL_DMA_IRQHandler+0x168>
 80013fa:	2302      	movs	r3, #2
 80013fc:	4a27      	ldr	r2, [pc, #156]	; (800149c <HAL_DMA_IRQHandler+0x208>)
 80013fe:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	2b00      	cmp	r3, #0
 800140e:	d034      	beq.n	800147a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001418:	e02f      	b.n	800147a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	2208      	movs	r2, #8
 8001420:	409a      	lsls	r2, r3
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d028      	beq.n	800147c <HAL_DMA_IRQHandler+0x1e8>
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d023      	beq.n	800147c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 020e 	bic.w	r2, r2, #14
 8001442:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800144c:	2101      	movs	r1, #1
 800144e:	fa01 f202 	lsl.w	r2, r1, r2
 8001452:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	2b00      	cmp	r3, #0
 8001470:	d004      	beq.n	800147c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	4798      	blx	r3
    }
  }
  return;
 800147a:	bf00      	nop
 800147c:	bf00      	nop
}
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40020008 	.word	0x40020008
 8001488:	4002001c 	.word	0x4002001c
 800148c:	40020030 	.word	0x40020030
 8001490:	40020044 	.word	0x40020044
 8001494:	40020058 	.word	0x40020058
 8001498:	4002006c 	.word	0x4002006c
 800149c:	40020000 	.word	0x40020000

080014a0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b6:	2101      	movs	r1, #1
 80014b8:	fa01 f202 	lsl.w	r2, r1, r2
 80014bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d108      	bne.n	80014e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014de:	e007      	b.n	80014f0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	60da      	str	r2, [r3, #12]
}
 80014f0:	bf00      	nop
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
	...

080014fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b08b      	sub	sp, #44	; 0x2c
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001506:	2300      	movs	r3, #0
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800150a:	2300      	movs	r3, #0
 800150c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800150e:	e169      	b.n	80017e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001510:	2201      	movs	r2, #1
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	69fa      	ldr	r2, [r7, #28]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 8158 	bne.w	80017de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	4a9a      	ldr	r2, [pc, #616]	; (800179c <HAL_GPIO_Init+0x2a0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d05e      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001538:	4a98      	ldr	r2, [pc, #608]	; (800179c <HAL_GPIO_Init+0x2a0>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d875      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800153e:	4a98      	ldr	r2, [pc, #608]	; (80017a0 <HAL_GPIO_Init+0x2a4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d058      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001544:	4a96      	ldr	r2, [pc, #600]	; (80017a0 <HAL_GPIO_Init+0x2a4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d86f      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800154a:	4a96      	ldr	r2, [pc, #600]	; (80017a4 <HAL_GPIO_Init+0x2a8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d052      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001550:	4a94      	ldr	r2, [pc, #592]	; (80017a4 <HAL_GPIO_Init+0x2a8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d869      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001556:	4a94      	ldr	r2, [pc, #592]	; (80017a8 <HAL_GPIO_Init+0x2ac>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d04c      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 800155c:	4a92      	ldr	r2, [pc, #584]	; (80017a8 <HAL_GPIO_Init+0x2ac>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d863      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001562:	4a92      	ldr	r2, [pc, #584]	; (80017ac <HAL_GPIO_Init+0x2b0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d046      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
 8001568:	4a90      	ldr	r2, [pc, #576]	; (80017ac <HAL_GPIO_Init+0x2b0>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d85d      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 800156e:	2b12      	cmp	r3, #18
 8001570:	d82a      	bhi.n	80015c8 <HAL_GPIO_Init+0xcc>
 8001572:	2b12      	cmp	r3, #18
 8001574:	d859      	bhi.n	800162a <HAL_GPIO_Init+0x12e>
 8001576:	a201      	add	r2, pc, #4	; (adr r2, 800157c <HAL_GPIO_Init+0x80>)
 8001578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800157c:	080015f7 	.word	0x080015f7
 8001580:	080015d1 	.word	0x080015d1
 8001584:	080015e3 	.word	0x080015e3
 8001588:	08001625 	.word	0x08001625
 800158c:	0800162b 	.word	0x0800162b
 8001590:	0800162b 	.word	0x0800162b
 8001594:	0800162b 	.word	0x0800162b
 8001598:	0800162b 	.word	0x0800162b
 800159c:	0800162b 	.word	0x0800162b
 80015a0:	0800162b 	.word	0x0800162b
 80015a4:	0800162b 	.word	0x0800162b
 80015a8:	0800162b 	.word	0x0800162b
 80015ac:	0800162b 	.word	0x0800162b
 80015b0:	0800162b 	.word	0x0800162b
 80015b4:	0800162b 	.word	0x0800162b
 80015b8:	0800162b 	.word	0x0800162b
 80015bc:	0800162b 	.word	0x0800162b
 80015c0:	080015d9 	.word	0x080015d9
 80015c4:	080015ed 	.word	0x080015ed
 80015c8:	4a79      	ldr	r2, [pc, #484]	; (80017b0 <HAL_GPIO_Init+0x2b4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ce:	e02c      	b.n	800162a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e029      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	3304      	adds	r3, #4
 80015de:	623b      	str	r3, [r7, #32]
          break;
 80015e0:	e024      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	3308      	adds	r3, #8
 80015e8:	623b      	str	r3, [r7, #32]
          break;
 80015ea:	e01f      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	330c      	adds	r3, #12
 80015f2:	623b      	str	r3, [r7, #32]
          break;
 80015f4:	e01a      	b.n	800162c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015fe:	2304      	movs	r3, #4
 8001600:	623b      	str	r3, [r7, #32]
          break;
 8001602:	e013      	b.n	800162c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d105      	bne.n	8001618 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800160c:	2308      	movs	r3, #8
 800160e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	611a      	str	r2, [r3, #16]
          break;
 8001616:	e009      	b.n	800162c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001618:	2308      	movs	r3, #8
 800161a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	615a      	str	r2, [r3, #20]
          break;
 8001622:	e003      	b.n	800162c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e000      	b.n	800162c <HAL_GPIO_Init+0x130>
          break;
 800162a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2bff      	cmp	r3, #255	; 0xff
 8001630:	d801      	bhi.n	8001636 <HAL_GPIO_Init+0x13a>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	e001      	b.n	800163a <HAL_GPIO_Init+0x13e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	3304      	adds	r3, #4
 800163a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2bff      	cmp	r3, #255	; 0xff
 8001640:	d802      	bhi.n	8001648 <HAL_GPIO_Init+0x14c>
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	e002      	b.n	800164e <HAL_GPIO_Init+0x152>
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	3b08      	subs	r3, #8
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	210f      	movs	r1, #15
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	fa01 f303 	lsl.w	r3, r1, r3
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	6a39      	ldr	r1, [r7, #32]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	fa01 f303 	lsl.w	r3, r1, r3
 8001668:	431a      	orrs	r2, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	f000 80b1 	beq.w	80017de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800167c:	4b4d      	ldr	r3, [pc, #308]	; (80017b4 <HAL_GPIO_Init+0x2b8>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	4a4c      	ldr	r2, [pc, #304]	; (80017b4 <HAL_GPIO_Init+0x2b8>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	6193      	str	r3, [r2, #24]
 8001688:	4b4a      	ldr	r3, [pc, #296]	; (80017b4 <HAL_GPIO_Init+0x2b8>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	60bb      	str	r3, [r7, #8]
 8001692:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001694:	4a48      	ldr	r2, [pc, #288]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	089b      	lsrs	r3, r3, #2
 800169a:	3302      	adds	r3, #2
 800169c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	220f      	movs	r2, #15
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	4a40      	ldr	r2, [pc, #256]	; (80017bc <HAL_GPIO_Init+0x2c0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d013      	beq.n	80016e8 <HAL_GPIO_Init+0x1ec>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a3f      	ldr	r2, [pc, #252]	; (80017c0 <HAL_GPIO_Init+0x2c4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d00d      	beq.n	80016e4 <HAL_GPIO_Init+0x1e8>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4a3e      	ldr	r2, [pc, #248]	; (80017c4 <HAL_GPIO_Init+0x2c8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d007      	beq.n	80016e0 <HAL_GPIO_Init+0x1e4>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a3d      	ldr	r2, [pc, #244]	; (80017c8 <HAL_GPIO_Init+0x2cc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_GPIO_Init+0x1e0>
 80016d8:	2303      	movs	r3, #3
 80016da:	e006      	b.n	80016ea <HAL_GPIO_Init+0x1ee>
 80016dc:	2304      	movs	r3, #4
 80016de:	e004      	b.n	80016ea <HAL_GPIO_Init+0x1ee>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e002      	b.n	80016ea <HAL_GPIO_Init+0x1ee>
 80016e4:	2301      	movs	r3, #1
 80016e6:	e000      	b.n	80016ea <HAL_GPIO_Init+0x1ee>
 80016e8:	2300      	movs	r3, #0
 80016ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016ec:	f002 0203 	and.w	r2, r2, #3
 80016f0:	0092      	lsls	r2, r2, #2
 80016f2:	4093      	lsls	r3, r2
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016fa:	492f      	ldr	r1, [pc, #188]	; (80017b8 <HAL_GPIO_Init+0x2bc>)
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001714:	4b2d      	ldr	r3, [pc, #180]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	492c      	ldr	r1, [pc, #176]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001722:	4b2a      	ldr	r3, [pc, #168]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	43db      	mvns	r3, r3
 800172a:	4928      	ldr	r1, [pc, #160]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800172c:	4013      	ands	r3, r2
 800172e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800173e:	685a      	ldr	r2, [r3, #4]
 8001740:	4922      	ldr	r1, [pc, #136]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	43db      	mvns	r3, r3
 8001752:	491e      	ldr	r1, [pc, #120]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001754:	4013      	ands	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	4918      	ldr	r1, [pc, #96]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	608b      	str	r3, [r1, #8]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001774:	689a      	ldr	r2, [r3, #8]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4914      	ldr	r1, [pc, #80]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800177c:	4013      	ands	r3, r2
 800177e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d021      	beq.n	80017d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	490e      	ldr	r1, [pc, #56]	; (80017cc <HAL_GPIO_Init+0x2d0>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	4313      	orrs	r3, r2
 8001796:	60cb      	str	r3, [r1, #12]
 8001798:	e021      	b.n	80017de <HAL_GPIO_Init+0x2e2>
 800179a:	bf00      	nop
 800179c:	10320000 	.word	0x10320000
 80017a0:	10310000 	.word	0x10310000
 80017a4:	10220000 	.word	0x10220000
 80017a8:	10210000 	.word	0x10210000
 80017ac:	10120000 	.word	0x10120000
 80017b0:	10110000 	.word	0x10110000
 80017b4:	40021000 	.word	0x40021000
 80017b8:	40010000 	.word	0x40010000
 80017bc:	40010800 	.word	0x40010800
 80017c0:	40010c00 	.word	0x40010c00
 80017c4:	40011000 	.word	0x40011000
 80017c8:	40011400 	.word	0x40011400
 80017cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <HAL_GPIO_Init+0x304>)
 80017d2:	68da      	ldr	r2, [r3, #12]
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	4909      	ldr	r1, [pc, #36]	; (8001800 <HAL_GPIO_Init+0x304>)
 80017da:	4013      	ands	r3, r2
 80017dc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	3301      	adds	r3, #1
 80017e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	fa22 f303 	lsr.w	r3, r2, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f47f ae8e 	bne.w	8001510 <HAL_GPIO_Init+0x14>
  }
}
 80017f4:	bf00      	nop
 80017f6:	bf00      	nop
 80017f8:	372c      	adds	r7, #44	; 0x2c
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	40010400 	.word	0x40010400

08001804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	807b      	strh	r3, [r7, #2]
 8001810:	4613      	mov	r3, r2
 8001812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001814:	787b      	ldrb	r3, [r7, #1]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001820:	e003      	b.n	800182a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	041a      	lsls	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	611a      	str	r2, [r3, #16]
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e12b      	b.n	8001a9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff f8c2 	bl	80009e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2224      	movs	r2, #36	; 0x24
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 0201 	bic.w	r2, r2, #1
 8001876:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001886:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001896:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001898:	f001 fb6e 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 800189c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	4a81      	ldr	r2, [pc, #516]	; (8001aa8 <HAL_I2C_Init+0x274>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d807      	bhi.n	80018b8 <HAL_I2C_Init+0x84>
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4a80      	ldr	r2, [pc, #512]	; (8001aac <HAL_I2C_Init+0x278>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	bf94      	ite	ls
 80018b0:	2301      	movls	r3, #1
 80018b2:	2300      	movhi	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	e006      	b.n	80018c6 <HAL_I2C_Init+0x92>
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4a7d      	ldr	r2, [pc, #500]	; (8001ab0 <HAL_I2C_Init+0x27c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	bf94      	ite	ls
 80018c0:	2301      	movls	r3, #1
 80018c2:	2300      	movhi	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e0e7      	b.n	8001a9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	4a78      	ldr	r2, [pc, #480]	; (8001ab4 <HAL_I2C_Init+0x280>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	0c9b      	lsrs	r3, r3, #18
 80018d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a6a      	ldr	r2, [pc, #424]	; (8001aa8 <HAL_I2C_Init+0x274>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d802      	bhi.n	8001908 <HAL_I2C_Init+0xd4>
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	3301      	adds	r3, #1
 8001906:	e009      	b.n	800191c <HAL_I2C_Init+0xe8>
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800190e:	fb02 f303 	mul.w	r3, r2, r3
 8001912:	4a69      	ldr	r2, [pc, #420]	; (8001ab8 <HAL_I2C_Init+0x284>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	099b      	lsrs	r3, r3, #6
 800191a:	3301      	adds	r3, #1
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6812      	ldr	r2, [r2, #0]
 8001920:	430b      	orrs	r3, r1
 8001922:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800192e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	495c      	ldr	r1, [pc, #368]	; (8001aa8 <HAL_I2C_Init+0x274>)
 8001938:	428b      	cmp	r3, r1
 800193a:	d819      	bhi.n	8001970 <HAL_I2C_Init+0x13c>
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	1e59      	subs	r1, r3, #1
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	fbb1 f3f3 	udiv	r3, r1, r3
 800194a:	1c59      	adds	r1, r3, #1
 800194c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001950:	400b      	ands	r3, r1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00a      	beq.n	800196c <HAL_I2C_Init+0x138>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1e59      	subs	r1, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	fbb1 f3f3 	udiv	r3, r1, r3
 8001964:	3301      	adds	r3, #1
 8001966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196a:	e051      	b.n	8001a10 <HAL_I2C_Init+0x1dc>
 800196c:	2304      	movs	r3, #4
 800196e:	e04f      	b.n	8001a10 <HAL_I2C_Init+0x1dc>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d111      	bne.n	800199c <HAL_I2C_Init+0x168>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1e58      	subs	r0, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	440b      	add	r3, r1
 8001986:	fbb0 f3f3 	udiv	r3, r0, r3
 800198a:	3301      	adds	r3, #1
 800198c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	e012      	b.n	80019c2 <HAL_I2C_Init+0x18e>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e58      	subs	r0, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	460b      	mov	r3, r1
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	440b      	add	r3, r1
 80019aa:	0099      	lsls	r1, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b2:	3301      	adds	r3, #1
 80019b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	bf0c      	ite	eq
 80019bc:	2301      	moveq	r3, #1
 80019be:	2300      	movne	r3, #0
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_I2C_Init+0x196>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e022      	b.n	8001a10 <HAL_I2C_Init+0x1dc>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10e      	bne.n	80019f0 <HAL_I2C_Init+0x1bc>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1e58      	subs	r0, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6859      	ldr	r1, [r3, #4]
 80019da:	460b      	mov	r3, r1
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	440b      	add	r3, r1
 80019e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e4:	3301      	adds	r3, #1
 80019e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ee:	e00f      	b.n	8001a10 <HAL_I2C_Init+0x1dc>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	1e58      	subs	r0, r3, #1
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6859      	ldr	r1, [r3, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	0099      	lsls	r1, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a06:	3301      	adds	r3, #1
 8001a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	6809      	ldr	r1, [r1, #0]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69da      	ldr	r2, [r3, #28]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6911      	ldr	r1, [r2, #16]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	68d2      	ldr	r2, [r2, #12]
 8001a4a:	4311      	orrs	r1, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	430b      	orrs	r3, r1
 8001a52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	695a      	ldr	r2, [r3, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0201 	orr.w	r2, r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2220      	movs	r2, #32
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	000186a0 	.word	0x000186a0
 8001aac:	001e847f 	.word	0x001e847f
 8001ab0:	003d08ff 	.word	0x003d08ff
 8001ab4:	431bde83 	.word	0x431bde83
 8001ab8:	10624dd3 	.word	0x10624dd3

08001abc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	460b      	mov	r3, r1
 8001aca:	817b      	strh	r3, [r7, #10]
 8001acc:	4613      	mov	r3, r2
 8001ace:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff f974 	bl	8000dbc <HAL_GetTick>
 8001ad4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	f040 80e0 	bne.w	8001ca4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	2319      	movs	r3, #25
 8001aea:	2201      	movs	r2, #1
 8001aec:	4970      	ldr	r1, [pc, #448]	; (8001cb0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fc92 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001afa:	2302      	movs	r3, #2
 8001afc:	e0d3      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d101      	bne.n	8001b0c <HAL_I2C_Master_Transmit+0x50>
 8001b08:	2302      	movs	r3, #2
 8001b0a:	e0cc      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d007      	beq.n	8001b32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2221      	movs	r2, #33	; 0x21
 8001b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	893a      	ldrh	r2, [r7, #8]
 8001b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4a50      	ldr	r2, [pc, #320]	; (8001cb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b74:	8979      	ldrh	r1, [r7, #10]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	6a3a      	ldr	r2, [r7, #32]
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f000 fafc 	bl	8002178 <I2C_MasterRequestWrite>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e08d      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ba0:	e066      	b.n	8001c70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ba2:	697a      	ldr	r2, [r7, #20]
 8001ba4:	6a39      	ldr	r1, [r7, #32]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f000 fd0c 	bl	80025c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00d      	beq.n	8001bce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	d107      	bne.n	8001bca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e06b      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	781a      	ldrb	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3b01      	subs	r3, #1
 8001bec:	b29a      	uxth	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b04      	cmp	r3, #4
 8001c0a:	d11b      	bne.n	8001c44 <HAL_I2C_Master_Transmit+0x188>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d017      	beq.n	8001c44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	781a      	ldrb	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	1c5a      	adds	r2, r3, #1
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3b01      	subs	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	6a39      	ldr	r1, [r7, #32]
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 fcfc 	bl	8002646 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00d      	beq.n	8001c70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	2b04      	cmp	r3, #4
 8001c5a:	d107      	bne.n	8001c6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e01a      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d194      	bne.n	8001ba2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e000      	b.n	8001ca6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ca4:	2302      	movs	r3, #2
  }
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	00100002 	.word	0x00100002
 8001cb4:	ffff0000 	.word	0xffff0000

08001cb8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08c      	sub	sp, #48	; 0x30
 8001cbc:	af02      	add	r7, sp, #8
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	607a      	str	r2, [r7, #4]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	817b      	strh	r3, [r7, #10]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff f874 	bl	8000dbc <HAL_GetTick>
 8001cd4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	f040 823f 	bne.w	8002162 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2319      	movs	r3, #25
 8001cea:	2201      	movs	r2, #1
 8001cec:	497f      	ldr	r1, [pc, #508]	; (8001eec <HAL_I2C_Master_Receive+0x234>)
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 fb92 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e232      	b.n	8002164 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d101      	bne.n	8001d0c <HAL_I2C_Master_Receive+0x54>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e22b      	b.n	8002164 <HAL_I2C_Master_Receive+0x4ac>
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d007      	beq.n	8001d32 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2222      	movs	r2, #34	; 0x22
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	893a      	ldrh	r2, [r7, #8]
 8001d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4a5f      	ldr	r2, [pc, #380]	; (8001ef0 <HAL_I2C_Master_Receive+0x238>)
 8001d72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d74:	8979      	ldrh	r1, [r7, #10]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 fa7e 	bl	800227c <I2C_MasterRequestRead>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e1ec      	b.n	8002164 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d113      	bne.n	8001dba <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	699b      	ldr	r3, [r3, #24]
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	e1c0      	b.n	800213c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d11e      	bne.n	8001e00 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd2:	b672      	cpsid	i
}
 8001dd4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	61bb      	str	r3, [r7, #24]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dfc:	b662      	cpsie	i
}
 8001dfe:	e035      	b.n	8001e6c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d11e      	bne.n	8001e46 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e18:	b672      	cpsid	i
}
 8001e1a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e42:	b662      	cpsie	i
}
 8001e44:	e012      	b.n	8001e6c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e56:	2300      	movs	r3, #0
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001e6c:	e166      	b.n	800213c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e72:	2b03      	cmp	r3, #3
 8001e74:	f200 811f 	bhi.w	80020b6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d123      	bne.n	8001ec8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 fc1f 	bl	80026c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e167      	b.n	8002164 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ec6:	e139      	b.n	800213c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d152      	bne.n	8001f76 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4906      	ldr	r1, [pc, #24]	; (8001ef4 <HAL_I2C_Master_Receive+0x23c>)
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 fa9c 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d008      	beq.n	8001ef8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e13c      	b.n	8002164 <HAL_I2C_Master_Receive+0x4ac>
 8001eea:	bf00      	nop
 8001eec:	00100002 	.word	0x00100002
 8001ef0:	ffff0000 	.word	0xffff0000
 8001ef4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef8:	b672      	cpsid	i
}
 8001efa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f3e:	b662      	cpsie	i
}
 8001f40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	1c5a      	adds	r2, r3, #1
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f74:	e0e2      	b.n	800213c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	497b      	ldr	r1, [pc, #492]	; (800216c <HAL_I2C_Master_Receive+0x4b4>)
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f000 fa49 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0e9      	b.n	8002164 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691a      	ldr	r2, [r3, #16]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001fd6:	4b66      	ldr	r3, [pc, #408]	; (8002170 <HAL_I2C_Master_Receive+0x4b8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	08db      	lsrs	r3, r3, #3
 8001fdc:	4a65      	ldr	r2, [pc, #404]	; (8002174 <HAL_I2C_Master_Receive+0x4bc>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0a1a      	lsrs	r2, r3, #8
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00da      	lsls	r2, r3, #3
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d118      	bne.n	800202e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f043 0220 	orr.w	r2, r3, #32
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800201e:	b662      	cpsie	i
}
 8002020:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e09a      	b.n	8002164 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b04      	cmp	r3, #4
 800203a:	d1d9      	bne.n	8001ff0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800207e:	b662      	cpsie	i
}
 8002080:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209e:	3b01      	subs	r3, #1
 80020a0:	b29a      	uxth	r2, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	3b01      	subs	r3, #1
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020b4:	e042      	b.n	800213c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	f000 fb04 	bl	80026c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e04c      	b.n	8002164 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	3b01      	subs	r3, #1
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b04      	cmp	r3, #4
 8002108:	d118      	bne.n	800213c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002114:	b2d2      	uxtb	r2, r2
 8002116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	2b00      	cmp	r3, #0
 8002142:	f47f ae94 	bne.w	8001e6e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
  }
}
 8002164:	4618      	mov	r0, r3
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	00010004 	.word	0x00010004
 8002170:	20000280 	.word	0x20000280
 8002174:	14f8b589 	.word	0x14f8b589

08002178 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	607a      	str	r2, [r7, #4]
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	460b      	mov	r3, r1
 8002186:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d006      	beq.n	80021a2 <I2C_MasterRequestWrite+0x2a>
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d003      	beq.n	80021a2 <I2C_MasterRequestWrite+0x2a>
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021a0:	d108      	bne.n	80021b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e00b      	b.n	80021cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	2b12      	cmp	r3, #18
 80021ba:	d107      	bne.n	80021cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021d8:	68f8      	ldr	r0, [r7, #12]
 80021da:	f000 f91d 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d00d      	beq.n	8002200 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f2:	d103      	bne.n	80021fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e035      	b.n	800226c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002208:	d108      	bne.n	800221c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800220a:	897b      	ldrh	r3, [r7, #10]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002218:	611a      	str	r2, [r3, #16]
 800221a:	e01b      	b.n	8002254 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800221c:	897b      	ldrh	r3, [r7, #10]
 800221e:	11db      	asrs	r3, r3, #7
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 0306 	and.w	r3, r3, #6
 8002226:	b2db      	uxtb	r3, r3
 8002228:	f063 030f 	orn	r3, r3, #15
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	490e      	ldr	r1, [pc, #56]	; (8002274 <I2C_MasterRequestWrite+0xfc>)
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 f943 	bl	80024c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e010      	b.n	800226c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800224a:	897b      	ldrh	r3, [r7, #10]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4907      	ldr	r1, [pc, #28]	; (8002278 <I2C_MasterRequestWrite+0x100>)
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f000 f933 	bl	80024c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	00010008 	.word	0x00010008
 8002278:	00010002 	.word	0x00010002

0800227c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	460b      	mov	r3, r1
 800228a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d006      	beq.n	80022b6 <I2C_MasterRequestRead+0x3a>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d003      	beq.n	80022b6 <I2C_MasterRequestRead+0x3a>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022b4:	d108      	bne.n	80022c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	e00b      	b.n	80022e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	2b11      	cmp	r3, #17
 80022ce:	d107      	bne.n	80022e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f893 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00d      	beq.n	8002314 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002306:	d103      	bne.n	8002310 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e079      	b.n	8002408 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800231c:	d108      	bne.n	8002330 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800231e:	897b      	ldrh	r3, [r7, #10]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	b2da      	uxtb	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	611a      	str	r2, [r3, #16]
 800232e:	e05f      	b.n	80023f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002330:	897b      	ldrh	r3, [r7, #10]
 8002332:	11db      	asrs	r3, r3, #7
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f003 0306 	and.w	r3, r3, #6
 800233a:	b2db      	uxtb	r3, r3
 800233c:	f063 030f 	orn	r3, r3, #15
 8002340:	b2da      	uxtb	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	4930      	ldr	r1, [pc, #192]	; (8002410 <I2C_MasterRequestRead+0x194>)
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f8b9 	bl	80024c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e054      	b.n	8002408 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800235e:	897b      	ldrh	r3, [r7, #10]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4929      	ldr	r1, [pc, #164]	; (8002414 <I2C_MasterRequestRead+0x198>)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f8a9 	bl	80024c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e044      	b.n	8002408 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	613b      	str	r3, [r7, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f831 	bl	8002418 <I2C_WaitOnFlagUntilTimeout>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00d      	beq.n	80023d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ca:	d103      	bne.n	80023d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e017      	b.n	8002408 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80023d8:	897b      	ldrh	r3, [r7, #10]
 80023da:	11db      	asrs	r3, r3, #7
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f003 0306 	and.w	r3, r3, #6
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f063 030e 	orn	r3, r3, #14
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <I2C_MasterRequestRead+0x198>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f865 	bl	80024c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	00010008 	.word	0x00010008
 8002414:	00010002 	.word	0x00010002

08002418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	603b      	str	r3, [r7, #0]
 8002424:	4613      	mov	r3, r2
 8002426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002428:	e025      	b.n	8002476 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002430:	d021      	beq.n	8002476 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002432:	f7fe fcc3 	bl	8000dbc <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d302      	bcc.n	8002448 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d116      	bne.n	8002476 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2220      	movs	r2, #32
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f043 0220 	orr.w	r2, r3, #32
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e023      	b.n	80024be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	0c1b      	lsrs	r3, r3, #16
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b01      	cmp	r3, #1
 800247e:	d10d      	bne.n	800249c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	4013      	ands	r3, r2
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf0c      	ite	eq
 8002492:	2301      	moveq	r3, #1
 8002494:	2300      	movne	r3, #0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	461a      	mov	r2, r3
 800249a:	e00c      	b.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	43da      	mvns	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	4013      	ands	r3, r2
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	bf0c      	ite	eq
 80024ae:	2301      	moveq	r3, #1
 80024b0:	2300      	movne	r3, #0
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d0b6      	beq.n	800242a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b084      	sub	sp, #16
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	60f8      	str	r0, [r7, #12]
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024d4:	e051      	b.n	800257a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e4:	d123      	bne.n	800252e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f043 0204 	orr.w	r2, r3, #4
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e046      	b.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d021      	beq.n	800257a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002536:	f7fe fc41 	bl	8000dbc <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	429a      	cmp	r2, r3
 8002544:	d302      	bcc.n	800254c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d116      	bne.n	800257a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	f043 0220 	orr.w	r2, r3, #32
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e020      	b.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	0c1b      	lsrs	r3, r3, #16
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d10c      	bne.n	800259e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4013      	ands	r3, r2
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf14      	ite	ne
 8002596:	2301      	movne	r3, #1
 8002598:	2300      	moveq	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	e00b      	b.n	80025b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	43da      	mvns	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4013      	ands	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d18d      	bne.n	80024d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025d0:	e02d      	b.n	800262e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 f8ce 	bl	8002774 <I2C_IsAcknowledgeFailed>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e02d      	b.n	800263e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d021      	beq.n	800262e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ea:	f7fe fbe7 	bl	8000dbc <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d116      	bne.n	800262e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f043 0220 	orr.w	r2, r3, #32
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e007      	b.n	800263e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002638:	2b80      	cmp	r3, #128	; 0x80
 800263a:	d1ca      	bne.n	80025d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002652:	e02d      	b.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 f88d 	bl	8002774 <I2C_IsAcknowledgeFailed>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e02d      	b.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266a:	d021      	beq.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266c:	f7fe fba6 	bl	8000dbc <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	68ba      	ldr	r2, [r7, #8]
 8002678:	429a      	cmp	r2, r3
 800267a:	d302      	bcc.n	8002682 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d116      	bne.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f043 0220 	orr.w	r2, r3, #32
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e007      	b.n	80026c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d1ca      	bne.n	8002654 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026d4:	e042      	b.n	800275c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d119      	bne.n	8002718 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f06f 0210 	mvn.w	r2, #16
 80026ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e029      	b.n	800276c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002718:	f7fe fb50 	bl	8000dbc <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	d302      	bcc.n	800272e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d116      	bne.n	800275c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2220      	movs	r2, #32
 8002738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e007      	b.n	800276c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002766:	2b40      	cmp	r3, #64	; 0x40
 8002768:	d1b5      	bne.n	80026d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278a:	d11b      	bne.n	80027c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002794:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	f043 0204 	orr.w	r2, r3, #4
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr

080027d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b086      	sub	sp, #24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e26c      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8087 	beq.w	80028fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80027f0:	4b92      	ldr	r3, [pc, #584]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 030c 	and.w	r3, r3, #12
 80027f8:	2b04      	cmp	r3, #4
 80027fa:	d00c      	beq.n	8002816 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027fc:	4b8f      	ldr	r3, [pc, #572]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 030c 	and.w	r3, r3, #12
 8002804:	2b08      	cmp	r3, #8
 8002806:	d112      	bne.n	800282e <HAL_RCC_OscConfig+0x5e>
 8002808:	4b8c      	ldr	r3, [pc, #560]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002814:	d10b      	bne.n	800282e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002816:	4b89      	ldr	r3, [pc, #548]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d06c      	beq.n	80028fc <HAL_RCC_OscConfig+0x12c>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d168      	bne.n	80028fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e246      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x76>
 8002838:	4b80      	ldr	r3, [pc, #512]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a7f      	ldr	r2, [pc, #508]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 800283e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	e02e      	b.n	80028a4 <HAL_RCC_OscConfig+0xd4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10c      	bne.n	8002868 <HAL_RCC_OscConfig+0x98>
 800284e:	4b7b      	ldr	r3, [pc, #492]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a7a      	ldr	r2, [pc, #488]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	4b78      	ldr	r3, [pc, #480]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a77      	ldr	r2, [pc, #476]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002860:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	e01d      	b.n	80028a4 <HAL_RCC_OscConfig+0xd4>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0xbc>
 8002872:	4b72      	ldr	r3, [pc, #456]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a71      	ldr	r2, [pc, #452]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	4b6f      	ldr	r3, [pc, #444]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a6e      	ldr	r2, [pc, #440]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0xd4>
 800288c:	4b6b      	ldr	r3, [pc, #428]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a6a      	ldr	r2, [pc, #424]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	4b68      	ldr	r3, [pc, #416]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a67      	ldr	r2, [pc, #412]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 800289e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ac:	f7fe fa86 	bl	8000dbc <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028b4:	f7fe fa82 	bl	8000dbc <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b64      	cmp	r3, #100	; 0x64
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e1fa      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b5d      	ldr	r3, [pc, #372]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0xe4>
 80028d2:	e014      	b.n	80028fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe fa72 	bl	8000dbc <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fa6e 	bl	8000dbc <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	; 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e1e6      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028ee:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1f0      	bne.n	80028dc <HAL_RCC_OscConfig+0x10c>
 80028fa:	e000      	b.n	80028fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d063      	beq.n	80029d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800290a:	4b4c      	ldr	r3, [pc, #304]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 030c 	and.w	r3, r3, #12
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00b      	beq.n	800292e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002916:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	2b08      	cmp	r3, #8
 8002920:	d11c      	bne.n	800295c <HAL_RCC_OscConfig+0x18c>
 8002922:	4b46      	ldr	r3, [pc, #280]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d116      	bne.n	800295c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292e:	4b43      	ldr	r3, [pc, #268]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d005      	beq.n	8002946 <HAL_RCC_OscConfig+0x176>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d001      	beq.n	8002946 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e1ba      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002946:	4b3d      	ldr	r3, [pc, #244]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4939      	ldr	r1, [pc, #228]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	e03a      	b.n	80029d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d020      	beq.n	80029a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002964:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <HAL_RCC_OscConfig+0x270>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296a:	f7fe fa27 	bl	8000dbc <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002972:	f7fe fa23 	bl	8000dbc <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e19b      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4927      	ldr	r1, [pc, #156]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	600b      	str	r3, [r1, #0]
 80029a4:	e015      	b.n	80029d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029a6:	4b26      	ldr	r3, [pc, #152]	; (8002a40 <HAL_RCC_OscConfig+0x270>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7fe fa06 	bl	8000dbc <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b4:	f7fe fa02 	bl	8000dbc <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e17a      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d03a      	beq.n	8002a54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d019      	beq.n	8002a1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e6:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <HAL_RCC_OscConfig+0x274>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ec:	f7fe f9e6 	bl	8000dbc <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f4:	f7fe f9e2 	bl	8000dbc <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e15a      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <HAL_RCC_OscConfig+0x26c>)
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a12:	2001      	movs	r0, #1
 8002a14:	f000 fad8 	bl	8002fc8 <RCC_Delay>
 8002a18:	e01c      	b.n	8002a54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a20:	f7fe f9cc 	bl	8000dbc <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a26:	e00f      	b.n	8002a48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a28:	f7fe f9c8 	bl	8000dbc <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d908      	bls.n	8002a48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e140      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	42420000 	.word	0x42420000
 8002a44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a48:	4b9e      	ldr	r3, [pc, #632]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d1e9      	bne.n	8002a28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a6 	beq.w	8002bae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a62:	2300      	movs	r3, #0
 8002a64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a66:	4b97      	ldr	r3, [pc, #604]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10d      	bne.n	8002a8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	4b94      	ldr	r3, [pc, #592]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4a93      	ldr	r2, [pc, #588]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	61d3      	str	r3, [r2, #28]
 8002a7e:	4b91      	ldr	r3, [pc, #580]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	4b8e      	ldr	r3, [pc, #568]	; (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d118      	bne.n	8002acc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9a:	4b8b      	ldr	r3, [pc, #556]	; (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a8a      	ldr	r2, [pc, #552]	; (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa6:	f7fe f989 	bl	8000dbc <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aae:	f7fe f985 	bl	8000dbc <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b64      	cmp	r3, #100	; 0x64
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e0fd      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	4b81      	ldr	r3, [pc, #516]	; (8002cc8 <HAL_RCC_OscConfig+0x4f8>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x312>
 8002ad4:	4b7b      	ldr	r3, [pc, #492]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	4a7a      	ldr	r2, [pc, #488]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6213      	str	r3, [r2, #32]
 8002ae0:	e02d      	b.n	8002b3e <HAL_RCC_OscConfig+0x36e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x334>
 8002aea:	4b76      	ldr	r3, [pc, #472]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	4a75      	ldr	r2, [pc, #468]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	6213      	str	r3, [r2, #32]
 8002af6:	4b73      	ldr	r3, [pc, #460]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	4a72      	ldr	r2, [pc, #456]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002afc:	f023 0304 	bic.w	r3, r3, #4
 8002b00:	6213      	str	r3, [r2, #32]
 8002b02:	e01c      	b.n	8002b3e <HAL_RCC_OscConfig+0x36e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d10c      	bne.n	8002b26 <HAL_RCC_OscConfig+0x356>
 8002b0c:	4b6d      	ldr	r3, [pc, #436]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	4a6c      	ldr	r2, [pc, #432]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002b12:	f043 0304 	orr.w	r3, r3, #4
 8002b16:	6213      	str	r3, [r2, #32]
 8002b18:	4b6a      	ldr	r3, [pc, #424]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	4a69      	ldr	r2, [pc, #420]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6213      	str	r3, [r2, #32]
 8002b24:	e00b      	b.n	8002b3e <HAL_RCC_OscConfig+0x36e>
 8002b26:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	4a66      	ldr	r2, [pc, #408]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	6213      	str	r3, [r2, #32]
 8002b32:	4b64      	ldr	r3, [pc, #400]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	4a63      	ldr	r2, [pc, #396]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002b38:	f023 0304 	bic.w	r3, r3, #4
 8002b3c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d015      	beq.n	8002b72 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b46:	f7fe f939 	bl	8000dbc <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b4c:	e00a      	b.n	8002b64 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4e:	f7fe f935 	bl	8000dbc <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e0ab      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b64:	4b57      	ldr	r3, [pc, #348]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0ee      	beq.n	8002b4e <HAL_RCC_OscConfig+0x37e>
 8002b70:	e014      	b.n	8002b9c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b72:	f7fe f923 	bl	8000dbc <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b78:	e00a      	b.n	8002b90 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7a:	f7fe f91f 	bl	8000dbc <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d901      	bls.n	8002b90 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e095      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b90:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ee      	bne.n	8002b7a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b9c:	7dfb      	ldrb	r3, [r7, #23]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d105      	bne.n	8002bae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba2:	4b48      	ldr	r3, [pc, #288]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4a47      	ldr	r2, [pc, #284]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8081 	beq.w	8002cba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bb8:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d061      	beq.n	8002c88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d146      	bne.n	8002c5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bcc:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_RCC_OscConfig+0x4fc>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7fe f8f3 	bl	8000dbc <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bda:	f7fe f8ef 	bl	8000dbc <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e067      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bec:	4b35      	ldr	r3, [pc, #212]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1f0      	bne.n	8002bda <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a1b      	ldr	r3, [r3, #32]
 8002bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c00:	d108      	bne.n	8002c14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c02:	4b30      	ldr	r3, [pc, #192]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	492d      	ldr	r1, [pc, #180]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c14:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a19      	ldr	r1, [r3, #32]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	430b      	orrs	r3, r1
 8002c26:	4927      	ldr	r1, [pc, #156]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <HAL_RCC_OscConfig+0x4fc>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c32:	f7fe f8c3 	bl	8000dbc <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c38:	e008      	b.n	8002c4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7fe f8bf 	bl	8000dbc <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d901      	bls.n	8002c4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e037      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c4c:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d0f0      	beq.n	8002c3a <HAL_RCC_OscConfig+0x46a>
 8002c58:	e02f      	b.n	8002cba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <HAL_RCC_OscConfig+0x4fc>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7fe f8ac 	bl	8000dbc <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c68:	f7fe f8a8 	bl	8000dbc <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e020      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0x498>
 8002c86:	e018      	b.n	8002cba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e013      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_OscConfig+0x4f4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d001      	beq.n	8002cba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40007000 	.word	0x40007000
 8002ccc:	42420060 	.word	0x42420060

08002cd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0d0      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ce4:	4b6a      	ldr	r3, [pc, #424]	; (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d910      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cf2:	4b67      	ldr	r3, [pc, #412]	; (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f023 0207 	bic.w	r2, r3, #7
 8002cfa:	4965      	ldr	r1, [pc, #404]	; (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b63      	ldr	r3, [pc, #396]	; (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0b8      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d020      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d2c:	4b59      	ldr	r3, [pc, #356]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a58      	ldr	r2, [pc, #352]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002d36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d005      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d44:	4b53      	ldr	r3, [pc, #332]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a52      	ldr	r2, [pc, #328]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002d4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d50:	4b50      	ldr	r3, [pc, #320]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	494d      	ldr	r1, [pc, #308]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d040      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b47      	ldr	r3, [pc, #284]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d115      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e07f      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d107      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d8e:	4b41      	ldr	r3, [pc, #260]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d109      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e073      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9e:	4b3d      	ldr	r3, [pc, #244]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06b      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dae:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f023 0203 	bic.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4936      	ldr	r1, [pc, #216]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dc0:	f7fd fffc 	bl	8000dbc <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	e00a      	b.n	8002dde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc8:	f7fd fff8 	bl	8000dbc <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e053      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dde:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 020c 	and.w	r2, r3, #12
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d1eb      	bne.n	8002dc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0307 	and.w	r3, r3, #7
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d210      	bcs.n	8002e20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfe:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 0207 	bic.w	r2, r3, #7
 8002e06:	4922      	ldr	r1, [pc, #136]	; (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_RCC_ClockConfig+0x1c0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e032      	b.n	8002e86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e2c:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4916      	ldr	r1, [pc, #88]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	490e      	ldr	r1, [pc, #56]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e5e:	f000 f821 	bl	8002ea4 <HAL_RCC_GetSysClockFreq>
 8002e62:	4602      	mov	r2, r0
 8002e64:	4b0b      	ldr	r3, [pc, #44]	; (8002e94 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	091b      	lsrs	r3, r3, #4
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	490a      	ldr	r1, [pc, #40]	; (8002e98 <HAL_RCC_ClockConfig+0x1c8>)
 8002e70:	5ccb      	ldrb	r3, [r1, r3]
 8002e72:	fa22 f303 	lsr.w	r3, r2, r3
 8002e76:	4a09      	ldr	r2, [pc, #36]	; (8002e9c <HAL_RCC_ClockConfig+0x1cc>)
 8002e78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <HAL_RCC_ClockConfig+0x1d0>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd ff5a 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40022000 	.word	0x40022000
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08004620 	.word	0x08004620
 8002e9c:	20000280 	.word	0x20000280
 8002ea0:	20000284 	.word	0x20000284

08002ea4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ea4:	b490      	push	{r4, r7}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002eaa:	4b2a      	ldr	r3, [pc, #168]	; (8002f54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002eac:	1d3c      	adds	r4, r7, #4
 8002eae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002eb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002eb4:	f240 2301 	movw	r3, #513	; 0x201
 8002eb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ece:	4b22      	ldr	r3, [pc, #136]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d002      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d003      	beq.n	8002eea <HAL_RCC_GetSysClockFreq+0x46>
 8002ee2:	e02d      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ee6:	623b      	str	r3, [r7, #32]
      break;
 8002ee8:	e02d      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	0c9b      	lsrs	r3, r3, #18
 8002eee:	f003 030f 	and.w	r3, r3, #15
 8002ef2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002efc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f08:	4b13      	ldr	r3, [pc, #76]	; (8002f58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	0c5b      	lsrs	r3, r3, #17
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002f16:	4413      	add	r3, r2
 8002f18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002f1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f22:	fb02 f203 	mul.w	r2, r2, r3
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	e004      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	4a0b      	ldr	r2, [pc, #44]	; (8002f60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002f34:	fb02 f303 	mul.w	r3, r2, r3
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	623b      	str	r3, [r7, #32]
      break;
 8002f3e:	e002      	b.n	8002f46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002f42:	623b      	str	r3, [r7, #32]
      break;
 8002f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f46:	6a3b      	ldr	r3, [r7, #32]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3728      	adds	r7, #40	; 0x28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc90      	pop	{r4, r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	08004610 	.word	0x08004610
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	007a1200 	.word	0x007a1200
 8002f60:	003d0900 	.word	0x003d0900

08002f64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	20000280 	.word	0x20000280

08002f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f7c:	f7ff fff2 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	4903      	ldr	r1, [pc, #12]	; (8002f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	08004630 	.word	0x08004630

08002fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fa4:	f7ff ffde 	bl	8002f64 <HAL_RCC_GetHCLKFreq>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	4b05      	ldr	r3, [pc, #20]	; (8002fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	0adb      	lsrs	r3, r3, #11
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	4903      	ldr	r1, [pc, #12]	; (8002fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb6:	5ccb      	ldrb	r3, [r1, r3]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08004630 	.word	0x08004630

08002fc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <RCC_Delay+0x34>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a0a      	ldr	r2, [pc, #40]	; (8003000 <RCC_Delay+0x38>)
 8002fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fda:	0a5b      	lsrs	r3, r3, #9
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	fb02 f303 	mul.w	r3, r2, r3
 8002fe2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fe4:	bf00      	nop
  }
  while (Delay --);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	1e5a      	subs	r2, r3, #1
 8002fea:	60fa      	str	r2, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f9      	bne.n	8002fe4 <RCC_Delay+0x1c>
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	20000280 	.word	0x20000280
 8003000:	10624dd3 	.word	0x10624dd3

08003004 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e041      	b.n	800309a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d106      	bne.n	8003030 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd fd18 	bl	8000a60 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	4619      	mov	r1, r3
 8003042:	4610      	mov	r0, r2
 8003044:	f000 fe88 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4618      	mov	r0, r3
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_TIM_OC_Start+0x24>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b01      	cmp	r3, #1
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e022      	b.n	800310e <HAL_TIM_OC_Start+0x6a>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d109      	bne.n	80030e2 <HAL_TIM_OC_Start+0x3e>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	bf14      	ite	ne
 80030da:	2301      	movne	r3, #1
 80030dc:	2300      	moveq	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	e015      	b.n	800310e <HAL_TIM_OC_Start+0x6a>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d109      	bne.n	80030fc <HAL_TIM_OC_Start+0x58>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e008      	b.n	800310e <HAL_TIM_OC_Start+0x6a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e05e      	b.n	80031d4 <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d104      	bne.n	8003126 <HAL_TIM_OC_Start+0x82>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003124:	e013      	b.n	800314e <HAL_TIM_OC_Start+0xaa>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	2b04      	cmp	r3, #4
 800312a:	d104      	bne.n	8003136 <HAL_TIM_OC_Start+0x92>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003134:	e00b      	b.n	800314e <HAL_TIM_OC_Start+0xaa>
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d104      	bne.n	8003146 <HAL_TIM_OC_Start+0xa2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2202      	movs	r2, #2
 8003140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003144:	e003      	b.n	800314e <HAL_TIM_OC_Start+0xaa>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2201      	movs	r2, #1
 8003154:	6839      	ldr	r1, [r7, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f000 ffe8 	bl	800412c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1e      	ldr	r2, [pc, #120]	; (80031dc <HAL_TIM_OC_Start+0x138>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d107      	bne.n	8003176 <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a18      	ldr	r2, [pc, #96]	; (80031dc <HAL_TIM_OC_Start+0x138>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d00e      	beq.n	800319e <HAL_TIM_OC_Start+0xfa>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d009      	beq.n	800319e <HAL_TIM_OC_Start+0xfa>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <HAL_TIM_OC_Start+0x13c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d004      	beq.n	800319e <HAL_TIM_OC_Start+0xfa>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <HAL_TIM_OC_Start+0x140>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d111      	bne.n	80031c2 <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2b06      	cmp	r3, #6
 80031ae:	d010      	beq.n	80031d2 <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c0:	e007      	b.n	80031d2 <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f042 0201 	orr.w	r2, r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40012c00 	.word	0x40012c00
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000800 	.word	0x40000800

080031e8 <HAL_TIM_OC_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d109      	bne.n	8003210 <HAL_TIM_OC_Start_DMA+0x28>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e022      	b.n	8003256 <HAL_TIM_OC_Start_DMA+0x6e>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b04      	cmp	r3, #4
 8003214:	d109      	bne.n	800322a <HAL_TIM_OC_Start_DMA+0x42>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	bf0c      	ite	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	2300      	movne	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	e015      	b.n	8003256 <HAL_TIM_OC_Start_DMA+0x6e>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b08      	cmp	r3, #8
 800322e:	d109      	bne.n	8003244 <HAL_TIM_OC_Start_DMA+0x5c>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003236:	b2db      	uxtb	r3, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	e008      	b.n	8003256 <HAL_TIM_OC_Start_DMA+0x6e>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	bf0c      	ite	eq
 8003250:	2301      	moveq	r3, #1
 8003252:	2300      	movne	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_TIM_OC_Start_DMA+0x76>
  {
    return HAL_BUSY;
 800325a:	2302      	movs	r3, #2
 800325c:	e14e      	b.n	80034fc <HAL_TIM_OC_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d109      	bne.n	8003278 <HAL_TIM_OC_Start_DMA+0x90>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b01      	cmp	r3, #1
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e022      	b.n	80032be <HAL_TIM_OC_Start_DMA+0xd6>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b04      	cmp	r3, #4
 800327c:	d109      	bne.n	8003292 <HAL_TIM_OC_Start_DMA+0xaa>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b01      	cmp	r3, #1
 8003288:	bf0c      	ite	eq
 800328a:	2301      	moveq	r3, #1
 800328c:	2300      	movne	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e015      	b.n	80032be <HAL_TIM_OC_Start_DMA+0xd6>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d109      	bne.n	80032ac <HAL_TIM_OC_Start_DMA+0xc4>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	bf0c      	ite	eq
 80032a4:	2301      	moveq	r3, #1
 80032a6:	2300      	movne	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	e008      	b.n	80032be <HAL_TIM_OC_Start_DMA+0xd6>
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d024      	beq.n	800330c <HAL_TIM_OC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d104      	bne.n	80032d2 <HAL_TIM_OC_Start_DMA+0xea>
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_TIM_OC_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e114      	b.n	80034fc <HAL_TIM_OC_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d104      	bne.n	80032e2 <HAL_TIM_OC_Start_DMA+0xfa>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032e0:	e016      	b.n	8003310 <HAL_TIM_OC_Start_DMA+0x128>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	2b04      	cmp	r3, #4
 80032e6:	d104      	bne.n	80032f2 <HAL_TIM_OC_Start_DMA+0x10a>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2202      	movs	r2, #2
 80032ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032f0:	e00e      	b.n	8003310 <HAL_TIM_OC_Start_DMA+0x128>
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d104      	bne.n	8003302 <HAL_TIM_OC_Start_DMA+0x11a>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003300:	e006      	b.n	8003310 <HAL_TIM_OC_Start_DMA+0x128>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2202      	movs	r2, #2
 8003306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800330a:	e001      	b.n	8003310 <HAL_TIM_OC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0f5      	b.n	80034fc <HAL_TIM_OC_Start_DMA+0x314>
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b0c      	cmp	r3, #12
 8003314:	f200 80ae 	bhi.w	8003474 <HAL_TIM_OC_Start_DMA+0x28c>
 8003318:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <HAL_TIM_OC_Start_DMA+0x138>)
 800331a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800331e:	bf00      	nop
 8003320:	08003355 	.word	0x08003355
 8003324:	08003475 	.word	0x08003475
 8003328:	08003475 	.word	0x08003475
 800332c:	08003475 	.word	0x08003475
 8003330:	0800339d 	.word	0x0800339d
 8003334:	08003475 	.word	0x08003475
 8003338:	08003475 	.word	0x08003475
 800333c:	08003475 	.word	0x08003475
 8003340:	080033e5 	.word	0x080033e5
 8003344:	08003475 	.word	0x08003475
 8003348:	08003475 	.word	0x08003475
 800334c:	08003475 	.word	0x08003475
 8003350:	0800342d 	.word	0x0800342d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	4a6a      	ldr	r2, [pc, #424]	; (8003504 <HAL_TIM_OC_Start_DMA+0x31c>)
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	4a69      	ldr	r2, [pc, #420]	; (8003508 <HAL_TIM_OC_Start_DMA+0x320>)
 8003362:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	4a68      	ldr	r2, [pc, #416]	; (800350c <HAL_TIM_OC_Start_DMA+0x324>)
 800336a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3334      	adds	r3, #52	; 0x34
 8003378:	461a      	mov	r2, r3
 800337a:	887b      	ldrh	r3, [r7, #2]
 800337c:	f7fd feb4 	bl	80010e8 <HAL_DMA_Start_IT>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_TIM_OC_Start_DMA+0x1a2>
      {
        /* Return error status */
        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e0b8      	b.n	80034fc <HAL_TIM_OC_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003398:	60da      	str	r2, [r3, #12]
      break;
 800339a:	e06c      	b.n	8003476 <HAL_TIM_OC_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	4a58      	ldr	r2, [pc, #352]	; (8003504 <HAL_TIM_OC_Start_DMA+0x31c>)
 80033a2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_TIM_OC_Start_DMA+0x320>)
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_TIM_OC_Start_DMA+0x324>)
 80033b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3338      	adds	r3, #56	; 0x38
 80033c0:	461a      	mov	r2, r3
 80033c2:	887b      	ldrh	r3, [r7, #2]
 80033c4:	f7fd fe90 	bl	80010e8 <HAL_DMA_Start_IT>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <HAL_TIM_OC_Start_DMA+0x1ea>
      {
        /* Return error status */
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e094      	b.n	80034fc <HAL_TIM_OC_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033e0:	60da      	str	r2, [r3, #12]
      break;
 80033e2:	e048      	b.n	8003476 <HAL_TIM_OC_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	4a46      	ldr	r2, [pc, #280]	; (8003504 <HAL_TIM_OC_Start_DMA+0x31c>)
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	4a45      	ldr	r2, [pc, #276]	; (8003508 <HAL_TIM_OC_Start_DMA+0x320>)
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4a44      	ldr	r2, [pc, #272]	; (800350c <HAL_TIM_OC_Start_DMA+0x324>)
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	333c      	adds	r3, #60	; 0x3c
 8003408:	461a      	mov	r2, r3
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	f7fd fe6c 	bl	80010e8 <HAL_DMA_Start_IT>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_TIM_OC_Start_DMA+0x232>
      {
        /* Return error status */
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e070      	b.n	80034fc <HAL_TIM_OC_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003428:	60da      	str	r2, [r3, #12]
      break;
 800342a:	e024      	b.n	8003476 <HAL_TIM_OC_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003430:	4a34      	ldr	r2, [pc, #208]	; (8003504 <HAL_TIM_OC_Start_DMA+0x31c>)
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003438:	4a33      	ldr	r2, [pc, #204]	; (8003508 <HAL_TIM_OC_Start_DMA+0x320>)
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003440:	4a32      	ldr	r2, [pc, #200]	; (800350c <HAL_TIM_OC_Start_DMA+0x324>)
 8003442:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3340      	adds	r3, #64	; 0x40
 8003450:	461a      	mov	r2, r3
 8003452:	887b      	ldrh	r3, [r7, #2]
 8003454:	f7fd fe48 	bl	80010e8 <HAL_DMA_Start_IT>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_TIM_OC_Start_DMA+0x27a>
      {
        /* Return error status */
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e04c      	b.n	80034fc <HAL_TIM_OC_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003470:	60da      	str	r2, [r3, #12]
      break;
 8003472:	e000      	b.n	8003476 <HAL_TIM_OC_Start_DMA+0x28e>
    }

    default:
      break;
 8003474:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2201      	movs	r2, #1
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fe54 	bl	800412c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a21      	ldr	r2, [pc, #132]	; (8003510 <HAL_TIM_OC_Start_DMA+0x328>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d107      	bne.n	800349e <HAL_TIM_OC_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800349c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1b      	ldr	r2, [pc, #108]	; (8003510 <HAL_TIM_OC_Start_DMA+0x328>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00e      	beq.n	80034c6 <HAL_TIM_OC_Start_DMA+0x2de>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b0:	d009      	beq.n	80034c6 <HAL_TIM_OC_Start_DMA+0x2de>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a17      	ldr	r2, [pc, #92]	; (8003514 <HAL_TIM_OC_Start_DMA+0x32c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d004      	beq.n	80034c6 <HAL_TIM_OC_Start_DMA+0x2de>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a15      	ldr	r2, [pc, #84]	; (8003518 <HAL_TIM_OC_Start_DMA+0x330>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d111      	bne.n	80034ea <HAL_TIM_OC_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b06      	cmp	r3, #6
 80034d6:	d010      	beq.n	80034fa <HAL_TIM_OC_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e8:	e007      	b.n	80034fa <HAL_TIM_OC_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0201 	orr.w	r2, r2, #1
 80034f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	08003c49 	.word	0x08003c49
 8003508:	08003cf1 	.word	0x08003cf1
 800350c:	08003bb7 	.word	0x08003bb7
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800

0800351c <HAL_TIM_OC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b0c      	cmp	r3, #12
 800352a:	d855      	bhi.n	80035d8 <HAL_TIM_OC_Stop_DMA+0xbc>
 800352c:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <HAL_TIM_OC_Stop_DMA+0x18>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003569 	.word	0x08003569
 8003538:	080035d9 	.word	0x080035d9
 800353c:	080035d9 	.word	0x080035d9
 8003540:	080035d9 	.word	0x080035d9
 8003544:	08003585 	.word	0x08003585
 8003548:	080035d9 	.word	0x080035d9
 800354c:	080035d9 	.word	0x080035d9
 8003550:	080035d9 	.word	0x080035d9
 8003554:	080035a1 	.word	0x080035a1
 8003558:	080035d9 	.word	0x080035d9
 800355c:	080035d9 	.word	0x080035d9
 8003560:	080035d9 	.word	0x080035d9
 8003564:	080035bd 	.word	0x080035bd
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003576:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	4618      	mov	r0, r3
 800357e:	f7fd fe13 	bl	80011a8 <HAL_DMA_Abort_IT>
      break;
 8003582:	e02a      	b.n	80035da <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003592:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	4618      	mov	r0, r3
 800359a:	f7fd fe05 	bl	80011a8 <HAL_DMA_Abort_IT>
      break;
 800359e:	e01c      	b.n	80035da <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035ae:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fd fdf7 	bl	80011a8 <HAL_DMA_Abort_IT>
      break;
 80035ba:	e00e      	b.n	80035da <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035ca:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fd fde9 	bl	80011a8 <HAL_DMA_Abort_IT>
      break;
 80035d6:	e000      	b.n	80035da <HAL_TIM_OC_Stop_DMA+0xbe>
    }

    default:
      break;
 80035d8:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	6839      	ldr	r1, [r7, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fda2 	bl	800412c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a29      	ldr	r2, [pc, #164]	; (8003694 <HAL_TIM_OC_Stop_DMA+0x178>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d117      	bne.n	8003622 <HAL_TIM_OC_Stop_DMA+0x106>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6a1a      	ldr	r2, [r3, #32]
 80035f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <HAL_TIM_OC_Stop_DMA+0x106>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6a1a      	ldr	r2, [r3, #32]
 8003608:	f240 4344 	movw	r3, #1092	; 0x444
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d107      	bne.n	8003622 <HAL_TIM_OC_Stop_DMA+0x106>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6a1a      	ldr	r2, [r3, #32]
 8003628:	f241 1311 	movw	r3, #4369	; 0x1111
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10f      	bne.n	8003652 <HAL_TIM_OC_Stop_DMA+0x136>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	f240 4344 	movw	r3, #1092	; 0x444
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d107      	bne.n	8003652 <HAL_TIM_OC_Stop_DMA+0x136>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0201 	bic.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d104      	bne.n	8003662 <HAL_TIM_OC_Stop_DMA+0x146>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003660:	e013      	b.n	800368a <HAL_TIM_OC_Stop_DMA+0x16e>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b04      	cmp	r3, #4
 8003666:	d104      	bne.n	8003672 <HAL_TIM_OC_Stop_DMA+0x156>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003670:	e00b      	b.n	800368a <HAL_TIM_OC_Stop_DMA+0x16e>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	2b08      	cmp	r3, #8
 8003676:	d104      	bne.n	8003682 <HAL_TIM_OC_Stop_DMA+0x166>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003680:	e003      	b.n	800368a <HAL_TIM_OC_Stop_DMA+0x16e>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40012c00 	.word	0x40012c00

08003698 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e041      	b.n	800372e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f839 	bl	8003736 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f000 fb3e 	bl	8003d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	bc80      	pop	{r7}
 8003746:	4770      	bx	lr

08003748 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d109      	bne.n	800376c <HAL_TIM_PWM_Start+0x24>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b01      	cmp	r3, #1
 8003762:	bf14      	ite	ne
 8003764:	2301      	movne	r3, #1
 8003766:	2300      	moveq	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e022      	b.n	80037b2 <HAL_TIM_PWM_Start+0x6a>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	2b04      	cmp	r3, #4
 8003770:	d109      	bne.n	8003786 <HAL_TIM_PWM_Start+0x3e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b01      	cmp	r3, #1
 800377c:	bf14      	ite	ne
 800377e:	2301      	movne	r3, #1
 8003780:	2300      	moveq	r3, #0
 8003782:	b2db      	uxtb	r3, r3
 8003784:	e015      	b.n	80037b2 <HAL_TIM_PWM_Start+0x6a>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b08      	cmp	r3, #8
 800378a:	d109      	bne.n	80037a0 <HAL_TIM_PWM_Start+0x58>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	bf14      	ite	ne
 8003798:	2301      	movne	r3, #1
 800379a:	2300      	moveq	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	e008      	b.n	80037b2 <HAL_TIM_PWM_Start+0x6a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e05e      	b.n	8003878 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d104      	bne.n	80037ca <HAL_TIM_PWM_Start+0x82>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c8:	e013      	b.n	80037f2 <HAL_TIM_PWM_Start+0xaa>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d104      	bne.n	80037da <HAL_TIM_PWM_Start+0x92>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d8:	e00b      	b.n	80037f2 <HAL_TIM_PWM_Start+0xaa>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d104      	bne.n	80037ea <HAL_TIM_PWM_Start+0xa2>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e8:	e003      	b.n	80037f2 <HAL_TIM_PWM_Start+0xaa>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2202      	movs	r2, #2
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2201      	movs	r2, #1
 80037f8:	6839      	ldr	r1, [r7, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fc96 	bl	800412c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a1e      	ldr	r2, [pc, #120]	; (8003880 <HAL_TIM_PWM_Start+0x138>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d107      	bne.n	800381a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003818:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a18      	ldr	r2, [pc, #96]	; (8003880 <HAL_TIM_PWM_Start+0x138>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00e      	beq.n	8003842 <HAL_TIM_PWM_Start+0xfa>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d009      	beq.n	8003842 <HAL_TIM_PWM_Start+0xfa>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a14      	ldr	r2, [pc, #80]	; (8003884 <HAL_TIM_PWM_Start+0x13c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d004      	beq.n	8003842 <HAL_TIM_PWM_Start+0xfa>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a12      	ldr	r2, [pc, #72]	; (8003888 <HAL_TIM_PWM_Start+0x140>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d111      	bne.n	8003866 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2b06      	cmp	r3, #6
 8003852:	d010      	beq.n	8003876 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003864:	e007      	b.n	8003876 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	40012c00 	.word	0x40012c00
 8003884:	40000400 	.word	0x40000400
 8003888:	40000800 	.word	0x40000800

0800388c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	6839      	ldr	r1, [r7, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fc44 	bl	800412c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a29      	ldr	r2, [pc, #164]	; (8003950 <HAL_TIM_PWM_Stop+0xc4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d117      	bne.n	80038de <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10f      	bne.n	80038de <HAL_TIM_PWM_Stop+0x52>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a1a      	ldr	r2, [r3, #32]
 80038c4:	f240 4344 	movw	r3, #1092	; 0x444
 80038c8:	4013      	ands	r3, r2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d107      	bne.n	80038de <HAL_TIM_PWM_Stop+0x52>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a1a      	ldr	r2, [r3, #32]
 80038e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80038e8:	4013      	ands	r3, r2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10f      	bne.n	800390e <HAL_TIM_PWM_Stop+0x82>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6a1a      	ldr	r2, [r3, #32]
 80038f4:	f240 4344 	movw	r3, #1092	; 0x444
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <HAL_TIM_PWM_Stop+0x82>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d104      	bne.n	800391e <HAL_TIM_PWM_Stop+0x92>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800391c:	e013      	b.n	8003946 <HAL_TIM_PWM_Stop+0xba>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d104      	bne.n	800392e <HAL_TIM_PWM_Stop+0xa2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800392c:	e00b      	b.n	8003946 <HAL_TIM_PWM_Stop+0xba>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d104      	bne.n	800393e <HAL_TIM_PWM_Stop+0xb2>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800393c:	e003      	b.n	8003946 <HAL_TIM_PWM_Stop+0xba>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	40012c00 	.word	0x40012c00

08003954 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_TIM_OC_ConfigChannel+0x1a>
 800396a:	2302      	movs	r3, #2
 800396c:	e046      	b.n	80039fc <HAL_TIM_OC_ConfigChannel+0xa8>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b0c      	cmp	r3, #12
 800397a:	d839      	bhi.n	80039f0 <HAL_TIM_OC_ConfigChannel+0x9c>
 800397c:	a201      	add	r2, pc, #4	; (adr r2, 8003984 <HAL_TIM_OC_ConfigChannel+0x30>)
 800397e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003982:	bf00      	nop
 8003984:	080039b9 	.word	0x080039b9
 8003988:	080039f1 	.word	0x080039f1
 800398c:	080039f1 	.word	0x080039f1
 8003990:	080039f1 	.word	0x080039f1
 8003994:	080039c7 	.word	0x080039c7
 8003998:	080039f1 	.word	0x080039f1
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	080039f1 	.word	0x080039f1
 80039a4:	080039d5 	.word	0x080039d5
 80039a8:	080039f1 	.word	0x080039f1
 80039ac:	080039f1 	.word	0x080039f1
 80039b0:	080039f1 	.word	0x080039f1
 80039b4:	080039e3 	.word	0x080039e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fa2c 	bl	8003e1c <TIM_OC1_SetConfig>
      break;
 80039c4:	e015      	b.n	80039f2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68b9      	ldr	r1, [r7, #8]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fa8b 	bl	8003ee8 <TIM_OC2_SetConfig>
      break;
 80039d2:	e00e      	b.n	80039f2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 faee 	bl	8003fbc <TIM_OC3_SetConfig>
      break;
 80039e0:	e007      	b.n	80039f2 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68b9      	ldr	r1, [r7, #8]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f000 fb51 	bl	8004090 <TIM_OC4_SetConfig>
      break;
 80039ee:	e000      	b.n	80039f2 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 80039f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d101      	bne.n	8003a1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	e0ac      	b.n	8003b78 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b0c      	cmp	r3, #12
 8003a2a:	f200 809f 	bhi.w	8003b6c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003a2e:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a69 	.word	0x08003a69
 8003a38:	08003b6d 	.word	0x08003b6d
 8003a3c:	08003b6d 	.word	0x08003b6d
 8003a40:	08003b6d 	.word	0x08003b6d
 8003a44:	08003aa9 	.word	0x08003aa9
 8003a48:	08003b6d 	.word	0x08003b6d
 8003a4c:	08003b6d 	.word	0x08003b6d
 8003a50:	08003b6d 	.word	0x08003b6d
 8003a54:	08003aeb 	.word	0x08003aeb
 8003a58:	08003b6d 	.word	0x08003b6d
 8003a5c:	08003b6d 	.word	0x08003b6d
 8003a60:	08003b6d 	.word	0x08003b6d
 8003a64:	08003b2b 	.word	0x08003b2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f9d4 	bl	8003e1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0208 	orr.w	r2, r2, #8
 8003a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f022 0204 	bic.w	r2, r2, #4
 8003a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6999      	ldr	r1, [r3, #24]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	619a      	str	r2, [r3, #24]
      break;
 8003aa6:	e062      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68b9      	ldr	r1, [r7, #8]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fa1a 	bl	8003ee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699a      	ldr	r2, [r3, #24]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ac2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ad2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6999      	ldr	r1, [r3, #24]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	021a      	lsls	r2, r3, #8
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	619a      	str	r2, [r3, #24]
      break;
 8003ae8:	e041      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68b9      	ldr	r1, [r7, #8]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f000 fa63 	bl	8003fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69da      	ldr	r2, [r3, #28]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0208 	orr.w	r2, r2, #8
 8003b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	69da      	ldr	r2, [r3, #28]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0204 	bic.w	r2, r2, #4
 8003b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69d9      	ldr	r1, [r3, #28]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	61da      	str	r2, [r3, #28]
      break;
 8003b28:	e021      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 faad 	bl	8004090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69da      	ldr	r2, [r3, #28]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69da      	ldr	r2, [r3, #28]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69d9      	ldr	r1, [r3, #28]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	021a      	lsls	r2, r3, #8
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	61da      	str	r2, [r3, #28]
      break;
 8003b6a:	e000      	b.n	8003b6e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bc80      	pop	{r7}
 8003bb4:	4770      	bx	lr

08003bb6 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d107      	bne.n	8003bde <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bdc:	e02a      	b.n	8003c34 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d107      	bne.n	8003bf8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2202      	movs	r2, #2
 8003bec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf6:	e01d      	b.n	8003c34 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d107      	bne.n	8003c12 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2204      	movs	r2, #4
 8003c06:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c10:	e010      	b.n	8003c34 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d107      	bne.n	8003c2c <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2208      	movs	r2, #8
 8003c20:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c2a:	e003      	b.n	8003c34 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f7ff ffb5 	bl	8003ba4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	771a      	strb	r2, [r3, #28]
}
 8003c40:	bf00      	nop
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d10b      	bne.n	8003c78 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d136      	bne.n	8003cdc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c76:	e031      	b.n	8003cdc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d10b      	bne.n	8003c9a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2202      	movs	r2, #2
 8003c86:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d125      	bne.n	8003cdc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c98:	e020      	b.n	8003cdc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d10b      	bne.n	8003cbc <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2204      	movs	r2, #4
 8003ca8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d114      	bne.n	8003cdc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cba:	e00f      	b.n	8003cdc <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d10a      	bne.n	8003cdc <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2208      	movs	r2, #8
 8003cca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d103      	bne.n	8003cdc <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f7ff ff4f 	bl	8003b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d103      	bne.n	8003d10 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	771a      	strb	r2, [r3, #28]
 8003d0e:	e019      	b.n	8003d44 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d103      	bne.n	8003d22 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	771a      	strb	r2, [r3, #28]
 8003d20:	e010      	b.n	8003d44 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d103      	bne.n	8003d34 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	771a      	strb	r2, [r3, #28]
 8003d32:	e007      	b.n	8003d44 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d102      	bne.n	8003d44 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2208      	movs	r2, #8
 8003d42:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff ff24 	bl	8003b92 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	771a      	strb	r2, [r3, #28]
}
 8003d50:	bf00      	nop
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <TIM_Base_SetConfig+0xb8>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00b      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d007      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a26      	ldr	r2, [pc, #152]	; (8003e14 <TIM_Base_SetConfig+0xbc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d003      	beq.n	8003d88 <TIM_Base_SetConfig+0x30>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a25      	ldr	r2, [pc, #148]	; (8003e18 <TIM_Base_SetConfig+0xc0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d108      	bne.n	8003d9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1c      	ldr	r2, [pc, #112]	; (8003e10 <TIM_Base_SetConfig+0xb8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da8:	d007      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a19      	ldr	r2, [pc, #100]	; (8003e14 <TIM_Base_SetConfig+0xbc>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_Base_SetConfig+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a18      	ldr	r2, [pc, #96]	; (8003e18 <TIM_Base_SetConfig+0xc0>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d108      	bne.n	8003dcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a07      	ldr	r2, [pc, #28]	; (8003e10 <TIM_Base_SetConfig+0xb8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d103      	bne.n	8003e00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	615a      	str	r2, [r3, #20]
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800

08003e1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f023 0201 	bic.w	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
 8003e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f023 0303 	bic.w	r3, r3, #3
 8003e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	f023 0302 	bic.w	r3, r3, #2
 8003e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a1c      	ldr	r2, [pc, #112]	; (8003ee4 <TIM_OC1_SetConfig+0xc8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d10c      	bne.n	8003e92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 0308 	bic.w	r3, r3, #8
 8003e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a13      	ldr	r2, [pc, #76]	; (8003ee4 <TIM_OC1_SetConfig+0xc8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d111      	bne.n	8003ebe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	621a      	str	r2, [r3, #32]
}
 8003ed8:	bf00      	nop
 8003eda:	371c      	adds	r7, #28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40012c00 	.word	0x40012c00

08003ee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b087      	sub	sp, #28
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f023 0210 	bic.w	r2, r3, #16
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	021b      	lsls	r3, r3, #8
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 0320 	bic.w	r3, r3, #32
 8003f32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a1d      	ldr	r2, [pc, #116]	; (8003fb8 <TIM_OC2_SetConfig+0xd0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d10d      	bne.n	8003f64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <TIM_OC2_SetConfig+0xd0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d113      	bne.n	8003f94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	40012c00 	.word	0x40012c00

08003fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1d      	ldr	r2, [pc, #116]	; (800408c <TIM_OC3_SetConfig+0xd0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10d      	bne.n	8004036 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a14      	ldr	r2, [pc, #80]	; (800408c <TIM_OC3_SetConfig+0xd0>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d113      	bne.n	8004066 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800404c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	4313      	orrs	r3, r2
 8004058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	621a      	str	r2, [r3, #32]
}
 8004080:	bf00      	nop
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00

08004090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	031b      	lsls	r3, r3, #12
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a0f      	ldr	r2, [pc, #60]	; (8004128 <TIM_OC4_SetConfig+0x98>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d109      	bne.n	8004104 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	019b      	lsls	r3, r3, #6
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	bf00      	nop
 8004120:	371c      	adds	r7, #28
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr
 8004128:	40012c00 	.word	0x40012c00

0800412c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2201      	movs	r2, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004184:	2b01      	cmp	r3, #1
 8004186:	d101      	bne.n	800418c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004188:	2302      	movs	r3, #2
 800418a:	e046      	b.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d00e      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d8:	d009      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10c      	bne.n	8004208 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	bc80      	pop	{r7}
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40000400 	.word	0x40000400
 800422c:	40000800 	.word	0x40000800

08004230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e03f      	b.n	80042c2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fca8 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	; 0x24
 8004260:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f905 	bl	8004484 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b08a      	sub	sp, #40	; 0x28
 80042ce:	af02      	add	r7, sp, #8
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	603b      	str	r3, [r7, #0]
 80042d6:	4613      	mov	r3, r2
 80042d8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	2b20      	cmp	r3, #32
 80042e8:	d17c      	bne.n	80043e4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <HAL_UART_Transmit+0x2c>
 80042f0:	88fb      	ldrh	r3, [r7, #6]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e075      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_UART_Transmit+0x3e>
 8004304:	2302      	movs	r3, #2
 8004306:	e06e      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2221      	movs	r2, #33	; 0x21
 800431a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800431e:	f7fc fd4d 	bl	8000dbc <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	88fa      	ldrh	r2, [r7, #6]
 8004328:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	88fa      	ldrh	r2, [r7, #6]
 800432e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004338:	d108      	bne.n	800434c <HAL_UART_Transmit+0x82>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004342:	2300      	movs	r3, #0
 8004344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	e003      	b.n	8004354 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004350:	2300      	movs	r3, #0
 8004352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800435c:	e02a      	b.n	80043b4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	2180      	movs	r1, #128	; 0x80
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f840 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e036      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800438c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	3302      	adds	r3, #2
 8004392:	61bb      	str	r3, [r7, #24]
 8004394:	e007      	b.n	80043a6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	781a      	ldrb	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3301      	adds	r3, #1
 80043a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b29a      	uxth	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1cf      	bne.n	800435e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2200      	movs	r2, #0
 80043c6:	2140      	movs	r1, #64	; 0x40
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f810 	bl	80043ee <UART_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d001      	beq.n	80043d8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e006      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3720      	adds	r7, #32
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fe:	e02c      	b.n	800445a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004406:	d028      	beq.n	800445a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d007      	beq.n	800441e <UART_WaitOnFlagUntilTimeout+0x30>
 800440e:	f7fc fcd5 	bl	8000dbc <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	429a      	cmp	r2, r3
 800441c:	d21d      	bcs.n	800445a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800442c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695a      	ldr	r2, [r3, #20]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0201 	bic.w	r2, r2, #1
 800443c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e00f      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	429a      	cmp	r2, r3
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d0c3      	beq.n	8004400 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
	...

08004484 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689a      	ldr	r2, [r3, #8]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044be:	f023 030c 	bic.w	r3, r3, #12
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	430b      	orrs	r3, r1
 80044ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	699a      	ldr	r2, [r3, #24]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a2c      	ldr	r2, [pc, #176]	; (8004598 <UART_SetConfig+0x114>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d103      	bne.n	80044f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044ec:	f7fe fd58 	bl	8002fa0 <HAL_RCC_GetPCLK2Freq>
 80044f0:	60f8      	str	r0, [r7, #12]
 80044f2:	e002      	b.n	80044fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044f4:	f7fe fd40 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 80044f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	009a      	lsls	r2, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	4a22      	ldr	r2, [pc, #136]	; (800459c <UART_SetConfig+0x118>)
 8004512:	fba2 2303 	umull	r2, r3, r2, r3
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	0119      	lsls	r1, r3, #4
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	009a      	lsls	r2, r3, #2
 8004524:	441a      	add	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004530:	4b1a      	ldr	r3, [pc, #104]	; (800459c <UART_SetConfig+0x118>)
 8004532:	fba3 0302 	umull	r0, r3, r3, r2
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2064      	movs	r0, #100	; 0x64
 800453a:	fb00 f303 	mul.w	r3, r0, r3
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	3332      	adds	r3, #50	; 0x32
 8004544:	4a15      	ldr	r2, [pc, #84]	; (800459c <UART_SetConfig+0x118>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004550:	4419      	add	r1, r3
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	009a      	lsls	r2, r3, #2
 800455c:	441a      	add	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	fbb2 f2f3 	udiv	r2, r2, r3
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <UART_SetConfig+0x118>)
 800456a:	fba3 0302 	umull	r0, r3, r3, r2
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2064      	movs	r0, #100	; 0x64
 8004572:	fb00 f303 	mul.w	r3, r0, r3
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	3332      	adds	r3, #50	; 0x32
 800457c:	4a07      	ldr	r2, [pc, #28]	; (800459c <UART_SetConfig+0x118>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	f003 020f 	and.w	r2, r3, #15
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	440a      	add	r2, r1
 800458e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004590:	bf00      	nop
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40013800 	.word	0x40013800
 800459c:	51eb851f 	.word	0x51eb851f

080045a0 <__libc_init_array>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	2600      	movs	r6, #0
 80045a4:	4d0c      	ldr	r5, [pc, #48]	; (80045d8 <__libc_init_array+0x38>)
 80045a6:	4c0d      	ldr	r4, [pc, #52]	; (80045dc <__libc_init_array+0x3c>)
 80045a8:	1b64      	subs	r4, r4, r5
 80045aa:	10a4      	asrs	r4, r4, #2
 80045ac:	42a6      	cmp	r6, r4
 80045ae:	d109      	bne.n	80045c4 <__libc_init_array+0x24>
 80045b0:	f000 f822 	bl	80045f8 <_init>
 80045b4:	2600      	movs	r6, #0
 80045b6:	4d0a      	ldr	r5, [pc, #40]	; (80045e0 <__libc_init_array+0x40>)
 80045b8:	4c0a      	ldr	r4, [pc, #40]	; (80045e4 <__libc_init_array+0x44>)
 80045ba:	1b64      	subs	r4, r4, r5
 80045bc:	10a4      	asrs	r4, r4, #2
 80045be:	42a6      	cmp	r6, r4
 80045c0:	d105      	bne.n	80045ce <__libc_init_array+0x2e>
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c8:	4798      	blx	r3
 80045ca:	3601      	adds	r6, #1
 80045cc:	e7ee      	b.n	80045ac <__libc_init_array+0xc>
 80045ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80045d2:	4798      	blx	r3
 80045d4:	3601      	adds	r6, #1
 80045d6:	e7f2      	b.n	80045be <__libc_init_array+0x1e>
 80045d8:	08004638 	.word	0x08004638
 80045dc:	08004638 	.word	0x08004638
 80045e0:	08004638 	.word	0x08004638
 80045e4:	0800463c 	.word	0x0800463c

080045e8 <memset>:
 80045e8:	4603      	mov	r3, r0
 80045ea:	4402      	add	r2, r0
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d100      	bne.n	80045f2 <memset+0xa>
 80045f0:	4770      	bx	lr
 80045f2:	f803 1b01 	strb.w	r1, [r3], #1
 80045f6:	e7f9      	b.n	80045ec <memset+0x4>

080045f8 <_init>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	bf00      	nop
 80045fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045fe:	bc08      	pop	{r3}
 8004600:	469e      	mov	lr, r3
 8004602:	4770      	bx	lr

08004604 <_fini>:
 8004604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004606:	bf00      	nop
 8004608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460a:	bc08      	pop	{r3}
 800460c:	469e      	mov	lr, r3
 800460e:	4770      	bx	lr
