
CanReceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000746c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08007600  08007600  00017600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a5c  08007a5c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a64  08007a64  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a64  08007a64  00017a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a68  08007a68  00017a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08007a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001140  200001f8  08007c64  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001338  08007c64  00021338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e6f0  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000221d  00000000  00000000  0002e918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  00030b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa0  00000000  00000000  000316b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000214f3  00000000  00000000  00032150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be49  00000000  00000000  00053643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4d2e  00000000  00000000  0005f48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001241ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f84  00000000  00000000  00124210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075e4 	.word	0x080075e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	080075e4 	.word	0x080075e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <QueueFull>:
 *  Created on: Mar 16, 2021
 *      Author: Mikkel
 */
#include "circle_queue.h"

int QueueFull(struct Queue *q){
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	return (((q->pointWR +1) % SIZE_OF_QUEUE) == q->pointRD);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	885b      	ldrh	r3, [r3, #2]
 8000eac:	3301      	adds	r3, #1
 8000eae:	425a      	negs	r2, r3
 8000eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000eb4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000eb8:	bf58      	it	pl
 8000eba:	4253      	negpl	r3, r2
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	8812      	ldrh	r2, [r2, #0]
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	bf0c      	ite	eq
 8000ec4:	2301      	moveq	r3, #1
 8000ec6:	2300      	movne	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <QueueEmpty>:

int QueueEmpty(struct Queue *q){
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
	return (q->pointWR == q->pointRD);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	885a      	ldrh	r2, [r3, #2]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <EnterQueue>:

int EnterQueue(struct Queue *q, uint8_t data) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]

	if (QueueFull(q)) {
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ffc9 	bl	8000ea0 <QueueFull>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <EnterQueue+0x1c>
		return 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	e017      	b.n	8000f48 <EnterQueue+0x4c>
	}
	else {
		q->queue[q->pointWR] = data;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	885b      	ldrh	r3, [r3, #2]
 8000f1c:	461a      	mov	r2, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	78fa      	ldrb	r2, [r7, #3]
 8000f24:	711a      	strb	r2, [r3, #4]


		if ((q->pointWR + 1) == SIZE_OF_QUEUE){
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	885b      	ldrh	r3, [r3, #2]
 8000f2a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d103      	bne.n	8000f3a <EnterQueue+0x3e>
			q->pointWR = 0;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2200      	movs	r2, #0
 8000f36:	805a      	strh	r2, [r3, #2]
 8000f38:	e005      	b.n	8000f46 <EnterQueue+0x4a>
		}
		else{
			q->pointWR += 1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	885b      	ldrh	r3, [r3, #2]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	805a      	strh	r2, [r3, #2]
		}

	}
	return 1;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <LeaveQueue>:

int LeaveQueue(struct Queue *q, uint8_t *data) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
	if (QueueEmpty(q)){
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffbb 	bl	8000ed6 <QueueEmpty>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <LeaveQueue+0x1a>
		return 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e018      	b.n	8000f9c <LeaveQueue+0x4c>
	}
	else {
		*data = q->queue[q->pointRD];
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	791a      	ldrb	r2, [r3, #4]
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	701a      	strb	r2, [r3, #0]
		if((q->pointRD + 1) ==SIZE_OF_QUEUE){
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d103      	bne.n	8000f8e <LeaveQueue+0x3e>
			q->pointRD = 0;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	801a      	strh	r2, [r3, #0]
 8000f8c:	e005      	b.n	8000f9a <LeaveQueue+0x4a>
		}
		else{
			q->pointRD +=1;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	3301      	adds	r3, #1
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	801a      	strh	r2, [r3, #0]
		}
	}
	return 1;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3708      	adds	r7, #8
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f000 fdad 	bl	8001b06 <HAL_Init>

  /* USER CODE BEGIN Init */
  sendGPS();
 8000fac:	f000 fa00 	bl	80013b0 <sendGPS>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb0:	f000 f816 	bl	8000fe0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb4:	f000 f958 	bl	8001268 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fb8:	f000 f926 	bl	8001208 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000fbc:	f000 f892 	bl	80010e4 <MX_CAN1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000fc0:	2140      	movs	r1, #64	; 0x40
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <main+0x34>)
 8000fc4:	f001 fe32 	bl	8002c2c <HAL_GPIO_ReadPin>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f8      	beq.n	8000fc0 <main+0x1c>
		 transmitData(&GPSDATA);
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <main+0x38>)
 8000fd0:	f000 fb1a 	bl	8001608 <transmitData>
	 if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)){
 8000fd4:	e7f4      	b.n	8000fc0 <main+0x1c>
 8000fd6:	bf00      	nop
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	20000618 	.word	0x20000618

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b0ac      	sub	sp, #176	; 0xb0
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000fea:	2244      	movs	r2, #68	; 0x44
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f003 fc5c 	bl	80048ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2254      	movs	r2, #84	; 0x54
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f003 fc4e 	bl	80048ac <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001010:	f001 fe3c 	bl	8002c8c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <SystemClock_Config+0x100>)
 8001016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101a:	4a31      	ldr	r2, [pc, #196]	; (80010e0 <SystemClock_Config+0x100>)
 800101c:	f023 0318 	bic.w	r3, r3, #24
 8001020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001024:	2314      	movs	r3, #20
 8001026:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001028:	2301      	movs	r3, #1
 800102a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001044:	2301      	movs	r3, #1
 8001046:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800104a:	2301      	movs	r3, #1
 800104c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 36;
 8001050:	2324      	movs	r3, #36	; 0x24
 8001052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001056:	2307      	movs	r3, #7
 8001058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800105c:	2302      	movs	r3, #2
 800105e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fe81 	bl	8002d74 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001078:	f000 fb24 	bl	80016c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2303      	movs	r3, #3
 8001082:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001090:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001094:	2104      	movs	r1, #4
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fa8c 	bl	80035b4 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80010a2:	f000 fb0f 	bl	80016c4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fc85 	bl	80039c0 <HAL_RCCEx_PeriphCLKConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80010bc:	f000 fb02 	bl	80016c4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010c4:	f001 fe00 	bl	8002cc8 <HAL_PWREx_ControlVoltageScaling>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80010ce:	f000 faf9 	bl	80016c4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010d2:	f002 fe69 	bl	8003da8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010d6:	bf00      	nop
 80010d8:	37b0      	adds	r7, #176	; 0xb0
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40021000 	.word	0x40021000

080010e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN1_Init 0 */
	  uint32_t ext_id = 0x00000000;							// Den største værdi der kan være på MSB er 1
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
	  uint32_t mask = 0xFFFFFFE0;
 80010ee:	f06f 031f 	mvn.w	r3, #31
 80010f2:	60bb      	str	r3, [r7, #8]
	  CanFilter.FilterMode = CAN_FILTERMODE_IDMASK;			// Vi vælger at bruge mask mode
 80010f4:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <MX_CAN1_Init+0x110>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
	  CanFilter.FilterIdHigh = (ext_id & 0x1FFFFFFF) >> 13; // (ext_id << 3) >> 16;						// Da vi har 32 bit ID, er dette de 16 MSB af ID
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	0b5b      	lsrs	r3, r3, #13
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4a3c      	ldr	r2, [pc, #240]	; (80011f4 <MX_CAN1_Init+0x110>)
 8001102:	6013      	str	r3, [r2, #0]
	  CanFilter.FilterIdLow =  (ext_id << 3) | CAN_ID_EXT;	// Da vi har 32 bit ID, er dette de 16 LSB af ID
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	4a39      	ldr	r2, [pc, #228]	; (80011f4 <MX_CAN1_Init+0x110>)
 800110e:	6053      	str	r3, [r2, #4]
	  CanFilter.FilterMaskIdHigh = (mask & 0x1FFFFFFF) >> 13;// << 5;					// Maskens 16 MSB
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	0b5b      	lsrs	r3, r3, #13
 8001114:	b29b      	uxth	r3, r3
 8001116:	4a37      	ldr	r2, [pc, #220]	; (80011f4 <MX_CAN1_Init+0x110>)
 8001118:	6093      	str	r3, [r2, #8]
	  CanFilter.FilterMaskIdLow = (mask << 3);// << 5 | 0x10;					// Maskens 16 LSB
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	4a35      	ldr	r2, [pc, #212]	; (80011f4 <MX_CAN1_Init+0x110>)
 8001120:	60d3      	str	r3, [r2, #12]
	  CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;		// ID er et 32 bit-tal
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <MX_CAN1_Init+0x110>)
 8001124:	2201      	movs	r2, #1
 8001126:	61da      	str	r2, [r3, #28]
	  CanFilter.FilterActivation = ENABLE;					// Vi aktiverer filteret
 8001128:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <MX_CAN1_Init+0x110>)
 800112a:	2201      	movs	r2, #1
 800112c:	621a      	str	r2, [r3, #32]
	  CanFilter.FilterBank = 0;								// Vi vælger filter 0 ud af 14 mulige filtre
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <MX_CAN1_Init+0x110>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
	  CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;	// Vi vælger FIFO0 til forskel for FIFO1
 8001134:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <MX_CAN1_Init+0x110>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]


	  CanRxHeader.DLC = PACKAGE_SIZE;
 800113a:	4b2f      	ldr	r3, [pc, #188]	; (80011f8 <MX_CAN1_Init+0x114>)
 800113c:	2208      	movs	r2, #8
 800113e:	611a      	str	r2, [r3, #16]
	  CanRxHeader.ExtId = 0x0;
 8001140:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <MX_CAN1_Init+0x114>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
	  CanRxHeader.IDE = CAN_ID_EXT;
 8001146:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <MX_CAN1_Init+0x114>)
 8001148:	2204      	movs	r2, #4
 800114a:	609a      	str	r2, [r3, #8]
	  CanRxHeader.RTR = CAN_RTR_DATA;
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <MX_CAN1_Init+0x114>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
	  CanRxHeader.FilterMatchIndex = 0x00;
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_CAN1_Init+0x114>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
	  __HAL_RCC_CAN1_CLK_ENABLE();
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <MX_CAN1_Init+0x118>)
 800115a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115c:	4a27      	ldr	r2, [pc, #156]	; (80011fc <MX_CAN1_Init+0x118>)
 800115e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001162:	6593      	str	r3, [r2, #88]	; 0x58
 8001164:	4b25      	ldr	r3, [pc, #148]	; (80011fc <MX_CAN1_Init+0x118>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001170:	4b23      	ldr	r3, [pc, #140]	; (8001200 <MX_CAN1_Init+0x11c>)
 8001172:	4a24      	ldr	r2, [pc, #144]	; (8001204 <MX_CAN1_Init+0x120>)
 8001174:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001176:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MX_CAN1_Init+0x11c>)
 8001178:	2212      	movs	r2, #18
 800117a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800117c:	4b20      	ldr	r3, [pc, #128]	; (8001200 <MX_CAN1_Init+0x11c>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_CAN1_Init+0x11c>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_CAN1_Init+0x11c>)
 800118a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800118e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <MX_CAN1_Init+0x11c>)
 8001192:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8001196:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_CAN1_Init+0x11c>)
 800119a:	2200      	movs	r2, #0
 800119c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <MX_CAN1_Init+0x11c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_CAN1_Init+0x11c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <MX_CAN1_Init+0x11c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_CAN1_Init+0x11c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <MX_CAN1_Init+0x11c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80011bc:	4810      	ldr	r0, [pc, #64]	; (8001200 <MX_CAN1_Init+0x11c>)
 80011be:	f000 fd17 	bl	8001bf0 <HAL_CAN_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_CAN1_Init+0xe8>
  {
    Error_Handler();
 80011c8:	f000 fa7c 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

    while (HAL_CAN_ConfigFilter(&hcan1, &CanFilter) != HAL_OK) {}
 80011cc:	bf00      	nop
 80011ce:	4909      	ldr	r1, [pc, #36]	; (80011f4 <MX_CAN1_Init+0x110>)
 80011d0:	480b      	ldr	r0, [pc, #44]	; (8001200 <MX_CAN1_Init+0x11c>)
 80011d2:	f000 fe08 	bl	8001de6 <HAL_CAN_ConfigFilter>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f8      	bne.n	80011ce <MX_CAN1_Init+0xea>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011dc:	2102      	movs	r1, #2
 80011de:	4808      	ldr	r0, [pc, #32]	; (8001200 <MX_CAN1_Init+0x11c>)
 80011e0:	f001 f849 	bl	8002276 <HAL_CAN_ActivateNotification>
    HAL_CAN_Start(&hcan1);
 80011e4:	4806      	ldr	r0, [pc, #24]	; (8001200 <MX_CAN1_Init+0x11c>)
 80011e6:	f000 fec8 	bl	8001f7a <HAL_CAN_Start>
  /* USER CODE END CAN1_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20001234 	.word	0x20001234
 80011f8:	2000125c 	.word	0x2000125c
 80011fc:	40021000 	.word	0x40021000
 8001200:	200012fc 	.word	0x200012fc
 8001204:	40006400 	.word	0x40006400

08001208 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_USART2_UART_Init+0x58>)
 800120e:	4a15      	ldr	r2, [pc, #84]	; (8001264 <MX_USART2_UART_Init+0x5c>)
 8001210:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001214:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001218:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_USART2_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_USART2_UART_Init+0x58>)
 800122e:	220c      	movs	r2, #12
 8001230:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_USART2_UART_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_USART2_UART_Init+0x58>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_USART2_UART_Init+0x58>)
 800124c:	f002 feae 	bl	8003fac <HAL_UART_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001256:	f000 fa35 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20001278 	.word	0x20001278
 8001264:	40004400 	.word	0x40004400

08001268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <MX_GPIO_Init+0xc0>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a29      	ldr	r2, [pc, #164]	; (8001328 <MX_GPIO_Init+0xc0>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b27      	ldr	r3, [pc, #156]	; (8001328 <MX_GPIO_Init+0xc0>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b24      	ldr	r3, [pc, #144]	; (8001328 <MX_GPIO_Init+0xc0>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a23      	ldr	r2, [pc, #140]	; (8001328 <MX_GPIO_Init+0xc0>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_GPIO_Init+0xc0>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_GPIO_Init+0xc0>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <MX_GPIO_Init+0xc0>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <MX_GPIO_Init+0xc0>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2189      	movs	r1, #137	; 0x89
 80012ca:	4818      	ldr	r0, [pc, #96]	; (800132c <MX_GPIO_Init+0xc4>)
 80012cc:	f001 fcc6 	bl	8002c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d4:	2300      	movs	r3, #0
 80012d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012d8:	2302      	movs	r3, #2
 80012da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	4619      	mov	r1, r3
 80012e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e6:	f001 fb37 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|GPIO_PIN_7;
 80012ea:	2389      	movs	r3, #137	; 0x89
 80012ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ee:	2301      	movs	r3, #1
 80012f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4619      	mov	r1, r3
 8001300:	480a      	ldr	r0, [pc, #40]	; (800132c <MX_GPIO_Init+0xc4>)
 8001302:	f001 fb29 	bl	8002958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001306:	2340      	movs	r3, #64	; 0x40
 8001308:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800130e:	2302      	movs	r3, #2
 8001310:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4619      	mov	r1, r3
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_GPIO_Init+0xc4>)
 800131a:	f001 fb1d 	bl	8002958 <HAL_GPIO_Init>

}
 800131e:	bf00      	nop
 8001320:	3720      	adds	r7, #32
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	48000400 	.word	0x48000400

08001330 <receiveData>:

/* USER CODE BEGIN 4 */
void receiveData() {
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
	uint8_t buffer[PACKAGE_SIZE] = {0};
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]

	while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 800133e:	e020      	b.n	8001382 <receiveData+0x52>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2140      	movs	r1, #64	; 0x40
 8001344:	4815      	ldr	r0, [pc, #84]	; (800139c <receiveData+0x6c>)
 8001346:	f001 fc89 	bl	8002c5c <HAL_GPIO_WritePin>
		if (!QueueFull(&queueCANRX)) { // Hvis køen ikke er fuld - Hvis der er en plads til at modtage en besked
 800134a:	4815      	ldr	r0, [pc, #84]	; (80013a0 <receiveData+0x70>)
 800134c:	f7ff fda8 	bl	8000ea0 <QueueFull>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d115      	bne.n	8001382 <receiveData+0x52>
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &CanRxHeader, buffer); // Modtag beskeden og læg den i buffer
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <receiveData+0x74>)
 800135a:	2100      	movs	r1, #0
 800135c:	4812      	ldr	r0, [pc, #72]	; (80013a8 <receiveData+0x78>)
 800135e:	f000 fe50 	bl	8002002 <HAL_CAN_GetRxMessage>
			hej++;
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <receiveData+0x7c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	4a10      	ldr	r2, [pc, #64]	; (80013ac <receiveData+0x7c>)
 800136a:	6013      	str	r3, [r2, #0]
			placeData(buffer);
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	4618      	mov	r0, r3
 8001370:	f000 f8dc 	bl	800152c <placeData>
			if (hej > 384) {
 8001374:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <receiveData+0x7c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800137c:	dd01      	ble.n	8001382 <receiveData+0x52>
				int dev = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
	while (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0) {
 8001382:	2100      	movs	r1, #0
 8001384:	4808      	ldr	r0, [pc, #32]	; (80013a8 <receiveData+0x78>)
 8001386:	f000 ff4e 	bl	8002226 <HAL_CAN_GetRxFifoFillLevel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1d7      	bne.n	8001340 <receiveData+0x10>
			for(int i = 0; i < PACKAGE_SIZE; i++){
				EnterQueue(&queueCANRX, buffer[i]); // Læg buffer ind i modtager-queuen
			}*/
		}
	}
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	48000400 	.word	0x48000400
 80013a0:	20000214 	.word	0x20000214
 80013a4:	2000125c 	.word	0x2000125c
 80013a8:	200012fc 	.word	0x200012fc
 80013ac:	20001224 	.word	0x20001224

080013b0 <sendGPS>:

void sendGPS(){
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
	char str[15] = {0};
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	f8c3 2007 	str.w	r2, [r3, #7]
	sprintf(str, "%s", "Coordinates: " );
 80013c6:	463b      	mov	r3, r7
 80013c8:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <sendGPS+0x150>)
 80013ca:	494e      	ldr	r1, [pc, #312]	; (8001504 <sendGPS+0x154>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f003 fedf 	bl	8005190 <siprintf>
	HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 80013d2:	463b      	mov	r3, r7
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7fe fefb 	bl	80001d0 <strlen>
 80013da:	4603      	mov	r3, r0
 80013dc:	b29a      	uxth	r2, r3
 80013de:	4639      	mov	r1, r7
 80013e0:	2364      	movs	r3, #100	; 0x64
 80013e2:	4849      	ldr	r0, [pc, #292]	; (8001508 <sendGPS+0x158>)
 80013e4:	f002 fe30 	bl	8004048 <HAL_UART_Transmit>
	memset(str, 0, sizeof str);
 80013e8:	463b      	mov	r3, r7
 80013ea:	220f      	movs	r2, #15
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f003 fa5c 	bl	80048ac <memset>
	sprintf(str, "%c", GPS_LAT_DIR);
 80013f4:	4b45      	ldr	r3, [pc, #276]	; (800150c <sendGPS+0x15c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	463b      	mov	r3, r7
 80013fc:	4944      	ldr	r1, [pc, #272]	; (8001510 <sendGPS+0x160>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fec6 	bl	8005190 <siprintf>
	HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 8001404:	463b      	mov	r3, r7
 8001406:	4618      	mov	r0, r3
 8001408:	f7fe fee2 	bl	80001d0 <strlen>
 800140c:	4603      	mov	r3, r0
 800140e:	b29a      	uxth	r2, r3
 8001410:	4639      	mov	r1, r7
 8001412:	2364      	movs	r3, #100	; 0x64
 8001414:	483c      	ldr	r0, [pc, #240]	; (8001508 <sendGPS+0x158>)
 8001416:	f002 fe17 	bl	8004048 <HAL_UART_Transmit>
	memset(str, 0, sizeof str);
 800141a:	463b      	mov	r3, r7
 800141c:	220f      	movs	r2, #15
 800141e:	2100      	movs	r1, #0
 8001420:	4618      	mov	r0, r3
 8001422:	f003 fa43 	bl	80048ac <memset>
	sprintf(str, "%f", GPS_LAT);
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <sendGPS+0x164>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f88c 	bl	8000548 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4638      	mov	r0, r7
 8001436:	4938      	ldr	r1, [pc, #224]	; (8001518 <sendGPS+0x168>)
 8001438:	f003 feaa 	bl	8005190 <siprintf>
	HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 800143c:	463b      	mov	r3, r7
 800143e:	4618      	mov	r0, r3
 8001440:	f7fe fec6 	bl	80001d0 <strlen>
 8001444:	4603      	mov	r3, r0
 8001446:	b29a      	uxth	r2, r3
 8001448:	4639      	mov	r1, r7
 800144a:	2364      	movs	r3, #100	; 0x64
 800144c:	482e      	ldr	r0, [pc, #184]	; (8001508 <sendGPS+0x158>)
 800144e:	f002 fdfb 	bl	8004048 <HAL_UART_Transmit>
	memset(str, 0, sizeof str);
 8001452:	463b      	mov	r3, r7
 8001454:	220f      	movs	r2, #15
 8001456:	2100      	movs	r1, #0
 8001458:	4618      	mov	r0, r3
 800145a:	f003 fa27 	bl	80048ac <memset>
	sprintf(str, "%s", " , " );
 800145e:	463b      	mov	r3, r7
 8001460:	4a2e      	ldr	r2, [pc, #184]	; (800151c <sendGPS+0x16c>)
 8001462:	4928      	ldr	r1, [pc, #160]	; (8001504 <sendGPS+0x154>)
 8001464:	4618      	mov	r0, r3
 8001466:	f003 fe93 	bl	8005190 <siprintf>
	HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 800146a:	463b      	mov	r3, r7
 800146c:	4618      	mov	r0, r3
 800146e:	f7fe feaf 	bl	80001d0 <strlen>
 8001472:	4603      	mov	r3, r0
 8001474:	b29a      	uxth	r2, r3
 8001476:	4639      	mov	r1, r7
 8001478:	2364      	movs	r3, #100	; 0x64
 800147a:	4823      	ldr	r0, [pc, #140]	; (8001508 <sendGPS+0x158>)
 800147c:	f002 fde4 	bl	8004048 <HAL_UART_Transmit>
	memset(str, 0, sizeof str);
 8001480:	463b      	mov	r3, r7
 8001482:	220f      	movs	r2, #15
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fa10 	bl	80048ac <memset>
	sprintf(str, "%c", GPS_LON_DIR);
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <sendGPS+0x170>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	463b      	mov	r3, r7
 8001494:	491e      	ldr	r1, [pc, #120]	; (8001510 <sendGPS+0x160>)
 8001496:	4618      	mov	r0, r3
 8001498:	f003 fe7a 	bl	8005190 <siprintf>
	HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 800149c:	463b      	mov	r3, r7
 800149e:	4618      	mov	r0, r3
 80014a0:	f7fe fe96 	bl	80001d0 <strlen>
 80014a4:	4603      	mov	r3, r0
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	4639      	mov	r1, r7
 80014aa:	2364      	movs	r3, #100	; 0x64
 80014ac:	4816      	ldr	r0, [pc, #88]	; (8001508 <sendGPS+0x158>)
 80014ae:	f002 fdcb 	bl	8004048 <HAL_UART_Transmit>
	memset(str, 0, sizeof str);
 80014b2:	463b      	mov	r3, r7
 80014b4:	220f      	movs	r2, #15
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f003 f9f7 	bl	80048ac <memset>
	sprintf(str, "%f", GPS_LON);
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <sendGPS+0x174>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f840 	bl	8000548 <__aeabi_f2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4638      	mov	r0, r7
 80014ce:	4912      	ldr	r1, [pc, #72]	; (8001518 <sendGPS+0x168>)
 80014d0:	f003 fe5e 	bl	8005190 <siprintf>
	HAL_UART_Transmit(&huart2, str, strlen(str), 100);
 80014d4:	463b      	mov	r3, r7
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe fe7a 	bl	80001d0 <strlen>
 80014dc:	4603      	mov	r3, r0
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4639      	mov	r1, r7
 80014e2:	2364      	movs	r3, #100	; 0x64
 80014e4:	4808      	ldr	r0, [pc, #32]	; (8001508 <sendGPS+0x158>)
 80014e6:	f002 fdaf 	bl	8004048 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, "\n", 2, 100);
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	2202      	movs	r2, #2
 80014ee:	490e      	ldr	r1, [pc, #56]	; (8001528 <sendGPS+0x178>)
 80014f0:	4805      	ldr	r0, [pc, #20]	; (8001508 <sendGPS+0x158>)
 80014f2:	f002 fda9 	bl	8004048 <HAL_UART_Transmit>



}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	08007600 	.word	0x08007600
 8001504:	08007610 	.word	0x08007610
 8001508:	20001278 	.word	0x20001278
 800150c:	20000010 	.word	0x20000010
 8001510:	08007614 	.word	0x08007614
 8001514:	2000000c 	.word	0x2000000c
 8001518:	08007618 	.word	0x08007618
 800151c:	0800761c 	.word	0x0800761c
 8001520:	20000018 	.word	0x20000018
 8001524:	20000014 	.word	0x20000014
 8001528:	08007620 	.word	0x08007620

0800152c <placeData>:
			memcpy(&GPS_H_GEOID, &DataPass[4], sizeof(GPS_H_GEOID));
		}

}

void placeData(uint8_t *DataPass) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	if (CanRxHeader.ExtId == GPS_ID4)
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <placeData+0xc0>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <placeData+0xc4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	429a      	cmp	r2, r3
 800153e:	d116      	bne.n	800156e <placeData+0x42>
	{
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	e010      	b.n	8001568 <placeData+0x3c>
			if (!QueueFull(&GPSDATA)) {
 8001546:	482b      	ldr	r0, [pc, #172]	; (80015f4 <placeData+0xc8>)
 8001548:	f7ff fcaa 	bl	8000ea0 <QueueFull>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d107      	bne.n	8001562 <placeData+0x36>
				EnterQueue(&GPSDATA, *(DataPass + i));
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4619      	mov	r1, r3
 800155c:	4825      	ldr	r0, [pc, #148]	; (80015f4 <placeData+0xc8>)
 800155e:	f7ff fccd 	bl	8000efc <EnterQueue>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	2b07      	cmp	r3, #7
 800156c:	ddeb      	ble.n	8001546 <placeData+0x1a>
			}

		}
	}
	if (CanRxHeader.ExtId == ACCELID) {
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <placeData+0xc0>)
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	4b21      	ldr	r3, [pc, #132]	; (80015f8 <placeData+0xcc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	429a      	cmp	r2, r3
 8001578:	d116      	bne.n	80015a8 <placeData+0x7c>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	e010      	b.n	80015a2 <placeData+0x76>
			if (!QueueFull(&ACCEL)) {
 8001580:	481e      	ldr	r0, [pc, #120]	; (80015fc <placeData+0xd0>)
 8001582:	f7ff fc8d 	bl	8000ea0 <QueueFull>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d107      	bne.n	800159c <placeData+0x70>
				EnterQueue(&ACCEL, *(DataPass + i));
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	4819      	ldr	r0, [pc, #100]	; (80015fc <placeData+0xd0>)
 8001598:	f7ff fcb0 	bl	8000efc <EnterQueue>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	3301      	adds	r3, #1
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	2b07      	cmp	r3, #7
 80015a6:	ddeb      	ble.n	8001580 <placeData+0x54>
			}
		}
	}
	if (CanRxHeader.ExtId == DCMOTORID) {
 80015a8:	4b10      	ldr	r3, [pc, #64]	; (80015ec <placeData+0xc0>)
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <placeData+0xd4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d116      	bne.n	80015e2 <placeData+0xb6>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e010      	b.n	80015dc <placeData+0xb0>
			if (!QueueFull(&DCMOTOR)) {
 80015ba:	4812      	ldr	r0, [pc, #72]	; (8001604 <placeData+0xd8>)
 80015bc:	f7ff fc70 	bl	8000ea0 <QueueFull>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d107      	bne.n	80015d6 <placeData+0xaa>
				EnterQueue(&DCMOTOR, *(DataPass + i));
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	4413      	add	r3, r2
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	480c      	ldr	r0, [pc, #48]	; (8001604 <placeData+0xd8>)
 80015d2:	f7ff fc93 	bl	8000efc <EnterQueue>
		for(int i = 0; i < PACKAGE_SIZE;i++) {
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	3301      	adds	r3, #1
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b07      	cmp	r3, #7
 80015e0:	ddeb      	ble.n	80015ba <placeData+0x8e>
			}
		}
	}

}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000125c 	.word	0x2000125c
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000618 	.word	0x20000618
 80015f8:	20000004 	.word	0x20000004
 80015fc:	20000a1c 	.word	0x20000a1c
 8001600:	20000008 	.word	0x20000008
 8001604:	20000e20 	.word	0x20000e20

08001608 <transmitData>:

void transmitData(struct Queue *Data)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	int writePointer = Data -> pointWR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	885b      	ldrh	r3, [r3, #2]
 8001614:	61bb      	str	r3, [r7, #24]
	int readPointer = Data -> pointRD;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	617b      	str	r3, [r7, #20]
	char str[3] = {0};
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <transmitData+0xa8>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	81bb      	strh	r3, [r7, #12]
 8001622:	2300      	movs	r3, #0
 8001624:	73bb      	strb	r3, [r7, #14]
	uint8_t tempo = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	72fb      	strb	r3, [r7, #11]
	int bytesToRead = writePointer - readPointer;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	613b      	str	r3, [r7, #16]
	for (int i = 0 ; i < bytesToRead ; i++){
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e031      	b.n	800169c <transmitData+0x94>
		if ((i % 255) == 0) HAL_UART_Transmit(&huart2, "___", 3, 100);
 8001638:	69fa      	ldr	r2, [r7, #28]
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <transmitData+0xac>)
 800163c:	fb83 1302 	smull	r1, r3, r3, r2
 8001640:	4413      	add	r3, r2
 8001642:	11d9      	asrs	r1, r3, #7
 8001644:	17d3      	asrs	r3, r2, #31
 8001646:	1ac9      	subs	r1, r1, r3
 8001648:	460b      	mov	r3, r1
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	1a5b      	subs	r3, r3, r1
 800164e:	1ad1      	subs	r1, r2, r3
 8001650:	2900      	cmp	r1, #0
 8001652:	d105      	bne.n	8001660 <transmitData+0x58>
 8001654:	2364      	movs	r3, #100	; 0x64
 8001656:	2203      	movs	r2, #3
 8001658:	4917      	ldr	r1, [pc, #92]	; (80016b8 <transmitData+0xb0>)
 800165a:	4818      	ldr	r0, [pc, #96]	; (80016bc <transmitData+0xb4>)
 800165c:	f002 fcf4 	bl	8004048 <HAL_UART_Transmit>
		LeaveQueue(Data, &tempo);
 8001660:	f107 030b 	add.w	r3, r7, #11
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff fc72 	bl	8000f50 <LeaveQueue>
		sprintf(str, "%d", tempo);
 800166c:	7afb      	ldrb	r3, [r7, #11]
 800166e:	461a      	mov	r2, r3
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	4912      	ldr	r1, [pc, #72]	; (80016c0 <transmitData+0xb8>)
 8001676:	4618      	mov	r0, r3
 8001678:	f003 fd8a 	bl	8005190 <siprintf>
		HAL_UART_Transmit(&huart2, &str, strlen(str), 100);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fda5 	bl	80001d0 <strlen>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	f107 010c 	add.w	r1, r7, #12
 800168e:	2364      	movs	r3, #100	; 0x64
 8001690:	480a      	ldr	r0, [pc, #40]	; (80016bc <transmitData+0xb4>)
 8001692:	f002 fcd9 	bl	8004048 <HAL_UART_Transmit>
	for (int i = 0 ; i < bytesToRead ; i++){
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3301      	adds	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbc9      	blt.n	8001638 <transmitData+0x30>
	}
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	0800762c 	.word	0x0800762c
 80016b4:	80808081 	.word	0x80808081
 80016b8:	08007624 	.word	0x08007624
 80016bc:	20001278 	.word	0x20001278
 80016c0:	08007628 	.word	0x08007628

080016c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016cc:	e7fe      	b.n	80016cc <Error_Handler+0x8>
	...

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <HAL_MspInit+0x44>)
 80016d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <HAL_MspInit+0x44>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6613      	str	r3, [r2, #96]	; 0x60
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <HAL_MspInit+0x44>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_MspInit+0x44>)
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	4a08      	ldr	r2, [pc, #32]	; (8001714 <HAL_MspInit+0x44>)
 80016f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f8:	6593      	str	r3, [r2, #88]	; 0x58
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <HAL_MspInit+0x44>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001702:	603b      	str	r3, [r7, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000

08001718 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b08a      	sub	sp, #40	; 0x28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <HAL_CAN_MspInit+0x90>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d131      	bne.n	800179e <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_CAN_MspInit+0x94>)
 800173c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800173e:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <HAL_CAN_MspInit+0x94>)
 8001740:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001744:	6593      	str	r3, [r2, #88]	; 0x58
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_CAN_MspInit+0x94>)
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_CAN_MspInit+0x94>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <HAL_CAN_MspInit+0x94>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_CAN_MspInit+0x94>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800176a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800176e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800177c:	2309      	movs	r3, #9
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4619      	mov	r1, r3
 8001786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178a:	f001 f8e5 	bl	8002958 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	2014      	movs	r0, #20
 8001794:	f001 f8a9 	bl	80028ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001798:	2014      	movs	r0, #20
 800179a:	f001 f8c2 	bl	8002922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40006400 	.word	0x40006400
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a20      	ldr	r2, [pc, #128]	; (8001850 <HAL_UART_MspInit+0xa0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d13a      	bne.n	8001848 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_UART_MspInit+0xa4>)
 80017d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d6:	4a1f      	ldr	r2, [pc, #124]	; (8001854 <HAL_UART_MspInit+0xa4>)
 80017d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017dc:	6593      	str	r3, [r2, #88]	; 0x58
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <HAL_UART_MspInit+0xa4>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <HAL_UART_MspInit+0xa4>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a19      	ldr	r2, [pc, #100]	; (8001854 <HAL_UART_MspInit+0xa4>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b17      	ldr	r3, [pc, #92]	; (8001854 <HAL_UART_MspInit+0xa4>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001802:	2304      	movs	r3, #4
 8001804:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001812:	2307      	movs	r3, #7
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0314 	add.w	r3, r7, #20
 800181a:	4619      	mov	r1, r3
 800181c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001820:	f001 f89a 	bl	8002958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001824:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001836:	2303      	movs	r3, #3
 8001838:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f001 f888 	bl	8002958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001848:	bf00      	nop
 800184a:	3728      	adds	r7, #40	; 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40004400 	.word	0x40004400
 8001854:	40021000 	.word	0x40021000

08001858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800185c:	e7fe      	b.n	800185c <NMI_Handler+0x4>

0800185e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <HardFault_Handler+0x4>

08001864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <MemManage_Handler+0x4>

0800186a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <BusFault_Handler+0x4>

08001870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001874:	e7fe      	b.n	8001874 <UsageFault_Handler+0x4>

08001876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr

08001892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a4:	f000 f984 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018b0:	4803      	ldr	r0, [pc, #12]	; (80018c0 <CAN1_RX0_IRQHandler+0x14>)
 80018b2:	f000 fd06 	bl	80022c2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  receiveData();
 80018b6:	f7ff fd3b 	bl	8001330 <receiveData>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200012fc 	.word	0x200012fc

080018c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <_kill>:

int _kill(int pid, int sig)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018de:	f002 ffbb 	bl	8004858 <__errno>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2216      	movs	r2, #22
 80018e6:	601a      	str	r2, [r3, #0]
	return -1;
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_exit>:

void _exit (int status)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f7ff ffe7 	bl	80018d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001906:	e7fe      	b.n	8001906 <_exit+0x12>

08001908 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e00a      	b.n	8001930 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800191a:	f3af 8000 	nop.w
 800191e:	4601      	mov	r1, r0
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	60ba      	str	r2, [r7, #8]
 8001926:	b2ca      	uxtb	r2, r1
 8001928:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	3301      	adds	r3, #1
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbf0      	blt.n	800191a <_read+0x12>
	}

return len;
 8001938:	687b      	ldr	r3, [r7, #4]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e009      	b.n	8001968 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	60ba      	str	r2, [r7, #8]
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3301      	adds	r3, #1
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	429a      	cmp	r2, r3
 800196e:	dbf1      	blt.n	8001954 <_write+0x12>
	}
	return len;
 8001970:	687b      	ldr	r3, [r7, #4]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3718      	adds	r7, #24
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <_close>:

int _close(int file)
{
 800197a:	b480      	push	{r7}
 800197c:	b083      	sub	sp, #12
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
	return -1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001986:	4618      	mov	r0, r3
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
 800199a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a2:	605a      	str	r2, [r3, #4]
	return 0;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <_isatty>:

int _isatty(int file)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
	return 1;
 80019ba:	2301      	movs	r3, #1
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
	return 0;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019ec:	4a14      	ldr	r2, [pc, #80]	; (8001a40 <_sbrk+0x5c>)
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <_sbrk+0x60>)
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d102      	bne.n	8001a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <_sbrk+0x64>)
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <_sbrk+0x68>)
 8001a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <_sbrk+0x64>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d207      	bcs.n	8001a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a14:	f002 ff20 	bl	8004858 <__errno>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a22:	e009      	b.n	8001a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <_sbrk+0x64>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <_sbrk+0x64>)
 8001a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a36:	68fb      	ldr	r3, [r7, #12]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20010000 	.word	0x20010000
 8001a44:	00000400 	.word	0x00000400
 8001a48:	20001228 	.word	0x20001228
 8001a4c:	20001338 	.word	0x20001338

08001a50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a54:	4b15      	ldr	r3, [pc, #84]	; (8001aac <SystemInit+0x5c>)
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	4a14      	ldr	r2, [pc, #80]	; (8001aac <SystemInit+0x5c>)
 8001a5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <SystemInit+0x60>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <SystemInit+0x60>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <SystemInit+0x60>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <SystemInit+0x60>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a0d      	ldr	r2, [pc, #52]	; (8001ab0 <SystemInit+0x60>)
 8001a7c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001a80:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001a84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <SystemInit+0x60>)
 8001a88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a8c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <SystemInit+0x60>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a07      	ldr	r2, [pc, #28]	; (8001ab0 <SystemInit+0x60>)
 8001a94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <SystemInit+0x60>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	619a      	str	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000ed00 	.word	0xe000ed00
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab8:	f7ff ffca 	bl	8001a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001abc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001abe:	e003      	b.n	8001ac8 <LoopCopyDataInit>

08001ac0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ac2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ac4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ac6:	3104      	adds	r1, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ac8:	480a      	ldr	r0, [pc, #40]	; (8001af4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001acc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ace:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ad0:	d3f6      	bcc.n	8001ac0 <CopyDataInit>
	ldr	r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ad4:	e002      	b.n	8001adc <LoopFillZerobss>

08001ad6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ad6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ad8:	f842 3b04 	str.w	r3, [r2], #4

08001adc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <LoopForever+0x16>)
	cmp	r2, r3
 8001ade:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ae0:	d3f9      	bcc.n	8001ad6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f002 febf 	bl	8004864 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ae6:	f7ff fa5d 	bl	8000fa4 <main>

08001aea <LoopForever>:

LoopForever:
    b LoopForever
 8001aea:	e7fe      	b.n	8001aea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001aec:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001af0:	08007a6c 	.word	0x08007a6c
	ldr	r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001af8:	200001f8 	.word	0x200001f8
	ldr	r2, =_sbss
 8001afc:	200001f8 	.word	0x200001f8
	ldr	r3, = _ebss
 8001b00:	20001338 	.word	0x20001338

08001b04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC1_IRQHandler>

08001b06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f000 fedf 	bl	80028d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f80e 	bl	8001b38 <HAL_InitTick>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d002      	beq.n	8001b28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	71fb      	strb	r3, [r7, #7]
 8001b26:	e001      	b.n	8001b2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b28:	f7ff fdd2 	bl	80016d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b44:	4b17      	ldr	r3, [pc, #92]	; (8001ba4 <HAL_InitTick+0x6c>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d023      	beq.n	8001b94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b4c:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_InitTick+0x70>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <HAL_InitTick+0x6c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 feeb 	bl	800293e <HAL_SYSTICK_Config>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b0f      	cmp	r3, #15
 8001b72:	d809      	bhi.n	8001b88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b74:	2200      	movs	r2, #0
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b7c:	f000 feb5 	bl	80028ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_InitTick+0x74>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e007      	b.n	8001b98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
 8001b8c:	e004      	b.n	8001b98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	73fb      	strb	r3, [r7, #15]
 8001b92:	e001      	b.n	8001b98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000024 	.word	0x20000024
 8001ba8:	2000001c 	.word	0x2000001c
 8001bac:	20000020 	.word	0x20000020

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_IncTick+0x20>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_IncTick+0x24>)
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000024 	.word	0x20000024
 8001bd4:	20001324 	.word	0x20001324

08001bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return uwTick;
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <HAL_GetTick+0x14>)
 8001bde:	681b      	ldr	r3, [r3, #0]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	20001324 	.word	0x20001324

08001bf0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0ed      	b.n	8001dde <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d102      	bne.n	8001c14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff fd82 	bl	8001718 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0202 	bic.w	r2, r2, #2
 8001c22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c24:	f7ff ffd8 	bl	8001bd8 <HAL_GetTick>
 8001c28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c2a:	e012      	b.n	8001c52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c2c:	f7ff ffd4 	bl	8001bd8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b0a      	cmp	r3, #10
 8001c38:	d90b      	bls.n	8001c52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2205      	movs	r2, #5
 8001c4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0c5      	b.n	8001dde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e5      	bne.n	8001c2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0201 	orr.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c70:	f7ff ffb2 	bl	8001bd8 <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c76:	e012      	b.n	8001c9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c78:	f7ff ffae 	bl	8001bd8 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b0a      	cmp	r3, #10
 8001c84:	d90b      	bls.n	8001c9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2205      	movs	r2, #5
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e09f      	b.n	8001dde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0e5      	beq.n	8001c78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7e1b      	ldrb	r3, [r3, #24]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d108      	bne.n	8001cc6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	e007      	b.n	8001cd6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7e5b      	ldrb	r3, [r3, #25]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d108      	bne.n	8001cf0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e007      	b.n	8001d00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7e9b      	ldrb	r3, [r3, #26]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d108      	bne.n	8001d1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0220 	orr.w	r2, r2, #32
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e007      	b.n	8001d2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f022 0220 	bic.w	r2, r2, #32
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7edb      	ldrb	r3, [r3, #27]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d108      	bne.n	8001d44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f022 0210 	bic.w	r2, r2, #16
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e007      	b.n	8001d54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0210 	orr.w	r2, r2, #16
 8001d52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	7f1b      	ldrb	r3, [r3, #28]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d108      	bne.n	8001d6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 0208 	orr.w	r2, r2, #8
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	e007      	b.n	8001d7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0208 	bic.w	r2, r2, #8
 8001d7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7f5b      	ldrb	r3, [r3, #29]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d108      	bne.n	8001d98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0204 	orr.w	r2, r2, #4
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	e007      	b.n	8001da8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0204 	bic.w	r2, r2, #4
 8001da6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	ea42 0103 	orr.w	r1, r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	1e5a      	subs	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b087      	sub	sp, #28
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001dfe:	7cfb      	ldrb	r3, [r7, #19]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d003      	beq.n	8001e0c <HAL_CAN_ConfigFilter+0x26>
 8001e04:	7cfb      	ldrb	r3, [r7, #19]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	f040 80aa 	bne.w	8001f60 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	2201      	movs	r2, #1
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	69db      	ldr	r3, [r3, #28]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d123      	bne.n	8001e8e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	401a      	ands	r2, r3
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e68:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3248      	adds	r2, #72	; 0x48
 8001e6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e82:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e84:	6979      	ldr	r1, [r7, #20]
 8001e86:	3348      	adds	r3, #72	; 0x48
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	440b      	add	r3, r1
 8001e8c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d122      	bne.n	8001edc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001eb6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	3248      	adds	r2, #72	; 0x48
 8001ebc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ed0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ed2:	6979      	ldr	r1, [r7, #20]
 8001ed4:	3348      	adds	r3, #72	; 0x48
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	401a      	ands	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ef6:	e007      	b.n	8001f08 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	431a      	orrs	r2, r3
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f22:	e007      	b.n	8001f34 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d107      	bne.n	8001f4c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f52:	f023 0201 	bic.w	r2, r3, #1
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e006      	b.n	8001f6e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
  }
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d12e      	bne.n	8001fec <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fa6:	f7ff fe17 	bl	8001bd8 <HAL_GetTick>
 8001faa:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fac:	e012      	b.n	8001fd4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fae:	f7ff fe13 	bl	8001bd8 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b0a      	cmp	r3, #10
 8001fba:	d90b      	bls.n	8001fd4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2205      	movs	r2, #5
 8001fcc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e012      	b.n	8001ffa <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1e5      	bne.n	8001fae <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	e006      	b.n	8001ffa <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
  }
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002002:	b480      	push	{r7}
 8002004:	b087      	sub	sp, #28
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002016:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002018:	7dfb      	ldrb	r3, [r7, #23]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d003      	beq.n	8002026 <HAL_CAN_GetRxMessage+0x24>
 800201e:	7dfb      	ldrb	r3, [r7, #23]
 8002020:	2b02      	cmp	r3, #2
 8002022:	f040 80f3 	bne.w	800220c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10e      	bne.n	800204a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0e7      	b.n	800221a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0d8      	b.n	800221a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	331b      	adds	r3, #27
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	4413      	add	r3, r2
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0204 	and.w	r2, r3, #4
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10c      	bne.n	80020a0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	331b      	adds	r3, #27
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	4413      	add	r3, r2
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	0d5b      	lsrs	r3, r3, #21
 8002096:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	e00b      	b.n	80020b8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	331b      	adds	r3, #27
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	4413      	add	r3, r2
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	08db      	lsrs	r3, r3, #3
 80020b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	331b      	adds	r3, #27
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	4413      	add	r3, r2
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0202 	and.w	r2, r3, #2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	331b      	adds	r3, #27
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	4413      	add	r3, r2
 80020da:	3304      	adds	r3, #4
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 020f 	and.w	r2, r3, #15
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	331b      	adds	r3, #27
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	4413      	add	r3, r2
 80020f2:	3304      	adds	r3, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	0a1b      	lsrs	r3, r3, #8
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	331b      	adds	r3, #27
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	4413      	add	r3, r2
 800210a:	3304      	adds	r3, #4
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	b29a      	uxth	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	4413      	add	r3, r2
 8002120:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	011b      	lsls	r3, r3, #4
 8002134:	4413      	add	r3, r2
 8002136:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0a1a      	lsrs	r2, r3, #8
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	3301      	adds	r3, #1
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	4413      	add	r3, r2
 8002150:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	0c1a      	lsrs	r2, r3, #16
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	3302      	adds	r3, #2
 800215c:	b2d2      	uxtb	r2, r2
 800215e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	4413      	add	r3, r2
 800216a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0e1a      	lsrs	r2, r3, #24
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	3303      	adds	r3, #3
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	4413      	add	r3, r2
 8002184:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	3304      	adds	r3, #4
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	4413      	add	r3, r2
 800219c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0a1a      	lsrs	r2, r3, #8
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	3305      	adds	r3, #5
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	4413      	add	r3, r2
 80021b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0c1a      	lsrs	r2, r3, #16
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	3306      	adds	r3, #6
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	4413      	add	r3, r2
 80021d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	0e1a      	lsrs	r2, r3, #24
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	3307      	adds	r3, #7
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d108      	bne.n	80021f8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f042 0220 	orr.w	r2, r2, #32
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	e007      	b.n	8002208 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	691a      	ldr	r2, [r3, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0220 	orr.w	r2, r2, #32
 8002206:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	e006      	b.n	800221a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
  }
}
 800221a:	4618      	mov	r0, r3
 800221c:	371c      	adds	r7, #28
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223a:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800223c:	7afb      	ldrb	r3, [r7, #11]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d002      	beq.n	8002248 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002242:	7afb      	ldrb	r3, [r7, #11]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d10f      	bne.n	8002268 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0303 	and.w	r3, r3, #3
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e005      	b.n	8002268 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002268:	68fb      	ldr	r3, [r7, #12]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002286:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d002      	beq.n	8002294 <HAL_CAN_ActivateNotification+0x1e>
 800228e:	7bfb      	ldrb	r3, [r7, #15]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d109      	bne.n	80022a8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6959      	ldr	r1, [r3, #20]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	e006      	b.n	80022b6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
  }
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b08a      	sub	sp, #40	; 0x28
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022ca:	2300      	movs	r3, #0
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	2b00      	cmp	r3, #0
 8002306:	d07c      	beq.n	8002402 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d023      	beq.n	800235a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2201      	movs	r2, #1
 8002318:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f983 	bl	8002630 <HAL_CAN_TxMailbox0CompleteCallback>
 800232a:	e016      	b.n	800235a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
 800233e:	e00c      	b.n	800235a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f003 0308 	and.w	r3, r3, #8
 8002346:	2b00      	cmp	r3, #0
 8002348:	d004      	beq.n	8002354 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
 8002352:	e002      	b.n	800235a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f989 	bl	800266c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d024      	beq.n	80023ae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800236c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f963 	bl	8002644 <HAL_CAN_TxMailbox1CompleteCallback>
 800237e:	e016      	b.n	80023ae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800238a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
 8002392:	e00c      	b.n	80023ae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023a4:	627b      	str	r3, [r7, #36]	; 0x24
 80023a6:	e002      	b.n	80023ae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 f969 	bl	8002680 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d024      	beq.n	8002402 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f943 	bl	8002658 <HAL_CAN_TxMailbox2CompleteCallback>
 80023d2:	e016      	b.n	8002402 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d004      	beq.n	80023e8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
 80023e6:	e00c      	b.n	8002402 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d004      	beq.n	80023fc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
 80023fa:	e002      	b.n	8002402 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f949 	bl	8002694 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00c      	beq.n	8002426 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	2b00      	cmp	r3, #0
 8002414:	d007      	beq.n	8002426 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2210      	movs	r2, #16
 8002424:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00b      	beq.n	8002448 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d006      	beq.n	8002448 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2208      	movs	r2, #8
 8002440:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 f93a 	bl	80026bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 f921 	bl	80026a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002466:	6a3b      	ldr	r3, [r7, #32]
 8002468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00c      	beq.n	800248a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f003 0310 	and.w	r3, r3, #16
 8002476:	2b00      	cmp	r3, #0
 8002478:	d007      	beq.n	800248a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002480:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2210      	movs	r2, #16
 8002488:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00b      	beq.n	80024ac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2208      	movs	r2, #8
 80024a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f91c 	bl	80026e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f903 	bl	80026d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00b      	beq.n	80024ec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0310 	and.w	r3, r3, #16
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d006      	beq.n	80024ec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2210      	movs	r2, #16
 80024e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f906 	bl	80026f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d006      	beq.n	800250e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2208      	movs	r2, #8
 8002506:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 f8ff 	bl	800270c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d07b      	beq.n	8002610 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d072      	beq.n	8002608 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	f043 0304 	orr.w	r3, r3, #4
 8002574:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800257c:	2b00      	cmp	r3, #0
 800257e:	d043      	beq.n	8002608 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002586:	2b00      	cmp	r3, #0
 8002588:	d03e      	beq.n	8002608 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002590:	2b60      	cmp	r3, #96	; 0x60
 8002592:	d02b      	beq.n	80025ec <HAL_CAN_IRQHandler+0x32a>
 8002594:	2b60      	cmp	r3, #96	; 0x60
 8002596:	d82e      	bhi.n	80025f6 <HAL_CAN_IRQHandler+0x334>
 8002598:	2b50      	cmp	r3, #80	; 0x50
 800259a:	d022      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x320>
 800259c:	2b50      	cmp	r3, #80	; 0x50
 800259e:	d82a      	bhi.n	80025f6 <HAL_CAN_IRQHandler+0x334>
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d019      	beq.n	80025d8 <HAL_CAN_IRQHandler+0x316>
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d826      	bhi.n	80025f6 <HAL_CAN_IRQHandler+0x334>
 80025a8:	2b30      	cmp	r3, #48	; 0x30
 80025aa:	d010      	beq.n	80025ce <HAL_CAN_IRQHandler+0x30c>
 80025ac:	2b30      	cmp	r3, #48	; 0x30
 80025ae:	d822      	bhi.n	80025f6 <HAL_CAN_IRQHandler+0x334>
 80025b0:	2b10      	cmp	r3, #16
 80025b2:	d002      	beq.n	80025ba <HAL_CAN_IRQHandler+0x2f8>
 80025b4:	2b20      	cmp	r3, #32
 80025b6:	d005      	beq.n	80025c4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025b8:	e01d      	b.n	80025f6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025c2:	e019      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	f043 0310 	orr.w	r3, r3, #16
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025cc:	e014      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	f043 0320 	orr.w	r3, r3, #32
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025d6:	e00f      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025e0:	e00a      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ea:	e005      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025f4:	e000      	b.n	80025f8 <HAL_CAN_IRQHandler+0x336>
            break;
 80025f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002606:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2204      	movs	r2, #4
 800260e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f87c 	bl	8002720 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002628:	bf00      	nop
 800262a:	3728      	adds	r7, #40	; 0x28
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002744:	4b0c      	ldr	r3, [pc, #48]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002750:	4013      	ands	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800275c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002766:	4a04      	ldr	r2, [pc, #16]	; (8002778 <__NVIC_SetPriorityGrouping+0x44>)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	60d3      	str	r3, [r2, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <__NVIC_GetPriorityGrouping+0x18>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	0a1b      	lsrs	r3, r3, #8
 8002786:	f003 0307 	and.w	r3, r3, #7
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	db0b      	blt.n	80027c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	f003 021f 	and.w	r2, r3, #31
 80027b0:	4907      	ldr	r1, [pc, #28]	; (80027d0 <__NVIC_EnableIRQ+0x38>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	2001      	movs	r0, #1
 80027ba:	fa00 f202 	lsl.w	r2, r0, r2
 80027be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e100 	.word	0xe000e100

080027d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4603      	mov	r3, r0
 80027dc:	6039      	str	r1, [r7, #0]
 80027de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	db0a      	blt.n	80027fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	490c      	ldr	r1, [pc, #48]	; (8002820 <__NVIC_SetPriority+0x4c>)
 80027ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f2:	0112      	lsls	r2, r2, #4
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	440b      	add	r3, r1
 80027f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027fc:	e00a      	b.n	8002814 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	b2da      	uxtb	r2, r3
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <__NVIC_SetPriority+0x50>)
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	3b04      	subs	r3, #4
 800280c:	0112      	lsls	r2, r2, #4
 800280e:	b2d2      	uxtb	r2, r2
 8002810:	440b      	add	r3, r1
 8002812:	761a      	strb	r2, [r3, #24]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	e000e100 	.word	0xe000e100
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f1c3 0307 	rsb	r3, r3, #7
 8002842:	2b04      	cmp	r3, #4
 8002844:	bf28      	it	cs
 8002846:	2304      	movcs	r3, #4
 8002848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	2b06      	cmp	r3, #6
 8002850:	d902      	bls.n	8002858 <NVIC_EncodePriority+0x30>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	3b03      	subs	r3, #3
 8002856:	e000      	b.n	800285a <NVIC_EncodePriority+0x32>
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	401a      	ands	r2, r3
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002870:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43d9      	mvns	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002880:	4313      	orrs	r3, r2
         );
}
 8002882:	4618      	mov	r0, r3
 8002884:	3724      	adds	r7, #36	; 0x24
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028a0:	d301      	bcc.n	80028a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a2:	2301      	movs	r3, #1
 80028a4:	e00f      	b.n	80028c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a6:	4a0a      	ldr	r2, [pc, #40]	; (80028d0 <SysTick_Config+0x40>)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ae:	210f      	movs	r1, #15
 80028b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028b4:	f7ff ff8e 	bl	80027d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <SysTick_Config+0x40>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <SysTick_Config+0x40>)
 80028c0:	2207      	movs	r2, #7
 80028c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	e000e010 	.word	0xe000e010

080028d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff29 	bl	8002734 <__NVIC_SetPriorityGrouping>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b086      	sub	sp, #24
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80028f8:	2300      	movs	r3, #0
 80028fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028fc:	f7ff ff3e 	bl	800277c <__NVIC_GetPriorityGrouping>
 8002900:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	68b9      	ldr	r1, [r7, #8]
 8002906:	6978      	ldr	r0, [r7, #20]
 8002908:	f7ff ff8e 	bl	8002828 <NVIC_EncodePriority>
 800290c:	4602      	mov	r2, r0
 800290e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff5d 	bl	80027d4 <__NVIC_SetPriority>
}
 800291a:	bf00      	nop
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	4603      	mov	r3, r0
 800292a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800292c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff31 	bl	8002798 <__NVIC_EnableIRQ>
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff ffa2 	bl	8002890 <SysTick_Config>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002966:	e148      	b.n	8002bfa <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	fa01 f303 	lsl.w	r3, r1, r3
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 813a 	beq.w	8002bf4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d00b      	beq.n	80029a0 <HAL_GPIO_Init+0x48>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d007      	beq.n	80029a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002994:	2b11      	cmp	r3, #17
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b12      	cmp	r3, #18
 800299e:	d130      	bne.n	8002a02 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029d6:	2201      	movs	r2, #1
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	43db      	mvns	r3, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 0201 	and.w	r2, r3, #1
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0xea>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b12      	cmp	r3, #18
 8002a40:	d123      	bne.n	8002a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	08da      	lsrs	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3208      	adds	r2, #8
 8002a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	220f      	movs	r2, #15
 8002a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4013      	ands	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	08da      	lsrs	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3208      	adds	r2, #8
 8002a84:	6939      	ldr	r1, [r7, #16]
 8002a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2203      	movs	r2, #3
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f003 0203 	and.w	r2, r3, #3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8094 	beq.w	8002bf4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002acc:	4b52      	ldr	r3, [pc, #328]	; (8002c18 <HAL_GPIO_Init+0x2c0>)
 8002ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ad0:	4a51      	ldr	r2, [pc, #324]	; (8002c18 <HAL_GPIO_Init+0x2c0>)
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_GPIO_Init+0x2c0>)
 8002ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002adc:	f003 0301 	and.w	r3, r3, #1
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ae4:	4a4d      	ldr	r2, [pc, #308]	; (8002c1c <HAL_GPIO_Init+0x2c4>)
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	220f      	movs	r2, #15
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b0e:	d00d      	beq.n	8002b2c <HAL_GPIO_Init+0x1d4>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a43      	ldr	r2, [pc, #268]	; (8002c20 <HAL_GPIO_Init+0x2c8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <HAL_GPIO_Init+0x1d0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a42      	ldr	r2, [pc, #264]	; (8002c24 <HAL_GPIO_Init+0x2cc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d101      	bne.n	8002b24 <HAL_GPIO_Init+0x1cc>
 8002b20:	2302      	movs	r3, #2
 8002b22:	e004      	b.n	8002b2e <HAL_GPIO_Init+0x1d6>
 8002b24:	2307      	movs	r3, #7
 8002b26:	e002      	b.n	8002b2e <HAL_GPIO_Init+0x1d6>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_GPIO_Init+0x1d6>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	f002 0203 	and.w	r2, r2, #3
 8002b34:	0092      	lsls	r2, r2, #2
 8002b36:	4093      	lsls	r3, r2
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b3e:	4937      	ldr	r1, [pc, #220]	; (8002c1c <HAL_GPIO_Init+0x2c4>)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b4c:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43db      	mvns	r3, r3
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b70:	4a2d      	ldr	r2, [pc, #180]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002b76:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b9a:	4a23      	ldr	r2, [pc, #140]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ba0:	4b21      	ldr	r3, [pc, #132]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bc4:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bca:	4b17      	ldr	r3, [pc, #92]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <HAL_GPIO_Init+0x2d0>)
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	fa22 f303 	lsr.w	r3, r2, r3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f47f aeaf 	bne.w	8002968 <HAL_GPIO_Init+0x10>
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	bf00      	nop
 8002c0e:	371c      	adds	r7, #28
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	48000400 	.word	0x48000400
 8002c24:	48000800 	.word	0x48000800
 8002c28:	40010400 	.word	0x40010400

08002c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691a      	ldr	r2, [r3, #16]
 8002c3c:	887b      	ldrh	r3, [r7, #2]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d002      	beq.n	8002c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c44:	2301      	movs	r3, #1
 8002c46:	73fb      	strb	r3, [r7, #15]
 8002c48:	e001      	b.n	8002c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	460b      	mov	r3, r1
 8002c66:	807b      	strh	r3, [r7, #2]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c6c:	787b      	ldrb	r3, [r7, #1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c72:	887a      	ldrh	r2, [r7, #2]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c78:	e002      	b.n	8002c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40007000 	.word	0x40007000

08002cac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40007000 	.word	0x40007000

08002cc8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd6:	d130      	bne.n	8002d3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cd8:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ce4:	d038      	beq.n	8002d58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cee:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cf4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2232      	movs	r2, #50	; 0x32
 8002cfc:	fb02 f303 	mul.w	r3, r2, r3
 8002d00:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	0c9b      	lsrs	r3, r3, #18
 8002d08:	3301      	adds	r3, #1
 8002d0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d0c:	e002      	b.n	8002d14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d14:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d20:	d102      	bne.n	8002d28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1f2      	bne.n	8002d0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d110      	bne.n	8002d58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e00f      	b.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d3a:	4b0b      	ldr	r3, [pc, #44]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d46:	d007      	beq.n	8002d58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d48:	4b07      	ldr	r3, [pc, #28]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d50:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	2000001c 	.word	0x2000001c
 8002d70:	431bde83 	.word	0x431bde83

08002d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b088      	sub	sp, #32
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d102      	bne.n	8002d88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	f000 bc11 	b.w	80035aa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d88:	4ba0      	ldr	r3, [pc, #640]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d92:	4b9e      	ldr	r3, [pc, #632]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80e4 	beq.w	8002f72 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d007      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x4c>
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b0c      	cmp	r3, #12
 8002db4:	f040 808b 	bne.w	8002ece <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	f040 8087 	bne.w	8002ece <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dc0:	4b92      	ldr	r3, [pc, #584]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x64>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e3e8      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1a      	ldr	r2, [r3, #32]
 8002ddc:	4b8b      	ldr	r3, [pc, #556]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_RCC_OscConfig+0x7e>
 8002de8:	4b88      	ldr	r3, [pc, #544]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df0:	e005      	b.n	8002dfe <HAL_RCC_OscConfig+0x8a>
 8002df2:	4b86      	ldr	r3, [pc, #536]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d223      	bcs.n	8002e4a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fd7a 	bl	8003900 <RCC_SetFlashLatencyFromMSIRange>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e3c9      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e16:	4b7d      	ldr	r3, [pc, #500]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a7c      	ldr	r2, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e1c:	f043 0308 	orr.w	r3, r3, #8
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	4b7a      	ldr	r3, [pc, #488]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4977      	ldr	r1, [pc, #476]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e34:	4b75      	ldr	r3, [pc, #468]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69db      	ldr	r3, [r3, #28]
 8002e40:	021b      	lsls	r3, r3, #8
 8002e42:	4972      	ldr	r1, [pc, #456]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	604b      	str	r3, [r1, #4]
 8002e48:	e025      	b.n	8002e96 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e4a:	4b70      	ldr	r3, [pc, #448]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a6f      	ldr	r2, [pc, #444]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e50:	f043 0308 	orr.w	r3, r3, #8
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	496a      	ldr	r1, [pc, #424]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e68:	4b68      	ldr	r3, [pc, #416]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69db      	ldr	r3, [r3, #28]
 8002e74:	021b      	lsls	r3, r3, #8
 8002e76:	4965      	ldr	r1, [pc, #404]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fd3a 	bl	8003900 <RCC_SetFlashLatencyFromMSIRange>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e389      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e96:	f000 fc6f 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	4b5b      	ldr	r3, [pc, #364]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	495a      	ldr	r1, [pc, #360]	; (8003010 <HAL_RCC_OscConfig+0x29c>)
 8002ea8:	5ccb      	ldrb	r3, [r1, r3]
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb2:	4a58      	ldr	r2, [pc, #352]	; (8003014 <HAL_RCC_OscConfig+0x2a0>)
 8002eb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002eb6:	4b58      	ldr	r3, [pc, #352]	; (8003018 <HAL_RCC_OscConfig+0x2a4>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fe fe3c 	bl	8001b38 <HAL_InitTick>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d052      	beq.n	8002f70 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	e36d      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d032      	beq.n	8002f3c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ed6:	4b4d      	ldr	r3, [pc, #308]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a4c      	ldr	r2, [pc, #304]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ee2:	f7fe fe79 	bl	8001bd8 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eea:	f7fe fe75 	bl	8001bd8 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e356      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002efc:	4b43      	ldr	r3, [pc, #268]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f08:	4b40      	ldr	r3, [pc, #256]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a3f      	ldr	r2, [pc, #252]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002f0e:	f043 0308 	orr.w	r3, r3, #8
 8002f12:	6013      	str	r3, [r2, #0]
 8002f14:	4b3d      	ldr	r3, [pc, #244]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	493a      	ldr	r1, [pc, #232]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f26:	4b39      	ldr	r3, [pc, #228]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	021b      	lsls	r3, r3, #8
 8002f34:	4935      	ldr	r1, [pc, #212]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	604b      	str	r3, [r1, #4]
 8002f3a:	e01a      	b.n	8002f72 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f3c:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a32      	ldr	r2, [pc, #200]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002f42:	f023 0301 	bic.w	r3, r3, #1
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f48:	f7fe fe46 	bl	8001bd8 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f50:	f7fe fe42 	bl	8001bd8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e323      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0302 	and.w	r3, r3, #2
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x1dc>
 8002f6e:	e000      	b.n	8002f72 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d073      	beq.n	8003066 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_OscConfig+0x21c>
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d10e      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d10b      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d063      	beq.n	8003064 <HAL_RCC_OscConfig+0x2f0>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d15f      	bne.n	8003064 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e300      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb0:	d106      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x24c>
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e01d      	b.n	8002ffc <HAL_RCC_OscConfig+0x288>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x270>
 8002fca:	4b10      	ldr	r3, [pc, #64]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a0f      	ldr	r2, [pc, #60]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	4b0d      	ldr	r3, [pc, #52]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a0c      	ldr	r2, [pc, #48]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	e00b      	b.n	8002ffc <HAL_RCC_OscConfig+0x288>
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a05      	ldr	r2, [pc, #20]	; (800300c <HAL_RCC_OscConfig+0x298>)
 8002ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d01b      	beq.n	800303c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003004:	f7fe fde8 	bl	8001bd8 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800300a:	e010      	b.n	800302e <HAL_RCC_OscConfig+0x2ba>
 800300c:	40021000 	.word	0x40021000
 8003010:	08007630 	.word	0x08007630
 8003014:	2000001c 	.word	0x2000001c
 8003018:	20000020 	.word	0x20000020
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800301c:	f7fe fddc 	bl	8001bd8 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b64      	cmp	r3, #100	; 0x64
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e2bd      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800302e:	4baf      	ldr	r3, [pc, #700]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d0f0      	beq.n	800301c <HAL_RCC_OscConfig+0x2a8>
 800303a:	e014      	b.n	8003066 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fdcc 	bl	8001bd8 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7fe fdc8 	bl	8001bd8 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	; 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e2a9      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003056:	4ba5      	ldr	r3, [pc, #660]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1f0      	bne.n	8003044 <HAL_RCC_OscConfig+0x2d0>
 8003062:	e000      	b.n	8003066 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003064:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d060      	beq.n	8003134 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	2b04      	cmp	r3, #4
 8003076:	d005      	beq.n	8003084 <HAL_RCC_OscConfig+0x310>
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b0c      	cmp	r3, #12
 800307c:	d119      	bne.n	80030b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d116      	bne.n	80030b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003084:	4b99      	ldr	r3, [pc, #612]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_OscConfig+0x328>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e286      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309c:	4b93      	ldr	r3, [pc, #588]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	061b      	lsls	r3, r3, #24
 80030aa:	4990      	ldr	r1, [pc, #576]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030b0:	e040      	b.n	8003134 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d023      	beq.n	8003102 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ba:	4b8c      	ldr	r3, [pc, #560]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a8b      	ldr	r2, [pc, #556]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80030c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fe fd87 	bl	8001bd8 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ce:	f7fe fd83 	bl	8001bd8 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e264      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030e0:	4b82      	ldr	r3, [pc, #520]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ec:	4b7f      	ldr	r3, [pc, #508]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	061b      	lsls	r3, r3, #24
 80030fa:	497c      	ldr	r1, [pc, #496]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	604b      	str	r3, [r1, #4]
 8003100:	e018      	b.n	8003134 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003102:	4b7a      	ldr	r3, [pc, #488]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a79      	ldr	r2, [pc, #484]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800310c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310e:	f7fe fd63 	bl	8001bd8 <HAL_GetTick>
 8003112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003114:	e008      	b.n	8003128 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003116:	f7fe fd5f 	bl	8001bd8 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e240      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003128:	4b70      	ldr	r3, [pc, #448]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f0      	bne.n	8003116 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d03c      	beq.n	80031ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01c      	beq.n	8003182 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003148:	4b68      	ldr	r3, [pc, #416]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 800314a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314e:	4a67      	ldr	r2, [pc, #412]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003150:	f043 0301 	orr.w	r3, r3, #1
 8003154:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003158:	f7fe fd3e 	bl	8001bd8 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003160:	f7fe fd3a 	bl	8001bd8 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e21b      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003172:	4b5e      	ldr	r3, [pc, #376]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ef      	beq.n	8003160 <HAL_RCC_OscConfig+0x3ec>
 8003180:	e01b      	b.n	80031ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003182:	4b5a      	ldr	r3, [pc, #360]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003184:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003188:	4a58      	ldr	r2, [pc, #352]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 800318a:	f023 0301 	bic.w	r3, r3, #1
 800318e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fe fd21 	bl	8001bd8 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800319a:	f7fe fd1d 	bl	8001bd8 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e1fe      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031ac:	4b4f      	ldr	r3, [pc, #316]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80031ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1ef      	bne.n	800319a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 80a6 	beq.w	8003314 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031c8:	2300      	movs	r3, #0
 80031ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031cc:	4b47      	ldr	r3, [pc, #284]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10d      	bne.n	80031f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031d8:	4b44      	ldr	r3, [pc, #272]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031dc:	4a43      	ldr	r2, [pc, #268]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80031de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e2:	6593      	str	r3, [r2, #88]	; 0x58
 80031e4:	4b41      	ldr	r3, [pc, #260]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031f0:	2301      	movs	r3, #1
 80031f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f4:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <HAL_RCC_OscConfig+0x57c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d118      	bne.n	8003232 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003200:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_RCC_OscConfig+0x57c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a3a      	ldr	r2, [pc, #232]	; (80032f0 <HAL_RCC_OscConfig+0x57c>)
 8003206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800320a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800320c:	f7fe fce4 	bl	8001bd8 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003214:	f7fe fce0 	bl	8001bd8 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1c1      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003226:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <HAL_RCC_OscConfig+0x57c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0f0      	beq.n	8003214 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d108      	bne.n	800324c <HAL_RCC_OscConfig+0x4d8>
 800323a:	4b2c      	ldr	r3, [pc, #176]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	4a2a      	ldr	r2, [pc, #168]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800324a:	e024      	b.n	8003296 <HAL_RCC_OscConfig+0x522>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b05      	cmp	r3, #5
 8003252:	d110      	bne.n	8003276 <HAL_RCC_OscConfig+0x502>
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	4a24      	ldr	r2, [pc, #144]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 800325c:	f043 0304 	orr.w	r3, r3, #4
 8003260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003264:	4b21      	ldr	r3, [pc, #132]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326a:	4a20      	ldr	r2, [pc, #128]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003274:	e00f      	b.n	8003296 <HAL_RCC_OscConfig+0x522>
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	4a1b      	ldr	r2, [pc, #108]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003286:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 8003288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328c:	4a17      	ldr	r2, [pc, #92]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 800328e:	f023 0304 	bic.w	r3, r3, #4
 8003292:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329e:	f7fe fc9b 	bl	8001bd8 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fe fc97 	bl	8001bd8 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e176      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_RCC_OscConfig+0x578>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0ed      	beq.n	80032a6 <HAL_RCC_OscConfig+0x532>
 80032ca:	e01a      	b.n	8003302 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032cc:	f7fe fc84 	bl	8001bd8 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d2:	e00f      	b.n	80032f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032d4:	f7fe fc80 	bl	8001bd8 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d906      	bls.n	80032f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e15f      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032f4:	4baa      	ldr	r3, [pc, #680]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1e8      	bne.n	80032d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003302:	7ffb      	ldrb	r3, [r7, #31]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003308:	4ba5      	ldr	r3, [pc, #660]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 800330a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330c:	4aa4      	ldr	r2, [pc, #656]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 800330e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003312:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d03c      	beq.n	800339a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2b00      	cmp	r3, #0
 8003326:	d01c      	beq.n	8003362 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003328:	4b9d      	ldr	r3, [pc, #628]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 800332a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800332e:	4a9c      	ldr	r2, [pc, #624]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe fc4e 	bl	8001bd8 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003340:	f7fe fc4a 	bl	8001bd8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e12b      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003352:	4b93      	ldr	r3, [pc, #588]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003354:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ef      	beq.n	8003340 <HAL_RCC_OscConfig+0x5cc>
 8003360:	e01b      	b.n	800339a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003362:	4b8f      	ldr	r3, [pc, #572]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003368:	4a8d      	ldr	r2, [pc, #564]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003372:	f7fe fc31 	bl	8001bd8 <HAL_GetTick>
 8003376:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003378:	e008      	b.n	800338c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800337a:	f7fe fc2d 	bl	8001bd8 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	2b02      	cmp	r3, #2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e10e      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800338c:	4b84      	ldr	r3, [pc, #528]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 800338e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1ef      	bne.n	800337a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8102 	beq.w	80035a8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	f040 80c5 	bne.w	8003538 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033ae:	4b7c      	ldr	r3, [pc, #496]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f003 0203 	and.w	r2, r3, #3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	429a      	cmp	r2, r3
 80033c0:	d12c      	bne.n	800341c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033cc:	3b01      	subs	r3, #1
 80033ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d123      	bne.n	800341c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d11b      	bne.n	800341c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d113      	bne.n	800341c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	3b01      	subs	r3, #1
 8003402:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d109      	bne.n	800341c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	085b      	lsrs	r3, r3, #1
 8003414:	3b01      	subs	r3, #1
 8003416:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d067      	beq.n	80034ec <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b0c      	cmp	r3, #12
 8003420:	d062      	beq.n	80034e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003422:	4b5f      	ldr	r3, [pc, #380]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e0bb      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003432:	4b5b      	ldr	r3, [pc, #364]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a5a      	ldr	r2, [pc, #360]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003438:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800343c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800343e:	f7fe fbcb 	bl	8001bd8 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003446:	f7fe fbc7 	bl	8001bd8 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0a8      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003458:	4b51      	ldr	r3, [pc, #324]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1f0      	bne.n	8003446 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003464:	4b4e      	ldr	r3, [pc, #312]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <HAL_RCC_OscConfig+0x830>)
 800346a:	4013      	ands	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003474:	3a01      	subs	r2, #1
 8003476:	0112      	lsls	r2, r2, #4
 8003478:	4311      	orrs	r1, r2
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800347e:	0212      	lsls	r2, r2, #8
 8003480:	4311      	orrs	r1, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003486:	0852      	lsrs	r2, r2, #1
 8003488:	3a01      	subs	r2, #1
 800348a:	0552      	lsls	r2, r2, #21
 800348c:	4311      	orrs	r1, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003492:	0852      	lsrs	r2, r2, #1
 8003494:	3a01      	subs	r2, #1
 8003496:	0652      	lsls	r2, r2, #25
 8003498:	4311      	orrs	r1, r2
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800349e:	06d2      	lsls	r2, r2, #27
 80034a0:	430a      	orrs	r2, r1
 80034a2:	493f      	ldr	r1, [pc, #252]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80034a8:	4b3d      	ldr	r3, [pc, #244]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a3c      	ldr	r2, [pc, #240]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 80034ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034b4:	4b3a      	ldr	r3, [pc, #232]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	4a39      	ldr	r2, [pc, #228]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 80034ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034c0:	f7fe fb8a 	bl	8001bd8 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034c8:	f7fe fb86 	bl	8001bd8 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e067      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034da:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034e6:	e05f      	b.n	80035a8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e05e      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ec:	4b2c      	ldr	r3, [pc, #176]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d157      	bne.n	80035a8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80034f8:	4b29      	ldr	r3, [pc, #164]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a28      	ldr	r2, [pc, #160]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 80034fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003502:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003504:	4b26      	ldr	r3, [pc, #152]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a25      	ldr	r2, [pc, #148]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 800350a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800350e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003510:	f7fe fb62 	bl	8001bd8 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7fe fb5e 	bl	8001bd8 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e03f      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x7a4>
 8003536:	e037      	b.n	80035a8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d02d      	beq.n	800359a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353e:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003544:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003548:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d105      	bne.n	8003562 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 800355c:	f023 0303 	bic.w	r3, r3, #3
 8003560:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003562:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4a0e      	ldr	r2, [pc, #56]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 8003568:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800356c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003570:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003572:	f7fe fb31 	bl	8001bd8 <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003578:	e008      	b.n	800358c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357a:	f7fe fb2d 	bl	8001bd8 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e00e      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800358c:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <HAL_RCC_OscConfig+0x82c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1f0      	bne.n	800357a <HAL_RCC_OscConfig+0x806>
 8003598:	e006      	b.n	80035a8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e005      	b.n	80035aa <HAL_RCC_OscConfig+0x836>
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop

080035b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0c8      	b.n	800375a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035c8:	4b66      	ldr	r3, [pc, #408]	; (8003764 <HAL_RCC_ClockConfig+0x1b0>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d910      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035d6:	4b63      	ldr	r3, [pc, #396]	; (8003764 <HAL_RCC_ClockConfig+0x1b0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 0207 	bic.w	r2, r3, #7
 80035de:	4961      	ldr	r1, [pc, #388]	; (8003764 <HAL_RCC_ClockConfig+0x1b0>)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b5f      	ldr	r3, [pc, #380]	; (8003764 <HAL_RCC_ClockConfig+0x1b0>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0b0      	b.n	800375a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d04c      	beq.n	800369e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d107      	bne.n	800361c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360c:	4b56      	ldr	r3, [pc, #344]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d121      	bne.n	800365c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e09e      	b.n	800375a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d107      	bne.n	8003634 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003624:	4b50      	ldr	r3, [pc, #320]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d115      	bne.n	800365c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e092      	b.n	800375a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800363c:	4b4a      	ldr	r3, [pc, #296]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e086      	b.n	800375a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800364c:	4b46      	ldr	r3, [pc, #280]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e07e      	b.n	800375a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800365c:	4b42      	ldr	r3, [pc, #264]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f023 0203 	bic.w	r2, r3, #3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	493f      	ldr	r1, [pc, #252]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 800366a:	4313      	orrs	r3, r2
 800366c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800366e:	f7fe fab3 	bl	8001bd8 <HAL_GetTick>
 8003672:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003674:	e00a      	b.n	800368c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003676:	f7fe faaf 	bl	8001bd8 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	f241 3288 	movw	r2, #5000	; 0x1388
 8003684:	4293      	cmp	r3, r2
 8003686:	d901      	bls.n	800368c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e066      	b.n	800375a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368c:	4b36      	ldr	r3, [pc, #216]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 020c 	and.w	r2, r3, #12
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	429a      	cmp	r2, r3
 800369c:	d1eb      	bne.n	8003676 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036aa:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	492c      	ldr	r1, [pc, #176]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036bc:	4b29      	ldr	r3, [pc, #164]	; (8003764 <HAL_RCC_ClockConfig+0x1b0>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d210      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b26      	ldr	r3, [pc, #152]	; (8003764 <HAL_RCC_ClockConfig+0x1b0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 0207 	bic.w	r2, r3, #7
 80036d2:	4924      	ldr	r1, [pc, #144]	; (8003764 <HAL_RCC_ClockConfig+0x1b0>)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_ClockConfig+0x1b0>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e036      	b.n	800375a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f8:	4b1b      	ldr	r3, [pc, #108]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4918      	ldr	r1, [pc, #96]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003716:	4b14      	ldr	r3, [pc, #80]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4910      	ldr	r1, [pc, #64]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800372a:	f000 f825 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 800372e:	4602      	mov	r2, r0
 8003730:	4b0d      	ldr	r3, [pc, #52]	; (8003768 <HAL_RCC_ClockConfig+0x1b4>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	490c      	ldr	r1, [pc, #48]	; (800376c <HAL_RCC_ClockConfig+0x1b8>)
 800373c:	5ccb      	ldrb	r3, [r1, r3]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	fa22 f303 	lsr.w	r3, r2, r3
 8003746:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_RCC_ClockConfig+0x1c0>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f7fe f9f2 	bl	8001b38 <HAL_InitTick>
 8003754:	4603      	mov	r3, r0
 8003756:	72fb      	strb	r3, [r7, #11]

  return status;
 8003758:	7afb      	ldrb	r3, [r7, #11]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40022000 	.word	0x40022000
 8003768:	40021000 	.word	0x40021000
 800376c:	08007630 	.word	0x08007630
 8003770:	2000001c 	.word	0x2000001c
 8003774:	20000020 	.word	0x20000020

08003778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003786:	4b3e      	ldr	r3, [pc, #248]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003790:	4b3b      	ldr	r3, [pc, #236]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0303 	and.w	r3, r3, #3
 8003798:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x34>
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d121      	bne.n	80037ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d11e      	bne.n	80037ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037ac:	4b34      	ldr	r3, [pc, #208]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037b8:	4b31      	ldr	r3, [pc, #196]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037be:	0a1b      	lsrs	r3, r3, #8
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	e005      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037c8:	4b2d      	ldr	r3, [pc, #180]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80037d4:	4a2b      	ldr	r2, [pc, #172]	; (8003884 <HAL_RCC_GetSysClockFreq+0x10c>)
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10d      	bne.n	8003800 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037f0:	4b25      	ldr	r3, [pc, #148]	; (8003888 <HAL_RCC_GetSysClockFreq+0x110>)
 80037f2:	61bb      	str	r3, [r7, #24]
 80037f4:	e004      	b.n	8003800 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037fc:	4b23      	ldr	r3, [pc, #140]	; (800388c <HAL_RCC_GetSysClockFreq+0x114>)
 80037fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b0c      	cmp	r3, #12
 8003804:	d134      	bne.n	8003870 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003806:	4b1e      	ldr	r3, [pc, #120]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d003      	beq.n	800381e <HAL_RCC_GetSysClockFreq+0xa6>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d003      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0xac>
 800381c:	e005      	b.n	800382a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800381e:	4b1a      	ldr	r3, [pc, #104]	; (8003888 <HAL_RCC_GetSysClockFreq+0x110>)
 8003820:	617b      	str	r3, [r7, #20]
      break;
 8003822:	e005      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003824:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_RCC_GetSysClockFreq+0x114>)
 8003826:	617b      	str	r3, [r7, #20]
      break;
 8003828:	e002      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	617b      	str	r3, [r7, #20]
      break;
 800382e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003830:	4b13      	ldr	r3, [pc, #76]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	3301      	adds	r3, #1
 800383c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800383e:	4b10      	ldr	r3, [pc, #64]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	fb02 f203 	mul.w	r2, r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	fbb2 f3f3 	udiv	r3, r2, r3
 8003854:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003856:	4b0a      	ldr	r3, [pc, #40]	; (8003880 <HAL_RCC_GetSysClockFreq+0x108>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	0e5b      	lsrs	r3, r3, #25
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	3301      	adds	r3, #1
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	fbb2 f3f3 	udiv	r3, r2, r3
 800386e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003870:	69bb      	ldr	r3, [r7, #24]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3724      	adds	r7, #36	; 0x24
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40021000 	.word	0x40021000
 8003884:	08007648 	.word	0x08007648
 8003888:	00f42400 	.word	0x00f42400
 800388c:	007a1200 	.word	0x007a1200

08003890 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003894:	4b03      	ldr	r3, [pc, #12]	; (80038a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003896:	681b      	ldr	r3, [r3, #0]
}
 8003898:	4618      	mov	r0, r3
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	2000001c 	.word	0x2000001c

080038a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80038ac:	f7ff fff0 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038b0:	4602      	mov	r2, r0
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	0a1b      	lsrs	r3, r3, #8
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	4904      	ldr	r1, [pc, #16]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80038be:	5ccb      	ldrb	r3, [r1, r3]
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021000 	.word	0x40021000
 80038d0:	08007640 	.word	0x08007640

080038d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038d8:	f7ff ffda 	bl	8003890 <HAL_RCC_GetHCLKFreq>
 80038dc:	4602      	mov	r2, r0
 80038de:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	0adb      	lsrs	r3, r3, #11
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	4904      	ldr	r1, [pc, #16]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ea:	5ccb      	ldrb	r3, [r1, r3]
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40021000 	.word	0x40021000
 80038fc:	08007640 	.word	0x08007640

08003900 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003908:	2300      	movs	r3, #0
 800390a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800390c:	4b2a      	ldr	r3, [pc, #168]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800390e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003918:	f7ff f9c8 	bl	8002cac <HAL_PWREx_GetVoltageRange>
 800391c:	6178      	str	r0, [r7, #20]
 800391e:	e014      	b.n	800394a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003920:	4b25      	ldr	r3, [pc, #148]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003924:	4a24      	ldr	r2, [pc, #144]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800392a:	6593      	str	r3, [r2, #88]	; 0x58
 800392c:	4b22      	ldr	r3, [pc, #136]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003938:	f7ff f9b8 	bl	8002cac <HAL_PWREx_GetVoltageRange>
 800393c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800393e:	4b1e      	ldr	r3, [pc, #120]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003942:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003948:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003950:	d10b      	bne.n	800396a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2b80      	cmp	r3, #128	; 0x80
 8003956:	d919      	bls.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2ba0      	cmp	r3, #160	; 0xa0
 800395c:	d902      	bls.n	8003964 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800395e:	2302      	movs	r3, #2
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	e013      	b.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003964:	2301      	movs	r3, #1
 8003966:	613b      	str	r3, [r7, #16]
 8003968:	e010      	b.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2b80      	cmp	r3, #128	; 0x80
 800396e:	d902      	bls.n	8003976 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003970:	2303      	movs	r3, #3
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	e00a      	b.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b80      	cmp	r3, #128	; 0x80
 800397a:	d102      	bne.n	8003982 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800397c:	2302      	movs	r3, #2
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	e004      	b.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b70      	cmp	r3, #112	; 0x70
 8003986:	d101      	bne.n	800398c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003988:	2301      	movs	r3, #1
 800398a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800398c:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f023 0207 	bic.w	r2, r3, #7
 8003994:	4909      	ldr	r1, [pc, #36]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d001      	beq.n	80039ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3718      	adds	r7, #24
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40022000 	.word	0x40022000

080039c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80039c8:	2300      	movs	r3, #0
 80039ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80039cc:	2300      	movs	r3, #0
 80039ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d031      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039e4:	d01a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80039e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039ea:	d814      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d009      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039f4:	d10f      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80039f6:	4bac      	ldr	r3, [pc, #688]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	4aab      	ldr	r2, [pc, #684]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a00:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a02:	e00c      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	3304      	adds	r3, #4
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f9dc 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003a10:	4603      	mov	r3, r0
 8003a12:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003a14:	e003      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	74fb      	strb	r3, [r7, #19]
      break;
 8003a1a:	e000      	b.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a1e:	7cfb      	ldrb	r3, [r7, #19]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a24:	4ba0      	ldr	r3, [pc, #640]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	499d      	ldr	r1, [pc, #628]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a3a:	e001      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8099 	beq.w	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a52:	4b95      	ldr	r3, [pc, #596]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00d      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a68:	4b8f      	ldr	r3, [pc, #572]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6c:	4a8e      	ldr	r2, [pc, #568]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a72:	6593      	str	r3, [r2, #88]	; 0x58
 8003a74:	4b8c      	ldr	r3, [pc, #560]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	60bb      	str	r3, [r7, #8]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a80:	2301      	movs	r3, #1
 8003a82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a84:	4b89      	ldr	r3, [pc, #548]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a88      	ldr	r2, [pc, #544]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a90:	f7fe f8a2 	bl	8001bd8 <HAL_GetTick>
 8003a94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a96:	e009      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a98:	f7fe f89e 	bl	8001bd8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d902      	bls.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	74fb      	strb	r3, [r7, #19]
        break;
 8003aaa:	e005      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003aac:	4b7f      	ldr	r3, [pc, #508]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0ef      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d155      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003abe:	4b7a      	ldr	r3, [pc, #488]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d01e      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d019      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ada:	4b73      	ldr	r3, [pc, #460]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ae4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ae6:	4b70      	ldr	r3, [pc, #448]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	4a6e      	ldr	r2, [pc, #440]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003af6:	4b6c      	ldr	r3, [pc, #432]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afc:	4a6a      	ldr	r2, [pc, #424]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b06:	4a68      	ldr	r2, [pc, #416]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d016      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe f85e 	bl	8001bd8 <HAL_GetTick>
 8003b1c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b20:	f7fe f85a 	bl	8001bd8 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d902      	bls.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	74fb      	strb	r3, [r7, #19]
            break;
 8003b36:	e006      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b38:	4b5b      	ldr	r3, [pc, #364]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	f003 0302 	and.w	r3, r3, #2
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d0ec      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d10b      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b4c:	4b56      	ldr	r3, [pc, #344]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b5a:	4953      	ldr	r1, [pc, #332]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b62:	e004      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	74bb      	strb	r3, [r7, #18]
 8003b68:	e001      	b.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b6e:	7c7b      	ldrb	r3, [r7, #17]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d105      	bne.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b74:	4b4c      	ldr	r3, [pc, #304]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b78:	4a4b      	ldr	r2, [pc, #300]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8c:	4b46      	ldr	r3, [pc, #280]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	f023 0203 	bic.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	4943      	ldr	r1, [pc, #268]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bae:	4b3e      	ldr	r3, [pc, #248]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb4:	f023 020c 	bic.w	r2, r3, #12
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	493a      	ldr	r1, [pc, #232]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0320 	and.w	r3, r3, #32
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bd0:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bde:	4932      	ldr	r1, [pc, #200]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bf2:	4b2d      	ldr	r3, [pc, #180]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c00:	4929      	ldr	r1, [pc, #164]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c14:	4b24      	ldr	r3, [pc, #144]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	4921      	ldr	r1, [pc, #132]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c36:	4b1c      	ldr	r3, [pc, #112]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	4918      	ldr	r1, [pc, #96]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	4910      	ldr	r1, [pc, #64]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d02c      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	4907      	ldr	r1, [pc, #28]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c98:	d10a      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9a:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	4a02      	ldr	r2, [pc, #8]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca4:	60d3      	str	r3, [r2, #12]
 8003ca6:	e015      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f000 f881 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cca:	7cfb      	ldrb	r3, [r7, #19]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003cd0:	7cfb      	ldrb	r3, [r7, #19]
 8003cd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d028      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ce0:	4b30      	ldr	r3, [pc, #192]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cee:	492d      	ldr	r1, [pc, #180]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cfe:	d106      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d00:	4b28      	ldr	r3, [pc, #160]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a27      	ldr	r2, [pc, #156]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d0a:	60d3      	str	r3, [r2, #12]
 8003d0c:	e011      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d16:	d10c      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f852 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003d24:	4603      	mov	r3, r0
 8003d26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d28:	7cfb      	ldrb	r3, [r7, #19]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003d2e:	7cfb      	ldrb	r3, [r7, #19]
 8003d30:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d01c      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d3e:	4b19      	ldr	r3, [pc, #100]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d4c:	4915      	ldr	r1, [pc, #84]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	3304      	adds	r3, #4
 8003d62:	2102      	movs	r1, #2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f82f 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003d74:	7cfb      	ldrb	r3, [r7, #19]
 8003d76:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d92:	4904      	ldr	r1, [pc, #16]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d9a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	40021000 	.word	0x40021000

08003da8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000

08003dc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dd6:	4b74      	ldr	r3, [pc, #464]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d018      	beq.n	8003e14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003de2:	4b71      	ldr	r3, [pc, #452]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0203 	and.w	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d10d      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
       ||
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dfa:	4b6b      	ldr	r3, [pc, #428]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
       ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d047      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	e044      	b.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d018      	beq.n	8003e4e <RCCEx_PLLSAI1_Config+0x86>
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d825      	bhi.n	8003e6c <RCCEx_PLLSAI1_Config+0xa4>
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d002      	beq.n	8003e2a <RCCEx_PLLSAI1_Config+0x62>
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d009      	beq.n	8003e3c <RCCEx_PLLSAI1_Config+0x74>
 8003e28:	e020      	b.n	8003e6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11d      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3a:	e01a      	b.n	8003e72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e3c:	4b5a      	ldr	r3, [pc, #360]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d116      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4c:	e013      	b.n	8003e76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e4e:	4b56      	ldr	r3, [pc, #344]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10f      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e5a:	4b53      	ldr	r3, [pc, #332]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e6a:	e006      	b.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e004      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e82:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6819      	ldr	r1, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	430b      	orrs	r3, r1
 8003e98:	4943      	ldr	r1, [pc, #268]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d17c      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ea4:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a3f      	ldr	r2, [pc, #252]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eaa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb0:	f7fd fe92 	bl	8001bd8 <HAL_GetTick>
 8003eb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eb6:	e009      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eb8:	f7fd fe8e 	bl	8001bd8 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d902      	bls.n	8003ecc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eca:	e005      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ef      	bne.n	8003eb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d15f      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d110      	bne.n	8003f06 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ee4:	4b30      	ldr	r3, [pc, #192]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003eec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6892      	ldr	r2, [r2, #8]
 8003ef4:	0211      	lsls	r1, r2, #8
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68d2      	ldr	r2, [r2, #12]
 8003efa:	06d2      	lsls	r2, r2, #27
 8003efc:	430a      	orrs	r2, r1
 8003efe:	492a      	ldr	r1, [pc, #168]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	610b      	str	r3, [r1, #16]
 8003f04:	e027      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d112      	bne.n	8003f32 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f0c:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6892      	ldr	r2, [r2, #8]
 8003f1c:	0211      	lsls	r1, r2, #8
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6912      	ldr	r2, [r2, #16]
 8003f22:	0852      	lsrs	r2, r2, #1
 8003f24:	3a01      	subs	r2, #1
 8003f26:	0552      	lsls	r2, r2, #21
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	491f      	ldr	r1, [pc, #124]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	610b      	str	r3, [r1, #16]
 8003f30:	e011      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f3a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6892      	ldr	r2, [r2, #8]
 8003f42:	0211      	lsls	r1, r2, #8
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6952      	ldr	r2, [r2, #20]
 8003f48:	0852      	lsrs	r2, r2, #1
 8003f4a:	3a01      	subs	r2, #1
 8003f4c:	0652      	lsls	r2, r2, #25
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	4915      	ldr	r1, [pc, #84]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f56:	4b14      	ldr	r3, [pc, #80]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fd fe39 	bl	8001bd8 <HAL_GetTick>
 8003f66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f68:	e009      	b.n	8003f7e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f6a:	f7fd fe35 	bl	8001bd8 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d902      	bls.n	8003f7e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	73fb      	strb	r3, [r7, #15]
          break;
 8003f7c:	e005      	b.n	8003f8a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0ef      	beq.n	8003f6a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	4903      	ldr	r1, [pc, #12]	; (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000

08003fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e040      	b.n	8004040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d106      	bne.n	8003fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fd fbee 	bl	80017b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2224      	movs	r2, #36	; 0x24
 8003fd8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f8c0 	bl	8004170 <UART_SetConfig>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e022      	b.n	8004040 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fac0 	bl	8004588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 fb47 	bl	80046cc <UART_CheckIdleState>
 800403e:	4603      	mov	r3, r0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3708      	adds	r7, #8
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08a      	sub	sp, #40	; 0x28
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800405c:	2b20      	cmp	r3, #32
 800405e:	f040 8082 	bne.w	8004166 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_UART_Transmit+0x26>
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e07a      	b.n	8004168 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_UART_Transmit+0x38>
 800407c:	2302      	movs	r3, #2
 800407e:	e073      	b.n	8004168 <HAL_UART_Transmit+0x120>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2221      	movs	r2, #33	; 0x21
 8004094:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004096:	f7fd fd9f 	bl	8001bd8 <HAL_GetTick>
 800409a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	88fa      	ldrh	r2, [r7, #6]
 80040a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b4:	d108      	bne.n	80040c8 <HAL_UART_Transmit+0x80>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d104      	bne.n	80040c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	e003      	b.n	80040d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80040d8:	e02d      	b.n	8004136 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	2200      	movs	r2, #0
 80040e2:	2180      	movs	r1, #128	; 0x80
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fb3a 	bl	800475e <UART_WaitOnFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e039      	b.n	8004168 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	881a      	ldrh	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004106:	b292      	uxth	r2, r2
 8004108:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	3302      	adds	r3, #2
 800410e:	61bb      	str	r3, [r7, #24]
 8004110:	e008      	b.n	8004124 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	781a      	ldrb	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	b292      	uxth	r2, r2
 800411c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3301      	adds	r3, #1
 8004122:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800412a:	b29b      	uxth	r3, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	b29a      	uxth	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1cb      	bne.n	80040da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2200      	movs	r2, #0
 800414a:	2140      	movs	r1, #64	; 0x40
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 fb06 	bl	800475e <UART_WaitOnFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e005      	b.n	8004168 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004166:	2302      	movs	r3, #2
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3720      	adds	r7, #32
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004170:	b5b0      	push	{r4, r5, r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004178:	2300      	movs	r3, #0
 800417a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	431a      	orrs	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	4313      	orrs	r3, r2
 8004192:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	4baf      	ldr	r3, [pc, #700]	; (8004458 <UART_SetConfig+0x2e8>)
 800419c:	4013      	ands	r3, r2
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6812      	ldr	r2, [r2, #0]
 80041a2:	69f9      	ldr	r1, [r7, #28]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4aa4      	ldr	r2, [pc, #656]	; (800445c <UART_SetConfig+0x2ec>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d004      	beq.n	80041d8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a9b      	ldr	r2, [pc, #620]	; (8004460 <UART_SetConfig+0x2f0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d121      	bne.n	800423a <UART_SetConfig+0xca>
 80041f6:	4b9b      	ldr	r3, [pc, #620]	; (8004464 <UART_SetConfig+0x2f4>)
 80041f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fc:	f003 0303 	and.w	r3, r3, #3
 8004200:	2b03      	cmp	r3, #3
 8004202:	d817      	bhi.n	8004234 <UART_SetConfig+0xc4>
 8004204:	a201      	add	r2, pc, #4	; (adr r2, 800420c <UART_SetConfig+0x9c>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	0800421d 	.word	0x0800421d
 8004210:	08004229 	.word	0x08004229
 8004214:	08004223 	.word	0x08004223
 8004218:	0800422f 	.word	0x0800422f
 800421c:	2301      	movs	r3, #1
 800421e:	76fb      	strb	r3, [r7, #27]
 8004220:	e070      	b.n	8004304 <UART_SetConfig+0x194>
 8004222:	2302      	movs	r3, #2
 8004224:	76fb      	strb	r3, [r7, #27]
 8004226:	e06d      	b.n	8004304 <UART_SetConfig+0x194>
 8004228:	2304      	movs	r3, #4
 800422a:	76fb      	strb	r3, [r7, #27]
 800422c:	e06a      	b.n	8004304 <UART_SetConfig+0x194>
 800422e:	2308      	movs	r3, #8
 8004230:	76fb      	strb	r3, [r7, #27]
 8004232:	e067      	b.n	8004304 <UART_SetConfig+0x194>
 8004234:	2310      	movs	r3, #16
 8004236:	76fb      	strb	r3, [r7, #27]
 8004238:	e064      	b.n	8004304 <UART_SetConfig+0x194>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a8a      	ldr	r2, [pc, #552]	; (8004468 <UART_SetConfig+0x2f8>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d132      	bne.n	80042aa <UART_SetConfig+0x13a>
 8004244:	4b87      	ldr	r3, [pc, #540]	; (8004464 <UART_SetConfig+0x2f4>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f003 030c 	and.w	r3, r3, #12
 800424e:	2b0c      	cmp	r3, #12
 8004250:	d828      	bhi.n	80042a4 <UART_SetConfig+0x134>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <UART_SetConfig+0xe8>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	0800428d 	.word	0x0800428d
 800425c:	080042a5 	.word	0x080042a5
 8004260:	080042a5 	.word	0x080042a5
 8004264:	080042a5 	.word	0x080042a5
 8004268:	08004299 	.word	0x08004299
 800426c:	080042a5 	.word	0x080042a5
 8004270:	080042a5 	.word	0x080042a5
 8004274:	080042a5 	.word	0x080042a5
 8004278:	08004293 	.word	0x08004293
 800427c:	080042a5 	.word	0x080042a5
 8004280:	080042a5 	.word	0x080042a5
 8004284:	080042a5 	.word	0x080042a5
 8004288:	0800429f 	.word	0x0800429f
 800428c:	2300      	movs	r3, #0
 800428e:	76fb      	strb	r3, [r7, #27]
 8004290:	e038      	b.n	8004304 <UART_SetConfig+0x194>
 8004292:	2302      	movs	r3, #2
 8004294:	76fb      	strb	r3, [r7, #27]
 8004296:	e035      	b.n	8004304 <UART_SetConfig+0x194>
 8004298:	2304      	movs	r3, #4
 800429a:	76fb      	strb	r3, [r7, #27]
 800429c:	e032      	b.n	8004304 <UART_SetConfig+0x194>
 800429e:	2308      	movs	r3, #8
 80042a0:	76fb      	strb	r3, [r7, #27]
 80042a2:	e02f      	b.n	8004304 <UART_SetConfig+0x194>
 80042a4:	2310      	movs	r3, #16
 80042a6:	76fb      	strb	r3, [r7, #27]
 80042a8:	e02c      	b.n	8004304 <UART_SetConfig+0x194>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a6b      	ldr	r2, [pc, #428]	; (800445c <UART_SetConfig+0x2ec>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d125      	bne.n	8004300 <UART_SetConfig+0x190>
 80042b4:	4b6b      	ldr	r3, [pc, #428]	; (8004464 <UART_SetConfig+0x2f4>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c2:	d017      	beq.n	80042f4 <UART_SetConfig+0x184>
 80042c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c8:	d817      	bhi.n	80042fa <UART_SetConfig+0x18a>
 80042ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ce:	d00b      	beq.n	80042e8 <UART_SetConfig+0x178>
 80042d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d4:	d811      	bhi.n	80042fa <UART_SetConfig+0x18a>
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <UART_SetConfig+0x172>
 80042da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042de:	d006      	beq.n	80042ee <UART_SetConfig+0x17e>
 80042e0:	e00b      	b.n	80042fa <UART_SetConfig+0x18a>
 80042e2:	2300      	movs	r3, #0
 80042e4:	76fb      	strb	r3, [r7, #27]
 80042e6:	e00d      	b.n	8004304 <UART_SetConfig+0x194>
 80042e8:	2302      	movs	r3, #2
 80042ea:	76fb      	strb	r3, [r7, #27]
 80042ec:	e00a      	b.n	8004304 <UART_SetConfig+0x194>
 80042ee:	2304      	movs	r3, #4
 80042f0:	76fb      	strb	r3, [r7, #27]
 80042f2:	e007      	b.n	8004304 <UART_SetConfig+0x194>
 80042f4:	2308      	movs	r3, #8
 80042f6:	76fb      	strb	r3, [r7, #27]
 80042f8:	e004      	b.n	8004304 <UART_SetConfig+0x194>
 80042fa:	2310      	movs	r3, #16
 80042fc:	76fb      	strb	r3, [r7, #27]
 80042fe:	e001      	b.n	8004304 <UART_SetConfig+0x194>
 8004300:	2310      	movs	r3, #16
 8004302:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a54      	ldr	r2, [pc, #336]	; (800445c <UART_SetConfig+0x2ec>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d173      	bne.n	80043f6 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800430e:	7efb      	ldrb	r3, [r7, #27]
 8004310:	2b08      	cmp	r3, #8
 8004312:	d824      	bhi.n	800435e <UART_SetConfig+0x1ee>
 8004314:	a201      	add	r2, pc, #4	; (adr r2, 800431c <UART_SetConfig+0x1ac>)
 8004316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431a:	bf00      	nop
 800431c:	08004341 	.word	0x08004341
 8004320:	0800435f 	.word	0x0800435f
 8004324:	08004349 	.word	0x08004349
 8004328:	0800435f 	.word	0x0800435f
 800432c:	0800434f 	.word	0x0800434f
 8004330:	0800435f 	.word	0x0800435f
 8004334:	0800435f 	.word	0x0800435f
 8004338:	0800435f 	.word	0x0800435f
 800433c:	08004357 	.word	0x08004357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004340:	f7ff fab2 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004344:	6178      	str	r0, [r7, #20]
        break;
 8004346:	e00f      	b.n	8004368 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004348:	4b48      	ldr	r3, [pc, #288]	; (800446c <UART_SetConfig+0x2fc>)
 800434a:	617b      	str	r3, [r7, #20]
        break;
 800434c:	e00c      	b.n	8004368 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800434e:	f7ff fa13 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8004352:	6178      	str	r0, [r7, #20]
        break;
 8004354:	e008      	b.n	8004368 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435a:	617b      	str	r3, [r7, #20]
        break;
 800435c:	e004      	b.n	8004368 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	76bb      	strb	r3, [r7, #26]
        break;
 8004366:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f000 80fe 	beq.w	800456c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	429a      	cmp	r2, r3
 800437e:	d305      	bcc.n	800438c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	429a      	cmp	r2, r3
 800438a:	d902      	bls.n	8004392 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	76bb      	strb	r3, [r7, #26]
 8004390:	e0ec      	b.n	800456c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	4618      	mov	r0, r3
 8004396:	f04f 0100 	mov.w	r1, #0
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	020b      	lsls	r3, r1, #8
 80043a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043a8:	0202      	lsls	r2, r0, #8
 80043aa:	6879      	ldr	r1, [r7, #4]
 80043ac:	6849      	ldr	r1, [r1, #4]
 80043ae:	0849      	lsrs	r1, r1, #1
 80043b0:	4608      	mov	r0, r1
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	1814      	adds	r4, r2, r0
 80043b8:	eb43 0501 	adc.w	r5, r3, r1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	461a      	mov	r2, r3
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	4620      	mov	r0, r4
 80043c8:	4629      	mov	r1, r5
 80043ca:	f7fc fbed 	bl	8000ba8 <__aeabi_uldivmod>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4613      	mov	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043dc:	d308      	bcc.n	80043f0 <UART_SetConfig+0x280>
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e4:	d204      	bcs.n	80043f0 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	e0bd      	b.n	800456c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	76bb      	strb	r3, [r7, #26]
 80043f4:	e0ba      	b.n	800456c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fe:	d168      	bne.n	80044d2 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8004400:	7efb      	ldrb	r3, [r7, #27]
 8004402:	2b08      	cmp	r3, #8
 8004404:	d834      	bhi.n	8004470 <UART_SetConfig+0x300>
 8004406:	a201      	add	r2, pc, #4	; (adr r2, 800440c <UART_SetConfig+0x29c>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	08004431 	.word	0x08004431
 8004410:	08004439 	.word	0x08004439
 8004414:	08004441 	.word	0x08004441
 8004418:	08004471 	.word	0x08004471
 800441c:	08004447 	.word	0x08004447
 8004420:	08004471 	.word	0x08004471
 8004424:	08004471 	.word	0x08004471
 8004428:	08004471 	.word	0x08004471
 800442c:	0800444f 	.word	0x0800444f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004430:	f7ff fa3a 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004434:	6178      	str	r0, [r7, #20]
        break;
 8004436:	e020      	b.n	800447a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004438:	f7ff fa4c 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 800443c:	6178      	str	r0, [r7, #20]
        break;
 800443e:	e01c      	b.n	800447a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004440:	4b0a      	ldr	r3, [pc, #40]	; (800446c <UART_SetConfig+0x2fc>)
 8004442:	617b      	str	r3, [r7, #20]
        break;
 8004444:	e019      	b.n	800447a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004446:	f7ff f997 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 800444a:	6178      	str	r0, [r7, #20]
        break;
 800444c:	e015      	b.n	800447a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004452:	617b      	str	r3, [r7, #20]
        break;
 8004454:	e011      	b.n	800447a <UART_SetConfig+0x30a>
 8004456:	bf00      	nop
 8004458:	efff69f3 	.word	0xefff69f3
 800445c:	40008000 	.word	0x40008000
 8004460:	40013800 	.word	0x40013800
 8004464:	40021000 	.word	0x40021000
 8004468:	40004400 	.word	0x40004400
 800446c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	76bb      	strb	r3, [r7, #26]
        break;
 8004478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d075      	beq.n	800456c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	005a      	lsls	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	085b      	lsrs	r3, r3, #1
 800448a:	441a      	add	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	fbb2 f3f3 	udiv	r3, r2, r3
 8004494:	b29b      	uxth	r3, r3
 8004496:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	2b0f      	cmp	r3, #15
 800449c:	d916      	bls.n	80044cc <UART_SetConfig+0x35c>
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a4:	d212      	bcs.n	80044cc <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f023 030f 	bic.w	r3, r3, #15
 80044ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	085b      	lsrs	r3, r3, #1
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	89fb      	ldrh	r3, [r7, #14]
 80044be:	4313      	orrs	r3, r2
 80044c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	89fa      	ldrh	r2, [r7, #14]
 80044c8:	60da      	str	r2, [r3, #12]
 80044ca:	e04f      	b.n	800456c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	76bb      	strb	r3, [r7, #26]
 80044d0:	e04c      	b.n	800456c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044d2:	7efb      	ldrb	r3, [r7, #27]
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d828      	bhi.n	800452a <UART_SetConfig+0x3ba>
 80044d8:	a201      	add	r2, pc, #4	; (adr r2, 80044e0 <UART_SetConfig+0x370>)
 80044da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044de:	bf00      	nop
 80044e0:	08004505 	.word	0x08004505
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004515 	.word	0x08004515
 80044ec:	0800452b 	.word	0x0800452b
 80044f0:	0800451b 	.word	0x0800451b
 80044f4:	0800452b 	.word	0x0800452b
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	0800452b 	.word	0x0800452b
 8004500:	08004523 	.word	0x08004523
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004504:	f7ff f9d0 	bl	80038a8 <HAL_RCC_GetPCLK1Freq>
 8004508:	6178      	str	r0, [r7, #20]
        break;
 800450a:	e013      	b.n	8004534 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450c:	f7ff f9e2 	bl	80038d4 <HAL_RCC_GetPCLK2Freq>
 8004510:	6178      	str	r0, [r7, #20]
        break;
 8004512:	e00f      	b.n	8004534 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <UART_SetConfig+0x414>)
 8004516:	617b      	str	r3, [r7, #20]
        break;
 8004518:	e00c      	b.n	8004534 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800451a:	f7ff f92d 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 800451e:	6178      	str	r0, [r7, #20]
        break;
 8004520:	e008      	b.n	8004534 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004526:	617b      	str	r3, [r7, #20]
        break;
 8004528:	e004      	b.n	8004534 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	76bb      	strb	r3, [r7, #26]
        break;
 8004532:	bf00      	nop
    }

    if (pclk != 0U)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d018      	beq.n	800456c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	085a      	lsrs	r2, r3, #1
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	441a      	add	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	b29b      	uxth	r3, r3
 800454e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	2b0f      	cmp	r3, #15
 8004554:	d908      	bls.n	8004568 <UART_SetConfig+0x3f8>
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455c:	d204      	bcs.n	8004568 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	60da      	str	r2, [r3, #12]
 8004566:	e001      	b.n	800456c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004578:	7ebb      	ldrb	r3, [r7, #26]
}
 800457a:	4618      	mov	r0, r3
 800457c:	3720      	adds	r7, #32
 800457e:	46bd      	mov	sp, r7
 8004580:	bdb0      	pop	{r4, r5, r7, pc}
 8004582:	bf00      	nop
 8004584:	00f42400 	.word	0x00f42400

08004588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01a      	beq.n	800469e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004686:	d10a      	bne.n	800469e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
  }
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046dc:	f7fd fa7c 	bl	8001bd8 <HAL_GetTick>
 80046e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d10e      	bne.n	800470e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f82d 	bl	800475e <UART_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e023      	b.n	8004756 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d10e      	bne.n	800473a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800471c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f817 	bl	800475e <UART_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e00d      	b.n	8004756 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b084      	sub	sp, #16
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4613      	mov	r3, r2
 800476c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800476e:	e05e      	b.n	800482e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004776:	d05a      	beq.n	800482e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004778:	f7fd fa2e 	bl	8001bd8 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	429a      	cmp	r2, r3
 8004786:	d302      	bcc.n	800478e <UART_WaitOnFlagUntilTimeout+0x30>
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d11b      	bne.n	80047c6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800479c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689a      	ldr	r2, [r3, #8]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 0201 	bic.w	r2, r2, #1
 80047ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e043      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0304 	and.w	r3, r3, #4
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d02c      	beq.n	800482e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047e2:	d124      	bne.n	800482e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047ec:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047fc:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2220      	movs	r2, #32
 8004812:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2220      	movs	r2, #32
 800481e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e00f      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	4013      	ands	r3, r2
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	429a      	cmp	r2, r3
 800483c:	bf0c      	ite	eq
 800483e:	2301      	moveq	r3, #1
 8004840:	2300      	movne	r3, #0
 8004842:	b2db      	uxtb	r3, r3
 8004844:	461a      	mov	r2, r3
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	429a      	cmp	r2, r3
 800484a:	d091      	beq.n	8004770 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <__errno>:
 8004858:	4b01      	ldr	r3, [pc, #4]	; (8004860 <__errno+0x8>)
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000028 	.word	0x20000028

08004864 <__libc_init_array>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	4d0d      	ldr	r5, [pc, #52]	; (800489c <__libc_init_array+0x38>)
 8004868:	4c0d      	ldr	r4, [pc, #52]	; (80048a0 <__libc_init_array+0x3c>)
 800486a:	1b64      	subs	r4, r4, r5
 800486c:	10a4      	asrs	r4, r4, #2
 800486e:	2600      	movs	r6, #0
 8004870:	42a6      	cmp	r6, r4
 8004872:	d109      	bne.n	8004888 <__libc_init_array+0x24>
 8004874:	4d0b      	ldr	r5, [pc, #44]	; (80048a4 <__libc_init_array+0x40>)
 8004876:	4c0c      	ldr	r4, [pc, #48]	; (80048a8 <__libc_init_array+0x44>)
 8004878:	f002 feb4 	bl	80075e4 <_init>
 800487c:	1b64      	subs	r4, r4, r5
 800487e:	10a4      	asrs	r4, r4, #2
 8004880:	2600      	movs	r6, #0
 8004882:	42a6      	cmp	r6, r4
 8004884:	d105      	bne.n	8004892 <__libc_init_array+0x2e>
 8004886:	bd70      	pop	{r4, r5, r6, pc}
 8004888:	f855 3b04 	ldr.w	r3, [r5], #4
 800488c:	4798      	blx	r3
 800488e:	3601      	adds	r6, #1
 8004890:	e7ee      	b.n	8004870 <__libc_init_array+0xc>
 8004892:	f855 3b04 	ldr.w	r3, [r5], #4
 8004896:	4798      	blx	r3
 8004898:	3601      	adds	r6, #1
 800489a:	e7f2      	b.n	8004882 <__libc_init_array+0x1e>
 800489c:	08007a64 	.word	0x08007a64
 80048a0:	08007a64 	.word	0x08007a64
 80048a4:	08007a64 	.word	0x08007a64
 80048a8:	08007a68 	.word	0x08007a68

080048ac <memset>:
 80048ac:	4402      	add	r2, r0
 80048ae:	4603      	mov	r3, r0
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d100      	bne.n	80048b6 <memset+0xa>
 80048b4:	4770      	bx	lr
 80048b6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ba:	e7f9      	b.n	80048b0 <memset+0x4>

080048bc <__cvt>:
 80048bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	ec55 4b10 	vmov	r4, r5, d0
 80048c4:	2d00      	cmp	r5, #0
 80048c6:	460e      	mov	r6, r1
 80048c8:	4619      	mov	r1, r3
 80048ca:	462b      	mov	r3, r5
 80048cc:	bfbb      	ittet	lt
 80048ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048d2:	461d      	movlt	r5, r3
 80048d4:	2300      	movge	r3, #0
 80048d6:	232d      	movlt	r3, #45	; 0x2d
 80048d8:	700b      	strb	r3, [r1, #0]
 80048da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048e0:	4691      	mov	r9, r2
 80048e2:	f023 0820 	bic.w	r8, r3, #32
 80048e6:	bfbc      	itt	lt
 80048e8:	4622      	movlt	r2, r4
 80048ea:	4614      	movlt	r4, r2
 80048ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048f0:	d005      	beq.n	80048fe <__cvt+0x42>
 80048f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048f6:	d100      	bne.n	80048fa <__cvt+0x3e>
 80048f8:	3601      	adds	r6, #1
 80048fa:	2102      	movs	r1, #2
 80048fc:	e000      	b.n	8004900 <__cvt+0x44>
 80048fe:	2103      	movs	r1, #3
 8004900:	ab03      	add	r3, sp, #12
 8004902:	9301      	str	r3, [sp, #4]
 8004904:	ab02      	add	r3, sp, #8
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	ec45 4b10 	vmov	d0, r4, r5
 800490c:	4653      	mov	r3, sl
 800490e:	4632      	mov	r2, r6
 8004910:	f000 fcea 	bl	80052e8 <_dtoa_r>
 8004914:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004918:	4607      	mov	r7, r0
 800491a:	d102      	bne.n	8004922 <__cvt+0x66>
 800491c:	f019 0f01 	tst.w	r9, #1
 8004920:	d022      	beq.n	8004968 <__cvt+0xac>
 8004922:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004926:	eb07 0906 	add.w	r9, r7, r6
 800492a:	d110      	bne.n	800494e <__cvt+0x92>
 800492c:	783b      	ldrb	r3, [r7, #0]
 800492e:	2b30      	cmp	r3, #48	; 0x30
 8004930:	d10a      	bne.n	8004948 <__cvt+0x8c>
 8004932:	2200      	movs	r2, #0
 8004934:	2300      	movs	r3, #0
 8004936:	4620      	mov	r0, r4
 8004938:	4629      	mov	r1, r5
 800493a:	f7fc f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800493e:	b918      	cbnz	r0, 8004948 <__cvt+0x8c>
 8004940:	f1c6 0601 	rsb	r6, r6, #1
 8004944:	f8ca 6000 	str.w	r6, [sl]
 8004948:	f8da 3000 	ldr.w	r3, [sl]
 800494c:	4499      	add	r9, r3
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7fc f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800495a:	b108      	cbz	r0, 8004960 <__cvt+0xa4>
 800495c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004960:	2230      	movs	r2, #48	; 0x30
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	454b      	cmp	r3, r9
 8004966:	d307      	bcc.n	8004978 <__cvt+0xbc>
 8004968:	9b03      	ldr	r3, [sp, #12]
 800496a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800496c:	1bdb      	subs	r3, r3, r7
 800496e:	4638      	mov	r0, r7
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	b004      	add	sp, #16
 8004974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004978:	1c59      	adds	r1, r3, #1
 800497a:	9103      	str	r1, [sp, #12]
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	e7f0      	b.n	8004962 <__cvt+0xa6>

08004980 <__exponent>:
 8004980:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004982:	4603      	mov	r3, r0
 8004984:	2900      	cmp	r1, #0
 8004986:	bfb8      	it	lt
 8004988:	4249      	neglt	r1, r1
 800498a:	f803 2b02 	strb.w	r2, [r3], #2
 800498e:	bfb4      	ite	lt
 8004990:	222d      	movlt	r2, #45	; 0x2d
 8004992:	222b      	movge	r2, #43	; 0x2b
 8004994:	2909      	cmp	r1, #9
 8004996:	7042      	strb	r2, [r0, #1]
 8004998:	dd2a      	ble.n	80049f0 <__exponent+0x70>
 800499a:	f10d 0407 	add.w	r4, sp, #7
 800499e:	46a4      	mov	ip, r4
 80049a0:	270a      	movs	r7, #10
 80049a2:	46a6      	mov	lr, r4
 80049a4:	460a      	mov	r2, r1
 80049a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80049aa:	fb07 1516 	mls	r5, r7, r6, r1
 80049ae:	3530      	adds	r5, #48	; 0x30
 80049b0:	2a63      	cmp	r2, #99	; 0x63
 80049b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80049b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049ba:	4631      	mov	r1, r6
 80049bc:	dcf1      	bgt.n	80049a2 <__exponent+0x22>
 80049be:	3130      	adds	r1, #48	; 0x30
 80049c0:	f1ae 0502 	sub.w	r5, lr, #2
 80049c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049c8:	1c44      	adds	r4, r0, #1
 80049ca:	4629      	mov	r1, r5
 80049cc:	4561      	cmp	r1, ip
 80049ce:	d30a      	bcc.n	80049e6 <__exponent+0x66>
 80049d0:	f10d 0209 	add.w	r2, sp, #9
 80049d4:	eba2 020e 	sub.w	r2, r2, lr
 80049d8:	4565      	cmp	r5, ip
 80049da:	bf88      	it	hi
 80049dc:	2200      	movhi	r2, #0
 80049de:	4413      	add	r3, r2
 80049e0:	1a18      	subs	r0, r3, r0
 80049e2:	b003      	add	sp, #12
 80049e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049ee:	e7ed      	b.n	80049cc <__exponent+0x4c>
 80049f0:	2330      	movs	r3, #48	; 0x30
 80049f2:	3130      	adds	r1, #48	; 0x30
 80049f4:	7083      	strb	r3, [r0, #2]
 80049f6:	70c1      	strb	r1, [r0, #3]
 80049f8:	1d03      	adds	r3, r0, #4
 80049fa:	e7f1      	b.n	80049e0 <__exponent+0x60>

080049fc <_printf_float>:
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	ed2d 8b02 	vpush	{d8}
 8004a04:	b08d      	sub	sp, #52	; 0x34
 8004a06:	460c      	mov	r4, r1
 8004a08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a0c:	4616      	mov	r6, r2
 8004a0e:	461f      	mov	r7, r3
 8004a10:	4605      	mov	r5, r0
 8004a12:	f001 fa55 	bl	8005ec0 <_localeconv_r>
 8004a16:	f8d0 a000 	ldr.w	sl, [r0]
 8004a1a:	4650      	mov	r0, sl
 8004a1c:	f7fb fbd8 	bl	80001d0 <strlen>
 8004a20:	2300      	movs	r3, #0
 8004a22:	930a      	str	r3, [sp, #40]	; 0x28
 8004a24:	6823      	ldr	r3, [r4, #0]
 8004a26:	9305      	str	r3, [sp, #20]
 8004a28:	f8d8 3000 	ldr.w	r3, [r8]
 8004a2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a30:	3307      	adds	r3, #7
 8004a32:	f023 0307 	bic.w	r3, r3, #7
 8004a36:	f103 0208 	add.w	r2, r3, #8
 8004a3a:	f8c8 2000 	str.w	r2, [r8]
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a4e:	9307      	str	r3, [sp, #28]
 8004a50:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a54:	ee08 0a10 	vmov	s16, r0
 8004a58:	4b9f      	ldr	r3, [pc, #636]	; (8004cd8 <_printf_float+0x2dc>)
 8004a5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a62:	f7fc f863 	bl	8000b2c <__aeabi_dcmpun>
 8004a66:	bb88      	cbnz	r0, 8004acc <_printf_float+0xd0>
 8004a68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a6c:	4b9a      	ldr	r3, [pc, #616]	; (8004cd8 <_printf_float+0x2dc>)
 8004a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a72:	f7fc f83d 	bl	8000af0 <__aeabi_dcmple>
 8004a76:	bb48      	cbnz	r0, 8004acc <_printf_float+0xd0>
 8004a78:	2200      	movs	r2, #0
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	4640      	mov	r0, r8
 8004a7e:	4649      	mov	r1, r9
 8004a80:	f7fc f82c 	bl	8000adc <__aeabi_dcmplt>
 8004a84:	b110      	cbz	r0, 8004a8c <_printf_float+0x90>
 8004a86:	232d      	movs	r3, #45	; 0x2d
 8004a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a8c:	4b93      	ldr	r3, [pc, #588]	; (8004cdc <_printf_float+0x2e0>)
 8004a8e:	4894      	ldr	r0, [pc, #592]	; (8004ce0 <_printf_float+0x2e4>)
 8004a90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a94:	bf94      	ite	ls
 8004a96:	4698      	movls	r8, r3
 8004a98:	4680      	movhi	r8, r0
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	6123      	str	r3, [r4, #16]
 8004a9e:	9b05      	ldr	r3, [sp, #20]
 8004aa0:	f023 0204 	bic.w	r2, r3, #4
 8004aa4:	6022      	str	r2, [r4, #0]
 8004aa6:	f04f 0900 	mov.w	r9, #0
 8004aaa:	9700      	str	r7, [sp, #0]
 8004aac:	4633      	mov	r3, r6
 8004aae:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f000 f9d8 	bl	8004e68 <_printf_common>
 8004ab8:	3001      	adds	r0, #1
 8004aba:	f040 8090 	bne.w	8004bde <_printf_float+0x1e2>
 8004abe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ac2:	b00d      	add	sp, #52	; 0x34
 8004ac4:	ecbd 8b02 	vpop	{d8}
 8004ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	f7fc f82a 	bl	8000b2c <__aeabi_dcmpun>
 8004ad8:	b140      	cbz	r0, 8004aec <_printf_float+0xf0>
 8004ada:	464b      	mov	r3, r9
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	bfbc      	itt	lt
 8004ae0:	232d      	movlt	r3, #45	; 0x2d
 8004ae2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ae6:	487f      	ldr	r0, [pc, #508]	; (8004ce4 <_printf_float+0x2e8>)
 8004ae8:	4b7f      	ldr	r3, [pc, #508]	; (8004ce8 <_printf_float+0x2ec>)
 8004aea:	e7d1      	b.n	8004a90 <_printf_float+0x94>
 8004aec:	6863      	ldr	r3, [r4, #4]
 8004aee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004af2:	9206      	str	r2, [sp, #24]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	d13f      	bne.n	8004b78 <_printf_float+0x17c>
 8004af8:	2306      	movs	r3, #6
 8004afa:	6063      	str	r3, [r4, #4]
 8004afc:	9b05      	ldr	r3, [sp, #20]
 8004afe:	6861      	ldr	r1, [r4, #4]
 8004b00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b04:	2300      	movs	r3, #0
 8004b06:	9303      	str	r3, [sp, #12]
 8004b08:	ab0a      	add	r3, sp, #40	; 0x28
 8004b0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b0e:	ab09      	add	r3, sp, #36	; 0x24
 8004b10:	ec49 8b10 	vmov	d0, r8, r9
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	6022      	str	r2, [r4, #0]
 8004b18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	f7ff fecd 	bl	80048bc <__cvt>
 8004b22:	9b06      	ldr	r3, [sp, #24]
 8004b24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b26:	2b47      	cmp	r3, #71	; 0x47
 8004b28:	4680      	mov	r8, r0
 8004b2a:	d108      	bne.n	8004b3e <_printf_float+0x142>
 8004b2c:	1cc8      	adds	r0, r1, #3
 8004b2e:	db02      	blt.n	8004b36 <_printf_float+0x13a>
 8004b30:	6863      	ldr	r3, [r4, #4]
 8004b32:	4299      	cmp	r1, r3
 8004b34:	dd41      	ble.n	8004bba <_printf_float+0x1be>
 8004b36:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b3a:	fa5f fb8b 	uxtb.w	fp, fp
 8004b3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b42:	d820      	bhi.n	8004b86 <_printf_float+0x18a>
 8004b44:	3901      	subs	r1, #1
 8004b46:	465a      	mov	r2, fp
 8004b48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b4c:	9109      	str	r1, [sp, #36]	; 0x24
 8004b4e:	f7ff ff17 	bl	8004980 <__exponent>
 8004b52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b54:	1813      	adds	r3, r2, r0
 8004b56:	2a01      	cmp	r2, #1
 8004b58:	4681      	mov	r9, r0
 8004b5a:	6123      	str	r3, [r4, #16]
 8004b5c:	dc02      	bgt.n	8004b64 <_printf_float+0x168>
 8004b5e:	6822      	ldr	r2, [r4, #0]
 8004b60:	07d2      	lsls	r2, r2, #31
 8004b62:	d501      	bpl.n	8004b68 <_printf_float+0x16c>
 8004b64:	3301      	adds	r3, #1
 8004b66:	6123      	str	r3, [r4, #16]
 8004b68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d09c      	beq.n	8004aaa <_printf_float+0xae>
 8004b70:	232d      	movs	r3, #45	; 0x2d
 8004b72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b76:	e798      	b.n	8004aaa <_printf_float+0xae>
 8004b78:	9a06      	ldr	r2, [sp, #24]
 8004b7a:	2a47      	cmp	r2, #71	; 0x47
 8004b7c:	d1be      	bne.n	8004afc <_printf_float+0x100>
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1bc      	bne.n	8004afc <_printf_float+0x100>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e7b9      	b.n	8004afa <_printf_float+0xfe>
 8004b86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b8a:	d118      	bne.n	8004bbe <_printf_float+0x1c2>
 8004b8c:	2900      	cmp	r1, #0
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	dd0b      	ble.n	8004baa <_printf_float+0x1ae>
 8004b92:	6121      	str	r1, [r4, #16]
 8004b94:	b913      	cbnz	r3, 8004b9c <_printf_float+0x1a0>
 8004b96:	6822      	ldr	r2, [r4, #0]
 8004b98:	07d0      	lsls	r0, r2, #31
 8004b9a:	d502      	bpl.n	8004ba2 <_printf_float+0x1a6>
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	440b      	add	r3, r1
 8004ba0:	6123      	str	r3, [r4, #16]
 8004ba2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ba4:	f04f 0900 	mov.w	r9, #0
 8004ba8:	e7de      	b.n	8004b68 <_printf_float+0x16c>
 8004baa:	b913      	cbnz	r3, 8004bb2 <_printf_float+0x1b6>
 8004bac:	6822      	ldr	r2, [r4, #0]
 8004bae:	07d2      	lsls	r2, r2, #31
 8004bb0:	d501      	bpl.n	8004bb6 <_printf_float+0x1ba>
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	e7f4      	b.n	8004ba0 <_printf_float+0x1a4>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e7f2      	b.n	8004ba0 <_printf_float+0x1a4>
 8004bba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bc0:	4299      	cmp	r1, r3
 8004bc2:	db05      	blt.n	8004bd0 <_printf_float+0x1d4>
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	6121      	str	r1, [r4, #16]
 8004bc8:	07d8      	lsls	r0, r3, #31
 8004bca:	d5ea      	bpl.n	8004ba2 <_printf_float+0x1a6>
 8004bcc:	1c4b      	adds	r3, r1, #1
 8004bce:	e7e7      	b.n	8004ba0 <_printf_float+0x1a4>
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	bfd4      	ite	le
 8004bd4:	f1c1 0202 	rsble	r2, r1, #2
 8004bd8:	2201      	movgt	r2, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	e7e0      	b.n	8004ba0 <_printf_float+0x1a4>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	055a      	lsls	r2, r3, #21
 8004be2:	d407      	bmi.n	8004bf4 <_printf_float+0x1f8>
 8004be4:	6923      	ldr	r3, [r4, #16]
 8004be6:	4642      	mov	r2, r8
 8004be8:	4631      	mov	r1, r6
 8004bea:	4628      	mov	r0, r5
 8004bec:	47b8      	blx	r7
 8004bee:	3001      	adds	r0, #1
 8004bf0:	d12c      	bne.n	8004c4c <_printf_float+0x250>
 8004bf2:	e764      	b.n	8004abe <_printf_float+0xc2>
 8004bf4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bf8:	f240 80e0 	bls.w	8004dbc <_printf_float+0x3c0>
 8004bfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c00:	2200      	movs	r2, #0
 8004c02:	2300      	movs	r3, #0
 8004c04:	f7fb ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	d034      	beq.n	8004c76 <_printf_float+0x27a>
 8004c0c:	4a37      	ldr	r2, [pc, #220]	; (8004cec <_printf_float+0x2f0>)
 8004c0e:	2301      	movs	r3, #1
 8004c10:	4631      	mov	r1, r6
 8004c12:	4628      	mov	r0, r5
 8004c14:	47b8      	blx	r7
 8004c16:	3001      	adds	r0, #1
 8004c18:	f43f af51 	beq.w	8004abe <_printf_float+0xc2>
 8004c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c20:	429a      	cmp	r2, r3
 8004c22:	db02      	blt.n	8004c2a <_printf_float+0x22e>
 8004c24:	6823      	ldr	r3, [r4, #0]
 8004c26:	07d8      	lsls	r0, r3, #31
 8004c28:	d510      	bpl.n	8004c4c <_printf_float+0x250>
 8004c2a:	ee18 3a10 	vmov	r3, s16
 8004c2e:	4652      	mov	r2, sl
 8004c30:	4631      	mov	r1, r6
 8004c32:	4628      	mov	r0, r5
 8004c34:	47b8      	blx	r7
 8004c36:	3001      	adds	r0, #1
 8004c38:	f43f af41 	beq.w	8004abe <_printf_float+0xc2>
 8004c3c:	f04f 0800 	mov.w	r8, #0
 8004c40:	f104 091a 	add.w	r9, r4, #26
 8004c44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c46:	3b01      	subs	r3, #1
 8004c48:	4543      	cmp	r3, r8
 8004c4a:	dc09      	bgt.n	8004c60 <_printf_float+0x264>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	079b      	lsls	r3, r3, #30
 8004c50:	f100 8105 	bmi.w	8004e5e <_printf_float+0x462>
 8004c54:	68e0      	ldr	r0, [r4, #12]
 8004c56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c58:	4298      	cmp	r0, r3
 8004c5a:	bfb8      	it	lt
 8004c5c:	4618      	movlt	r0, r3
 8004c5e:	e730      	b.n	8004ac2 <_printf_float+0xc6>
 8004c60:	2301      	movs	r3, #1
 8004c62:	464a      	mov	r2, r9
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f af27 	beq.w	8004abe <_printf_float+0xc2>
 8004c70:	f108 0801 	add.w	r8, r8, #1
 8004c74:	e7e6      	b.n	8004c44 <_printf_float+0x248>
 8004c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	dc39      	bgt.n	8004cf0 <_printf_float+0x2f4>
 8004c7c:	4a1b      	ldr	r2, [pc, #108]	; (8004cec <_printf_float+0x2f0>)
 8004c7e:	2301      	movs	r3, #1
 8004c80:	4631      	mov	r1, r6
 8004c82:	4628      	mov	r0, r5
 8004c84:	47b8      	blx	r7
 8004c86:	3001      	adds	r0, #1
 8004c88:	f43f af19 	beq.w	8004abe <_printf_float+0xc2>
 8004c8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c90:	4313      	orrs	r3, r2
 8004c92:	d102      	bne.n	8004c9a <_printf_float+0x29e>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	07d9      	lsls	r1, r3, #31
 8004c98:	d5d8      	bpl.n	8004c4c <_printf_float+0x250>
 8004c9a:	ee18 3a10 	vmov	r3, s16
 8004c9e:	4652      	mov	r2, sl
 8004ca0:	4631      	mov	r1, r6
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	47b8      	blx	r7
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	f43f af09 	beq.w	8004abe <_printf_float+0xc2>
 8004cac:	f04f 0900 	mov.w	r9, #0
 8004cb0:	f104 0a1a 	add.w	sl, r4, #26
 8004cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb6:	425b      	negs	r3, r3
 8004cb8:	454b      	cmp	r3, r9
 8004cba:	dc01      	bgt.n	8004cc0 <_printf_float+0x2c4>
 8004cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cbe:	e792      	b.n	8004be6 <_printf_float+0x1ea>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4652      	mov	r2, sl
 8004cc4:	4631      	mov	r1, r6
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	47b8      	blx	r7
 8004cca:	3001      	adds	r0, #1
 8004ccc:	f43f aef7 	beq.w	8004abe <_printf_float+0xc2>
 8004cd0:	f109 0901 	add.w	r9, r9, #1
 8004cd4:	e7ee      	b.n	8004cb4 <_printf_float+0x2b8>
 8004cd6:	bf00      	nop
 8004cd8:	7fefffff 	.word	0x7fefffff
 8004cdc:	0800767c 	.word	0x0800767c
 8004ce0:	08007680 	.word	0x08007680
 8004ce4:	08007688 	.word	0x08007688
 8004ce8:	08007684 	.word	0x08007684
 8004cec:	0800768c 	.word	0x0800768c
 8004cf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cf2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	bfa8      	it	ge
 8004cf8:	461a      	movge	r2, r3
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	4691      	mov	r9, r2
 8004cfe:	dc37      	bgt.n	8004d70 <_printf_float+0x374>
 8004d00:	f04f 0b00 	mov.w	fp, #0
 8004d04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d08:	f104 021a 	add.w	r2, r4, #26
 8004d0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d0e:	9305      	str	r3, [sp, #20]
 8004d10:	eba3 0309 	sub.w	r3, r3, r9
 8004d14:	455b      	cmp	r3, fp
 8004d16:	dc33      	bgt.n	8004d80 <_printf_float+0x384>
 8004d18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	db3b      	blt.n	8004d98 <_printf_float+0x39c>
 8004d20:	6823      	ldr	r3, [r4, #0]
 8004d22:	07da      	lsls	r2, r3, #31
 8004d24:	d438      	bmi.n	8004d98 <_printf_float+0x39c>
 8004d26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d28:	9b05      	ldr	r3, [sp, #20]
 8004d2a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	eba2 0901 	sub.w	r9, r2, r1
 8004d32:	4599      	cmp	r9, r3
 8004d34:	bfa8      	it	ge
 8004d36:	4699      	movge	r9, r3
 8004d38:	f1b9 0f00 	cmp.w	r9, #0
 8004d3c:	dc35      	bgt.n	8004daa <_printf_float+0x3ae>
 8004d3e:	f04f 0800 	mov.w	r8, #0
 8004d42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d46:	f104 0a1a 	add.w	sl, r4, #26
 8004d4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d4e:	1a9b      	subs	r3, r3, r2
 8004d50:	eba3 0309 	sub.w	r3, r3, r9
 8004d54:	4543      	cmp	r3, r8
 8004d56:	f77f af79 	ble.w	8004c4c <_printf_float+0x250>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4652      	mov	r2, sl
 8004d5e:	4631      	mov	r1, r6
 8004d60:	4628      	mov	r0, r5
 8004d62:	47b8      	blx	r7
 8004d64:	3001      	adds	r0, #1
 8004d66:	f43f aeaa 	beq.w	8004abe <_printf_float+0xc2>
 8004d6a:	f108 0801 	add.w	r8, r8, #1
 8004d6e:	e7ec      	b.n	8004d4a <_printf_float+0x34e>
 8004d70:	4613      	mov	r3, r2
 8004d72:	4631      	mov	r1, r6
 8004d74:	4642      	mov	r2, r8
 8004d76:	4628      	mov	r0, r5
 8004d78:	47b8      	blx	r7
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d1c0      	bne.n	8004d00 <_printf_float+0x304>
 8004d7e:	e69e      	b.n	8004abe <_printf_float+0xc2>
 8004d80:	2301      	movs	r3, #1
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	9205      	str	r2, [sp, #20]
 8004d88:	47b8      	blx	r7
 8004d8a:	3001      	adds	r0, #1
 8004d8c:	f43f ae97 	beq.w	8004abe <_printf_float+0xc2>
 8004d90:	9a05      	ldr	r2, [sp, #20]
 8004d92:	f10b 0b01 	add.w	fp, fp, #1
 8004d96:	e7b9      	b.n	8004d0c <_printf_float+0x310>
 8004d98:	ee18 3a10 	vmov	r3, s16
 8004d9c:	4652      	mov	r2, sl
 8004d9e:	4631      	mov	r1, r6
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b8      	blx	r7
 8004da4:	3001      	adds	r0, #1
 8004da6:	d1be      	bne.n	8004d26 <_printf_float+0x32a>
 8004da8:	e689      	b.n	8004abe <_printf_float+0xc2>
 8004daa:	9a05      	ldr	r2, [sp, #20]
 8004dac:	464b      	mov	r3, r9
 8004dae:	4442      	add	r2, r8
 8004db0:	4631      	mov	r1, r6
 8004db2:	4628      	mov	r0, r5
 8004db4:	47b8      	blx	r7
 8004db6:	3001      	adds	r0, #1
 8004db8:	d1c1      	bne.n	8004d3e <_printf_float+0x342>
 8004dba:	e680      	b.n	8004abe <_printf_float+0xc2>
 8004dbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dbe:	2a01      	cmp	r2, #1
 8004dc0:	dc01      	bgt.n	8004dc6 <_printf_float+0x3ca>
 8004dc2:	07db      	lsls	r3, r3, #31
 8004dc4:	d538      	bpl.n	8004e38 <_printf_float+0x43c>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4642      	mov	r2, r8
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f ae74 	beq.w	8004abe <_printf_float+0xc2>
 8004dd6:	ee18 3a10 	vmov	r3, s16
 8004dda:	4652      	mov	r2, sl
 8004ddc:	4631      	mov	r1, r6
 8004dde:	4628      	mov	r0, r5
 8004de0:	47b8      	blx	r7
 8004de2:	3001      	adds	r0, #1
 8004de4:	f43f ae6b 	beq.w	8004abe <_printf_float+0xc2>
 8004de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004dec:	2200      	movs	r2, #0
 8004dee:	2300      	movs	r3, #0
 8004df0:	f7fb fe6a 	bl	8000ac8 <__aeabi_dcmpeq>
 8004df4:	b9d8      	cbnz	r0, 8004e2e <_printf_float+0x432>
 8004df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df8:	f108 0201 	add.w	r2, r8, #1
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	d10e      	bne.n	8004e26 <_printf_float+0x42a>
 8004e08:	e659      	b.n	8004abe <_printf_float+0xc2>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	4652      	mov	r2, sl
 8004e0e:	4631      	mov	r1, r6
 8004e10:	4628      	mov	r0, r5
 8004e12:	47b8      	blx	r7
 8004e14:	3001      	adds	r0, #1
 8004e16:	f43f ae52 	beq.w	8004abe <_printf_float+0xc2>
 8004e1a:	f108 0801 	add.w	r8, r8, #1
 8004e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	4543      	cmp	r3, r8
 8004e24:	dcf1      	bgt.n	8004e0a <_printf_float+0x40e>
 8004e26:	464b      	mov	r3, r9
 8004e28:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e2c:	e6dc      	b.n	8004be8 <_printf_float+0x1ec>
 8004e2e:	f04f 0800 	mov.w	r8, #0
 8004e32:	f104 0a1a 	add.w	sl, r4, #26
 8004e36:	e7f2      	b.n	8004e1e <_printf_float+0x422>
 8004e38:	2301      	movs	r3, #1
 8004e3a:	4642      	mov	r2, r8
 8004e3c:	e7df      	b.n	8004dfe <_printf_float+0x402>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	464a      	mov	r2, r9
 8004e42:	4631      	mov	r1, r6
 8004e44:	4628      	mov	r0, r5
 8004e46:	47b8      	blx	r7
 8004e48:	3001      	adds	r0, #1
 8004e4a:	f43f ae38 	beq.w	8004abe <_printf_float+0xc2>
 8004e4e:	f108 0801 	add.w	r8, r8, #1
 8004e52:	68e3      	ldr	r3, [r4, #12]
 8004e54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e56:	1a5b      	subs	r3, r3, r1
 8004e58:	4543      	cmp	r3, r8
 8004e5a:	dcf0      	bgt.n	8004e3e <_printf_float+0x442>
 8004e5c:	e6fa      	b.n	8004c54 <_printf_float+0x258>
 8004e5e:	f04f 0800 	mov.w	r8, #0
 8004e62:	f104 0919 	add.w	r9, r4, #25
 8004e66:	e7f4      	b.n	8004e52 <_printf_float+0x456>

08004e68 <_printf_common>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	4616      	mov	r6, r2
 8004e6e:	4699      	mov	r9, r3
 8004e70:	688a      	ldr	r2, [r1, #8]
 8004e72:	690b      	ldr	r3, [r1, #16]
 8004e74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	bfb8      	it	lt
 8004e7c:	4613      	movlt	r3, r2
 8004e7e:	6033      	str	r3, [r6, #0]
 8004e80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e84:	4607      	mov	r7, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	b10a      	cbz	r2, 8004e8e <_printf_common+0x26>
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	6033      	str	r3, [r6, #0]
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	0699      	lsls	r1, r3, #26
 8004e92:	bf42      	ittt	mi
 8004e94:	6833      	ldrmi	r3, [r6, #0]
 8004e96:	3302      	addmi	r3, #2
 8004e98:	6033      	strmi	r3, [r6, #0]
 8004e9a:	6825      	ldr	r5, [r4, #0]
 8004e9c:	f015 0506 	ands.w	r5, r5, #6
 8004ea0:	d106      	bne.n	8004eb0 <_printf_common+0x48>
 8004ea2:	f104 0a19 	add.w	sl, r4, #25
 8004ea6:	68e3      	ldr	r3, [r4, #12]
 8004ea8:	6832      	ldr	r2, [r6, #0]
 8004eaa:	1a9b      	subs	r3, r3, r2
 8004eac:	42ab      	cmp	r3, r5
 8004eae:	dc26      	bgt.n	8004efe <_printf_common+0x96>
 8004eb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eb4:	1e13      	subs	r3, r2, #0
 8004eb6:	6822      	ldr	r2, [r4, #0]
 8004eb8:	bf18      	it	ne
 8004eba:	2301      	movne	r3, #1
 8004ebc:	0692      	lsls	r2, r2, #26
 8004ebe:	d42b      	bmi.n	8004f18 <_printf_common+0xb0>
 8004ec0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	47c0      	blx	r8
 8004eca:	3001      	adds	r0, #1
 8004ecc:	d01e      	beq.n	8004f0c <_printf_common+0xa4>
 8004ece:	6823      	ldr	r3, [r4, #0]
 8004ed0:	68e5      	ldr	r5, [r4, #12]
 8004ed2:	6832      	ldr	r2, [r6, #0]
 8004ed4:	f003 0306 	and.w	r3, r3, #6
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	bf08      	it	eq
 8004edc:	1aad      	subeq	r5, r5, r2
 8004ede:	68a3      	ldr	r3, [r4, #8]
 8004ee0:	6922      	ldr	r2, [r4, #16]
 8004ee2:	bf0c      	ite	eq
 8004ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee8:	2500      	movne	r5, #0
 8004eea:	4293      	cmp	r3, r2
 8004eec:	bfc4      	itt	gt
 8004eee:	1a9b      	subgt	r3, r3, r2
 8004ef0:	18ed      	addgt	r5, r5, r3
 8004ef2:	2600      	movs	r6, #0
 8004ef4:	341a      	adds	r4, #26
 8004ef6:	42b5      	cmp	r5, r6
 8004ef8:	d11a      	bne.n	8004f30 <_printf_common+0xc8>
 8004efa:	2000      	movs	r0, #0
 8004efc:	e008      	b.n	8004f10 <_printf_common+0xa8>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4652      	mov	r2, sl
 8004f02:	4649      	mov	r1, r9
 8004f04:	4638      	mov	r0, r7
 8004f06:	47c0      	blx	r8
 8004f08:	3001      	adds	r0, #1
 8004f0a:	d103      	bne.n	8004f14 <_printf_common+0xac>
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f14:	3501      	adds	r5, #1
 8004f16:	e7c6      	b.n	8004ea6 <_printf_common+0x3e>
 8004f18:	18e1      	adds	r1, r4, r3
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	2030      	movs	r0, #48	; 0x30
 8004f1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f22:	4422      	add	r2, r4
 8004f24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f2c:	3302      	adds	r3, #2
 8004f2e:	e7c7      	b.n	8004ec0 <_printf_common+0x58>
 8004f30:	2301      	movs	r3, #1
 8004f32:	4622      	mov	r2, r4
 8004f34:	4649      	mov	r1, r9
 8004f36:	4638      	mov	r0, r7
 8004f38:	47c0      	blx	r8
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	d0e6      	beq.n	8004f0c <_printf_common+0xa4>
 8004f3e:	3601      	adds	r6, #1
 8004f40:	e7d9      	b.n	8004ef6 <_printf_common+0x8e>
	...

08004f44 <_printf_i>:
 8004f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f48:	460c      	mov	r4, r1
 8004f4a:	4691      	mov	r9, r2
 8004f4c:	7e27      	ldrb	r7, [r4, #24]
 8004f4e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f50:	2f78      	cmp	r7, #120	; 0x78
 8004f52:	4680      	mov	r8, r0
 8004f54:	469a      	mov	sl, r3
 8004f56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f5a:	d807      	bhi.n	8004f6c <_printf_i+0x28>
 8004f5c:	2f62      	cmp	r7, #98	; 0x62
 8004f5e:	d80a      	bhi.n	8004f76 <_printf_i+0x32>
 8004f60:	2f00      	cmp	r7, #0
 8004f62:	f000 80d8 	beq.w	8005116 <_printf_i+0x1d2>
 8004f66:	2f58      	cmp	r7, #88	; 0x58
 8004f68:	f000 80a3 	beq.w	80050b2 <_printf_i+0x16e>
 8004f6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f74:	e03a      	b.n	8004fec <_printf_i+0xa8>
 8004f76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f7a:	2b15      	cmp	r3, #21
 8004f7c:	d8f6      	bhi.n	8004f6c <_printf_i+0x28>
 8004f7e:	a001      	add	r0, pc, #4	; (adr r0, 8004f84 <_printf_i+0x40>)
 8004f80:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f84:	08004fdd 	.word	0x08004fdd
 8004f88:	08004ff1 	.word	0x08004ff1
 8004f8c:	08004f6d 	.word	0x08004f6d
 8004f90:	08004f6d 	.word	0x08004f6d
 8004f94:	08004f6d 	.word	0x08004f6d
 8004f98:	08004f6d 	.word	0x08004f6d
 8004f9c:	08004ff1 	.word	0x08004ff1
 8004fa0:	08004f6d 	.word	0x08004f6d
 8004fa4:	08004f6d 	.word	0x08004f6d
 8004fa8:	08004f6d 	.word	0x08004f6d
 8004fac:	08004f6d 	.word	0x08004f6d
 8004fb0:	080050fd 	.word	0x080050fd
 8004fb4:	08005021 	.word	0x08005021
 8004fb8:	080050df 	.word	0x080050df
 8004fbc:	08004f6d 	.word	0x08004f6d
 8004fc0:	08004f6d 	.word	0x08004f6d
 8004fc4:	0800511f 	.word	0x0800511f
 8004fc8:	08004f6d 	.word	0x08004f6d
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08004f6d 	.word	0x08004f6d
 8004fd4:	08004f6d 	.word	0x08004f6d
 8004fd8:	080050e7 	.word	0x080050e7
 8004fdc:	680b      	ldr	r3, [r1, #0]
 8004fde:	1d1a      	adds	r2, r3, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	600a      	str	r2, [r1, #0]
 8004fe4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fe8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0a3      	b.n	8005138 <_printf_i+0x1f4>
 8004ff0:	6825      	ldr	r5, [r4, #0]
 8004ff2:	6808      	ldr	r0, [r1, #0]
 8004ff4:	062e      	lsls	r6, r5, #24
 8004ff6:	f100 0304 	add.w	r3, r0, #4
 8004ffa:	d50a      	bpl.n	8005012 <_printf_i+0xce>
 8004ffc:	6805      	ldr	r5, [r0, #0]
 8004ffe:	600b      	str	r3, [r1, #0]
 8005000:	2d00      	cmp	r5, #0
 8005002:	da03      	bge.n	800500c <_printf_i+0xc8>
 8005004:	232d      	movs	r3, #45	; 0x2d
 8005006:	426d      	negs	r5, r5
 8005008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500c:	485e      	ldr	r0, [pc, #376]	; (8005188 <_printf_i+0x244>)
 800500e:	230a      	movs	r3, #10
 8005010:	e019      	b.n	8005046 <_printf_i+0x102>
 8005012:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005016:	6805      	ldr	r5, [r0, #0]
 8005018:	600b      	str	r3, [r1, #0]
 800501a:	bf18      	it	ne
 800501c:	b22d      	sxthne	r5, r5
 800501e:	e7ef      	b.n	8005000 <_printf_i+0xbc>
 8005020:	680b      	ldr	r3, [r1, #0]
 8005022:	6825      	ldr	r5, [r4, #0]
 8005024:	1d18      	adds	r0, r3, #4
 8005026:	6008      	str	r0, [r1, #0]
 8005028:	0628      	lsls	r0, r5, #24
 800502a:	d501      	bpl.n	8005030 <_printf_i+0xec>
 800502c:	681d      	ldr	r5, [r3, #0]
 800502e:	e002      	b.n	8005036 <_printf_i+0xf2>
 8005030:	0669      	lsls	r1, r5, #25
 8005032:	d5fb      	bpl.n	800502c <_printf_i+0xe8>
 8005034:	881d      	ldrh	r5, [r3, #0]
 8005036:	4854      	ldr	r0, [pc, #336]	; (8005188 <_printf_i+0x244>)
 8005038:	2f6f      	cmp	r7, #111	; 0x6f
 800503a:	bf0c      	ite	eq
 800503c:	2308      	moveq	r3, #8
 800503e:	230a      	movne	r3, #10
 8005040:	2100      	movs	r1, #0
 8005042:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005046:	6866      	ldr	r6, [r4, #4]
 8005048:	60a6      	str	r6, [r4, #8]
 800504a:	2e00      	cmp	r6, #0
 800504c:	bfa2      	ittt	ge
 800504e:	6821      	ldrge	r1, [r4, #0]
 8005050:	f021 0104 	bicge.w	r1, r1, #4
 8005054:	6021      	strge	r1, [r4, #0]
 8005056:	b90d      	cbnz	r5, 800505c <_printf_i+0x118>
 8005058:	2e00      	cmp	r6, #0
 800505a:	d04d      	beq.n	80050f8 <_printf_i+0x1b4>
 800505c:	4616      	mov	r6, r2
 800505e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005062:	fb03 5711 	mls	r7, r3, r1, r5
 8005066:	5dc7      	ldrb	r7, [r0, r7]
 8005068:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800506c:	462f      	mov	r7, r5
 800506e:	42bb      	cmp	r3, r7
 8005070:	460d      	mov	r5, r1
 8005072:	d9f4      	bls.n	800505e <_printf_i+0x11a>
 8005074:	2b08      	cmp	r3, #8
 8005076:	d10b      	bne.n	8005090 <_printf_i+0x14c>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	07df      	lsls	r7, r3, #31
 800507c:	d508      	bpl.n	8005090 <_printf_i+0x14c>
 800507e:	6923      	ldr	r3, [r4, #16]
 8005080:	6861      	ldr	r1, [r4, #4]
 8005082:	4299      	cmp	r1, r3
 8005084:	bfde      	ittt	le
 8005086:	2330      	movle	r3, #48	; 0x30
 8005088:	f806 3c01 	strble.w	r3, [r6, #-1]
 800508c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005090:	1b92      	subs	r2, r2, r6
 8005092:	6122      	str	r2, [r4, #16]
 8005094:	f8cd a000 	str.w	sl, [sp]
 8005098:	464b      	mov	r3, r9
 800509a:	aa03      	add	r2, sp, #12
 800509c:	4621      	mov	r1, r4
 800509e:	4640      	mov	r0, r8
 80050a0:	f7ff fee2 	bl	8004e68 <_printf_common>
 80050a4:	3001      	adds	r0, #1
 80050a6:	d14c      	bne.n	8005142 <_printf_i+0x1fe>
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050ac:	b004      	add	sp, #16
 80050ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b2:	4835      	ldr	r0, [pc, #212]	; (8005188 <_printf_i+0x244>)
 80050b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	680e      	ldr	r6, [r1, #0]
 80050bc:	061f      	lsls	r7, r3, #24
 80050be:	f856 5b04 	ldr.w	r5, [r6], #4
 80050c2:	600e      	str	r6, [r1, #0]
 80050c4:	d514      	bpl.n	80050f0 <_printf_i+0x1ac>
 80050c6:	07d9      	lsls	r1, r3, #31
 80050c8:	bf44      	itt	mi
 80050ca:	f043 0320 	orrmi.w	r3, r3, #32
 80050ce:	6023      	strmi	r3, [r4, #0]
 80050d0:	b91d      	cbnz	r5, 80050da <_printf_i+0x196>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	f023 0320 	bic.w	r3, r3, #32
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	2310      	movs	r3, #16
 80050dc:	e7b0      	b.n	8005040 <_printf_i+0xfc>
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	f043 0320 	orr.w	r3, r3, #32
 80050e4:	6023      	str	r3, [r4, #0]
 80050e6:	2378      	movs	r3, #120	; 0x78
 80050e8:	4828      	ldr	r0, [pc, #160]	; (800518c <_printf_i+0x248>)
 80050ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050ee:	e7e3      	b.n	80050b8 <_printf_i+0x174>
 80050f0:	065e      	lsls	r6, r3, #25
 80050f2:	bf48      	it	mi
 80050f4:	b2ad      	uxthmi	r5, r5
 80050f6:	e7e6      	b.n	80050c6 <_printf_i+0x182>
 80050f8:	4616      	mov	r6, r2
 80050fa:	e7bb      	b.n	8005074 <_printf_i+0x130>
 80050fc:	680b      	ldr	r3, [r1, #0]
 80050fe:	6826      	ldr	r6, [r4, #0]
 8005100:	6960      	ldr	r0, [r4, #20]
 8005102:	1d1d      	adds	r5, r3, #4
 8005104:	600d      	str	r5, [r1, #0]
 8005106:	0635      	lsls	r5, r6, #24
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	d501      	bpl.n	8005110 <_printf_i+0x1cc>
 800510c:	6018      	str	r0, [r3, #0]
 800510e:	e002      	b.n	8005116 <_printf_i+0x1d2>
 8005110:	0671      	lsls	r1, r6, #25
 8005112:	d5fb      	bpl.n	800510c <_printf_i+0x1c8>
 8005114:	8018      	strh	r0, [r3, #0]
 8005116:	2300      	movs	r3, #0
 8005118:	6123      	str	r3, [r4, #16]
 800511a:	4616      	mov	r6, r2
 800511c:	e7ba      	b.n	8005094 <_printf_i+0x150>
 800511e:	680b      	ldr	r3, [r1, #0]
 8005120:	1d1a      	adds	r2, r3, #4
 8005122:	600a      	str	r2, [r1, #0]
 8005124:	681e      	ldr	r6, [r3, #0]
 8005126:	6862      	ldr	r2, [r4, #4]
 8005128:	2100      	movs	r1, #0
 800512a:	4630      	mov	r0, r6
 800512c:	f7fb f858 	bl	80001e0 <memchr>
 8005130:	b108      	cbz	r0, 8005136 <_printf_i+0x1f2>
 8005132:	1b80      	subs	r0, r0, r6
 8005134:	6060      	str	r0, [r4, #4]
 8005136:	6863      	ldr	r3, [r4, #4]
 8005138:	6123      	str	r3, [r4, #16]
 800513a:	2300      	movs	r3, #0
 800513c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005140:	e7a8      	b.n	8005094 <_printf_i+0x150>
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	4632      	mov	r2, r6
 8005146:	4649      	mov	r1, r9
 8005148:	4640      	mov	r0, r8
 800514a:	47d0      	blx	sl
 800514c:	3001      	adds	r0, #1
 800514e:	d0ab      	beq.n	80050a8 <_printf_i+0x164>
 8005150:	6823      	ldr	r3, [r4, #0]
 8005152:	079b      	lsls	r3, r3, #30
 8005154:	d413      	bmi.n	800517e <_printf_i+0x23a>
 8005156:	68e0      	ldr	r0, [r4, #12]
 8005158:	9b03      	ldr	r3, [sp, #12]
 800515a:	4298      	cmp	r0, r3
 800515c:	bfb8      	it	lt
 800515e:	4618      	movlt	r0, r3
 8005160:	e7a4      	b.n	80050ac <_printf_i+0x168>
 8005162:	2301      	movs	r3, #1
 8005164:	4632      	mov	r2, r6
 8005166:	4649      	mov	r1, r9
 8005168:	4640      	mov	r0, r8
 800516a:	47d0      	blx	sl
 800516c:	3001      	adds	r0, #1
 800516e:	d09b      	beq.n	80050a8 <_printf_i+0x164>
 8005170:	3501      	adds	r5, #1
 8005172:	68e3      	ldr	r3, [r4, #12]
 8005174:	9903      	ldr	r1, [sp, #12]
 8005176:	1a5b      	subs	r3, r3, r1
 8005178:	42ab      	cmp	r3, r5
 800517a:	dcf2      	bgt.n	8005162 <_printf_i+0x21e>
 800517c:	e7eb      	b.n	8005156 <_printf_i+0x212>
 800517e:	2500      	movs	r5, #0
 8005180:	f104 0619 	add.w	r6, r4, #25
 8005184:	e7f5      	b.n	8005172 <_printf_i+0x22e>
 8005186:	bf00      	nop
 8005188:	0800768e 	.word	0x0800768e
 800518c:	0800769f 	.word	0x0800769f

08005190 <siprintf>:
 8005190:	b40e      	push	{r1, r2, r3}
 8005192:	b500      	push	{lr}
 8005194:	b09c      	sub	sp, #112	; 0x70
 8005196:	ab1d      	add	r3, sp, #116	; 0x74
 8005198:	9002      	str	r0, [sp, #8]
 800519a:	9006      	str	r0, [sp, #24]
 800519c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051a0:	4809      	ldr	r0, [pc, #36]	; (80051c8 <siprintf+0x38>)
 80051a2:	9107      	str	r1, [sp, #28]
 80051a4:	9104      	str	r1, [sp, #16]
 80051a6:	4909      	ldr	r1, [pc, #36]	; (80051cc <siprintf+0x3c>)
 80051a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80051ac:	9105      	str	r1, [sp, #20]
 80051ae:	6800      	ldr	r0, [r0, #0]
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	a902      	add	r1, sp, #8
 80051b4:	f001 fb32 	bl	800681c <_svfiprintf_r>
 80051b8:	9b02      	ldr	r3, [sp, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
 80051be:	b01c      	add	sp, #112	; 0x70
 80051c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80051c4:	b003      	add	sp, #12
 80051c6:	4770      	bx	lr
 80051c8:	20000028 	.word	0x20000028
 80051cc:	ffff0208 	.word	0xffff0208

080051d0 <quorem>:
 80051d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d4:	6903      	ldr	r3, [r0, #16]
 80051d6:	690c      	ldr	r4, [r1, #16]
 80051d8:	42a3      	cmp	r3, r4
 80051da:	4607      	mov	r7, r0
 80051dc:	f2c0 8081 	blt.w	80052e2 <quorem+0x112>
 80051e0:	3c01      	subs	r4, #1
 80051e2:	f101 0814 	add.w	r8, r1, #20
 80051e6:	f100 0514 	add.w	r5, r0, #20
 80051ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051f8:	3301      	adds	r3, #1
 80051fa:	429a      	cmp	r2, r3
 80051fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005200:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005204:	fbb2 f6f3 	udiv	r6, r2, r3
 8005208:	d331      	bcc.n	800526e <quorem+0x9e>
 800520a:	f04f 0e00 	mov.w	lr, #0
 800520e:	4640      	mov	r0, r8
 8005210:	46ac      	mov	ip, r5
 8005212:	46f2      	mov	sl, lr
 8005214:	f850 2b04 	ldr.w	r2, [r0], #4
 8005218:	b293      	uxth	r3, r2
 800521a:	fb06 e303 	mla	r3, r6, r3, lr
 800521e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005222:	b29b      	uxth	r3, r3
 8005224:	ebaa 0303 	sub.w	r3, sl, r3
 8005228:	0c12      	lsrs	r2, r2, #16
 800522a:	f8dc a000 	ldr.w	sl, [ip]
 800522e:	fb06 e202 	mla	r2, r6, r2, lr
 8005232:	fa13 f38a 	uxtah	r3, r3, sl
 8005236:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800523a:	fa1f fa82 	uxth.w	sl, r2
 800523e:	f8dc 2000 	ldr.w	r2, [ip]
 8005242:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005246:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800524a:	b29b      	uxth	r3, r3
 800524c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005250:	4581      	cmp	r9, r0
 8005252:	f84c 3b04 	str.w	r3, [ip], #4
 8005256:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800525a:	d2db      	bcs.n	8005214 <quorem+0x44>
 800525c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005260:	b92b      	cbnz	r3, 800526e <quorem+0x9e>
 8005262:	9b01      	ldr	r3, [sp, #4]
 8005264:	3b04      	subs	r3, #4
 8005266:	429d      	cmp	r5, r3
 8005268:	461a      	mov	r2, r3
 800526a:	d32e      	bcc.n	80052ca <quorem+0xfa>
 800526c:	613c      	str	r4, [r7, #16]
 800526e:	4638      	mov	r0, r7
 8005270:	f001 f8be 	bl	80063f0 <__mcmp>
 8005274:	2800      	cmp	r0, #0
 8005276:	db24      	blt.n	80052c2 <quorem+0xf2>
 8005278:	3601      	adds	r6, #1
 800527a:	4628      	mov	r0, r5
 800527c:	f04f 0c00 	mov.w	ip, #0
 8005280:	f858 2b04 	ldr.w	r2, [r8], #4
 8005284:	f8d0 e000 	ldr.w	lr, [r0]
 8005288:	b293      	uxth	r3, r2
 800528a:	ebac 0303 	sub.w	r3, ip, r3
 800528e:	0c12      	lsrs	r2, r2, #16
 8005290:	fa13 f38e 	uxtah	r3, r3, lr
 8005294:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800529c:	b29b      	uxth	r3, r3
 800529e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052a2:	45c1      	cmp	r9, r8
 80052a4:	f840 3b04 	str.w	r3, [r0], #4
 80052a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80052ac:	d2e8      	bcs.n	8005280 <quorem+0xb0>
 80052ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052b6:	b922      	cbnz	r2, 80052c2 <quorem+0xf2>
 80052b8:	3b04      	subs	r3, #4
 80052ba:	429d      	cmp	r5, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	d30a      	bcc.n	80052d6 <quorem+0x106>
 80052c0:	613c      	str	r4, [r7, #16]
 80052c2:	4630      	mov	r0, r6
 80052c4:	b003      	add	sp, #12
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	3b04      	subs	r3, #4
 80052ce:	2a00      	cmp	r2, #0
 80052d0:	d1cc      	bne.n	800526c <quorem+0x9c>
 80052d2:	3c01      	subs	r4, #1
 80052d4:	e7c7      	b.n	8005266 <quorem+0x96>
 80052d6:	6812      	ldr	r2, [r2, #0]
 80052d8:	3b04      	subs	r3, #4
 80052da:	2a00      	cmp	r2, #0
 80052dc:	d1f0      	bne.n	80052c0 <quorem+0xf0>
 80052de:	3c01      	subs	r4, #1
 80052e0:	e7eb      	b.n	80052ba <quorem+0xea>
 80052e2:	2000      	movs	r0, #0
 80052e4:	e7ee      	b.n	80052c4 <quorem+0xf4>
	...

080052e8 <_dtoa_r>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	ed2d 8b02 	vpush	{d8}
 80052f0:	ec57 6b10 	vmov	r6, r7, d0
 80052f4:	b095      	sub	sp, #84	; 0x54
 80052f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80052f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052fc:	9105      	str	r1, [sp, #20]
 80052fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005302:	4604      	mov	r4, r0
 8005304:	9209      	str	r2, [sp, #36]	; 0x24
 8005306:	930f      	str	r3, [sp, #60]	; 0x3c
 8005308:	b975      	cbnz	r5, 8005328 <_dtoa_r+0x40>
 800530a:	2010      	movs	r0, #16
 800530c:	f000 fddc 	bl	8005ec8 <malloc>
 8005310:	4602      	mov	r2, r0
 8005312:	6260      	str	r0, [r4, #36]	; 0x24
 8005314:	b920      	cbnz	r0, 8005320 <_dtoa_r+0x38>
 8005316:	4bb2      	ldr	r3, [pc, #712]	; (80055e0 <_dtoa_r+0x2f8>)
 8005318:	21ea      	movs	r1, #234	; 0xea
 800531a:	48b2      	ldr	r0, [pc, #712]	; (80055e4 <_dtoa_r+0x2fc>)
 800531c:	f001 fb8e 	bl	8006a3c <__assert_func>
 8005320:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005324:	6005      	str	r5, [r0, #0]
 8005326:	60c5      	str	r5, [r0, #12]
 8005328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800532a:	6819      	ldr	r1, [r3, #0]
 800532c:	b151      	cbz	r1, 8005344 <_dtoa_r+0x5c>
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	604a      	str	r2, [r1, #4]
 8005332:	2301      	movs	r3, #1
 8005334:	4093      	lsls	r3, r2
 8005336:	608b      	str	r3, [r1, #8]
 8005338:	4620      	mov	r0, r4
 800533a:	f000 fe1b 	bl	8005f74 <_Bfree>
 800533e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	1e3b      	subs	r3, r7, #0
 8005346:	bfb9      	ittee	lt
 8005348:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800534c:	9303      	strlt	r3, [sp, #12]
 800534e:	2300      	movge	r3, #0
 8005350:	f8c8 3000 	strge.w	r3, [r8]
 8005354:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005358:	4ba3      	ldr	r3, [pc, #652]	; (80055e8 <_dtoa_r+0x300>)
 800535a:	bfbc      	itt	lt
 800535c:	2201      	movlt	r2, #1
 800535e:	f8c8 2000 	strlt.w	r2, [r8]
 8005362:	ea33 0309 	bics.w	r3, r3, r9
 8005366:	d11b      	bne.n	80053a0 <_dtoa_r+0xb8>
 8005368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800536a:	f242 730f 	movw	r3, #9999	; 0x270f
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005374:	4333      	orrs	r3, r6
 8005376:	f000 857a 	beq.w	8005e6e <_dtoa_r+0xb86>
 800537a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800537c:	b963      	cbnz	r3, 8005398 <_dtoa_r+0xb0>
 800537e:	4b9b      	ldr	r3, [pc, #620]	; (80055ec <_dtoa_r+0x304>)
 8005380:	e024      	b.n	80053cc <_dtoa_r+0xe4>
 8005382:	4b9b      	ldr	r3, [pc, #620]	; (80055f0 <_dtoa_r+0x308>)
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	9800      	ldr	r0, [sp, #0]
 800538e:	b015      	add	sp, #84	; 0x54
 8005390:	ecbd 8b02 	vpop	{d8}
 8005394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005398:	4b94      	ldr	r3, [pc, #592]	; (80055ec <_dtoa_r+0x304>)
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	3303      	adds	r3, #3
 800539e:	e7f3      	b.n	8005388 <_dtoa_r+0xa0>
 80053a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053a4:	2200      	movs	r2, #0
 80053a6:	ec51 0b17 	vmov	r0, r1, d7
 80053aa:	2300      	movs	r3, #0
 80053ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80053b0:	f7fb fb8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80053b4:	4680      	mov	r8, r0
 80053b6:	b158      	cbz	r0, 80053d0 <_dtoa_r+0xe8>
 80053b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053ba:	2301      	movs	r3, #1
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8551 	beq.w	8005e68 <_dtoa_r+0xb80>
 80053c6:	488b      	ldr	r0, [pc, #556]	; (80055f4 <_dtoa_r+0x30c>)
 80053c8:	6018      	str	r0, [r3, #0]
 80053ca:	1e43      	subs	r3, r0, #1
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	e7dd      	b.n	800538c <_dtoa_r+0xa4>
 80053d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80053d4:	aa12      	add	r2, sp, #72	; 0x48
 80053d6:	a913      	add	r1, sp, #76	; 0x4c
 80053d8:	4620      	mov	r0, r4
 80053da:	f001 f8ad 	bl	8006538 <__d2b>
 80053de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80053e2:	4683      	mov	fp, r0
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	d07c      	beq.n	80054e2 <_dtoa_r+0x1fa>
 80053e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80053ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80053f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80053fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80053fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005402:	4b7d      	ldr	r3, [pc, #500]	; (80055f8 <_dtoa_r+0x310>)
 8005404:	2200      	movs	r2, #0
 8005406:	4630      	mov	r0, r6
 8005408:	4639      	mov	r1, r7
 800540a:	f7fa ff3d 	bl	8000288 <__aeabi_dsub>
 800540e:	a36e      	add	r3, pc, #440	; (adr r3, 80055c8 <_dtoa_r+0x2e0>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f7fb f8f0 	bl	80005f8 <__aeabi_dmul>
 8005418:	a36d      	add	r3, pc, #436	; (adr r3, 80055d0 <_dtoa_r+0x2e8>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fa ff35 	bl	800028c <__adddf3>
 8005422:	4606      	mov	r6, r0
 8005424:	4628      	mov	r0, r5
 8005426:	460f      	mov	r7, r1
 8005428:	f7fb f87c 	bl	8000524 <__aeabi_i2d>
 800542c:	a36a      	add	r3, pc, #424	; (adr r3, 80055d8 <_dtoa_r+0x2f0>)
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f7fb f8e1 	bl	80005f8 <__aeabi_dmul>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4630      	mov	r0, r6
 800543c:	4639      	mov	r1, r7
 800543e:	f7fa ff25 	bl	800028c <__adddf3>
 8005442:	4606      	mov	r6, r0
 8005444:	460f      	mov	r7, r1
 8005446:	f7fb fb87 	bl	8000b58 <__aeabi_d2iz>
 800544a:	2200      	movs	r2, #0
 800544c:	4682      	mov	sl, r0
 800544e:	2300      	movs	r3, #0
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fb fb42 	bl	8000adc <__aeabi_dcmplt>
 8005458:	b148      	cbz	r0, 800546e <_dtoa_r+0x186>
 800545a:	4650      	mov	r0, sl
 800545c:	f7fb f862 	bl	8000524 <__aeabi_i2d>
 8005460:	4632      	mov	r2, r6
 8005462:	463b      	mov	r3, r7
 8005464:	f7fb fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 8005468:	b908      	cbnz	r0, 800546e <_dtoa_r+0x186>
 800546a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800546e:	f1ba 0f16 	cmp.w	sl, #22
 8005472:	d854      	bhi.n	800551e <_dtoa_r+0x236>
 8005474:	4b61      	ldr	r3, [pc, #388]	; (80055fc <_dtoa_r+0x314>)
 8005476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005482:	f7fb fb2b 	bl	8000adc <__aeabi_dcmplt>
 8005486:	2800      	cmp	r0, #0
 8005488:	d04b      	beq.n	8005522 <_dtoa_r+0x23a>
 800548a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800548e:	2300      	movs	r3, #0
 8005490:	930e      	str	r3, [sp, #56]	; 0x38
 8005492:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005494:	1b5d      	subs	r5, r3, r5
 8005496:	1e6b      	subs	r3, r5, #1
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	bf43      	ittte	mi
 800549c:	2300      	movmi	r3, #0
 800549e:	f1c5 0801 	rsbmi	r8, r5, #1
 80054a2:	9304      	strmi	r3, [sp, #16]
 80054a4:	f04f 0800 	movpl.w	r8, #0
 80054a8:	f1ba 0f00 	cmp.w	sl, #0
 80054ac:	db3b      	blt.n	8005526 <_dtoa_r+0x23e>
 80054ae:	9b04      	ldr	r3, [sp, #16]
 80054b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80054b4:	4453      	add	r3, sl
 80054b6:	9304      	str	r3, [sp, #16]
 80054b8:	2300      	movs	r3, #0
 80054ba:	9306      	str	r3, [sp, #24]
 80054bc:	9b05      	ldr	r3, [sp, #20]
 80054be:	2b09      	cmp	r3, #9
 80054c0:	d869      	bhi.n	8005596 <_dtoa_r+0x2ae>
 80054c2:	2b05      	cmp	r3, #5
 80054c4:	bfc4      	itt	gt
 80054c6:	3b04      	subgt	r3, #4
 80054c8:	9305      	strgt	r3, [sp, #20]
 80054ca:	9b05      	ldr	r3, [sp, #20]
 80054cc:	f1a3 0302 	sub.w	r3, r3, #2
 80054d0:	bfcc      	ite	gt
 80054d2:	2500      	movgt	r5, #0
 80054d4:	2501      	movle	r5, #1
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d869      	bhi.n	80055ae <_dtoa_r+0x2c6>
 80054da:	e8df f003 	tbb	[pc, r3]
 80054de:	4e2c      	.short	0x4e2c
 80054e0:	5a4c      	.short	0x5a4c
 80054e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80054e6:	441d      	add	r5, r3
 80054e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	bfc1      	itttt	gt
 80054f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80054f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80054fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005500:	bfda      	itte	le
 8005502:	f1c3 0320 	rsble	r3, r3, #32
 8005506:	fa06 f003 	lslle.w	r0, r6, r3
 800550a:	4318      	orrgt	r0, r3
 800550c:	f7fa fffa 	bl	8000504 <__aeabi_ui2d>
 8005510:	2301      	movs	r3, #1
 8005512:	4606      	mov	r6, r0
 8005514:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005518:	3d01      	subs	r5, #1
 800551a:	9310      	str	r3, [sp, #64]	; 0x40
 800551c:	e771      	b.n	8005402 <_dtoa_r+0x11a>
 800551e:	2301      	movs	r3, #1
 8005520:	e7b6      	b.n	8005490 <_dtoa_r+0x1a8>
 8005522:	900e      	str	r0, [sp, #56]	; 0x38
 8005524:	e7b5      	b.n	8005492 <_dtoa_r+0x1aa>
 8005526:	f1ca 0300 	rsb	r3, sl, #0
 800552a:	9306      	str	r3, [sp, #24]
 800552c:	2300      	movs	r3, #0
 800552e:	eba8 080a 	sub.w	r8, r8, sl
 8005532:	930d      	str	r3, [sp, #52]	; 0x34
 8005534:	e7c2      	b.n	80054bc <_dtoa_r+0x1d4>
 8005536:	2300      	movs	r3, #0
 8005538:	9308      	str	r3, [sp, #32]
 800553a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	dc39      	bgt.n	80055b4 <_dtoa_r+0x2cc>
 8005540:	f04f 0901 	mov.w	r9, #1
 8005544:	f8cd 9004 	str.w	r9, [sp, #4]
 8005548:	464b      	mov	r3, r9
 800554a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800554e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005550:	2200      	movs	r2, #0
 8005552:	6042      	str	r2, [r0, #4]
 8005554:	2204      	movs	r2, #4
 8005556:	f102 0614 	add.w	r6, r2, #20
 800555a:	429e      	cmp	r6, r3
 800555c:	6841      	ldr	r1, [r0, #4]
 800555e:	d92f      	bls.n	80055c0 <_dtoa_r+0x2d8>
 8005560:	4620      	mov	r0, r4
 8005562:	f000 fcc7 	bl	8005ef4 <_Balloc>
 8005566:	9000      	str	r0, [sp, #0]
 8005568:	2800      	cmp	r0, #0
 800556a:	d14b      	bne.n	8005604 <_dtoa_r+0x31c>
 800556c:	4b24      	ldr	r3, [pc, #144]	; (8005600 <_dtoa_r+0x318>)
 800556e:	4602      	mov	r2, r0
 8005570:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005574:	e6d1      	b.n	800531a <_dtoa_r+0x32>
 8005576:	2301      	movs	r3, #1
 8005578:	e7de      	b.n	8005538 <_dtoa_r+0x250>
 800557a:	2300      	movs	r3, #0
 800557c:	9308      	str	r3, [sp, #32]
 800557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005580:	eb0a 0903 	add.w	r9, sl, r3
 8005584:	f109 0301 	add.w	r3, r9, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	bfb8      	it	lt
 800558e:	2301      	movlt	r3, #1
 8005590:	e7dd      	b.n	800554e <_dtoa_r+0x266>
 8005592:	2301      	movs	r3, #1
 8005594:	e7f2      	b.n	800557c <_dtoa_r+0x294>
 8005596:	2501      	movs	r5, #1
 8005598:	2300      	movs	r3, #0
 800559a:	9305      	str	r3, [sp, #20]
 800559c:	9508      	str	r5, [sp, #32]
 800559e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80055a8:	2312      	movs	r3, #18
 80055aa:	9209      	str	r2, [sp, #36]	; 0x24
 80055ac:	e7cf      	b.n	800554e <_dtoa_r+0x266>
 80055ae:	2301      	movs	r3, #1
 80055b0:	9308      	str	r3, [sp, #32]
 80055b2:	e7f4      	b.n	800559e <_dtoa_r+0x2b6>
 80055b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80055b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80055bc:	464b      	mov	r3, r9
 80055be:	e7c6      	b.n	800554e <_dtoa_r+0x266>
 80055c0:	3101      	adds	r1, #1
 80055c2:	6041      	str	r1, [r0, #4]
 80055c4:	0052      	lsls	r2, r2, #1
 80055c6:	e7c6      	b.n	8005556 <_dtoa_r+0x26e>
 80055c8:	636f4361 	.word	0x636f4361
 80055cc:	3fd287a7 	.word	0x3fd287a7
 80055d0:	8b60c8b3 	.word	0x8b60c8b3
 80055d4:	3fc68a28 	.word	0x3fc68a28
 80055d8:	509f79fb 	.word	0x509f79fb
 80055dc:	3fd34413 	.word	0x3fd34413
 80055e0:	080076bd 	.word	0x080076bd
 80055e4:	080076d4 	.word	0x080076d4
 80055e8:	7ff00000 	.word	0x7ff00000
 80055ec:	080076b9 	.word	0x080076b9
 80055f0:	080076b0 	.word	0x080076b0
 80055f4:	0800768d 	.word	0x0800768d
 80055f8:	3ff80000 	.word	0x3ff80000
 80055fc:	080077d0 	.word	0x080077d0
 8005600:	08007733 	.word	0x08007733
 8005604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005606:	9a00      	ldr	r2, [sp, #0]
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	9b01      	ldr	r3, [sp, #4]
 800560c:	2b0e      	cmp	r3, #14
 800560e:	f200 80ad 	bhi.w	800576c <_dtoa_r+0x484>
 8005612:	2d00      	cmp	r5, #0
 8005614:	f000 80aa 	beq.w	800576c <_dtoa_r+0x484>
 8005618:	f1ba 0f00 	cmp.w	sl, #0
 800561c:	dd36      	ble.n	800568c <_dtoa_r+0x3a4>
 800561e:	4ac3      	ldr	r2, [pc, #780]	; (800592c <_dtoa_r+0x644>)
 8005620:	f00a 030f 	and.w	r3, sl, #15
 8005624:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005628:	ed93 7b00 	vldr	d7, [r3]
 800562c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005630:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005634:	eeb0 8a47 	vmov.f32	s16, s14
 8005638:	eef0 8a67 	vmov.f32	s17, s15
 800563c:	d016      	beq.n	800566c <_dtoa_r+0x384>
 800563e:	4bbc      	ldr	r3, [pc, #752]	; (8005930 <_dtoa_r+0x648>)
 8005640:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005644:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005648:	f7fb f900 	bl	800084c <__aeabi_ddiv>
 800564c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005650:	f007 070f 	and.w	r7, r7, #15
 8005654:	2503      	movs	r5, #3
 8005656:	4eb6      	ldr	r6, [pc, #728]	; (8005930 <_dtoa_r+0x648>)
 8005658:	b957      	cbnz	r7, 8005670 <_dtoa_r+0x388>
 800565a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800565e:	ec53 2b18 	vmov	r2, r3, d8
 8005662:	f7fb f8f3 	bl	800084c <__aeabi_ddiv>
 8005666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800566a:	e029      	b.n	80056c0 <_dtoa_r+0x3d8>
 800566c:	2502      	movs	r5, #2
 800566e:	e7f2      	b.n	8005656 <_dtoa_r+0x36e>
 8005670:	07f9      	lsls	r1, r7, #31
 8005672:	d508      	bpl.n	8005686 <_dtoa_r+0x39e>
 8005674:	ec51 0b18 	vmov	r0, r1, d8
 8005678:	e9d6 2300 	ldrd	r2, r3, [r6]
 800567c:	f7fa ffbc 	bl	80005f8 <__aeabi_dmul>
 8005680:	ec41 0b18 	vmov	d8, r0, r1
 8005684:	3501      	adds	r5, #1
 8005686:	107f      	asrs	r7, r7, #1
 8005688:	3608      	adds	r6, #8
 800568a:	e7e5      	b.n	8005658 <_dtoa_r+0x370>
 800568c:	f000 80a6 	beq.w	80057dc <_dtoa_r+0x4f4>
 8005690:	f1ca 0600 	rsb	r6, sl, #0
 8005694:	4ba5      	ldr	r3, [pc, #660]	; (800592c <_dtoa_r+0x644>)
 8005696:	4fa6      	ldr	r7, [pc, #664]	; (8005930 <_dtoa_r+0x648>)
 8005698:	f006 020f 	and.w	r2, r6, #15
 800569c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056a8:	f7fa ffa6 	bl	80005f8 <__aeabi_dmul>
 80056ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b0:	1136      	asrs	r6, r6, #4
 80056b2:	2300      	movs	r3, #0
 80056b4:	2502      	movs	r5, #2
 80056b6:	2e00      	cmp	r6, #0
 80056b8:	f040 8085 	bne.w	80057c6 <_dtoa_r+0x4de>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1d2      	bne.n	8005666 <_dtoa_r+0x37e>
 80056c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 808c 	beq.w	80057e0 <_dtoa_r+0x4f8>
 80056c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056cc:	4b99      	ldr	r3, [pc, #612]	; (8005934 <_dtoa_r+0x64c>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	4630      	mov	r0, r6
 80056d2:	4639      	mov	r1, r7
 80056d4:	f7fb fa02 	bl	8000adc <__aeabi_dcmplt>
 80056d8:	2800      	cmp	r0, #0
 80056da:	f000 8081 	beq.w	80057e0 <_dtoa_r+0x4f8>
 80056de:	9b01      	ldr	r3, [sp, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d07d      	beq.n	80057e0 <_dtoa_r+0x4f8>
 80056e4:	f1b9 0f00 	cmp.w	r9, #0
 80056e8:	dd3c      	ble.n	8005764 <_dtoa_r+0x47c>
 80056ea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80056ee:	9307      	str	r3, [sp, #28]
 80056f0:	2200      	movs	r2, #0
 80056f2:	4b91      	ldr	r3, [pc, #580]	; (8005938 <_dtoa_r+0x650>)
 80056f4:	4630      	mov	r0, r6
 80056f6:	4639      	mov	r1, r7
 80056f8:	f7fa ff7e 	bl	80005f8 <__aeabi_dmul>
 80056fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005700:	3501      	adds	r5, #1
 8005702:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005706:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800570a:	4628      	mov	r0, r5
 800570c:	f7fa ff0a 	bl	8000524 <__aeabi_i2d>
 8005710:	4632      	mov	r2, r6
 8005712:	463b      	mov	r3, r7
 8005714:	f7fa ff70 	bl	80005f8 <__aeabi_dmul>
 8005718:	4b88      	ldr	r3, [pc, #544]	; (800593c <_dtoa_r+0x654>)
 800571a:	2200      	movs	r2, #0
 800571c:	f7fa fdb6 	bl	800028c <__adddf3>
 8005720:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800572c:	2b00      	cmp	r3, #0
 800572e:	d15c      	bne.n	80057ea <_dtoa_r+0x502>
 8005730:	4b83      	ldr	r3, [pc, #524]	; (8005940 <_dtoa_r+0x658>)
 8005732:	2200      	movs	r2, #0
 8005734:	4630      	mov	r0, r6
 8005736:	4639      	mov	r1, r7
 8005738:	f7fa fda6 	bl	8000288 <__aeabi_dsub>
 800573c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005740:	4606      	mov	r6, r0
 8005742:	460f      	mov	r7, r1
 8005744:	f7fb f9e8 	bl	8000b18 <__aeabi_dcmpgt>
 8005748:	2800      	cmp	r0, #0
 800574a:	f040 8296 	bne.w	8005c7a <_dtoa_r+0x992>
 800574e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005752:	4630      	mov	r0, r6
 8005754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005758:	4639      	mov	r1, r7
 800575a:	f7fb f9bf 	bl	8000adc <__aeabi_dcmplt>
 800575e:	2800      	cmp	r0, #0
 8005760:	f040 8288 	bne.w	8005c74 <_dtoa_r+0x98c>
 8005764:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005768:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800576c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800576e:	2b00      	cmp	r3, #0
 8005770:	f2c0 8158 	blt.w	8005a24 <_dtoa_r+0x73c>
 8005774:	f1ba 0f0e 	cmp.w	sl, #14
 8005778:	f300 8154 	bgt.w	8005a24 <_dtoa_r+0x73c>
 800577c:	4b6b      	ldr	r3, [pc, #428]	; (800592c <_dtoa_r+0x644>)
 800577e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005782:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	f280 80e3 	bge.w	8005954 <_dtoa_r+0x66c>
 800578e:	9b01      	ldr	r3, [sp, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f300 80df 	bgt.w	8005954 <_dtoa_r+0x66c>
 8005796:	f040 826d 	bne.w	8005c74 <_dtoa_r+0x98c>
 800579a:	4b69      	ldr	r3, [pc, #420]	; (8005940 <_dtoa_r+0x658>)
 800579c:	2200      	movs	r2, #0
 800579e:	4640      	mov	r0, r8
 80057a0:	4649      	mov	r1, r9
 80057a2:	f7fa ff29 	bl	80005f8 <__aeabi_dmul>
 80057a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057aa:	f7fb f9ab 	bl	8000b04 <__aeabi_dcmpge>
 80057ae:	9e01      	ldr	r6, [sp, #4]
 80057b0:	4637      	mov	r7, r6
 80057b2:	2800      	cmp	r0, #0
 80057b4:	f040 8243 	bne.w	8005c3e <_dtoa_r+0x956>
 80057b8:	9d00      	ldr	r5, [sp, #0]
 80057ba:	2331      	movs	r3, #49	; 0x31
 80057bc:	f805 3b01 	strb.w	r3, [r5], #1
 80057c0:	f10a 0a01 	add.w	sl, sl, #1
 80057c4:	e23f      	b.n	8005c46 <_dtoa_r+0x95e>
 80057c6:	07f2      	lsls	r2, r6, #31
 80057c8:	d505      	bpl.n	80057d6 <_dtoa_r+0x4ee>
 80057ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ce:	f7fa ff13 	bl	80005f8 <__aeabi_dmul>
 80057d2:	3501      	adds	r5, #1
 80057d4:	2301      	movs	r3, #1
 80057d6:	1076      	asrs	r6, r6, #1
 80057d8:	3708      	adds	r7, #8
 80057da:	e76c      	b.n	80056b6 <_dtoa_r+0x3ce>
 80057dc:	2502      	movs	r5, #2
 80057de:	e76f      	b.n	80056c0 <_dtoa_r+0x3d8>
 80057e0:	9b01      	ldr	r3, [sp, #4]
 80057e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80057e6:	930c      	str	r3, [sp, #48]	; 0x30
 80057e8:	e78d      	b.n	8005706 <_dtoa_r+0x41e>
 80057ea:	9900      	ldr	r1, [sp, #0]
 80057ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80057ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057f0:	4b4e      	ldr	r3, [pc, #312]	; (800592c <_dtoa_r+0x644>)
 80057f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057f6:	4401      	add	r1, r0
 80057f8:	9102      	str	r1, [sp, #8]
 80057fa:	9908      	ldr	r1, [sp, #32]
 80057fc:	eeb0 8a47 	vmov.f32	s16, s14
 8005800:	eef0 8a67 	vmov.f32	s17, s15
 8005804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005808:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800580c:	2900      	cmp	r1, #0
 800580e:	d045      	beq.n	800589c <_dtoa_r+0x5b4>
 8005810:	494c      	ldr	r1, [pc, #304]	; (8005944 <_dtoa_r+0x65c>)
 8005812:	2000      	movs	r0, #0
 8005814:	f7fb f81a 	bl	800084c <__aeabi_ddiv>
 8005818:	ec53 2b18 	vmov	r2, r3, d8
 800581c:	f7fa fd34 	bl	8000288 <__aeabi_dsub>
 8005820:	9d00      	ldr	r5, [sp, #0]
 8005822:	ec41 0b18 	vmov	d8, r0, r1
 8005826:	4639      	mov	r1, r7
 8005828:	4630      	mov	r0, r6
 800582a:	f7fb f995 	bl	8000b58 <__aeabi_d2iz>
 800582e:	900c      	str	r0, [sp, #48]	; 0x30
 8005830:	f7fa fe78 	bl	8000524 <__aeabi_i2d>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4630      	mov	r0, r6
 800583a:	4639      	mov	r1, r7
 800583c:	f7fa fd24 	bl	8000288 <__aeabi_dsub>
 8005840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005842:	3330      	adds	r3, #48	; 0x30
 8005844:	f805 3b01 	strb.w	r3, [r5], #1
 8005848:	ec53 2b18 	vmov	r2, r3, d8
 800584c:	4606      	mov	r6, r0
 800584e:	460f      	mov	r7, r1
 8005850:	f7fb f944 	bl	8000adc <__aeabi_dcmplt>
 8005854:	2800      	cmp	r0, #0
 8005856:	d165      	bne.n	8005924 <_dtoa_r+0x63c>
 8005858:	4632      	mov	r2, r6
 800585a:	463b      	mov	r3, r7
 800585c:	4935      	ldr	r1, [pc, #212]	; (8005934 <_dtoa_r+0x64c>)
 800585e:	2000      	movs	r0, #0
 8005860:	f7fa fd12 	bl	8000288 <__aeabi_dsub>
 8005864:	ec53 2b18 	vmov	r2, r3, d8
 8005868:	f7fb f938 	bl	8000adc <__aeabi_dcmplt>
 800586c:	2800      	cmp	r0, #0
 800586e:	f040 80b9 	bne.w	80059e4 <_dtoa_r+0x6fc>
 8005872:	9b02      	ldr	r3, [sp, #8]
 8005874:	429d      	cmp	r5, r3
 8005876:	f43f af75 	beq.w	8005764 <_dtoa_r+0x47c>
 800587a:	4b2f      	ldr	r3, [pc, #188]	; (8005938 <_dtoa_r+0x650>)
 800587c:	ec51 0b18 	vmov	r0, r1, d8
 8005880:	2200      	movs	r2, #0
 8005882:	f7fa feb9 	bl	80005f8 <__aeabi_dmul>
 8005886:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <_dtoa_r+0x650>)
 8005888:	ec41 0b18 	vmov	d8, r0, r1
 800588c:	2200      	movs	r2, #0
 800588e:	4630      	mov	r0, r6
 8005890:	4639      	mov	r1, r7
 8005892:	f7fa feb1 	bl	80005f8 <__aeabi_dmul>
 8005896:	4606      	mov	r6, r0
 8005898:	460f      	mov	r7, r1
 800589a:	e7c4      	b.n	8005826 <_dtoa_r+0x53e>
 800589c:	ec51 0b17 	vmov	r0, r1, d7
 80058a0:	f7fa feaa 	bl	80005f8 <__aeabi_dmul>
 80058a4:	9b02      	ldr	r3, [sp, #8]
 80058a6:	9d00      	ldr	r5, [sp, #0]
 80058a8:	930c      	str	r3, [sp, #48]	; 0x30
 80058aa:	ec41 0b18 	vmov	d8, r0, r1
 80058ae:	4639      	mov	r1, r7
 80058b0:	4630      	mov	r0, r6
 80058b2:	f7fb f951 	bl	8000b58 <__aeabi_d2iz>
 80058b6:	9011      	str	r0, [sp, #68]	; 0x44
 80058b8:	f7fa fe34 	bl	8000524 <__aeabi_i2d>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4630      	mov	r0, r6
 80058c2:	4639      	mov	r1, r7
 80058c4:	f7fa fce0 	bl	8000288 <__aeabi_dsub>
 80058c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058ca:	3330      	adds	r3, #48	; 0x30
 80058cc:	f805 3b01 	strb.w	r3, [r5], #1
 80058d0:	9b02      	ldr	r3, [sp, #8]
 80058d2:	429d      	cmp	r5, r3
 80058d4:	4606      	mov	r6, r0
 80058d6:	460f      	mov	r7, r1
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	d134      	bne.n	8005948 <_dtoa_r+0x660>
 80058de:	4b19      	ldr	r3, [pc, #100]	; (8005944 <_dtoa_r+0x65c>)
 80058e0:	ec51 0b18 	vmov	r0, r1, d8
 80058e4:	f7fa fcd2 	bl	800028c <__adddf3>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4630      	mov	r0, r6
 80058ee:	4639      	mov	r1, r7
 80058f0:	f7fb f912 	bl	8000b18 <__aeabi_dcmpgt>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d175      	bne.n	80059e4 <_dtoa_r+0x6fc>
 80058f8:	ec53 2b18 	vmov	r2, r3, d8
 80058fc:	4911      	ldr	r1, [pc, #68]	; (8005944 <_dtoa_r+0x65c>)
 80058fe:	2000      	movs	r0, #0
 8005900:	f7fa fcc2 	bl	8000288 <__aeabi_dsub>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4630      	mov	r0, r6
 800590a:	4639      	mov	r1, r7
 800590c:	f7fb f8e6 	bl	8000adc <__aeabi_dcmplt>
 8005910:	2800      	cmp	r0, #0
 8005912:	f43f af27 	beq.w	8005764 <_dtoa_r+0x47c>
 8005916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005918:	1e6b      	subs	r3, r5, #1
 800591a:	930c      	str	r3, [sp, #48]	; 0x30
 800591c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005920:	2b30      	cmp	r3, #48	; 0x30
 8005922:	d0f8      	beq.n	8005916 <_dtoa_r+0x62e>
 8005924:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005928:	e04a      	b.n	80059c0 <_dtoa_r+0x6d8>
 800592a:	bf00      	nop
 800592c:	080077d0 	.word	0x080077d0
 8005930:	080077a8 	.word	0x080077a8
 8005934:	3ff00000 	.word	0x3ff00000
 8005938:	40240000 	.word	0x40240000
 800593c:	401c0000 	.word	0x401c0000
 8005940:	40140000 	.word	0x40140000
 8005944:	3fe00000 	.word	0x3fe00000
 8005948:	4baf      	ldr	r3, [pc, #700]	; (8005c08 <_dtoa_r+0x920>)
 800594a:	f7fa fe55 	bl	80005f8 <__aeabi_dmul>
 800594e:	4606      	mov	r6, r0
 8005950:	460f      	mov	r7, r1
 8005952:	e7ac      	b.n	80058ae <_dtoa_r+0x5c6>
 8005954:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005958:	9d00      	ldr	r5, [sp, #0]
 800595a:	4642      	mov	r2, r8
 800595c:	464b      	mov	r3, r9
 800595e:	4630      	mov	r0, r6
 8005960:	4639      	mov	r1, r7
 8005962:	f7fa ff73 	bl	800084c <__aeabi_ddiv>
 8005966:	f7fb f8f7 	bl	8000b58 <__aeabi_d2iz>
 800596a:	9002      	str	r0, [sp, #8]
 800596c:	f7fa fdda 	bl	8000524 <__aeabi_i2d>
 8005970:	4642      	mov	r2, r8
 8005972:	464b      	mov	r3, r9
 8005974:	f7fa fe40 	bl	80005f8 <__aeabi_dmul>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4630      	mov	r0, r6
 800597e:	4639      	mov	r1, r7
 8005980:	f7fa fc82 	bl	8000288 <__aeabi_dsub>
 8005984:	9e02      	ldr	r6, [sp, #8]
 8005986:	9f01      	ldr	r7, [sp, #4]
 8005988:	3630      	adds	r6, #48	; 0x30
 800598a:	f805 6b01 	strb.w	r6, [r5], #1
 800598e:	9e00      	ldr	r6, [sp, #0]
 8005990:	1bae      	subs	r6, r5, r6
 8005992:	42b7      	cmp	r7, r6
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	d137      	bne.n	8005a0a <_dtoa_r+0x722>
 800599a:	f7fa fc77 	bl	800028c <__adddf3>
 800599e:	4642      	mov	r2, r8
 80059a0:	464b      	mov	r3, r9
 80059a2:	4606      	mov	r6, r0
 80059a4:	460f      	mov	r7, r1
 80059a6:	f7fb f8b7 	bl	8000b18 <__aeabi_dcmpgt>
 80059aa:	b9c8      	cbnz	r0, 80059e0 <_dtoa_r+0x6f8>
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fb f888 	bl	8000ac8 <__aeabi_dcmpeq>
 80059b8:	b110      	cbz	r0, 80059c0 <_dtoa_r+0x6d8>
 80059ba:	9b02      	ldr	r3, [sp, #8]
 80059bc:	07d9      	lsls	r1, r3, #31
 80059be:	d40f      	bmi.n	80059e0 <_dtoa_r+0x6f8>
 80059c0:	4620      	mov	r0, r4
 80059c2:	4659      	mov	r1, fp
 80059c4:	f000 fad6 	bl	8005f74 <_Bfree>
 80059c8:	2300      	movs	r3, #0
 80059ca:	702b      	strb	r3, [r5, #0]
 80059cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059ce:	f10a 0001 	add.w	r0, sl, #1
 80059d2:	6018      	str	r0, [r3, #0]
 80059d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f43f acd8 	beq.w	800538c <_dtoa_r+0xa4>
 80059dc:	601d      	str	r5, [r3, #0]
 80059de:	e4d5      	b.n	800538c <_dtoa_r+0xa4>
 80059e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80059e4:	462b      	mov	r3, r5
 80059e6:	461d      	mov	r5, r3
 80059e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059ec:	2a39      	cmp	r2, #57	; 0x39
 80059ee:	d108      	bne.n	8005a02 <_dtoa_r+0x71a>
 80059f0:	9a00      	ldr	r2, [sp, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d1f7      	bne.n	80059e6 <_dtoa_r+0x6fe>
 80059f6:	9a07      	ldr	r2, [sp, #28]
 80059f8:	9900      	ldr	r1, [sp, #0]
 80059fa:	3201      	adds	r2, #1
 80059fc:	9207      	str	r2, [sp, #28]
 80059fe:	2230      	movs	r2, #48	; 0x30
 8005a00:	700a      	strb	r2, [r1, #0]
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	3201      	adds	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e78c      	b.n	8005924 <_dtoa_r+0x63c>
 8005a0a:	4b7f      	ldr	r3, [pc, #508]	; (8005c08 <_dtoa_r+0x920>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f7fa fdf3 	bl	80005f8 <__aeabi_dmul>
 8005a12:	2200      	movs	r2, #0
 8005a14:	2300      	movs	r3, #0
 8005a16:	4606      	mov	r6, r0
 8005a18:	460f      	mov	r7, r1
 8005a1a:	f7fb f855 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d09b      	beq.n	800595a <_dtoa_r+0x672>
 8005a22:	e7cd      	b.n	80059c0 <_dtoa_r+0x6d8>
 8005a24:	9a08      	ldr	r2, [sp, #32]
 8005a26:	2a00      	cmp	r2, #0
 8005a28:	f000 80c4 	beq.w	8005bb4 <_dtoa_r+0x8cc>
 8005a2c:	9a05      	ldr	r2, [sp, #20]
 8005a2e:	2a01      	cmp	r2, #1
 8005a30:	f300 80a8 	bgt.w	8005b84 <_dtoa_r+0x89c>
 8005a34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	f000 80a0 	beq.w	8005b7c <_dtoa_r+0x894>
 8005a3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a40:	9e06      	ldr	r6, [sp, #24]
 8005a42:	4645      	mov	r5, r8
 8005a44:	9a04      	ldr	r2, [sp, #16]
 8005a46:	2101      	movs	r1, #1
 8005a48:	441a      	add	r2, r3
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	4498      	add	r8, r3
 8005a4e:	9204      	str	r2, [sp, #16]
 8005a50:	f000 fb4c 	bl	80060ec <__i2b>
 8005a54:	4607      	mov	r7, r0
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	dd0b      	ble.n	8005a72 <_dtoa_r+0x78a>
 8005a5a:	9b04      	ldr	r3, [sp, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dd08      	ble.n	8005a72 <_dtoa_r+0x78a>
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	9a04      	ldr	r2, [sp, #16]
 8005a64:	bfa8      	it	ge
 8005a66:	462b      	movge	r3, r5
 8005a68:	eba8 0803 	sub.w	r8, r8, r3
 8005a6c:	1aed      	subs	r5, r5, r3
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	9b06      	ldr	r3, [sp, #24]
 8005a74:	b1fb      	cbz	r3, 8005ab6 <_dtoa_r+0x7ce>
 8005a76:	9b08      	ldr	r3, [sp, #32]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 809f 	beq.w	8005bbc <_dtoa_r+0x8d4>
 8005a7e:	2e00      	cmp	r6, #0
 8005a80:	dd11      	ble.n	8005aa6 <_dtoa_r+0x7be>
 8005a82:	4639      	mov	r1, r7
 8005a84:	4632      	mov	r2, r6
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 fbec 	bl	8006264 <__pow5mult>
 8005a8c:	465a      	mov	r2, fp
 8005a8e:	4601      	mov	r1, r0
 8005a90:	4607      	mov	r7, r0
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 fb40 	bl	8006118 <__multiply>
 8005a98:	4659      	mov	r1, fp
 8005a9a:	9007      	str	r0, [sp, #28]
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 fa69 	bl	8005f74 <_Bfree>
 8005aa2:	9b07      	ldr	r3, [sp, #28]
 8005aa4:	469b      	mov	fp, r3
 8005aa6:	9b06      	ldr	r3, [sp, #24]
 8005aa8:	1b9a      	subs	r2, r3, r6
 8005aaa:	d004      	beq.n	8005ab6 <_dtoa_r+0x7ce>
 8005aac:	4659      	mov	r1, fp
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 fbd8 	bl	8006264 <__pow5mult>
 8005ab4:	4683      	mov	fp, r0
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 fb17 	bl	80060ec <__i2b>
 8005abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	dd7c      	ble.n	8005bc0 <_dtoa_r+0x8d8>
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4601      	mov	r1, r0
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 fbca 	bl	8006264 <__pow5mult>
 8005ad0:	9b05      	ldr	r3, [sp, #20]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	dd76      	ble.n	8005bc6 <_dtoa_r+0x8de>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	9306      	str	r3, [sp, #24]
 8005adc:	6933      	ldr	r3, [r6, #16]
 8005ade:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ae2:	6918      	ldr	r0, [r3, #16]
 8005ae4:	f000 fab2 	bl	800604c <__hi0bits>
 8005ae8:	f1c0 0020 	rsb	r0, r0, #32
 8005aec:	9b04      	ldr	r3, [sp, #16]
 8005aee:	4418      	add	r0, r3
 8005af0:	f010 001f 	ands.w	r0, r0, #31
 8005af4:	f000 8086 	beq.w	8005c04 <_dtoa_r+0x91c>
 8005af8:	f1c0 0320 	rsb	r3, r0, #32
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	dd7f      	ble.n	8005c00 <_dtoa_r+0x918>
 8005b00:	f1c0 001c 	rsb	r0, r0, #28
 8005b04:	9b04      	ldr	r3, [sp, #16]
 8005b06:	4403      	add	r3, r0
 8005b08:	4480      	add	r8, r0
 8005b0a:	4405      	add	r5, r0
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	f1b8 0f00 	cmp.w	r8, #0
 8005b12:	dd05      	ble.n	8005b20 <_dtoa_r+0x838>
 8005b14:	4659      	mov	r1, fp
 8005b16:	4642      	mov	r2, r8
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fbfd 	bl	8006318 <__lshift>
 8005b1e:	4683      	mov	fp, r0
 8005b20:	9b04      	ldr	r3, [sp, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dd05      	ble.n	8005b32 <_dtoa_r+0x84a>
 8005b26:	4631      	mov	r1, r6
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 fbf4 	bl	8006318 <__lshift>
 8005b30:	4606      	mov	r6, r0
 8005b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d069      	beq.n	8005c0c <_dtoa_r+0x924>
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4658      	mov	r0, fp
 8005b3c:	f000 fc58 	bl	80063f0 <__mcmp>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	da63      	bge.n	8005c0c <_dtoa_r+0x924>
 8005b44:	2300      	movs	r3, #0
 8005b46:	4659      	mov	r1, fp
 8005b48:	220a      	movs	r2, #10
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f000 fa34 	bl	8005fb8 <__multadd>
 8005b50:	9b08      	ldr	r3, [sp, #32]
 8005b52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005b56:	4683      	mov	fp, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 818f 	beq.w	8005e7c <_dtoa_r+0xb94>
 8005b5e:	4639      	mov	r1, r7
 8005b60:	2300      	movs	r3, #0
 8005b62:	220a      	movs	r2, #10
 8005b64:	4620      	mov	r0, r4
 8005b66:	f000 fa27 	bl	8005fb8 <__multadd>
 8005b6a:	f1b9 0f00 	cmp.w	r9, #0
 8005b6e:	4607      	mov	r7, r0
 8005b70:	f300 808e 	bgt.w	8005c90 <_dtoa_r+0x9a8>
 8005b74:	9b05      	ldr	r3, [sp, #20]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	dc50      	bgt.n	8005c1c <_dtoa_r+0x934>
 8005b7a:	e089      	b.n	8005c90 <_dtoa_r+0x9a8>
 8005b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b82:	e75d      	b.n	8005a40 <_dtoa_r+0x758>
 8005b84:	9b01      	ldr	r3, [sp, #4]
 8005b86:	1e5e      	subs	r6, r3, #1
 8005b88:	9b06      	ldr	r3, [sp, #24]
 8005b8a:	42b3      	cmp	r3, r6
 8005b8c:	bfbf      	itttt	lt
 8005b8e:	9b06      	ldrlt	r3, [sp, #24]
 8005b90:	9606      	strlt	r6, [sp, #24]
 8005b92:	1af2      	sublt	r2, r6, r3
 8005b94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005b96:	bfb6      	itet	lt
 8005b98:	189b      	addlt	r3, r3, r2
 8005b9a:	1b9e      	subge	r6, r3, r6
 8005b9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005b9e:	9b01      	ldr	r3, [sp, #4]
 8005ba0:	bfb8      	it	lt
 8005ba2:	2600      	movlt	r6, #0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bfb5      	itete	lt
 8005ba8:	eba8 0503 	sublt.w	r5, r8, r3
 8005bac:	9b01      	ldrge	r3, [sp, #4]
 8005bae:	2300      	movlt	r3, #0
 8005bb0:	4645      	movge	r5, r8
 8005bb2:	e747      	b.n	8005a44 <_dtoa_r+0x75c>
 8005bb4:	9e06      	ldr	r6, [sp, #24]
 8005bb6:	9f08      	ldr	r7, [sp, #32]
 8005bb8:	4645      	mov	r5, r8
 8005bba:	e74c      	b.n	8005a56 <_dtoa_r+0x76e>
 8005bbc:	9a06      	ldr	r2, [sp, #24]
 8005bbe:	e775      	b.n	8005aac <_dtoa_r+0x7c4>
 8005bc0:	9b05      	ldr	r3, [sp, #20]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	dc18      	bgt.n	8005bf8 <_dtoa_r+0x910>
 8005bc6:	9b02      	ldr	r3, [sp, #8]
 8005bc8:	b9b3      	cbnz	r3, 8005bf8 <_dtoa_r+0x910>
 8005bca:	9b03      	ldr	r3, [sp, #12]
 8005bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bd0:	b9a3      	cbnz	r3, 8005bfc <_dtoa_r+0x914>
 8005bd2:	9b03      	ldr	r3, [sp, #12]
 8005bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bd8:	0d1b      	lsrs	r3, r3, #20
 8005bda:	051b      	lsls	r3, r3, #20
 8005bdc:	b12b      	cbz	r3, 8005bea <_dtoa_r+0x902>
 8005bde:	9b04      	ldr	r3, [sp, #16]
 8005be0:	3301      	adds	r3, #1
 8005be2:	9304      	str	r3, [sp, #16]
 8005be4:	f108 0801 	add.w	r8, r8, #1
 8005be8:	2301      	movs	r3, #1
 8005bea:	9306      	str	r3, [sp, #24]
 8005bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f47f af74 	bne.w	8005adc <_dtoa_r+0x7f4>
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	e779      	b.n	8005aec <_dtoa_r+0x804>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e7f6      	b.n	8005bea <_dtoa_r+0x902>
 8005bfc:	9b02      	ldr	r3, [sp, #8]
 8005bfe:	e7f4      	b.n	8005bea <_dtoa_r+0x902>
 8005c00:	d085      	beq.n	8005b0e <_dtoa_r+0x826>
 8005c02:	4618      	mov	r0, r3
 8005c04:	301c      	adds	r0, #28
 8005c06:	e77d      	b.n	8005b04 <_dtoa_r+0x81c>
 8005c08:	40240000 	.word	0x40240000
 8005c0c:	9b01      	ldr	r3, [sp, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	dc38      	bgt.n	8005c84 <_dtoa_r+0x99c>
 8005c12:	9b05      	ldr	r3, [sp, #20]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	dd35      	ble.n	8005c84 <_dtoa_r+0x99c>
 8005c18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005c1c:	f1b9 0f00 	cmp.w	r9, #0
 8005c20:	d10d      	bne.n	8005c3e <_dtoa_r+0x956>
 8005c22:	4631      	mov	r1, r6
 8005c24:	464b      	mov	r3, r9
 8005c26:	2205      	movs	r2, #5
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 f9c5 	bl	8005fb8 <__multadd>
 8005c2e:	4601      	mov	r1, r0
 8005c30:	4606      	mov	r6, r0
 8005c32:	4658      	mov	r0, fp
 8005c34:	f000 fbdc 	bl	80063f0 <__mcmp>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	f73f adbd 	bgt.w	80057b8 <_dtoa_r+0x4d0>
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	9d00      	ldr	r5, [sp, #0]
 8005c42:	ea6f 0a03 	mvn.w	sl, r3
 8005c46:	f04f 0800 	mov.w	r8, #0
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f000 f991 	bl	8005f74 <_Bfree>
 8005c52:	2f00      	cmp	r7, #0
 8005c54:	f43f aeb4 	beq.w	80059c0 <_dtoa_r+0x6d8>
 8005c58:	f1b8 0f00 	cmp.w	r8, #0
 8005c5c:	d005      	beq.n	8005c6a <_dtoa_r+0x982>
 8005c5e:	45b8      	cmp	r8, r7
 8005c60:	d003      	beq.n	8005c6a <_dtoa_r+0x982>
 8005c62:	4641      	mov	r1, r8
 8005c64:	4620      	mov	r0, r4
 8005c66:	f000 f985 	bl	8005f74 <_Bfree>
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 f981 	bl	8005f74 <_Bfree>
 8005c72:	e6a5      	b.n	80059c0 <_dtoa_r+0x6d8>
 8005c74:	2600      	movs	r6, #0
 8005c76:	4637      	mov	r7, r6
 8005c78:	e7e1      	b.n	8005c3e <_dtoa_r+0x956>
 8005c7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005c7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005c80:	4637      	mov	r7, r6
 8005c82:	e599      	b.n	80057b8 <_dtoa_r+0x4d0>
 8005c84:	9b08      	ldr	r3, [sp, #32]
 8005c86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80fd 	beq.w	8005e8a <_dtoa_r+0xba2>
 8005c90:	2d00      	cmp	r5, #0
 8005c92:	dd05      	ble.n	8005ca0 <_dtoa_r+0x9b8>
 8005c94:	4639      	mov	r1, r7
 8005c96:	462a      	mov	r2, r5
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fb3d 	bl	8006318 <__lshift>
 8005c9e:	4607      	mov	r7, r0
 8005ca0:	9b06      	ldr	r3, [sp, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d05c      	beq.n	8005d60 <_dtoa_r+0xa78>
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 f923 	bl	8005ef4 <_Balloc>
 8005cae:	4605      	mov	r5, r0
 8005cb0:	b928      	cbnz	r0, 8005cbe <_dtoa_r+0x9d6>
 8005cb2:	4b80      	ldr	r3, [pc, #512]	; (8005eb4 <_dtoa_r+0xbcc>)
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005cba:	f7ff bb2e 	b.w	800531a <_dtoa_r+0x32>
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	3202      	adds	r2, #2
 8005cc2:	0092      	lsls	r2, r2, #2
 8005cc4:	f107 010c 	add.w	r1, r7, #12
 8005cc8:	300c      	adds	r0, #12
 8005cca:	f000 f905 	bl	8005ed8 <memcpy>
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f000 fb20 	bl	8006318 <__lshift>
 8005cd8:	9b00      	ldr	r3, [sp, #0]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	444b      	add	r3, r9
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	9b02      	ldr	r3, [sp, #8]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	46b8      	mov	r8, r7
 8005cec:	9306      	str	r3, [sp, #24]
 8005cee:	4607      	mov	r7, r0
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	4658      	mov	r0, fp
 8005cf8:	9302      	str	r3, [sp, #8]
 8005cfa:	f7ff fa69 	bl	80051d0 <quorem>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	3330      	adds	r3, #48	; 0x30
 8005d02:	9004      	str	r0, [sp, #16]
 8005d04:	4641      	mov	r1, r8
 8005d06:	4658      	mov	r0, fp
 8005d08:	9308      	str	r3, [sp, #32]
 8005d0a:	f000 fb71 	bl	80063f0 <__mcmp>
 8005d0e:	463a      	mov	r2, r7
 8005d10:	4681      	mov	r9, r0
 8005d12:	4631      	mov	r1, r6
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 fb87 	bl	8006428 <__mdiff>
 8005d1a:	68c2      	ldr	r2, [r0, #12]
 8005d1c:	9b08      	ldr	r3, [sp, #32]
 8005d1e:	4605      	mov	r5, r0
 8005d20:	bb02      	cbnz	r2, 8005d64 <_dtoa_r+0xa7c>
 8005d22:	4601      	mov	r1, r0
 8005d24:	4658      	mov	r0, fp
 8005d26:	f000 fb63 	bl	80063f0 <__mcmp>
 8005d2a:	9b08      	ldr	r3, [sp, #32]
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005d36:	f000 f91d 	bl	8005f74 <_Bfree>
 8005d3a:	9b05      	ldr	r3, [sp, #20]
 8005d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d3e:	9d01      	ldr	r5, [sp, #4]
 8005d40:	ea43 0102 	orr.w	r1, r3, r2
 8005d44:	9b06      	ldr	r3, [sp, #24]
 8005d46:	430b      	orrs	r3, r1
 8005d48:	9b08      	ldr	r3, [sp, #32]
 8005d4a:	d10d      	bne.n	8005d68 <_dtoa_r+0xa80>
 8005d4c:	2b39      	cmp	r3, #57	; 0x39
 8005d4e:	d029      	beq.n	8005da4 <_dtoa_r+0xabc>
 8005d50:	f1b9 0f00 	cmp.w	r9, #0
 8005d54:	dd01      	ble.n	8005d5a <_dtoa_r+0xa72>
 8005d56:	9b04      	ldr	r3, [sp, #16]
 8005d58:	3331      	adds	r3, #49	; 0x31
 8005d5a:	9a02      	ldr	r2, [sp, #8]
 8005d5c:	7013      	strb	r3, [r2, #0]
 8005d5e:	e774      	b.n	8005c4a <_dtoa_r+0x962>
 8005d60:	4638      	mov	r0, r7
 8005d62:	e7b9      	b.n	8005cd8 <_dtoa_r+0x9f0>
 8005d64:	2201      	movs	r2, #1
 8005d66:	e7e2      	b.n	8005d2e <_dtoa_r+0xa46>
 8005d68:	f1b9 0f00 	cmp.w	r9, #0
 8005d6c:	db06      	blt.n	8005d7c <_dtoa_r+0xa94>
 8005d6e:	9905      	ldr	r1, [sp, #20]
 8005d70:	ea41 0909 	orr.w	r9, r1, r9
 8005d74:	9906      	ldr	r1, [sp, #24]
 8005d76:	ea59 0101 	orrs.w	r1, r9, r1
 8005d7a:	d120      	bne.n	8005dbe <_dtoa_r+0xad6>
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	ddec      	ble.n	8005d5a <_dtoa_r+0xa72>
 8005d80:	4659      	mov	r1, fp
 8005d82:	2201      	movs	r2, #1
 8005d84:	4620      	mov	r0, r4
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	f000 fac6 	bl	8006318 <__lshift>
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	4683      	mov	fp, r0
 8005d90:	f000 fb2e 	bl	80063f0 <__mcmp>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	9b01      	ldr	r3, [sp, #4]
 8005d98:	dc02      	bgt.n	8005da0 <_dtoa_r+0xab8>
 8005d9a:	d1de      	bne.n	8005d5a <_dtoa_r+0xa72>
 8005d9c:	07da      	lsls	r2, r3, #31
 8005d9e:	d5dc      	bpl.n	8005d5a <_dtoa_r+0xa72>
 8005da0:	2b39      	cmp	r3, #57	; 0x39
 8005da2:	d1d8      	bne.n	8005d56 <_dtoa_r+0xa6e>
 8005da4:	9a02      	ldr	r2, [sp, #8]
 8005da6:	2339      	movs	r3, #57	; 0x39
 8005da8:	7013      	strb	r3, [r2, #0]
 8005daa:	462b      	mov	r3, r5
 8005dac:	461d      	mov	r5, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005db4:	2a39      	cmp	r2, #57	; 0x39
 8005db6:	d050      	beq.n	8005e5a <_dtoa_r+0xb72>
 8005db8:	3201      	adds	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	e745      	b.n	8005c4a <_dtoa_r+0x962>
 8005dbe:	2a00      	cmp	r2, #0
 8005dc0:	dd03      	ble.n	8005dca <_dtoa_r+0xae2>
 8005dc2:	2b39      	cmp	r3, #57	; 0x39
 8005dc4:	d0ee      	beq.n	8005da4 <_dtoa_r+0xabc>
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	e7c7      	b.n	8005d5a <_dtoa_r+0xa72>
 8005dca:	9a01      	ldr	r2, [sp, #4]
 8005dcc:	9907      	ldr	r1, [sp, #28]
 8005dce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005dd2:	428a      	cmp	r2, r1
 8005dd4:	d02a      	beq.n	8005e2c <_dtoa_r+0xb44>
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	2300      	movs	r3, #0
 8005dda:	220a      	movs	r2, #10
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 f8eb 	bl	8005fb8 <__multadd>
 8005de2:	45b8      	cmp	r8, r7
 8005de4:	4683      	mov	fp, r0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	f04f 020a 	mov.w	r2, #10
 8005dee:	4641      	mov	r1, r8
 8005df0:	4620      	mov	r0, r4
 8005df2:	d107      	bne.n	8005e04 <_dtoa_r+0xb1c>
 8005df4:	f000 f8e0 	bl	8005fb8 <__multadd>
 8005df8:	4680      	mov	r8, r0
 8005dfa:	4607      	mov	r7, r0
 8005dfc:	9b01      	ldr	r3, [sp, #4]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	e775      	b.n	8005cf0 <_dtoa_r+0xa08>
 8005e04:	f000 f8d8 	bl	8005fb8 <__multadd>
 8005e08:	4639      	mov	r1, r7
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	220a      	movs	r2, #10
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 f8d1 	bl	8005fb8 <__multadd>
 8005e16:	4607      	mov	r7, r0
 8005e18:	e7f0      	b.n	8005dfc <_dtoa_r+0xb14>
 8005e1a:	f1b9 0f00 	cmp.w	r9, #0
 8005e1e:	9a00      	ldr	r2, [sp, #0]
 8005e20:	bfcc      	ite	gt
 8005e22:	464d      	movgt	r5, r9
 8005e24:	2501      	movle	r5, #1
 8005e26:	4415      	add	r5, r2
 8005e28:	f04f 0800 	mov.w	r8, #0
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	2201      	movs	r2, #1
 8005e30:	4620      	mov	r0, r4
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	f000 fa70 	bl	8006318 <__lshift>
 8005e38:	4631      	mov	r1, r6
 8005e3a:	4683      	mov	fp, r0
 8005e3c:	f000 fad8 	bl	80063f0 <__mcmp>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	dcb2      	bgt.n	8005daa <_dtoa_r+0xac2>
 8005e44:	d102      	bne.n	8005e4c <_dtoa_r+0xb64>
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	07db      	lsls	r3, r3, #31
 8005e4a:	d4ae      	bmi.n	8005daa <_dtoa_r+0xac2>
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	461d      	mov	r5, r3
 8005e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e54:	2a30      	cmp	r2, #48	; 0x30
 8005e56:	d0fa      	beq.n	8005e4e <_dtoa_r+0xb66>
 8005e58:	e6f7      	b.n	8005c4a <_dtoa_r+0x962>
 8005e5a:	9a00      	ldr	r2, [sp, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d1a5      	bne.n	8005dac <_dtoa_r+0xac4>
 8005e60:	f10a 0a01 	add.w	sl, sl, #1
 8005e64:	2331      	movs	r3, #49	; 0x31
 8005e66:	e779      	b.n	8005d5c <_dtoa_r+0xa74>
 8005e68:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <_dtoa_r+0xbd0>)
 8005e6a:	f7ff baaf 	b.w	80053cc <_dtoa_r+0xe4>
 8005e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f47f aa86 	bne.w	8005382 <_dtoa_r+0x9a>
 8005e76:	4b11      	ldr	r3, [pc, #68]	; (8005ebc <_dtoa_r+0xbd4>)
 8005e78:	f7ff baa8 	b.w	80053cc <_dtoa_r+0xe4>
 8005e7c:	f1b9 0f00 	cmp.w	r9, #0
 8005e80:	dc03      	bgt.n	8005e8a <_dtoa_r+0xba2>
 8005e82:	9b05      	ldr	r3, [sp, #20]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	f73f aec9 	bgt.w	8005c1c <_dtoa_r+0x934>
 8005e8a:	9d00      	ldr	r5, [sp, #0]
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4658      	mov	r0, fp
 8005e90:	f7ff f99e 	bl	80051d0 <quorem>
 8005e94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e98:	f805 3b01 	strb.w	r3, [r5], #1
 8005e9c:	9a00      	ldr	r2, [sp, #0]
 8005e9e:	1aaa      	subs	r2, r5, r2
 8005ea0:	4591      	cmp	r9, r2
 8005ea2:	ddba      	ble.n	8005e1a <_dtoa_r+0xb32>
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	220a      	movs	r2, #10
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 f884 	bl	8005fb8 <__multadd>
 8005eb0:	4683      	mov	fp, r0
 8005eb2:	e7eb      	b.n	8005e8c <_dtoa_r+0xba4>
 8005eb4:	08007733 	.word	0x08007733
 8005eb8:	0800768c 	.word	0x0800768c
 8005ebc:	080076b0 	.word	0x080076b0

08005ec0 <_localeconv_r>:
 8005ec0:	4800      	ldr	r0, [pc, #0]	; (8005ec4 <_localeconv_r+0x4>)
 8005ec2:	4770      	bx	lr
 8005ec4:	2000017c 	.word	0x2000017c

08005ec8 <malloc>:
 8005ec8:	4b02      	ldr	r3, [pc, #8]	; (8005ed4 <malloc+0xc>)
 8005eca:	4601      	mov	r1, r0
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	f000 bbef 	b.w	80066b0 <_malloc_r>
 8005ed2:	bf00      	nop
 8005ed4:	20000028 	.word	0x20000028

08005ed8 <memcpy>:
 8005ed8:	440a      	add	r2, r1
 8005eda:	4291      	cmp	r1, r2
 8005edc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005ee0:	d100      	bne.n	8005ee4 <memcpy+0xc>
 8005ee2:	4770      	bx	lr
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eee:	4291      	cmp	r1, r2
 8005ef0:	d1f9      	bne.n	8005ee6 <memcpy+0xe>
 8005ef2:	bd10      	pop	{r4, pc}

08005ef4 <_Balloc>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ef8:	4604      	mov	r4, r0
 8005efa:	460d      	mov	r5, r1
 8005efc:	b976      	cbnz	r6, 8005f1c <_Balloc+0x28>
 8005efe:	2010      	movs	r0, #16
 8005f00:	f7ff ffe2 	bl	8005ec8 <malloc>
 8005f04:	4602      	mov	r2, r0
 8005f06:	6260      	str	r0, [r4, #36]	; 0x24
 8005f08:	b920      	cbnz	r0, 8005f14 <_Balloc+0x20>
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <_Balloc+0x78>)
 8005f0c:	4818      	ldr	r0, [pc, #96]	; (8005f70 <_Balloc+0x7c>)
 8005f0e:	2166      	movs	r1, #102	; 0x66
 8005f10:	f000 fd94 	bl	8006a3c <__assert_func>
 8005f14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f18:	6006      	str	r6, [r0, #0]
 8005f1a:	60c6      	str	r6, [r0, #12]
 8005f1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f1e:	68f3      	ldr	r3, [r6, #12]
 8005f20:	b183      	cbz	r3, 8005f44 <_Balloc+0x50>
 8005f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f2a:	b9b8      	cbnz	r0, 8005f5c <_Balloc+0x68>
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f32:	1d72      	adds	r2, r6, #5
 8005f34:	0092      	lsls	r2, r2, #2
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 fb5a 	bl	80065f0 <_calloc_r>
 8005f3c:	b160      	cbz	r0, 8005f58 <_Balloc+0x64>
 8005f3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f42:	e00e      	b.n	8005f62 <_Balloc+0x6e>
 8005f44:	2221      	movs	r2, #33	; 0x21
 8005f46:	2104      	movs	r1, #4
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 fb51 	bl	80065f0 <_calloc_r>
 8005f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f50:	60f0      	str	r0, [r6, #12]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e4      	bne.n	8005f22 <_Balloc+0x2e>
 8005f58:	2000      	movs	r0, #0
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	6802      	ldr	r2, [r0, #0]
 8005f5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f62:	2300      	movs	r3, #0
 8005f64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f68:	e7f7      	b.n	8005f5a <_Balloc+0x66>
 8005f6a:	bf00      	nop
 8005f6c:	080076bd 	.word	0x080076bd
 8005f70:	08007744 	.word	0x08007744

08005f74 <_Bfree>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f78:	4605      	mov	r5, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	b976      	cbnz	r6, 8005f9c <_Bfree+0x28>
 8005f7e:	2010      	movs	r0, #16
 8005f80:	f7ff ffa2 	bl	8005ec8 <malloc>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6268      	str	r0, [r5, #36]	; 0x24
 8005f88:	b920      	cbnz	r0, 8005f94 <_Bfree+0x20>
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <_Bfree+0x3c>)
 8005f8c:	4809      	ldr	r0, [pc, #36]	; (8005fb4 <_Bfree+0x40>)
 8005f8e:	218a      	movs	r1, #138	; 0x8a
 8005f90:	f000 fd54 	bl	8006a3c <__assert_func>
 8005f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f98:	6006      	str	r6, [r0, #0]
 8005f9a:	60c6      	str	r6, [r0, #12]
 8005f9c:	b13c      	cbz	r4, 8005fae <_Bfree+0x3a>
 8005f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fa0:	6862      	ldr	r2, [r4, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fa8:	6021      	str	r1, [r4, #0]
 8005faa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
 8005fb0:	080076bd 	.word	0x080076bd
 8005fb4:	08007744 	.word	0x08007744

08005fb8 <__multadd>:
 8005fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbc:	690e      	ldr	r6, [r1, #16]
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	4698      	mov	r8, r3
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	f101 0014 	add.w	r0, r1, #20
 8005fc8:	2300      	movs	r3, #0
 8005fca:	6805      	ldr	r5, [r0, #0]
 8005fcc:	b2a9      	uxth	r1, r5
 8005fce:	fb02 8101 	mla	r1, r2, r1, r8
 8005fd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005fd6:	0c2d      	lsrs	r5, r5, #16
 8005fd8:	fb02 c505 	mla	r5, r2, r5, ip
 8005fdc:	b289      	uxth	r1, r1
 8005fde:	3301      	adds	r3, #1
 8005fe0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005fe4:	429e      	cmp	r6, r3
 8005fe6:	f840 1b04 	str.w	r1, [r0], #4
 8005fea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005fee:	dcec      	bgt.n	8005fca <__multadd+0x12>
 8005ff0:	f1b8 0f00 	cmp.w	r8, #0
 8005ff4:	d022      	beq.n	800603c <__multadd+0x84>
 8005ff6:	68a3      	ldr	r3, [r4, #8]
 8005ff8:	42b3      	cmp	r3, r6
 8005ffa:	dc19      	bgt.n	8006030 <__multadd+0x78>
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	4638      	mov	r0, r7
 8006000:	3101      	adds	r1, #1
 8006002:	f7ff ff77 	bl	8005ef4 <_Balloc>
 8006006:	4605      	mov	r5, r0
 8006008:	b928      	cbnz	r0, 8006016 <__multadd+0x5e>
 800600a:	4602      	mov	r2, r0
 800600c:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <__multadd+0x8c>)
 800600e:	480e      	ldr	r0, [pc, #56]	; (8006048 <__multadd+0x90>)
 8006010:	21b5      	movs	r1, #181	; 0xb5
 8006012:	f000 fd13 	bl	8006a3c <__assert_func>
 8006016:	6922      	ldr	r2, [r4, #16]
 8006018:	3202      	adds	r2, #2
 800601a:	f104 010c 	add.w	r1, r4, #12
 800601e:	0092      	lsls	r2, r2, #2
 8006020:	300c      	adds	r0, #12
 8006022:	f7ff ff59 	bl	8005ed8 <memcpy>
 8006026:	4621      	mov	r1, r4
 8006028:	4638      	mov	r0, r7
 800602a:	f7ff ffa3 	bl	8005f74 <_Bfree>
 800602e:	462c      	mov	r4, r5
 8006030:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006034:	3601      	adds	r6, #1
 8006036:	f8c3 8014 	str.w	r8, [r3, #20]
 800603a:	6126      	str	r6, [r4, #16]
 800603c:	4620      	mov	r0, r4
 800603e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006042:	bf00      	nop
 8006044:	08007733 	.word	0x08007733
 8006048:	08007744 	.word	0x08007744

0800604c <__hi0bits>:
 800604c:	0c03      	lsrs	r3, r0, #16
 800604e:	041b      	lsls	r3, r3, #16
 8006050:	b9d3      	cbnz	r3, 8006088 <__hi0bits+0x3c>
 8006052:	0400      	lsls	r0, r0, #16
 8006054:	2310      	movs	r3, #16
 8006056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800605a:	bf04      	itt	eq
 800605c:	0200      	lsleq	r0, r0, #8
 800605e:	3308      	addeq	r3, #8
 8006060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006064:	bf04      	itt	eq
 8006066:	0100      	lsleq	r0, r0, #4
 8006068:	3304      	addeq	r3, #4
 800606a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800606e:	bf04      	itt	eq
 8006070:	0080      	lsleq	r0, r0, #2
 8006072:	3302      	addeq	r3, #2
 8006074:	2800      	cmp	r0, #0
 8006076:	db05      	blt.n	8006084 <__hi0bits+0x38>
 8006078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800607c:	f103 0301 	add.w	r3, r3, #1
 8006080:	bf08      	it	eq
 8006082:	2320      	moveq	r3, #32
 8006084:	4618      	mov	r0, r3
 8006086:	4770      	bx	lr
 8006088:	2300      	movs	r3, #0
 800608a:	e7e4      	b.n	8006056 <__hi0bits+0xa>

0800608c <__lo0bits>:
 800608c:	6803      	ldr	r3, [r0, #0]
 800608e:	f013 0207 	ands.w	r2, r3, #7
 8006092:	4601      	mov	r1, r0
 8006094:	d00b      	beq.n	80060ae <__lo0bits+0x22>
 8006096:	07da      	lsls	r2, r3, #31
 8006098:	d424      	bmi.n	80060e4 <__lo0bits+0x58>
 800609a:	0798      	lsls	r0, r3, #30
 800609c:	bf49      	itett	mi
 800609e:	085b      	lsrmi	r3, r3, #1
 80060a0:	089b      	lsrpl	r3, r3, #2
 80060a2:	2001      	movmi	r0, #1
 80060a4:	600b      	strmi	r3, [r1, #0]
 80060a6:	bf5c      	itt	pl
 80060a8:	600b      	strpl	r3, [r1, #0]
 80060aa:	2002      	movpl	r0, #2
 80060ac:	4770      	bx	lr
 80060ae:	b298      	uxth	r0, r3
 80060b0:	b9b0      	cbnz	r0, 80060e0 <__lo0bits+0x54>
 80060b2:	0c1b      	lsrs	r3, r3, #16
 80060b4:	2010      	movs	r0, #16
 80060b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060ba:	bf04      	itt	eq
 80060bc:	0a1b      	lsreq	r3, r3, #8
 80060be:	3008      	addeq	r0, #8
 80060c0:	071a      	lsls	r2, r3, #28
 80060c2:	bf04      	itt	eq
 80060c4:	091b      	lsreq	r3, r3, #4
 80060c6:	3004      	addeq	r0, #4
 80060c8:	079a      	lsls	r2, r3, #30
 80060ca:	bf04      	itt	eq
 80060cc:	089b      	lsreq	r3, r3, #2
 80060ce:	3002      	addeq	r0, #2
 80060d0:	07da      	lsls	r2, r3, #31
 80060d2:	d403      	bmi.n	80060dc <__lo0bits+0x50>
 80060d4:	085b      	lsrs	r3, r3, #1
 80060d6:	f100 0001 	add.w	r0, r0, #1
 80060da:	d005      	beq.n	80060e8 <__lo0bits+0x5c>
 80060dc:	600b      	str	r3, [r1, #0]
 80060de:	4770      	bx	lr
 80060e0:	4610      	mov	r0, r2
 80060e2:	e7e8      	b.n	80060b6 <__lo0bits+0x2a>
 80060e4:	2000      	movs	r0, #0
 80060e6:	4770      	bx	lr
 80060e8:	2020      	movs	r0, #32
 80060ea:	4770      	bx	lr

080060ec <__i2b>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	460c      	mov	r4, r1
 80060f0:	2101      	movs	r1, #1
 80060f2:	f7ff feff 	bl	8005ef4 <_Balloc>
 80060f6:	4602      	mov	r2, r0
 80060f8:	b928      	cbnz	r0, 8006106 <__i2b+0x1a>
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <__i2b+0x24>)
 80060fc:	4805      	ldr	r0, [pc, #20]	; (8006114 <__i2b+0x28>)
 80060fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006102:	f000 fc9b 	bl	8006a3c <__assert_func>
 8006106:	2301      	movs	r3, #1
 8006108:	6144      	str	r4, [r0, #20]
 800610a:	6103      	str	r3, [r0, #16]
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	08007733 	.word	0x08007733
 8006114:	08007744 	.word	0x08007744

08006118 <__multiply>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	4614      	mov	r4, r2
 800611e:	690a      	ldr	r2, [r1, #16]
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	429a      	cmp	r2, r3
 8006124:	bfb8      	it	lt
 8006126:	460b      	movlt	r3, r1
 8006128:	460d      	mov	r5, r1
 800612a:	bfbc      	itt	lt
 800612c:	4625      	movlt	r5, r4
 800612e:	461c      	movlt	r4, r3
 8006130:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006134:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006138:	68ab      	ldr	r3, [r5, #8]
 800613a:	6869      	ldr	r1, [r5, #4]
 800613c:	eb0a 0709 	add.w	r7, sl, r9
 8006140:	42bb      	cmp	r3, r7
 8006142:	b085      	sub	sp, #20
 8006144:	bfb8      	it	lt
 8006146:	3101      	addlt	r1, #1
 8006148:	f7ff fed4 	bl	8005ef4 <_Balloc>
 800614c:	b930      	cbnz	r0, 800615c <__multiply+0x44>
 800614e:	4602      	mov	r2, r0
 8006150:	4b42      	ldr	r3, [pc, #264]	; (800625c <__multiply+0x144>)
 8006152:	4843      	ldr	r0, [pc, #268]	; (8006260 <__multiply+0x148>)
 8006154:	f240 115d 	movw	r1, #349	; 0x15d
 8006158:	f000 fc70 	bl	8006a3c <__assert_func>
 800615c:	f100 0614 	add.w	r6, r0, #20
 8006160:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006164:	4633      	mov	r3, r6
 8006166:	2200      	movs	r2, #0
 8006168:	4543      	cmp	r3, r8
 800616a:	d31e      	bcc.n	80061aa <__multiply+0x92>
 800616c:	f105 0c14 	add.w	ip, r5, #20
 8006170:	f104 0314 	add.w	r3, r4, #20
 8006174:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006178:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800617c:	9202      	str	r2, [sp, #8]
 800617e:	ebac 0205 	sub.w	r2, ip, r5
 8006182:	3a15      	subs	r2, #21
 8006184:	f022 0203 	bic.w	r2, r2, #3
 8006188:	3204      	adds	r2, #4
 800618a:	f105 0115 	add.w	r1, r5, #21
 800618e:	458c      	cmp	ip, r1
 8006190:	bf38      	it	cc
 8006192:	2204      	movcc	r2, #4
 8006194:	9201      	str	r2, [sp, #4]
 8006196:	9a02      	ldr	r2, [sp, #8]
 8006198:	9303      	str	r3, [sp, #12]
 800619a:	429a      	cmp	r2, r3
 800619c:	d808      	bhi.n	80061b0 <__multiply+0x98>
 800619e:	2f00      	cmp	r7, #0
 80061a0:	dc55      	bgt.n	800624e <__multiply+0x136>
 80061a2:	6107      	str	r7, [r0, #16]
 80061a4:	b005      	add	sp, #20
 80061a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061aa:	f843 2b04 	str.w	r2, [r3], #4
 80061ae:	e7db      	b.n	8006168 <__multiply+0x50>
 80061b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80061b4:	f1ba 0f00 	cmp.w	sl, #0
 80061b8:	d020      	beq.n	80061fc <__multiply+0xe4>
 80061ba:	f105 0e14 	add.w	lr, r5, #20
 80061be:	46b1      	mov	r9, r6
 80061c0:	2200      	movs	r2, #0
 80061c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80061c6:	f8d9 b000 	ldr.w	fp, [r9]
 80061ca:	b2a1      	uxth	r1, r4
 80061cc:	fa1f fb8b 	uxth.w	fp, fp
 80061d0:	fb0a b101 	mla	r1, sl, r1, fp
 80061d4:	4411      	add	r1, r2
 80061d6:	f8d9 2000 	ldr.w	r2, [r9]
 80061da:	0c24      	lsrs	r4, r4, #16
 80061dc:	0c12      	lsrs	r2, r2, #16
 80061de:	fb0a 2404 	mla	r4, sl, r4, r2
 80061e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80061e6:	b289      	uxth	r1, r1
 80061e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80061ec:	45f4      	cmp	ip, lr
 80061ee:	f849 1b04 	str.w	r1, [r9], #4
 80061f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80061f6:	d8e4      	bhi.n	80061c2 <__multiply+0xaa>
 80061f8:	9901      	ldr	r1, [sp, #4]
 80061fa:	5072      	str	r2, [r6, r1]
 80061fc:	9a03      	ldr	r2, [sp, #12]
 80061fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006202:	3304      	adds	r3, #4
 8006204:	f1b9 0f00 	cmp.w	r9, #0
 8006208:	d01f      	beq.n	800624a <__multiply+0x132>
 800620a:	6834      	ldr	r4, [r6, #0]
 800620c:	f105 0114 	add.w	r1, r5, #20
 8006210:	46b6      	mov	lr, r6
 8006212:	f04f 0a00 	mov.w	sl, #0
 8006216:	880a      	ldrh	r2, [r1, #0]
 8006218:	f8be b002 	ldrh.w	fp, [lr, #2]
 800621c:	fb09 b202 	mla	r2, r9, r2, fp
 8006220:	4492      	add	sl, r2
 8006222:	b2a4      	uxth	r4, r4
 8006224:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006228:	f84e 4b04 	str.w	r4, [lr], #4
 800622c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006230:	f8be 2000 	ldrh.w	r2, [lr]
 8006234:	0c24      	lsrs	r4, r4, #16
 8006236:	fb09 2404 	mla	r4, r9, r4, r2
 800623a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800623e:	458c      	cmp	ip, r1
 8006240:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006244:	d8e7      	bhi.n	8006216 <__multiply+0xfe>
 8006246:	9a01      	ldr	r2, [sp, #4]
 8006248:	50b4      	str	r4, [r6, r2]
 800624a:	3604      	adds	r6, #4
 800624c:	e7a3      	b.n	8006196 <__multiply+0x7e>
 800624e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1a5      	bne.n	80061a2 <__multiply+0x8a>
 8006256:	3f01      	subs	r7, #1
 8006258:	e7a1      	b.n	800619e <__multiply+0x86>
 800625a:	bf00      	nop
 800625c:	08007733 	.word	0x08007733
 8006260:	08007744 	.word	0x08007744

08006264 <__pow5mult>:
 8006264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006268:	4615      	mov	r5, r2
 800626a:	f012 0203 	ands.w	r2, r2, #3
 800626e:	4606      	mov	r6, r0
 8006270:	460f      	mov	r7, r1
 8006272:	d007      	beq.n	8006284 <__pow5mult+0x20>
 8006274:	4c25      	ldr	r4, [pc, #148]	; (800630c <__pow5mult+0xa8>)
 8006276:	3a01      	subs	r2, #1
 8006278:	2300      	movs	r3, #0
 800627a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800627e:	f7ff fe9b 	bl	8005fb8 <__multadd>
 8006282:	4607      	mov	r7, r0
 8006284:	10ad      	asrs	r5, r5, #2
 8006286:	d03d      	beq.n	8006304 <__pow5mult+0xa0>
 8006288:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800628a:	b97c      	cbnz	r4, 80062ac <__pow5mult+0x48>
 800628c:	2010      	movs	r0, #16
 800628e:	f7ff fe1b 	bl	8005ec8 <malloc>
 8006292:	4602      	mov	r2, r0
 8006294:	6270      	str	r0, [r6, #36]	; 0x24
 8006296:	b928      	cbnz	r0, 80062a4 <__pow5mult+0x40>
 8006298:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <__pow5mult+0xac>)
 800629a:	481e      	ldr	r0, [pc, #120]	; (8006314 <__pow5mult+0xb0>)
 800629c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80062a0:	f000 fbcc 	bl	8006a3c <__assert_func>
 80062a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062a8:	6004      	str	r4, [r0, #0]
 80062aa:	60c4      	str	r4, [r0, #12]
 80062ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062b4:	b94c      	cbnz	r4, 80062ca <__pow5mult+0x66>
 80062b6:	f240 2171 	movw	r1, #625	; 0x271
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7ff ff16 	bl	80060ec <__i2b>
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80062c6:	4604      	mov	r4, r0
 80062c8:	6003      	str	r3, [r0, #0]
 80062ca:	f04f 0900 	mov.w	r9, #0
 80062ce:	07eb      	lsls	r3, r5, #31
 80062d0:	d50a      	bpl.n	80062e8 <__pow5mult+0x84>
 80062d2:	4639      	mov	r1, r7
 80062d4:	4622      	mov	r2, r4
 80062d6:	4630      	mov	r0, r6
 80062d8:	f7ff ff1e 	bl	8006118 <__multiply>
 80062dc:	4639      	mov	r1, r7
 80062de:	4680      	mov	r8, r0
 80062e0:	4630      	mov	r0, r6
 80062e2:	f7ff fe47 	bl	8005f74 <_Bfree>
 80062e6:	4647      	mov	r7, r8
 80062e8:	106d      	asrs	r5, r5, #1
 80062ea:	d00b      	beq.n	8006304 <__pow5mult+0xa0>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	b938      	cbnz	r0, 8006300 <__pow5mult+0x9c>
 80062f0:	4622      	mov	r2, r4
 80062f2:	4621      	mov	r1, r4
 80062f4:	4630      	mov	r0, r6
 80062f6:	f7ff ff0f 	bl	8006118 <__multiply>
 80062fa:	6020      	str	r0, [r4, #0]
 80062fc:	f8c0 9000 	str.w	r9, [r0]
 8006300:	4604      	mov	r4, r0
 8006302:	e7e4      	b.n	80062ce <__pow5mult+0x6a>
 8006304:	4638      	mov	r0, r7
 8006306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630a:	bf00      	nop
 800630c:	08007898 	.word	0x08007898
 8006310:	080076bd 	.word	0x080076bd
 8006314:	08007744 	.word	0x08007744

08006318 <__lshift>:
 8006318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800631c:	460c      	mov	r4, r1
 800631e:	6849      	ldr	r1, [r1, #4]
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006326:	68a3      	ldr	r3, [r4, #8]
 8006328:	4607      	mov	r7, r0
 800632a:	4691      	mov	r9, r2
 800632c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006330:	f108 0601 	add.w	r6, r8, #1
 8006334:	42b3      	cmp	r3, r6
 8006336:	db0b      	blt.n	8006350 <__lshift+0x38>
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff fddb 	bl	8005ef4 <_Balloc>
 800633e:	4605      	mov	r5, r0
 8006340:	b948      	cbnz	r0, 8006356 <__lshift+0x3e>
 8006342:	4602      	mov	r2, r0
 8006344:	4b28      	ldr	r3, [pc, #160]	; (80063e8 <__lshift+0xd0>)
 8006346:	4829      	ldr	r0, [pc, #164]	; (80063ec <__lshift+0xd4>)
 8006348:	f240 11d9 	movw	r1, #473	; 0x1d9
 800634c:	f000 fb76 	bl	8006a3c <__assert_func>
 8006350:	3101      	adds	r1, #1
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	e7ee      	b.n	8006334 <__lshift+0x1c>
 8006356:	2300      	movs	r3, #0
 8006358:	f100 0114 	add.w	r1, r0, #20
 800635c:	f100 0210 	add.w	r2, r0, #16
 8006360:	4618      	mov	r0, r3
 8006362:	4553      	cmp	r3, sl
 8006364:	db33      	blt.n	80063ce <__lshift+0xb6>
 8006366:	6920      	ldr	r0, [r4, #16]
 8006368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800636c:	f104 0314 	add.w	r3, r4, #20
 8006370:	f019 091f 	ands.w	r9, r9, #31
 8006374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800637c:	d02b      	beq.n	80063d6 <__lshift+0xbe>
 800637e:	f1c9 0e20 	rsb	lr, r9, #32
 8006382:	468a      	mov	sl, r1
 8006384:	2200      	movs	r2, #0
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	fa00 f009 	lsl.w	r0, r0, r9
 800638c:	4302      	orrs	r2, r0
 800638e:	f84a 2b04 	str.w	r2, [sl], #4
 8006392:	f853 2b04 	ldr.w	r2, [r3], #4
 8006396:	459c      	cmp	ip, r3
 8006398:	fa22 f20e 	lsr.w	r2, r2, lr
 800639c:	d8f3      	bhi.n	8006386 <__lshift+0x6e>
 800639e:	ebac 0304 	sub.w	r3, ip, r4
 80063a2:	3b15      	subs	r3, #21
 80063a4:	f023 0303 	bic.w	r3, r3, #3
 80063a8:	3304      	adds	r3, #4
 80063aa:	f104 0015 	add.w	r0, r4, #21
 80063ae:	4584      	cmp	ip, r0
 80063b0:	bf38      	it	cc
 80063b2:	2304      	movcc	r3, #4
 80063b4:	50ca      	str	r2, [r1, r3]
 80063b6:	b10a      	cbz	r2, 80063bc <__lshift+0xa4>
 80063b8:	f108 0602 	add.w	r6, r8, #2
 80063bc:	3e01      	subs	r6, #1
 80063be:	4638      	mov	r0, r7
 80063c0:	612e      	str	r6, [r5, #16]
 80063c2:	4621      	mov	r1, r4
 80063c4:	f7ff fdd6 	bl	8005f74 <_Bfree>
 80063c8:	4628      	mov	r0, r5
 80063ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80063d2:	3301      	adds	r3, #1
 80063d4:	e7c5      	b.n	8006362 <__lshift+0x4a>
 80063d6:	3904      	subs	r1, #4
 80063d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80063e0:	459c      	cmp	ip, r3
 80063e2:	d8f9      	bhi.n	80063d8 <__lshift+0xc0>
 80063e4:	e7ea      	b.n	80063bc <__lshift+0xa4>
 80063e6:	bf00      	nop
 80063e8:	08007733 	.word	0x08007733
 80063ec:	08007744 	.word	0x08007744

080063f0 <__mcmp>:
 80063f0:	b530      	push	{r4, r5, lr}
 80063f2:	6902      	ldr	r2, [r0, #16]
 80063f4:	690c      	ldr	r4, [r1, #16]
 80063f6:	1b12      	subs	r2, r2, r4
 80063f8:	d10e      	bne.n	8006418 <__mcmp+0x28>
 80063fa:	f100 0314 	add.w	r3, r0, #20
 80063fe:	3114      	adds	r1, #20
 8006400:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006404:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006408:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800640c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006410:	42a5      	cmp	r5, r4
 8006412:	d003      	beq.n	800641c <__mcmp+0x2c>
 8006414:	d305      	bcc.n	8006422 <__mcmp+0x32>
 8006416:	2201      	movs	r2, #1
 8006418:	4610      	mov	r0, r2
 800641a:	bd30      	pop	{r4, r5, pc}
 800641c:	4283      	cmp	r3, r0
 800641e:	d3f3      	bcc.n	8006408 <__mcmp+0x18>
 8006420:	e7fa      	b.n	8006418 <__mcmp+0x28>
 8006422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006426:	e7f7      	b.n	8006418 <__mcmp+0x28>

08006428 <__mdiff>:
 8006428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	460c      	mov	r4, r1
 800642e:	4606      	mov	r6, r0
 8006430:	4611      	mov	r1, r2
 8006432:	4620      	mov	r0, r4
 8006434:	4617      	mov	r7, r2
 8006436:	f7ff ffdb 	bl	80063f0 <__mcmp>
 800643a:	1e05      	subs	r5, r0, #0
 800643c:	d110      	bne.n	8006460 <__mdiff+0x38>
 800643e:	4629      	mov	r1, r5
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff fd57 	bl	8005ef4 <_Balloc>
 8006446:	b930      	cbnz	r0, 8006456 <__mdiff+0x2e>
 8006448:	4b39      	ldr	r3, [pc, #228]	; (8006530 <__mdiff+0x108>)
 800644a:	4602      	mov	r2, r0
 800644c:	f240 2132 	movw	r1, #562	; 0x232
 8006450:	4838      	ldr	r0, [pc, #224]	; (8006534 <__mdiff+0x10c>)
 8006452:	f000 faf3 	bl	8006a3c <__assert_func>
 8006456:	2301      	movs	r3, #1
 8006458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800645c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006460:	bfa4      	itt	ge
 8006462:	463b      	movge	r3, r7
 8006464:	4627      	movge	r7, r4
 8006466:	4630      	mov	r0, r6
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	bfa6      	itte	ge
 800646c:	461c      	movge	r4, r3
 800646e:	2500      	movge	r5, #0
 8006470:	2501      	movlt	r5, #1
 8006472:	f7ff fd3f 	bl	8005ef4 <_Balloc>
 8006476:	b920      	cbnz	r0, 8006482 <__mdiff+0x5a>
 8006478:	4b2d      	ldr	r3, [pc, #180]	; (8006530 <__mdiff+0x108>)
 800647a:	4602      	mov	r2, r0
 800647c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006480:	e7e6      	b.n	8006450 <__mdiff+0x28>
 8006482:	693e      	ldr	r6, [r7, #16]
 8006484:	60c5      	str	r5, [r0, #12]
 8006486:	6925      	ldr	r5, [r4, #16]
 8006488:	f107 0114 	add.w	r1, r7, #20
 800648c:	f104 0914 	add.w	r9, r4, #20
 8006490:	f100 0e14 	add.w	lr, r0, #20
 8006494:	f107 0210 	add.w	r2, r7, #16
 8006498:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800649c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80064a0:	46f2      	mov	sl, lr
 80064a2:	2700      	movs	r7, #0
 80064a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80064a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80064ac:	fa1f f883 	uxth.w	r8, r3
 80064b0:	fa17 f78b 	uxtah	r7, r7, fp
 80064b4:	0c1b      	lsrs	r3, r3, #16
 80064b6:	eba7 0808 	sub.w	r8, r7, r8
 80064ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80064c2:	fa1f f888 	uxth.w	r8, r8
 80064c6:	141f      	asrs	r7, r3, #16
 80064c8:	454d      	cmp	r5, r9
 80064ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80064ce:	f84a 3b04 	str.w	r3, [sl], #4
 80064d2:	d8e7      	bhi.n	80064a4 <__mdiff+0x7c>
 80064d4:	1b2b      	subs	r3, r5, r4
 80064d6:	3b15      	subs	r3, #21
 80064d8:	f023 0303 	bic.w	r3, r3, #3
 80064dc:	3304      	adds	r3, #4
 80064de:	3415      	adds	r4, #21
 80064e0:	42a5      	cmp	r5, r4
 80064e2:	bf38      	it	cc
 80064e4:	2304      	movcc	r3, #4
 80064e6:	4419      	add	r1, r3
 80064e8:	4473      	add	r3, lr
 80064ea:	469e      	mov	lr, r3
 80064ec:	460d      	mov	r5, r1
 80064ee:	4565      	cmp	r5, ip
 80064f0:	d30e      	bcc.n	8006510 <__mdiff+0xe8>
 80064f2:	f10c 0203 	add.w	r2, ip, #3
 80064f6:	1a52      	subs	r2, r2, r1
 80064f8:	f022 0203 	bic.w	r2, r2, #3
 80064fc:	3903      	subs	r1, #3
 80064fe:	458c      	cmp	ip, r1
 8006500:	bf38      	it	cc
 8006502:	2200      	movcc	r2, #0
 8006504:	441a      	add	r2, r3
 8006506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800650a:	b17b      	cbz	r3, 800652c <__mdiff+0x104>
 800650c:	6106      	str	r6, [r0, #16]
 800650e:	e7a5      	b.n	800645c <__mdiff+0x34>
 8006510:	f855 8b04 	ldr.w	r8, [r5], #4
 8006514:	fa17 f488 	uxtah	r4, r7, r8
 8006518:	1422      	asrs	r2, r4, #16
 800651a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800651e:	b2a4      	uxth	r4, r4
 8006520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006524:	f84e 4b04 	str.w	r4, [lr], #4
 8006528:	1417      	asrs	r7, r2, #16
 800652a:	e7e0      	b.n	80064ee <__mdiff+0xc6>
 800652c:	3e01      	subs	r6, #1
 800652e:	e7ea      	b.n	8006506 <__mdiff+0xde>
 8006530:	08007733 	.word	0x08007733
 8006534:	08007744 	.word	0x08007744

08006538 <__d2b>:
 8006538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800653c:	4689      	mov	r9, r1
 800653e:	2101      	movs	r1, #1
 8006540:	ec57 6b10 	vmov	r6, r7, d0
 8006544:	4690      	mov	r8, r2
 8006546:	f7ff fcd5 	bl	8005ef4 <_Balloc>
 800654a:	4604      	mov	r4, r0
 800654c:	b930      	cbnz	r0, 800655c <__d2b+0x24>
 800654e:	4602      	mov	r2, r0
 8006550:	4b25      	ldr	r3, [pc, #148]	; (80065e8 <__d2b+0xb0>)
 8006552:	4826      	ldr	r0, [pc, #152]	; (80065ec <__d2b+0xb4>)
 8006554:	f240 310a 	movw	r1, #778	; 0x30a
 8006558:	f000 fa70 	bl	8006a3c <__assert_func>
 800655c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006564:	bb35      	cbnz	r5, 80065b4 <__d2b+0x7c>
 8006566:	2e00      	cmp	r6, #0
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	d028      	beq.n	80065be <__d2b+0x86>
 800656c:	4668      	mov	r0, sp
 800656e:	9600      	str	r6, [sp, #0]
 8006570:	f7ff fd8c 	bl	800608c <__lo0bits>
 8006574:	9900      	ldr	r1, [sp, #0]
 8006576:	b300      	cbz	r0, 80065ba <__d2b+0x82>
 8006578:	9a01      	ldr	r2, [sp, #4]
 800657a:	f1c0 0320 	rsb	r3, r0, #32
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	430b      	orrs	r3, r1
 8006584:	40c2      	lsrs	r2, r0
 8006586:	6163      	str	r3, [r4, #20]
 8006588:	9201      	str	r2, [sp, #4]
 800658a:	9b01      	ldr	r3, [sp, #4]
 800658c:	61a3      	str	r3, [r4, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	bf14      	ite	ne
 8006592:	2202      	movne	r2, #2
 8006594:	2201      	moveq	r2, #1
 8006596:	6122      	str	r2, [r4, #16]
 8006598:	b1d5      	cbz	r5, 80065d0 <__d2b+0x98>
 800659a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800659e:	4405      	add	r5, r0
 80065a0:	f8c9 5000 	str.w	r5, [r9]
 80065a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065a8:	f8c8 0000 	str.w	r0, [r8]
 80065ac:	4620      	mov	r0, r4
 80065ae:	b003      	add	sp, #12
 80065b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065b8:	e7d5      	b.n	8006566 <__d2b+0x2e>
 80065ba:	6161      	str	r1, [r4, #20]
 80065bc:	e7e5      	b.n	800658a <__d2b+0x52>
 80065be:	a801      	add	r0, sp, #4
 80065c0:	f7ff fd64 	bl	800608c <__lo0bits>
 80065c4:	9b01      	ldr	r3, [sp, #4]
 80065c6:	6163      	str	r3, [r4, #20]
 80065c8:	2201      	movs	r2, #1
 80065ca:	6122      	str	r2, [r4, #16]
 80065cc:	3020      	adds	r0, #32
 80065ce:	e7e3      	b.n	8006598 <__d2b+0x60>
 80065d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065d8:	f8c9 0000 	str.w	r0, [r9]
 80065dc:	6918      	ldr	r0, [r3, #16]
 80065de:	f7ff fd35 	bl	800604c <__hi0bits>
 80065e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065e6:	e7df      	b.n	80065a8 <__d2b+0x70>
 80065e8:	08007733 	.word	0x08007733
 80065ec:	08007744 	.word	0x08007744

080065f0 <_calloc_r>:
 80065f0:	b513      	push	{r0, r1, r4, lr}
 80065f2:	434a      	muls	r2, r1
 80065f4:	4611      	mov	r1, r2
 80065f6:	9201      	str	r2, [sp, #4]
 80065f8:	f000 f85a 	bl	80066b0 <_malloc_r>
 80065fc:	4604      	mov	r4, r0
 80065fe:	b118      	cbz	r0, 8006608 <_calloc_r+0x18>
 8006600:	9a01      	ldr	r2, [sp, #4]
 8006602:	2100      	movs	r1, #0
 8006604:	f7fe f952 	bl	80048ac <memset>
 8006608:	4620      	mov	r0, r4
 800660a:	b002      	add	sp, #8
 800660c:	bd10      	pop	{r4, pc}
	...

08006610 <_free_r>:
 8006610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006612:	2900      	cmp	r1, #0
 8006614:	d048      	beq.n	80066a8 <_free_r+0x98>
 8006616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800661a:	9001      	str	r0, [sp, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f1a1 0404 	sub.w	r4, r1, #4
 8006622:	bfb8      	it	lt
 8006624:	18e4      	addlt	r4, r4, r3
 8006626:	f000 fa65 	bl	8006af4 <__malloc_lock>
 800662a:	4a20      	ldr	r2, [pc, #128]	; (80066ac <_free_r+0x9c>)
 800662c:	9801      	ldr	r0, [sp, #4]
 800662e:	6813      	ldr	r3, [r2, #0]
 8006630:	4615      	mov	r5, r2
 8006632:	b933      	cbnz	r3, 8006642 <_free_r+0x32>
 8006634:	6063      	str	r3, [r4, #4]
 8006636:	6014      	str	r4, [r2, #0]
 8006638:	b003      	add	sp, #12
 800663a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800663e:	f000 ba5f 	b.w	8006b00 <__malloc_unlock>
 8006642:	42a3      	cmp	r3, r4
 8006644:	d90b      	bls.n	800665e <_free_r+0x4e>
 8006646:	6821      	ldr	r1, [r4, #0]
 8006648:	1862      	adds	r2, r4, r1
 800664a:	4293      	cmp	r3, r2
 800664c:	bf04      	itt	eq
 800664e:	681a      	ldreq	r2, [r3, #0]
 8006650:	685b      	ldreq	r3, [r3, #4]
 8006652:	6063      	str	r3, [r4, #4]
 8006654:	bf04      	itt	eq
 8006656:	1852      	addeq	r2, r2, r1
 8006658:	6022      	streq	r2, [r4, #0]
 800665a:	602c      	str	r4, [r5, #0]
 800665c:	e7ec      	b.n	8006638 <_free_r+0x28>
 800665e:	461a      	mov	r2, r3
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	b10b      	cbz	r3, 8006668 <_free_r+0x58>
 8006664:	42a3      	cmp	r3, r4
 8006666:	d9fa      	bls.n	800665e <_free_r+0x4e>
 8006668:	6811      	ldr	r1, [r2, #0]
 800666a:	1855      	adds	r5, r2, r1
 800666c:	42a5      	cmp	r5, r4
 800666e:	d10b      	bne.n	8006688 <_free_r+0x78>
 8006670:	6824      	ldr	r4, [r4, #0]
 8006672:	4421      	add	r1, r4
 8006674:	1854      	adds	r4, r2, r1
 8006676:	42a3      	cmp	r3, r4
 8006678:	6011      	str	r1, [r2, #0]
 800667a:	d1dd      	bne.n	8006638 <_free_r+0x28>
 800667c:	681c      	ldr	r4, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	6053      	str	r3, [r2, #4]
 8006682:	4421      	add	r1, r4
 8006684:	6011      	str	r1, [r2, #0]
 8006686:	e7d7      	b.n	8006638 <_free_r+0x28>
 8006688:	d902      	bls.n	8006690 <_free_r+0x80>
 800668a:	230c      	movs	r3, #12
 800668c:	6003      	str	r3, [r0, #0]
 800668e:	e7d3      	b.n	8006638 <_free_r+0x28>
 8006690:	6825      	ldr	r5, [r4, #0]
 8006692:	1961      	adds	r1, r4, r5
 8006694:	428b      	cmp	r3, r1
 8006696:	bf04      	itt	eq
 8006698:	6819      	ldreq	r1, [r3, #0]
 800669a:	685b      	ldreq	r3, [r3, #4]
 800669c:	6063      	str	r3, [r4, #4]
 800669e:	bf04      	itt	eq
 80066a0:	1949      	addeq	r1, r1, r5
 80066a2:	6021      	streq	r1, [r4, #0]
 80066a4:	6054      	str	r4, [r2, #4]
 80066a6:	e7c7      	b.n	8006638 <_free_r+0x28>
 80066a8:	b003      	add	sp, #12
 80066aa:	bd30      	pop	{r4, r5, pc}
 80066ac:	2000122c 	.word	0x2000122c

080066b0 <_malloc_r>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	1ccd      	adds	r5, r1, #3
 80066b4:	f025 0503 	bic.w	r5, r5, #3
 80066b8:	3508      	adds	r5, #8
 80066ba:	2d0c      	cmp	r5, #12
 80066bc:	bf38      	it	cc
 80066be:	250c      	movcc	r5, #12
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	4606      	mov	r6, r0
 80066c4:	db01      	blt.n	80066ca <_malloc_r+0x1a>
 80066c6:	42a9      	cmp	r1, r5
 80066c8:	d903      	bls.n	80066d2 <_malloc_r+0x22>
 80066ca:	230c      	movs	r3, #12
 80066cc:	6033      	str	r3, [r6, #0]
 80066ce:	2000      	movs	r0, #0
 80066d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d2:	f000 fa0f 	bl	8006af4 <__malloc_lock>
 80066d6:	4921      	ldr	r1, [pc, #132]	; (800675c <_malloc_r+0xac>)
 80066d8:	680a      	ldr	r2, [r1, #0]
 80066da:	4614      	mov	r4, r2
 80066dc:	b99c      	cbnz	r4, 8006706 <_malloc_r+0x56>
 80066de:	4f20      	ldr	r7, [pc, #128]	; (8006760 <_malloc_r+0xb0>)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	b923      	cbnz	r3, 80066ee <_malloc_r+0x3e>
 80066e4:	4621      	mov	r1, r4
 80066e6:	4630      	mov	r0, r6
 80066e8:	f000 f998 	bl	8006a1c <_sbrk_r>
 80066ec:	6038      	str	r0, [r7, #0]
 80066ee:	4629      	mov	r1, r5
 80066f0:	4630      	mov	r0, r6
 80066f2:	f000 f993 	bl	8006a1c <_sbrk_r>
 80066f6:	1c43      	adds	r3, r0, #1
 80066f8:	d123      	bne.n	8006742 <_malloc_r+0x92>
 80066fa:	230c      	movs	r3, #12
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	4630      	mov	r0, r6
 8006700:	f000 f9fe 	bl	8006b00 <__malloc_unlock>
 8006704:	e7e3      	b.n	80066ce <_malloc_r+0x1e>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	1b5b      	subs	r3, r3, r5
 800670a:	d417      	bmi.n	800673c <_malloc_r+0x8c>
 800670c:	2b0b      	cmp	r3, #11
 800670e:	d903      	bls.n	8006718 <_malloc_r+0x68>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	441c      	add	r4, r3
 8006714:	6025      	str	r5, [r4, #0]
 8006716:	e004      	b.n	8006722 <_malloc_r+0x72>
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	42a2      	cmp	r2, r4
 800671c:	bf0c      	ite	eq
 800671e:	600b      	streq	r3, [r1, #0]
 8006720:	6053      	strne	r3, [r2, #4]
 8006722:	4630      	mov	r0, r6
 8006724:	f000 f9ec 	bl	8006b00 <__malloc_unlock>
 8006728:	f104 000b 	add.w	r0, r4, #11
 800672c:	1d23      	adds	r3, r4, #4
 800672e:	f020 0007 	bic.w	r0, r0, #7
 8006732:	1ac2      	subs	r2, r0, r3
 8006734:	d0cc      	beq.n	80066d0 <_malloc_r+0x20>
 8006736:	1a1b      	subs	r3, r3, r0
 8006738:	50a3      	str	r3, [r4, r2]
 800673a:	e7c9      	b.n	80066d0 <_malloc_r+0x20>
 800673c:	4622      	mov	r2, r4
 800673e:	6864      	ldr	r4, [r4, #4]
 8006740:	e7cc      	b.n	80066dc <_malloc_r+0x2c>
 8006742:	1cc4      	adds	r4, r0, #3
 8006744:	f024 0403 	bic.w	r4, r4, #3
 8006748:	42a0      	cmp	r0, r4
 800674a:	d0e3      	beq.n	8006714 <_malloc_r+0x64>
 800674c:	1a21      	subs	r1, r4, r0
 800674e:	4630      	mov	r0, r6
 8006750:	f000 f964 	bl	8006a1c <_sbrk_r>
 8006754:	3001      	adds	r0, #1
 8006756:	d1dd      	bne.n	8006714 <_malloc_r+0x64>
 8006758:	e7cf      	b.n	80066fa <_malloc_r+0x4a>
 800675a:	bf00      	nop
 800675c:	2000122c 	.word	0x2000122c
 8006760:	20001230 	.word	0x20001230

08006764 <__ssputs_r>:
 8006764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006768:	688e      	ldr	r6, [r1, #8]
 800676a:	429e      	cmp	r6, r3
 800676c:	4682      	mov	sl, r0
 800676e:	460c      	mov	r4, r1
 8006770:	4690      	mov	r8, r2
 8006772:	461f      	mov	r7, r3
 8006774:	d838      	bhi.n	80067e8 <__ssputs_r+0x84>
 8006776:	898a      	ldrh	r2, [r1, #12]
 8006778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800677c:	d032      	beq.n	80067e4 <__ssputs_r+0x80>
 800677e:	6825      	ldr	r5, [r4, #0]
 8006780:	6909      	ldr	r1, [r1, #16]
 8006782:	eba5 0901 	sub.w	r9, r5, r1
 8006786:	6965      	ldr	r5, [r4, #20]
 8006788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800678c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006790:	3301      	adds	r3, #1
 8006792:	444b      	add	r3, r9
 8006794:	106d      	asrs	r5, r5, #1
 8006796:	429d      	cmp	r5, r3
 8006798:	bf38      	it	cc
 800679a:	461d      	movcc	r5, r3
 800679c:	0553      	lsls	r3, r2, #21
 800679e:	d531      	bpl.n	8006804 <__ssputs_r+0xa0>
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7ff ff85 	bl	80066b0 <_malloc_r>
 80067a6:	4606      	mov	r6, r0
 80067a8:	b950      	cbnz	r0, 80067c0 <__ssputs_r+0x5c>
 80067aa:	230c      	movs	r3, #12
 80067ac:	f8ca 3000 	str.w	r3, [sl]
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c0:	6921      	ldr	r1, [r4, #16]
 80067c2:	464a      	mov	r2, r9
 80067c4:	f7ff fb88 	bl	8005ed8 <memcpy>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	6126      	str	r6, [r4, #16]
 80067d6:	6165      	str	r5, [r4, #20]
 80067d8:	444e      	add	r6, r9
 80067da:	eba5 0509 	sub.w	r5, r5, r9
 80067de:	6026      	str	r6, [r4, #0]
 80067e0:	60a5      	str	r5, [r4, #8]
 80067e2:	463e      	mov	r6, r7
 80067e4:	42be      	cmp	r6, r7
 80067e6:	d900      	bls.n	80067ea <__ssputs_r+0x86>
 80067e8:	463e      	mov	r6, r7
 80067ea:	4632      	mov	r2, r6
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	4641      	mov	r1, r8
 80067f0:	f000 f966 	bl	8006ac0 <memmove>
 80067f4:	68a3      	ldr	r3, [r4, #8]
 80067f6:	6822      	ldr	r2, [r4, #0]
 80067f8:	1b9b      	subs	r3, r3, r6
 80067fa:	4432      	add	r2, r6
 80067fc:	60a3      	str	r3, [r4, #8]
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	2000      	movs	r0, #0
 8006802:	e7db      	b.n	80067bc <__ssputs_r+0x58>
 8006804:	462a      	mov	r2, r5
 8006806:	f000 f981 	bl	8006b0c <_realloc_r>
 800680a:	4606      	mov	r6, r0
 800680c:	2800      	cmp	r0, #0
 800680e:	d1e1      	bne.n	80067d4 <__ssputs_r+0x70>
 8006810:	6921      	ldr	r1, [r4, #16]
 8006812:	4650      	mov	r0, sl
 8006814:	f7ff fefc 	bl	8006610 <_free_r>
 8006818:	e7c7      	b.n	80067aa <__ssputs_r+0x46>
	...

0800681c <_svfiprintf_r>:
 800681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006820:	4698      	mov	r8, r3
 8006822:	898b      	ldrh	r3, [r1, #12]
 8006824:	061b      	lsls	r3, r3, #24
 8006826:	b09d      	sub	sp, #116	; 0x74
 8006828:	4607      	mov	r7, r0
 800682a:	460d      	mov	r5, r1
 800682c:	4614      	mov	r4, r2
 800682e:	d50e      	bpl.n	800684e <_svfiprintf_r+0x32>
 8006830:	690b      	ldr	r3, [r1, #16]
 8006832:	b963      	cbnz	r3, 800684e <_svfiprintf_r+0x32>
 8006834:	2140      	movs	r1, #64	; 0x40
 8006836:	f7ff ff3b 	bl	80066b0 <_malloc_r>
 800683a:	6028      	str	r0, [r5, #0]
 800683c:	6128      	str	r0, [r5, #16]
 800683e:	b920      	cbnz	r0, 800684a <_svfiprintf_r+0x2e>
 8006840:	230c      	movs	r3, #12
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006848:	e0d1      	b.n	80069ee <_svfiprintf_r+0x1d2>
 800684a:	2340      	movs	r3, #64	; 0x40
 800684c:	616b      	str	r3, [r5, #20]
 800684e:	2300      	movs	r3, #0
 8006850:	9309      	str	r3, [sp, #36]	; 0x24
 8006852:	2320      	movs	r3, #32
 8006854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006858:	f8cd 800c 	str.w	r8, [sp, #12]
 800685c:	2330      	movs	r3, #48	; 0x30
 800685e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a08 <_svfiprintf_r+0x1ec>
 8006862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006866:	f04f 0901 	mov.w	r9, #1
 800686a:	4623      	mov	r3, r4
 800686c:	469a      	mov	sl, r3
 800686e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006872:	b10a      	cbz	r2, 8006878 <_svfiprintf_r+0x5c>
 8006874:	2a25      	cmp	r2, #37	; 0x25
 8006876:	d1f9      	bne.n	800686c <_svfiprintf_r+0x50>
 8006878:	ebba 0b04 	subs.w	fp, sl, r4
 800687c:	d00b      	beq.n	8006896 <_svfiprintf_r+0x7a>
 800687e:	465b      	mov	r3, fp
 8006880:	4622      	mov	r2, r4
 8006882:	4629      	mov	r1, r5
 8006884:	4638      	mov	r0, r7
 8006886:	f7ff ff6d 	bl	8006764 <__ssputs_r>
 800688a:	3001      	adds	r0, #1
 800688c:	f000 80aa 	beq.w	80069e4 <_svfiprintf_r+0x1c8>
 8006890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006892:	445a      	add	r2, fp
 8006894:	9209      	str	r2, [sp, #36]	; 0x24
 8006896:	f89a 3000 	ldrb.w	r3, [sl]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80a2 	beq.w	80069e4 <_svfiprintf_r+0x1c8>
 80068a0:	2300      	movs	r3, #0
 80068a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068aa:	f10a 0a01 	add.w	sl, sl, #1
 80068ae:	9304      	str	r3, [sp, #16]
 80068b0:	9307      	str	r3, [sp, #28]
 80068b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068b6:	931a      	str	r3, [sp, #104]	; 0x68
 80068b8:	4654      	mov	r4, sl
 80068ba:	2205      	movs	r2, #5
 80068bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c0:	4851      	ldr	r0, [pc, #324]	; (8006a08 <_svfiprintf_r+0x1ec>)
 80068c2:	f7f9 fc8d 	bl	80001e0 <memchr>
 80068c6:	9a04      	ldr	r2, [sp, #16]
 80068c8:	b9d8      	cbnz	r0, 8006902 <_svfiprintf_r+0xe6>
 80068ca:	06d0      	lsls	r0, r2, #27
 80068cc:	bf44      	itt	mi
 80068ce:	2320      	movmi	r3, #32
 80068d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d4:	0711      	lsls	r1, r2, #28
 80068d6:	bf44      	itt	mi
 80068d8:	232b      	movmi	r3, #43	; 0x2b
 80068da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068de:	f89a 3000 	ldrb.w	r3, [sl]
 80068e2:	2b2a      	cmp	r3, #42	; 0x2a
 80068e4:	d015      	beq.n	8006912 <_svfiprintf_r+0xf6>
 80068e6:	9a07      	ldr	r2, [sp, #28]
 80068e8:	4654      	mov	r4, sl
 80068ea:	2000      	movs	r0, #0
 80068ec:	f04f 0c0a 	mov.w	ip, #10
 80068f0:	4621      	mov	r1, r4
 80068f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068f6:	3b30      	subs	r3, #48	; 0x30
 80068f8:	2b09      	cmp	r3, #9
 80068fa:	d94e      	bls.n	800699a <_svfiprintf_r+0x17e>
 80068fc:	b1b0      	cbz	r0, 800692c <_svfiprintf_r+0x110>
 80068fe:	9207      	str	r2, [sp, #28]
 8006900:	e014      	b.n	800692c <_svfiprintf_r+0x110>
 8006902:	eba0 0308 	sub.w	r3, r0, r8
 8006906:	fa09 f303 	lsl.w	r3, r9, r3
 800690a:	4313      	orrs	r3, r2
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	46a2      	mov	sl, r4
 8006910:	e7d2      	b.n	80068b8 <_svfiprintf_r+0x9c>
 8006912:	9b03      	ldr	r3, [sp, #12]
 8006914:	1d19      	adds	r1, r3, #4
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	9103      	str	r1, [sp, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	bfbb      	ittet	lt
 800691e:	425b      	neglt	r3, r3
 8006920:	f042 0202 	orrlt.w	r2, r2, #2
 8006924:	9307      	strge	r3, [sp, #28]
 8006926:	9307      	strlt	r3, [sp, #28]
 8006928:	bfb8      	it	lt
 800692a:	9204      	strlt	r2, [sp, #16]
 800692c:	7823      	ldrb	r3, [r4, #0]
 800692e:	2b2e      	cmp	r3, #46	; 0x2e
 8006930:	d10c      	bne.n	800694c <_svfiprintf_r+0x130>
 8006932:	7863      	ldrb	r3, [r4, #1]
 8006934:	2b2a      	cmp	r3, #42	; 0x2a
 8006936:	d135      	bne.n	80069a4 <_svfiprintf_r+0x188>
 8006938:	9b03      	ldr	r3, [sp, #12]
 800693a:	1d1a      	adds	r2, r3, #4
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	9203      	str	r2, [sp, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	bfb8      	it	lt
 8006944:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006948:	3402      	adds	r4, #2
 800694a:	9305      	str	r3, [sp, #20]
 800694c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a18 <_svfiprintf_r+0x1fc>
 8006950:	7821      	ldrb	r1, [r4, #0]
 8006952:	2203      	movs	r2, #3
 8006954:	4650      	mov	r0, sl
 8006956:	f7f9 fc43 	bl	80001e0 <memchr>
 800695a:	b140      	cbz	r0, 800696e <_svfiprintf_r+0x152>
 800695c:	2340      	movs	r3, #64	; 0x40
 800695e:	eba0 000a 	sub.w	r0, r0, sl
 8006962:	fa03 f000 	lsl.w	r0, r3, r0
 8006966:	9b04      	ldr	r3, [sp, #16]
 8006968:	4303      	orrs	r3, r0
 800696a:	3401      	adds	r4, #1
 800696c:	9304      	str	r3, [sp, #16]
 800696e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006972:	4826      	ldr	r0, [pc, #152]	; (8006a0c <_svfiprintf_r+0x1f0>)
 8006974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006978:	2206      	movs	r2, #6
 800697a:	f7f9 fc31 	bl	80001e0 <memchr>
 800697e:	2800      	cmp	r0, #0
 8006980:	d038      	beq.n	80069f4 <_svfiprintf_r+0x1d8>
 8006982:	4b23      	ldr	r3, [pc, #140]	; (8006a10 <_svfiprintf_r+0x1f4>)
 8006984:	bb1b      	cbnz	r3, 80069ce <_svfiprintf_r+0x1b2>
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	3307      	adds	r3, #7
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	3308      	adds	r3, #8
 8006990:	9303      	str	r3, [sp, #12]
 8006992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006994:	4433      	add	r3, r6
 8006996:	9309      	str	r3, [sp, #36]	; 0x24
 8006998:	e767      	b.n	800686a <_svfiprintf_r+0x4e>
 800699a:	fb0c 3202 	mla	r2, ip, r2, r3
 800699e:	460c      	mov	r4, r1
 80069a0:	2001      	movs	r0, #1
 80069a2:	e7a5      	b.n	80068f0 <_svfiprintf_r+0xd4>
 80069a4:	2300      	movs	r3, #0
 80069a6:	3401      	adds	r4, #1
 80069a8:	9305      	str	r3, [sp, #20]
 80069aa:	4619      	mov	r1, r3
 80069ac:	f04f 0c0a 	mov.w	ip, #10
 80069b0:	4620      	mov	r0, r4
 80069b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069b6:	3a30      	subs	r2, #48	; 0x30
 80069b8:	2a09      	cmp	r2, #9
 80069ba:	d903      	bls.n	80069c4 <_svfiprintf_r+0x1a8>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0c5      	beq.n	800694c <_svfiprintf_r+0x130>
 80069c0:	9105      	str	r1, [sp, #20]
 80069c2:	e7c3      	b.n	800694c <_svfiprintf_r+0x130>
 80069c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069c8:	4604      	mov	r4, r0
 80069ca:	2301      	movs	r3, #1
 80069cc:	e7f0      	b.n	80069b0 <_svfiprintf_r+0x194>
 80069ce:	ab03      	add	r3, sp, #12
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	462a      	mov	r2, r5
 80069d4:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <_svfiprintf_r+0x1f8>)
 80069d6:	a904      	add	r1, sp, #16
 80069d8:	4638      	mov	r0, r7
 80069da:	f7fe f80f 	bl	80049fc <_printf_float>
 80069de:	1c42      	adds	r2, r0, #1
 80069e0:	4606      	mov	r6, r0
 80069e2:	d1d6      	bne.n	8006992 <_svfiprintf_r+0x176>
 80069e4:	89ab      	ldrh	r3, [r5, #12]
 80069e6:	065b      	lsls	r3, r3, #25
 80069e8:	f53f af2c 	bmi.w	8006844 <_svfiprintf_r+0x28>
 80069ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ee:	b01d      	add	sp, #116	; 0x74
 80069f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f4:	ab03      	add	r3, sp, #12
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	462a      	mov	r2, r5
 80069fa:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <_svfiprintf_r+0x1f8>)
 80069fc:	a904      	add	r1, sp, #16
 80069fe:	4638      	mov	r0, r7
 8006a00:	f7fe faa0 	bl	8004f44 <_printf_i>
 8006a04:	e7eb      	b.n	80069de <_svfiprintf_r+0x1c2>
 8006a06:	bf00      	nop
 8006a08:	080078a4 	.word	0x080078a4
 8006a0c:	080078ae 	.word	0x080078ae
 8006a10:	080049fd 	.word	0x080049fd
 8006a14:	08006765 	.word	0x08006765
 8006a18:	080078aa 	.word	0x080078aa

08006a1c <_sbrk_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d06      	ldr	r5, [pc, #24]	; (8006a38 <_sbrk_r+0x1c>)
 8006a20:	2300      	movs	r3, #0
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	f7fa ffdc 	bl	80019e4 <_sbrk>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_sbrk_r+0x1a>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_sbrk_r+0x1a>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	20001328 	.word	0x20001328

08006a3c <__assert_func>:
 8006a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a3e:	4614      	mov	r4, r2
 8006a40:	461a      	mov	r2, r3
 8006a42:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <__assert_func+0x2c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4605      	mov	r5, r0
 8006a48:	68d8      	ldr	r0, [r3, #12]
 8006a4a:	b14c      	cbz	r4, 8006a60 <__assert_func+0x24>
 8006a4c:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <__assert_func+0x30>)
 8006a4e:	9100      	str	r1, [sp, #0]
 8006a50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a54:	4906      	ldr	r1, [pc, #24]	; (8006a70 <__assert_func+0x34>)
 8006a56:	462b      	mov	r3, r5
 8006a58:	f000 f80e 	bl	8006a78 <fiprintf>
 8006a5c:	f000 faa4 	bl	8006fa8 <abort>
 8006a60:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <__assert_func+0x38>)
 8006a62:	461c      	mov	r4, r3
 8006a64:	e7f3      	b.n	8006a4e <__assert_func+0x12>
 8006a66:	bf00      	nop
 8006a68:	20000028 	.word	0x20000028
 8006a6c:	080078b5 	.word	0x080078b5
 8006a70:	080078c2 	.word	0x080078c2
 8006a74:	080078f0 	.word	0x080078f0

08006a78 <fiprintf>:
 8006a78:	b40e      	push	{r1, r2, r3}
 8006a7a:	b503      	push	{r0, r1, lr}
 8006a7c:	4601      	mov	r1, r0
 8006a7e:	ab03      	add	r3, sp, #12
 8006a80:	4805      	ldr	r0, [pc, #20]	; (8006a98 <fiprintf+0x20>)
 8006a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a86:	6800      	ldr	r0, [r0, #0]
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	f000 f88f 	bl	8006bac <_vfiprintf_r>
 8006a8e:	b002      	add	sp, #8
 8006a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a94:	b003      	add	sp, #12
 8006a96:	4770      	bx	lr
 8006a98:	20000028 	.word	0x20000028

08006a9c <__ascii_mbtowc>:
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	b901      	cbnz	r1, 8006aa2 <__ascii_mbtowc+0x6>
 8006aa0:	a901      	add	r1, sp, #4
 8006aa2:	b142      	cbz	r2, 8006ab6 <__ascii_mbtowc+0x1a>
 8006aa4:	b14b      	cbz	r3, 8006aba <__ascii_mbtowc+0x1e>
 8006aa6:	7813      	ldrb	r3, [r2, #0]
 8006aa8:	600b      	str	r3, [r1, #0]
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	1e10      	subs	r0, r2, #0
 8006aae:	bf18      	it	ne
 8006ab0:	2001      	movne	r0, #1
 8006ab2:	b002      	add	sp, #8
 8006ab4:	4770      	bx	lr
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	e7fb      	b.n	8006ab2 <__ascii_mbtowc+0x16>
 8006aba:	f06f 0001 	mvn.w	r0, #1
 8006abe:	e7f8      	b.n	8006ab2 <__ascii_mbtowc+0x16>

08006ac0 <memmove>:
 8006ac0:	4288      	cmp	r0, r1
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	eb01 0402 	add.w	r4, r1, r2
 8006ac8:	d902      	bls.n	8006ad0 <memmove+0x10>
 8006aca:	4284      	cmp	r4, r0
 8006acc:	4623      	mov	r3, r4
 8006ace:	d807      	bhi.n	8006ae0 <memmove+0x20>
 8006ad0:	1e43      	subs	r3, r0, #1
 8006ad2:	42a1      	cmp	r1, r4
 8006ad4:	d008      	beq.n	8006ae8 <memmove+0x28>
 8006ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ade:	e7f8      	b.n	8006ad2 <memmove+0x12>
 8006ae0:	4402      	add	r2, r0
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	428a      	cmp	r2, r1
 8006ae6:	d100      	bne.n	8006aea <memmove+0x2a>
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006af2:	e7f7      	b.n	8006ae4 <memmove+0x24>

08006af4 <__malloc_lock>:
 8006af4:	4801      	ldr	r0, [pc, #4]	; (8006afc <__malloc_lock+0x8>)
 8006af6:	f000 bc17 	b.w	8007328 <__retarget_lock_acquire_recursive>
 8006afa:	bf00      	nop
 8006afc:	20001330 	.word	0x20001330

08006b00 <__malloc_unlock>:
 8006b00:	4801      	ldr	r0, [pc, #4]	; (8006b08 <__malloc_unlock+0x8>)
 8006b02:	f000 bc12 	b.w	800732a <__retarget_lock_release_recursive>
 8006b06:	bf00      	nop
 8006b08:	20001330 	.word	0x20001330

08006b0c <_realloc_r>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	4607      	mov	r7, r0
 8006b10:	4614      	mov	r4, r2
 8006b12:	460e      	mov	r6, r1
 8006b14:	b921      	cbnz	r1, 8006b20 <_realloc_r+0x14>
 8006b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	f7ff bdc8 	b.w	80066b0 <_malloc_r>
 8006b20:	b922      	cbnz	r2, 8006b2c <_realloc_r+0x20>
 8006b22:	f7ff fd75 	bl	8006610 <_free_r>
 8006b26:	4625      	mov	r5, r4
 8006b28:	4628      	mov	r0, r5
 8006b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b2c:	f000 fc62 	bl	80073f4 <_malloc_usable_size_r>
 8006b30:	42a0      	cmp	r0, r4
 8006b32:	d20f      	bcs.n	8006b54 <_realloc_r+0x48>
 8006b34:	4621      	mov	r1, r4
 8006b36:	4638      	mov	r0, r7
 8006b38:	f7ff fdba 	bl	80066b0 <_malloc_r>
 8006b3c:	4605      	mov	r5, r0
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d0f2      	beq.n	8006b28 <_realloc_r+0x1c>
 8006b42:	4631      	mov	r1, r6
 8006b44:	4622      	mov	r2, r4
 8006b46:	f7ff f9c7 	bl	8005ed8 <memcpy>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	f7ff fd5f 	bl	8006610 <_free_r>
 8006b52:	e7e9      	b.n	8006b28 <_realloc_r+0x1c>
 8006b54:	4635      	mov	r5, r6
 8006b56:	e7e7      	b.n	8006b28 <_realloc_r+0x1c>

08006b58 <__sfputc_r>:
 8006b58:	6893      	ldr	r3, [r2, #8]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	b410      	push	{r4}
 8006b60:	6093      	str	r3, [r2, #8]
 8006b62:	da08      	bge.n	8006b76 <__sfputc_r+0x1e>
 8006b64:	6994      	ldr	r4, [r2, #24]
 8006b66:	42a3      	cmp	r3, r4
 8006b68:	db01      	blt.n	8006b6e <__sfputc_r+0x16>
 8006b6a:	290a      	cmp	r1, #10
 8006b6c:	d103      	bne.n	8006b76 <__sfputc_r+0x1e>
 8006b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b72:	f000 b94b 	b.w	8006e0c <__swbuf_r>
 8006b76:	6813      	ldr	r3, [r2, #0]
 8006b78:	1c58      	adds	r0, r3, #1
 8006b7a:	6010      	str	r0, [r2, #0]
 8006b7c:	7019      	strb	r1, [r3, #0]
 8006b7e:	4608      	mov	r0, r1
 8006b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <__sfputs_r>:
 8006b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b88:	4606      	mov	r6, r0
 8006b8a:	460f      	mov	r7, r1
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	18d5      	adds	r5, r2, r3
 8006b90:	42ac      	cmp	r4, r5
 8006b92:	d101      	bne.n	8006b98 <__sfputs_r+0x12>
 8006b94:	2000      	movs	r0, #0
 8006b96:	e007      	b.n	8006ba8 <__sfputs_r+0x22>
 8006b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7ff ffda 	bl	8006b58 <__sfputc_r>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d1f3      	bne.n	8006b90 <__sfputs_r+0xa>
 8006ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bac <_vfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	b09d      	sub	sp, #116	; 0x74
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	4698      	mov	r8, r3
 8006bb8:	4606      	mov	r6, r0
 8006bba:	b118      	cbz	r0, 8006bc4 <_vfiprintf_r+0x18>
 8006bbc:	6983      	ldr	r3, [r0, #24]
 8006bbe:	b90b      	cbnz	r3, 8006bc4 <_vfiprintf_r+0x18>
 8006bc0:	f000 fb14 	bl	80071ec <__sinit>
 8006bc4:	4b89      	ldr	r3, [pc, #548]	; (8006dec <_vfiprintf_r+0x240>)
 8006bc6:	429d      	cmp	r5, r3
 8006bc8:	d11b      	bne.n	8006c02 <_vfiprintf_r+0x56>
 8006bca:	6875      	ldr	r5, [r6, #4]
 8006bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bce:	07d9      	lsls	r1, r3, #31
 8006bd0:	d405      	bmi.n	8006bde <_vfiprintf_r+0x32>
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	059a      	lsls	r2, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_vfiprintf_r+0x32>
 8006bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bda:	f000 fba5 	bl	8007328 <__retarget_lock_acquire_recursive>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	071b      	lsls	r3, r3, #28
 8006be2:	d501      	bpl.n	8006be8 <_vfiprintf_r+0x3c>
 8006be4:	692b      	ldr	r3, [r5, #16]
 8006be6:	b9eb      	cbnz	r3, 8006c24 <_vfiprintf_r+0x78>
 8006be8:	4629      	mov	r1, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	f000 f96e 	bl	8006ecc <__swsetup_r>
 8006bf0:	b1c0      	cbz	r0, 8006c24 <_vfiprintf_r+0x78>
 8006bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf4:	07dc      	lsls	r4, r3, #31
 8006bf6:	d50e      	bpl.n	8006c16 <_vfiprintf_r+0x6a>
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bfc:	b01d      	add	sp, #116	; 0x74
 8006bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c02:	4b7b      	ldr	r3, [pc, #492]	; (8006df0 <_vfiprintf_r+0x244>)
 8006c04:	429d      	cmp	r5, r3
 8006c06:	d101      	bne.n	8006c0c <_vfiprintf_r+0x60>
 8006c08:	68b5      	ldr	r5, [r6, #8]
 8006c0a:	e7df      	b.n	8006bcc <_vfiprintf_r+0x20>
 8006c0c:	4b79      	ldr	r3, [pc, #484]	; (8006df4 <_vfiprintf_r+0x248>)
 8006c0e:	429d      	cmp	r5, r3
 8006c10:	bf08      	it	eq
 8006c12:	68f5      	ldreq	r5, [r6, #12]
 8006c14:	e7da      	b.n	8006bcc <_vfiprintf_r+0x20>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	0598      	lsls	r0, r3, #22
 8006c1a:	d4ed      	bmi.n	8006bf8 <_vfiprintf_r+0x4c>
 8006c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c1e:	f000 fb84 	bl	800732a <__retarget_lock_release_recursive>
 8006c22:	e7e9      	b.n	8006bf8 <_vfiprintf_r+0x4c>
 8006c24:	2300      	movs	r3, #0
 8006c26:	9309      	str	r3, [sp, #36]	; 0x24
 8006c28:	2320      	movs	r3, #32
 8006c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c32:	2330      	movs	r3, #48	; 0x30
 8006c34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006df8 <_vfiprintf_r+0x24c>
 8006c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c3c:	f04f 0901 	mov.w	r9, #1
 8006c40:	4623      	mov	r3, r4
 8006c42:	469a      	mov	sl, r3
 8006c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c48:	b10a      	cbz	r2, 8006c4e <_vfiprintf_r+0xa2>
 8006c4a:	2a25      	cmp	r2, #37	; 0x25
 8006c4c:	d1f9      	bne.n	8006c42 <_vfiprintf_r+0x96>
 8006c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c52:	d00b      	beq.n	8006c6c <_vfiprintf_r+0xc0>
 8006c54:	465b      	mov	r3, fp
 8006c56:	4622      	mov	r2, r4
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ff93 	bl	8006b86 <__sfputs_r>
 8006c60:	3001      	adds	r0, #1
 8006c62:	f000 80aa 	beq.w	8006dba <_vfiprintf_r+0x20e>
 8006c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c68:	445a      	add	r2, fp
 8006c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80a2 	beq.w	8006dba <_vfiprintf_r+0x20e>
 8006c76:	2300      	movs	r3, #0
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c80:	f10a 0a01 	add.w	sl, sl, #1
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	9307      	str	r3, [sp, #28]
 8006c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c8e:	4654      	mov	r4, sl
 8006c90:	2205      	movs	r2, #5
 8006c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c96:	4858      	ldr	r0, [pc, #352]	; (8006df8 <_vfiprintf_r+0x24c>)
 8006c98:	f7f9 faa2 	bl	80001e0 <memchr>
 8006c9c:	9a04      	ldr	r2, [sp, #16]
 8006c9e:	b9d8      	cbnz	r0, 8006cd8 <_vfiprintf_r+0x12c>
 8006ca0:	06d1      	lsls	r1, r2, #27
 8006ca2:	bf44      	itt	mi
 8006ca4:	2320      	movmi	r3, #32
 8006ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006caa:	0713      	lsls	r3, r2, #28
 8006cac:	bf44      	itt	mi
 8006cae:	232b      	movmi	r3, #43	; 0x2b
 8006cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cba:	d015      	beq.n	8006ce8 <_vfiprintf_r+0x13c>
 8006cbc:	9a07      	ldr	r2, [sp, #28]
 8006cbe:	4654      	mov	r4, sl
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f04f 0c0a 	mov.w	ip, #10
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ccc:	3b30      	subs	r3, #48	; 0x30
 8006cce:	2b09      	cmp	r3, #9
 8006cd0:	d94e      	bls.n	8006d70 <_vfiprintf_r+0x1c4>
 8006cd2:	b1b0      	cbz	r0, 8006d02 <_vfiprintf_r+0x156>
 8006cd4:	9207      	str	r2, [sp, #28]
 8006cd6:	e014      	b.n	8006d02 <_vfiprintf_r+0x156>
 8006cd8:	eba0 0308 	sub.w	r3, r0, r8
 8006cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	46a2      	mov	sl, r4
 8006ce6:	e7d2      	b.n	8006c8e <_vfiprintf_r+0xe2>
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	1d19      	adds	r1, r3, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	9103      	str	r1, [sp, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	bfbb      	ittet	lt
 8006cf4:	425b      	neglt	r3, r3
 8006cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cfa:	9307      	strge	r3, [sp, #28]
 8006cfc:	9307      	strlt	r3, [sp, #28]
 8006cfe:	bfb8      	it	lt
 8006d00:	9204      	strlt	r2, [sp, #16]
 8006d02:	7823      	ldrb	r3, [r4, #0]
 8006d04:	2b2e      	cmp	r3, #46	; 0x2e
 8006d06:	d10c      	bne.n	8006d22 <_vfiprintf_r+0x176>
 8006d08:	7863      	ldrb	r3, [r4, #1]
 8006d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d0c:	d135      	bne.n	8006d7a <_vfiprintf_r+0x1ce>
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	1d1a      	adds	r2, r3, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	9203      	str	r2, [sp, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bfb8      	it	lt
 8006d1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d1e:	3402      	adds	r4, #2
 8006d20:	9305      	str	r3, [sp, #20]
 8006d22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e08 <_vfiprintf_r+0x25c>
 8006d26:	7821      	ldrb	r1, [r4, #0]
 8006d28:	2203      	movs	r2, #3
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	f7f9 fa58 	bl	80001e0 <memchr>
 8006d30:	b140      	cbz	r0, 8006d44 <_vfiprintf_r+0x198>
 8006d32:	2340      	movs	r3, #64	; 0x40
 8006d34:	eba0 000a 	sub.w	r0, r0, sl
 8006d38:	fa03 f000 	lsl.w	r0, r3, r0
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	4303      	orrs	r3, r0
 8006d40:	3401      	adds	r4, #1
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d48:	482c      	ldr	r0, [pc, #176]	; (8006dfc <_vfiprintf_r+0x250>)
 8006d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d4e:	2206      	movs	r2, #6
 8006d50:	f7f9 fa46 	bl	80001e0 <memchr>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d03f      	beq.n	8006dd8 <_vfiprintf_r+0x22c>
 8006d58:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <_vfiprintf_r+0x254>)
 8006d5a:	bb1b      	cbnz	r3, 8006da4 <_vfiprintf_r+0x1f8>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	3307      	adds	r3, #7
 8006d60:	f023 0307 	bic.w	r3, r3, #7
 8006d64:	3308      	adds	r3, #8
 8006d66:	9303      	str	r3, [sp, #12]
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	443b      	add	r3, r7
 8006d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6e:	e767      	b.n	8006c40 <_vfiprintf_r+0x94>
 8006d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d74:	460c      	mov	r4, r1
 8006d76:	2001      	movs	r0, #1
 8006d78:	e7a5      	b.n	8006cc6 <_vfiprintf_r+0x11a>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	3401      	adds	r4, #1
 8006d7e:	9305      	str	r3, [sp, #20]
 8006d80:	4619      	mov	r1, r3
 8006d82:	f04f 0c0a 	mov.w	ip, #10
 8006d86:	4620      	mov	r0, r4
 8006d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d8c:	3a30      	subs	r2, #48	; 0x30
 8006d8e:	2a09      	cmp	r2, #9
 8006d90:	d903      	bls.n	8006d9a <_vfiprintf_r+0x1ee>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0c5      	beq.n	8006d22 <_vfiprintf_r+0x176>
 8006d96:	9105      	str	r1, [sp, #20]
 8006d98:	e7c3      	b.n	8006d22 <_vfiprintf_r+0x176>
 8006d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d9e:	4604      	mov	r4, r0
 8006da0:	2301      	movs	r3, #1
 8006da2:	e7f0      	b.n	8006d86 <_vfiprintf_r+0x1da>
 8006da4:	ab03      	add	r3, sp, #12
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	462a      	mov	r2, r5
 8006daa:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <_vfiprintf_r+0x258>)
 8006dac:	a904      	add	r1, sp, #16
 8006dae:	4630      	mov	r0, r6
 8006db0:	f7fd fe24 	bl	80049fc <_printf_float>
 8006db4:	4607      	mov	r7, r0
 8006db6:	1c78      	adds	r0, r7, #1
 8006db8:	d1d6      	bne.n	8006d68 <_vfiprintf_r+0x1bc>
 8006dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dbc:	07d9      	lsls	r1, r3, #31
 8006dbe:	d405      	bmi.n	8006dcc <_vfiprintf_r+0x220>
 8006dc0:	89ab      	ldrh	r3, [r5, #12]
 8006dc2:	059a      	lsls	r2, r3, #22
 8006dc4:	d402      	bmi.n	8006dcc <_vfiprintf_r+0x220>
 8006dc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dc8:	f000 faaf 	bl	800732a <__retarget_lock_release_recursive>
 8006dcc:	89ab      	ldrh	r3, [r5, #12]
 8006dce:	065b      	lsls	r3, r3, #25
 8006dd0:	f53f af12 	bmi.w	8006bf8 <_vfiprintf_r+0x4c>
 8006dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dd6:	e711      	b.n	8006bfc <_vfiprintf_r+0x50>
 8006dd8:	ab03      	add	r3, sp, #12
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	462a      	mov	r2, r5
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <_vfiprintf_r+0x258>)
 8006de0:	a904      	add	r1, sp, #16
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7fe f8ae 	bl	8004f44 <_printf_i>
 8006de8:	e7e4      	b.n	8006db4 <_vfiprintf_r+0x208>
 8006dea:	bf00      	nop
 8006dec:	08007a1c 	.word	0x08007a1c
 8006df0:	08007a3c 	.word	0x08007a3c
 8006df4:	080079fc 	.word	0x080079fc
 8006df8:	080078a4 	.word	0x080078a4
 8006dfc:	080078ae 	.word	0x080078ae
 8006e00:	080049fd 	.word	0x080049fd
 8006e04:	08006b87 	.word	0x08006b87
 8006e08:	080078aa 	.word	0x080078aa

08006e0c <__swbuf_r>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	460e      	mov	r6, r1
 8006e10:	4614      	mov	r4, r2
 8006e12:	4605      	mov	r5, r0
 8006e14:	b118      	cbz	r0, 8006e1e <__swbuf_r+0x12>
 8006e16:	6983      	ldr	r3, [r0, #24]
 8006e18:	b90b      	cbnz	r3, 8006e1e <__swbuf_r+0x12>
 8006e1a:	f000 f9e7 	bl	80071ec <__sinit>
 8006e1e:	4b21      	ldr	r3, [pc, #132]	; (8006ea4 <__swbuf_r+0x98>)
 8006e20:	429c      	cmp	r4, r3
 8006e22:	d12b      	bne.n	8006e7c <__swbuf_r+0x70>
 8006e24:	686c      	ldr	r4, [r5, #4]
 8006e26:	69a3      	ldr	r3, [r4, #24]
 8006e28:	60a3      	str	r3, [r4, #8]
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	071a      	lsls	r2, r3, #28
 8006e2e:	d52f      	bpl.n	8006e90 <__swbuf_r+0x84>
 8006e30:	6923      	ldr	r3, [r4, #16]
 8006e32:	b36b      	cbz	r3, 8006e90 <__swbuf_r+0x84>
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	6820      	ldr	r0, [r4, #0]
 8006e38:	1ac0      	subs	r0, r0, r3
 8006e3a:	6963      	ldr	r3, [r4, #20]
 8006e3c:	b2f6      	uxtb	r6, r6
 8006e3e:	4283      	cmp	r3, r0
 8006e40:	4637      	mov	r7, r6
 8006e42:	dc04      	bgt.n	8006e4e <__swbuf_r+0x42>
 8006e44:	4621      	mov	r1, r4
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 f93c 	bl	80070c4 <_fflush_r>
 8006e4c:	bb30      	cbnz	r0, 8006e9c <__swbuf_r+0x90>
 8006e4e:	68a3      	ldr	r3, [r4, #8]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	60a3      	str	r3, [r4, #8]
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	6022      	str	r2, [r4, #0]
 8006e5a:	701e      	strb	r6, [r3, #0]
 8006e5c:	6963      	ldr	r3, [r4, #20]
 8006e5e:	3001      	adds	r0, #1
 8006e60:	4283      	cmp	r3, r0
 8006e62:	d004      	beq.n	8006e6e <__swbuf_r+0x62>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	07db      	lsls	r3, r3, #31
 8006e68:	d506      	bpl.n	8006e78 <__swbuf_r+0x6c>
 8006e6a:	2e0a      	cmp	r6, #10
 8006e6c:	d104      	bne.n	8006e78 <__swbuf_r+0x6c>
 8006e6e:	4621      	mov	r1, r4
 8006e70:	4628      	mov	r0, r5
 8006e72:	f000 f927 	bl	80070c4 <_fflush_r>
 8006e76:	b988      	cbnz	r0, 8006e9c <__swbuf_r+0x90>
 8006e78:	4638      	mov	r0, r7
 8006e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <__swbuf_r+0x9c>)
 8006e7e:	429c      	cmp	r4, r3
 8006e80:	d101      	bne.n	8006e86 <__swbuf_r+0x7a>
 8006e82:	68ac      	ldr	r4, [r5, #8]
 8006e84:	e7cf      	b.n	8006e26 <__swbuf_r+0x1a>
 8006e86:	4b09      	ldr	r3, [pc, #36]	; (8006eac <__swbuf_r+0xa0>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	bf08      	it	eq
 8006e8c:	68ec      	ldreq	r4, [r5, #12]
 8006e8e:	e7ca      	b.n	8006e26 <__swbuf_r+0x1a>
 8006e90:	4621      	mov	r1, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 f81a 	bl	8006ecc <__swsetup_r>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d0cb      	beq.n	8006e34 <__swbuf_r+0x28>
 8006e9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006ea0:	e7ea      	b.n	8006e78 <__swbuf_r+0x6c>
 8006ea2:	bf00      	nop
 8006ea4:	08007a1c 	.word	0x08007a1c
 8006ea8:	08007a3c 	.word	0x08007a3c
 8006eac:	080079fc 	.word	0x080079fc

08006eb0 <__ascii_wctomb>:
 8006eb0:	b149      	cbz	r1, 8006ec6 <__ascii_wctomb+0x16>
 8006eb2:	2aff      	cmp	r2, #255	; 0xff
 8006eb4:	bf85      	ittet	hi
 8006eb6:	238a      	movhi	r3, #138	; 0x8a
 8006eb8:	6003      	strhi	r3, [r0, #0]
 8006eba:	700a      	strbls	r2, [r1, #0]
 8006ebc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006ec0:	bf98      	it	ls
 8006ec2:	2001      	movls	r0, #1
 8006ec4:	4770      	bx	lr
 8006ec6:	4608      	mov	r0, r1
 8006ec8:	4770      	bx	lr
	...

08006ecc <__swsetup_r>:
 8006ecc:	4b32      	ldr	r3, [pc, #200]	; (8006f98 <__swsetup_r+0xcc>)
 8006ece:	b570      	push	{r4, r5, r6, lr}
 8006ed0:	681d      	ldr	r5, [r3, #0]
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	b125      	cbz	r5, 8006ee2 <__swsetup_r+0x16>
 8006ed8:	69ab      	ldr	r3, [r5, #24]
 8006eda:	b913      	cbnz	r3, 8006ee2 <__swsetup_r+0x16>
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 f985 	bl	80071ec <__sinit>
 8006ee2:	4b2e      	ldr	r3, [pc, #184]	; (8006f9c <__swsetup_r+0xd0>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	d10f      	bne.n	8006f08 <__swsetup_r+0x3c>
 8006ee8:	686c      	ldr	r4, [r5, #4]
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ef0:	0719      	lsls	r1, r3, #28
 8006ef2:	d42c      	bmi.n	8006f4e <__swsetup_r+0x82>
 8006ef4:	06dd      	lsls	r5, r3, #27
 8006ef6:	d411      	bmi.n	8006f1c <__swsetup_r+0x50>
 8006ef8:	2309      	movs	r3, #9
 8006efa:	6033      	str	r3, [r6, #0]
 8006efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f06:	e03e      	b.n	8006f86 <__swsetup_r+0xba>
 8006f08:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <__swsetup_r+0xd4>)
 8006f0a:	429c      	cmp	r4, r3
 8006f0c:	d101      	bne.n	8006f12 <__swsetup_r+0x46>
 8006f0e:	68ac      	ldr	r4, [r5, #8]
 8006f10:	e7eb      	b.n	8006eea <__swsetup_r+0x1e>
 8006f12:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <__swsetup_r+0xd8>)
 8006f14:	429c      	cmp	r4, r3
 8006f16:	bf08      	it	eq
 8006f18:	68ec      	ldreq	r4, [r5, #12]
 8006f1a:	e7e6      	b.n	8006eea <__swsetup_r+0x1e>
 8006f1c:	0758      	lsls	r0, r3, #29
 8006f1e:	d512      	bpl.n	8006f46 <__swsetup_r+0x7a>
 8006f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f22:	b141      	cbz	r1, 8006f36 <__swsetup_r+0x6a>
 8006f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f28:	4299      	cmp	r1, r3
 8006f2a:	d002      	beq.n	8006f32 <__swsetup_r+0x66>
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7ff fb6f 	bl	8006610 <_free_r>
 8006f32:	2300      	movs	r3, #0
 8006f34:	6363      	str	r3, [r4, #52]	; 0x34
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6063      	str	r3, [r4, #4]
 8006f42:	6923      	ldr	r3, [r4, #16]
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	f043 0308 	orr.w	r3, r3, #8
 8006f4c:	81a3      	strh	r3, [r4, #12]
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	b94b      	cbnz	r3, 8006f66 <__swsetup_r+0x9a>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f5c:	d003      	beq.n	8006f66 <__swsetup_r+0x9a>
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4630      	mov	r0, r6
 8006f62:	f000 fa07 	bl	8007374 <__smakebuf_r>
 8006f66:	89a0      	ldrh	r0, [r4, #12]
 8006f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f6c:	f010 0301 	ands.w	r3, r0, #1
 8006f70:	d00a      	beq.n	8006f88 <__swsetup_r+0xbc>
 8006f72:	2300      	movs	r3, #0
 8006f74:	60a3      	str	r3, [r4, #8]
 8006f76:	6963      	ldr	r3, [r4, #20]
 8006f78:	425b      	negs	r3, r3
 8006f7a:	61a3      	str	r3, [r4, #24]
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	b943      	cbnz	r3, 8006f92 <__swsetup_r+0xc6>
 8006f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f84:	d1ba      	bne.n	8006efc <__swsetup_r+0x30>
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	0781      	lsls	r1, r0, #30
 8006f8a:	bf58      	it	pl
 8006f8c:	6963      	ldrpl	r3, [r4, #20]
 8006f8e:	60a3      	str	r3, [r4, #8]
 8006f90:	e7f4      	b.n	8006f7c <__swsetup_r+0xb0>
 8006f92:	2000      	movs	r0, #0
 8006f94:	e7f7      	b.n	8006f86 <__swsetup_r+0xba>
 8006f96:	bf00      	nop
 8006f98:	20000028 	.word	0x20000028
 8006f9c:	08007a1c 	.word	0x08007a1c
 8006fa0:	08007a3c 	.word	0x08007a3c
 8006fa4:	080079fc 	.word	0x080079fc

08006fa8 <abort>:
 8006fa8:	b508      	push	{r3, lr}
 8006faa:	2006      	movs	r0, #6
 8006fac:	f000 fa52 	bl	8007454 <raise>
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	f7fa fc9f 	bl	80018f4 <_exit>
	...

08006fb8 <__sflush_r>:
 8006fb8:	898a      	ldrh	r2, [r1, #12]
 8006fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	0710      	lsls	r0, r2, #28
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	d458      	bmi.n	8007078 <__sflush_r+0xc0>
 8006fc6:	684b      	ldr	r3, [r1, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	dc05      	bgt.n	8006fd8 <__sflush_r+0x20>
 8006fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dc02      	bgt.n	8006fd8 <__sflush_r+0x20>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fda:	2e00      	cmp	r6, #0
 8006fdc:	d0f9      	beq.n	8006fd2 <__sflush_r+0x1a>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fe4:	682f      	ldr	r7, [r5, #0]
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	d032      	beq.n	8007050 <__sflush_r+0x98>
 8006fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	075a      	lsls	r2, r3, #29
 8006ff0:	d505      	bpl.n	8006ffe <__sflush_r+0x46>
 8006ff2:	6863      	ldr	r3, [r4, #4]
 8006ff4:	1ac0      	subs	r0, r0, r3
 8006ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ff8:	b10b      	cbz	r3, 8006ffe <__sflush_r+0x46>
 8006ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ffc:	1ac0      	subs	r0, r0, r3
 8006ffe:	2300      	movs	r3, #0
 8007000:	4602      	mov	r2, r0
 8007002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007004:	6a21      	ldr	r1, [r4, #32]
 8007006:	4628      	mov	r0, r5
 8007008:	47b0      	blx	r6
 800700a:	1c43      	adds	r3, r0, #1
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	d106      	bne.n	800701e <__sflush_r+0x66>
 8007010:	6829      	ldr	r1, [r5, #0]
 8007012:	291d      	cmp	r1, #29
 8007014:	d82c      	bhi.n	8007070 <__sflush_r+0xb8>
 8007016:	4a2a      	ldr	r2, [pc, #168]	; (80070c0 <__sflush_r+0x108>)
 8007018:	40ca      	lsrs	r2, r1
 800701a:	07d6      	lsls	r6, r2, #31
 800701c:	d528      	bpl.n	8007070 <__sflush_r+0xb8>
 800701e:	2200      	movs	r2, #0
 8007020:	6062      	str	r2, [r4, #4]
 8007022:	04d9      	lsls	r1, r3, #19
 8007024:	6922      	ldr	r2, [r4, #16]
 8007026:	6022      	str	r2, [r4, #0]
 8007028:	d504      	bpl.n	8007034 <__sflush_r+0x7c>
 800702a:	1c42      	adds	r2, r0, #1
 800702c:	d101      	bne.n	8007032 <__sflush_r+0x7a>
 800702e:	682b      	ldr	r3, [r5, #0]
 8007030:	b903      	cbnz	r3, 8007034 <__sflush_r+0x7c>
 8007032:	6560      	str	r0, [r4, #84]	; 0x54
 8007034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007036:	602f      	str	r7, [r5, #0]
 8007038:	2900      	cmp	r1, #0
 800703a:	d0ca      	beq.n	8006fd2 <__sflush_r+0x1a>
 800703c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007040:	4299      	cmp	r1, r3
 8007042:	d002      	beq.n	800704a <__sflush_r+0x92>
 8007044:	4628      	mov	r0, r5
 8007046:	f7ff fae3 	bl	8006610 <_free_r>
 800704a:	2000      	movs	r0, #0
 800704c:	6360      	str	r0, [r4, #52]	; 0x34
 800704e:	e7c1      	b.n	8006fd4 <__sflush_r+0x1c>
 8007050:	6a21      	ldr	r1, [r4, #32]
 8007052:	2301      	movs	r3, #1
 8007054:	4628      	mov	r0, r5
 8007056:	47b0      	blx	r6
 8007058:	1c41      	adds	r1, r0, #1
 800705a:	d1c7      	bne.n	8006fec <__sflush_r+0x34>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0c4      	beq.n	8006fec <__sflush_r+0x34>
 8007062:	2b1d      	cmp	r3, #29
 8007064:	d001      	beq.n	800706a <__sflush_r+0xb2>
 8007066:	2b16      	cmp	r3, #22
 8007068:	d101      	bne.n	800706e <__sflush_r+0xb6>
 800706a:	602f      	str	r7, [r5, #0]
 800706c:	e7b1      	b.n	8006fd2 <__sflush_r+0x1a>
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007074:	81a3      	strh	r3, [r4, #12]
 8007076:	e7ad      	b.n	8006fd4 <__sflush_r+0x1c>
 8007078:	690f      	ldr	r7, [r1, #16]
 800707a:	2f00      	cmp	r7, #0
 800707c:	d0a9      	beq.n	8006fd2 <__sflush_r+0x1a>
 800707e:	0793      	lsls	r3, r2, #30
 8007080:	680e      	ldr	r6, [r1, #0]
 8007082:	bf08      	it	eq
 8007084:	694b      	ldreq	r3, [r1, #20]
 8007086:	600f      	str	r7, [r1, #0]
 8007088:	bf18      	it	ne
 800708a:	2300      	movne	r3, #0
 800708c:	eba6 0807 	sub.w	r8, r6, r7
 8007090:	608b      	str	r3, [r1, #8]
 8007092:	f1b8 0f00 	cmp.w	r8, #0
 8007096:	dd9c      	ble.n	8006fd2 <__sflush_r+0x1a>
 8007098:	6a21      	ldr	r1, [r4, #32]
 800709a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800709c:	4643      	mov	r3, r8
 800709e:	463a      	mov	r2, r7
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b0      	blx	r6
 80070a4:	2800      	cmp	r0, #0
 80070a6:	dc06      	bgt.n	80070b6 <__sflush_r+0xfe>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ae:	81a3      	strh	r3, [r4, #12]
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070b4:	e78e      	b.n	8006fd4 <__sflush_r+0x1c>
 80070b6:	4407      	add	r7, r0
 80070b8:	eba8 0800 	sub.w	r8, r8, r0
 80070bc:	e7e9      	b.n	8007092 <__sflush_r+0xda>
 80070be:	bf00      	nop
 80070c0:	20400001 	.word	0x20400001

080070c4 <_fflush_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	690b      	ldr	r3, [r1, #16]
 80070c8:	4605      	mov	r5, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	b913      	cbnz	r3, 80070d4 <_fflush_r+0x10>
 80070ce:	2500      	movs	r5, #0
 80070d0:	4628      	mov	r0, r5
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	b118      	cbz	r0, 80070de <_fflush_r+0x1a>
 80070d6:	6983      	ldr	r3, [r0, #24]
 80070d8:	b90b      	cbnz	r3, 80070de <_fflush_r+0x1a>
 80070da:	f000 f887 	bl	80071ec <__sinit>
 80070de:	4b14      	ldr	r3, [pc, #80]	; (8007130 <_fflush_r+0x6c>)
 80070e0:	429c      	cmp	r4, r3
 80070e2:	d11b      	bne.n	800711c <_fflush_r+0x58>
 80070e4:	686c      	ldr	r4, [r5, #4]
 80070e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0ef      	beq.n	80070ce <_fflush_r+0xa>
 80070ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070f0:	07d0      	lsls	r0, r2, #31
 80070f2:	d404      	bmi.n	80070fe <_fflush_r+0x3a>
 80070f4:	0599      	lsls	r1, r3, #22
 80070f6:	d402      	bmi.n	80070fe <_fflush_r+0x3a>
 80070f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070fa:	f000 f915 	bl	8007328 <__retarget_lock_acquire_recursive>
 80070fe:	4628      	mov	r0, r5
 8007100:	4621      	mov	r1, r4
 8007102:	f7ff ff59 	bl	8006fb8 <__sflush_r>
 8007106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007108:	07da      	lsls	r2, r3, #31
 800710a:	4605      	mov	r5, r0
 800710c:	d4e0      	bmi.n	80070d0 <_fflush_r+0xc>
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	059b      	lsls	r3, r3, #22
 8007112:	d4dd      	bmi.n	80070d0 <_fflush_r+0xc>
 8007114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007116:	f000 f908 	bl	800732a <__retarget_lock_release_recursive>
 800711a:	e7d9      	b.n	80070d0 <_fflush_r+0xc>
 800711c:	4b05      	ldr	r3, [pc, #20]	; (8007134 <_fflush_r+0x70>)
 800711e:	429c      	cmp	r4, r3
 8007120:	d101      	bne.n	8007126 <_fflush_r+0x62>
 8007122:	68ac      	ldr	r4, [r5, #8]
 8007124:	e7df      	b.n	80070e6 <_fflush_r+0x22>
 8007126:	4b04      	ldr	r3, [pc, #16]	; (8007138 <_fflush_r+0x74>)
 8007128:	429c      	cmp	r4, r3
 800712a:	bf08      	it	eq
 800712c:	68ec      	ldreq	r4, [r5, #12]
 800712e:	e7da      	b.n	80070e6 <_fflush_r+0x22>
 8007130:	08007a1c 	.word	0x08007a1c
 8007134:	08007a3c 	.word	0x08007a3c
 8007138:	080079fc 	.word	0x080079fc

0800713c <std>:
 800713c:	2300      	movs	r3, #0
 800713e:	b510      	push	{r4, lr}
 8007140:	4604      	mov	r4, r0
 8007142:	e9c0 3300 	strd	r3, r3, [r0]
 8007146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800714a:	6083      	str	r3, [r0, #8]
 800714c:	8181      	strh	r1, [r0, #12]
 800714e:	6643      	str	r3, [r0, #100]	; 0x64
 8007150:	81c2      	strh	r2, [r0, #14]
 8007152:	6183      	str	r3, [r0, #24]
 8007154:	4619      	mov	r1, r3
 8007156:	2208      	movs	r2, #8
 8007158:	305c      	adds	r0, #92	; 0x5c
 800715a:	f7fd fba7 	bl	80048ac <memset>
 800715e:	4b05      	ldr	r3, [pc, #20]	; (8007174 <std+0x38>)
 8007160:	6263      	str	r3, [r4, #36]	; 0x24
 8007162:	4b05      	ldr	r3, [pc, #20]	; (8007178 <std+0x3c>)
 8007164:	62a3      	str	r3, [r4, #40]	; 0x28
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <std+0x40>)
 8007168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <std+0x44>)
 800716c:	6224      	str	r4, [r4, #32]
 800716e:	6323      	str	r3, [r4, #48]	; 0x30
 8007170:	bd10      	pop	{r4, pc}
 8007172:	bf00      	nop
 8007174:	0800748d 	.word	0x0800748d
 8007178:	080074af 	.word	0x080074af
 800717c:	080074e7 	.word	0x080074e7
 8007180:	0800750b 	.word	0x0800750b

08007184 <_cleanup_r>:
 8007184:	4901      	ldr	r1, [pc, #4]	; (800718c <_cleanup_r+0x8>)
 8007186:	f000 b8af 	b.w	80072e8 <_fwalk_reent>
 800718a:	bf00      	nop
 800718c:	080070c5 	.word	0x080070c5

08007190 <__sfmoreglue>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	1e4a      	subs	r2, r1, #1
 8007194:	2568      	movs	r5, #104	; 0x68
 8007196:	4355      	muls	r5, r2
 8007198:	460e      	mov	r6, r1
 800719a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800719e:	f7ff fa87 	bl	80066b0 <_malloc_r>
 80071a2:	4604      	mov	r4, r0
 80071a4:	b140      	cbz	r0, 80071b8 <__sfmoreglue+0x28>
 80071a6:	2100      	movs	r1, #0
 80071a8:	e9c0 1600 	strd	r1, r6, [r0]
 80071ac:	300c      	adds	r0, #12
 80071ae:	60a0      	str	r0, [r4, #8]
 80071b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071b4:	f7fd fb7a 	bl	80048ac <memset>
 80071b8:	4620      	mov	r0, r4
 80071ba:	bd70      	pop	{r4, r5, r6, pc}

080071bc <__sfp_lock_acquire>:
 80071bc:	4801      	ldr	r0, [pc, #4]	; (80071c4 <__sfp_lock_acquire+0x8>)
 80071be:	f000 b8b3 	b.w	8007328 <__retarget_lock_acquire_recursive>
 80071c2:	bf00      	nop
 80071c4:	20001334 	.word	0x20001334

080071c8 <__sfp_lock_release>:
 80071c8:	4801      	ldr	r0, [pc, #4]	; (80071d0 <__sfp_lock_release+0x8>)
 80071ca:	f000 b8ae 	b.w	800732a <__retarget_lock_release_recursive>
 80071ce:	bf00      	nop
 80071d0:	20001334 	.word	0x20001334

080071d4 <__sinit_lock_acquire>:
 80071d4:	4801      	ldr	r0, [pc, #4]	; (80071dc <__sinit_lock_acquire+0x8>)
 80071d6:	f000 b8a7 	b.w	8007328 <__retarget_lock_acquire_recursive>
 80071da:	bf00      	nop
 80071dc:	2000132f 	.word	0x2000132f

080071e0 <__sinit_lock_release>:
 80071e0:	4801      	ldr	r0, [pc, #4]	; (80071e8 <__sinit_lock_release+0x8>)
 80071e2:	f000 b8a2 	b.w	800732a <__retarget_lock_release_recursive>
 80071e6:	bf00      	nop
 80071e8:	2000132f 	.word	0x2000132f

080071ec <__sinit>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	4604      	mov	r4, r0
 80071f0:	f7ff fff0 	bl	80071d4 <__sinit_lock_acquire>
 80071f4:	69a3      	ldr	r3, [r4, #24]
 80071f6:	b11b      	cbz	r3, 8007200 <__sinit+0x14>
 80071f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071fc:	f7ff bff0 	b.w	80071e0 <__sinit_lock_release>
 8007200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007204:	6523      	str	r3, [r4, #80]	; 0x50
 8007206:	4b13      	ldr	r3, [pc, #76]	; (8007254 <__sinit+0x68>)
 8007208:	4a13      	ldr	r2, [pc, #76]	; (8007258 <__sinit+0x6c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	62a2      	str	r2, [r4, #40]	; 0x28
 800720e:	42a3      	cmp	r3, r4
 8007210:	bf04      	itt	eq
 8007212:	2301      	moveq	r3, #1
 8007214:	61a3      	streq	r3, [r4, #24]
 8007216:	4620      	mov	r0, r4
 8007218:	f000 f820 	bl	800725c <__sfp>
 800721c:	6060      	str	r0, [r4, #4]
 800721e:	4620      	mov	r0, r4
 8007220:	f000 f81c 	bl	800725c <__sfp>
 8007224:	60a0      	str	r0, [r4, #8]
 8007226:	4620      	mov	r0, r4
 8007228:	f000 f818 	bl	800725c <__sfp>
 800722c:	2200      	movs	r2, #0
 800722e:	60e0      	str	r0, [r4, #12]
 8007230:	2104      	movs	r1, #4
 8007232:	6860      	ldr	r0, [r4, #4]
 8007234:	f7ff ff82 	bl	800713c <std>
 8007238:	68a0      	ldr	r0, [r4, #8]
 800723a:	2201      	movs	r2, #1
 800723c:	2109      	movs	r1, #9
 800723e:	f7ff ff7d 	bl	800713c <std>
 8007242:	68e0      	ldr	r0, [r4, #12]
 8007244:	2202      	movs	r2, #2
 8007246:	2112      	movs	r1, #18
 8007248:	f7ff ff78 	bl	800713c <std>
 800724c:	2301      	movs	r3, #1
 800724e:	61a3      	str	r3, [r4, #24]
 8007250:	e7d2      	b.n	80071f8 <__sinit+0xc>
 8007252:	bf00      	nop
 8007254:	08007678 	.word	0x08007678
 8007258:	08007185 	.word	0x08007185

0800725c <__sfp>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	4607      	mov	r7, r0
 8007260:	f7ff ffac 	bl	80071bc <__sfp_lock_acquire>
 8007264:	4b1e      	ldr	r3, [pc, #120]	; (80072e0 <__sfp+0x84>)
 8007266:	681e      	ldr	r6, [r3, #0]
 8007268:	69b3      	ldr	r3, [r6, #24]
 800726a:	b913      	cbnz	r3, 8007272 <__sfp+0x16>
 800726c:	4630      	mov	r0, r6
 800726e:	f7ff ffbd 	bl	80071ec <__sinit>
 8007272:	3648      	adds	r6, #72	; 0x48
 8007274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007278:	3b01      	subs	r3, #1
 800727a:	d503      	bpl.n	8007284 <__sfp+0x28>
 800727c:	6833      	ldr	r3, [r6, #0]
 800727e:	b30b      	cbz	r3, 80072c4 <__sfp+0x68>
 8007280:	6836      	ldr	r6, [r6, #0]
 8007282:	e7f7      	b.n	8007274 <__sfp+0x18>
 8007284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007288:	b9d5      	cbnz	r5, 80072c0 <__sfp+0x64>
 800728a:	4b16      	ldr	r3, [pc, #88]	; (80072e4 <__sfp+0x88>)
 800728c:	60e3      	str	r3, [r4, #12]
 800728e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007292:	6665      	str	r5, [r4, #100]	; 0x64
 8007294:	f000 f847 	bl	8007326 <__retarget_lock_init_recursive>
 8007298:	f7ff ff96 	bl	80071c8 <__sfp_lock_release>
 800729c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072a4:	6025      	str	r5, [r4, #0]
 80072a6:	61a5      	str	r5, [r4, #24]
 80072a8:	2208      	movs	r2, #8
 80072aa:	4629      	mov	r1, r5
 80072ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072b0:	f7fd fafc 	bl	80048ac <memset>
 80072b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072bc:	4620      	mov	r0, r4
 80072be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c0:	3468      	adds	r4, #104	; 0x68
 80072c2:	e7d9      	b.n	8007278 <__sfp+0x1c>
 80072c4:	2104      	movs	r1, #4
 80072c6:	4638      	mov	r0, r7
 80072c8:	f7ff ff62 	bl	8007190 <__sfmoreglue>
 80072cc:	4604      	mov	r4, r0
 80072ce:	6030      	str	r0, [r6, #0]
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d1d5      	bne.n	8007280 <__sfp+0x24>
 80072d4:	f7ff ff78 	bl	80071c8 <__sfp_lock_release>
 80072d8:	230c      	movs	r3, #12
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	e7ee      	b.n	80072bc <__sfp+0x60>
 80072de:	bf00      	nop
 80072e0:	08007678 	.word	0x08007678
 80072e4:	ffff0001 	.word	0xffff0001

080072e8 <_fwalk_reent>:
 80072e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ec:	4606      	mov	r6, r0
 80072ee:	4688      	mov	r8, r1
 80072f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072f4:	2700      	movs	r7, #0
 80072f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072fa:	f1b9 0901 	subs.w	r9, r9, #1
 80072fe:	d505      	bpl.n	800730c <_fwalk_reent+0x24>
 8007300:	6824      	ldr	r4, [r4, #0]
 8007302:	2c00      	cmp	r4, #0
 8007304:	d1f7      	bne.n	80072f6 <_fwalk_reent+0xe>
 8007306:	4638      	mov	r0, r7
 8007308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730c:	89ab      	ldrh	r3, [r5, #12]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d907      	bls.n	8007322 <_fwalk_reent+0x3a>
 8007312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007316:	3301      	adds	r3, #1
 8007318:	d003      	beq.n	8007322 <_fwalk_reent+0x3a>
 800731a:	4629      	mov	r1, r5
 800731c:	4630      	mov	r0, r6
 800731e:	47c0      	blx	r8
 8007320:	4307      	orrs	r7, r0
 8007322:	3568      	adds	r5, #104	; 0x68
 8007324:	e7e9      	b.n	80072fa <_fwalk_reent+0x12>

08007326 <__retarget_lock_init_recursive>:
 8007326:	4770      	bx	lr

08007328 <__retarget_lock_acquire_recursive>:
 8007328:	4770      	bx	lr

0800732a <__retarget_lock_release_recursive>:
 800732a:	4770      	bx	lr

0800732c <__swhatbuf_r>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	460e      	mov	r6, r1
 8007330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007334:	2900      	cmp	r1, #0
 8007336:	b096      	sub	sp, #88	; 0x58
 8007338:	4614      	mov	r4, r2
 800733a:	461d      	mov	r5, r3
 800733c:	da07      	bge.n	800734e <__swhatbuf_r+0x22>
 800733e:	2300      	movs	r3, #0
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	89b3      	ldrh	r3, [r6, #12]
 8007344:	061a      	lsls	r2, r3, #24
 8007346:	d410      	bmi.n	800736a <__swhatbuf_r+0x3e>
 8007348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734c:	e00e      	b.n	800736c <__swhatbuf_r+0x40>
 800734e:	466a      	mov	r2, sp
 8007350:	f000 f902 	bl	8007558 <_fstat_r>
 8007354:	2800      	cmp	r0, #0
 8007356:	dbf2      	blt.n	800733e <__swhatbuf_r+0x12>
 8007358:	9a01      	ldr	r2, [sp, #4]
 800735a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800735e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007362:	425a      	negs	r2, r3
 8007364:	415a      	adcs	r2, r3
 8007366:	602a      	str	r2, [r5, #0]
 8007368:	e7ee      	b.n	8007348 <__swhatbuf_r+0x1c>
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	2000      	movs	r0, #0
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	b016      	add	sp, #88	; 0x58
 8007372:	bd70      	pop	{r4, r5, r6, pc}

08007374 <__smakebuf_r>:
 8007374:	898b      	ldrh	r3, [r1, #12]
 8007376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007378:	079d      	lsls	r5, r3, #30
 800737a:	4606      	mov	r6, r0
 800737c:	460c      	mov	r4, r1
 800737e:	d507      	bpl.n	8007390 <__smakebuf_r+0x1c>
 8007380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	2301      	movs	r3, #1
 800738a:	6163      	str	r3, [r4, #20]
 800738c:	b002      	add	sp, #8
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	ab01      	add	r3, sp, #4
 8007392:	466a      	mov	r2, sp
 8007394:	f7ff ffca 	bl	800732c <__swhatbuf_r>
 8007398:	9900      	ldr	r1, [sp, #0]
 800739a:	4605      	mov	r5, r0
 800739c:	4630      	mov	r0, r6
 800739e:	f7ff f987 	bl	80066b0 <_malloc_r>
 80073a2:	b948      	cbnz	r0, 80073b8 <__smakebuf_r+0x44>
 80073a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a8:	059a      	lsls	r2, r3, #22
 80073aa:	d4ef      	bmi.n	800738c <__smakebuf_r+0x18>
 80073ac:	f023 0303 	bic.w	r3, r3, #3
 80073b0:	f043 0302 	orr.w	r3, r3, #2
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	e7e3      	b.n	8007380 <__smakebuf_r+0xc>
 80073b8:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <__smakebuf_r+0x7c>)
 80073ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	6020      	str	r0, [r4, #0]
 80073c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	9b00      	ldr	r3, [sp, #0]
 80073c8:	6163      	str	r3, [r4, #20]
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	6120      	str	r0, [r4, #16]
 80073ce:	b15b      	cbz	r3, 80073e8 <__smakebuf_r+0x74>
 80073d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d4:	4630      	mov	r0, r6
 80073d6:	f000 f8d1 	bl	800757c <_isatty_r>
 80073da:	b128      	cbz	r0, 80073e8 <__smakebuf_r+0x74>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	f043 0301 	orr.w	r3, r3, #1
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	89a0      	ldrh	r0, [r4, #12]
 80073ea:	4305      	orrs	r5, r0
 80073ec:	81a5      	strh	r5, [r4, #12]
 80073ee:	e7cd      	b.n	800738c <__smakebuf_r+0x18>
 80073f0:	08007185 	.word	0x08007185

080073f4 <_malloc_usable_size_r>:
 80073f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f8:	1f18      	subs	r0, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfbc      	itt	lt
 80073fe:	580b      	ldrlt	r3, [r1, r0]
 8007400:	18c0      	addlt	r0, r0, r3
 8007402:	4770      	bx	lr

08007404 <_raise_r>:
 8007404:	291f      	cmp	r1, #31
 8007406:	b538      	push	{r3, r4, r5, lr}
 8007408:	4604      	mov	r4, r0
 800740a:	460d      	mov	r5, r1
 800740c:	d904      	bls.n	8007418 <_raise_r+0x14>
 800740e:	2316      	movs	r3, #22
 8007410:	6003      	str	r3, [r0, #0]
 8007412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800741a:	b112      	cbz	r2, 8007422 <_raise_r+0x1e>
 800741c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007420:	b94b      	cbnz	r3, 8007436 <_raise_r+0x32>
 8007422:	4620      	mov	r0, r4
 8007424:	f000 f830 	bl	8007488 <_getpid_r>
 8007428:	462a      	mov	r2, r5
 800742a:	4601      	mov	r1, r0
 800742c:	4620      	mov	r0, r4
 800742e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007432:	f000 b817 	b.w	8007464 <_kill_r>
 8007436:	2b01      	cmp	r3, #1
 8007438:	d00a      	beq.n	8007450 <_raise_r+0x4c>
 800743a:	1c59      	adds	r1, r3, #1
 800743c:	d103      	bne.n	8007446 <_raise_r+0x42>
 800743e:	2316      	movs	r3, #22
 8007440:	6003      	str	r3, [r0, #0]
 8007442:	2001      	movs	r0, #1
 8007444:	e7e7      	b.n	8007416 <_raise_r+0x12>
 8007446:	2400      	movs	r4, #0
 8007448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800744c:	4628      	mov	r0, r5
 800744e:	4798      	blx	r3
 8007450:	2000      	movs	r0, #0
 8007452:	e7e0      	b.n	8007416 <_raise_r+0x12>

08007454 <raise>:
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <raise+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f7ff bfd3 	b.w	8007404 <_raise_r>
 800745e:	bf00      	nop
 8007460:	20000028 	.word	0x20000028

08007464 <_kill_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d07      	ldr	r5, [pc, #28]	; (8007484 <_kill_r+0x20>)
 8007468:	2300      	movs	r3, #0
 800746a:	4604      	mov	r4, r0
 800746c:	4608      	mov	r0, r1
 800746e:	4611      	mov	r1, r2
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	f7fa fa2f 	bl	80018d4 <_kill>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d102      	bne.n	8007480 <_kill_r+0x1c>
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	b103      	cbz	r3, 8007480 <_kill_r+0x1c>
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	bd38      	pop	{r3, r4, r5, pc}
 8007482:	bf00      	nop
 8007484:	20001328 	.word	0x20001328

08007488 <_getpid_r>:
 8007488:	f7fa ba1c 	b.w	80018c4 <_getpid>

0800748c <__sread>:
 800748c:	b510      	push	{r4, lr}
 800748e:	460c      	mov	r4, r1
 8007490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007494:	f000 f894 	bl	80075c0 <_read_r>
 8007498:	2800      	cmp	r0, #0
 800749a:	bfab      	itete	ge
 800749c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800749e:	89a3      	ldrhlt	r3, [r4, #12]
 80074a0:	181b      	addge	r3, r3, r0
 80074a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074a6:	bfac      	ite	ge
 80074a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80074aa:	81a3      	strhlt	r3, [r4, #12]
 80074ac:	bd10      	pop	{r4, pc}

080074ae <__swrite>:
 80074ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b2:	461f      	mov	r7, r3
 80074b4:	898b      	ldrh	r3, [r1, #12]
 80074b6:	05db      	lsls	r3, r3, #23
 80074b8:	4605      	mov	r5, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	4616      	mov	r6, r2
 80074be:	d505      	bpl.n	80074cc <__swrite+0x1e>
 80074c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c4:	2302      	movs	r3, #2
 80074c6:	2200      	movs	r2, #0
 80074c8:	f000 f868 	bl	800759c <_lseek_r>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	4632      	mov	r2, r6
 80074da:	463b      	mov	r3, r7
 80074dc:	4628      	mov	r0, r5
 80074de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e2:	f000 b817 	b.w	8007514 <_write_r>

080074e6 <__sseek>:
 80074e6:	b510      	push	{r4, lr}
 80074e8:	460c      	mov	r4, r1
 80074ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ee:	f000 f855 	bl	800759c <_lseek_r>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	bf15      	itete	ne
 80074f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007502:	81a3      	strheq	r3, [r4, #12]
 8007504:	bf18      	it	ne
 8007506:	81a3      	strhne	r3, [r4, #12]
 8007508:	bd10      	pop	{r4, pc}

0800750a <__sclose>:
 800750a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750e:	f000 b813 	b.w	8007538 <_close_r>
	...

08007514 <_write_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d07      	ldr	r5, [pc, #28]	; (8007534 <_write_r+0x20>)
 8007518:	4604      	mov	r4, r0
 800751a:	4608      	mov	r0, r1
 800751c:	4611      	mov	r1, r2
 800751e:	2200      	movs	r2, #0
 8007520:	602a      	str	r2, [r5, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f7fa fa0d 	bl	8001942 <_write>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_write_r+0x1e>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_write_r+0x1e>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	20001328 	.word	0x20001328

08007538 <_close_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4d06      	ldr	r5, [pc, #24]	; (8007554 <_close_r+0x1c>)
 800753c:	2300      	movs	r3, #0
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	602b      	str	r3, [r5, #0]
 8007544:	f7fa fa19 	bl	800197a <_close>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_close_r+0x1a>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_close_r+0x1a>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20001328 	.word	0x20001328

08007558 <_fstat_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	; (8007578 <_fstat_r+0x20>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	602b      	str	r3, [r5, #0]
 8007566:	f7fa fa14 	bl	8001992 <_fstat>
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	d102      	bne.n	8007574 <_fstat_r+0x1c>
 800756e:	682b      	ldr	r3, [r5, #0]
 8007570:	b103      	cbz	r3, 8007574 <_fstat_r+0x1c>
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	bd38      	pop	{r3, r4, r5, pc}
 8007576:	bf00      	nop
 8007578:	20001328 	.word	0x20001328

0800757c <_isatty_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d06      	ldr	r5, [pc, #24]	; (8007598 <_isatty_r+0x1c>)
 8007580:	2300      	movs	r3, #0
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	602b      	str	r3, [r5, #0]
 8007588:	f7fa fa13 	bl	80019b2 <_isatty>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d102      	bne.n	8007596 <_isatty_r+0x1a>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b103      	cbz	r3, 8007596 <_isatty_r+0x1a>
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	20001328 	.word	0x20001328

0800759c <_lseek_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d07      	ldr	r5, [pc, #28]	; (80075bc <_lseek_r+0x20>)
 80075a0:	4604      	mov	r4, r0
 80075a2:	4608      	mov	r0, r1
 80075a4:	4611      	mov	r1, r2
 80075a6:	2200      	movs	r2, #0
 80075a8:	602a      	str	r2, [r5, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f7fa fa0c 	bl	80019c8 <_lseek>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_lseek_r+0x1e>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_lseek_r+0x1e>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	20001328 	.word	0x20001328

080075c0 <_read_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d07      	ldr	r5, [pc, #28]	; (80075e0 <_read_r+0x20>)
 80075c4:	4604      	mov	r4, r0
 80075c6:	4608      	mov	r0, r1
 80075c8:	4611      	mov	r1, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	602a      	str	r2, [r5, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f7fa f99a 	bl	8001908 <_read>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_read_r+0x1e>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_read_r+0x1e>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	20001328 	.word	0x20001328

080075e4 <_init>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	bf00      	nop
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr

080075f0 <_fini>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr
