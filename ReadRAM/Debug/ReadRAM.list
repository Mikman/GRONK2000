
ReadRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00001d48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001e54  08001e54  00011e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e74  08001e74  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08001e74  08001e74  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001e74  08001e74  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e74  08001e74  00011e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e78  08001e78  00011e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000002c  08001ea8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08001ea8  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050eb  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001392  00000000  00000000  00025140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  000264d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00026a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f4b  00000000  00000000  00026f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c92  00000000  00000000  0003ce93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e09d  00000000  00000000  00042b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c0bc2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001488  00000000  00000000  000c0c18  2**2
=======
  1 .text         00001db8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001ec4  08001ec4  00011ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ee4  08001ee4  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ee4  08001ee4  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ee4  08001ee4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ee4  08001ee4  00011ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ee8  08001ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001eec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000002c  08001f18  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  08001f18  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050bf  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001392  00000000  00000000  00025114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  000264a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00026a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f45  00000000  00000000  00026f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005c81  00000000  00000000  0003ce5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e081  00000000  00000000  00042ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c0b5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001488  00000000  00000000  000c0bb4  2**2
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
<<<<<<< HEAD
 800012c:	08001e3c 	.word	0x08001e3c
=======
 800012c:	08001eac 	.word	0x08001eac
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
<<<<<<< HEAD
 8000148:	08001e3c 	.word	0x08001e3c
=======
 8000148:	08001eac 	.word	0x08001eac
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

0800014c <QueueFull>:
 *  Created on: Mar 16, 2021
 *      Author: Mikkel
 */
#include "circle_queue.h"

int QueueFull(struct Queue *q){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	return (((q->pointWR +1) % SIZE_OF_QUEUE) == q->pointRD);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	885b      	ldrh	r3, [r3, #2]
 8000158:	1c59      	adds	r1, r3, #1
 800015a:	4b0c      	ldr	r3, [pc, #48]	; (800018c <QueueFull+0x40>)
 800015c:	fb83 2301 	smull	r2, r3, r3, r1
 8000160:	10da      	asrs	r2, r3, #3
 8000162:	17cb      	asrs	r3, r1, #31
 8000164:	1ad2      	subs	r2, r2, r3
 8000166:	4613      	mov	r3, r2
 8000168:	009b      	lsls	r3, r3, #2
 800016a:	4413      	add	r3, r2
 800016c:	009a      	lsls	r2, r3, #2
 800016e:	4413      	add	r3, r2
 8000170:	1aca      	subs	r2, r1, r3
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	881b      	ldrh	r3, [r3, #0]
 8000176:	429a      	cmp	r2, r3
 8000178:	bf0c      	ite	eq
 800017a:	2301      	moveq	r3, #1
 800017c:	2300      	movne	r3, #0
 800017e:	b2db      	uxtb	r3, r3
}
 8000180:	4618      	mov	r0, r3
 8000182:	370c      	adds	r7, #12
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	51eb851f 	.word	0x51eb851f

08000190 <QueueEmpty>:

int QueueEmpty(struct Queue *q){
 8000190:	b480      	push	{r7}
 8000192:	b083      	sub	sp, #12
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
	return (q->pointWR == q->pointRD);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	885a      	ldrh	r2, [r3, #2]
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	881b      	ldrh	r3, [r3, #0]
 80001a0:	429a      	cmp	r2, r3
 80001a2:	bf0c      	ite	eq
 80001a4:	2301      	moveq	r3, #1
 80001a6:	2300      	movne	r3, #0
 80001a8:	b2db      	uxtb	r3, r3
}
 80001aa:	4618      	mov	r0, r3
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <EnterQueue>:

int EnterQueue(struct Queue *q, uint8_t data) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	70fb      	strb	r3, [r7, #3]

	if (QueueFull(q)) {
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f7ff ffc3 	bl	800014c <QueueFull>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <EnterQueue+0x1c>
		return 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	e015      	b.n	80001fc <EnterQueue+0x48>
	}
	else {
		q->queue[q->pointWR] = data;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	885b      	ldrh	r3, [r3, #2]
 80001d4:	461a      	mov	r2, r3
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	78fa      	ldrb	r2, [r7, #3]
 80001dc:	711a      	strb	r2, [r3, #4]


		if ((q->pointWR + 1) == SIZE_OF_QUEUE){
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	885b      	ldrh	r3, [r3, #2]
 80001e2:	2b18      	cmp	r3, #24
 80001e4:	d103      	bne.n	80001ee <EnterQueue+0x3a>
			q->pointWR = 0;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2200      	movs	r2, #0
 80001ea:	805a      	strh	r2, [r3, #2]
 80001ec:	e005      	b.n	80001fa <EnterQueue+0x46>
		}
		else{
			q->pointWR += 1;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	885b      	ldrh	r3, [r3, #2]
 80001f2:	3301      	adds	r3, #1
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	805a      	strh	r2, [r3, #2]
		}

	}
	return 1;
 80001fa:	2301      	movs	r3, #1
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <LeaveQueue>:

int LeaveQueue(struct Queue *q, uint8_t *data) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	if (QueueEmpty(q)){
 800020e:	6878      	ldr	r0, [r7, #4]
 8000210:	f7ff ffbe 	bl	8000190 <QueueEmpty>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <LeaveQueue+0x1a>
		return 0;
 800021a:	2300      	movs	r3, #0
 800021c:	e016      	b.n	800024c <LeaveQueue+0x48>
	}
	else {
		*data = q->queue[q->pointRD];
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	461a      	mov	r2, r3
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4413      	add	r3, r2
 8000228:	791a      	ldrb	r2, [r3, #4]
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	701a      	strb	r2, [r3, #0]
		if((q->pointRD + 1) ==SIZE_OF_QUEUE){
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	2b18      	cmp	r3, #24
 8000234:	d103      	bne.n	800023e <LeaveQueue+0x3a>
			q->pointRD = 0;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	801a      	strh	r2, [r3, #0]
 800023c:	e005      	b.n	800024a <LeaveQueue+0x46>
		}
		else{
			q->pointRD +=1;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	b29a      	uxth	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	801a      	strh	r2, [r3, #0]
		}
	}
	return 1;
 800024a:	2301      	movs	r3, #1
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000258:	f000 fae2 	bl	8000820 <HAL_Init>
=======
 8000258:	f000 fada 	bl	8000810 <HAL_Init>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800025c:	f000 f809 	bl	8000272 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000260:	f000 f8ba 	bl	80003d8 <MX_GPIO_Init>
  MX_CAN_Init();
<<<<<<< HEAD
 8000264:	f000 f84a 	bl	80002fc <MX_CAN_Init>

=======
 8000264:	f000 f850 	bl	8000308 <MX_CAN_Init>
  HAL_CAN_Start(&hcan);
 8000268:	4803      	ldr	r0, [pc, #12]	; (8000278 <main+0x24>)
 800026a:	f000 fcf7 	bl	8000c5c <HAL_CAN_Start>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
<<<<<<< HEAD
	 sendImageData();
 8000268:	f000 f94c 	bl	8000504 <sendImageData>
	 receiveImageData();
 800026c:	f000 f9b8 	bl	80005e0 <receiveImageData>
=======
    /* USER CODE END WHILE */
	  sendImageData();
 800026e:	f000 f94f 	bl	8000510 <sendImageData>
	  receiveImageData();
 8000272:	f000 f9b9 	bl	80005e8 <receiveImageData>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  {
 8000270:	e7fa      	b.n	8000268 <main+0x14>

08000272 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000272:	b580      	push	{r7, lr}
 8000274:	b090      	sub	sp, #64	; 0x40
 8000276:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
<<<<<<< HEAD
 8000278:	f107 0318 	add.w	r3, r7, #24
 800027c:	2228      	movs	r2, #40	; 0x28
 800027e:	2100      	movs	r1, #0
 8000280:	4618      	mov	r0, r3
 8000282:	f001 fdd3 	bl	8001e2c <memset>
=======
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fe06 	bl	8001e9c <memset>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
 800028c:	605a      	str	r2, [r3, #4]
 800028e:	609a      	str	r2, [r3, #8]
 8000290:	60da      	str	r2, [r3, #12]
 8000292:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000294:	2301      	movs	r3, #1
 8000296:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000298:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800029e:	2300      	movs	r3, #0
 80002a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
<<<<<<< HEAD
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 f9aa 	bl	8001614 <HAL_RCC_OscConfig>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002c6:	f000 f9b9 	bl	800063c <Error_Handler>
=======
 80002c0:	f107 0318 	add.w	r3, r7, #24
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 f9dd 	bl	8001684 <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002d0:	f000 f9ac 	bl	800062c <Error_Handler>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ca:	230f      	movs	r3, #15
 80002cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ce:	2302      	movs	r3, #2
 80002d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
<<<<<<< HEAD
 80002e0:	1d3b      	adds	r3, r7, #4
 80002e2:	2102      	movs	r1, #2
 80002e4:	4618      	mov	r0, r3
 80002e6:	f001 fc15 	bl	8001b14 <HAL_RCC_ClockConfig>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002f0:	f000 f9a4 	bl	800063c <Error_Handler>
=======
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2102      	movs	r1, #2
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fc48 	bl	8001b84 <HAL_RCC_ClockConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002fa:	f000 f997 	bl	800062c <Error_Handler>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
}
 80002f4:	bf00      	nop
 80002f6:	3740      	adds	r7, #64	; 0x40
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN_Init 0 */

	  CanFilter.FilterIdHigh = 0x0000;						// Da vi har 32 bit ID, er dette de 16 MSB af ID
 8000300:	4b30      	ldr	r3, [pc, #192]	; (80003c4 <MX_CAN_Init+0xc8>)
 8000302:	2200      	movs	r2, #0
 8000304:	601a      	str	r2, [r3, #0]
	  CanFilter.FilterIdLow = 0x0010;						// Da vi har 32 bit ID, er dette de 16 LSB af ID
 8000306:	4b2f      	ldr	r3, [pc, #188]	; (80003c4 <MX_CAN_Init+0xc8>)
 8000308:	2210      	movs	r2, #16
 800030a:	605a      	str	r2, [r3, #4]
	  CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;		// ID er et 32 bit-tal
 800030c:	4b2d      	ldr	r3, [pc, #180]	; (80003c4 <MX_CAN_Init+0xc8>)
 800030e:	2201      	movs	r2, #1
 8000310:	61da      	str	r2, [r3, #28]
	  CanFilter.FilterActivation = ENABLE;					// Vi aktiverer filteret
 8000312:	4b2c      	ldr	r3, [pc, #176]	; (80003c4 <MX_CAN_Init+0xc8>)
 8000314:	2201      	movs	r2, #1
 8000316:	621a      	str	r2, [r3, #32]
	  CanFilter.FilterBank = 0;								// Vi vælger filter 0 ud af 14 mulige filtre
 8000318:	4b2a      	ldr	r3, [pc, #168]	; (80003c4 <MX_CAN_Init+0xc8>)
 800031a:	2200      	movs	r2, #0
 800031c:	615a      	str	r2, [r3, #20]
	  CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;	// Vi vælger FIFO0 til forskel for FIFO1
 800031e:	4b29      	ldr	r3, [pc, #164]	; (80003c4 <MX_CAN_Init+0xc8>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]


	  CanTxHeader.DLC = PACKAGE_SIZE;									// Der kommer 1 byte som data i beskeden
 8000324:	4b28      	ldr	r3, [pc, #160]	; (80003c8 <MX_CAN_Init+0xcc>)
 8000326:	2208      	movs	r2, #8
 8000328:	611a      	str	r2, [r3, #16]
	  CanTxHeader.ExtId = 0x00000010;						// 32 bit ID
 800032a:	4b27      	ldr	r3, [pc, #156]	; (80003c8 <MX_CAN_Init+0xcc>)
 800032c:	2210      	movs	r2, #16
 800032e:	605a      	str	r2, [r3, #4]
	  CanTxHeader.IDE = CAN_ID_EXT;							// Vi har et extended ID = 32 bit til forskel fra standard på 16 bit
 8000330:	4b25      	ldr	r3, [pc, #148]	; (80003c8 <MX_CAN_Init+0xcc>)
 8000332:	2204      	movs	r2, #4
 8000334:	609a      	str	r2, [r3, #8]
	  CanTxHeader.RTR = CAN_RTR_DATA;						// Vi sender data
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <MX_CAN_Init+0xcc>)
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
	  CanTxHeader.TransmitGlobalTime = DISABLE;				// Der skal IKKE sendes et timestamp med hver besked
 800033c:	4b22      	ldr	r3, [pc, #136]	; (80003c8 <MX_CAN_Init+0xcc>)
 800033e:	2200      	movs	r2, #0
 8000340:	751a      	strb	r2, [r3, #20]


	  CanRxHeader.DLC = PACKAGE_SIZE;
 8000342:	4b22      	ldr	r3, [pc, #136]	; (80003cc <MX_CAN_Init+0xd0>)
 8000344:	2208      	movs	r2, #8
 8000346:	611a      	str	r2, [r3, #16]
	  CanRxHeader.ExtId = 0x00000010;
 8000348:	4b20      	ldr	r3, [pc, #128]	; (80003cc <MX_CAN_Init+0xd0>)
 800034a:	2210      	movs	r2, #16
 800034c:	605a      	str	r2, [r3, #4]
	  CanRxHeader.IDE = CAN_ID_EXT;
 800034e:	4b1f      	ldr	r3, [pc, #124]	; (80003cc <MX_CAN_Init+0xd0>)
 8000350:	2204      	movs	r2, #4
 8000352:	609a      	str	r2, [r3, #8]
	  CanRxHeader.RTR = CAN_RTR_DATA;
 8000354:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <MX_CAN_Init+0xd0>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800035a:	4b1d      	ldr	r3, [pc, #116]	; (80003d0 <MX_CAN_Init+0xd4>)
 800035c:	4a1d      	ldr	r2, [pc, #116]	; (80003d4 <MX_CAN_Init+0xd8>)
 800035e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000360:	4b1b      	ldr	r3, [pc, #108]	; (80003d0 <MX_CAN_Init+0xd4>)
 8000362:	2210      	movs	r2, #16
 8000364:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000366:	4b1a      	ldr	r3, [pc, #104]	; (80003d0 <MX_CAN_Init+0xd4>)
 8000368:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800036c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800036e:	4b18      	ldr	r3, [pc, #96]	; (80003d0 <MX_CAN_Init+0xd4>)
 8000370:	2200      	movs	r2, #0
 8000372:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000374:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <MX_CAN_Init+0xd4>)
 8000376:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800037a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 800037c:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <MX_CAN_Init+0xd4>)
 800037e:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000382:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000384:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <MX_CAN_Init+0xd4>)
 8000386:	2200      	movs	r2, #0
 8000388:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <MX_CAN_Init+0xd4>)
 800038c:	2200      	movs	r2, #0
 800038e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000390:	4b0f      	ldr	r3, [pc, #60]	; (80003d0 <MX_CAN_Init+0xd4>)
 8000392:	2200      	movs	r2, #0
 8000394:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000396:	4b0e      	ldr	r3, [pc, #56]	; (80003d0 <MX_CAN_Init+0xd4>)
 8000398:	2200      	movs	r2, #0
 800039a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800039c:	4b0c      	ldr	r3, [pc, #48]	; (80003d0 <MX_CAN_Init+0xd4>)
 800039e:	2200      	movs	r2, #0
 80003a0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <MX_CAN_Init+0xd4>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
<<<<<<< HEAD
 80003a8:	4809      	ldr	r0, [pc, #36]	; (80003d0 <MX_CAN_Init+0xd4>)
 80003aa:	f000 fa9b 	bl	80008e4 <HAL_CAN_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_CAN_Init+0xbc>
  {
    Error_Handler();
 80003b4:	f000 f942 	bl	800063c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  	  HAL_CAN_ConfigFilter(&hcan, &CanFilter);
 80003b8:	4902      	ldr	r1, [pc, #8]	; (80003c4 <MX_CAN_Init+0xc8>)
 80003ba:	4805      	ldr	r0, [pc, #20]	; (80003d0 <MX_CAN_Init+0xd4>)
 80003bc:	f000 fb8d 	bl	8000ada <HAL_CAN_ConfigFilter>
=======
 80003b4:	4809      	ldr	r0, [pc, #36]	; (80003dc <MX_CAN_Init+0xd4>)
 80003b6:	f000 fa8d 	bl	80008d4 <HAL_CAN_Init>
 80003ba:	4603      	mov	r3, r0
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d001      	beq.n	80003c4 <MX_CAN_Init+0xbc>
  {
    Error_Handler();
 80003c0:	f000 f934 	bl	800062c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  	  HAL_CAN_ConfigFilter(&hcan, &CanFilter);
 80003c4:	4902      	ldr	r1, [pc, #8]	; (80003d0 <MX_CAN_Init+0xc8>)
 80003c6:	4805      	ldr	r0, [pc, #20]	; (80003dc <MX_CAN_Init+0xd4>)
 80003c8:	f000 fb7f 	bl	8000aca <HAL_CAN_ConfigFilter>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE END CAN_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000068 	.word	0x20000068
 80003c8:	200000b8 	.word	0x200000b8
 80003cc:	200000d0 	.word	0x200000d0
 80003d0:	20000090 	.word	0x20000090
 80003d4:	40006400 	.word	0x40006400

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ec:	4b34      	ldr	r3, [pc, #208]	; (80004c0 <MX_GPIO_Init+0xe8>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a33      	ldr	r2, [pc, #204]	; (80004c0 <MX_GPIO_Init+0xe8>)
 80003f2:	f043 0310 	orr.w	r3, r3, #16
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b31      	ldr	r3, [pc, #196]	; (80004c0 <MX_GPIO_Init+0xe8>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0310 	and.w	r3, r3, #16
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000404:	4b2e      	ldr	r3, [pc, #184]	; (80004c0 <MX_GPIO_Init+0xe8>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a2d      	ldr	r2, [pc, #180]	; (80004c0 <MX_GPIO_Init+0xe8>)
 800040a:	f043 0320 	orr.w	r3, r3, #32
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b2b      	ldr	r3, [pc, #172]	; (80004c0 <MX_GPIO_Init+0xe8>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0320 	and.w	r3, r3, #32
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	4b28      	ldr	r3, [pc, #160]	; (80004c0 <MX_GPIO_Init+0xe8>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a27      	ldr	r2, [pc, #156]	; (80004c0 <MX_GPIO_Init+0xe8>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b25      	ldr	r3, [pc, #148]	; (80004c0 <MX_GPIO_Init+0xe8>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0304 	and.w	r3, r3, #4
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000434:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <MX_GPIO_Init+0xe8>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a21      	ldr	r2, [pc, #132]	; (80004c0 <MX_GPIO_Init+0xe8>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <MX_GPIO_Init+0xe8>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	603b      	str	r3, [r7, #0]
 800044a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
<<<<<<< HEAD
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000452:	481c      	ldr	r0, [pc, #112]	; (80004c4 <MX_GPIO_Init+0xec>)
 8000454:	f001 f8ae 	bl	80015b4 <HAL_GPIO_WritePin>
=======
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800045e:	481c      	ldr	r0, [pc, #112]	; (80004d0 <MX_GPIO_Init+0xec>)
 8000460:	f001 f8e0 	bl	8001624 <HAL_GPIO_WritePin>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800045c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045e:	2301      	movs	r3, #1
 8000460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000462:	2300      	movs	r3, #0
 8000464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000466:	2302      	movs	r3, #2
 8000468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
<<<<<<< HEAD
 800046a:	f107 0310 	add.w	r3, r7, #16
 800046e:	4619      	mov	r1, r3
 8000470:	4814      	ldr	r0, [pc, #80]	; (80004c4 <MX_GPIO_Init+0xec>)
 8000472:	f000 ff1b 	bl	80012ac <HAL_GPIO_Init>
=======
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	4814      	ldr	r0, [pc, #80]	; (80004d0 <MX_GPIO_Init+0xec>)
 800047e:	f000 ff4d 	bl	800131c <HAL_GPIO_Init>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000476:	23ff      	movs	r3, #255	; 0xff
 8000478:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800047e:	2302      	movs	r3, #2
 8000480:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
<<<<<<< HEAD
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	480f      	ldr	r0, [pc, #60]	; (80004c8 <MX_GPIO_Init+0xf0>)
 800048a:	f000 ff0f 	bl	80012ac <HAL_GPIO_Init>
=======
 800048e:	f107 0310 	add.w	r3, r7, #16
 8000492:	4619      	mov	r1, r3
 8000494:	480f      	ldr	r0, [pc, #60]	; (80004d4 <MX_GPIO_Init+0xf0>)
 8000496:	f000 ff41 	bl	800131c <HAL_GPIO_Init>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800048e:	2301      	movs	r3, #1
 8000490:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_GPIO_Init+0xf4>)
 8000494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000496:	2302      	movs	r3, #2
 8000498:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
<<<<<<< HEAD
 800049a:	f107 0310 	add.w	r3, r7, #16
 800049e:	4619      	mov	r1, r3
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <MX_GPIO_Init+0xf8>)
 80004a2:	f000 ff03 	bl	80012ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80004a6:	2200      	movs	r2, #0
 80004a8:	2100      	movs	r1, #0
 80004aa:	2006      	movs	r0, #6
 80004ac:	f000 fec7 	bl	800123e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004b0:	2006      	movs	r0, #6
 80004b2:	f000 fee0 	bl	8001276 <HAL_NVIC_EnableIRQ>
=======
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	4619      	mov	r1, r3
 80004ac:	480b      	ldr	r0, [pc, #44]	; (80004dc <MX_GPIO_Init+0xf8>)
 80004ae:	f000 ff35 	bl	800131c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2100      	movs	r1, #0
 80004b6:	2006      	movs	r0, #6
 80004b8:	f000 fef9 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004bc:	2006      	movs	r0, #6
 80004be:	f000 ff12 	bl	80012e6 <HAL_NVIC_EnableIRQ>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

}
 80004b6:	bf00      	nop
 80004b8:	3720      	adds	r7, #32
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40010800 	.word	0x40010800
 80004cc:	10110000 	.word	0x10110000
 80004d0:	40010c00 	.word	0x40010c00

080004d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
 80004da:	4603      	mov	r3, r0
 80004dc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 80004de:	88fb      	ldrh	r3, [r7, #6]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d106      	bne.n	80004f2 <HAL_GPIO_EXTI_Callback+0x1e>

		//Kode der implementerer en cirkel buffer
		EnterQueue(&queueRAM, (uint8_t) GPIOA->IDR &0xFF); // Sætter dataen på PA0-7 ind i køen.
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <HAL_GPIO_EXTI_Callback+0x28>)
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4619      	mov	r1, r3
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <HAL_GPIO_EXTI_Callback+0x2c>)
 80004ee:	f7ff fe61 	bl	80001b4 <EnterQueue>
	}
}
<<<<<<< HEAD
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40010800 	.word	0x40010800
 8000500:	20000000 	.word	0x20000000

08000504 <sendImageData>:
=======
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40010800 	.word	0x40010800
 800050c:	20000000 	.word	0x20000000

08000510 <sendImageData>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
		}
	}
}
*/

void sendImageData() {
<<<<<<< HEAD
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0
	if (HAL_CAN_GetRxFifoFillLevel(&hcan, CAN_RX_FIFO0) == 0) {
 800050a:	2100      	movs	r1, #0
 800050c:	4822      	ldr	r0, [pc, #136]	; (8000598 <sendImageData+0x94>)
 800050e:	f000 fd98 	bl	8001042 <HAL_CAN_GetRxFifoFillLevel>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d13b      	bne.n	8000590 <sendImageData+0x8c>
		uint8_t dataToMB0[PACKAGE_SIZE] = {0};
 8000518:	2300      	movs	r3, #0
 800051a:	61bb      	str	r3, [r7, #24]
 800051c:	2300      	movs	r3, #0
 800051e:	61fb      	str	r3, [r7, #28]
		uint8_t dataToMB1[PACKAGE_SIZE] = {0};
 8000520:	2300      	movs	r3, #0
 8000522:	613b      	str	r3, [r7, #16]
 8000524:	2300      	movs	r3, #0
 8000526:	617b      	str	r3, [r7, #20]
		uint8_t dataToMB2[PACKAGE_SIZE] = {0};
 8000528:	2300      	movs	r3, #0
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
		uint32_t randoMailBox;
		if (fillDataArray(&queueRAM, dataToMB0)) {
 8000530:	f107 0318 	add.w	r3, r7, #24
 8000534:	4619      	mov	r1, r3
 8000536:	4819      	ldr	r0, [pc, #100]	; (800059c <sendImageData+0x98>)
 8000538:	f000 f834 	bl	80005a4 <fillDataArray>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d006      	beq.n	8000550 <sendImageData+0x4c>
			HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, dataToMB0, &randoMailBox);
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	f107 0218 	add.w	r2, r7, #24
 8000548:	4915      	ldr	r1, [pc, #84]	; (80005a0 <sendImageData+0x9c>)
 800054a:	4813      	ldr	r0, [pc, #76]	; (8000598 <sendImageData+0x94>)
 800054c:	f000 fb8e 	bl	8000c6c <HAL_CAN_AddTxMessage>
		}
		if (fillDataArray(&queueRAM, dataToMB1)) {
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	4619      	mov	r1, r3
 8000556:	4811      	ldr	r0, [pc, #68]	; (800059c <sendImageData+0x98>)
 8000558:	f000 f824 	bl	80005a4 <fillDataArray>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d006      	beq.n	8000570 <sendImageData+0x6c>
			HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, dataToMB1, &randoMailBox);
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	f107 0210 	add.w	r2, r7, #16
 8000568:	490d      	ldr	r1, [pc, #52]	; (80005a0 <sendImageData+0x9c>)
 800056a:	480b      	ldr	r0, [pc, #44]	; (8000598 <sendImageData+0x94>)
 800056c:	f000 fb7e 	bl	8000c6c <HAL_CAN_AddTxMessage>
		}
		if (fillDataArray(&queueRAM, dataToMB2)) {
 8000570:	f107 0308 	add.w	r3, r7, #8
 8000574:	4619      	mov	r1, r3
 8000576:	4809      	ldr	r0, [pc, #36]	; (800059c <sendImageData+0x98>)
 8000578:	f000 f814 	bl	80005a4 <fillDataArray>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d006      	beq.n	8000590 <sendImageData+0x8c>
			HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, dataToMB2, &randoMailBox);
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	f107 0208 	add.w	r2, r7, #8
 8000588:	4905      	ldr	r1, [pc, #20]	; (80005a0 <sendImageData+0x9c>)
 800058a:	4803      	ldr	r0, [pc, #12]	; (8000598 <sendImageData+0x94>)
 800058c:	f000 fb6e 	bl	8000c6c <HAL_CAN_AddTxMessage>
		}
	}
}
 8000590:	bf00      	nop
 8000592:	3720      	adds	r7, #32
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000090 	.word	0x20000090
 800059c:	20000000 	.word	0x20000000
 80005a0:	200000b8 	.word	0x200000b8

080005a4 <fillDataArray>:

void fillDataArray(struct Queue *source, uint8_t *data) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < PACKAGE_SIZE; i++) {
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	e00c      	b.n	80005ce <fillDataArray+0x2a>
		if (LeaveQueue(source, data + i)) { //Gemmer en byte fra source til data. Flere bytes gemmes ved at inkrementere data (som jo er en pointer til hvert element i data[])
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	4413      	add	r3, r2
 80005ba:	4619      	mov	r1, r3
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f7ff fe21 	bl	8000204 <LeaveQueue>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d006      	beq.n	80005d6 <fillDataArray+0x32>
	for (int i = 0; i < PACKAGE_SIZE; i++) {
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2b07      	cmp	r3, #7
 80005d2:	ddef      	ble.n	80005b4 <fillDataArray+0x10>
=======
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
	uint8_t dataToMB0[8] = {0};
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
	uint8_t dataToMB1[8] = {0};
 800051e:	2300      	movs	r3, #0
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
	uint8_t dataToMB2[8] = {0};
 8000526:	2300      	movs	r3, #0
 8000528:	603b      	str	r3, [r7, #0]
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]

	if (HAL_CAN_IsTxMessagePending(&hcan, (CAN_TX_MAILBOX0 | CAN_TX_MAILBOX1 | CAN_TX_MAILBOX2)) == 0) {
 800052e:	2107      	movs	r1, #7
 8000530:	481b      	ldr	r0, [pc, #108]	; (80005a0 <sendImageData+0x90>)
 8000532:	f000 fcb1 	bl	8000e98 <HAL_CAN_IsTxMessagePending>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d12d      	bne.n	8000598 <sendImageData+0x88>
		if (fillDataArray(&queueRAM, &dataToMB0)) {
 800053c:	f107 0310 	add.w	r3, r7, #16
 8000540:	4619      	mov	r1, r3
 8000542:	4818      	ldr	r0, [pc, #96]	; (80005a4 <sendImageData+0x94>)
 8000544:	f000 f832 	bl	80005ac <fillDataArray>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d006      	beq.n	800055c <sendImageData+0x4c>
			HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, dataToMB0, NULL);
 800054e:	f107 0210 	add.w	r2, r7, #16
 8000552:	2300      	movs	r3, #0
 8000554:	4914      	ldr	r1, [pc, #80]	; (80005a8 <sendImageData+0x98>)
 8000556:	4812      	ldr	r0, [pc, #72]	; (80005a0 <sendImageData+0x90>)
 8000558:	f000 fbc4 	bl	8000ce4 <HAL_CAN_AddTxMessage>
		}
		if (fillDataArray(&queueRAM, &dataToMB1)) {
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	4619      	mov	r1, r3
 8000562:	4810      	ldr	r0, [pc, #64]	; (80005a4 <sendImageData+0x94>)
 8000564:	f000 f822 	bl	80005ac <fillDataArray>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d006      	beq.n	800057c <sendImageData+0x6c>
					HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, dataToMB1, NULL);
 800056e:	f107 0208 	add.w	r2, r7, #8
 8000572:	2300      	movs	r3, #0
 8000574:	490c      	ldr	r1, [pc, #48]	; (80005a8 <sendImageData+0x98>)
 8000576:	480a      	ldr	r0, [pc, #40]	; (80005a0 <sendImageData+0x90>)
 8000578:	f000 fbb4 	bl	8000ce4 <HAL_CAN_AddTxMessage>
		}
		if (fillDataArray(&queueRAM, &dataToMB2)) {
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4808      	ldr	r0, [pc, #32]	; (80005a4 <sendImageData+0x94>)
 8000582:	f000 f813 	bl	80005ac <fillDataArray>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d005      	beq.n	8000598 <sendImageData+0x88>
					HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, dataToMB2, NULL);
 800058c:	463a      	mov	r2, r7
 800058e:	2300      	movs	r3, #0
 8000590:	4905      	ldr	r1, [pc, #20]	; (80005a8 <sendImageData+0x98>)
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <sendImageData+0x90>)
 8000594:	f000 fba6 	bl	8000ce4 <HAL_CAN_AddTxMessage>
		}
	}
}
 8000598:	bf00      	nop
 800059a:	3718      	adds	r7, #24
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000090 	.word	0x20000090
 80005a4:	20000000 	.word	0x20000000
 80005a8:	200000b8 	.word	0x200000b8

080005ac <fillDataArray>:

void fillDataArray(struct Queue *source, uint8_t *data[]) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 8; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	e00d      	b.n	80005d8 <fillDataArray+0x2c>
		if (LeaveQueue(source, &data[i])) {
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4619      	mov	r1, r3
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff fe1c 	bl	8000204 <LeaveQueue>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <fillDataArray+0x34>
	for (int i = 0; i < 8; i++) {
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	3301      	adds	r3, #1
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	ddee      	ble.n	80005bc <fillDataArray+0x10>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
			continue;
		} else {
			return 0;
		}
	}
	return 1;
<<<<<<< HEAD
 80005d4:	e000      	b.n	80005d8 <fillDataArray+0x34>
			return 0;
 80005d6:	bf00      	nop
}
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
	...

080005e0 <receiveImageData>:

void receiveImageData() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
	uint8_t buffer[PACKAGE_SIZE] = {0};
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	2300      	movs	r3, #0
 80005ec:	60bb      	str	r3, [r7, #8]
	if (!QueueFull(&queueRx)) { // Hvis køen ikke er fuld - Hvis der er en plads til at modtage en besked
 80005ee:	4810      	ldr	r0, [pc, #64]	; (8000630 <receiveImageData+0x50>)
 80005f0:	f7ff fdac 	bl	800014c <QueueFull>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d116      	bne.n	8000628 <receiveImageData+0x48>
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CanRxHeader, buffer); // Modtag beskeden og læg den i buffer
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4a0d      	ldr	r2, [pc, #52]	; (8000634 <receiveImageData+0x54>)
 80005fe:	2100      	movs	r1, #0
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <receiveImageData+0x58>)
 8000602:	f000 fc0d 	bl	8000e20 <HAL_CAN_GetRxMessage>
		for(int i = 0; i < PACKAGE_SIZE; i++){
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
 800060a:	e00a      	b.n	8000622 <receiveImageData+0x42>
		EnterQueue(&queueRx, buffer[i]); // Læg buffer ind i modtager-queuen
 800060c:	1d3a      	adds	r2, r7, #4
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <receiveImageData+0x50>)
 8000618:	f7ff fdcc 	bl	80001b4 <EnterQueue>
		for(int i = 0; i < PACKAGE_SIZE; i++){
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b07      	cmp	r3, #7
 8000626:	ddf1      	ble.n	800060c <receiveImageData+0x2c>
		}
	}
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000048 	.word	0x20000048
 8000634:	200000d0 	.word	0x200000d0
 8000638:	20000090 	.word	0x20000090

0800063c <Error_Handler>:
=======
 80005de:	e000      	b.n	80005e2 <fillDataArray+0x36>
			return 0;
 80005e0:	bf00      	nop
}
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <receiveImageData>:

void receiveImageData() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	uint8_t buffer[8] = {0};
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	2300      	movs	r3, #0
 80005f4:	607b      	str	r3, [r7, #4]
	if (!QueueFull(&queueRx)) { // Hvis køen ikke er fuld - Hvis der er en plads til at modtage en besked
 80005f6:	480a      	ldr	r0, [pc, #40]	; (8000620 <receiveImageData+0x38>)
 80005f8:	f7ff fda8 	bl	800014c <QueueFull>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d10a      	bne.n	8000618 <receiveImageData+0x30>
		HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &CanRxHeader, buffer); // Modtag beskeden og læg den i buffer
 8000602:	463b      	mov	r3, r7
 8000604:	4a07      	ldr	r2, [pc, #28]	; (8000624 <receiveImageData+0x3c>)
 8000606:	2100      	movs	r1, #0
 8000608:	4807      	ldr	r0, [pc, #28]	; (8000628 <receiveImageData+0x40>)
 800060a:	f000 fc68 	bl	8000ede <HAL_CAN_GetRxMessage>
		EnterQueue(&queueRx, buffer[0]); // Læg buffer ind i modtager-queuen
 800060e:	783b      	ldrb	r3, [r7, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	4803      	ldr	r0, [pc, #12]	; (8000620 <receiveImageData+0x38>)
 8000614:	f7ff fdce 	bl	80001b4 <EnterQueue>
	}
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	20000048 	.word	0x20000048
 8000624:	200000d0 	.word	0x200000d0
 8000628:	20000090 	.word	0x20000090

0800062c <Error_Handler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
=======
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000640:	b672      	cpsid	i
}
 8000642:	bf00      	nop
=======
 8000630:	b672      	cpsid	i
}
 8000632:	bf00      	nop
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000644:	e7fe      	b.n	8000644 <Error_Handler+0x8>
	...

08000648 <HAL_MspInit>:
=======
 8000634:	e7fe      	b.n	8000634 <Error_Handler+0x8>
	...

08000638 <HAL_MspInit>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
=======
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <HAL_MspInit+0x5c>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4a14      	ldr	r2, [pc, #80]	; (80006a4 <HAL_MspInit+0x5c>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6193      	str	r3, [r2, #24]
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_MspInit+0x5c>)
 800065c:	699b      	ldr	r3, [r3, #24]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <HAL_MspInit+0x5c>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <HAL_MspInit+0x5c>)
 800066c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000670:	61d3      	str	r3, [r2, #28]
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <HAL_MspInit+0x5c>)
 8000674:	69db      	ldr	r3, [r3, #28]
 8000676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
=======
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_MspInit+0x5c>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	4a14      	ldr	r2, [pc, #80]	; (8000694 <HAL_MspInit+0x5c>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6193      	str	r3, [r2, #24]
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_MspInit+0x5c>)
 800064c:	699b      	ldr	r3, [r3, #24]
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x5c>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_MspInit+0x5c>)
 800065c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000660:	61d3      	str	r3, [r2, #28]
 8000662:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_MspInit+0x5c>)
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 800067e:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <HAL_MspInit+0x60>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <HAL_MspInit+0x60>)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6053      	str	r3, [r2, #4]
=======
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x60>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_MspInit+0x60>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6053      	str	r3, [r2, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 800069a:	bf00      	nop
 800069c:	3714      	adds	r7, #20
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010000 	.word	0x40010000

080006ac <HAL_CAN_MspInit>:
=======
 800068a:	bf00      	nop
 800068c:	3714      	adds	r7, #20
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	40021000 	.word	0x40021000
 8000698:	40010000 	.word	0x40010000

0800069c <HAL_CAN_MspInit>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
<<<<<<< HEAD
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0314 	add.w	r3, r7, #20
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a25      	ldr	r2, [pc, #148]	; (800075c <HAL_CAN_MspInit+0xb0>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d143      	bne.n	8000754 <HAL_CAN_MspInit+0xa8>
=======
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a25      	ldr	r2, [pc, #148]	; (800074c <HAL_CAN_MspInit+0xb0>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d143      	bne.n	8000744 <HAL_CAN_MspInit+0xa8>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
<<<<<<< HEAD
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <HAL_CAN_MspInit+0xb4>)
 80006ce:	69db      	ldr	r3, [r3, #28]
 80006d0:	4a23      	ldr	r2, [pc, #140]	; (8000760 <HAL_CAN_MspInit+0xb4>)
 80006d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006d6:	61d3      	str	r3, [r2, #28]
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <HAL_CAN_MspInit+0xb4>)
 80006da:	69db      	ldr	r3, [r3, #28]
 80006dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <HAL_CAN_MspInit+0xb4>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a1d      	ldr	r2, [pc, #116]	; (8000760 <HAL_CAN_MspInit+0xb4>)
 80006ea:	f043 0308 	orr.w	r3, r3, #8
 80006ee:	6193      	str	r3, [r2, #24]
 80006f0:	4b1b      	ldr	r3, [pc, #108]	; (8000760 <HAL_CAN_MspInit+0xb4>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	f003 0308 	and.w	r3, r3, #8
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	68fb      	ldr	r3, [r7, #12]
=======
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <HAL_CAN_MspInit+0xb4>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	4a23      	ldr	r2, [pc, #140]	; (8000750 <HAL_CAN_MspInit+0xb4>)
 80006c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c6:	61d3      	str	r3, [r2, #28]
 80006c8:	4b21      	ldr	r3, [pc, #132]	; (8000750 <HAL_CAN_MspInit+0xb4>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006d0:	613b      	str	r3, [r7, #16]
 80006d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d4:	4b1e      	ldr	r3, [pc, #120]	; (8000750 <HAL_CAN_MspInit+0xb4>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a1d      	ldr	r2, [pc, #116]	; (8000750 <HAL_CAN_MspInit+0xb4>)
 80006da:	f043 0308 	orr.w	r3, r3, #8
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <HAL_CAN_MspInit+0xb4>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	60fb      	str	r3, [r7, #12]
 80006ea:	68fb      	ldr	r3, [r7, #12]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
<<<<<<< HEAD
 80006fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	4814      	ldr	r0, [pc, #80]	; (8000764 <HAL_CAN_MspInit+0xb8>)
 8000712:	f000 fdcb 	bl	80012ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000716:	f44f 7300 	mov.w	r3, #512	; 0x200
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	480e      	ldr	r0, [pc, #56]	; (8000764 <HAL_CAN_MspInit+0xb8>)
 800072c:	f000 fdbe 	bl	80012ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <HAL_CAN_MspInit+0xbc>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
 8000746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
 800074e:	4a06      	ldr	r2, [pc, #24]	; (8000768 <HAL_CAN_MspInit+0xbc>)
 8000750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000752:	6053      	str	r3, [r2, #4]
=======
 80006ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	4814      	ldr	r0, [pc, #80]	; (8000754 <HAL_CAN_MspInit+0xb8>)
 8000702:	f000 fe0b 	bl	800131c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800070a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000710:	2303      	movs	r3, #3
 8000712:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	480e      	ldr	r0, [pc, #56]	; (8000754 <HAL_CAN_MspInit+0xb8>)
 800071c:	f000 fdfe 	bl	800131c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000720:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <HAL_CAN_MspInit+0xbc>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
 8000726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000728:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
 8000736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
 800073e:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_CAN_MspInit+0xbc>)
 8000740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000742:	6053      	str	r3, [r2, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000754:	bf00      	nop
 8000756:	3728      	adds	r7, #40	; 0x28
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40006400 	.word	0x40006400
 8000760:	40021000 	.word	0x40021000
 8000764:	40010c00 	.word	0x40010c00
 8000768:	40010000 	.word	0x40010000

0800076c <NMI_Handler>:
=======
 8000744:	bf00      	nop
 8000746:	3728      	adds	r7, #40	; 0x28
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40006400 	.word	0x40006400
 8000750:	40021000 	.word	0x40021000
 8000754:	40010c00 	.word	0x40010c00
 8000758:	40010000 	.word	0x40010000

0800075c <NMI_Handler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
=======
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:
=======
 8000760:	e7fe      	b.n	8000760 <NMI_Handler+0x4>

08000762 <HardFault_Handler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
=======
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:
=======
 8000766:	e7fe      	b.n	8000766 <HardFault_Handler+0x4>

08000768 <MemManage_Handler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
=======
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:
=======
 800076c:	e7fe      	b.n	800076c <MemManage_Handler+0x4>

0800076e <BusFault_Handler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
=======
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:
=======
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
=======
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:
=======
 8000778:	e7fe      	b.n	8000778 <UsageFault_Handler+0x4>

0800077a <SVC_Handler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
=======
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	bc80      	pop	{r7}
 8000794:	4770      	bx	lr

08000796 <DebugMon_Handler>:
=======
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	bc80      	pop	{r7}
 8000784:	4770      	bx	lr

08000786 <DebugMon_Handler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
=======
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr

080007a2 <PendSV_Handler>:
=======
 800078a:	bf00      	nop
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <PendSV_Handler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
=======
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr

080007ae <SysTick_Handler>:
=======
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <SysTick_Handler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 80007ae:	b580      	push	{r7, lr}
 80007b0:	af00      	add	r7, sp, #0
=======
 800079e:	b580      	push	{r7, lr}
 80007a0:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 80007b2:	f000 f87b 	bl	80008ac <HAL_IncTick>
=======
 80007a2:	f000 f87b 	bl	800089c <HAL_IncTick>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}

080007ba <EXTI0_IRQHandler>:
=======
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}

080007aa <EXTI0_IRQHandler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
<<<<<<< HEAD
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0
=======
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
<<<<<<< HEAD
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 ff10 	bl	80015e4 <HAL_GPIO_EXTI_IRQHandler>
=======
 80007ae:	2001      	movs	r0, #1
 80007b0:	f000 ff50 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
<<<<<<< HEAD
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <SystemInit>:
=======
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <SystemInit>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
=======
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr

080007d4 <Reset_Handler>:
=======
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	bc80      	pop	{r7}
 80007c2:	4770      	bx	lr

080007c4 <Reset_Handler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
<<<<<<< HEAD
 80007d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007d6:	e003      	b.n	80007e0 <LoopCopyDataInit>

080007d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007d8:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007de:	3104      	adds	r1, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007e0:	480a      	ldr	r0, [pc, #40]	; (800080c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007e8:	d3f6      	bcc.n	80007d8 <CopyDataInit>
  ldr r2, =_sbss
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007ec:	e002      	b.n	80007f4 <LoopFillZerobss>

080007ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007f0:	f842 3b04 	str.w	r3, [r2], #4

080007f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007f4:	4b08      	ldr	r3, [pc, #32]	; (8000818 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007f8:	d3f9      	bcc.n	80007ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007fa:	f7ff ffe5 	bl	80007c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fe:	f001 faf1 	bl	8001de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000802:	f7ff fd27 	bl	8000254 <main>
  bx lr
 8000806:	4770      	bx	lr
  ldr r3, =_sidata
 8000808:	08001e7c 	.word	0x08001e7c
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000810:	2000002c 	.word	0x2000002c
  ldr r2, =_sbss
 8000814:	2000002c 	.word	0x2000002c
  ldr r3, = _ebss
 8000818:	200000f0 	.word	0x200000f0

0800081c <ADC1_2_IRQHandler>:
=======
 80007c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007c6:	e003      	b.n	80007d0 <LoopCopyDataInit>

080007c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007ce:	3104      	adds	r1, #4

080007d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007d0:	480a      	ldr	r0, [pc, #40]	; (80007fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007d8:	d3f6      	bcc.n	80007c8 <CopyDataInit>
  ldr r2, =_sbss
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007dc:	e002      	b.n	80007e4 <LoopFillZerobss>

080007de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007e0:	f842 3b04 	str.w	r3, [r2], #4

080007e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007e4:	4b08      	ldr	r3, [pc, #32]	; (8000808 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007e8:	d3f9      	bcc.n	80007de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007ea:	f7ff ffe5 	bl	80007b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ee:	f001 fb31 	bl	8001e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007f2:	f7ff fd2f 	bl	8000254 <main>
  bx lr
 80007f6:	4770      	bx	lr
  ldr r3, =_sidata
 80007f8:	08001eec 	.word	0x08001eec
  ldr r0, =_sdata
 80007fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000800:	2000002c 	.word	0x2000002c
  ldr r2, =_sbss
 8000804:	2000002c 	.word	0x2000002c
  ldr r3, = _ebss
 8000808:	200000f0 	.word	0x200000f0

0800080c <ADC1_2_IRQHandler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 800081c:	e7fe      	b.n	800081c <ADC1_2_IRQHandler>
	...

08000820 <HAL_Init>:
=======
 800080c:	e7fe      	b.n	800080c <ADC1_2_IRQHandler>
	...

08000810 <HAL_Init>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
=======
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_Init+0x28>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a07      	ldr	r2, [pc, #28]	; (8000848 <HAL_Init+0x28>)
 800082a:	f043 0310 	orr.w	r3, r3, #16
 800082e:	6013      	str	r3, [r2, #0]
=======
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_Init+0x28>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a07      	ldr	r2, [pc, #28]	; (8000838 <HAL_Init+0x28>)
 800081a:	f043 0310 	orr.w	r3, r3, #16
 800081e:	6013      	str	r3, [r2, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8000830:	2003      	movs	r0, #3
 8000832:	f000 fcf9 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000836:	2000      	movs	r0, #0
 8000838:	f000 f808 	bl	800084c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800083c:	f7ff ff04 	bl	8000648 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000840:	2300      	movs	r3, #0
}
 8000842:	4618      	mov	r0, r3
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40022000 	.word	0x40022000

0800084c <HAL_InitTick>:
=======
 8000820:	2003      	movs	r0, #3
 8000822:	f000 fd39 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000826:	2000      	movs	r0, #0
 8000828:	f000 f808 	bl	800083c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800082c:	f7ff ff04 	bl	8000638 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40022000 	.word	0x40022000

0800083c <HAL_InitTick>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_InitTick+0x54>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <HAL_InitTick+0x58>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4619      	mov	r1, r3
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	fbb3 f3f1 	udiv	r3, r3, r1
 8000866:	fbb2 f3f3 	udiv	r3, r2, r3
 800086a:	4618      	mov	r0, r3
 800086c:	f000 fd11 	bl	8001292 <HAL_SYSTICK_Config>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	e00e      	b.n	8000898 <HAL_InitTick+0x4c>
=======
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <HAL_InitTick+0x54>)
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <HAL_InitTick+0x58>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000852:	fbb3 f3f1 	udiv	r3, r3, r1
 8000856:	fbb2 f3f3 	udiv	r3, r2, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fd51 	bl	8001302 <HAL_SYSTICK_Config>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e00e      	b.n	8000888 <HAL_InitTick+0x4c>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d80a      	bhi.n	8000896 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	f04f 30ff 	mov.w	r0, #4294967295
 8000888:	f000 fcd9 	bl	800123e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800088c:	4a06      	ldr	r2, [pc, #24]	; (80008a8 <HAL_InitTick+0x5c>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6013      	str	r3, [r2, #0]
=======
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b0f      	cmp	r3, #15
 800086e:	d80a      	bhi.n	8000886 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000870:	2200      	movs	r2, #0
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f000 fd19 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800087c:	4a06      	ldr	r2, [pc, #24]	; (8000898 <HAL_InitTick+0x5c>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6013      	str	r3, [r2, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8000892:	2300      	movs	r3, #0
 8000894:	e000      	b.n	8000898 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
}
 8000898:	4618      	mov	r0, r3
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000020 	.word	0x20000020
 80008a4:	20000028 	.word	0x20000028
 80008a8:	20000024 	.word	0x20000024

080008ac <HAL_IncTick>:
=======
 8000882:	2300      	movs	r3, #0
 8000884:	e000      	b.n	8000888 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000886:	2301      	movs	r3, #1
}
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	20000020 	.word	0x20000020
 8000894:	20000028 	.word	0x20000028
 8000898:	20000024 	.word	0x20000024

0800089c <HAL_IncTick>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <HAL_IncTick+0x1c>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_IncTick+0x20>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4413      	add	r3, r2
 80008bc:	4a03      	ldr	r2, [pc, #12]	; (80008cc <HAL_IncTick+0x20>)
 80008be:	6013      	str	r3, [r2, #0]
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr
 80008c8:	20000028 	.word	0x20000028
 80008cc:	200000ec 	.word	0x200000ec

080008d0 <HAL_GetTick>:
=======
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a0:	4b05      	ldr	r3, [pc, #20]	; (80008b8 <HAL_IncTick+0x1c>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <HAL_IncTick+0x20>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4413      	add	r3, r2
 80008ac:	4a03      	ldr	r2, [pc, #12]	; (80008bc <HAL_IncTick+0x20>)
 80008ae:	6013      	str	r3, [r2, #0]
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	20000028 	.word	0x20000028
 80008bc:	200000ec 	.word	0x200000ec

080008c0 <HAL_GetTick>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  return uwTick;
 80008d4:	4b02      	ldr	r3, [pc, #8]	; (80008e0 <HAL_GetTick+0x10>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr
 80008e0:	200000ec 	.word	0x200000ec

080008e4 <HAL_CAN_Init>:
=======
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return uwTick;
 80008c4:	4b02      	ldr	r3, [pc, #8]	; (80008d0 <HAL_GetTick+0x10>)
 80008c6:	681b      	ldr	r3, [r3, #0]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	200000ec 	.word	0x200000ec

080008d4 <HAL_CAN_Init>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
<<<<<<< HEAD
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
=======
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
<<<<<<< HEAD
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d101      	bne.n	80008f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e0ed      	b.n	8000ad2 <HAL_CAN_Init+0x1ee>
=======
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d101      	bne.n	80008e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	e0ed      	b.n	8000ac2 <HAL_CAN_Init+0x1ee>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
<<<<<<< HEAD
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d102      	bne.n	8000908 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff fed2 	bl	80006ac <HAL_CAN_MspInit>
=======
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d102      	bne.n	80008f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff fed2 	bl	800069c <HAL_CAN_MspInit>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
<<<<<<< HEAD
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f022 0202 	bic.w	r2, r2, #2
 8000916:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000918:	f7ff ffda 	bl	80008d0 <HAL_GetTick>
 800091c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800091e:	e012      	b.n	8000946 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000920:	f7ff ffd6 	bl	80008d0 <HAL_GetTick>
 8000924:	4602      	mov	r2, r0
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	2b0a      	cmp	r3, #10
 800092c:	d90b      	bls.n	8000946 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000932:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2205      	movs	r2, #5
 800093e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e0c5      	b.n	8000ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0302 	and.w	r3, r3, #2
 8000950:	2b00      	cmp	r3, #0
 8000952:	d1e5      	bne.n	8000920 <HAL_CAN_Init+0x3c>
=======
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f022 0202 	bic.w	r2, r2, #2
 8000906:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000908:	f7ff ffda 	bl	80008c0 <HAL_GetTick>
 800090c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800090e:	e012      	b.n	8000936 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000910:	f7ff ffd6 	bl	80008c0 <HAL_GetTick>
 8000914:	4602      	mov	r2, r0
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	2b0a      	cmp	r3, #10
 800091c:	d90b      	bls.n	8000936 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000922:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2205      	movs	r2, #5
 800092e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e0c5      	b.n	8000ac2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f003 0302 	and.w	r3, r3, #2
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1e5      	bne.n	8000910 <HAL_CAN_Init+0x3c>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
<<<<<<< HEAD
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f042 0201 	orr.w	r2, r2, #1
 8000962:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000964:	f7ff ffb4 	bl	80008d0 <HAL_GetTick>
 8000968:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800096a:	e012      	b.n	8000992 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800096c:	f7ff ffb0 	bl	80008d0 <HAL_GetTick>
 8000970:	4602      	mov	r2, r0
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	2b0a      	cmp	r3, #10
 8000978:	d90b      	bls.n	8000992 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2205      	movs	r2, #5
 800098a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	e09f      	b.n	8000ad2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	2b00      	cmp	r3, #0
 800099e:	d0e5      	beq.n	800096c <HAL_CAN_Init+0x88>
=======
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f042 0201 	orr.w	r2, r2, #1
 8000952:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000954:	f7ff ffb4 	bl	80008c0 <HAL_GetTick>
 8000958:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800095a:	e012      	b.n	8000982 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800095c:	f7ff ffb0 	bl	80008c0 <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	2b0a      	cmp	r3, #10
 8000968:	d90b      	bls.n	8000982 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2205      	movs	r2, #5
 800097a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e09f      	b.n	8000ac2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0e5      	beq.n	800095c <HAL_CAN_Init+0x88>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
<<<<<<< HEAD
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	7e1b      	ldrb	r3, [r3, #24]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d108      	bne.n	80009ba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	e007      	b.n	80009ca <HAL_CAN_Init+0xe6>
=======
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7e1b      	ldrb	r3, [r3, #24]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d108      	bne.n	80009aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	e007      	b.n	80009ba <HAL_CAN_Init+0xe6>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
<<<<<<< HEAD
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009c8:	601a      	str	r2, [r3, #0]
=======
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80009b8:	601a      	str	r2, [r3, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
<<<<<<< HEAD
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7e5b      	ldrb	r3, [r3, #25]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d108      	bne.n	80009e4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	681a      	ldr	r2, [r3, #0]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e007      	b.n	80009f4 <HAL_CAN_Init+0x110>
=======
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7e5b      	ldrb	r3, [r3, #25]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d108      	bne.n	80009d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	e007      	b.n	80009e4 <HAL_CAN_Init+0x110>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
<<<<<<< HEAD
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009f2:	601a      	str	r2, [r3, #0]
=======
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009e2:	601a      	str	r2, [r3, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
<<<<<<< HEAD
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7e9b      	ldrb	r3, [r3, #26]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d108      	bne.n	8000a0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f042 0220 	orr.w	r2, r2, #32
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	e007      	b.n	8000a1e <HAL_CAN_Init+0x13a>
=======
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	7e9b      	ldrb	r3, [r3, #26]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d108      	bne.n	80009fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f042 0220 	orr.w	r2, r2, #32
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	e007      	b.n	8000a0e <HAL_CAN_Init+0x13a>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
<<<<<<< HEAD
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f022 0220 	bic.w	r2, r2, #32
 8000a1c:	601a      	str	r2, [r3, #0]
=======
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f022 0220 	bic.w	r2, r2, #32
 8000a0c:	601a      	str	r2, [r3, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
<<<<<<< HEAD
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7edb      	ldrb	r3, [r3, #27]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d108      	bne.n	8000a38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 0210 	bic.w	r2, r2, #16
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	e007      	b.n	8000a48 <HAL_CAN_Init+0x164>
=======
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	7edb      	ldrb	r3, [r3, #27]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d108      	bne.n	8000a28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f022 0210 	bic.w	r2, r2, #16
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	e007      	b.n	8000a38 <HAL_CAN_Init+0x164>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
<<<<<<< HEAD
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 0210 	orr.w	r2, r2, #16
 8000a46:	601a      	str	r2, [r3, #0]
=======
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681a      	ldr	r2, [r3, #0]
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f042 0210 	orr.w	r2, r2, #16
 8000a36:	601a      	str	r2, [r3, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
<<<<<<< HEAD
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	7f1b      	ldrb	r3, [r3, #28]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d108      	bne.n	8000a62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f042 0208 	orr.w	r2, r2, #8
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	e007      	b.n	8000a72 <HAL_CAN_Init+0x18e>
=======
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7f1b      	ldrb	r3, [r3, #28]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d108      	bne.n	8000a52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	f042 0208 	orr.w	r2, r2, #8
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	e007      	b.n	8000a62 <HAL_CAN_Init+0x18e>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
<<<<<<< HEAD
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	f022 0208 	bic.w	r2, r2, #8
 8000a70:	601a      	str	r2, [r3, #0]
=======
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 0208 	bic.w	r2, r2, #8
 8000a60:	601a      	str	r2, [r3, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
<<<<<<< HEAD
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	7f5b      	ldrb	r3, [r3, #29]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d108      	bne.n	8000a8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f042 0204 	orr.w	r2, r2, #4
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	e007      	b.n	8000a9c <HAL_CAN_Init+0x1b8>
=======
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7f5b      	ldrb	r3, [r3, #29]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d108      	bne.n	8000a7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f042 0204 	orr.w	r2, r2, #4
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	e007      	b.n	8000a8c <HAL_CAN_Init+0x1b8>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
<<<<<<< HEAD
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f022 0204 	bic.w	r2, r2, #4
 8000a9a:	601a      	str	r2, [r3, #0]
=======
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f022 0204 	bic.w	r2, r2, #4
 8000a8a:	601a      	str	r2, [r3, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
<<<<<<< HEAD
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	431a      	orrs	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	431a      	orrs	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	ea42 0103 	orr.w	r1, r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	430a      	orrs	r2, r1
 8000ac0:	61da      	str	r2, [r3, #28]
=======
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	691b      	ldr	r3, [r3, #16]
 8000a9a:	431a      	orrs	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	ea42 0103 	orr.w	r1, r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	1e5a      	subs	r2, r3, #1
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	61da      	str	r2, [r3, #28]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
<<<<<<< HEAD
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2201      	movs	r2, #1
 8000acc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_CAN_ConfigFilter>:
=======
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2201      	movs	r2, #1
 8000abc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ac0:	2300      	movs	r3, #0
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <HAL_CAN_ConfigFilter>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
<<<<<<< HEAD
 8000ada:	b480      	push	{r7}
 8000adc:	b087      	sub	sp, #28
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
 8000ae2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000af0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000af2:	7cfb      	ldrb	r3, [r7, #19]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d003      	beq.n	8000b00 <HAL_CAN_ConfigFilter+0x26>
 8000af8:	7cfb      	ldrb	r3, [r7, #19]
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	f040 80aa 	bne.w	8000c54 <HAL_CAN_ConfigFilter+0x17a>
=======
 8000aca:	b480      	push	{r7}
 8000acc:	b087      	sub	sp, #28
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ae0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ae2:	7cfb      	ldrb	r3, [r7, #19]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d003      	beq.n	8000af0 <HAL_CAN_ConfigFilter+0x26>
 8000ae8:	7cfb      	ldrb	r3, [r7, #19]
 8000aea:	2b02      	cmp	r3, #2
 8000aec:	f040 80aa 	bne.w	8000c44 <HAL_CAN_ConfigFilter+0x17a>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b06:	f043 0201 	orr.w	r2, r3, #1
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
=======
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000af6:	f043 0201 	orr.w	r2, r3, #1
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
<<<<<<< HEAD
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	695b      	ldr	r3, [r3, #20]
 8000b14:	f003 031f 	and.w	r3, r3, #31
 8000b18:	2201      	movs	r2, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d123      	bne.n	8000b82 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	401a      	ands	r2, r3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	2201      	movs	r2, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	69db      	ldr	r3, [r3, #28]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d123      	bne.n	8000b72 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	401a      	ands	r2, r3
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
<<<<<<< HEAD
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b58:	683a      	ldr	r2, [r7, #0]
 8000b5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3248      	adds	r2, #72	; 0x48
 8000b62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000b4c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3248      	adds	r2, #72	; 0x48
 8000b52:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	689b      	ldr	r3, [r3, #8]
 8000b6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b78:	6979      	ldr	r1, [r7, #20]
 8000b7a:	3348      	adds	r3, #72	; 0x48
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	440b      	add	r3, r1
 8000b80:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d122      	bne.n	8000bd0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	431a      	orrs	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
=======
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b66:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b68:	6979      	ldr	r1, [r7, #20]
 8000b6a:	3348      	adds	r3, #72	; 0x48
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d122      	bne.n	8000bc0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	431a      	orrs	r2, r3
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
<<<<<<< HEAD
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ba6:	683a      	ldr	r2, [r7, #0]
 8000ba8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000baa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3248      	adds	r2, #72	; 0x48
 8000bb0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
=======
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000b9a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	3248      	adds	r2, #72	; 0x48
 8000ba0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
<<<<<<< HEAD
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bc6:	6979      	ldr	r1, [r7, #20]
 8000bc8:	3348      	adds	r3, #72	; 0x48
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	440b      	add	r3, r1
 8000bce:	605a      	str	r2, [r3, #4]
=======
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bb4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bb6:	6979      	ldr	r1, [r7, #20]
 8000bb8:	3348      	adds	r3, #72	; 0x48
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	440b      	add	r3, r1
 8000bbe:	605a      	str	r2, [r3, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
<<<<<<< HEAD
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d109      	bne.n	8000bec <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	401a      	ands	r2, r3
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000bea:	e007      	b.n	8000bfc <HAL_CAN_ConfigFilter+0x122>
=======
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d109      	bne.n	8000bdc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000bda:	e007      	b.n	8000bec <HAL_CAN_ConfigFilter+0x122>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
<<<<<<< HEAD
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	697b      	ldr	r3, [r7, #20]
 8000bf8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
=======
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	431a      	orrs	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
<<<<<<< HEAD
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	691b      	ldr	r3, [r3, #16]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d109      	bne.n	8000c18 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c16:	e007      	b.n	8000c28 <HAL_CAN_ConfigFilter+0x14e>
=======
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d109      	bne.n	8000c08 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	401a      	ands	r2, r3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c06:	e007      	b.n	8000c18 <HAL_CAN_ConfigFilter+0x14e>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
<<<<<<< HEAD
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	431a      	orrs	r2, r3
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
=======
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	431a      	orrs	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
<<<<<<< HEAD
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	6a1b      	ldr	r3, [r3, #32]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d107      	bne.n	8000c40 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	431a      	orrs	r2, r3
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
=======
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d107      	bne.n	8000c30 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	431a      	orrs	r2, r3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
<<<<<<< HEAD
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c46:	f023 0201 	bic.w	r2, r3, #1
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	e006      	b.n	8000c62 <HAL_CAN_ConfigFilter+0x188>
=======
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000c36:	f023 0201 	bic.w	r2, r3, #1
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	e006      	b.n	8000c52 <HAL_CAN_ConfigFilter+0x188>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
  }
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	371c      	adds	r7, #28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <HAL_CAN_AddTxMessage>:
=======
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
  }
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	371c      	adds	r7, #28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d12e      	bne.n	8000cce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2202      	movs	r2, #2
 8000c74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f022 0201 	bic.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000c88:	f7ff fe1a 	bl	80008c0 <HAL_GetTick>
 8000c8c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c8e:	e012      	b.n	8000cb6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c90:	f7ff fe16 	bl	80008c0 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b0a      	cmp	r3, #10
 8000c9c:	d90b      	bls.n	8000cb6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2205      	movs	r2, #5
 8000cae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e012      	b.n	8000cdc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1e5      	bne.n	8000c90 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e006      	b.n	8000cdc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
  }
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3710      	adds	r7, #16
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <HAL_CAN_AddTxMessage>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
<<<<<<< HEAD
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c80:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	61bb      	str	r3, [r7, #24]
=======
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
 8000cf0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cf8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	61bb      	str	r3, [r7, #24]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 8000c8a:	7ffb      	ldrb	r3, [r7, #31]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d003      	beq.n	8000c98 <HAL_CAN_AddTxMessage+0x2c>
 8000c90:	7ffb      	ldrb	r3, [r7, #31]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	f040 80b8 	bne.w	8000e08 <HAL_CAN_AddTxMessage+0x19c>
=======
 8000d02:	7ffb      	ldrb	r3, [r7, #31]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d003      	beq.n	8000d10 <HAL_CAN_AddTxMessage+0x2c>
 8000d08:	7ffb      	ldrb	r3, [r7, #31]
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	f040 80b8 	bne.w	8000e80 <HAL_CAN_AddTxMessage+0x19c>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
<<<<<<< HEAD
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d10a      	bne.n	8000cb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d105      	bne.n	8000cb8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 80a0 	beq.w	8000df8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	0e1b      	lsrs	r3, r3, #24
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d907      	bls.n	8000cd8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ccc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e09e      	b.n	8000e16 <HAL_CAN_AddTxMessage+0x1aa>
=======
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d105      	bne.n	8000d30 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 80a0 	beq.w	8000e70 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	0e1b      	lsrs	r3, r3, #24
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d907      	bls.n	8000d50 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e09e      	b.n	8000e8e <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
<<<<<<< HEAD
 8000cd8:	2201      	movs	r2, #1
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	409a      	lsls	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d10d      	bne.n	8000d06 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cf4:	68f9      	ldr	r1, [r7, #12]
 8000cf6:	6809      	ldr	r1, [r1, #0]
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3318      	adds	r3, #24
 8000cfe:	011b      	lsls	r3, r3, #4
 8000d00:	440b      	add	r3, r1
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	e00f      	b.n	8000d26 <HAL_CAN_AddTxMessage+0xba>
=======
 8000d50:	2201      	movs	r2, #1
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	409a      	lsls	r2, r3
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	689b      	ldr	r3, [r3, #8]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10d      	bne.n	8000d7e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000d6c:	68f9      	ldr	r1, [r7, #12]
 8000d6e:	6809      	ldr	r1, [r1, #0]
 8000d70:	431a      	orrs	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	3318      	adds	r3, #24
 8000d76:	011b      	lsls	r3, r3, #4
 8000d78:	440b      	add	r3, r1
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	e00f      	b.n	8000d9e <HAL_CAN_AddTxMessage+0xba>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
<<<<<<< HEAD
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d10:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d16:	68f9      	ldr	r1, [r7, #12]
 8000d18:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d1a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3318      	adds	r3, #24
 8000d20:	011b      	lsls	r3, r3, #4
 8000d22:	440b      	add	r3, r1
 8000d24:	601a      	str	r2, [r3, #0]
=======
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d88:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d92:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3318      	adds	r3, #24
 8000d98:	011b      	lsls	r3, r3, #4
 8000d9a:	440b      	add	r3, r1
 8000d9c:	601a      	str	r2, [r3, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
<<<<<<< HEAD
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	6819      	ldr	r1, [r3, #0]
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	691a      	ldr	r2, [r3, #16]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3318      	adds	r3, #24
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	440b      	add	r3, r1
 8000d36:	3304      	adds	r3, #4
 8000d38:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	7d1b      	ldrb	r3, [r3, #20]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d111      	bne.n	8000d66 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3318      	adds	r3, #24
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	4413      	add	r3, r2
 8000d4e:	3304      	adds	r3, #4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68fa      	ldr	r2, [r7, #12]
 8000d54:	6811      	ldr	r1, [r2, #0]
 8000d56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3318      	adds	r3, #24
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	440b      	add	r3, r1
 8000d62:	3304      	adds	r3, #4
 8000d64:	601a      	str	r2, [r3, #0]
=======
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6819      	ldr	r1, [r3, #0]
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	691a      	ldr	r2, [r3, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3318      	adds	r3, #24
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	440b      	add	r3, r1
 8000dae:	3304      	adds	r3, #4
 8000db0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	7d1b      	ldrb	r3, [r3, #20]
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d111      	bne.n	8000dde <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3318      	adds	r3, #24
 8000dc2:	011b      	lsls	r3, r3, #4
 8000dc4:	4413      	add	r3, r2
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	6811      	ldr	r1, [r2, #0]
 8000dce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3318      	adds	r3, #24
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	440b      	add	r3, r1
 8000dda:	3304      	adds	r3, #4
 8000ddc:	601a      	str	r2, [r3, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
<<<<<<< HEAD
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3307      	adds	r3, #7
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	061a      	lsls	r2, r3, #24
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3306      	adds	r3, #6
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	041b      	lsls	r3, r3, #16
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3305      	adds	r3, #5
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	4313      	orrs	r3, r2
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	3204      	adds	r2, #4
 8000d86:	7812      	ldrb	r2, [r2, #0]
 8000d88:	4610      	mov	r0, r2
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	6811      	ldr	r1, [r2, #0]
 8000d8e:	ea43 0200 	orr.w	r2, r3, r0
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	011b      	lsls	r3, r3, #4
 8000d96:	440b      	add	r3, r1
 8000d98:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000d9c:	601a      	str	r2, [r3, #0]
=======
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3307      	adds	r3, #7
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	061a      	lsls	r2, r3, #24
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3306      	adds	r3, #6
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	041b      	lsls	r3, r3, #16
 8000dee:	431a      	orrs	r2, r3
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	3305      	adds	r3, #5
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	3204      	adds	r2, #4
 8000dfe:	7812      	ldrb	r2, [r2, #0]
 8000e00:	4610      	mov	r0, r2
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	6811      	ldr	r1, [r2, #0]
 8000e06:	ea43 0200 	orr.w	r2, r3, r0
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	440b      	add	r3, r1
 8000e10:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000e14:	601a      	str	r2, [r3, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
<<<<<<< HEAD
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3303      	adds	r3, #3
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	061a      	lsls	r2, r3, #24
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3302      	adds	r3, #2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	041b      	lsls	r3, r3, #16
 8000dae:	431a      	orrs	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3301      	adds	r3, #1
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	4313      	orrs	r3, r2
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	7812      	ldrb	r2, [r2, #0]
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	6811      	ldr	r1, [r2, #0]
 8000dc4:	ea43 0200 	orr.w	r2, r3, r0
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	440b      	add	r3, r1
 8000dce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000dd2:	601a      	str	r2, [r3, #0]
=======
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3303      	adds	r3, #3
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	061a      	lsls	r2, r3, #24
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3302      	adds	r3, #2
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	041b      	lsls	r3, r3, #16
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	021b      	lsls	r3, r3, #8
 8000e30:	4313      	orrs	r3, r2
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	4610      	mov	r0, r2
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	6811      	ldr	r1, [r2, #0]
 8000e3c:	ea43 0200 	orr.w	r2, r3, r0
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	440b      	add	r3, r1
 8000e46:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000e4a:	601a      	str	r2, [r3, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
<<<<<<< HEAD
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3318      	adds	r3, #24
 8000ddc:	011b      	lsls	r3, r3, #4
 8000dde:	4413      	add	r3, r2
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	68fa      	ldr	r2, [r7, #12]
 8000de4:	6811      	ldr	r1, [r2, #0]
 8000de6:	f043 0201 	orr.w	r2, r3, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	3318      	adds	r3, #24
 8000dee:	011b      	lsls	r3, r3, #4
 8000df0:	440b      	add	r3, r1
 8000df2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000df4:	2300      	movs	r3, #0
 8000df6:	e00e      	b.n	8000e16 <HAL_CAN_AddTxMessage+0x1aa>
=======
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3318      	adds	r3, #24
 8000e54:	011b      	lsls	r3, r3, #4
 8000e56:	4413      	add	r3, r2
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	6811      	ldr	r1, [r2, #0]
 8000e5e:	f043 0201 	orr.w	r2, r3, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	3318      	adds	r3, #24
 8000e66:	011b      	lsls	r3, r3, #4
 8000e68:	440b      	add	r3, r1
 8000e6a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	e00e      	b.n	8000e8e <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
<<<<<<< HEAD
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000e04:	2301      	movs	r3, #1
 8000e06:	e006      	b.n	8000e16 <HAL_CAN_AddTxMessage+0x1aa>
=======
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e006      	b.n	8000e8e <HAL_CAN_AddTxMessage+0x1aa>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
  }
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3724      	adds	r7, #36	; 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr

08000e20 <HAL_CAN_GetRxMessage>:
=======
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
  }
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3724      	adds	r7, #36	; 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bc80      	pop	{r7}
 8000e96:	4770      	bx	lr

08000e98 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eac:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000eae:	7afb      	ldrb	r3, [r7, #11]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d002      	beq.n	8000eba <HAL_CAN_IsTxMessagePending+0x22>
 8000eb4:	7afb      	ldrb	r3, [r7, #11]
 8000eb6:	2b02      	cmp	r3, #2
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	069b      	lsls	r3, r3, #26
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	069b      	lsls	r3, r3, #26
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d001      	beq.n	8000ed2 <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <HAL_CAN_GetRxMessage>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
<<<<<<< HEAD
 8000e20:	b480      	push	{r7}
 8000e22:	b087      	sub	sp, #28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	60b9      	str	r1, [r7, #8]
 8000e2a:	607a      	str	r2, [r7, #4]
 8000e2c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e34:	75fb      	strb	r3, [r7, #23]
=======
 8000ede:	b480      	push	{r7}
 8000ee0:	b087      	sub	sp, #28
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	60f8      	str	r0, [r7, #12]
 8000ee6:	60b9      	str	r1, [r7, #8]
 8000ee8:	607a      	str	r2, [r7, #4]
 8000eea:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef2:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
<<<<<<< HEAD
 8000e36:	7dfb      	ldrb	r3, [r7, #23]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d003      	beq.n	8000e44 <HAL_CAN_GetRxMessage+0x24>
 8000e3c:	7dfb      	ldrb	r3, [r7, #23]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	f040 80f3 	bne.w	800102a <HAL_CAN_GetRxMessage+0x20a>
=======
 8000ef4:	7dfb      	ldrb	r3, [r7, #23]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d003      	beq.n	8000f02 <HAL_CAN_GetRxMessage+0x24>
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	f040 80f3 	bne.w	80010e8 <HAL_CAN_GetRxMessage+0x20a>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
<<<<<<< HEAD
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d10e      	bne.n	8000e68 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d116      	bne.n	8000e86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e0e7      	b.n	8001038 <HAL_CAN_GetRxMessage+0x218>
=======
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10e      	bne.n	8000f26 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d116      	bne.n	8000f44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e0e7      	b.n	80010f6 <HAL_CAN_GetRxMessage+0x218>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
<<<<<<< HEAD
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	691b      	ldr	r3, [r3, #16]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d107      	bne.n	8000e86 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e0d8      	b.n	8001038 <HAL_CAN_GetRxMessage+0x218>
=======
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d107      	bne.n	8000f44 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e0d8      	b.n	80010f6 <HAL_CAN_GetRxMessage+0x218>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
<<<<<<< HEAD
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	331b      	adds	r3, #27
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	4413      	add	r3, r2
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f003 0204 	and.w	r2, r3, #4
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d10c      	bne.n	8000ebe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	331b      	adds	r3, #27
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	4413      	add	r3, r2
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	0d5b      	lsrs	r3, r3, #21
 8000eb4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	e00b      	b.n	8000ed6 <HAL_CAN_GetRxMessage+0xb6>
=======
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	331b      	adds	r3, #27
 8000f4c:	011b      	lsls	r3, r3, #4
 8000f4e:	4413      	add	r3, r2
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0204 	and.w	r2, r3, #4
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d10c      	bne.n	8000f7c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	331b      	adds	r3, #27
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	4413      	add	r3, r2
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0d5b      	lsrs	r3, r3, #21
 8000f72:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	e00b      	b.n	8000f94 <HAL_CAN_GetRxMessage+0xb6>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
<<<<<<< HEAD
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	331b      	adds	r3, #27
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	4413      	add	r3, r2
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	08db      	lsrs	r3, r3, #3
 8000ece:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	331b      	adds	r3, #27
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	4413      	add	r3, r2
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0202 	and.w	r2, r3, #2
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	331b      	adds	r3, #27
 8000ef4:	011b      	lsls	r3, r3, #4
 8000ef6:	4413      	add	r3, r2
 8000ef8:	3304      	adds	r3, #4
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 020f 	and.w	r2, r3, #15
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	331b      	adds	r3, #27
 8000f0c:	011b      	lsls	r3, r3, #4
 8000f0e:	4413      	add	r3, r2
 8000f10:	3304      	adds	r3, #4
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	331b      	adds	r3, #27
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	4413      	add	r3, r2
 8000f28:	3304      	adds	r3, #4
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	4413      	add	r3, r2
 8000f3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	4413      	add	r3, r2
 8000f54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	0a1a      	lsrs	r2, r3, #8
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	011b      	lsls	r3, r3, #4
 8000f6c:	4413      	add	r3, r2
 8000f6e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	0c1a      	lsrs	r2, r3, #16
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	3302      	adds	r3, #2
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	4413      	add	r3, r2
 8000f88:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	0e1a      	lsrs	r2, r3, #24
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	3303      	adds	r3, #3
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	011b      	lsls	r3, r3, #4
 8000fa0:	4413      	add	r3, r2
 8000fa2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	3304      	adds	r3, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	4413      	add	r3, r2
 8000fba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	0a1a      	lsrs	r2, r3, #8
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	3305      	adds	r3, #5
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	0c1a      	lsrs	r2, r3, #16
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	3306      	adds	r3, #6
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	4413      	add	r3, r2
 8000fee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	0e1a      	lsrs	r2, r3, #24
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	3307      	adds	r3, #7
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d108      	bne.n	8001016 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 0220 	orr.w	r2, r2, #32
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	e007      	b.n	8001026 <HAL_CAN_GetRxMessage+0x206>
=======
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	331b      	adds	r3, #27
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	4413      	add	r3, r2
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	08db      	lsrs	r3, r3, #3
 8000f8c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	331b      	adds	r3, #27
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	4413      	add	r3, r2
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0202 	and.w	r2, r3, #2
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	331b      	adds	r3, #27
 8000fb2:	011b      	lsls	r3, r3, #4
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3304      	adds	r3, #4
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 020f 	and.w	r2, r3, #15
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	331b      	adds	r3, #27
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	4413      	add	r3, r2
 8000fce:	3304      	adds	r3, #4
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	331b      	adds	r3, #27
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3304      	adds	r3, #4
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0c1b      	lsrs	r3, r3, #16
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	011b      	lsls	r3, r3, #4
 8000ffa:	4413      	add	r3, r2
 8000ffc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	4413      	add	r3, r2
 8001012:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0a1a      	lsrs	r2, r3, #8
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	4413      	add	r3, r2
 800102c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	0c1a      	lsrs	r2, r3, #16
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	3302      	adds	r3, #2
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	4413      	add	r3, r2
 8001046:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	0e1a      	lsrs	r2, r3, #24
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	3303      	adds	r3, #3
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	4413      	add	r3, r2
 8001060:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3304      	adds	r3, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4413      	add	r3, r2
 8001078:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	0a1a      	lsrs	r2, r3, #8
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	3305      	adds	r3, #5
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	4413      	add	r3, r2
 8001092:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	0c1a      	lsrs	r2, r3, #16
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	3306      	adds	r3, #6
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	4413      	add	r3, r2
 80010ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	0e1a      	lsrs	r2, r3, #24
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	3307      	adds	r3, #7
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d108      	bne.n	80010d4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f042 0220 	orr.w	r2, r2, #32
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	e007      	b.n	80010e4 <HAL_CAN_GetRxMessage+0x206>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
<<<<<<< HEAD
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	691a      	ldr	r2, [r3, #16]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f042 0220 	orr.w	r2, r2, #32
 8001024:	611a      	str	r2, [r3, #16]
=======
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691a      	ldr	r2, [r3, #16]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f042 0220 	orr.w	r2, r2, #32
 80010e2:	611a      	str	r2, [r3, #16]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }

    /* Return function status */
    return HAL_OK;
<<<<<<< HEAD
 8001026:	2300      	movs	r3, #0
 8001028:	e006      	b.n	8001038 <HAL_CAN_GetRxMessage+0x218>
=======
 80010e4:	2300      	movs	r3, #0
 80010e6:	e006      	b.n	80010f6 <HAL_CAN_GetRxMessage+0x218>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
<<<<<<< HEAD
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
  }
}
 8001038:	4618      	mov	r0, r3
 800103a:	371c      	adds	r7, #28
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001056:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001058:	7afb      	ldrb	r3, [r7, #11]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d002      	beq.n	8001064 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800105e:	7afb      	ldrb	r3, [r7, #11]
 8001060:	2b02      	cmp	r3, #2
 8001062:	d10f      	bne.n	8001084 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d106      	bne.n	8001078 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	e005      	b.n	8001084 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	60fb      	str	r3, [r7, #12]
    }
=======
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ec:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001084:	68fb      	ldr	r3, [r7, #12]
}
<<<<<<< HEAD
 8001086:	4618      	mov	r0, r3
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <__NVIC_SetPriorityGrouping>:
=======
 80010f6:	4618      	mov	r0, r3
 80010f8:	371c      	adds	r7, #28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <__NVIC_SetPriorityGrouping>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
=======
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
=======
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	bc80      	pop	{r7}
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4906      	ldr	r1, [pc, #24]	; (8001128 <__NVIC_EnableIRQ+0x34>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
=======
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4906      	ldr	r1, [pc, #24]	; (8001198 <__NVIC_EnableIRQ+0x34>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr
 8001198:	e000e100 	.word	0xe000e100

0800119c <__NVIC_SetPriority>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	490c      	ldr	r1, [pc, #48]	; (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
=======
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4908      	ldr	r1, [pc, #32]	; (80011ec <__NVIC_SetPriority+0x50>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	3b04      	subs	r3, #4
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_EncodePriority>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
=======
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	; 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	61fb      	str	r3, [r7, #28]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Config>:
=======
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf28      	it	cs
 800120e:	2304      	movcs	r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3304      	adds	r3, #4
 8001216:	2b06      	cmp	r3, #6
 8001218:	d902      	bls.n	8001220 <NVIC_EncodePriority+0x30>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b03      	subs	r3, #3
 800121e:	e000      	b.n	8001222 <NVIC_EncodePriority+0x32>
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	43d9      	mvns	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	4313      	orrs	r3, r2
         );
}
 800124a:	4618      	mov	r0, r3
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <SysTick_Config>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295
 8001208:	f7ff ff90 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
=======
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff90 	bl	800119c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
=======
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff2d 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
=======
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff2d 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
=======
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8001250:	f7ff ff42 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff90 	bl	8001180 <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5f 	bl	800112c <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
=======
 80012c0:	f7ff ff42 	bl	8001148 <__NVIC_GetPriorityGrouping>
 80012c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	6978      	ldr	r0, [r7, #20]
 80012cc:	f7ff ff90 	bl	80011f0 <NVIC_EncodePriority>
 80012d0:	4602      	mov	r2, r0
 80012d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff5f 	bl	800119c <__NVIC_SetPriority>
}
 80012de:	bf00      	nop
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_EnableIRQ>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
=======
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	71fb      	strb	r3, [r7, #7]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff35 	bl	80010f4 <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
=======
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff35 	bl	8001164 <__NVIC_EnableIRQ>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_SYSTICK_Config>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa2 	bl	80011e4 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_GPIO_Init>:
=======
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff ffa2 	bl	8001254 <SysTick_Config>
 8001310:	4603      	mov	r3, r0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <HAL_GPIO_Init>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 80012ac:	b480      	push	{r7}
 80012ae:	b08b      	sub	sp, #44	; 0x2c
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
=======
 800131c:	b480      	push	{r7}
 800131e:	b08b      	sub	sp, #44	; 0x2c
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
=======
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 80012be:	e169      	b.n	8001594 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012c0:	2201      	movs	r2, #1
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	69fa      	ldr	r2, [r7, #28]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f040 8158 	bne.w	800158e <HAL_GPIO_Init+0x2e2>
=======
 800132e:	e169      	b.n	8001604 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001330:	2201      	movs	r2, #1
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	429a      	cmp	r2, r3
 800134a:	f040 8158 	bne.w	80015fe <HAL_GPIO_Init+0x2e2>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4a9a      	ldr	r2, [pc, #616]	; (800154c <HAL_GPIO_Init+0x2a0>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d05e      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 80012e8:	4a98      	ldr	r2, [pc, #608]	; (800154c <HAL_GPIO_Init+0x2a0>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d875      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 80012ee:	4a98      	ldr	r2, [pc, #608]	; (8001550 <HAL_GPIO_Init+0x2a4>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d058      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 80012f4:	4a96      	ldr	r2, [pc, #600]	; (8001550 <HAL_GPIO_Init+0x2a4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d86f      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 80012fa:	4a96      	ldr	r2, [pc, #600]	; (8001554 <HAL_GPIO_Init+0x2a8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d052      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 8001300:	4a94      	ldr	r2, [pc, #592]	; (8001554 <HAL_GPIO_Init+0x2a8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d869      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 8001306:	4a94      	ldr	r2, [pc, #592]	; (8001558 <HAL_GPIO_Init+0x2ac>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d04c      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 800130c:	4a92      	ldr	r2, [pc, #584]	; (8001558 <HAL_GPIO_Init+0x2ac>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d863      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 8001312:	4a92      	ldr	r2, [pc, #584]	; (800155c <HAL_GPIO_Init+0x2b0>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d046      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
 8001318:	4a90      	ldr	r2, [pc, #576]	; (800155c <HAL_GPIO_Init+0x2b0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d85d      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 800131e:	2b12      	cmp	r3, #18
 8001320:	d82a      	bhi.n	8001378 <HAL_GPIO_Init+0xcc>
 8001322:	2b12      	cmp	r3, #18
 8001324:	d859      	bhi.n	80013da <HAL_GPIO_Init+0x12e>
 8001326:	a201      	add	r2, pc, #4	; (adr r2, 800132c <HAL_GPIO_Init+0x80>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	080013a7 	.word	0x080013a7
 8001330:	08001381 	.word	0x08001381
 8001334:	08001393 	.word	0x08001393
 8001338:	080013d5 	.word	0x080013d5
 800133c:	080013db 	.word	0x080013db
 8001340:	080013db 	.word	0x080013db
 8001344:	080013db 	.word	0x080013db
 8001348:	080013db 	.word	0x080013db
 800134c:	080013db 	.word	0x080013db
 8001350:	080013db 	.word	0x080013db
 8001354:	080013db 	.word	0x080013db
 8001358:	080013db 	.word	0x080013db
 800135c:	080013db 	.word	0x080013db
 8001360:	080013db 	.word	0x080013db
 8001364:	080013db 	.word	0x080013db
 8001368:	080013db 	.word	0x080013db
 800136c:	080013db 	.word	0x080013db
 8001370:	08001389 	.word	0x08001389
 8001374:	0800139d 	.word	0x0800139d
 8001378:	4a79      	ldr	r2, [pc, #484]	; (8001560 <HAL_GPIO_Init+0x2b4>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d013      	beq.n	80013a6 <HAL_GPIO_Init+0xfa>
=======
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4a9a      	ldr	r2, [pc, #616]	; (80015bc <HAL_GPIO_Init+0x2a0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d05e      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
 8001358:	4a98      	ldr	r2, [pc, #608]	; (80015bc <HAL_GPIO_Init+0x2a0>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d875      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 800135e:	4a98      	ldr	r2, [pc, #608]	; (80015c0 <HAL_GPIO_Init+0x2a4>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d058      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
 8001364:	4a96      	ldr	r2, [pc, #600]	; (80015c0 <HAL_GPIO_Init+0x2a4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d86f      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 800136a:	4a96      	ldr	r2, [pc, #600]	; (80015c4 <HAL_GPIO_Init+0x2a8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d052      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
 8001370:	4a94      	ldr	r2, [pc, #592]	; (80015c4 <HAL_GPIO_Init+0x2a8>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d869      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 8001376:	4a94      	ldr	r2, [pc, #592]	; (80015c8 <HAL_GPIO_Init+0x2ac>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d04c      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
 800137c:	4a92      	ldr	r2, [pc, #584]	; (80015c8 <HAL_GPIO_Init+0x2ac>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d863      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 8001382:	4a92      	ldr	r2, [pc, #584]	; (80015cc <HAL_GPIO_Init+0x2b0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d046      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
 8001388:	4a90      	ldr	r2, [pc, #576]	; (80015cc <HAL_GPIO_Init+0x2b0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d85d      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 800138e:	2b12      	cmp	r3, #18
 8001390:	d82a      	bhi.n	80013e8 <HAL_GPIO_Init+0xcc>
 8001392:	2b12      	cmp	r3, #18
 8001394:	d859      	bhi.n	800144a <HAL_GPIO_Init+0x12e>
 8001396:	a201      	add	r2, pc, #4	; (adr r2, 800139c <HAL_GPIO_Init+0x80>)
 8001398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800139c:	08001417 	.word	0x08001417
 80013a0:	080013f1 	.word	0x080013f1
 80013a4:	08001403 	.word	0x08001403
 80013a8:	08001445 	.word	0x08001445
 80013ac:	0800144b 	.word	0x0800144b
 80013b0:	0800144b 	.word	0x0800144b
 80013b4:	0800144b 	.word	0x0800144b
 80013b8:	0800144b 	.word	0x0800144b
 80013bc:	0800144b 	.word	0x0800144b
 80013c0:	0800144b 	.word	0x0800144b
 80013c4:	0800144b 	.word	0x0800144b
 80013c8:	0800144b 	.word	0x0800144b
 80013cc:	0800144b 	.word	0x0800144b
 80013d0:	0800144b 	.word	0x0800144b
 80013d4:	0800144b 	.word	0x0800144b
 80013d8:	0800144b 	.word	0x0800144b
 80013dc:	0800144b 	.word	0x0800144b
 80013e0:	080013f9 	.word	0x080013f9
 80013e4:	0800140d 	.word	0x0800140d
 80013e8:	4a79      	ldr	r2, [pc, #484]	; (80015d0 <HAL_GPIO_Init+0x2b4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0xfa>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 800137e:	e02c      	b.n	80013da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	623b      	str	r3, [r7, #32]
          break;
 8001386:	e029      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	3304      	adds	r3, #4
 800138e:	623b      	str	r3, [r7, #32]
          break;
 8001390:	e024      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	3308      	adds	r3, #8
 8001398:	623b      	str	r3, [r7, #32]
          break;
 800139a:	e01f      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	330c      	adds	r3, #12
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	e01a      	b.n	80013dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ae:	2304      	movs	r3, #4
 80013b0:	623b      	str	r3, [r7, #32]
          break;
 80013b2:	e013      	b.n	80013dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d105      	bne.n	80013c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013bc:	2308      	movs	r3, #8
 80013be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	611a      	str	r2, [r3, #16]
          break;
 80013c6:	e009      	b.n	80013dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c8:	2308      	movs	r3, #8
 80013ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	615a      	str	r2, [r3, #20]
          break;
 80013d2:	e003      	b.n	80013dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
          break;
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x130>
          break;
 80013da:	bf00      	nop
=======
 80013ee:	e02c      	b.n	800144a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	623b      	str	r3, [r7, #32]
          break;
 80013f6:	e029      	b.n	800144c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	3304      	adds	r3, #4
 80013fe:	623b      	str	r3, [r7, #32]
          break;
 8001400:	e024      	b.n	800144c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	3308      	adds	r3, #8
 8001408:	623b      	str	r3, [r7, #32]
          break;
 800140a:	e01f      	b.n	800144c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	330c      	adds	r3, #12
 8001412:	623b      	str	r3, [r7, #32]
          break;
 8001414:	e01a      	b.n	800144c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d102      	bne.n	8001424 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800141e:	2304      	movs	r3, #4
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e013      	b.n	800144c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800142c:	2308      	movs	r3, #8
 800142e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69fa      	ldr	r2, [r7, #28]
 8001434:	611a      	str	r2, [r3, #16]
          break;
 8001436:	e009      	b.n	800144c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001438:	2308      	movs	r3, #8
 800143a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	615a      	str	r2, [r3, #20]
          break;
 8001442:	e003      	b.n	800144c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x130>
          break;
 800144a:	bf00      	nop
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	2bff      	cmp	r3, #255	; 0xff
 80013e0:	d801      	bhi.n	80013e6 <HAL_GPIO_Init+0x13a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	e001      	b.n	80013ea <HAL_GPIO_Init+0x13e>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	3304      	adds	r3, #4
 80013ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	2bff      	cmp	r3, #255	; 0xff
 80013f0:	d802      	bhi.n	80013f8 <HAL_GPIO_Init+0x14c>
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_Init+0x152>
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	3b08      	subs	r3, #8
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	210f      	movs	r1, #15
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	6a39      	ldr	r1, [r7, #32]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	431a      	orrs	r2, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	601a      	str	r2, [r3, #0]
=======
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	2bff      	cmp	r3, #255	; 0xff
 8001450:	d801      	bhi.n	8001456 <HAL_GPIO_Init+0x13a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	e001      	b.n	800145a <HAL_GPIO_Init+0x13e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3304      	adds	r3, #4
 800145a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	2bff      	cmp	r3, #255	; 0xff
 8001460:	d802      	bhi.n	8001468 <HAL_GPIO_Init+0x14c>
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	e002      	b.n	800146e <HAL_GPIO_Init+0x152>
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	3b08      	subs	r3, #8
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	210f      	movs	r1, #15
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	fa01 f303 	lsl.w	r3, r1, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	401a      	ands	r2, r3
 8001480:	6a39      	ldr	r1, [r7, #32]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	431a      	orrs	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	601a      	str	r2, [r3, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	f000 80b1 	beq.w	800158e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800142c:	4b4d      	ldr	r3, [pc, #308]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a4c      	ldr	r2, [pc, #304]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b4a      	ldr	r3, [pc, #296]	; (8001564 <HAL_GPIO_Init+0x2b8>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001444:	4a48      	ldr	r2, [pc, #288]	; (8001568 <HAL_GPIO_Init+0x2bc>)
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001450:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4013      	ands	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a40      	ldr	r2, [pc, #256]	; (800156c <HAL_GPIO_Init+0x2c0>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d013      	beq.n	8001498 <HAL_GPIO_Init+0x1ec>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a3f      	ldr	r2, [pc, #252]	; (8001570 <HAL_GPIO_Init+0x2c4>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d00d      	beq.n	8001494 <HAL_GPIO_Init+0x1e8>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a3e      	ldr	r2, [pc, #248]	; (8001574 <HAL_GPIO_Init+0x2c8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d007      	beq.n	8001490 <HAL_GPIO_Init+0x1e4>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4a3d      	ldr	r2, [pc, #244]	; (8001578 <HAL_GPIO_Init+0x2cc>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d101      	bne.n	800148c <HAL_GPIO_Init+0x1e0>
 8001488:	2303      	movs	r3, #3
 800148a:	e006      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 800148c:	2304      	movs	r3, #4
 800148e:	e004      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 8001490:	2302      	movs	r3, #2
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 8001494:	2301      	movs	r3, #1
 8001496:	e000      	b.n	800149a <HAL_GPIO_Init+0x1ee>
 8001498:	2300      	movs	r3, #0
 800149a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149c:	f002 0203 	and.w	r2, r2, #3
 80014a0:	0092      	lsls	r2, r2, #2
 80014a2:	4093      	lsls	r3, r2
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014aa:	492f      	ldr	r1, [pc, #188]	; (8001568 <HAL_GPIO_Init+0x2bc>)
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	3302      	adds	r3, #2
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 80b1 	beq.w	80015fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800149c:	4b4d      	ldr	r3, [pc, #308]	; (80015d4 <HAL_GPIO_Init+0x2b8>)
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	4a4c      	ldr	r2, [pc, #304]	; (80015d4 <HAL_GPIO_Init+0x2b8>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6193      	str	r3, [r2, #24]
 80014a8:	4b4a      	ldr	r3, [pc, #296]	; (80015d4 <HAL_GPIO_Init+0x2b8>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b4:	4a48      	ldr	r2, [pc, #288]	; (80015d8 <HAL_GPIO_Init+0x2bc>)
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4013      	ands	r3, r2
 80014d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a40      	ldr	r2, [pc, #256]	; (80015dc <HAL_GPIO_Init+0x2c0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d013      	beq.n	8001508 <HAL_GPIO_Init+0x1ec>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a3f      	ldr	r2, [pc, #252]	; (80015e0 <HAL_GPIO_Init+0x2c4>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d00d      	beq.n	8001504 <HAL_GPIO_Init+0x1e8>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a3e      	ldr	r2, [pc, #248]	; (80015e4 <HAL_GPIO_Init+0x2c8>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d007      	beq.n	8001500 <HAL_GPIO_Init+0x1e4>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a3d      	ldr	r2, [pc, #244]	; (80015e8 <HAL_GPIO_Init+0x2cc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d101      	bne.n	80014fc <HAL_GPIO_Init+0x1e0>
 80014f8:	2303      	movs	r3, #3
 80014fa:	e006      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 80014fc:	2304      	movs	r3, #4
 80014fe:	e004      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 8001500:	2302      	movs	r3, #2
 8001502:	e002      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <HAL_GPIO_Init+0x1ee>
 8001508:	2300      	movs	r3, #0
 800150a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150c:	f002 0203 	and.w	r2, r2, #3
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	4093      	lsls	r3, r2
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800151a:	492f      	ldr	r1, [pc, #188]	; (80015d8 <HAL_GPIO_Init+0x2bc>)
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014c4:	4b2d      	ldr	r3, [pc, #180]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	492c      	ldr	r1, [pc, #176]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	600b      	str	r3, [r1, #0]
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x234>
=======
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	492c      	ldr	r1, [pc, #176]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	600b      	str	r3, [r1, #0]
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x234>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	43db      	mvns	r3, r3
 80014da:	4928      	ldr	r1, [pc, #160]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014dc:	4013      	ands	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
=======
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	43db      	mvns	r3, r3
 800154a:	4928      	ldr	r1, [pc, #160]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800154c:	4013      	ands	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d006      	beq.n	80014fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ec:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4922      	ldr	r1, [pc, #136]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
 80014f8:	e006      	b.n	8001508 <HAL_GPIO_Init+0x25c>
=======
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800155c:	4b23      	ldr	r3, [pc, #140]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4922      	ldr	r1, [pc, #136]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x25c>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_GPIO_Init+0x2d0>)
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	43db      	mvns	r3, r3
 8001502:	491e      	ldr	r1, [pc, #120]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001504:	4013      	ands	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
=======
 800156a:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	43db      	mvns	r3, r3
 8001572:	491e      	ldr	r1, [pc, #120]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001574:	4013      	ands	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d006      	beq.n	8001522 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001514:	4b19      	ldr	r3, [pc, #100]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	4918      	ldr	r1, [pc, #96]	; (800157c <HAL_GPIO_Init+0x2d0>)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	608b      	str	r3, [r1, #8]
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x284>
=======
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001584:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	4918      	ldr	r1, [pc, #96]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x284>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8001522:	4b16      	ldr	r3, [pc, #88]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	43db      	mvns	r3, r3
 800152a:	4914      	ldr	r1, [pc, #80]	; (800157c <HAL_GPIO_Init+0x2d0>)
 800152c:	4013      	ands	r3, r2
 800152e:	608b      	str	r3, [r1, #8]
=======
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	4914      	ldr	r1, [pc, #80]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 800159c:	4013      	ands	r3, r2
 800159e:	608b      	str	r3, [r1, #8]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d021      	beq.n	8001580 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800153c:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_GPIO_Init+0x2d0>)
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	490e      	ldr	r1, [pc, #56]	; (800157c <HAL_GPIO_Init+0x2d0>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	60cb      	str	r3, [r1, #12]
 8001548:	e021      	b.n	800158e <HAL_GPIO_Init+0x2e2>
 800154a:	bf00      	nop
 800154c:	10320000 	.word	0x10320000
 8001550:	10310000 	.word	0x10310000
 8001554:	10220000 	.word	0x10220000
 8001558:	10210000 	.word	0x10210000
 800155c:	10120000 	.word	0x10120000
 8001560:	10110000 	.word	0x10110000
 8001564:	40021000 	.word	0x40021000
 8001568:	40010000 	.word	0x40010000
 800156c:	40010800 	.word	0x40010800
 8001570:	40010c00 	.word	0x40010c00
 8001574:	40011000 	.word	0x40011000
 8001578:	40011400 	.word	0x40011400
 800157c:	40010400 	.word	0x40010400
=======
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d021      	beq.n	80015f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ac:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	490e      	ldr	r1, [pc, #56]	; (80015ec <HAL_GPIO_Init+0x2d0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60cb      	str	r3, [r1, #12]
 80015b8:	e021      	b.n	80015fe <HAL_GPIO_Init+0x2e2>
 80015ba:	bf00      	nop
 80015bc:	10320000 	.word	0x10320000
 80015c0:	10310000 	.word	0x10310000
 80015c4:	10220000 	.word	0x10220000
 80015c8:	10210000 	.word	0x10210000
 80015cc:	10120000 	.word	0x10120000
 80015d0:	10110000 	.word	0x10110000
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000
 80015dc:	40010800 	.word	0x40010800
 80015e0:	40010c00 	.word	0x40010c00
 80015e4:	40011000 	.word	0x40011000
 80015e8:	40011400 	.word	0x40011400
 80015ec:	40010400 	.word	0x40010400
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_GPIO_Init+0x304>)
 8001582:	68da      	ldr	r2, [r3, #12]
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	43db      	mvns	r3, r3
 8001588:	4909      	ldr	r1, [pc, #36]	; (80015b0 <HAL_GPIO_Init+0x304>)
 800158a:	4013      	ands	r3, r2
 800158c:	60cb      	str	r3, [r1, #12]
=======
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <HAL_GPIO_Init+0x304>)
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	4909      	ldr	r1, [pc, #36]	; (8001620 <HAL_GPIO_Init+0x304>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	60cb      	str	r3, [r1, #12]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
      }
    }

	position++;
<<<<<<< HEAD
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	3301      	adds	r3, #1
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	fa22 f303 	lsr.w	r3, r2, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f47f ae8e 	bne.w	80012c0 <HAL_GPIO_Init+0x14>
  }
}
 80015a4:	bf00      	nop
 80015a6:	bf00      	nop
 80015a8:	372c      	adds	r7, #44	; 0x2c
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	40010400 	.word	0x40010400

080015b4 <HAL_GPIO_WritePin>:
=======
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	3301      	adds	r3, #1
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	fa22 f303 	lsr.w	r3, r2, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	f47f ae8e 	bne.w	8001330 <HAL_GPIO_Init+0x14>
  }
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	372c      	adds	r7, #44	; 0x2c
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	40010400 	.word	0x40010400

08001624 <HAL_GPIO_WritePin>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	807b      	strh	r3, [r7, #2]
 80015c0:	4613      	mov	r3, r2
 80015c2:	707b      	strb	r3, [r7, #1]
=======
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
 8001630:	4613      	mov	r3, r2
 8001632:	707b      	strb	r3, [r7, #1]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80015c4:	787b      	ldrb	r3, [r7, #1]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ca:	887a      	ldrh	r2, [r7, #2]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	611a      	str	r2, [r3, #16]
=======
 8001634:	787b      	ldrb	r3, [r7, #1]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163a:	887a      	ldrh	r2, [r7, #2]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	611a      	str	r2, [r3, #16]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 80015d0:	e003      	b.n	80015da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	041a      	lsls	r2, r3, #16
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	611a      	str	r2, [r3, #16]
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8001640:	e003      	b.n	800164a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	041a      	lsls	r2, r3, #16
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	611a      	str	r2, [r3, #16]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015fc:	88fb      	ldrh	r3, [r7, #6]
 80015fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001600:	88fb      	ldrh	r3, [r7, #6]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe ff66 	bl	80004d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001608:	bf00      	nop
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40010400 	.word	0x40010400

08001614 <HAL_RCC_OscConfig>:
=======
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff34 	bl	80004e0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_RCC_OscConfig>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8001614:	b580      	push	{r7, lr}
 8001616:	b086      	sub	sp, #24
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
=======
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d101      	bne.n	8001626 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e26c      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
=======
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e26c      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 8087 	beq.w	8001742 <HAL_RCC_OscConfig+0x12e>
=======
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8087 	beq.w	80017b2 <HAL_RCC_OscConfig+0x12e>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8001634:	4b92      	ldr	r3, [pc, #584]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b04      	cmp	r3, #4
 800163e:	d00c      	beq.n	800165a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001640:	4b8f      	ldr	r3, [pc, #572]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b08      	cmp	r3, #8
 800164a:	d112      	bne.n	8001672 <HAL_RCC_OscConfig+0x5e>
 800164c:	4b8c      	ldr	r3, [pc, #560]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001658:	d10b      	bne.n	8001672 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165a:	4b89      	ldr	r3, [pc, #548]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d06c      	beq.n	8001740 <HAL_RCC_OscConfig+0x12c>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d168      	bne.n	8001740 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e246      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
=======
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d00c      	beq.n	80016ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b0:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d112      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d10b      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d06c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x12c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d168      	bne.n	80017b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e246      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167a:	d106      	bne.n	800168a <HAL_RCC_OscConfig+0x76>
 800167c:	4b80      	ldr	r3, [pc, #512]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a7f      	ldr	r2, [pc, #508]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001682:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e02e      	b.n	80016e8 <HAL_RCC_OscConfig+0xd4>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0x98>
 8001692:	4b7b      	ldr	r3, [pc, #492]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a7a      	ldr	r2, [pc, #488]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001698:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b78      	ldr	r3, [pc, #480]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a77      	ldr	r2, [pc, #476]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e01d      	b.n	80016e8 <HAL_RCC_OscConfig+0xd4>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0xbc>
 80016b6:	4b72      	ldr	r3, [pc, #456]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a71      	ldr	r2, [pc, #452]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b6f      	ldr	r3, [pc, #444]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a6e      	ldr	r2, [pc, #440]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e00b      	b.n	80016e8 <HAL_RCC_OscConfig+0xd4>
 80016d0:	4b6b      	ldr	r3, [pc, #428]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a6a      	ldr	r2, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b68      	ldr	r3, [pc, #416]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a67      	ldr	r2, [pc, #412]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016e6:	6013      	str	r3, [r2, #0]
=======
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x76>
 80016ec:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a7f      	ldr	r2, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e02e      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a77      	ldr	r2, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0xbc>
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff f8ee 	bl	80008d0 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff f8ea 	bl	80008d0 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e1fa      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b5d      	ldr	r3, [pc, #372]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0xe4>
 8001716:	e014      	b.n	8001742 <HAL_RCC_OscConfig+0x12e>
=======
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff f8ae 	bl	80008c0 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff f8aa 	bl	80008c0 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1fa      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xe4>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001718:	f7ff f8da 	bl	80008d0 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff f8d6 	bl	80008d0 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e1e6      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001732:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x10c>
 800173e:	e000      	b.n	8001742 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001740:	bf00      	nop
=======
 8001788:	f7ff f89a 	bl	80008c0 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff f896 	bl	80008c0 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1e6      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x10c>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d063      	beq.n	8001816 <HAL_RCC_OscConfig+0x202>
=======
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x202>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 800174e:	4b4c      	ldr	r3, [pc, #304]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800175a:	4b49      	ldr	r3, [pc, #292]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b08      	cmp	r3, #8
 8001764:	d11c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x18c>
 8001766:	4b46      	ldr	r3, [pc, #280]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d116      	bne.n	80017a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001772:	4b43      	ldr	r3, [pc, #268]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <HAL_RCC_OscConfig+0x176>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d001      	beq.n	800178a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e1ba      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
=======
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1ba      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4939      	ldr	r1, [pc, #228]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179e:	e03a      	b.n	8001816 <HAL_RCC_OscConfig+0x202>
=======
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4939      	ldr	r1, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	691b      	ldr	r3, [r3, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d020      	beq.n	80017ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a8:	4b36      	ldr	r3, [pc, #216]	; (8001884 <HAL_RCC_OscConfig+0x270>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff f88f 	bl	80008d0 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b6:	f7ff f88b 	bl	80008d0 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e19b      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1a2>
=======
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff f84f 	bl	80008c0 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff f84b 	bl	80008c0 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e19b      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x1a2>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80017d4:	4b2a      	ldr	r3, [pc, #168]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4927      	ldr	r1, [pc, #156]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	e015      	b.n	8001816 <HAL_RCC_OscConfig+0x202>
=======
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_RCC_OscConfig+0x270>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff f86e 	bl	80008d0 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f8:	f7ff f86a 	bl	80008d0 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e17a      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	4b1d      	ldr	r3, [pc, #116]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x1e4>
=======
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff f82e 	bl	80008c0 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff f82a 	bl	80008c0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e17a      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0308 	and.w	r3, r3, #8
 800181e:	2b00      	cmp	r3, #0
 8001820:	d03a      	beq.n	8001898 <HAL_RCC_OscConfig+0x284>
=======
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d03a      	beq.n	8001908 <HAL_RCC_OscConfig+0x284>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d019      	beq.n	800185e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7ff f84e 	bl	80008d0 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001838:	f7ff f84a 	bl	80008d0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e15a      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_RCC_OscConfig+0x26c>)
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x224>
=======
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d019      	beq.n	80018ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff f80e 	bl	80008c0 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff f80a 	bl	80008c0 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e15a      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x224>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 8001856:	2001      	movs	r0, #1
 8001858:	f000 faa6 	bl	8001da8 <RCC_Delay>
 800185c:	e01c      	b.n	8001898 <HAL_RCC_OscConfig+0x284>
=======
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 faa6 	bl	8001e18 <RCC_Delay>
 80018cc:	e01c      	b.n	8001908 <HAL_RCC_OscConfig+0x284>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_RCC_OscConfig+0x274>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001864:	f7ff f834 	bl	80008d0 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800186a:	e00f      	b.n	800188c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff f830 	bl	80008d0 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d908      	bls.n	800188c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e140      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000
 8001884:	42420000 	.word	0x42420000
 8001888:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	4b9e      	ldr	r3, [pc, #632]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e9      	bne.n	800186c <HAL_RCC_OscConfig+0x258>
=======
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7fe fff4 	bl	80008c0 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018da:	e00f      	b.n	80018fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7fe fff0 	bl	80008c0 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d908      	bls.n	80018fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e140      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42420000 	.word	0x42420000
 80018f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b9e      	ldr	r3, [pc, #632]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e9      	bne.n	80018dc <HAL_RCC_OscConfig+0x258>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80a6 	beq.w	80019f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	75fb      	strb	r3, [r7, #23]
=======
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a6 	beq.w	8001a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80018aa:	4b97      	ldr	r3, [pc, #604]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10d      	bne.n	80018d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b94      	ldr	r3, [pc, #592]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a93      	ldr	r2, [pc, #588]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	61d3      	str	r3, [r2, #28]
 80018c2:	4b91      	ldr	r3, [pc, #580]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ce:	2301      	movs	r3, #1
 80018d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d2:	4b8e      	ldr	r3, [pc, #568]	; (8001b0c <HAL_RCC_OscConfig+0x4f8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d118      	bne.n	8001910 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018de:	4b8b      	ldr	r3, [pc, #556]	; (8001b0c <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a8a      	ldr	r2, [pc, #552]	; (8001b0c <HAL_RCC_OscConfig+0x4f8>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018ea:	f7fe fff1 	bl	80008d0 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f2:	f7fe ffed 	bl	80008d0 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b64      	cmp	r3, #100	; 0x64
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e0fd      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	4b81      	ldr	r3, [pc, #516]	; (8001b0c <HAL_RCC_OscConfig+0x4f8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x2de>
=======
 800191a:	4b97      	ldr	r3, [pc, #604]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10d      	bne.n	8001942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b94      	ldr	r3, [pc, #592]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a93      	ldr	r2, [pc, #588]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b91      	ldr	r3, [pc, #580]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b8e      	ldr	r3, [pc, #568]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d118      	bne.n	8001980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b8b      	ldr	r3, [pc, #556]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a8a      	ldr	r2, [pc, #552]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7fe ffb1 	bl	80008c0 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7fe ffad 	bl	80008c0 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0fd      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b81      	ldr	r3, [pc, #516]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x2de>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d106      	bne.n	8001926 <HAL_RCC_OscConfig+0x312>
 8001918:	4b7b      	ldr	r3, [pc, #492]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	4a7a      	ldr	r2, [pc, #488]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	6213      	str	r3, [r2, #32]
 8001924:	e02d      	b.n	8001982 <HAL_RCC_OscConfig+0x36e>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d10c      	bne.n	8001948 <HAL_RCC_OscConfig+0x334>
 800192e:	4b76      	ldr	r3, [pc, #472]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4a75      	ldr	r2, [pc, #468]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	6213      	str	r3, [r2, #32]
 800193a:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a72      	ldr	r2, [pc, #456]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001940:	f023 0304 	bic.w	r3, r3, #4
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	e01c      	b.n	8001982 <HAL_RCC_OscConfig+0x36e>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2b05      	cmp	r3, #5
 800194e:	d10c      	bne.n	800196a <HAL_RCC_OscConfig+0x356>
 8001950:	4b6d      	ldr	r3, [pc, #436]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a6c      	ldr	r2, [pc, #432]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4a69      	ldr	r2, [pc, #420]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6213      	str	r3, [r2, #32]
 8001968:	e00b      	b.n	8001982 <HAL_RCC_OscConfig+0x36e>
 800196a:	4b67      	ldr	r3, [pc, #412]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a66      	ldr	r2, [pc, #408]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	f023 0301 	bic.w	r3, r3, #1
 8001974:	6213      	str	r3, [r2, #32]
 8001976:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a63      	ldr	r2, [pc, #396]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	f023 0304 	bic.w	r3, r3, #4
 8001980:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d015      	beq.n	80019b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198a:	f7fe ffa1 	bl	80008d0 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7fe ff9d 	bl	80008d0 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0ab      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	4b57      	ldr	r3, [pc, #348]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ee      	beq.n	8001992 <HAL_RCC_OscConfig+0x37e>
 80019b4:	e014      	b.n	80019e0 <HAL_RCC_OscConfig+0x3cc>
=======
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 8001988:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a7a      	ldr	r2, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e02d      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x334>
 800199e:	4b76      	ldr	r3, [pc, #472]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a75      	ldr	r2, [pc, #468]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a72      	ldr	r2, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	e01c      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x356>
 80019c0:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a6c      	ldr	r2, [pc, #432]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a69      	ldr	r2, [pc, #420]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019da:	4b67      	ldr	r3, [pc, #412]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a66      	ldr	r2, [pc, #408]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a63      	ldr	r2, [pc, #396]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d015      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7fe ff61 	bl	80008c0 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7fe ff5d 	bl	80008c0 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0ab      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ee      	beq.n	8001a02 <HAL_RCC_OscConfig+0x37e>
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 80019b6:	f7fe ff8b 	bl	80008d0 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019bc:	e00a      	b.n	80019d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019be:	f7fe ff87 	bl	80008d0 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e095      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d4:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1ee      	bne.n	80019be <HAL_RCC_OscConfig+0x3aa>
=======
 8001a26:	f7fe ff4b 	bl	80008c0 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7fe ff47 	bl	80008c0 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e095      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3aa>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d105      	bne.n	80019f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019e6:	4b48      	ldr	r3, [pc, #288]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	4a47      	ldr	r2, [pc, #284]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f0:	61d3      	str	r3, [r2, #28]
=======
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a47      	ldr	r2, [pc, #284]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8081 	beq.w	8001afe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019fc:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 030c 	and.w	r3, r3, #12
 8001a04:	2b08      	cmp	r3, #8
 8001a06:	d061      	beq.n	8001acc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d146      	bne.n	8001a9e <HAL_RCC_OscConfig+0x48a>
=======
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8081 	beq.w	8001b6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d061      	beq.n	8001b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d146      	bne.n	8001b0e <HAL_RCC_OscConfig+0x48a>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001a10:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <HAL_RCC_OscConfig+0x4fc>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7fe ff5b 	bl	80008d0 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a1c:	e008      	b.n	8001a30 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1e:	f7fe ff57 	bl	80008d0 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e067      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a30:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1f0      	bne.n	8001a1e <HAL_RCC_OscConfig+0x40a>
=======
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7fe ff1b 	bl	80008c0 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7fe ff17 	bl	80008c0 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e067      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x40a>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6a1b      	ldr	r3, [r3, #32]
 8001a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a44:	d108      	bne.n	8001a58 <HAL_RCC_OscConfig+0x444>
=======
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x444>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 8001a46:	4b30      	ldr	r3, [pc, #192]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	492d      	ldr	r1, [pc, #180]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
=======
 8001ab6:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	492d      	ldr	r1, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a19      	ldr	r1, [r3, #32]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	4927      	ldr	r1, [pc, #156]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x4fc>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7fe ff2b 	bl	80008d0 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7fe ff27 	bl	80008d0 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e037      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a90:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x46a>
 8001a9c:	e02f      	b.n	8001afe <HAL_RCC_OscConfig+0x4ea>
=======
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a19      	ldr	r1, [r3, #32]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	4927      	ldr	r1, [pc, #156]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7fe feeb 	bl	80008c0 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7fe fee7 	bl	80008c0 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e037      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x46a>
 8001b0c:	e02f      	b.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <HAL_RCC_OscConfig+0x4fc>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7fe ff14 	bl	80008d0 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7fe ff10 	bl	80008d0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e020      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x498>
 8001aca:	e018      	b.n	8001afe <HAL_RCC_OscConfig+0x4ea>
=======
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7fe fed4 	bl	80008c0 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7fe fed0 	bl	80008c0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e020      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x498>
 8001b3a:	e018      	b.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e013      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
=======
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e013      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_OscConfig+0x4f4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_RCC_OscConfig+0x4ec>
=======
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40007000 	.word	0x40007000
 8001b10:	42420060 	.word	0x42420060

08001b14 <HAL_RCC_ClockConfig>:
=======
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42420060 	.word	0x42420060

08001b84 <HAL_RCC_ClockConfig>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
=======
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0d0      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
=======
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0d0      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8001b28:	4b6a      	ldr	r3, [pc, #424]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d910      	bls.n	8001b58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b67      	ldr	r3, [pc, #412]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 0207 	bic.w	r2, r3, #7
 8001b3e:	4965      	ldr	r1, [pc, #404]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]
=======
 8001b98:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d910      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b67      	ldr	r3, [pc, #412]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0207 	bic.w	r2, r3, #7
 8001bae:	4965      	ldr	r1, [pc, #404]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8001b46:	4b63      	ldr	r3, [pc, #396]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0b8      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
=======
 8001bb6:	4b63      	ldr	r3, [pc, #396]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0b8      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d020      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x92>
=======
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x92>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b70:	4b59      	ldr	r3, [pc, #356]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a58      	ldr	r2, [pc, #352]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b88:	4b53      	ldr	r3, [pc, #332]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a52      	ldr	r2, [pc, #328]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b92:	6053      	str	r3, [r2, #4]
=======
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be0:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf8:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c02:	6053      	str	r3, [r2, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8001b94:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	494d      	ldr	r1, [pc, #308]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	604b      	str	r3, [r1, #4]
=======
 8001c04:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	494d      	ldr	r1, [pc, #308]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d040      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x120>
=======
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d040      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x120>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	4b47      	ldr	r3, [pc, #284]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d115      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e07f      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
=======
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d115      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e07f      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e073      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
=======
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e073      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e06b      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f023 0203 	bic.w	r2, r3, #3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4936      	ldr	r1, [pc, #216]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c04:	f7fe fe64 	bl	80008d0 <HAL_GetTick>
 8001c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7fe fe60 	bl	80008d0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e053      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 020c 	and.w	r2, r3, #12
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d1eb      	bne.n	8001c0c <HAL_RCC_ClockConfig+0xf8>
=======
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06b      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c62:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f023 0203 	bic.w	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4936      	ldr	r1, [pc, #216]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c74:	f7fe fe24 	bl	80008c0 <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7fe fe20 	bl	80008c0 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e053      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 020c 	and.w	r2, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1eb      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xf8>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0307 	and.w	r3, r3, #7
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d210      	bcs.n	8001c64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 0207 	bic.w	r2, r3, #7
 8001c4a:	4922      	ldr	r1, [pc, #136]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
=======
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d210      	bcs.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4922      	ldr	r1, [pc, #136]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8001c52:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e032      	b.n	8001cca <HAL_RCC_ClockConfig+0x1b6>
=======
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e032      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d008      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4916      	ldr	r1, [pc, #88]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
=======
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4916      	ldr	r1, [pc, #88]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0308 	and.w	r3, r3, #8
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d009      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c8e:	4b12      	ldr	r3, [pc, #72]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	490e      	ldr	r1, [pc, #56]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	604b      	str	r3, [r1, #4]
=======
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8001ca2:	f000 f821 	bl	8001ce8 <HAL_RCC_GetSysClockFreq>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	490a      	ldr	r1, [pc, #40]	; (8001cdc <HAL_RCC_ClockConfig+0x1c8>)
 8001cb4:	5ccb      	ldrb	r3, [r1, r3]
 8001cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_RCC_ClockConfig+0x1cc>)
 8001cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <HAL_RCC_ClockConfig+0x1d0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fdc2 	bl	800084c <HAL_InitTick>

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40022000 	.word	0x40022000
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	08001e64 	.word	0x08001e64
 8001ce0:	20000020 	.word	0x20000020
 8001ce4:	20000024 	.word	0x20000024

08001ce8 <HAL_RCC_GetSysClockFreq>:
=======
 8001d12:	f000 f821 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d16:	4602      	mov	r2, r0
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	490a      	ldr	r1, [pc, #40]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	5ccb      	ldrb	r3, [r1, r3]
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x1cc>)
 8001d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1d0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fd82 	bl	800083c <HAL_InitTick>

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08001ed4 	.word	0x08001ed4
 8001d50:	20000020 	.word	0x20000020
 8001d54:	20000024 	.word	0x20000024

08001d58 <HAL_RCC_GetSysClockFreq>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8001ce8:	b490      	push	{r4, r7}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
=======
 8001d58:	b490      	push	{r4, r7}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
<<<<<<< HEAD
 8001cee:	4b2a      	ldr	r3, [pc, #168]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001cf0:	1d3c      	adds	r4, r7, #4
 8001cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
=======
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d60:	1d3c      	adds	r4, r7, #4
 8001d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
<<<<<<< HEAD
 8001cf8:	f240 2301 	movw	r3, #513	; 0x201
 8001cfc:	803b      	strh	r3, [r7, #0]
=======
 8001d68:	f240 2301 	movw	r3, #513	; 0x201
 8001d6c:	803b      	strh	r3, [r7, #0]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
=======
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d002      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x40>
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d003      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0x46>
 8001d26:	e02d      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x9c>
=======
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x40>
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x46>
 8001d96:	e02d      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x9c>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d2a:	623b      	str	r3, [r7, #32]
      break;
 8001d2c:	e02d      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9a:	623b      	str	r3, [r7, #32]
      break;
 8001d9c:	e02d      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	0c9b      	lsrs	r3, r3, #18
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d40:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d013      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x8c>
=======
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001daa:	4413      	add	r3, r2
 8001dac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001db0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x8c>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 8001d4c:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	0c5b      	lsrs	r3, r3, #17
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d60:	61bb      	str	r3, [r7, #24]
=======
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0c5b      	lsrs	r3, r3, #17
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dca:	4413      	add	r3, r2
 8001dcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dd0:	61bb      	str	r3, [r7, #24]
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d66:	fb02 f203 	mul.w	r2, r2, r3
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
 8001d72:	e004      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x96>
=======
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd6:	fb02 f203 	mul.w	r2, r2, r3
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	e004      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x96>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d78:	fb02 f303 	mul.w	r3, r2, r3
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	623b      	str	r3, [r7, #32]
      break;
 8001d82:	e002      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0xa2>
=======
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	623b      	str	r3, [r7, #32]
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xa2>
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d86:	623b      	str	r3, [r7, #32]
      break;
 8001d88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3728      	adds	r7, #40	; 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc90      	pop	{r4, r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	08001e54 	.word	0x08001e54
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	007a1200 	.word	0x007a1200
 8001da4:	003d0900 	.word	0x003d0900

08001da8 <RCC_Delay>:
=======
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df6:	623b      	str	r3, [r7, #32]
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc90      	pop	{r4, r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	08001ec4 	.word	0x08001ec4
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	007a1200 	.word	0x007a1200
 8001e14:	003d0900 	.word	0x003d0900

08001e18 <RCC_Delay>:
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db0:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <RCC_Delay+0x34>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <RCC_Delay+0x38>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0a5b      	lsrs	r3, r3, #9
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc4:	bf00      	nop
  }
  while (Delay --);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e5a      	subs	r2, r3, #1
 8001dca:	60fa      	str	r2, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f9      	bne.n	8001dc4 <RCC_Delay+0x1c>
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000020 	.word	0x20000020
 8001de0:	10624dd3 	.word	0x10624dd3

08001de4 <__libc_init_array>:
 8001de4:	b570      	push	{r4, r5, r6, lr}
 8001de6:	2600      	movs	r6, #0
 8001de8:	4d0c      	ldr	r5, [pc, #48]	; (8001e1c <__libc_init_array+0x38>)
 8001dea:	4c0d      	ldr	r4, [pc, #52]	; (8001e20 <__libc_init_array+0x3c>)
 8001dec:	1b64      	subs	r4, r4, r5
 8001dee:	10a4      	asrs	r4, r4, #2
 8001df0:	42a6      	cmp	r6, r4
 8001df2:	d109      	bne.n	8001e08 <__libc_init_array+0x24>
 8001df4:	f000 f822 	bl	8001e3c <_init>
 8001df8:	2600      	movs	r6, #0
 8001dfa:	4d0a      	ldr	r5, [pc, #40]	; (8001e24 <__libc_init_array+0x40>)
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	; (8001e28 <__libc_init_array+0x44>)
 8001dfe:	1b64      	subs	r4, r4, r5
 8001e00:	10a4      	asrs	r4, r4, #2
 8001e02:	42a6      	cmp	r6, r4
 8001e04:	d105      	bne.n	8001e12 <__libc_init_array+0x2e>
 8001e06:	bd70      	pop	{r4, r5, r6, pc}
 8001e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e0c:	4798      	blx	r3
 8001e0e:	3601      	adds	r6, #1
 8001e10:	e7ee      	b.n	8001df0 <__libc_init_array+0xc>
 8001e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e16:	4798      	blx	r3
 8001e18:	3601      	adds	r6, #1
 8001e1a:	e7f2      	b.n	8001e02 <__libc_init_array+0x1e>
 8001e1c:	08001e74 	.word	0x08001e74
 8001e20:	08001e74 	.word	0x08001e74
 8001e24:	08001e74 	.word	0x08001e74
 8001e28:	08001e78 	.word	0x08001e78

08001e2c <memset>:
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4402      	add	r2, r0
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d100      	bne.n	8001e36 <memset+0xa>
 8001e34:	4770      	bx	lr
 8001e36:	f803 1b01 	strb.w	r1, [r3], #1
 8001e3a:	e7f9      	b.n	8001e30 <memset+0x4>

08001e3c <_init>:
 8001e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e3e:	bf00      	nop
 8001e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e42:	bc08      	pop	{r3}
 8001e44:	469e      	mov	lr, r3
 8001e46:	4770      	bx	lr

08001e48 <_fini>:
 8001e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e4a:	bf00      	nop
 8001e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e4e:	bc08      	pop	{r3}
 8001e50:	469e      	mov	lr, r3
 8001e52:	4770      	bx	lr
=======
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <RCC_Delay+0x34>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <RCC_Delay+0x38>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0a5b      	lsrs	r3, r3, #9
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e34:	bf00      	nop
  }
  while (Delay --);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1e5a      	subs	r2, r3, #1
 8001e3a:	60fa      	str	r2, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f9      	bne.n	8001e34 <RCC_Delay+0x1c>
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000020 	.word	0x20000020
 8001e50:	10624dd3 	.word	0x10624dd3

08001e54 <__libc_init_array>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	2600      	movs	r6, #0
 8001e58:	4d0c      	ldr	r5, [pc, #48]	; (8001e8c <__libc_init_array+0x38>)
 8001e5a:	4c0d      	ldr	r4, [pc, #52]	; (8001e90 <__libc_init_array+0x3c>)
 8001e5c:	1b64      	subs	r4, r4, r5
 8001e5e:	10a4      	asrs	r4, r4, #2
 8001e60:	42a6      	cmp	r6, r4
 8001e62:	d109      	bne.n	8001e78 <__libc_init_array+0x24>
 8001e64:	f000 f822 	bl	8001eac <_init>
 8001e68:	2600      	movs	r6, #0
 8001e6a:	4d0a      	ldr	r5, [pc, #40]	; (8001e94 <__libc_init_array+0x40>)
 8001e6c:	4c0a      	ldr	r4, [pc, #40]	; (8001e98 <__libc_init_array+0x44>)
 8001e6e:	1b64      	subs	r4, r4, r5
 8001e70:	10a4      	asrs	r4, r4, #2
 8001e72:	42a6      	cmp	r6, r4
 8001e74:	d105      	bne.n	8001e82 <__libc_init_array+0x2e>
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
 8001e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e7c:	4798      	blx	r3
 8001e7e:	3601      	adds	r6, #1
 8001e80:	e7ee      	b.n	8001e60 <__libc_init_array+0xc>
 8001e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e86:	4798      	blx	r3
 8001e88:	3601      	adds	r6, #1
 8001e8a:	e7f2      	b.n	8001e72 <__libc_init_array+0x1e>
 8001e8c:	08001ee4 	.word	0x08001ee4
 8001e90:	08001ee4 	.word	0x08001ee4
 8001e94:	08001ee4 	.word	0x08001ee4
 8001e98:	08001ee8 	.word	0x08001ee8

08001e9c <memset>:
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4402      	add	r2, r0
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d100      	bne.n	8001ea6 <memset+0xa>
 8001ea4:	4770      	bx	lr
 8001ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eaa:	e7f9      	b.n	8001ea0 <memset+0x4>

08001eac <_init>:
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eae:	bf00      	nop
 8001eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb2:	bc08      	pop	{r3}
 8001eb4:	469e      	mov	lr, r3
 8001eb6:	4770      	bx	lr

08001eb8 <_fini>:
 8001eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eba:	bf00      	nop
 8001ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ebe:	bc08      	pop	{r3}
 8001ec0:	469e      	mov	lr, r3
 8001ec2:	4770      	bx	lr
>>>>>>> parent of ed05af2 (Igang med at sende 24 bytes af gangen)
