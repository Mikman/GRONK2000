
STM32_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  080053f8  080053f8  000153f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800585c  0800585c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800585c  0800585c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800585c  0800585c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005860  08005860  00015860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08005864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001e8  08005a4c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08005a4c  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071db  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016af  00000000  00000000  000273ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  00028aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  00029128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a54  00000000  00000000  000296f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e4d  00000000  00000000  0004114c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083346  00000000  00000000  00047f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb2df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  000cb334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080053dc 	.word	0x080053dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080053dc 	.word	0x080053dc

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_d2uiz>:
 8000a20:	004a      	lsls	r2, r1, #1
 8000a22:	d211      	bcs.n	8000a48 <__aeabi_d2uiz+0x28>
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d211      	bcs.n	8000a4e <__aeabi_d2uiz+0x2e>
 8000a2a:	d50d      	bpl.n	8000a48 <__aeabi_d2uiz+0x28>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d40e      	bmi.n	8000a54 <__aeabi_d2uiz+0x34>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	4770      	bx	lr
 8000a48:	f04f 0000 	mov.w	r0, #0
 8000a4c:	4770      	bx	lr
 8000a4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_d2uiz+0x3a>
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0000 	mov.w	r0, #0
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2lz>:
 8000b00:	b538      	push	{r3, r4, r5, lr}
 8000b02:	460c      	mov	r4, r1
 8000b04:	4605      	mov	r5, r0
 8000b06:	4621      	mov	r1, r4
 8000b08:	4628      	mov	r0, r5
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f7ff ff5f 	bl	80009d0 <__aeabi_dcmplt>
 8000b12:	b928      	cbnz	r0, 8000b20 <__aeabi_d2lz+0x20>
 8000b14:	4628      	mov	r0, r5
 8000b16:	4621      	mov	r1, r4
 8000b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b1c:	f000 b80a 	b.w	8000b34 <__aeabi_d2ulz>
 8000b20:	4628      	mov	r0, r5
 8000b22:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b26:	f000 f805 	bl	8000b34 <__aeabi_d2ulz>
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2ulz>:
 8000b34:	b5d0      	push	{r4, r6, r7, lr}
 8000b36:	2200      	movs	r2, #0
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <__aeabi_d2ulz+0x34>)
 8000b3a:	4606      	mov	r6, r0
 8000b3c:	460f      	mov	r7, r1
 8000b3e:	f7ff fcd5 	bl	80004ec <__aeabi_dmul>
 8000b42:	f7ff ff6d 	bl	8000a20 <__aeabi_d2uiz>
 8000b46:	4604      	mov	r4, r0
 8000b48:	f7ff fc56 	bl	80003f8 <__aeabi_ui2d>
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <__aeabi_d2ulz+0x38>)
 8000b50:	f7ff fccc 	bl	80004ec <__aeabi_dmul>
 8000b54:	4602      	mov	r2, r0
 8000b56:	460b      	mov	r3, r1
 8000b58:	4630      	mov	r0, r6
 8000b5a:	4639      	mov	r1, r7
 8000b5c:	f7ff fb0e 	bl	800017c <__aeabi_dsub>
 8000b60:	f7ff ff5e 	bl	8000a20 <__aeabi_d2uiz>
 8000b64:	4621      	mov	r1, r4
 8000b66:	bdd0      	pop	{r4, r6, r7, pc}
 8000b68:	3df00000 	.word	0x3df00000
 8000b6c:	41f00000 	.word	0x41f00000

08000b70 <readGPS>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */



int8_t readGPS(GPS_FIX_DATA *data){
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b0c9      	sub	sp, #292	; 0x124
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	1d3b      	adds	r3, r7, #4
 8000b78:	6018      	str	r0, [r3, #0]

	int flag = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	HAL_UART_Receive(&huart1, rawData , 255, HAL_MAX_DELAY); // Reads incoming UART transmission and blocks the CPU until 255 bytes is received.
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	22ff      	movs	r2, #255	; 0xff
 8000b86:	4960      	ldr	r1, [pc, #384]	; (8000d08 <readGPS+0x198>)
 8000b88:	4860      	ldr	r0, [pc, #384]	; (8000d0c <readGPS+0x19c>)
 8000b8a:	f001 fb72 	bl	8002272 <HAL_UART_Receive>

	for (int i = 0 ; i < sizeof(rawData) && flag != 1 ; i = i + 1){ // Looking for start of data format indicated as '$'
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000b94:	e067      	b.n	8000c66 <readGPS+0xf6>
		if (rawData[i] == '$') {
 8000b96:	4a5c      	ldr	r2, [pc, #368]	; (8000d08 <readGPS+0x198>)
 8000b98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000b9c:	4413      	add	r3, r2
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b24      	cmp	r3, #36	; 0x24
 8000ba2:	d15b      	bne.n	8000c5c <readGPS+0xec>
			char formatTest[6] = { 0 }; // String for format comparison, i.e. $GPGGA
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
			int check = 5; // Something else than 0 just for safety, since 0 means correct match
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			for (int x = 0; x < 6; x = x + 1) {  // Loops over the next 6 characters and puts then in an array to check for the desired format
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000bbc:	e04a      	b.n	8000c54 <readGPS+0xe4>
				formatTest[x] = rawData[i + x];
 8000bbe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a4f      	ldr	r2, [pc, #316]	; (8000d08 <readGPS+0x198>)
 8000bca:	5cd1      	ldrb	r1, [r2, r3]
 8000bcc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000bd4:	4413      	add	r3, r2
 8000bd6:	460a      	mov	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
				check = strcmp(formatTest, GPSFormat);
 8000bda:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000bde:	494c      	ldr	r1, [pc, #304]	; (8000d10 <readGPS+0x1a0>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f7ff fab5 	bl	8000150 <strcmp>
 8000be6:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108

				if (check == 0) {
 8000bea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d12b      	bne.n	8000c4a <readGPS+0xda>

					uint8_t counter = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
					for (i = i + 1; i < sizeof(rawData); i = i + 1) { // loops until a '$' is found.
 8000bf8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000c02:	e01e      	b.n	8000c42 <readGPS+0xd2>
						if (rawData[i] != '$') {
 8000c04:	4a40      	ldr	r2, [pc, #256]	; (8000d08 <readGPS+0x198>)
 8000c06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c0a:	4413      	add	r3, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b24      	cmp	r3, #36	; 0x24
 8000c10:	d00e      	beq.n	8000c30 <readGPS+0xc0>
							GPSData[counter] = rawData[i]; // Desired data format (GPGGA) is passed into another array
 8000c12:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8000c16:	493c      	ldr	r1, [pc, #240]	; (8000d08 <readGPS+0x198>)
 8000c18:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000c1c:	440a      	add	r2, r1
 8000c1e:	7811      	ldrb	r1, [r2, #0]
 8000c20:	4a3c      	ldr	r2, [pc, #240]	; (8000d14 <readGPS+0x1a4>)
 8000c22:	54d1      	strb	r1, [r2, r3]
							counter = counter + 1;
 8000c24:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 8000c28:	3301      	adds	r3, #1
 8000c2a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 8000c2e:	e003      	b.n	8000c38 <readGPS+0xc8>
						} else {
							flag = 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
							break;
 8000c36:	e008      	b.n	8000c4a <readGPS+0xda>
					for (i = i + 1; i < sizeof(rawData); i = i + 1) { // loops until a '$' is found.
 8000c38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000c42:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c46:	2bfe      	cmp	r3, #254	; 0xfe
 8000c48:	d9dc      	bls.n	8000c04 <readGPS+0x94>
			for (int x = 0; x < 6; x = x + 1) {  // Loops over the next 6 characters and puts then in an array to check for the desired format
 8000c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c4e:	3301      	adds	r3, #1
 8000c50:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8000c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000c58:	2b05      	cmp	r3, #5
 8000c5a:	ddb0      	ble.n	8000bbe <readGPS+0x4e>
	for (int i = 0 ; i < sizeof(rawData) && flag != 1 ; i = i + 1){ // Looking for start of data format indicated as '$'
 8000c5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c60:	3301      	adds	r3, #1
 8000c62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8000c66:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000c6a:	2bfe      	cmp	r3, #254	; 0xfe
 8000c6c:	d803      	bhi.n	8000c76 <readGPS+0x106>
 8000c6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d18f      	bne.n	8000b96 <readGPS+0x26>
				}
			}
		}
	}

	if (flag != 1){
 8000c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d001      	beq.n	8000c82 <readGPS+0x112>

		return 0; // No data available
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e152      	b.n	8000f28 <readGPS+0x3b8>
		for (uint8_t i = 0; i < sizeof(testString); i++) {
			GPSData[i] = testString[i];
		}
		*/

		uint8_t cksum_received = 0; // Check sum of received data
 8000c82:	2300      	movs	r3, #0
 8000c84:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112

		for (uint8_t i = 0; i < sizeof(GPSData); i++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
 8000c8e:	e013      	b.n	8000cb8 <readGPS+0x148>
			if (GPSData[i] == '*') break;
 8000c90:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8000c94:	4a1f      	ldr	r2, [pc, #124]	; (8000d14 <readGPS+0x1a4>)
 8000c96:	5cd3      	ldrb	r3, [r2, r3]
 8000c98:	2b2a      	cmp	r3, #42	; 0x2a
 8000c9a:	d012      	beq.n	8000cc2 <readGPS+0x152>
			cksum_received ^= GPSData[i];
 8000c9c:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8000ca0:	4a1c      	ldr	r2, [pc, #112]	; (8000d14 <readGPS+0x1a4>)
 8000ca2:	5cd2      	ldrb	r2, [r2, r3]
 8000ca4:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8000ca8:	4053      	eors	r3, r2
 8000caa:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
		for (uint8_t i = 0; i < sizeof(GPSData); i++) {
 8000cae:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
 8000cb8:	f897 3111 	ldrb.w	r3, [r7, #273]	; 0x111
 8000cbc:	2bff      	cmp	r3, #255	; 0xff
 8000cbe:	d1e7      	bne.n	8000c90 <readGPS+0x120>
 8000cc0:	e000      	b.n	8000cc4 <readGPS+0x154>
			if (GPSData[i] == '*') break;
 8000cc2:	bf00      	nop
		}

		// Divide GPSData string up in individual sections, each one in its own array sections[i]
		uint8_t sectionNum = 0, sectionChar = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

		char sections[GPS_SECTIONS][GPS_SEC_LENGTH] = { 0 };
 8000cd0:	f107 0308 	add.w	r3, r7, #8
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	23e1      	movs	r3, #225	; 0xe1
 8000cd8:	461a      	mov	r2, r3
 8000cda:	2100      	movs	r1, #0
 8000cdc:	f001 fc72 	bl	80025c4 <memset>

		for (uint16_t i = 0; i < sizeof(GPSData); i++) {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8000ce6:	e032      	b.n	8000d4e <readGPS+0x1de>

			if (GPSData[i] == ',') {
 8000ce8:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000cec:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <readGPS+0x1a4>)
 8000cee:	5cd3      	ldrb	r3, [r2, r3]
 8000cf0:	2b2c      	cmp	r3, #44	; 0x2c
 8000cf2:	d111      	bne.n	8000d18 <readGPS+0x1a8>
				sectionNum++;
 8000cf4:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
				sectionChar = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d04:	e01e      	b.n	8000d44 <readGPS+0x1d4>
 8000d06:	bf00      	nop
 8000d08:	20000204 	.word	0x20000204
 8000d0c:	20000410 	.word	0x20000410
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000304 	.word	0x20000304
			}
			else {
				sections[sectionNum][sectionChar] = GPSData[i];
 8000d18:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000d1c:	f897 2110 	ldrb.w	r2, [r7, #272]	; 0x110
 8000d20:	f897 110f 	ldrb.w	r1, [r7, #271]	; 0x10f
 8000d24:	4883      	ldr	r0, [pc, #524]	; (8000f34 <readGPS+0x3c4>)
 8000d26:	5cc4      	ldrb	r4, [r0, r3]
 8000d28:	f107 0008 	add.w	r0, r7, #8
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	011b      	lsls	r3, r3, #4
 8000d30:	1a9b      	subs	r3, r3, r2
 8000d32:	4403      	add	r3, r0
 8000d34:	440b      	add	r3, r1
 8000d36:	4622      	mov	r2, r4
 8000d38:	701a      	strb	r2, [r3, #0]
				sectionChar++;
 8000d3a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d3e:	3301      	adds	r3, #1
 8000d40:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
		for (uint16_t i = 0; i < sizeof(GPSData); i++) {
 8000d44:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000d48:	3301      	adds	r3, #1
 8000d4a:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
 8000d4e:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8000d52:	2bfe      	cmp	r3, #254	; 0xfe
 8000d54:	d9c8      	bls.n	8000ce8 <readGPS+0x178>
			}
		}

		// Convert gps data from sections[i] into GPS_FIX_DATA struct

		char h[3] = {0}, m[3] = {0}, s[3] = {0};
 8000d56:	4b78      	ldr	r3, [pc, #480]	; (8000f38 <readGPS+0x3c8>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f887 30fe 	strb.w	r3, [r7, #254]	; 0xfe
 8000d64:	4b74      	ldr	r3, [pc, #464]	; (8000f38 <readGPS+0x3c8>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
 8000d72:	4b71      	ldr	r3, [pc, #452]	; (8000f38 <readGPS+0x3c8>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 30f6 	strb.w	r3, [r7, #246]	; 0xf6

		strncpy(h, sections[1], 2);
 8000d80:	f107 0308 	add.w	r3, r7, #8
 8000d84:	f103 010f 	add.w	r1, r3, #15
 8000d88:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fc20 	bl	80025d4 <strncpy>
		strncpy(m, sections[1] + 2, 2);
 8000d94:	f107 0308 	add.w	r3, r7, #8
 8000d98:	330f      	adds	r3, #15
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8000da0:	2202      	movs	r2, #2
 8000da2:	4619      	mov	r1, r3
 8000da4:	f001 fc16 	bl	80025d4 <strncpy>
		strncpy(s, sections[1] + 4, 2);
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	330f      	adds	r3, #15
 8000dae:	3304      	adds	r3, #4
 8000db0:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 8000db4:	2202      	movs	r2, #2
 8000db6:	4619      	mov	r1, r3
 8000db8:	f001 fc0c 	bl	80025d4 <strncpy>

		data->HOURS = 	atoi(h);
 8000dbc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fbd0 	bl	8002566 <atoi>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	701a      	strb	r2, [r3, #0]
		data->MIN = 	atoi(m);
 8000dd0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f001 fbc6 	bl	8002566 <atoi>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	705a      	strb	r2, [r3, #1]
		data->SEC = 	atoi(s);
 8000de4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000de8:	4618      	mov	r0, r3
 8000dea:	f001 fbbc 	bl	8002566 <atoi>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b2da      	uxtb	r2, r3
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	709a      	strb	r2, [r3, #2]

		data->LAT = 	atof(sections[2]);
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	331e      	adds	r3, #30
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fbae 	bl	8002560 <atof>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4610      	mov	r0, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f7ff fe28 	bl	8000a60 <__aeabi_d2f>
 8000e10:	4602      	mov	r2, r0
 8000e12:	1d3b      	adds	r3, r7, #4
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
		data->LAT_DIR = sections[3][0];
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	721a      	strb	r2, [r3, #8]
		data->LON = 	atof(sections[4]);
 8000e26:	f107 0308 	add.w	r3, r7, #8
 8000e2a:	333c      	adds	r3, #60	; 0x3c
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f001 fb97 	bl	8002560 <atof>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f7ff fe11 	bl	8000a60 <__aeabi_d2f>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60da      	str	r2, [r3, #12]
		data->LON_DIR =	sections[5][0];
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	741a      	strb	r2, [r3, #16]
		data->QUALITY = atoi(sections[6]);
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	335a      	adds	r3, #90	; 0x5a
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fb83 	bl	8002566 <atoi>
 8000e60:	4603      	mov	r3, r0
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	745a      	strb	r2, [r3, #17]
		data->SATS = 	atoi(sections[7]);
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	3369      	adds	r3, #105	; 0x69
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fb78 	bl	8002566 <atoi>
 8000e76:	4603      	mov	r3, r0
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	749a      	strb	r2, [r3, #18]
		data->HDOP = 	atof(sections[8]);
 8000e80:	f107 0308 	add.w	r3, r7, #8
 8000e84:	3378      	adds	r3, #120	; 0x78
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 fb6a 	bl	8002560 <atof>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff fde4 	bl	8000a60 <__aeabi_d2f>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	1d3b      	adds	r3, r7, #4
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	615a      	str	r2, [r3, #20]
		data->ALTITUDE=	atof(sections[9]);
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	3387      	adds	r3, #135	; 0x87
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f001 fb5a 	bl	8002560 <atof>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f7ff fdd4 	bl	8000a60 <__aeabi_d2f>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	619a      	str	r2, [r3, #24]
		data->H_GEOID =	atof(sections[11]);
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	33a5      	adds	r3, #165	; 0xa5
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f001 fb4a 	bl	8002560 <atof>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f7ff fdc4 	bl	8000a60 <__aeabi_d2f>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	61da      	str	r2, [r3, #28]

		char ck[3] = { sections[14][1], sections[14][2], 0};
 8000ee0:	f107 0308 	add.w	r3, r7, #8
 8000ee4:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 8000ee8:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8000ef4:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2

		char *eptr;
		uint8_t cksum_sent	=	strtol(ck, &eptr, 16);
 8000efe:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8000f02:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000f06:	2210      	movs	r2, #16
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fa1f 	bl	800334c <strtol>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		if (cksum_sent == cksum_received) return 1;
 8000f14:	f897 2107 	ldrb.w	r2, [r7, #263]	; 0x107
 8000f18:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d101      	bne.n	8000f24 <readGPS+0x3b4>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e001      	b.n	8000f28 <readGPS+0x3b8>
		else return -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
	}
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000304 	.word	0x20000304
 8000f38:	080053f8 	.word	0x080053f8

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f000 fa41 	bl	80013c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f816 	bl	8000f76 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 f883 	bl	8001054 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f4e:	f000 f857 	bl	8001000 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 GPS_FIX_DATA data = { 0 };
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2220      	movs	r2, #32
 8000f56:	2100      	movs	r1, #0
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 fb33 	bl	80025c4 <memset>

	 int8_t result = readGPS(&data);
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fe05 	bl	8000b70 <readGPS>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27


	 HAL_Delay(1000);
 8000f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f70:	f000 fa8c 	bl	800148c <HAL_Delay>
  {
 8000f74:	e7ed      	b.n	8000f52 <main+0x16>

08000f76 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b090      	sub	sp, #64	; 0x40
 8000f7a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7c:	f107 0318 	add.w	r3, r7, #24
 8000f80:	2228      	movs	r2, #40	; 0x28
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fb1d 	bl	80025c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fb4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fba:	f107 0318 	add.w	r3, r7, #24
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 fcf0 	bl	80019a4 <HAL_RCC_OscConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fca:	f000 f865 	bl	8001098 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fce:	230f      	movs	r3, #15
 8000fd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 ff5b 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ff4:	f000 f850 	bl	8001098 <Error_Handler>
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3740      	adds	r7, #64	; 0x40
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001006:	4a12      	ldr	r2, [pc, #72]	; (8001050 <MX_USART1_UART_Init+0x50>)
 8001008:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800100a:	4b10      	ldr	r3, [pc, #64]	; (800104c <MX_USART1_UART_Init+0x4c>)
 800100c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001010:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001018:	4b0c      	ldr	r3, [pc, #48]	; (800104c <MX_USART1_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800101e:	4b0b      	ldr	r3, [pc, #44]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001026:	220c      	movs	r2, #12
 8001028:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <MX_USART1_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_USART1_UART_Init+0x4c>)
 8001038:	f001 f8ce 	bl	80021d8 <HAL_UART_Init>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001042:	f000 f829 	bl	8001098 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000410 	.word	0x20000410
 8001050:	40013800 	.word	0x40013800

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <MX_GPIO_Init+0x40>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <MX_GPIO_Init+0x40>)
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <MX_GPIO_Init+0x40>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <MX_GPIO_Init+0x40>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <MX_GPIO_Init+0x40>)
 8001078:	f043 0304 	orr.w	r3, r3, #4
 800107c:	6193      	str	r3, [r2, #24]
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <MX_GPIO_Init+0x40>)
 8001080:	699b      	ldr	r3, [r3, #24]
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr
 8001094:	40021000 	.word	0x40021000

08001098 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800109c:	b672      	cpsid	i
}
 800109e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <Error_Handler+0x8>
	...

080010a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010aa:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_MspInit+0x5c>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_MspInit+0x5c>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6193      	str	r3, [r2, #24]
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_MspInit+0x5c>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_MspInit+0x5c>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_MspInit+0x5c>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_MspInit+0x5c>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_MspInit+0x60>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_MspInit+0x60>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr
 8001100:	40021000 	.word	0x40021000
 8001104:	40010000 	.word	0x40010000

08001108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <HAL_UART_MspInit+0x8c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d131      	bne.n	800118c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_UART_MspInit+0x90>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	4a1a      	ldr	r2, [pc, #104]	; (8001198 <HAL_UART_MspInit+0x90>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001132:	6193      	str	r3, [r2, #24]
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <HAL_UART_MspInit+0x90>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <HAL_UART_MspInit+0x90>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a14      	ldr	r2, [pc, #80]	; (8001198 <HAL_UART_MspInit+0x90>)
 8001146:	f043 0304 	orr.w	r3, r3, #4
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_UART_MspInit+0x90>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001158:	f44f 7300 	mov.w	r3, #512	; 0x200
 800115c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001162:	2303      	movs	r3, #3
 8001164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001166:	f107 0310 	add.w	r3, r7, #16
 800116a:	4619      	mov	r1, r3
 800116c:	480b      	ldr	r0, [pc, #44]	; (800119c <HAL_UART_MspInit+0x94>)
 800116e:	f000 fa95 	bl	800169c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_UART_MspInit+0x94>)
 8001188:	f000 fa88 	bl	800169c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40013800 	.word	0x40013800
 8001198:	40021000 	.word	0x40021000
 800119c:	40010800 	.word	0x40010800

080011a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <NMI_Handler+0x4>

080011a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <MemManage_Handler+0x4>

080011b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <BusFault_Handler+0x4>

080011b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <UsageFault_Handler+0x4>

080011be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e6:	f000 f935 	bl	8001454 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
	return 1;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr

080011fc <_kill>:

int _kill(int pid, int sig)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001206:	f001 f9b3 	bl	8002570 <__errno>
 800120a:	4603      	mov	r3, r0
 800120c:	2216      	movs	r2, #22
 800120e:	601a      	str	r2, [r3, #0]
	return -1;
 8001210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <_exit>:

void _exit (int status)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffe7 	bl	80011fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800122e:	e7fe      	b.n	800122e <_exit+0x12>

08001230 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e00a      	b.n	8001258 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001242:	f3af 8000 	nop.w
 8001246:	4601      	mov	r1, r0
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	1c5a      	adds	r2, r3, #1
 800124c:	60ba      	str	r2, [r7, #8]
 800124e:	b2ca      	uxtb	r2, r1
 8001250:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3301      	adds	r3, #1
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	dbf0      	blt.n	8001242 <_read+0x12>
	}

return len;
 8001260:	687b      	ldr	r3, [r7, #4]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	e009      	b.n	8001290 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	60ba      	str	r2, [r7, #8]
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	3301      	adds	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697a      	ldr	r2, [r7, #20]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	429a      	cmp	r2, r3
 8001296:	dbf1      	blt.n	800127c <_write+0x12>
	}
	return len;
 8001298:	687b      	ldr	r3, [r7, #4]
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_close>:

int _close(int file)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
	return -1;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c8:	605a      	str	r2, [r3, #4]
	return 0;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bc80      	pop	{r7}
 80012d4:	4770      	bx	lr

080012d6 <_isatty>:

int _isatty(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	return 1;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	60f8      	str	r0, [r7, #12]
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
	return 0;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
	...

08001304 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800130c:	4a14      	ldr	r2, [pc, #80]	; (8001360 <_sbrk+0x5c>)
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <_sbrk+0x60>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001318:	4b13      	ldr	r3, [pc, #76]	; (8001368 <_sbrk+0x64>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <_sbrk+0x64>)
 8001322:	4a12      	ldr	r2, [pc, #72]	; (800136c <_sbrk+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001326:	4b10      	ldr	r3, [pc, #64]	; (8001368 <_sbrk+0x64>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	429a      	cmp	r2, r3
 8001332:	d207      	bcs.n	8001344 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001334:	f001 f91c 	bl	8002570 <__errno>
 8001338:	4603      	mov	r3, r0
 800133a:	220c      	movs	r2, #12
 800133c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e009      	b.n	8001358 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001344:	4b08      	ldr	r3, [pc, #32]	; (8001368 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <_sbrk+0x64>)
 8001354:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20005000 	.word	0x20005000
 8001364:	00000400 	.word	0x00000400
 8001368:	20000404 	.word	0x20000404
 800136c:	20000468 	.word	0x20000468

08001370 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800137c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800137e:	e003      	b.n	8001388 <LoopCopyDataInit>

08001380 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001382:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001384:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001386:	3104      	adds	r1, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001388:	480a      	ldr	r0, [pc, #40]	; (80013b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800138c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800138e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001390:	d3f6      	bcc.n	8001380 <CopyDataInit>
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001394:	e002      	b.n	800139c <LoopFillZerobss>

08001396 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001398:	f842 3b04 	str.w	r3, [r2], #4

0800139c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800139e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80013a0:	d3f9      	bcc.n	8001396 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013a2:	f7ff ffe5 	bl	8001370 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a6:	f001 f8e9 	bl	800257c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013aa:	f7ff fdc7 	bl	8000f3c <main>
  bx lr
 80013ae:	4770      	bx	lr
  ldr r3, =_sidata
 80013b0:	08005864 	.word	0x08005864
  ldr r0, =_sdata
 80013b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013b8:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 80013bc:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 80013c0:	20000464 	.word	0x20000464

080013c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_2_IRQHandler>
	...

080013c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_Init+0x28>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_Init+0x28>)
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d8:	2003      	movs	r0, #3
 80013da:	f000 f92b 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013de:	2000      	movs	r0, #0
 80013e0:	f000 f808 	bl	80013f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e4:	f7ff fe5e 	bl	80010a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013fc:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_InitTick+0x54>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_InitTick+0x58>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	fbb3 f3f1 	udiv	r3, r3, r1
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f000 f935 	bl	8001682 <HAL_SYSTICK_Config>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e00e      	b.n	8001440 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b0f      	cmp	r3, #15
 8001426:	d80a      	bhi.n	800143e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001428:	2200      	movs	r2, #0
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	f04f 30ff 	mov.w	r0, #4294967295
 8001430:	f000 f90b 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001434:	4a06      	ldr	r2, [pc, #24]	; (8001450 <HAL_InitTick+0x5c>)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143a:	2300      	movs	r3, #0
 800143c:	e000      	b.n	8001440 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000008 	.word	0x20000008
 800144c:	20000010 	.word	0x20000010
 8001450:	2000000c 	.word	0x2000000c

08001454 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_IncTick+0x1c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	461a      	mov	r2, r3
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_IncTick+0x20>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4413      	add	r3, r2
 8001464:	4a03      	ldr	r2, [pc, #12]	; (8001474 <HAL_IncTick+0x20>)
 8001466:	6013      	str	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr
 8001470:	20000010 	.word	0x20000010
 8001474:	20000450 	.word	0x20000450

08001478 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b02      	ldr	r3, [pc, #8]	; (8001488 <HAL_GetTick+0x10>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000450 	.word	0x20000450

0800148c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff fff0 	bl	8001478 <HAL_GetTick>
 8001498:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a4:	d005      	beq.n	80014b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014a6:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <HAL_Delay+0x44>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4413      	add	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b2:	bf00      	nop
 80014b4:	f7ff ffe0 	bl	8001478 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d8f7      	bhi.n	80014b4 <HAL_Delay+0x28>
  {
  }
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000010 	.word	0x20000010

080014d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014f0:	4013      	ands	r3, r2
 80014f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	; (8001518 <__NVIC_SetPriorityGrouping+0x44>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <__NVIC_GetPriorityGrouping+0x18>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	f003 0307 	and.w	r3, r3, #7
}
 800152a:	4618      	mov	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	bc80      	pop	{r7}
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	; (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	; (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	; 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	; 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff90 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff49 	bl	80014d4 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff5e 	bl	800151c <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff90 	bl	800158c <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5f 	bl	8001538 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffb0 	bl	80015f0 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800169c:	b480      	push	{r7}
 800169e:	b08b      	sub	sp, #44	; 0x2c
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ae:	e169      	b.n	8001984 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016b0:	2201      	movs	r2, #1
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	f040 8158 	bne.w	800197e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4a9a      	ldr	r2, [pc, #616]	; (800193c <HAL_GPIO_Init+0x2a0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d05e      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016d8:	4a98      	ldr	r2, [pc, #608]	; (800193c <HAL_GPIO_Init+0x2a0>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d875      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016de:	4a98      	ldr	r2, [pc, #608]	; (8001940 <HAL_GPIO_Init+0x2a4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d058      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016e4:	4a96      	ldr	r2, [pc, #600]	; (8001940 <HAL_GPIO_Init+0x2a4>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d86f      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016ea:	4a96      	ldr	r2, [pc, #600]	; (8001944 <HAL_GPIO_Init+0x2a8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d052      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016f0:	4a94      	ldr	r2, [pc, #592]	; (8001944 <HAL_GPIO_Init+0x2a8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d869      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 80016f6:	4a94      	ldr	r2, [pc, #592]	; (8001948 <HAL_GPIO_Init+0x2ac>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d04c      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 80016fc:	4a92      	ldr	r2, [pc, #584]	; (8001948 <HAL_GPIO_Init+0x2ac>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d863      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 8001702:	4a92      	ldr	r2, [pc, #584]	; (800194c <HAL_GPIO_Init+0x2b0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d046      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
 8001708:	4a90      	ldr	r2, [pc, #576]	; (800194c <HAL_GPIO_Init+0x2b0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d85d      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 800170e:	2b12      	cmp	r3, #18
 8001710:	d82a      	bhi.n	8001768 <HAL_GPIO_Init+0xcc>
 8001712:	2b12      	cmp	r3, #18
 8001714:	d859      	bhi.n	80017ca <HAL_GPIO_Init+0x12e>
 8001716:	a201      	add	r2, pc, #4	; (adr r2, 800171c <HAL_GPIO_Init+0x80>)
 8001718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171c:	08001797 	.word	0x08001797
 8001720:	08001771 	.word	0x08001771
 8001724:	08001783 	.word	0x08001783
 8001728:	080017c5 	.word	0x080017c5
 800172c:	080017cb 	.word	0x080017cb
 8001730:	080017cb 	.word	0x080017cb
 8001734:	080017cb 	.word	0x080017cb
 8001738:	080017cb 	.word	0x080017cb
 800173c:	080017cb 	.word	0x080017cb
 8001740:	080017cb 	.word	0x080017cb
 8001744:	080017cb 	.word	0x080017cb
 8001748:	080017cb 	.word	0x080017cb
 800174c:	080017cb 	.word	0x080017cb
 8001750:	080017cb 	.word	0x080017cb
 8001754:	080017cb 	.word	0x080017cb
 8001758:	080017cb 	.word	0x080017cb
 800175c:	080017cb 	.word	0x080017cb
 8001760:	08001779 	.word	0x08001779
 8001764:	0800178d 	.word	0x0800178d
 8001768:	4a79      	ldr	r2, [pc, #484]	; (8001950 <HAL_GPIO_Init+0x2b4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800176e:	e02c      	b.n	80017ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	623b      	str	r3, [r7, #32]
          break;
 8001776:	e029      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	3304      	adds	r3, #4
 800177e:	623b      	str	r3, [r7, #32]
          break;
 8001780:	e024      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	3308      	adds	r3, #8
 8001788:	623b      	str	r3, [r7, #32]
          break;
 800178a:	e01f      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	330c      	adds	r3, #12
 8001792:	623b      	str	r3, [r7, #32]
          break;
 8001794:	e01a      	b.n	80017cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800179e:	2304      	movs	r3, #4
 80017a0:	623b      	str	r3, [r7, #32]
          break;
 80017a2:	e013      	b.n	80017cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ac:	2308      	movs	r3, #8
 80017ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	611a      	str	r2, [r3, #16]
          break;
 80017b6:	e009      	b.n	80017cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017b8:	2308      	movs	r3, #8
 80017ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	615a      	str	r2, [r3, #20]
          break;
 80017c2:	e003      	b.n	80017cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017c4:	2300      	movs	r3, #0
 80017c6:	623b      	str	r3, [r7, #32]
          break;
 80017c8:	e000      	b.n	80017cc <HAL_GPIO_Init+0x130>
          break;
 80017ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	2bff      	cmp	r3, #255	; 0xff
 80017d0:	d801      	bhi.n	80017d6 <HAL_GPIO_Init+0x13a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	e001      	b.n	80017da <HAL_GPIO_Init+0x13e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3304      	adds	r3, #4
 80017da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d802      	bhi.n	80017e8 <HAL_GPIO_Init+0x14c>
 80017e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	e002      	b.n	80017ee <HAL_GPIO_Init+0x152>
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	3b08      	subs	r3, #8
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	210f      	movs	r1, #15
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	401a      	ands	r2, r3
 8001800:	6a39      	ldr	r1, [r7, #32]
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	fa01 f303 	lsl.w	r3, r1, r3
 8001808:	431a      	orrs	r2, r3
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80b1 	beq.w	800197e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800181c:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <HAL_GPIO_Init+0x2b8>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	4a4c      	ldr	r2, [pc, #304]	; (8001954 <HAL_GPIO_Init+0x2b8>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6193      	str	r3, [r2, #24]
 8001828:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x2b8>)
 800182a:	699b      	ldr	r3, [r3, #24]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	60bb      	str	r3, [r7, #8]
 8001832:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001834:	4a48      	ldr	r2, [pc, #288]	; (8001958 <HAL_GPIO_Init+0x2bc>)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	089b      	lsrs	r3, r3, #2
 800183a:	3302      	adds	r3, #2
 800183c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001840:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	220f      	movs	r2, #15
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	4013      	ands	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a40      	ldr	r2, [pc, #256]	; (800195c <HAL_GPIO_Init+0x2c0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d013      	beq.n	8001888 <HAL_GPIO_Init+0x1ec>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a3f      	ldr	r2, [pc, #252]	; (8001960 <HAL_GPIO_Init+0x2c4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d00d      	beq.n	8001884 <HAL_GPIO_Init+0x1e8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a3e      	ldr	r2, [pc, #248]	; (8001964 <HAL_GPIO_Init+0x2c8>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d007      	beq.n	8001880 <HAL_GPIO_Init+0x1e4>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a3d      	ldr	r2, [pc, #244]	; (8001968 <HAL_GPIO_Init+0x2cc>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d101      	bne.n	800187c <HAL_GPIO_Init+0x1e0>
 8001878:	2303      	movs	r3, #3
 800187a:	e006      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 800187c:	2304      	movs	r3, #4
 800187e:	e004      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001880:	2302      	movs	r3, #2
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_GPIO_Init+0x1ee>
 8001888:	2300      	movs	r3, #0
 800188a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800188c:	f002 0203 	and.w	r2, r2, #3
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	4093      	lsls	r3, r2
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800189a:	492f      	ldr	r1, [pc, #188]	; (8001958 <HAL_GPIO_Init+0x2bc>)
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018b4:	4b2d      	ldr	r3, [pc, #180]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	492c      	ldr	r1, [pc, #176]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	4313      	orrs	r3, r2
 80018be:	600b      	str	r3, [r1, #0]
 80018c0:	e006      	b.n	80018d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018c2:	4b2a      	ldr	r3, [pc, #168]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	4928      	ldr	r1, [pc, #160]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d006      	beq.n	80018ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	4922      	ldr	r1, [pc, #136]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]
 80018e8:	e006      	b.n	80018f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018ea:	4b20      	ldr	r3, [pc, #128]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	491e      	ldr	r1, [pc, #120]	; (800196c <HAL_GPIO_Init+0x2d0>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001906:	689a      	ldr	r2, [r3, #8]
 8001908:	4918      	ldr	r1, [pc, #96]	; (800196c <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	608b      	str	r3, [r1, #8]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4914      	ldr	r1, [pc, #80]	; (800196c <HAL_GPIO_Init+0x2d0>)
 800191c:	4013      	ands	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d021      	beq.n	8001970 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <HAL_GPIO_Init+0x2d0>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	490e      	ldr	r1, [pc, #56]	; (800196c <HAL_GPIO_Init+0x2d0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	60cb      	str	r3, [r1, #12]
 8001938:	e021      	b.n	800197e <HAL_GPIO_Init+0x2e2>
 800193a:	bf00      	nop
 800193c:	10320000 	.word	0x10320000
 8001940:	10310000 	.word	0x10310000
 8001944:	10220000 	.word	0x10220000
 8001948:	10210000 	.word	0x10210000
 800194c:	10120000 	.word	0x10120000
 8001950:	10110000 	.word	0x10110000
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000
 800195c:	40010800 	.word	0x40010800
 8001960:	40010c00 	.word	0x40010c00
 8001964:	40011000 	.word	0x40011000
 8001968:	40011400 	.word	0x40011400
 800196c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_GPIO_Init+0x304>)
 8001972:	68da      	ldr	r2, [r3, #12]
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	43db      	mvns	r3, r3
 8001978:	4909      	ldr	r1, [pc, #36]	; (80019a0 <HAL_GPIO_Init+0x304>)
 800197a:	4013      	ands	r3, r2
 800197c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	3301      	adds	r3, #1
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	f47f ae8e 	bne.w	80016b0 <HAL_GPIO_Init+0x14>
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	372c      	adds	r7, #44	; 0x2c
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr
 80019a0:	40010400 	.word	0x40010400

080019a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e26c      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8087 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c4:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d00c      	beq.n	80019ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d0:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d112      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
 80019dc:	4b8c      	ldr	r3, [pc, #560]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d10b      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ea:	4b89      	ldr	r3, [pc, #548]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d06c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d168      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e246      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x76>
 8001a0c:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a7f      	ldr	r2, [pc, #508]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	e02e      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x98>
 8001a22:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b78      	ldr	r3, [pc, #480]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a77      	ldr	r2, [pc, #476]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01d      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0xbc>
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a71      	ldr	r2, [pc, #452]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a6e      	ldr	r2, [pc, #440]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a60:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6a      	ldr	r2, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a67      	ldr	r2, [pc, #412]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff fcfa 	bl	8001478 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff fcf6 	bl	8001478 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1fa      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0xe4>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fce6 	bl	8001478 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff fce2 	bl	8001478 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1e6      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x10c>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ade:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aea:	4b49      	ldr	r3, [pc, #292]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d11c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d116      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1ba      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4939      	ldr	r1, [pc, #228]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	e03a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fc9b 	bl	8001478 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b46:	f7ff fc97 	bl	8001478 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e19b      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4927      	ldr	r1, [pc, #156]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fc7a 	bl	8001478 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7ff fc76 	bl	8001478 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e17a      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d03a      	beq.n	8001c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d019      	beq.n	8001bee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fc5a 	bl	8001478 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7ff fc56 	bl	8001478 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e15a      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f000 fad8 	bl	800219c <RCC_Delay>
 8001bec:	e01c      	b.n	8001c28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fc40 	bl	8001478 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfa:	e00f      	b.n	8001c1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fc3c 	bl	8001478 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d908      	bls.n	8001c1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e140      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	42420000 	.word	0x42420000
 8001c18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	4b9e      	ldr	r3, [pc, #632]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e9      	bne.n	8001bfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a6 	beq.w	8001d82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3a:	4b97      	ldr	r3, [pc, #604]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10d      	bne.n	8001c62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4b94      	ldr	r3, [pc, #592]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a93      	ldr	r2, [pc, #588]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b91      	ldr	r3, [pc, #580]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b8e      	ldr	r3, [pc, #568]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6e:	4b8b      	ldr	r3, [pc, #556]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a8a      	ldr	r2, [pc, #552]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff fbfd 	bl	8001478 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c82:	f7ff fbf9 	bl	8001478 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b64      	cmp	r3, #100	; 0x64
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0fd      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b81      	ldr	r3, [pc, #516]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x312>
 8001ca8:	4b7b      	ldr	r3, [pc, #492]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a7a      	ldr	r2, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	e02d      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x334>
 8001cbe:	4b76      	ldr	r3, [pc, #472]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a75      	ldr	r2, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b73      	ldr	r3, [pc, #460]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a72      	ldr	r2, [pc, #456]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	e01c      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x356>
 8001ce0:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a6c      	ldr	r2, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6213      	str	r3, [r2, #32]
 8001cec:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a69      	ldr	r2, [pc, #420]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cfa:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a66      	ldr	r2, [pc, #408]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	4b64      	ldr	r3, [pc, #400]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a63      	ldr	r2, [pc, #396]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d015      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff fbad 	bl	8001478 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7ff fba9 	bl	8001478 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0ab      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d38:	4b57      	ldr	r3, [pc, #348]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0ee      	beq.n	8001d22 <HAL_RCC_OscConfig+0x37e>
 8001d44:	e014      	b.n	8001d70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7ff fb97 	bl	8001478 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7ff fb93 	bl	8001478 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e095      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ee      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d76:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8081 	beq.w	8001e8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d061      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d146      	bne.n	8001e2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7ff fb67 	bl	8001478 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff fb63 	bl	8001478 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e067      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f0      	bne.n	8001dae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d108      	bne.n	8001de8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dd6:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	492d      	ldr	r1, [pc, #180]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a19      	ldr	r1, [r3, #32]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	4927      	ldr	r1, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7ff fb37 	bl	8001478 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7ff fb33 	bl	8001478 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e037      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46a>
 8001e2c:	e02f      	b.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fb20 	bl	8001478 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff fb1c 	bl	8001478 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e020      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x498>
 8001e5a:	e018      	b.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e013      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42420060 	.word	0x42420060

08001ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0d0      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4965      	ldr	r1, [pc, #404]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b63      	ldr	r3, [pc, #396]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0b8      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a58      	ldr	r2, [pc, #352]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	494d      	ldr	r1, [pc, #308]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d040      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d115      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e07f      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e073      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06b      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4936      	ldr	r1, [pc, #216]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7ff fa70 	bl	8001478 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7ff fa6c 	bl	8001478 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e053      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d210      	bcs.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4922      	ldr	r1, [pc, #136]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e032      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4916      	ldr	r1, [pc, #88]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	490e      	ldr	r1, [pc, #56]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002032:	f000 f821 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002036:	4602      	mov	r2, r0
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	490a      	ldr	r1, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	5ccb      	ldrb	r3, [r1, r3]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1cc>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1d0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f9ce 	bl	80013f4 <HAL_InitTick>

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40022000 	.word	0x40022000
 8002068:	40021000 	.word	0x40021000
 800206c:	0800540c 	.word	0x0800540c
 8002070:	20000008 	.word	0x20000008
 8002074:	2000000c 	.word	0x2000000c

08002078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b490      	push	{r4, r7}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002080:	1d3c      	adds	r4, r7, #4
 8002082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002088:	f240 2301 	movw	r3, #513	; 0x201
 800208c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x40>
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x46>
 80020b6:	e02d      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ba:	623b      	str	r3, [r7, #32]
      break;
 80020bc:	e02d      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	0c9b      	lsrs	r3, r3, #18
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ca:	4413      	add	r3, r2
 80020cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d013      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	0c5b      	lsrs	r3, r3, #17
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ea:	4413      	add	r3, r2
 80020ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f6:	fb02 f203 	mul.w	r2, r2, r3
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	e004      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	623b      	str	r3, [r7, #32]
      break;
 8002112:	e002      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002116:	623b      	str	r3, [r7, #32]
      break;
 8002118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211a:	6a3b      	ldr	r3, [r7, #32]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bc90      	pop	{r4, r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	080053fc 	.word	0x080053fc
 800212c:	40021000 	.word	0x40021000
 8002130:	007a1200 	.word	0x007a1200
 8002134:	003d0900 	.word	0x003d0900

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_RCC_GetHCLKFreq+0x10>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	20000008 	.word	0x20000008

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002150:	f7ff fff2 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4903      	ldr	r1, [pc, #12]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	0800541c 	.word	0x0800541c

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002178:	f7ff ffde 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0adb      	lsrs	r3, r3, #11
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	0800541c 	.word	0x0800541c

0800219c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <RCC_Delay+0x34>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <RCC_Delay+0x38>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0a5b      	lsrs	r3, r3, #9
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b8:	bf00      	nop
  }
  while (Delay --);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	60fa      	str	r2, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <RCC_Delay+0x1c>
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	20000008 	.word	0x20000008
 80021d4:	10624dd3 	.word	0x10624dd3

080021d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e03f      	b.n	800226a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7fe ff82 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	; 0x24
 8002208:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800221a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f911 	bl	8002444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695a      	ldr	r2, [r3, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b08a      	sub	sp, #40	; 0x28
 8002276:	af02      	add	r7, sp, #8
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	603b      	str	r3, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b20      	cmp	r3, #32
 8002290:	f040 8089 	bne.w	80023a6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_UART_Receive+0x2e>
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e081      	b.n	80023a8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_UART_Receive+0x40>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e07a      	b.n	80023a8 <HAL_UART_Receive+0x136>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2222      	movs	r2, #34	; 0x22
 80022c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80022c8:	f7ff f8d6 	bl	8001478 <HAL_GetTick>
 80022cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	88fa      	ldrh	r2, [r7, #6]
 80022d2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	88fa      	ldrh	r2, [r7, #6]
 80022d8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e2:	d108      	bne.n	80022f6 <HAL_UART_Receive+0x84>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
 80022f4:	e003      	b.n	80022fe <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002306:	e043      	b.n	8002390 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	2200      	movs	r2, #0
 8002310:	2120      	movs	r1, #32
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f84c 	bl	80023b0 <UART_WaitOnFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e042      	b.n	80023a8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10c      	bne.n	8002342 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	b29b      	uxth	r3, r3
 8002330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002334:	b29a      	uxth	r2, r3
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	3302      	adds	r3, #2
 800233e:	61bb      	str	r3, [r7, #24]
 8002340:	e01f      	b.n	8002382 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234a:	d007      	beq.n	800235c <HAL_UART_Receive+0xea>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <HAL_UART_Receive+0xf8>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d106      	bne.n	800236a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e008      	b.n	800237c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002376:	b2da      	uxtb	r2, r3
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002386:	b29b      	uxth	r3, r3
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1b6      	bne.n	8002308 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2220      	movs	r2, #32
 800239e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	e000      	b.n	80023a8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
  }
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c0:	e02c      	b.n	800241c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d028      	beq.n	800241c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80023d0:	f7ff f852 	bl	8001478 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d21d      	bcs.n	800241c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e00f      	b.n	800243c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4013      	ands	r3, r2
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	429a      	cmp	r2, r3
 800242a:	bf0c      	ite	eq
 800242c:	2301      	moveq	r3, #1
 800242e:	2300      	movne	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	461a      	mov	r2, r3
 8002434:	79fb      	ldrb	r3, [r7, #7]
 8002436:	429a      	cmp	r2, r3
 8002438:	d0c3      	beq.n	80023c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	430a      	orrs	r2, r1
 8002460:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	431a      	orrs	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	4313      	orrs	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800247e:	f023 030c 	bic.w	r3, r3, #12
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6812      	ldr	r2, [r2, #0]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	430b      	orrs	r3, r1
 800248a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	695b      	ldr	r3, [r3, #20]
 8002492:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a2c      	ldr	r2, [pc, #176]	; (8002558 <UART_SetConfig+0x114>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d103      	bne.n	80024b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80024ac:	f7ff fe62 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	e002      	b.n	80024ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80024b4:	f7ff fe4a 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 80024b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	009a      	lsls	r2, r3, #2
 80024c4:	441a      	add	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	4a22      	ldr	r2, [pc, #136]	; (800255c <UART_SetConfig+0x118>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	0119      	lsls	r1, r3, #4
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	009a      	lsls	r2, r3, #2
 80024e4:	441a      	add	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <UART_SetConfig+0x118>)
 80024f2:	fba3 0302 	umull	r0, r3, r3, r2
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2064      	movs	r0, #100	; 0x64
 80024fa:	fb00 f303 	mul.w	r3, r0, r3
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	3332      	adds	r3, #50	; 0x32
 8002504:	4a15      	ldr	r2, [pc, #84]	; (800255c <UART_SetConfig+0x118>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002510:	4419      	add	r1, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	009a      	lsls	r2, r3, #2
 800251c:	441a      	add	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	fbb2 f2f3 	udiv	r2, r2, r3
 8002528:	4b0c      	ldr	r3, [pc, #48]	; (800255c <UART_SetConfig+0x118>)
 800252a:	fba3 0302 	umull	r0, r3, r3, r2
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2064      	movs	r0, #100	; 0x64
 8002532:	fb00 f303 	mul.w	r3, r0, r3
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	3332      	adds	r3, #50	; 0x32
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <UART_SetConfig+0x118>)
 800253e:	fba2 2303 	umull	r2, r3, r2, r3
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	440a      	add	r2, r1
 800254e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40013800 	.word	0x40013800
 800255c:	51eb851f 	.word	0x51eb851f

08002560 <atof>:
 8002560:	2100      	movs	r1, #0
 8002562:	f000 be61 	b.w	8003228 <strtod>

08002566 <atoi>:
 8002566:	220a      	movs	r2, #10
 8002568:	2100      	movs	r1, #0
 800256a:	f000 beef 	b.w	800334c <strtol>
	...

08002570 <__errno>:
 8002570:	4b01      	ldr	r3, [pc, #4]	; (8002578 <__errno+0x8>)
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000014 	.word	0x20000014

0800257c <__libc_init_array>:
 800257c:	b570      	push	{r4, r5, r6, lr}
 800257e:	2600      	movs	r6, #0
 8002580:	4d0c      	ldr	r5, [pc, #48]	; (80025b4 <__libc_init_array+0x38>)
 8002582:	4c0d      	ldr	r4, [pc, #52]	; (80025b8 <__libc_init_array+0x3c>)
 8002584:	1b64      	subs	r4, r4, r5
 8002586:	10a4      	asrs	r4, r4, #2
 8002588:	42a6      	cmp	r6, r4
 800258a:	d109      	bne.n	80025a0 <__libc_init_array+0x24>
 800258c:	f002 ff26 	bl	80053dc <_init>
 8002590:	2600      	movs	r6, #0
 8002592:	4d0a      	ldr	r5, [pc, #40]	; (80025bc <__libc_init_array+0x40>)
 8002594:	4c0a      	ldr	r4, [pc, #40]	; (80025c0 <__libc_init_array+0x44>)
 8002596:	1b64      	subs	r4, r4, r5
 8002598:	10a4      	asrs	r4, r4, #2
 800259a:	42a6      	cmp	r6, r4
 800259c:	d105      	bne.n	80025aa <__libc_init_array+0x2e>
 800259e:	bd70      	pop	{r4, r5, r6, pc}
 80025a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a4:	4798      	blx	r3
 80025a6:	3601      	adds	r6, #1
 80025a8:	e7ee      	b.n	8002588 <__libc_init_array+0xc>
 80025aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80025ae:	4798      	blx	r3
 80025b0:	3601      	adds	r6, #1
 80025b2:	e7f2      	b.n	800259a <__libc_init_array+0x1e>
 80025b4:	0800585c 	.word	0x0800585c
 80025b8:	0800585c 	.word	0x0800585c
 80025bc:	0800585c 	.word	0x0800585c
 80025c0:	08005860 	.word	0x08005860

080025c4 <memset>:
 80025c4:	4603      	mov	r3, r0
 80025c6:	4402      	add	r2, r0
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d100      	bne.n	80025ce <memset+0xa>
 80025cc:	4770      	bx	lr
 80025ce:	f803 1b01 	strb.w	r1, [r3], #1
 80025d2:	e7f9      	b.n	80025c8 <memset+0x4>

080025d4 <strncpy>:
 80025d4:	4603      	mov	r3, r0
 80025d6:	b510      	push	{r4, lr}
 80025d8:	3901      	subs	r1, #1
 80025da:	b132      	cbz	r2, 80025ea <strncpy+0x16>
 80025dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80025e0:	3a01      	subs	r2, #1
 80025e2:	f803 4b01 	strb.w	r4, [r3], #1
 80025e6:	2c00      	cmp	r4, #0
 80025e8:	d1f7      	bne.n	80025da <strncpy+0x6>
 80025ea:	2100      	movs	r1, #0
 80025ec:	441a      	add	r2, r3
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d100      	bne.n	80025f4 <strncpy+0x20>
 80025f2:	bd10      	pop	{r4, pc}
 80025f4:	f803 1b01 	strb.w	r1, [r3], #1
 80025f8:	e7f9      	b.n	80025ee <strncpy+0x1a>

080025fa <sulp>:
 80025fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025fe:	460f      	mov	r7, r1
 8002600:	4690      	mov	r8, r2
 8002602:	f001 fda3 	bl	800414c <__ulp>
 8002606:	4604      	mov	r4, r0
 8002608:	460d      	mov	r5, r1
 800260a:	f1b8 0f00 	cmp.w	r8, #0
 800260e:	d011      	beq.n	8002634 <sulp+0x3a>
 8002610:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8002614:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002618:	2b00      	cmp	r3, #0
 800261a:	dd0b      	ble.n	8002634 <sulp+0x3a>
 800261c:	2400      	movs	r4, #0
 800261e:	051b      	lsls	r3, r3, #20
 8002620:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8002624:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8002628:	4622      	mov	r2, r4
 800262a:	462b      	mov	r3, r5
 800262c:	f7fd ff5e 	bl	80004ec <__aeabi_dmul>
 8002630:	4604      	mov	r4, r0
 8002632:	460d      	mov	r5, r1
 8002634:	4620      	mov	r0, r4
 8002636:	4629      	mov	r1, r5
 8002638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800263c:	0000      	movs	r0, r0
	...

08002640 <_strtod_l>:
 8002640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002644:	469b      	mov	fp, r3
 8002646:	2300      	movs	r3, #0
 8002648:	b0a1      	sub	sp, #132	; 0x84
 800264a:	931c      	str	r3, [sp, #112]	; 0x70
 800264c:	4ba1      	ldr	r3, [pc, #644]	; (80028d4 <_strtod_l+0x294>)
 800264e:	4682      	mov	sl, r0
 8002650:	681f      	ldr	r7, [r3, #0]
 8002652:	460e      	mov	r6, r1
 8002654:	4638      	mov	r0, r7
 8002656:	9217      	str	r2, [sp, #92]	; 0x5c
 8002658:	f7fd fd84 	bl	8000164 <strlen>
 800265c:	f04f 0800 	mov.w	r8, #0
 8002660:	4604      	mov	r4, r0
 8002662:	f04f 0900 	mov.w	r9, #0
 8002666:	961b      	str	r6, [sp, #108]	; 0x6c
 8002668:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800266a:	781a      	ldrb	r2, [r3, #0]
 800266c:	2a2b      	cmp	r2, #43	; 0x2b
 800266e:	d04c      	beq.n	800270a <_strtod_l+0xca>
 8002670:	d83a      	bhi.n	80026e8 <_strtod_l+0xa8>
 8002672:	2a0d      	cmp	r2, #13
 8002674:	d833      	bhi.n	80026de <_strtod_l+0x9e>
 8002676:	2a08      	cmp	r2, #8
 8002678:	d833      	bhi.n	80026e2 <_strtod_l+0xa2>
 800267a:	2a00      	cmp	r2, #0
 800267c:	d03d      	beq.n	80026fa <_strtod_l+0xba>
 800267e:	2300      	movs	r3, #0
 8002680:	930c      	str	r3, [sp, #48]	; 0x30
 8002682:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8002684:	782b      	ldrb	r3, [r5, #0]
 8002686:	2b30      	cmp	r3, #48	; 0x30
 8002688:	f040 80af 	bne.w	80027ea <_strtod_l+0x1aa>
 800268c:	786b      	ldrb	r3, [r5, #1]
 800268e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002692:	2b58      	cmp	r3, #88	; 0x58
 8002694:	d16c      	bne.n	8002770 <_strtod_l+0x130>
 8002696:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002698:	4650      	mov	r0, sl
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	ab1c      	add	r3, sp, #112	; 0x70
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	4a8d      	ldr	r2, [pc, #564]	; (80028d8 <_strtod_l+0x298>)
 80026a2:	f8cd b008 	str.w	fp, [sp, #8]
 80026a6:	ab1d      	add	r3, sp, #116	; 0x74
 80026a8:	a91b      	add	r1, sp, #108	; 0x6c
 80026aa:	f000 fec1 	bl	8003430 <__gethex>
 80026ae:	f010 0607 	ands.w	r6, r0, #7
 80026b2:	4604      	mov	r4, r0
 80026b4:	d005      	beq.n	80026c2 <_strtod_l+0x82>
 80026b6:	2e06      	cmp	r6, #6
 80026b8:	d129      	bne.n	800270e <_strtod_l+0xce>
 80026ba:	2300      	movs	r3, #0
 80026bc:	3501      	adds	r5, #1
 80026be:	951b      	str	r5, [sp, #108]	; 0x6c
 80026c0:	930c      	str	r3, [sp, #48]	; 0x30
 80026c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	f040 8596 	bne.w	80031f6 <_strtod_l+0xbb6>
 80026ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80026cc:	b1d3      	cbz	r3, 8002704 <_strtod_l+0xc4>
 80026ce:	4642      	mov	r2, r8
 80026d0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	b021      	add	sp, #132	; 0x84
 80026da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026de:	2a20      	cmp	r2, #32
 80026e0:	d1cd      	bne.n	800267e <_strtod_l+0x3e>
 80026e2:	3301      	adds	r3, #1
 80026e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80026e6:	e7bf      	b.n	8002668 <_strtod_l+0x28>
 80026e8:	2a2d      	cmp	r2, #45	; 0x2d
 80026ea:	d1c8      	bne.n	800267e <_strtod_l+0x3e>
 80026ec:	2201      	movs	r2, #1
 80026ee:	920c      	str	r2, [sp, #48]	; 0x30
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	921b      	str	r2, [sp, #108]	; 0x6c
 80026f4:	785b      	ldrb	r3, [r3, #1]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1c3      	bne.n	8002682 <_strtod_l+0x42>
 80026fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80026fc:	961b      	str	r6, [sp, #108]	; 0x6c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 8577 	bne.w	80031f2 <_strtod_l+0xbb2>
 8002704:	4642      	mov	r2, r8
 8002706:	464b      	mov	r3, r9
 8002708:	e7e4      	b.n	80026d4 <_strtod_l+0x94>
 800270a:	2200      	movs	r2, #0
 800270c:	e7ef      	b.n	80026ee <_strtod_l+0xae>
 800270e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002710:	b13a      	cbz	r2, 8002722 <_strtod_l+0xe2>
 8002712:	2135      	movs	r1, #53	; 0x35
 8002714:	a81e      	add	r0, sp, #120	; 0x78
 8002716:	f001 fe1d 	bl	8004354 <__copybits>
 800271a:	4650      	mov	r0, sl
 800271c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800271e:	f001 f9e5 	bl	8003aec <_Bfree>
 8002722:	3e01      	subs	r6, #1
 8002724:	2e05      	cmp	r6, #5
 8002726:	d807      	bhi.n	8002738 <_strtod_l+0xf8>
 8002728:	e8df f006 	tbb	[pc, r6]
 800272c:	1d180b0e 	.word	0x1d180b0e
 8002730:	030e      	.short	0x030e
 8002732:	f04f 0900 	mov.w	r9, #0
 8002736:	46c8      	mov	r8, r9
 8002738:	0721      	lsls	r1, r4, #28
 800273a:	d5c2      	bpl.n	80026c2 <_strtod_l+0x82>
 800273c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8002740:	e7bf      	b.n	80026c2 <_strtod_l+0x82>
 8002742:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8002746:	e7f7      	b.n	8002738 <_strtod_l+0xf8>
 8002748:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800274a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800274e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8002752:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002756:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800275a:	e7ed      	b.n	8002738 <_strtod_l+0xf8>
 800275c:	f04f 0800 	mov.w	r8, #0
 8002760:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80028dc <_strtod_l+0x29c>
 8002764:	e7e8      	b.n	8002738 <_strtod_l+0xf8>
 8002766:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800276a:	f04f 38ff 	mov.w	r8, #4294967295
 800276e:	e7e3      	b.n	8002738 <_strtod_l+0xf8>
 8002770:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	921b      	str	r2, [sp, #108]	; 0x6c
 8002776:	785b      	ldrb	r3, [r3, #1]
 8002778:	2b30      	cmp	r3, #48	; 0x30
 800277a:	d0f9      	beq.n	8002770 <_strtod_l+0x130>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0a0      	beq.n	80026c2 <_strtod_l+0x82>
 8002780:	2301      	movs	r3, #1
 8002782:	9307      	str	r3, [sp, #28]
 8002784:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002786:	220a      	movs	r2, #10
 8002788:	9308      	str	r3, [sp, #32]
 800278a:	2300      	movs	r3, #0
 800278c:	469b      	mov	fp, r3
 800278e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8002792:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8002794:	7805      	ldrb	r5, [r0, #0]
 8002796:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800279a:	b2d9      	uxtb	r1, r3
 800279c:	2909      	cmp	r1, #9
 800279e:	d926      	bls.n	80027ee <_strtod_l+0x1ae>
 80027a0:	4622      	mov	r2, r4
 80027a2:	4639      	mov	r1, r7
 80027a4:	f001 fe98 	bl	80044d8 <strncmp>
 80027a8:	2800      	cmp	r0, #0
 80027aa:	d032      	beq.n	8002812 <_strtod_l+0x1d2>
 80027ac:	2000      	movs	r0, #0
 80027ae:	462b      	mov	r3, r5
 80027b0:	465c      	mov	r4, fp
 80027b2:	4602      	mov	r2, r0
 80027b4:	9004      	str	r0, [sp, #16]
 80027b6:	2b65      	cmp	r3, #101	; 0x65
 80027b8:	d001      	beq.n	80027be <_strtod_l+0x17e>
 80027ba:	2b45      	cmp	r3, #69	; 0x45
 80027bc:	d113      	bne.n	80027e6 <_strtod_l+0x1a6>
 80027be:	b91c      	cbnz	r4, 80027c8 <_strtod_l+0x188>
 80027c0:	9b07      	ldr	r3, [sp, #28]
 80027c2:	4303      	orrs	r3, r0
 80027c4:	d099      	beq.n	80026fa <_strtod_l+0xba>
 80027c6:	2400      	movs	r4, #0
 80027c8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80027ca:	1c73      	adds	r3, r6, #1
 80027cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80027ce:	7873      	ldrb	r3, [r6, #1]
 80027d0:	2b2b      	cmp	r3, #43	; 0x2b
 80027d2:	d078      	beq.n	80028c6 <_strtod_l+0x286>
 80027d4:	2b2d      	cmp	r3, #45	; 0x2d
 80027d6:	d07b      	beq.n	80028d0 <_strtod_l+0x290>
 80027d8:	2700      	movs	r7, #0
 80027da:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80027de:	2909      	cmp	r1, #9
 80027e0:	f240 8082 	bls.w	80028e8 <_strtod_l+0x2a8>
 80027e4:	961b      	str	r6, [sp, #108]	; 0x6c
 80027e6:	2500      	movs	r5, #0
 80027e8:	e09e      	b.n	8002928 <_strtod_l+0x2e8>
 80027ea:	2300      	movs	r3, #0
 80027ec:	e7c9      	b.n	8002782 <_strtod_l+0x142>
 80027ee:	f1bb 0f08 	cmp.w	fp, #8
 80027f2:	bfd5      	itete	le
 80027f4:	9906      	ldrle	r1, [sp, #24]
 80027f6:	9905      	ldrgt	r1, [sp, #20]
 80027f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80027fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8002800:	f100 0001 	add.w	r0, r0, #1
 8002804:	bfd4      	ite	le
 8002806:	9306      	strle	r3, [sp, #24]
 8002808:	9305      	strgt	r3, [sp, #20]
 800280a:	f10b 0b01 	add.w	fp, fp, #1
 800280e:	901b      	str	r0, [sp, #108]	; 0x6c
 8002810:	e7bf      	b.n	8002792 <_strtod_l+0x152>
 8002812:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002814:	191a      	adds	r2, r3, r4
 8002816:	921b      	str	r2, [sp, #108]	; 0x6c
 8002818:	5d1b      	ldrb	r3, [r3, r4]
 800281a:	f1bb 0f00 	cmp.w	fp, #0
 800281e:	d036      	beq.n	800288e <_strtod_l+0x24e>
 8002820:	465c      	mov	r4, fp
 8002822:	9004      	str	r0, [sp, #16]
 8002824:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002828:	2a09      	cmp	r2, #9
 800282a:	d912      	bls.n	8002852 <_strtod_l+0x212>
 800282c:	2201      	movs	r2, #1
 800282e:	e7c2      	b.n	80027b6 <_strtod_l+0x176>
 8002830:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002832:	3001      	adds	r0, #1
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	921b      	str	r2, [sp, #108]	; 0x6c
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	2b30      	cmp	r3, #48	; 0x30
 800283c:	d0f8      	beq.n	8002830 <_strtod_l+0x1f0>
 800283e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8002842:	2a08      	cmp	r2, #8
 8002844:	f200 84dc 	bhi.w	8003200 <_strtod_l+0xbc0>
 8002848:	9004      	str	r0, [sp, #16]
 800284a:	2000      	movs	r0, #0
 800284c:	4604      	mov	r4, r0
 800284e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002850:	9208      	str	r2, [sp, #32]
 8002852:	3b30      	subs	r3, #48	; 0x30
 8002854:	f100 0201 	add.w	r2, r0, #1
 8002858:	d013      	beq.n	8002882 <_strtod_l+0x242>
 800285a:	9904      	ldr	r1, [sp, #16]
 800285c:	1905      	adds	r5, r0, r4
 800285e:	4411      	add	r1, r2
 8002860:	9104      	str	r1, [sp, #16]
 8002862:	4622      	mov	r2, r4
 8002864:	210a      	movs	r1, #10
 8002866:	42aa      	cmp	r2, r5
 8002868:	d113      	bne.n	8002892 <_strtod_l+0x252>
 800286a:	1822      	adds	r2, r4, r0
 800286c:	2a08      	cmp	r2, #8
 800286e:	f104 0401 	add.w	r4, r4, #1
 8002872:	4404      	add	r4, r0
 8002874:	dc1b      	bgt.n	80028ae <_strtod_l+0x26e>
 8002876:	220a      	movs	r2, #10
 8002878:	9906      	ldr	r1, [sp, #24]
 800287a:	fb02 3301 	mla	r3, r2, r1, r3
 800287e:	9306      	str	r3, [sp, #24]
 8002880:	2200      	movs	r2, #0
 8002882:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002884:	4610      	mov	r0, r2
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	911b      	str	r1, [sp, #108]	; 0x6c
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	e7ca      	b.n	8002824 <_strtod_l+0x1e4>
 800288e:	4658      	mov	r0, fp
 8002890:	e7d3      	b.n	800283a <_strtod_l+0x1fa>
 8002892:	2a08      	cmp	r2, #8
 8002894:	dc04      	bgt.n	80028a0 <_strtod_l+0x260>
 8002896:	9f06      	ldr	r7, [sp, #24]
 8002898:	434f      	muls	r7, r1
 800289a:	9706      	str	r7, [sp, #24]
 800289c:	3201      	adds	r2, #1
 800289e:	e7e2      	b.n	8002866 <_strtod_l+0x226>
 80028a0:	1c57      	adds	r7, r2, #1
 80028a2:	2f10      	cmp	r7, #16
 80028a4:	bfde      	ittt	le
 80028a6:	9f05      	ldrle	r7, [sp, #20]
 80028a8:	434f      	mulle	r7, r1
 80028aa:	9705      	strle	r7, [sp, #20]
 80028ac:	e7f6      	b.n	800289c <_strtod_l+0x25c>
 80028ae:	2c10      	cmp	r4, #16
 80028b0:	bfdf      	itttt	le
 80028b2:	220a      	movle	r2, #10
 80028b4:	9905      	ldrle	r1, [sp, #20]
 80028b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80028ba:	9305      	strle	r3, [sp, #20]
 80028bc:	e7e0      	b.n	8002880 <_strtod_l+0x240>
 80028be:	2300      	movs	r3, #0
 80028c0:	2201      	movs	r2, #1
 80028c2:	9304      	str	r3, [sp, #16]
 80028c4:	e77c      	b.n	80027c0 <_strtod_l+0x180>
 80028c6:	2700      	movs	r7, #0
 80028c8:	1cb3      	adds	r3, r6, #2
 80028ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80028cc:	78b3      	ldrb	r3, [r6, #2]
 80028ce:	e784      	b.n	80027da <_strtod_l+0x19a>
 80028d0:	2701      	movs	r7, #1
 80028d2:	e7f9      	b.n	80028c8 <_strtod_l+0x288>
 80028d4:	08005604 	.word	0x08005604
 80028d8:	08005434 	.word	0x08005434
 80028dc:	7ff00000 	.word	0x7ff00000
 80028e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80028e2:	1c59      	adds	r1, r3, #1
 80028e4:	911b      	str	r1, [sp, #108]	; 0x6c
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b30      	cmp	r3, #48	; 0x30
 80028ea:	d0f9      	beq.n	80028e0 <_strtod_l+0x2a0>
 80028ec:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80028f0:	2908      	cmp	r1, #8
 80028f2:	f63f af78 	bhi.w	80027e6 <_strtod_l+0x1a6>
 80028f6:	f04f 0e0a 	mov.w	lr, #10
 80028fa:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80028fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002900:	9309      	str	r3, [sp, #36]	; 0x24
 8002902:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002904:	1c59      	adds	r1, r3, #1
 8002906:	911b      	str	r1, [sp, #108]	; 0x6c
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800290e:	2d09      	cmp	r5, #9
 8002910:	d935      	bls.n	800297e <_strtod_l+0x33e>
 8002912:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002914:	1b49      	subs	r1, r1, r5
 8002916:	2908      	cmp	r1, #8
 8002918:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800291c:	dc02      	bgt.n	8002924 <_strtod_l+0x2e4>
 800291e:	4565      	cmp	r5, ip
 8002920:	bfa8      	it	ge
 8002922:	4665      	movge	r5, ip
 8002924:	b107      	cbz	r7, 8002928 <_strtod_l+0x2e8>
 8002926:	426d      	negs	r5, r5
 8002928:	2c00      	cmp	r4, #0
 800292a:	d14c      	bne.n	80029c6 <_strtod_l+0x386>
 800292c:	9907      	ldr	r1, [sp, #28]
 800292e:	4301      	orrs	r1, r0
 8002930:	f47f aec7 	bne.w	80026c2 <_strtod_l+0x82>
 8002934:	2a00      	cmp	r2, #0
 8002936:	f47f aee0 	bne.w	80026fa <_strtod_l+0xba>
 800293a:	2b69      	cmp	r3, #105	; 0x69
 800293c:	d026      	beq.n	800298c <_strtod_l+0x34c>
 800293e:	dc23      	bgt.n	8002988 <_strtod_l+0x348>
 8002940:	2b49      	cmp	r3, #73	; 0x49
 8002942:	d023      	beq.n	800298c <_strtod_l+0x34c>
 8002944:	2b4e      	cmp	r3, #78	; 0x4e
 8002946:	f47f aed8 	bne.w	80026fa <_strtod_l+0xba>
 800294a:	499c      	ldr	r1, [pc, #624]	; (8002bbc <_strtod_l+0x57c>)
 800294c:	a81b      	add	r0, sp, #108	; 0x6c
 800294e:	f000 ffbd 	bl	80038cc <__match>
 8002952:	2800      	cmp	r0, #0
 8002954:	f43f aed1 	beq.w	80026fa <_strtod_l+0xba>
 8002958:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b28      	cmp	r3, #40	; 0x28
 800295e:	d12c      	bne.n	80029ba <_strtod_l+0x37a>
 8002960:	4997      	ldr	r1, [pc, #604]	; (8002bc0 <_strtod_l+0x580>)
 8002962:	aa1e      	add	r2, sp, #120	; 0x78
 8002964:	a81b      	add	r0, sp, #108	; 0x6c
 8002966:	f000 ffc5 	bl	80038f4 <__hexnan>
 800296a:	2805      	cmp	r0, #5
 800296c:	d125      	bne.n	80029ba <_strtod_l+0x37a>
 800296e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002970:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8002974:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8002978:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800297c:	e6a1      	b.n	80026c2 <_strtod_l+0x82>
 800297e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8002982:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8002986:	e7bc      	b.n	8002902 <_strtod_l+0x2c2>
 8002988:	2b6e      	cmp	r3, #110	; 0x6e
 800298a:	e7dc      	b.n	8002946 <_strtod_l+0x306>
 800298c:	498d      	ldr	r1, [pc, #564]	; (8002bc4 <_strtod_l+0x584>)
 800298e:	a81b      	add	r0, sp, #108	; 0x6c
 8002990:	f000 ff9c 	bl	80038cc <__match>
 8002994:	2800      	cmp	r0, #0
 8002996:	f43f aeb0 	beq.w	80026fa <_strtod_l+0xba>
 800299a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800299c:	498a      	ldr	r1, [pc, #552]	; (8002bc8 <_strtod_l+0x588>)
 800299e:	3b01      	subs	r3, #1
 80029a0:	a81b      	add	r0, sp, #108	; 0x6c
 80029a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80029a4:	f000 ff92 	bl	80038cc <__match>
 80029a8:	b910      	cbnz	r0, 80029b0 <_strtod_l+0x370>
 80029aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80029ac:	3301      	adds	r3, #1
 80029ae:	931b      	str	r3, [sp, #108]	; 0x6c
 80029b0:	f04f 0800 	mov.w	r8, #0
 80029b4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8002bd8 <_strtod_l+0x598>
 80029b8:	e683      	b.n	80026c2 <_strtod_l+0x82>
 80029ba:	4884      	ldr	r0, [pc, #528]	; (8002bcc <_strtod_l+0x58c>)
 80029bc:	f001 fd76 	bl	80044ac <nan>
 80029c0:	4680      	mov	r8, r0
 80029c2:	4689      	mov	r9, r1
 80029c4:	e67d      	b.n	80026c2 <_strtod_l+0x82>
 80029c6:	9b04      	ldr	r3, [sp, #16]
 80029c8:	f1bb 0f00 	cmp.w	fp, #0
 80029cc:	bf08      	it	eq
 80029ce:	46a3      	moveq	fp, r4
 80029d0:	1aeb      	subs	r3, r5, r3
 80029d2:	2c10      	cmp	r4, #16
 80029d4:	9806      	ldr	r0, [sp, #24]
 80029d6:	4626      	mov	r6, r4
 80029d8:	9307      	str	r3, [sp, #28]
 80029da:	bfa8      	it	ge
 80029dc:	2610      	movge	r6, #16
 80029de:	f7fd fd0b 	bl	80003f8 <__aeabi_ui2d>
 80029e2:	2c09      	cmp	r4, #9
 80029e4:	4680      	mov	r8, r0
 80029e6:	4689      	mov	r9, r1
 80029e8:	dd13      	ble.n	8002a12 <_strtod_l+0x3d2>
 80029ea:	4b79      	ldr	r3, [pc, #484]	; (8002bd0 <_strtod_l+0x590>)
 80029ec:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80029f0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80029f4:	f7fd fd7a 	bl	80004ec <__aeabi_dmul>
 80029f8:	4680      	mov	r8, r0
 80029fa:	9805      	ldr	r0, [sp, #20]
 80029fc:	4689      	mov	r9, r1
 80029fe:	f7fd fcfb 	bl	80003f8 <__aeabi_ui2d>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4640      	mov	r0, r8
 8002a08:	4649      	mov	r1, r9
 8002a0a:	f7fd fbb9 	bl	8000180 <__adddf3>
 8002a0e:	4680      	mov	r8, r0
 8002a10:	4689      	mov	r9, r1
 8002a12:	2c0f      	cmp	r4, #15
 8002a14:	dc36      	bgt.n	8002a84 <_strtod_l+0x444>
 8002a16:	9b07      	ldr	r3, [sp, #28]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f43f ae52 	beq.w	80026c2 <_strtod_l+0x82>
 8002a1e:	dd22      	ble.n	8002a66 <_strtod_l+0x426>
 8002a20:	2b16      	cmp	r3, #22
 8002a22:	dc09      	bgt.n	8002a38 <_strtod_l+0x3f8>
 8002a24:	4c6a      	ldr	r4, [pc, #424]	; (8002bd0 <_strtod_l+0x590>)
 8002a26:	4642      	mov	r2, r8
 8002a28:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8002a2c:	464b      	mov	r3, r9
 8002a2e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002a32:	f7fd fd5b 	bl	80004ec <__aeabi_dmul>
 8002a36:	e7c3      	b.n	80029c0 <_strtod_l+0x380>
 8002a38:	9a07      	ldr	r2, [sp, #28]
 8002a3a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	db20      	blt.n	8002a84 <_strtod_l+0x444>
 8002a42:	4d63      	ldr	r5, [pc, #396]	; (8002bd0 <_strtod_l+0x590>)
 8002a44:	f1c4 040f 	rsb	r4, r4, #15
 8002a48:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8002a4c:	4642      	mov	r2, r8
 8002a4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a52:	464b      	mov	r3, r9
 8002a54:	f7fd fd4a 	bl	80004ec <__aeabi_dmul>
 8002a58:	9b07      	ldr	r3, [sp, #28]
 8002a5a:	1b1c      	subs	r4, r3, r4
 8002a5c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8002a60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002a64:	e7e5      	b.n	8002a32 <_strtod_l+0x3f2>
 8002a66:	9b07      	ldr	r3, [sp, #28]
 8002a68:	3316      	adds	r3, #22
 8002a6a:	db0b      	blt.n	8002a84 <_strtod_l+0x444>
 8002a6c:	9b04      	ldr	r3, [sp, #16]
 8002a6e:	4a58      	ldr	r2, [pc, #352]	; (8002bd0 <_strtod_l+0x590>)
 8002a70:	1b5d      	subs	r5, r3, r5
 8002a72:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8002a76:	4640      	mov	r0, r8
 8002a78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002a7c:	4649      	mov	r1, r9
 8002a7e:	f7fd fe5f 	bl	8000740 <__aeabi_ddiv>
 8002a82:	e79d      	b.n	80029c0 <_strtod_l+0x380>
 8002a84:	9b07      	ldr	r3, [sp, #28]
 8002a86:	1ba6      	subs	r6, r4, r6
 8002a88:	441e      	add	r6, r3
 8002a8a:	2e00      	cmp	r6, #0
 8002a8c:	dd71      	ble.n	8002b72 <_strtod_l+0x532>
 8002a8e:	f016 030f 	ands.w	r3, r6, #15
 8002a92:	d00a      	beq.n	8002aaa <_strtod_l+0x46a>
 8002a94:	494e      	ldr	r1, [pc, #312]	; (8002bd0 <_strtod_l+0x590>)
 8002a96:	4642      	mov	r2, r8
 8002a98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8002a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002aa0:	464b      	mov	r3, r9
 8002aa2:	f7fd fd23 	bl	80004ec <__aeabi_dmul>
 8002aa6:	4680      	mov	r8, r0
 8002aa8:	4689      	mov	r9, r1
 8002aaa:	f036 060f 	bics.w	r6, r6, #15
 8002aae:	d050      	beq.n	8002b52 <_strtod_l+0x512>
 8002ab0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8002ab4:	dd27      	ble.n	8002b06 <_strtod_l+0x4c6>
 8002ab6:	f04f 0b00 	mov.w	fp, #0
 8002aba:	f8cd b010 	str.w	fp, [sp, #16]
 8002abe:	f8cd b020 	str.w	fp, [sp, #32]
 8002ac2:	f8cd b018 	str.w	fp, [sp, #24]
 8002ac6:	2322      	movs	r3, #34	; 0x22
 8002ac8:	f04f 0800 	mov.w	r8, #0
 8002acc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8002bd8 <_strtod_l+0x598>
 8002ad0:	f8ca 3000 	str.w	r3, [sl]
 8002ad4:	9b08      	ldr	r3, [sp, #32]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f43f adf3 	beq.w	80026c2 <_strtod_l+0x82>
 8002adc:	4650      	mov	r0, sl
 8002ade:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002ae0:	f001 f804 	bl	8003aec <_Bfree>
 8002ae4:	4650      	mov	r0, sl
 8002ae6:	9906      	ldr	r1, [sp, #24]
 8002ae8:	f001 f800 	bl	8003aec <_Bfree>
 8002aec:	4650      	mov	r0, sl
 8002aee:	9904      	ldr	r1, [sp, #16]
 8002af0:	f000 fffc 	bl	8003aec <_Bfree>
 8002af4:	4650      	mov	r0, sl
 8002af6:	9908      	ldr	r1, [sp, #32]
 8002af8:	f000 fff8 	bl	8003aec <_Bfree>
 8002afc:	4659      	mov	r1, fp
 8002afe:	4650      	mov	r0, sl
 8002b00:	f000 fff4 	bl	8003aec <_Bfree>
 8002b04:	e5dd      	b.n	80026c2 <_strtod_l+0x82>
 8002b06:	2300      	movs	r3, #0
 8002b08:	4640      	mov	r0, r8
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	461f      	mov	r7, r3
 8002b0e:	1136      	asrs	r6, r6, #4
 8002b10:	2e01      	cmp	r6, #1
 8002b12:	dc21      	bgt.n	8002b58 <_strtod_l+0x518>
 8002b14:	b10b      	cbz	r3, 8002b1a <_strtod_l+0x4da>
 8002b16:	4680      	mov	r8, r0
 8002b18:	4689      	mov	r9, r1
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <_strtod_l+0x594>)
 8002b1c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8002b20:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8002b24:	4642      	mov	r2, r8
 8002b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b2a:	464b      	mov	r3, r9
 8002b2c:	f7fd fcde 	bl	80004ec <__aeabi_dmul>
 8002b30:	4b29      	ldr	r3, [pc, #164]	; (8002bd8 <_strtod_l+0x598>)
 8002b32:	460a      	mov	r2, r1
 8002b34:	400b      	ands	r3, r1
 8002b36:	4929      	ldr	r1, [pc, #164]	; (8002bdc <_strtod_l+0x59c>)
 8002b38:	4680      	mov	r8, r0
 8002b3a:	428b      	cmp	r3, r1
 8002b3c:	d8bb      	bhi.n	8002ab6 <_strtod_l+0x476>
 8002b3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8002b42:	428b      	cmp	r3, r1
 8002b44:	bf86      	itte	hi
 8002b46:	f04f 38ff 	movhi.w	r8, #4294967295
 8002b4a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8002be0 <_strtod_l+0x5a0>
 8002b4e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8002b52:	2300      	movs	r3, #0
 8002b54:	9305      	str	r3, [sp, #20]
 8002b56:	e07e      	b.n	8002c56 <_strtod_l+0x616>
 8002b58:	07f2      	lsls	r2, r6, #31
 8002b5a:	d507      	bpl.n	8002b6c <_strtod_l+0x52c>
 8002b5c:	4b1d      	ldr	r3, [pc, #116]	; (8002bd4 <_strtod_l+0x594>)
 8002b5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f7fd fcc1 	bl	80004ec <__aeabi_dmul>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	3701      	adds	r7, #1
 8002b6e:	1076      	asrs	r6, r6, #1
 8002b70:	e7ce      	b.n	8002b10 <_strtod_l+0x4d0>
 8002b72:	d0ee      	beq.n	8002b52 <_strtod_l+0x512>
 8002b74:	4276      	negs	r6, r6
 8002b76:	f016 020f 	ands.w	r2, r6, #15
 8002b7a:	d00a      	beq.n	8002b92 <_strtod_l+0x552>
 8002b7c:	4b14      	ldr	r3, [pc, #80]	; (8002bd0 <_strtod_l+0x590>)
 8002b7e:	4640      	mov	r0, r8
 8002b80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b84:	4649      	mov	r1, r9
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f7fd fdd9 	bl	8000740 <__aeabi_ddiv>
 8002b8e:	4680      	mov	r8, r0
 8002b90:	4689      	mov	r9, r1
 8002b92:	1136      	asrs	r6, r6, #4
 8002b94:	d0dd      	beq.n	8002b52 <_strtod_l+0x512>
 8002b96:	2e1f      	cmp	r6, #31
 8002b98:	dd24      	ble.n	8002be4 <_strtod_l+0x5a4>
 8002b9a:	f04f 0b00 	mov.w	fp, #0
 8002b9e:	f8cd b010 	str.w	fp, [sp, #16]
 8002ba2:	f8cd b020 	str.w	fp, [sp, #32]
 8002ba6:	f8cd b018 	str.w	fp, [sp, #24]
 8002baa:	2322      	movs	r3, #34	; 0x22
 8002bac:	f04f 0800 	mov.w	r8, #0
 8002bb0:	f04f 0900 	mov.w	r9, #0
 8002bb4:	f8ca 3000 	str.w	r3, [sl]
 8002bb8:	e78c      	b.n	8002ad4 <_strtod_l+0x494>
 8002bba:	bf00      	nop
 8002bbc:	08005431 	.word	0x08005431
 8002bc0:	08005448 	.word	0x08005448
 8002bc4:	08005428 	.word	0x08005428
 8002bc8:	0800542b 	.word	0x0800542b
 8002bcc:	080057c7 	.word	0x080057c7
 8002bd0:	080056b8 	.word	0x080056b8
 8002bd4:	08005690 	.word	0x08005690
 8002bd8:	7ff00000 	.word	0x7ff00000
 8002bdc:	7ca00000 	.word	0x7ca00000
 8002be0:	7fefffff 	.word	0x7fefffff
 8002be4:	f016 0310 	ands.w	r3, r6, #16
 8002be8:	bf18      	it	ne
 8002bea:	236a      	movne	r3, #106	; 0x6a
 8002bec:	4640      	mov	r0, r8
 8002bee:	9305      	str	r3, [sp, #20]
 8002bf0:	4649      	mov	r1, r9
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	4fb2      	ldr	r7, [pc, #712]	; (8002ec0 <_strtod_l+0x880>)
 8002bf6:	07f2      	lsls	r2, r6, #31
 8002bf8:	d504      	bpl.n	8002c04 <_strtod_l+0x5c4>
 8002bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bfe:	f7fd fc75 	bl	80004ec <__aeabi_dmul>
 8002c02:	2301      	movs	r3, #1
 8002c04:	1076      	asrs	r6, r6, #1
 8002c06:	f107 0708 	add.w	r7, r7, #8
 8002c0a:	d1f4      	bne.n	8002bf6 <_strtod_l+0x5b6>
 8002c0c:	b10b      	cbz	r3, 8002c12 <_strtod_l+0x5d2>
 8002c0e:	4680      	mov	r8, r0
 8002c10:	4689      	mov	r9, r1
 8002c12:	9b05      	ldr	r3, [sp, #20]
 8002c14:	b1bb      	cbz	r3, 8002c46 <_strtod_l+0x606>
 8002c16:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8002c1a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	4649      	mov	r1, r9
 8002c22:	dd10      	ble.n	8002c46 <_strtod_l+0x606>
 8002c24:	2b1f      	cmp	r3, #31
 8002c26:	f340 812b 	ble.w	8002e80 <_strtod_l+0x840>
 8002c2a:	2b34      	cmp	r3, #52	; 0x34
 8002c2c:	bfd8      	it	le
 8002c2e:	f04f 32ff 	movle.w	r2, #4294967295
 8002c32:	f04f 0800 	mov.w	r8, #0
 8002c36:	bfcf      	iteee	gt
 8002c38:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8002c3c:	3b20      	suble	r3, #32
 8002c3e:	fa02 f303 	lslle.w	r3, r2, r3
 8002c42:	ea03 0901 	andle.w	r9, r3, r1
 8002c46:	2200      	movs	r2, #0
 8002c48:	2300      	movs	r3, #0
 8002c4a:	4640      	mov	r0, r8
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	f7fd feb5 	bl	80009bc <__aeabi_dcmpeq>
 8002c52:	2800      	cmp	r0, #0
 8002c54:	d1a1      	bne.n	8002b9a <_strtod_l+0x55a>
 8002c56:	9b06      	ldr	r3, [sp, #24]
 8002c58:	465a      	mov	r2, fp
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	4650      	mov	r0, sl
 8002c5e:	4623      	mov	r3, r4
 8002c60:	9908      	ldr	r1, [sp, #32]
 8002c62:	f000 ffaf 	bl	8003bc4 <__s2b>
 8002c66:	9008      	str	r0, [sp, #32]
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	f43f af24 	beq.w	8002ab6 <_strtod_l+0x476>
 8002c6e:	9b04      	ldr	r3, [sp, #16]
 8002c70:	f04f 0b00 	mov.w	fp, #0
 8002c74:	1b5d      	subs	r5, r3, r5
 8002c76:	9b07      	ldr	r3, [sp, #28]
 8002c78:	f8cd b010 	str.w	fp, [sp, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bfb4      	ite	lt
 8002c80:	462b      	movlt	r3, r5
 8002c82:	2300      	movge	r3, #0
 8002c84:	930e      	str	r3, [sp, #56]	; 0x38
 8002c86:	9b07      	ldr	r3, [sp, #28]
 8002c88:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002c8c:	9316      	str	r3, [sp, #88]	; 0x58
 8002c8e:	9b08      	ldr	r3, [sp, #32]
 8002c90:	4650      	mov	r0, sl
 8002c92:	6859      	ldr	r1, [r3, #4]
 8002c94:	f000 feea 	bl	8003a6c <_Balloc>
 8002c98:	9006      	str	r0, [sp, #24]
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	f43f af13 	beq.w	8002ac6 <_strtod_l+0x486>
 8002ca0:	9b08      	ldr	r3, [sp, #32]
 8002ca2:	300c      	adds	r0, #12
 8002ca4:	691a      	ldr	r2, [r3, #16]
 8002ca6:	f103 010c 	add.w	r1, r3, #12
 8002caa:	3202      	adds	r2, #2
 8002cac:	0092      	lsls	r2, r2, #2
 8002cae:	f000 fecf 	bl	8003a50 <memcpy>
 8002cb2:	ab1e      	add	r3, sp, #120	; 0x78
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	ab1d      	add	r3, sp, #116	; 0x74
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	4642      	mov	r2, r8
 8002cbc:	464b      	mov	r3, r9
 8002cbe:	4650      	mov	r0, sl
 8002cc0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8002cc4:	f001 fabc 	bl	8004240 <__d2b>
 8002cc8:	901c      	str	r0, [sp, #112]	; 0x70
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	f43f aefb 	beq.w	8002ac6 <_strtod_l+0x486>
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4650      	mov	r0, sl
 8002cd4:	f001 f80e 	bl	8003cf4 <__i2b>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	9004      	str	r0, [sp, #16]
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	f43f aef2 	beq.w	8002ac6 <_strtod_l+0x486>
 8002ce2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8002ce4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002ce6:	2d00      	cmp	r5, #0
 8002ce8:	bfab      	itete	ge
 8002cea:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8002cec:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8002cee:	18ee      	addge	r6, r5, r3
 8002cf0:	1b5c      	sublt	r4, r3, r5
 8002cf2:	9b05      	ldr	r3, [sp, #20]
 8002cf4:	bfa8      	it	ge
 8002cf6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8002cf8:	eba5 0503 	sub.w	r5, r5, r3
 8002cfc:	4415      	add	r5, r2
 8002cfe:	4b71      	ldr	r3, [pc, #452]	; (8002ec4 <_strtod_l+0x884>)
 8002d00:	f105 35ff 	add.w	r5, r5, #4294967295
 8002d04:	bfb8      	it	lt
 8002d06:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8002d08:	429d      	cmp	r5, r3
 8002d0a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8002d0e:	f280 80c9 	bge.w	8002ea4 <_strtod_l+0x864>
 8002d12:	1b5b      	subs	r3, r3, r5
 8002d14:	2b1f      	cmp	r3, #31
 8002d16:	f04f 0701 	mov.w	r7, #1
 8002d1a:	eba2 0203 	sub.w	r2, r2, r3
 8002d1e:	f300 80b6 	bgt.w	8002e8e <_strtod_l+0x84e>
 8002d22:	2500      	movs	r5, #0
 8002d24:	fa07 f303 	lsl.w	r3, r7, r3
 8002d28:	930f      	str	r3, [sp, #60]	; 0x3c
 8002d2a:	18b7      	adds	r7, r6, r2
 8002d2c:	9b05      	ldr	r3, [sp, #20]
 8002d2e:	42be      	cmp	r6, r7
 8002d30:	4414      	add	r4, r2
 8002d32:	441c      	add	r4, r3
 8002d34:	4633      	mov	r3, r6
 8002d36:	bfa8      	it	ge
 8002d38:	463b      	movge	r3, r7
 8002d3a:	42a3      	cmp	r3, r4
 8002d3c:	bfa8      	it	ge
 8002d3e:	4623      	movge	r3, r4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	bfc2      	ittt	gt
 8002d44:	1aff      	subgt	r7, r7, r3
 8002d46:	1ae4      	subgt	r4, r4, r3
 8002d48:	1af6      	subgt	r6, r6, r3
 8002d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	dd17      	ble.n	8002d80 <_strtod_l+0x740>
 8002d50:	461a      	mov	r2, r3
 8002d52:	4650      	mov	r0, sl
 8002d54:	9904      	ldr	r1, [sp, #16]
 8002d56:	f001 f887 	bl	8003e68 <__pow5mult>
 8002d5a:	9004      	str	r0, [sp, #16]
 8002d5c:	2800      	cmp	r0, #0
 8002d5e:	f43f aeb2 	beq.w	8002ac6 <_strtod_l+0x486>
 8002d62:	4601      	mov	r1, r0
 8002d64:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002d66:	4650      	mov	r0, sl
 8002d68:	f000 ffda 	bl	8003d20 <__multiply>
 8002d6c:	9009      	str	r0, [sp, #36]	; 0x24
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	f43f aea9 	beq.w	8002ac6 <_strtod_l+0x486>
 8002d74:	4650      	mov	r0, sl
 8002d76:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002d78:	f000 feb8 	bl	8003aec <_Bfree>
 8002d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d7e:	931c      	str	r3, [sp, #112]	; 0x70
 8002d80:	2f00      	cmp	r7, #0
 8002d82:	f300 8093 	bgt.w	8002eac <_strtod_l+0x86c>
 8002d86:	9b07      	ldr	r3, [sp, #28]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	dd08      	ble.n	8002d9e <_strtod_l+0x75e>
 8002d8c:	4650      	mov	r0, sl
 8002d8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002d90:	9906      	ldr	r1, [sp, #24]
 8002d92:	f001 f869 	bl	8003e68 <__pow5mult>
 8002d96:	9006      	str	r0, [sp, #24]
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	f43f ae94 	beq.w	8002ac6 <_strtod_l+0x486>
 8002d9e:	2c00      	cmp	r4, #0
 8002da0:	dd08      	ble.n	8002db4 <_strtod_l+0x774>
 8002da2:	4622      	mov	r2, r4
 8002da4:	4650      	mov	r0, sl
 8002da6:	9906      	ldr	r1, [sp, #24]
 8002da8:	f001 f8b8 	bl	8003f1c <__lshift>
 8002dac:	9006      	str	r0, [sp, #24]
 8002dae:	2800      	cmp	r0, #0
 8002db0:	f43f ae89 	beq.w	8002ac6 <_strtod_l+0x486>
 8002db4:	2e00      	cmp	r6, #0
 8002db6:	dd08      	ble.n	8002dca <_strtod_l+0x78a>
 8002db8:	4632      	mov	r2, r6
 8002dba:	4650      	mov	r0, sl
 8002dbc:	9904      	ldr	r1, [sp, #16]
 8002dbe:	f001 f8ad 	bl	8003f1c <__lshift>
 8002dc2:	9004      	str	r0, [sp, #16]
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	f43f ae7e 	beq.w	8002ac6 <_strtod_l+0x486>
 8002dca:	4650      	mov	r0, sl
 8002dcc:	9a06      	ldr	r2, [sp, #24]
 8002dce:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002dd0:	f001 f92c 	bl	800402c <__mdiff>
 8002dd4:	4683      	mov	fp, r0
 8002dd6:	2800      	cmp	r0, #0
 8002dd8:	f43f ae75 	beq.w	8002ac6 <_strtod_l+0x486>
 8002ddc:	2400      	movs	r4, #0
 8002dde:	68c3      	ldr	r3, [r0, #12]
 8002de0:	9904      	ldr	r1, [sp, #16]
 8002de2:	60c4      	str	r4, [r0, #12]
 8002de4:	930d      	str	r3, [sp, #52]	; 0x34
 8002de6:	f001 f905 	bl	8003ff4 <__mcmp>
 8002dea:	42a0      	cmp	r0, r4
 8002dec:	da70      	bge.n	8002ed0 <_strtod_l+0x890>
 8002dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002df0:	ea53 0308 	orrs.w	r3, r3, r8
 8002df4:	f040 8096 	bne.w	8002f24 <_strtod_l+0x8e4>
 8002df8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 8091 	bne.w	8002f24 <_strtod_l+0x8e4>
 8002e02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002e06:	0d1b      	lsrs	r3, r3, #20
 8002e08:	051b      	lsls	r3, r3, #20
 8002e0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8002e0e:	f240 8089 	bls.w	8002f24 <_strtod_l+0x8e4>
 8002e12:	f8db 3014 	ldr.w	r3, [fp, #20]
 8002e16:	b923      	cbnz	r3, 8002e22 <_strtod_l+0x7e2>
 8002e18:	f8db 3010 	ldr.w	r3, [fp, #16]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	f340 8081 	ble.w	8002f24 <_strtod_l+0x8e4>
 8002e22:	4659      	mov	r1, fp
 8002e24:	2201      	movs	r2, #1
 8002e26:	4650      	mov	r0, sl
 8002e28:	f001 f878 	bl	8003f1c <__lshift>
 8002e2c:	9904      	ldr	r1, [sp, #16]
 8002e2e:	4683      	mov	fp, r0
 8002e30:	f001 f8e0 	bl	8003ff4 <__mcmp>
 8002e34:	2800      	cmp	r0, #0
 8002e36:	dd75      	ble.n	8002f24 <_strtod_l+0x8e4>
 8002e38:	9905      	ldr	r1, [sp, #20]
 8002e3a:	464b      	mov	r3, r9
 8002e3c:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <_strtod_l+0x888>)
 8002e3e:	2900      	cmp	r1, #0
 8002e40:	f000 8091 	beq.w	8002f66 <_strtod_l+0x926>
 8002e44:	ea02 0109 	and.w	r1, r2, r9
 8002e48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8002e4c:	f300 808b 	bgt.w	8002f66 <_strtod_l+0x926>
 8002e50:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8002e54:	f77f aea9 	ble.w	8002baa <_strtod_l+0x56a>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <_strtod_l+0x88c>)
 8002e5c:	4640      	mov	r0, r8
 8002e5e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8002e62:	4649      	mov	r1, r9
 8002e64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8002e68:	f7fd fb40 	bl	80004ec <__aeabi_dmul>
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4303      	orrs	r3, r0
 8002e70:	bf08      	it	eq
 8002e72:	2322      	moveq	r3, #34	; 0x22
 8002e74:	4680      	mov	r8, r0
 8002e76:	4689      	mov	r9, r1
 8002e78:	bf08      	it	eq
 8002e7a:	f8ca 3000 	streq.w	r3, [sl]
 8002e7e:	e62d      	b.n	8002adc <_strtod_l+0x49c>
 8002e80:	f04f 32ff 	mov.w	r2, #4294967295
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	ea03 0808 	and.w	r8, r3, r8
 8002e8c:	e6db      	b.n	8002c46 <_strtod_l+0x606>
 8002e8e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8002e92:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8002e96:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8002e9a:	35e2      	adds	r5, #226	; 0xe2
 8002e9c:	fa07 f505 	lsl.w	r5, r7, r5
 8002ea0:	970f      	str	r7, [sp, #60]	; 0x3c
 8002ea2:	e742      	b.n	8002d2a <_strtod_l+0x6ea>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	2500      	movs	r5, #0
 8002ea8:	930f      	str	r3, [sp, #60]	; 0x3c
 8002eaa:	e73e      	b.n	8002d2a <_strtod_l+0x6ea>
 8002eac:	463a      	mov	r2, r7
 8002eae:	4650      	mov	r0, sl
 8002eb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002eb2:	f001 f833 	bl	8003f1c <__lshift>
 8002eb6:	901c      	str	r0, [sp, #112]	; 0x70
 8002eb8:	2800      	cmp	r0, #0
 8002eba:	f47f af64 	bne.w	8002d86 <_strtod_l+0x746>
 8002ebe:	e602      	b.n	8002ac6 <_strtod_l+0x486>
 8002ec0:	08005460 	.word	0x08005460
 8002ec4:	fffffc02 	.word	0xfffffc02
 8002ec8:	7ff00000 	.word	0x7ff00000
 8002ecc:	39500000 	.word	0x39500000
 8002ed0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8002ed4:	d166      	bne.n	8002fa4 <_strtod_l+0x964>
 8002ed6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002ed8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002edc:	b35a      	cbz	r2, 8002f36 <_strtod_l+0x8f6>
 8002ede:	4a9c      	ldr	r2, [pc, #624]	; (8003150 <_strtod_l+0xb10>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d12c      	bne.n	8002f3e <_strtod_l+0x8fe>
 8002ee4:	9b05      	ldr	r3, [sp, #20]
 8002ee6:	4640      	mov	r0, r8
 8002ee8:	b303      	cbz	r3, 8002f2c <_strtod_l+0x8ec>
 8002eea:	464b      	mov	r3, r9
 8002eec:	4a99      	ldr	r2, [pc, #612]	; (8003154 <_strtod_l+0xb14>)
 8002eee:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8002ef8:	d81b      	bhi.n	8002f32 <_strtod_l+0x8f2>
 8002efa:	0d12      	lsrs	r2, r2, #20
 8002efc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8002f00:	fa01 f303 	lsl.w	r3, r1, r3
 8002f04:	4298      	cmp	r0, r3
 8002f06:	d11a      	bne.n	8002f3e <_strtod_l+0x8fe>
 8002f08:	4b93      	ldr	r3, [pc, #588]	; (8003158 <_strtod_l+0xb18>)
 8002f0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d102      	bne.n	8002f16 <_strtod_l+0x8d6>
 8002f10:	3001      	adds	r0, #1
 8002f12:	f43f add8 	beq.w	8002ac6 <_strtod_l+0x486>
 8002f16:	f04f 0800 	mov.w	r8, #0
 8002f1a:	4b8e      	ldr	r3, [pc, #568]	; (8003154 <_strtod_l+0xb14>)
 8002f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f1e:	401a      	ands	r2, r3
 8002f20:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8002f24:	9b05      	ldr	r3, [sp, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d196      	bne.n	8002e58 <_strtod_l+0x818>
 8002f2a:	e5d7      	b.n	8002adc <_strtod_l+0x49c>
 8002f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002f30:	e7e8      	b.n	8002f04 <_strtod_l+0x8c4>
 8002f32:	460b      	mov	r3, r1
 8002f34:	e7e6      	b.n	8002f04 <_strtod_l+0x8c4>
 8002f36:	ea53 0308 	orrs.w	r3, r3, r8
 8002f3a:	f43f af7d 	beq.w	8002e38 <_strtod_l+0x7f8>
 8002f3e:	b1e5      	cbz	r5, 8002f7a <_strtod_l+0x93a>
 8002f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f42:	421d      	tst	r5, r3
 8002f44:	d0ee      	beq.n	8002f24 <_strtod_l+0x8e4>
 8002f46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002f48:	4640      	mov	r0, r8
 8002f4a:	4649      	mov	r1, r9
 8002f4c:	9a05      	ldr	r2, [sp, #20]
 8002f4e:	b1c3      	cbz	r3, 8002f82 <_strtod_l+0x942>
 8002f50:	f7ff fb53 	bl	80025fa <sulp>
 8002f54:	4602      	mov	r2, r0
 8002f56:	460b      	mov	r3, r1
 8002f58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f5c:	f7fd f910 	bl	8000180 <__adddf3>
 8002f60:	4680      	mov	r8, r0
 8002f62:	4689      	mov	r9, r1
 8002f64:	e7de      	b.n	8002f24 <_strtod_l+0x8e4>
 8002f66:	4013      	ands	r3, r2
 8002f68:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002f6c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8002f70:	f04f 38ff 	mov.w	r8, #4294967295
 8002f74:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8002f78:	e7d4      	b.n	8002f24 <_strtod_l+0x8e4>
 8002f7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002f7c:	ea13 0f08 	tst.w	r3, r8
 8002f80:	e7e0      	b.n	8002f44 <_strtod_l+0x904>
 8002f82:	f7ff fb3a 	bl	80025fa <sulp>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f8e:	f7fd f8f5 	bl	800017c <__aeabi_dsub>
 8002f92:	2200      	movs	r2, #0
 8002f94:	2300      	movs	r3, #0
 8002f96:	4680      	mov	r8, r0
 8002f98:	4689      	mov	r9, r1
 8002f9a:	f7fd fd0f 	bl	80009bc <__aeabi_dcmpeq>
 8002f9e:	2800      	cmp	r0, #0
 8002fa0:	d0c0      	beq.n	8002f24 <_strtod_l+0x8e4>
 8002fa2:	e602      	b.n	8002baa <_strtod_l+0x56a>
 8002fa4:	4658      	mov	r0, fp
 8002fa6:	9904      	ldr	r1, [sp, #16]
 8002fa8:	f001 f9a6 	bl	80042f8 <__ratio>
 8002fac:	2200      	movs	r2, #0
 8002fae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fb2:	4606      	mov	r6, r0
 8002fb4:	460f      	mov	r7, r1
 8002fb6:	f7fd fd15 	bl	80009e4 <__aeabi_dcmple>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d075      	beq.n	80030aa <_strtod_l+0xa6a>
 8002fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d047      	beq.n	8003054 <_strtod_l+0xa14>
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	4f65      	ldr	r7, [pc, #404]	; (800315c <_strtod_l+0xb1c>)
 8002fc8:	4d64      	ldr	r5, [pc, #400]	; (800315c <_strtod_l+0xb1c>)
 8002fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fd0:	0d1b      	lsrs	r3, r3, #20
 8002fd2:	051b      	lsls	r3, r3, #20
 8002fd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8002fd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002fd8:	4b61      	ldr	r3, [pc, #388]	; (8003160 <_strtod_l+0xb20>)
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	f040 80c8 	bne.w	8003170 <_strtod_l+0xb30>
 8002fe0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002fe4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8002fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fea:	4640      	mov	r0, r8
 8002fec:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8002ff0:	4649      	mov	r1, r9
 8002ff2:	f001 f8ab 	bl	800414c <__ulp>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4630      	mov	r0, r6
 8002ffc:	4639      	mov	r1, r7
 8002ffe:	f7fd fa75 	bl	80004ec <__aeabi_dmul>
 8003002:	4642      	mov	r2, r8
 8003004:	464b      	mov	r3, r9
 8003006:	f7fd f8bb 	bl	8000180 <__adddf3>
 800300a:	460b      	mov	r3, r1
 800300c:	4951      	ldr	r1, [pc, #324]	; (8003154 <_strtod_l+0xb14>)
 800300e:	4a55      	ldr	r2, [pc, #340]	; (8003164 <_strtod_l+0xb24>)
 8003010:	4019      	ands	r1, r3
 8003012:	4291      	cmp	r1, r2
 8003014:	4680      	mov	r8, r0
 8003016:	d95e      	bls.n	80030d6 <_strtod_l+0xa96>
 8003018:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800301a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800301e:	4293      	cmp	r3, r2
 8003020:	d103      	bne.n	800302a <_strtod_l+0x9ea>
 8003022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003024:	3301      	adds	r3, #1
 8003026:	f43f ad4e 	beq.w	8002ac6 <_strtod_l+0x486>
 800302a:	f04f 38ff 	mov.w	r8, #4294967295
 800302e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8003158 <_strtod_l+0xb18>
 8003032:	4650      	mov	r0, sl
 8003034:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003036:	f000 fd59 	bl	8003aec <_Bfree>
 800303a:	4650      	mov	r0, sl
 800303c:	9906      	ldr	r1, [sp, #24]
 800303e:	f000 fd55 	bl	8003aec <_Bfree>
 8003042:	4650      	mov	r0, sl
 8003044:	9904      	ldr	r1, [sp, #16]
 8003046:	f000 fd51 	bl	8003aec <_Bfree>
 800304a:	4659      	mov	r1, fp
 800304c:	4650      	mov	r0, sl
 800304e:	f000 fd4d 	bl	8003aec <_Bfree>
 8003052:	e61c      	b.n	8002c8e <_strtod_l+0x64e>
 8003054:	f1b8 0f00 	cmp.w	r8, #0
 8003058:	d119      	bne.n	800308e <_strtod_l+0xa4e>
 800305a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800305c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003060:	b9e3      	cbnz	r3, 800309c <_strtod_l+0xa5c>
 8003062:	2200      	movs	r2, #0
 8003064:	4630      	mov	r0, r6
 8003066:	4639      	mov	r1, r7
 8003068:	4b3c      	ldr	r3, [pc, #240]	; (800315c <_strtod_l+0xb1c>)
 800306a:	f7fd fcb1 	bl	80009d0 <__aeabi_dcmplt>
 800306e:	b9c8      	cbnz	r0, 80030a4 <_strtod_l+0xa64>
 8003070:	2200      	movs	r2, #0
 8003072:	4630      	mov	r0, r6
 8003074:	4639      	mov	r1, r7
 8003076:	4b3c      	ldr	r3, [pc, #240]	; (8003168 <_strtod_l+0xb28>)
 8003078:	f7fd fa38 	bl	80004ec <__aeabi_dmul>
 800307c:	4604      	mov	r4, r0
 800307e:	460d      	mov	r5, r1
 8003080:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003084:	9418      	str	r4, [sp, #96]	; 0x60
 8003086:	9319      	str	r3, [sp, #100]	; 0x64
 8003088:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800308c:	e79d      	b.n	8002fca <_strtod_l+0x98a>
 800308e:	f1b8 0f01 	cmp.w	r8, #1
 8003092:	d103      	bne.n	800309c <_strtod_l+0xa5c>
 8003094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003096:	2b00      	cmp	r3, #0
 8003098:	f43f ad87 	beq.w	8002baa <_strtod_l+0x56a>
 800309c:	2600      	movs	r6, #0
 800309e:	2400      	movs	r4, #0
 80030a0:	4f32      	ldr	r7, [pc, #200]	; (800316c <_strtod_l+0xb2c>)
 80030a2:	e791      	b.n	8002fc8 <_strtod_l+0x988>
 80030a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80030a6:	4d30      	ldr	r5, [pc, #192]	; (8003168 <_strtod_l+0xb28>)
 80030a8:	e7ea      	b.n	8003080 <_strtod_l+0xa40>
 80030aa:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <_strtod_l+0xb28>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	4630      	mov	r0, r6
 80030b0:	4639      	mov	r1, r7
 80030b2:	f7fd fa1b 	bl	80004ec <__aeabi_dmul>
 80030b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80030b8:	4604      	mov	r4, r0
 80030ba:	460d      	mov	r5, r1
 80030bc:	b933      	cbnz	r3, 80030cc <_strtod_l+0xa8c>
 80030be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80030c2:	9010      	str	r0, [sp, #64]	; 0x40
 80030c4:	9311      	str	r3, [sp, #68]	; 0x44
 80030c6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80030ca:	e77e      	b.n	8002fca <_strtod_l+0x98a>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80030d4:	e7f7      	b.n	80030c6 <_strtod_l+0xa86>
 80030d6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80030da:	9b05      	ldr	r3, [sp, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1a8      	bne.n	8003032 <_strtod_l+0x9f2>
 80030e0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80030e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80030e6:	0d1b      	lsrs	r3, r3, #20
 80030e8:	051b      	lsls	r3, r3, #20
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d1a1      	bne.n	8003032 <_strtod_l+0x9f2>
 80030ee:	4620      	mov	r0, r4
 80030f0:	4629      	mov	r1, r5
 80030f2:	f7fd fd05 	bl	8000b00 <__aeabi_d2lz>
 80030f6:	f7fd f9cb 	bl	8000490 <__aeabi_l2d>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4620      	mov	r0, r4
 8003100:	4629      	mov	r1, r5
 8003102:	f7fd f83b 	bl	800017c <__aeabi_dsub>
 8003106:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003108:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800310c:	ea43 0308 	orr.w	r3, r3, r8
 8003110:	4313      	orrs	r3, r2
 8003112:	4604      	mov	r4, r0
 8003114:	460d      	mov	r5, r1
 8003116:	d066      	beq.n	80031e6 <_strtod_l+0xba6>
 8003118:	a309      	add	r3, pc, #36	; (adr r3, 8003140 <_strtod_l+0xb00>)
 800311a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800311e:	f7fd fc57 	bl	80009d0 <__aeabi_dcmplt>
 8003122:	2800      	cmp	r0, #0
 8003124:	f47f acda 	bne.w	8002adc <_strtod_l+0x49c>
 8003128:	a307      	add	r3, pc, #28	; (adr r3, 8003148 <_strtod_l+0xb08>)
 800312a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312e:	4620      	mov	r0, r4
 8003130:	4629      	mov	r1, r5
 8003132:	f7fd fc6b 	bl	8000a0c <__aeabi_dcmpgt>
 8003136:	2800      	cmp	r0, #0
 8003138:	f43f af7b 	beq.w	8003032 <_strtod_l+0x9f2>
 800313c:	e4ce      	b.n	8002adc <_strtod_l+0x49c>
 800313e:	bf00      	nop
 8003140:	94a03595 	.word	0x94a03595
 8003144:	3fdfffff 	.word	0x3fdfffff
 8003148:	35afe535 	.word	0x35afe535
 800314c:	3fe00000 	.word	0x3fe00000
 8003150:	000fffff 	.word	0x000fffff
 8003154:	7ff00000 	.word	0x7ff00000
 8003158:	7fefffff 	.word	0x7fefffff
 800315c:	3ff00000 	.word	0x3ff00000
 8003160:	7fe00000 	.word	0x7fe00000
 8003164:	7c9fffff 	.word	0x7c9fffff
 8003168:	3fe00000 	.word	0x3fe00000
 800316c:	bff00000 	.word	0xbff00000
 8003170:	9b05      	ldr	r3, [sp, #20]
 8003172:	b313      	cbz	r3, 80031ba <_strtod_l+0xb7a>
 8003174:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003176:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800317a:	d81e      	bhi.n	80031ba <_strtod_l+0xb7a>
 800317c:	a326      	add	r3, pc, #152	; (adr r3, 8003218 <_strtod_l+0xbd8>)
 800317e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003182:	4620      	mov	r0, r4
 8003184:	4629      	mov	r1, r5
 8003186:	f7fd fc2d 	bl	80009e4 <__aeabi_dcmple>
 800318a:	b190      	cbz	r0, 80031b2 <_strtod_l+0xb72>
 800318c:	4629      	mov	r1, r5
 800318e:	4620      	mov	r0, r4
 8003190:	f7fd fc46 	bl	8000a20 <__aeabi_d2uiz>
 8003194:	2801      	cmp	r0, #1
 8003196:	bf38      	it	cc
 8003198:	2001      	movcc	r0, #1
 800319a:	f7fd f92d 	bl	80003f8 <__aeabi_ui2d>
 800319e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031a0:	4604      	mov	r4, r0
 80031a2:	460d      	mov	r5, r1
 80031a4:	b9d3      	cbnz	r3, 80031dc <_strtod_l+0xb9c>
 80031a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80031aa:	9012      	str	r0, [sp, #72]	; 0x48
 80031ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80031ae:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80031b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80031b4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80031b8:	1a9f      	subs	r7, r3, r2
 80031ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80031be:	f000 ffc5 	bl	800414c <__ulp>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4630      	mov	r0, r6
 80031c8:	4639      	mov	r1, r7
 80031ca:	f7fd f98f 	bl	80004ec <__aeabi_dmul>
 80031ce:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80031d2:	f7fc ffd5 	bl	8000180 <__adddf3>
 80031d6:	4680      	mov	r8, r0
 80031d8:	4689      	mov	r9, r1
 80031da:	e77e      	b.n	80030da <_strtod_l+0xa9a>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80031e4:	e7e3      	b.n	80031ae <_strtod_l+0xb6e>
 80031e6:	a30e      	add	r3, pc, #56	; (adr r3, 8003220 <_strtod_l+0xbe0>)
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	f7fd fbf0 	bl	80009d0 <__aeabi_dcmplt>
 80031f0:	e7a1      	b.n	8003136 <_strtod_l+0xaf6>
 80031f2:	2300      	movs	r3, #0
 80031f4:	930c      	str	r3, [sp, #48]	; 0x30
 80031f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80031f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	f7ff ba65 	b.w	80026ca <_strtod_l+0x8a>
 8003200:	2b65      	cmp	r3, #101	; 0x65
 8003202:	f43f ab5c 	beq.w	80028be <_strtod_l+0x27e>
 8003206:	2b45      	cmp	r3, #69	; 0x45
 8003208:	f43f ab59 	beq.w	80028be <_strtod_l+0x27e>
 800320c:	2201      	movs	r2, #1
 800320e:	f7ff bb8d 	b.w	800292c <_strtod_l+0x2ec>
 8003212:	bf00      	nop
 8003214:	f3af 8000 	nop.w
 8003218:	ffc00000 	.word	0xffc00000
 800321c:	41dfffff 	.word	0x41dfffff
 8003220:	94a03595 	.word	0x94a03595
 8003224:	3fcfffff 	.word	0x3fcfffff

08003228 <strtod>:
 8003228:	460a      	mov	r2, r1
 800322a:	4601      	mov	r1, r0
 800322c:	4802      	ldr	r0, [pc, #8]	; (8003238 <strtod+0x10>)
 800322e:	4b03      	ldr	r3, [pc, #12]	; (800323c <strtod+0x14>)
 8003230:	6800      	ldr	r0, [r0, #0]
 8003232:	f7ff ba05 	b.w	8002640 <_strtod_l>
 8003236:	bf00      	nop
 8003238:	20000014 	.word	0x20000014
 800323c:	2000007c 	.word	0x2000007c

08003240 <_strtol_l.isra.0>:
 8003240:	2b01      	cmp	r3, #1
 8003242:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003246:	4686      	mov	lr, r0
 8003248:	d001      	beq.n	800324e <_strtol_l.isra.0+0xe>
 800324a:	2b24      	cmp	r3, #36	; 0x24
 800324c:	d906      	bls.n	800325c <_strtol_l.isra.0+0x1c>
 800324e:	f7ff f98f 	bl	8002570 <__errno>
 8003252:	2316      	movs	r3, #22
 8003254:	6003      	str	r3, [r0, #0]
 8003256:	2000      	movs	r0, #0
 8003258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800325c:	468c      	mov	ip, r1
 800325e:	4e3a      	ldr	r6, [pc, #232]	; (8003348 <_strtol_l.isra.0+0x108>)
 8003260:	4660      	mov	r0, ip
 8003262:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003266:	5da5      	ldrb	r5, [r4, r6]
 8003268:	f015 0508 	ands.w	r5, r5, #8
 800326c:	d1f8      	bne.n	8003260 <_strtol_l.isra.0+0x20>
 800326e:	2c2d      	cmp	r4, #45	; 0x2d
 8003270:	d133      	bne.n	80032da <_strtol_l.isra.0+0x9a>
 8003272:	f04f 0801 	mov.w	r8, #1
 8003276:	f89c 4000 	ldrb.w	r4, [ip]
 800327a:	f100 0c02 	add.w	ip, r0, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d05d      	beq.n	800333e <_strtol_l.isra.0+0xfe>
 8003282:	2b10      	cmp	r3, #16
 8003284:	d10c      	bne.n	80032a0 <_strtol_l.isra.0+0x60>
 8003286:	2c30      	cmp	r4, #48	; 0x30
 8003288:	d10a      	bne.n	80032a0 <_strtol_l.isra.0+0x60>
 800328a:	f89c 0000 	ldrb.w	r0, [ip]
 800328e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8003292:	2858      	cmp	r0, #88	; 0x58
 8003294:	d14e      	bne.n	8003334 <_strtol_l.isra.0+0xf4>
 8003296:	2310      	movs	r3, #16
 8003298:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800329c:	f10c 0c02 	add.w	ip, ip, #2
 80032a0:	2500      	movs	r5, #0
 80032a2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80032a6:	3f01      	subs	r7, #1
 80032a8:	fbb7 f9f3 	udiv	r9, r7, r3
 80032ac:	4628      	mov	r0, r5
 80032ae:	fb03 7a19 	mls	sl, r3, r9, r7
 80032b2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80032b6:	2e09      	cmp	r6, #9
 80032b8:	d818      	bhi.n	80032ec <_strtol_l.isra.0+0xac>
 80032ba:	4634      	mov	r4, r6
 80032bc:	42a3      	cmp	r3, r4
 80032be:	dd24      	ble.n	800330a <_strtol_l.isra.0+0xca>
 80032c0:	2d00      	cmp	r5, #0
 80032c2:	db1f      	blt.n	8003304 <_strtol_l.isra.0+0xc4>
 80032c4:	4581      	cmp	r9, r0
 80032c6:	d31d      	bcc.n	8003304 <_strtol_l.isra.0+0xc4>
 80032c8:	d101      	bne.n	80032ce <_strtol_l.isra.0+0x8e>
 80032ca:	45a2      	cmp	sl, r4
 80032cc:	db1a      	blt.n	8003304 <_strtol_l.isra.0+0xc4>
 80032ce:	2501      	movs	r5, #1
 80032d0:	fb00 4003 	mla	r0, r0, r3, r4
 80032d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80032d8:	e7eb      	b.n	80032b2 <_strtol_l.isra.0+0x72>
 80032da:	2c2b      	cmp	r4, #43	; 0x2b
 80032dc:	bf08      	it	eq
 80032de:	f89c 4000 	ldrbeq.w	r4, [ip]
 80032e2:	46a8      	mov	r8, r5
 80032e4:	bf08      	it	eq
 80032e6:	f100 0c02 	addeq.w	ip, r0, #2
 80032ea:	e7c8      	b.n	800327e <_strtol_l.isra.0+0x3e>
 80032ec:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80032f0:	2e19      	cmp	r6, #25
 80032f2:	d801      	bhi.n	80032f8 <_strtol_l.isra.0+0xb8>
 80032f4:	3c37      	subs	r4, #55	; 0x37
 80032f6:	e7e1      	b.n	80032bc <_strtol_l.isra.0+0x7c>
 80032f8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80032fc:	2e19      	cmp	r6, #25
 80032fe:	d804      	bhi.n	800330a <_strtol_l.isra.0+0xca>
 8003300:	3c57      	subs	r4, #87	; 0x57
 8003302:	e7db      	b.n	80032bc <_strtol_l.isra.0+0x7c>
 8003304:	f04f 35ff 	mov.w	r5, #4294967295
 8003308:	e7e4      	b.n	80032d4 <_strtol_l.isra.0+0x94>
 800330a:	2d00      	cmp	r5, #0
 800330c:	da08      	bge.n	8003320 <_strtol_l.isra.0+0xe0>
 800330e:	2322      	movs	r3, #34	; 0x22
 8003310:	4638      	mov	r0, r7
 8003312:	f8ce 3000 	str.w	r3, [lr]
 8003316:	2a00      	cmp	r2, #0
 8003318:	d09e      	beq.n	8003258 <_strtol_l.isra.0+0x18>
 800331a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800331e:	e007      	b.n	8003330 <_strtol_l.isra.0+0xf0>
 8003320:	f1b8 0f00 	cmp.w	r8, #0
 8003324:	d000      	beq.n	8003328 <_strtol_l.isra.0+0xe8>
 8003326:	4240      	negs	r0, r0
 8003328:	2a00      	cmp	r2, #0
 800332a:	d095      	beq.n	8003258 <_strtol_l.isra.0+0x18>
 800332c:	2d00      	cmp	r5, #0
 800332e:	d1f4      	bne.n	800331a <_strtol_l.isra.0+0xda>
 8003330:	6011      	str	r1, [r2, #0]
 8003332:	e791      	b.n	8003258 <_strtol_l.isra.0+0x18>
 8003334:	2430      	movs	r4, #48	; 0x30
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1b2      	bne.n	80032a0 <_strtol_l.isra.0+0x60>
 800333a:	2308      	movs	r3, #8
 800333c:	e7b0      	b.n	80032a0 <_strtol_l.isra.0+0x60>
 800333e:	2c30      	cmp	r4, #48	; 0x30
 8003340:	d0a3      	beq.n	800328a <_strtol_l.isra.0+0x4a>
 8003342:	230a      	movs	r3, #10
 8003344:	e7ac      	b.n	80032a0 <_strtol_l.isra.0+0x60>
 8003346:	bf00      	nop
 8003348:	08005489 	.word	0x08005489

0800334c <strtol>:
 800334c:	4613      	mov	r3, r2
 800334e:	460a      	mov	r2, r1
 8003350:	4601      	mov	r1, r0
 8003352:	4802      	ldr	r0, [pc, #8]	; (800335c <strtol+0x10>)
 8003354:	6800      	ldr	r0, [r0, #0]
 8003356:	f7ff bf73 	b.w	8003240 <_strtol_l.isra.0>
 800335a:	bf00      	nop
 800335c:	20000014 	.word	0x20000014

08003360 <rshift>:
 8003360:	6903      	ldr	r3, [r0, #16]
 8003362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003366:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800336a:	f100 0414 	add.w	r4, r0, #20
 800336e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8003372:	dd46      	ble.n	8003402 <rshift+0xa2>
 8003374:	f011 011f 	ands.w	r1, r1, #31
 8003378:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800337c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8003380:	d10c      	bne.n	800339c <rshift+0x3c>
 8003382:	4629      	mov	r1, r5
 8003384:	f100 0710 	add.w	r7, r0, #16
 8003388:	42b1      	cmp	r1, r6
 800338a:	d335      	bcc.n	80033f8 <rshift+0x98>
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	1eea      	subs	r2, r5, #3
 8003392:	4296      	cmp	r6, r2
 8003394:	bf38      	it	cc
 8003396:	2300      	movcc	r3, #0
 8003398:	4423      	add	r3, r4
 800339a:	e015      	b.n	80033c8 <rshift+0x68>
 800339c:	46a1      	mov	r9, r4
 800339e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80033a2:	f1c1 0820 	rsb	r8, r1, #32
 80033a6:	40cf      	lsrs	r7, r1
 80033a8:	f105 0e04 	add.w	lr, r5, #4
 80033ac:	4576      	cmp	r6, lr
 80033ae:	46f4      	mov	ip, lr
 80033b0:	d816      	bhi.n	80033e0 <rshift+0x80>
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009a      	lsls	r2, r3, #2
 80033b6:	3a04      	subs	r2, #4
 80033b8:	3501      	adds	r5, #1
 80033ba:	42ae      	cmp	r6, r5
 80033bc:	bf38      	it	cc
 80033be:	2200      	movcc	r2, #0
 80033c0:	18a3      	adds	r3, r4, r2
 80033c2:	50a7      	str	r7, [r4, r2]
 80033c4:	b107      	cbz	r7, 80033c8 <rshift+0x68>
 80033c6:	3304      	adds	r3, #4
 80033c8:	42a3      	cmp	r3, r4
 80033ca:	eba3 0204 	sub.w	r2, r3, r4
 80033ce:	bf08      	it	eq
 80033d0:	2300      	moveq	r3, #0
 80033d2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80033d6:	6102      	str	r2, [r0, #16]
 80033d8:	bf08      	it	eq
 80033da:	6143      	streq	r3, [r0, #20]
 80033dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033e0:	f8dc c000 	ldr.w	ip, [ip]
 80033e4:	fa0c fc08 	lsl.w	ip, ip, r8
 80033e8:	ea4c 0707 	orr.w	r7, ip, r7
 80033ec:	f849 7b04 	str.w	r7, [r9], #4
 80033f0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80033f4:	40cf      	lsrs	r7, r1
 80033f6:	e7d9      	b.n	80033ac <rshift+0x4c>
 80033f8:	f851 cb04 	ldr.w	ip, [r1], #4
 80033fc:	f847 cf04 	str.w	ip, [r7, #4]!
 8003400:	e7c2      	b.n	8003388 <rshift+0x28>
 8003402:	4623      	mov	r3, r4
 8003404:	e7e0      	b.n	80033c8 <rshift+0x68>

08003406 <__hexdig_fun>:
 8003406:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800340a:	2b09      	cmp	r3, #9
 800340c:	d802      	bhi.n	8003414 <__hexdig_fun+0xe>
 800340e:	3820      	subs	r0, #32
 8003410:	b2c0      	uxtb	r0, r0
 8003412:	4770      	bx	lr
 8003414:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8003418:	2b05      	cmp	r3, #5
 800341a:	d801      	bhi.n	8003420 <__hexdig_fun+0x1a>
 800341c:	3847      	subs	r0, #71	; 0x47
 800341e:	e7f7      	b.n	8003410 <__hexdig_fun+0xa>
 8003420:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8003424:	2b05      	cmp	r3, #5
 8003426:	d801      	bhi.n	800342c <__hexdig_fun+0x26>
 8003428:	3827      	subs	r0, #39	; 0x27
 800342a:	e7f1      	b.n	8003410 <__hexdig_fun+0xa>
 800342c:	2000      	movs	r0, #0
 800342e:	4770      	bx	lr

08003430 <__gethex>:
 8003430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003434:	b08b      	sub	sp, #44	; 0x2c
 8003436:	9306      	str	r3, [sp, #24]
 8003438:	4bb9      	ldr	r3, [pc, #740]	; (8003720 <__gethex+0x2f0>)
 800343a:	9002      	str	r0, [sp, #8]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	468b      	mov	fp, r1
 8003440:	4618      	mov	r0, r3
 8003442:	4690      	mov	r8, r2
 8003444:	9303      	str	r3, [sp, #12]
 8003446:	f7fc fe8d 	bl	8000164 <strlen>
 800344a:	4682      	mov	sl, r0
 800344c:	9b03      	ldr	r3, [sp, #12]
 800344e:	f8db 2000 	ldr.w	r2, [fp]
 8003452:	4403      	add	r3, r0
 8003454:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003458:	9307      	str	r3, [sp, #28]
 800345a:	1c93      	adds	r3, r2, #2
 800345c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8003460:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8003464:	32fe      	adds	r2, #254	; 0xfe
 8003466:	18d1      	adds	r1, r2, r3
 8003468:	461f      	mov	r7, r3
 800346a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800346e:	9101      	str	r1, [sp, #4]
 8003470:	2830      	cmp	r0, #48	; 0x30
 8003472:	d0f8      	beq.n	8003466 <__gethex+0x36>
 8003474:	f7ff ffc7 	bl	8003406 <__hexdig_fun>
 8003478:	4604      	mov	r4, r0
 800347a:	2800      	cmp	r0, #0
 800347c:	d13a      	bne.n	80034f4 <__gethex+0xc4>
 800347e:	4652      	mov	r2, sl
 8003480:	4638      	mov	r0, r7
 8003482:	9903      	ldr	r1, [sp, #12]
 8003484:	f001 f828 	bl	80044d8 <strncmp>
 8003488:	4605      	mov	r5, r0
 800348a:	2800      	cmp	r0, #0
 800348c:	d166      	bne.n	800355c <__gethex+0x12c>
 800348e:	f817 000a 	ldrb.w	r0, [r7, sl]
 8003492:	eb07 060a 	add.w	r6, r7, sl
 8003496:	f7ff ffb6 	bl	8003406 <__hexdig_fun>
 800349a:	2800      	cmp	r0, #0
 800349c:	d060      	beq.n	8003560 <__gethex+0x130>
 800349e:	4633      	mov	r3, r6
 80034a0:	7818      	ldrb	r0, [r3, #0]
 80034a2:	461f      	mov	r7, r3
 80034a4:	2830      	cmp	r0, #48	; 0x30
 80034a6:	f103 0301 	add.w	r3, r3, #1
 80034aa:	d0f9      	beq.n	80034a0 <__gethex+0x70>
 80034ac:	f7ff ffab 	bl	8003406 <__hexdig_fun>
 80034b0:	2301      	movs	r3, #1
 80034b2:	fab0 f480 	clz	r4, r0
 80034b6:	4635      	mov	r5, r6
 80034b8:	0964      	lsrs	r4, r4, #5
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	463a      	mov	r2, r7
 80034be:	4616      	mov	r6, r2
 80034c0:	7830      	ldrb	r0, [r6, #0]
 80034c2:	3201      	adds	r2, #1
 80034c4:	f7ff ff9f 	bl	8003406 <__hexdig_fun>
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d1f8      	bne.n	80034be <__gethex+0x8e>
 80034cc:	4652      	mov	r2, sl
 80034ce:	4630      	mov	r0, r6
 80034d0:	9903      	ldr	r1, [sp, #12]
 80034d2:	f001 f801 	bl	80044d8 <strncmp>
 80034d6:	b980      	cbnz	r0, 80034fa <__gethex+0xca>
 80034d8:	b94d      	cbnz	r5, 80034ee <__gethex+0xbe>
 80034da:	eb06 050a 	add.w	r5, r6, sl
 80034de:	462a      	mov	r2, r5
 80034e0:	4616      	mov	r6, r2
 80034e2:	7830      	ldrb	r0, [r6, #0]
 80034e4:	3201      	adds	r2, #1
 80034e6:	f7ff ff8e 	bl	8003406 <__hexdig_fun>
 80034ea:	2800      	cmp	r0, #0
 80034ec:	d1f8      	bne.n	80034e0 <__gethex+0xb0>
 80034ee:	1bad      	subs	r5, r5, r6
 80034f0:	00ad      	lsls	r5, r5, #2
 80034f2:	e004      	b.n	80034fe <__gethex+0xce>
 80034f4:	2400      	movs	r4, #0
 80034f6:	4625      	mov	r5, r4
 80034f8:	e7e0      	b.n	80034bc <__gethex+0x8c>
 80034fa:	2d00      	cmp	r5, #0
 80034fc:	d1f7      	bne.n	80034ee <__gethex+0xbe>
 80034fe:	7833      	ldrb	r3, [r6, #0]
 8003500:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003504:	2b50      	cmp	r3, #80	; 0x50
 8003506:	d139      	bne.n	800357c <__gethex+0x14c>
 8003508:	7873      	ldrb	r3, [r6, #1]
 800350a:	2b2b      	cmp	r3, #43	; 0x2b
 800350c:	d02a      	beq.n	8003564 <__gethex+0x134>
 800350e:	2b2d      	cmp	r3, #45	; 0x2d
 8003510:	d02c      	beq.n	800356c <__gethex+0x13c>
 8003512:	f04f 0900 	mov.w	r9, #0
 8003516:	1c71      	adds	r1, r6, #1
 8003518:	7808      	ldrb	r0, [r1, #0]
 800351a:	f7ff ff74 	bl	8003406 <__hexdig_fun>
 800351e:	1e43      	subs	r3, r0, #1
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b18      	cmp	r3, #24
 8003524:	d82a      	bhi.n	800357c <__gethex+0x14c>
 8003526:	f1a0 0210 	sub.w	r2, r0, #16
 800352a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800352e:	f7ff ff6a 	bl	8003406 <__hexdig_fun>
 8003532:	1e43      	subs	r3, r0, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b18      	cmp	r3, #24
 8003538:	d91b      	bls.n	8003572 <__gethex+0x142>
 800353a:	f1b9 0f00 	cmp.w	r9, #0
 800353e:	d000      	beq.n	8003542 <__gethex+0x112>
 8003540:	4252      	negs	r2, r2
 8003542:	4415      	add	r5, r2
 8003544:	f8cb 1000 	str.w	r1, [fp]
 8003548:	b1d4      	cbz	r4, 8003580 <__gethex+0x150>
 800354a:	9b01      	ldr	r3, [sp, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf14      	ite	ne
 8003550:	2700      	movne	r7, #0
 8003552:	2706      	moveq	r7, #6
 8003554:	4638      	mov	r0, r7
 8003556:	b00b      	add	sp, #44	; 0x2c
 8003558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800355c:	463e      	mov	r6, r7
 800355e:	4625      	mov	r5, r4
 8003560:	2401      	movs	r4, #1
 8003562:	e7cc      	b.n	80034fe <__gethex+0xce>
 8003564:	f04f 0900 	mov.w	r9, #0
 8003568:	1cb1      	adds	r1, r6, #2
 800356a:	e7d5      	b.n	8003518 <__gethex+0xe8>
 800356c:	f04f 0901 	mov.w	r9, #1
 8003570:	e7fa      	b.n	8003568 <__gethex+0x138>
 8003572:	230a      	movs	r3, #10
 8003574:	fb03 0202 	mla	r2, r3, r2, r0
 8003578:	3a10      	subs	r2, #16
 800357a:	e7d6      	b.n	800352a <__gethex+0xfa>
 800357c:	4631      	mov	r1, r6
 800357e:	e7e1      	b.n	8003544 <__gethex+0x114>
 8003580:	4621      	mov	r1, r4
 8003582:	1bf3      	subs	r3, r6, r7
 8003584:	3b01      	subs	r3, #1
 8003586:	2b07      	cmp	r3, #7
 8003588:	dc0a      	bgt.n	80035a0 <__gethex+0x170>
 800358a:	9802      	ldr	r0, [sp, #8]
 800358c:	f000 fa6e 	bl	8003a6c <_Balloc>
 8003590:	4604      	mov	r4, r0
 8003592:	b940      	cbnz	r0, 80035a6 <__gethex+0x176>
 8003594:	4602      	mov	r2, r0
 8003596:	21de      	movs	r1, #222	; 0xde
 8003598:	4b62      	ldr	r3, [pc, #392]	; (8003724 <__gethex+0x2f4>)
 800359a:	4863      	ldr	r0, [pc, #396]	; (8003728 <__gethex+0x2f8>)
 800359c:	f000 ffbc 	bl	8004518 <__assert_func>
 80035a0:	3101      	adds	r1, #1
 80035a2:	105b      	asrs	r3, r3, #1
 80035a4:	e7ef      	b.n	8003586 <__gethex+0x156>
 80035a6:	f04f 0b00 	mov.w	fp, #0
 80035aa:	f100 0914 	add.w	r9, r0, #20
 80035ae:	f1ca 0301 	rsb	r3, sl, #1
 80035b2:	f8cd 9010 	str.w	r9, [sp, #16]
 80035b6:	f8cd b004 	str.w	fp, [sp, #4]
 80035ba:	9308      	str	r3, [sp, #32]
 80035bc:	42b7      	cmp	r7, r6
 80035be:	d33f      	bcc.n	8003640 <__gethex+0x210>
 80035c0:	9f04      	ldr	r7, [sp, #16]
 80035c2:	9b01      	ldr	r3, [sp, #4]
 80035c4:	f847 3b04 	str.w	r3, [r7], #4
 80035c8:	eba7 0709 	sub.w	r7, r7, r9
 80035cc:	10bf      	asrs	r7, r7, #2
 80035ce:	6127      	str	r7, [r4, #16]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fb41 	bl	8003c58 <__hi0bits>
 80035d6:	017f      	lsls	r7, r7, #5
 80035d8:	f8d8 6000 	ldr.w	r6, [r8]
 80035dc:	1a3f      	subs	r7, r7, r0
 80035de:	42b7      	cmp	r7, r6
 80035e0:	dd62      	ble.n	80036a8 <__gethex+0x278>
 80035e2:	1bbf      	subs	r7, r7, r6
 80035e4:	4639      	mov	r1, r7
 80035e6:	4620      	mov	r0, r4
 80035e8:	f000 fed7 	bl	800439a <__any_on>
 80035ec:	4682      	mov	sl, r0
 80035ee:	b1a8      	cbz	r0, 800361c <__gethex+0x1ec>
 80035f0:	f04f 0a01 	mov.w	sl, #1
 80035f4:	1e7b      	subs	r3, r7, #1
 80035f6:	1159      	asrs	r1, r3, #5
 80035f8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	fa0a f202 	lsl.w	r2, sl, r2
 8003604:	420a      	tst	r2, r1
 8003606:	d009      	beq.n	800361c <__gethex+0x1ec>
 8003608:	4553      	cmp	r3, sl
 800360a:	dd05      	ble.n	8003618 <__gethex+0x1e8>
 800360c:	4620      	mov	r0, r4
 800360e:	1eb9      	subs	r1, r7, #2
 8003610:	f000 fec3 	bl	800439a <__any_on>
 8003614:	2800      	cmp	r0, #0
 8003616:	d144      	bne.n	80036a2 <__gethex+0x272>
 8003618:	f04f 0a02 	mov.w	sl, #2
 800361c:	4639      	mov	r1, r7
 800361e:	4620      	mov	r0, r4
 8003620:	f7ff fe9e 	bl	8003360 <rshift>
 8003624:	443d      	add	r5, r7
 8003626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800362a:	42ab      	cmp	r3, r5
 800362c:	da4a      	bge.n	80036c4 <__gethex+0x294>
 800362e:	4621      	mov	r1, r4
 8003630:	9802      	ldr	r0, [sp, #8]
 8003632:	f000 fa5b 	bl	8003aec <_Bfree>
 8003636:	2300      	movs	r3, #0
 8003638:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800363a:	27a3      	movs	r7, #163	; 0xa3
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e789      	b.n	8003554 <__gethex+0x124>
 8003640:	1e73      	subs	r3, r6, #1
 8003642:	9a07      	ldr	r2, [sp, #28]
 8003644:	9305      	str	r3, [sp, #20]
 8003646:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800364a:	4293      	cmp	r3, r2
 800364c:	d019      	beq.n	8003682 <__gethex+0x252>
 800364e:	f1bb 0f20 	cmp.w	fp, #32
 8003652:	d107      	bne.n	8003664 <__gethex+0x234>
 8003654:	9b04      	ldr	r3, [sp, #16]
 8003656:	9a01      	ldr	r2, [sp, #4]
 8003658:	f843 2b04 	str.w	r2, [r3], #4
 800365c:	9304      	str	r3, [sp, #16]
 800365e:	2300      	movs	r3, #0
 8003660:	469b      	mov	fp, r3
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8003668:	f7ff fecd 	bl	8003406 <__hexdig_fun>
 800366c:	9b01      	ldr	r3, [sp, #4]
 800366e:	f000 000f 	and.w	r0, r0, #15
 8003672:	fa00 f00b 	lsl.w	r0, r0, fp
 8003676:	4303      	orrs	r3, r0
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	f10b 0b04 	add.w	fp, fp, #4
 800367e:	9b05      	ldr	r3, [sp, #20]
 8003680:	e00d      	b.n	800369e <__gethex+0x26e>
 8003682:	9b05      	ldr	r3, [sp, #20]
 8003684:	9a08      	ldr	r2, [sp, #32]
 8003686:	4413      	add	r3, r2
 8003688:	42bb      	cmp	r3, r7
 800368a:	d3e0      	bcc.n	800364e <__gethex+0x21e>
 800368c:	4618      	mov	r0, r3
 800368e:	4652      	mov	r2, sl
 8003690:	9903      	ldr	r1, [sp, #12]
 8003692:	9309      	str	r3, [sp, #36]	; 0x24
 8003694:	f000 ff20 	bl	80044d8 <strncmp>
 8003698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800369a:	2800      	cmp	r0, #0
 800369c:	d1d7      	bne.n	800364e <__gethex+0x21e>
 800369e:	461e      	mov	r6, r3
 80036a0:	e78c      	b.n	80035bc <__gethex+0x18c>
 80036a2:	f04f 0a03 	mov.w	sl, #3
 80036a6:	e7b9      	b.n	800361c <__gethex+0x1ec>
 80036a8:	da09      	bge.n	80036be <__gethex+0x28e>
 80036aa:	1bf7      	subs	r7, r6, r7
 80036ac:	4621      	mov	r1, r4
 80036ae:	463a      	mov	r2, r7
 80036b0:	9802      	ldr	r0, [sp, #8]
 80036b2:	f000 fc33 	bl	8003f1c <__lshift>
 80036b6:	4604      	mov	r4, r0
 80036b8:	1bed      	subs	r5, r5, r7
 80036ba:	f100 0914 	add.w	r9, r0, #20
 80036be:	f04f 0a00 	mov.w	sl, #0
 80036c2:	e7b0      	b.n	8003626 <__gethex+0x1f6>
 80036c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80036c8:	42a8      	cmp	r0, r5
 80036ca:	dd71      	ble.n	80037b0 <__gethex+0x380>
 80036cc:	1b45      	subs	r5, r0, r5
 80036ce:	42ae      	cmp	r6, r5
 80036d0:	dc34      	bgt.n	800373c <__gethex+0x30c>
 80036d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d028      	beq.n	800372c <__gethex+0x2fc>
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d02a      	beq.n	8003734 <__gethex+0x304>
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d115      	bne.n	800370e <__gethex+0x2de>
 80036e2:	42ae      	cmp	r6, r5
 80036e4:	d113      	bne.n	800370e <__gethex+0x2de>
 80036e6:	2e01      	cmp	r6, #1
 80036e8:	d10b      	bne.n	8003702 <__gethex+0x2d2>
 80036ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80036ee:	9a06      	ldr	r2, [sp, #24]
 80036f0:	2762      	movs	r7, #98	; 0x62
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	2301      	movs	r3, #1
 80036f6:	6123      	str	r3, [r4, #16]
 80036f8:	f8c9 3000 	str.w	r3, [r9]
 80036fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80036fe:	601c      	str	r4, [r3, #0]
 8003700:	e728      	b.n	8003554 <__gethex+0x124>
 8003702:	4620      	mov	r0, r4
 8003704:	1e71      	subs	r1, r6, #1
 8003706:	f000 fe48 	bl	800439a <__any_on>
 800370a:	2800      	cmp	r0, #0
 800370c:	d1ed      	bne.n	80036ea <__gethex+0x2ba>
 800370e:	4621      	mov	r1, r4
 8003710:	9802      	ldr	r0, [sp, #8]
 8003712:	f000 f9eb 	bl	8003aec <_Bfree>
 8003716:	2300      	movs	r3, #0
 8003718:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800371a:	2750      	movs	r7, #80	; 0x50
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	e719      	b.n	8003554 <__gethex+0x124>
 8003720:	08005604 	.word	0x08005604
 8003724:	08005589 	.word	0x08005589
 8003728:	0800559a 	.word	0x0800559a
 800372c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1ed      	bne.n	800370e <__gethex+0x2de>
 8003732:	e7da      	b.n	80036ea <__gethex+0x2ba>
 8003734:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1d7      	bne.n	80036ea <__gethex+0x2ba>
 800373a:	e7e8      	b.n	800370e <__gethex+0x2de>
 800373c:	1e6f      	subs	r7, r5, #1
 800373e:	f1ba 0f00 	cmp.w	sl, #0
 8003742:	d132      	bne.n	80037aa <__gethex+0x37a>
 8003744:	b127      	cbz	r7, 8003750 <__gethex+0x320>
 8003746:	4639      	mov	r1, r7
 8003748:	4620      	mov	r0, r4
 800374a:	f000 fe26 	bl	800439a <__any_on>
 800374e:	4682      	mov	sl, r0
 8003750:	2101      	movs	r1, #1
 8003752:	117b      	asrs	r3, r7, #5
 8003754:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003758:	f007 071f 	and.w	r7, r7, #31
 800375c:	fa01 f707 	lsl.w	r7, r1, r7
 8003760:	421f      	tst	r7, r3
 8003762:	f04f 0702 	mov.w	r7, #2
 8003766:	4629      	mov	r1, r5
 8003768:	4620      	mov	r0, r4
 800376a:	bf18      	it	ne
 800376c:	f04a 0a02 	orrne.w	sl, sl, #2
 8003770:	1b76      	subs	r6, r6, r5
 8003772:	f7ff fdf5 	bl	8003360 <rshift>
 8003776:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800377a:	f1ba 0f00 	cmp.w	sl, #0
 800377e:	d048      	beq.n	8003812 <__gethex+0x3e2>
 8003780:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d015      	beq.n	80037b4 <__gethex+0x384>
 8003788:	2b03      	cmp	r3, #3
 800378a:	d017      	beq.n	80037bc <__gethex+0x38c>
 800378c:	2b01      	cmp	r3, #1
 800378e:	d109      	bne.n	80037a4 <__gethex+0x374>
 8003790:	f01a 0f02 	tst.w	sl, #2
 8003794:	d006      	beq.n	80037a4 <__gethex+0x374>
 8003796:	f8d9 0000 	ldr.w	r0, [r9]
 800379a:	ea4a 0a00 	orr.w	sl, sl, r0
 800379e:	f01a 0f01 	tst.w	sl, #1
 80037a2:	d10e      	bne.n	80037c2 <__gethex+0x392>
 80037a4:	f047 0710 	orr.w	r7, r7, #16
 80037a8:	e033      	b.n	8003812 <__gethex+0x3e2>
 80037aa:	f04f 0a01 	mov.w	sl, #1
 80037ae:	e7cf      	b.n	8003750 <__gethex+0x320>
 80037b0:	2701      	movs	r7, #1
 80037b2:	e7e2      	b.n	800377a <__gethex+0x34a>
 80037b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80037b6:	f1c3 0301 	rsb	r3, r3, #1
 80037ba:	9315      	str	r3, [sp, #84]	; 0x54
 80037bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <__gethex+0x374>
 80037c2:	f04f 0c00 	mov.w	ip, #0
 80037c6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80037ca:	f104 0314 	add.w	r3, r4, #20
 80037ce:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80037d2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80037dc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80037e0:	d01c      	beq.n	800381c <__gethex+0x3ec>
 80037e2:	3201      	adds	r2, #1
 80037e4:	6002      	str	r2, [r0, #0]
 80037e6:	2f02      	cmp	r7, #2
 80037e8:	f104 0314 	add.w	r3, r4, #20
 80037ec:	d13d      	bne.n	800386a <__gethex+0x43a>
 80037ee:	f8d8 2000 	ldr.w	r2, [r8]
 80037f2:	3a01      	subs	r2, #1
 80037f4:	42b2      	cmp	r2, r6
 80037f6:	d10a      	bne.n	800380e <__gethex+0x3de>
 80037f8:	2201      	movs	r2, #1
 80037fa:	1171      	asrs	r1, r6, #5
 80037fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003800:	f006 061f 	and.w	r6, r6, #31
 8003804:	fa02 f606 	lsl.w	r6, r2, r6
 8003808:	421e      	tst	r6, r3
 800380a:	bf18      	it	ne
 800380c:	4617      	movne	r7, r2
 800380e:	f047 0720 	orr.w	r7, r7, #32
 8003812:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003814:	601c      	str	r4, [r3, #0]
 8003816:	9b06      	ldr	r3, [sp, #24]
 8003818:	601d      	str	r5, [r3, #0]
 800381a:	e69b      	b.n	8003554 <__gethex+0x124>
 800381c:	4299      	cmp	r1, r3
 800381e:	f843 cc04 	str.w	ip, [r3, #-4]
 8003822:	d8d8      	bhi.n	80037d6 <__gethex+0x3a6>
 8003824:	68a3      	ldr	r3, [r4, #8]
 8003826:	459b      	cmp	fp, r3
 8003828:	db17      	blt.n	800385a <__gethex+0x42a>
 800382a:	6861      	ldr	r1, [r4, #4]
 800382c:	9802      	ldr	r0, [sp, #8]
 800382e:	3101      	adds	r1, #1
 8003830:	f000 f91c 	bl	8003a6c <_Balloc>
 8003834:	4681      	mov	r9, r0
 8003836:	b918      	cbnz	r0, 8003840 <__gethex+0x410>
 8003838:	4602      	mov	r2, r0
 800383a:	2184      	movs	r1, #132	; 0x84
 800383c:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <__gethex+0x474>)
 800383e:	e6ac      	b.n	800359a <__gethex+0x16a>
 8003840:	6922      	ldr	r2, [r4, #16]
 8003842:	f104 010c 	add.w	r1, r4, #12
 8003846:	3202      	adds	r2, #2
 8003848:	0092      	lsls	r2, r2, #2
 800384a:	300c      	adds	r0, #12
 800384c:	f000 f900 	bl	8003a50 <memcpy>
 8003850:	4621      	mov	r1, r4
 8003852:	9802      	ldr	r0, [sp, #8]
 8003854:	f000 f94a 	bl	8003aec <_Bfree>
 8003858:	464c      	mov	r4, r9
 800385a:	6923      	ldr	r3, [r4, #16]
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	6122      	str	r2, [r4, #16]
 8003860:	2201      	movs	r2, #1
 8003862:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003866:	615a      	str	r2, [r3, #20]
 8003868:	e7bd      	b.n	80037e6 <__gethex+0x3b6>
 800386a:	6922      	ldr	r2, [r4, #16]
 800386c:	455a      	cmp	r2, fp
 800386e:	dd0b      	ble.n	8003888 <__gethex+0x458>
 8003870:	2101      	movs	r1, #1
 8003872:	4620      	mov	r0, r4
 8003874:	f7ff fd74 	bl	8003360 <rshift>
 8003878:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800387c:	3501      	adds	r5, #1
 800387e:	42ab      	cmp	r3, r5
 8003880:	f6ff aed5 	blt.w	800362e <__gethex+0x1fe>
 8003884:	2701      	movs	r7, #1
 8003886:	e7c2      	b.n	800380e <__gethex+0x3de>
 8003888:	f016 061f 	ands.w	r6, r6, #31
 800388c:	d0fa      	beq.n	8003884 <__gethex+0x454>
 800388e:	449a      	add	sl, r3
 8003890:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8003894:	f000 f9e0 	bl	8003c58 <__hi0bits>
 8003898:	f1c6 0620 	rsb	r6, r6, #32
 800389c:	42b0      	cmp	r0, r6
 800389e:	dbe7      	blt.n	8003870 <__gethex+0x440>
 80038a0:	e7f0      	b.n	8003884 <__gethex+0x454>
 80038a2:	bf00      	nop
 80038a4:	08005589 	.word	0x08005589

080038a8 <L_shift>:
 80038a8:	f1c2 0208 	rsb	r2, r2, #8
 80038ac:	0092      	lsls	r2, r2, #2
 80038ae:	b570      	push	{r4, r5, r6, lr}
 80038b0:	f1c2 0620 	rsb	r6, r2, #32
 80038b4:	6843      	ldr	r3, [r0, #4]
 80038b6:	6804      	ldr	r4, [r0, #0]
 80038b8:	fa03 f506 	lsl.w	r5, r3, r6
 80038bc:	432c      	orrs	r4, r5
 80038be:	40d3      	lsrs	r3, r2
 80038c0:	6004      	str	r4, [r0, #0]
 80038c2:	f840 3f04 	str.w	r3, [r0, #4]!
 80038c6:	4288      	cmp	r0, r1
 80038c8:	d3f4      	bcc.n	80038b4 <L_shift+0xc>
 80038ca:	bd70      	pop	{r4, r5, r6, pc}

080038cc <__match>:
 80038cc:	b530      	push	{r4, r5, lr}
 80038ce:	6803      	ldr	r3, [r0, #0]
 80038d0:	3301      	adds	r3, #1
 80038d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038d6:	b914      	cbnz	r4, 80038de <__match+0x12>
 80038d8:	6003      	str	r3, [r0, #0]
 80038da:	2001      	movs	r0, #1
 80038dc:	bd30      	pop	{r4, r5, pc}
 80038de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038e2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80038e6:	2d19      	cmp	r5, #25
 80038e8:	bf98      	it	ls
 80038ea:	3220      	addls	r2, #32
 80038ec:	42a2      	cmp	r2, r4
 80038ee:	d0f0      	beq.n	80038d2 <__match+0x6>
 80038f0:	2000      	movs	r0, #0
 80038f2:	e7f3      	b.n	80038dc <__match+0x10>

080038f4 <__hexnan>:
 80038f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f8:	2500      	movs	r5, #0
 80038fa:	680b      	ldr	r3, [r1, #0]
 80038fc:	4682      	mov	sl, r0
 80038fe:	115e      	asrs	r6, r3, #5
 8003900:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003904:	f013 031f 	ands.w	r3, r3, #31
 8003908:	bf18      	it	ne
 800390a:	3604      	addne	r6, #4
 800390c:	1f37      	subs	r7, r6, #4
 800390e:	4690      	mov	r8, r2
 8003910:	46b9      	mov	r9, r7
 8003912:	463c      	mov	r4, r7
 8003914:	46ab      	mov	fp, r5
 8003916:	b087      	sub	sp, #28
 8003918:	6801      	ldr	r1, [r0, #0]
 800391a:	9301      	str	r3, [sp, #4]
 800391c:	f846 5c04 	str.w	r5, [r6, #-4]
 8003920:	9502      	str	r5, [sp, #8]
 8003922:	784a      	ldrb	r2, [r1, #1]
 8003924:	1c4b      	adds	r3, r1, #1
 8003926:	9303      	str	r3, [sp, #12]
 8003928:	b342      	cbz	r2, 800397c <__hexnan+0x88>
 800392a:	4610      	mov	r0, r2
 800392c:	9105      	str	r1, [sp, #20]
 800392e:	9204      	str	r2, [sp, #16]
 8003930:	f7ff fd69 	bl	8003406 <__hexdig_fun>
 8003934:	2800      	cmp	r0, #0
 8003936:	d14f      	bne.n	80039d8 <__hexnan+0xe4>
 8003938:	9a04      	ldr	r2, [sp, #16]
 800393a:	9905      	ldr	r1, [sp, #20]
 800393c:	2a20      	cmp	r2, #32
 800393e:	d818      	bhi.n	8003972 <__hexnan+0x7e>
 8003940:	9b02      	ldr	r3, [sp, #8]
 8003942:	459b      	cmp	fp, r3
 8003944:	dd13      	ble.n	800396e <__hexnan+0x7a>
 8003946:	454c      	cmp	r4, r9
 8003948:	d206      	bcs.n	8003958 <__hexnan+0x64>
 800394a:	2d07      	cmp	r5, #7
 800394c:	dc04      	bgt.n	8003958 <__hexnan+0x64>
 800394e:	462a      	mov	r2, r5
 8003950:	4649      	mov	r1, r9
 8003952:	4620      	mov	r0, r4
 8003954:	f7ff ffa8 	bl	80038a8 <L_shift>
 8003958:	4544      	cmp	r4, r8
 800395a:	d950      	bls.n	80039fe <__hexnan+0x10a>
 800395c:	2300      	movs	r3, #0
 800395e:	f1a4 0904 	sub.w	r9, r4, #4
 8003962:	f844 3c04 	str.w	r3, [r4, #-4]
 8003966:	461d      	mov	r5, r3
 8003968:	464c      	mov	r4, r9
 800396a:	f8cd b008 	str.w	fp, [sp, #8]
 800396e:	9903      	ldr	r1, [sp, #12]
 8003970:	e7d7      	b.n	8003922 <__hexnan+0x2e>
 8003972:	2a29      	cmp	r2, #41	; 0x29
 8003974:	d156      	bne.n	8003a24 <__hexnan+0x130>
 8003976:	3102      	adds	r1, #2
 8003978:	f8ca 1000 	str.w	r1, [sl]
 800397c:	f1bb 0f00 	cmp.w	fp, #0
 8003980:	d050      	beq.n	8003a24 <__hexnan+0x130>
 8003982:	454c      	cmp	r4, r9
 8003984:	d206      	bcs.n	8003994 <__hexnan+0xa0>
 8003986:	2d07      	cmp	r5, #7
 8003988:	dc04      	bgt.n	8003994 <__hexnan+0xa0>
 800398a:	462a      	mov	r2, r5
 800398c:	4649      	mov	r1, r9
 800398e:	4620      	mov	r0, r4
 8003990:	f7ff ff8a 	bl	80038a8 <L_shift>
 8003994:	4544      	cmp	r4, r8
 8003996:	d934      	bls.n	8003a02 <__hexnan+0x10e>
 8003998:	4623      	mov	r3, r4
 800399a:	f1a8 0204 	sub.w	r2, r8, #4
 800399e:	f853 1b04 	ldr.w	r1, [r3], #4
 80039a2:	429f      	cmp	r7, r3
 80039a4:	f842 1f04 	str.w	r1, [r2, #4]!
 80039a8:	d2f9      	bcs.n	800399e <__hexnan+0xaa>
 80039aa:	1b3b      	subs	r3, r7, r4
 80039ac:	f023 0303 	bic.w	r3, r3, #3
 80039b0:	3304      	adds	r3, #4
 80039b2:	3401      	adds	r4, #1
 80039b4:	3e03      	subs	r6, #3
 80039b6:	42b4      	cmp	r4, r6
 80039b8:	bf88      	it	hi
 80039ba:	2304      	movhi	r3, #4
 80039bc:	2200      	movs	r2, #0
 80039be:	4443      	add	r3, r8
 80039c0:	f843 2b04 	str.w	r2, [r3], #4
 80039c4:	429f      	cmp	r7, r3
 80039c6:	d2fb      	bcs.n	80039c0 <__hexnan+0xcc>
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	b91b      	cbnz	r3, 80039d4 <__hexnan+0xe0>
 80039cc:	4547      	cmp	r7, r8
 80039ce:	d127      	bne.n	8003a20 <__hexnan+0x12c>
 80039d0:	2301      	movs	r3, #1
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	2005      	movs	r0, #5
 80039d6:	e026      	b.n	8003a26 <__hexnan+0x132>
 80039d8:	3501      	adds	r5, #1
 80039da:	2d08      	cmp	r5, #8
 80039dc:	f10b 0b01 	add.w	fp, fp, #1
 80039e0:	dd06      	ble.n	80039f0 <__hexnan+0xfc>
 80039e2:	4544      	cmp	r4, r8
 80039e4:	d9c3      	bls.n	800396e <__hexnan+0x7a>
 80039e6:	2300      	movs	r3, #0
 80039e8:	2501      	movs	r5, #1
 80039ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80039ee:	3c04      	subs	r4, #4
 80039f0:	6822      	ldr	r2, [r4, #0]
 80039f2:	f000 000f 	and.w	r0, r0, #15
 80039f6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80039fa:	6022      	str	r2, [r4, #0]
 80039fc:	e7b7      	b.n	800396e <__hexnan+0x7a>
 80039fe:	2508      	movs	r5, #8
 8003a00:	e7b5      	b.n	800396e <__hexnan+0x7a>
 8003a02:	9b01      	ldr	r3, [sp, #4]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0df      	beq.n	80039c8 <__hexnan+0xd4>
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	f1c3 0320 	rsb	r3, r3, #32
 8003a10:	fa22 f303 	lsr.w	r3, r2, r3
 8003a14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8003a18:	401a      	ands	r2, r3
 8003a1a:	f846 2c04 	str.w	r2, [r6, #-4]
 8003a1e:	e7d3      	b.n	80039c8 <__hexnan+0xd4>
 8003a20:	3f04      	subs	r7, #4
 8003a22:	e7d1      	b.n	80039c8 <__hexnan+0xd4>
 8003a24:	2004      	movs	r0, #4
 8003a26:	b007      	add	sp, #28
 8003a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003a2c <__ascii_mbtowc>:
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	b901      	cbnz	r1, 8003a32 <__ascii_mbtowc+0x6>
 8003a30:	a901      	add	r1, sp, #4
 8003a32:	b142      	cbz	r2, 8003a46 <__ascii_mbtowc+0x1a>
 8003a34:	b14b      	cbz	r3, 8003a4a <__ascii_mbtowc+0x1e>
 8003a36:	7813      	ldrb	r3, [r2, #0]
 8003a38:	600b      	str	r3, [r1, #0]
 8003a3a:	7812      	ldrb	r2, [r2, #0]
 8003a3c:	1e10      	subs	r0, r2, #0
 8003a3e:	bf18      	it	ne
 8003a40:	2001      	movne	r0, #1
 8003a42:	b002      	add	sp, #8
 8003a44:	4770      	bx	lr
 8003a46:	4610      	mov	r0, r2
 8003a48:	e7fb      	b.n	8003a42 <__ascii_mbtowc+0x16>
 8003a4a:	f06f 0001 	mvn.w	r0, #1
 8003a4e:	e7f8      	b.n	8003a42 <__ascii_mbtowc+0x16>

08003a50 <memcpy>:
 8003a50:	440a      	add	r2, r1
 8003a52:	4291      	cmp	r1, r2
 8003a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a58:	d100      	bne.n	8003a5c <memcpy+0xc>
 8003a5a:	4770      	bx	lr
 8003a5c:	b510      	push	{r4, lr}
 8003a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a62:	4291      	cmp	r1, r2
 8003a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a68:	d1f9      	bne.n	8003a5e <memcpy+0xe>
 8003a6a:	bd10      	pop	{r4, pc}

08003a6c <_Balloc>:
 8003a6c:	b570      	push	{r4, r5, r6, lr}
 8003a6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a70:	4604      	mov	r4, r0
 8003a72:	460d      	mov	r5, r1
 8003a74:	b976      	cbnz	r6, 8003a94 <_Balloc+0x28>
 8003a76:	2010      	movs	r0, #16
 8003a78:	f000 fd7e 	bl	8004578 <malloc>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	6260      	str	r0, [r4, #36]	; 0x24
 8003a80:	b920      	cbnz	r0, 8003a8c <_Balloc+0x20>
 8003a82:	2166      	movs	r1, #102	; 0x66
 8003a84:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <_Balloc+0x78>)
 8003a86:	4818      	ldr	r0, [pc, #96]	; (8003ae8 <_Balloc+0x7c>)
 8003a88:	f000 fd46 	bl	8004518 <__assert_func>
 8003a8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003a90:	6006      	str	r6, [r0, #0]
 8003a92:	60c6      	str	r6, [r0, #12]
 8003a94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003a96:	68f3      	ldr	r3, [r6, #12]
 8003a98:	b183      	cbz	r3, 8003abc <_Balloc+0x50>
 8003a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003aa2:	b9b8      	cbnz	r0, 8003ad4 <_Balloc+0x68>
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	fa01 f605 	lsl.w	r6, r1, r5
 8003aaa:	1d72      	adds	r2, r6, #5
 8003aac:	4620      	mov	r0, r4
 8003aae:	0092      	lsls	r2, r2, #2
 8003ab0:	f000 fc94 	bl	80043dc <_calloc_r>
 8003ab4:	b160      	cbz	r0, 8003ad0 <_Balloc+0x64>
 8003ab6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003aba:	e00e      	b.n	8003ada <_Balloc+0x6e>
 8003abc:	2221      	movs	r2, #33	; 0x21
 8003abe:	2104      	movs	r1, #4
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f000 fc8b 	bl	80043dc <_calloc_r>
 8003ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ac8:	60f0      	str	r0, [r6, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1e4      	bne.n	8003a9a <_Balloc+0x2e>
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	bd70      	pop	{r4, r5, r6, pc}
 8003ad4:	6802      	ldr	r2, [r0, #0]
 8003ad6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003ada:	2300      	movs	r3, #0
 8003adc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003ae0:	e7f7      	b.n	8003ad2 <_Balloc+0x66>
 8003ae2:	bf00      	nop
 8003ae4:	08005618 	.word	0x08005618
 8003ae8:	0800562f 	.word	0x0800562f

08003aec <_Bfree>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003af0:	4605      	mov	r5, r0
 8003af2:	460c      	mov	r4, r1
 8003af4:	b976      	cbnz	r6, 8003b14 <_Bfree+0x28>
 8003af6:	2010      	movs	r0, #16
 8003af8:	f000 fd3e 	bl	8004578 <malloc>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6268      	str	r0, [r5, #36]	; 0x24
 8003b00:	b920      	cbnz	r0, 8003b0c <_Bfree+0x20>
 8003b02:	218a      	movs	r1, #138	; 0x8a
 8003b04:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <_Bfree+0x3c>)
 8003b06:	4809      	ldr	r0, [pc, #36]	; (8003b2c <_Bfree+0x40>)
 8003b08:	f000 fd06 	bl	8004518 <__assert_func>
 8003b0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b10:	6006      	str	r6, [r0, #0]
 8003b12:	60c6      	str	r6, [r0, #12]
 8003b14:	b13c      	cbz	r4, 8003b26 <_Bfree+0x3a>
 8003b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003b18:	6862      	ldr	r2, [r4, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b20:	6021      	str	r1, [r4, #0]
 8003b22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003b26:	bd70      	pop	{r4, r5, r6, pc}
 8003b28:	08005618 	.word	0x08005618
 8003b2c:	0800562f 	.word	0x0800562f

08003b30 <__multadd>:
 8003b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b34:	4698      	mov	r8, r3
 8003b36:	460c      	mov	r4, r1
 8003b38:	2300      	movs	r3, #0
 8003b3a:	690e      	ldr	r6, [r1, #16]
 8003b3c:	4607      	mov	r7, r0
 8003b3e:	f101 0014 	add.w	r0, r1, #20
 8003b42:	6805      	ldr	r5, [r0, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	b2a9      	uxth	r1, r5
 8003b48:	fb02 8101 	mla	r1, r2, r1, r8
 8003b4c:	0c2d      	lsrs	r5, r5, #16
 8003b4e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003b52:	fb02 c505 	mla	r5, r2, r5, ip
 8003b56:	b289      	uxth	r1, r1
 8003b58:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003b5c:	429e      	cmp	r6, r3
 8003b5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003b62:	f840 1b04 	str.w	r1, [r0], #4
 8003b66:	dcec      	bgt.n	8003b42 <__multadd+0x12>
 8003b68:	f1b8 0f00 	cmp.w	r8, #0
 8003b6c:	d022      	beq.n	8003bb4 <__multadd+0x84>
 8003b6e:	68a3      	ldr	r3, [r4, #8]
 8003b70:	42b3      	cmp	r3, r6
 8003b72:	dc19      	bgt.n	8003ba8 <__multadd+0x78>
 8003b74:	6861      	ldr	r1, [r4, #4]
 8003b76:	4638      	mov	r0, r7
 8003b78:	3101      	adds	r1, #1
 8003b7a:	f7ff ff77 	bl	8003a6c <_Balloc>
 8003b7e:	4605      	mov	r5, r0
 8003b80:	b928      	cbnz	r0, 8003b8e <__multadd+0x5e>
 8003b82:	4602      	mov	r2, r0
 8003b84:	21b5      	movs	r1, #181	; 0xb5
 8003b86:	4b0d      	ldr	r3, [pc, #52]	; (8003bbc <__multadd+0x8c>)
 8003b88:	480d      	ldr	r0, [pc, #52]	; (8003bc0 <__multadd+0x90>)
 8003b8a:	f000 fcc5 	bl	8004518 <__assert_func>
 8003b8e:	6922      	ldr	r2, [r4, #16]
 8003b90:	f104 010c 	add.w	r1, r4, #12
 8003b94:	3202      	adds	r2, #2
 8003b96:	0092      	lsls	r2, r2, #2
 8003b98:	300c      	adds	r0, #12
 8003b9a:	f7ff ff59 	bl	8003a50 <memcpy>
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	4638      	mov	r0, r7
 8003ba2:	f7ff ffa3 	bl	8003aec <_Bfree>
 8003ba6:	462c      	mov	r4, r5
 8003ba8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003bac:	3601      	adds	r6, #1
 8003bae:	f8c3 8014 	str.w	r8, [r3, #20]
 8003bb2:	6126      	str	r6, [r4, #16]
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bba:	bf00      	nop
 8003bbc:	08005589 	.word	0x08005589
 8003bc0:	0800562f 	.word	0x0800562f

08003bc4 <__s2b>:
 8003bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bc8:	4615      	mov	r5, r2
 8003bca:	2209      	movs	r2, #9
 8003bcc:	461f      	mov	r7, r3
 8003bce:	3308      	adds	r3, #8
 8003bd0:	460c      	mov	r4, r1
 8003bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bd6:	4606      	mov	r6, r0
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2100      	movs	r1, #0
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	db09      	blt.n	8003bf4 <__s2b+0x30>
 8003be0:	4630      	mov	r0, r6
 8003be2:	f7ff ff43 	bl	8003a6c <_Balloc>
 8003be6:	b940      	cbnz	r0, 8003bfa <__s2b+0x36>
 8003be8:	4602      	mov	r2, r0
 8003bea:	21ce      	movs	r1, #206	; 0xce
 8003bec:	4b18      	ldr	r3, [pc, #96]	; (8003c50 <__s2b+0x8c>)
 8003bee:	4819      	ldr	r0, [pc, #100]	; (8003c54 <__s2b+0x90>)
 8003bf0:	f000 fc92 	bl	8004518 <__assert_func>
 8003bf4:	0052      	lsls	r2, r2, #1
 8003bf6:	3101      	adds	r1, #1
 8003bf8:	e7f0      	b.n	8003bdc <__s2b+0x18>
 8003bfa:	9b08      	ldr	r3, [sp, #32]
 8003bfc:	2d09      	cmp	r5, #9
 8003bfe:	6143      	str	r3, [r0, #20]
 8003c00:	f04f 0301 	mov.w	r3, #1
 8003c04:	6103      	str	r3, [r0, #16]
 8003c06:	dd16      	ble.n	8003c36 <__s2b+0x72>
 8003c08:	f104 0909 	add.w	r9, r4, #9
 8003c0c:	46c8      	mov	r8, r9
 8003c0e:	442c      	add	r4, r5
 8003c10:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003c14:	4601      	mov	r1, r0
 8003c16:	220a      	movs	r2, #10
 8003c18:	4630      	mov	r0, r6
 8003c1a:	3b30      	subs	r3, #48	; 0x30
 8003c1c:	f7ff ff88 	bl	8003b30 <__multadd>
 8003c20:	45a0      	cmp	r8, r4
 8003c22:	d1f5      	bne.n	8003c10 <__s2b+0x4c>
 8003c24:	f1a5 0408 	sub.w	r4, r5, #8
 8003c28:	444c      	add	r4, r9
 8003c2a:	1b2d      	subs	r5, r5, r4
 8003c2c:	1963      	adds	r3, r4, r5
 8003c2e:	42bb      	cmp	r3, r7
 8003c30:	db04      	blt.n	8003c3c <__s2b+0x78>
 8003c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c36:	2509      	movs	r5, #9
 8003c38:	340a      	adds	r4, #10
 8003c3a:	e7f6      	b.n	8003c2a <__s2b+0x66>
 8003c3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003c40:	4601      	mov	r1, r0
 8003c42:	220a      	movs	r2, #10
 8003c44:	4630      	mov	r0, r6
 8003c46:	3b30      	subs	r3, #48	; 0x30
 8003c48:	f7ff ff72 	bl	8003b30 <__multadd>
 8003c4c:	e7ee      	b.n	8003c2c <__s2b+0x68>
 8003c4e:	bf00      	nop
 8003c50:	08005589 	.word	0x08005589
 8003c54:	0800562f 	.word	0x0800562f

08003c58 <__hi0bits>:
 8003c58:	0c02      	lsrs	r2, r0, #16
 8003c5a:	0412      	lsls	r2, r2, #16
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	b9ca      	cbnz	r2, 8003c94 <__hi0bits+0x3c>
 8003c60:	0403      	lsls	r3, r0, #16
 8003c62:	2010      	movs	r0, #16
 8003c64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003c68:	bf04      	itt	eq
 8003c6a:	021b      	lsleq	r3, r3, #8
 8003c6c:	3008      	addeq	r0, #8
 8003c6e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003c72:	bf04      	itt	eq
 8003c74:	011b      	lsleq	r3, r3, #4
 8003c76:	3004      	addeq	r0, #4
 8003c78:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003c7c:	bf04      	itt	eq
 8003c7e:	009b      	lsleq	r3, r3, #2
 8003c80:	3002      	addeq	r0, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	db05      	blt.n	8003c92 <__hi0bits+0x3a>
 8003c86:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003c8a:	f100 0001 	add.w	r0, r0, #1
 8003c8e:	bf08      	it	eq
 8003c90:	2020      	moveq	r0, #32
 8003c92:	4770      	bx	lr
 8003c94:	2000      	movs	r0, #0
 8003c96:	e7e5      	b.n	8003c64 <__hi0bits+0xc>

08003c98 <__lo0bits>:
 8003c98:	6803      	ldr	r3, [r0, #0]
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	f013 0007 	ands.w	r0, r3, #7
 8003ca0:	d00b      	beq.n	8003cba <__lo0bits+0x22>
 8003ca2:	07d9      	lsls	r1, r3, #31
 8003ca4:	d422      	bmi.n	8003cec <__lo0bits+0x54>
 8003ca6:	0798      	lsls	r0, r3, #30
 8003ca8:	bf49      	itett	mi
 8003caa:	085b      	lsrmi	r3, r3, #1
 8003cac:	089b      	lsrpl	r3, r3, #2
 8003cae:	2001      	movmi	r0, #1
 8003cb0:	6013      	strmi	r3, [r2, #0]
 8003cb2:	bf5c      	itt	pl
 8003cb4:	2002      	movpl	r0, #2
 8003cb6:	6013      	strpl	r3, [r2, #0]
 8003cb8:	4770      	bx	lr
 8003cba:	b299      	uxth	r1, r3
 8003cbc:	b909      	cbnz	r1, 8003cc2 <__lo0bits+0x2a>
 8003cbe:	2010      	movs	r0, #16
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003cc6:	bf04      	itt	eq
 8003cc8:	0a1b      	lsreq	r3, r3, #8
 8003cca:	3008      	addeq	r0, #8
 8003ccc:	0719      	lsls	r1, r3, #28
 8003cce:	bf04      	itt	eq
 8003cd0:	091b      	lsreq	r3, r3, #4
 8003cd2:	3004      	addeq	r0, #4
 8003cd4:	0799      	lsls	r1, r3, #30
 8003cd6:	bf04      	itt	eq
 8003cd8:	089b      	lsreq	r3, r3, #2
 8003cda:	3002      	addeq	r0, #2
 8003cdc:	07d9      	lsls	r1, r3, #31
 8003cde:	d403      	bmi.n	8003ce8 <__lo0bits+0x50>
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	f100 0001 	add.w	r0, r0, #1
 8003ce6:	d003      	beq.n	8003cf0 <__lo0bits+0x58>
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4770      	bx	lr
 8003cec:	2000      	movs	r0, #0
 8003cee:	4770      	bx	lr
 8003cf0:	2020      	movs	r0, #32
 8003cf2:	4770      	bx	lr

08003cf4 <__i2b>:
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	f7ff feb7 	bl	8003a6c <_Balloc>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	b928      	cbnz	r0, 8003d0e <__i2b+0x1a>
 8003d02:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003d06:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <__i2b+0x24>)
 8003d08:	4804      	ldr	r0, [pc, #16]	; (8003d1c <__i2b+0x28>)
 8003d0a:	f000 fc05 	bl	8004518 <__assert_func>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	6144      	str	r4, [r0, #20]
 8003d12:	6103      	str	r3, [r0, #16]
 8003d14:	bd10      	pop	{r4, pc}
 8003d16:	bf00      	nop
 8003d18:	08005589 	.word	0x08005589
 8003d1c:	0800562f 	.word	0x0800562f

08003d20 <__multiply>:
 8003d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d24:	4614      	mov	r4, r2
 8003d26:	690a      	ldr	r2, [r1, #16]
 8003d28:	6923      	ldr	r3, [r4, #16]
 8003d2a:	460d      	mov	r5, r1
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	bfbe      	ittt	lt
 8003d30:	460b      	movlt	r3, r1
 8003d32:	4625      	movlt	r5, r4
 8003d34:	461c      	movlt	r4, r3
 8003d36:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003d3a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003d3e:	68ab      	ldr	r3, [r5, #8]
 8003d40:	6869      	ldr	r1, [r5, #4]
 8003d42:	eb0a 0709 	add.w	r7, sl, r9
 8003d46:	42bb      	cmp	r3, r7
 8003d48:	b085      	sub	sp, #20
 8003d4a:	bfb8      	it	lt
 8003d4c:	3101      	addlt	r1, #1
 8003d4e:	f7ff fe8d 	bl	8003a6c <_Balloc>
 8003d52:	b930      	cbnz	r0, 8003d62 <__multiply+0x42>
 8003d54:	4602      	mov	r2, r0
 8003d56:	f240 115d 	movw	r1, #349	; 0x15d
 8003d5a:	4b41      	ldr	r3, [pc, #260]	; (8003e60 <__multiply+0x140>)
 8003d5c:	4841      	ldr	r0, [pc, #260]	; (8003e64 <__multiply+0x144>)
 8003d5e:	f000 fbdb 	bl	8004518 <__assert_func>
 8003d62:	f100 0614 	add.w	r6, r0, #20
 8003d66:	4633      	mov	r3, r6
 8003d68:	2200      	movs	r2, #0
 8003d6a:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8003d6e:	4543      	cmp	r3, r8
 8003d70:	d31e      	bcc.n	8003db0 <__multiply+0x90>
 8003d72:	f105 0c14 	add.w	ip, r5, #20
 8003d76:	f104 0314 	add.w	r3, r4, #20
 8003d7a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003d7e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8003d82:	9202      	str	r2, [sp, #8]
 8003d84:	ebac 0205 	sub.w	r2, ip, r5
 8003d88:	3a15      	subs	r2, #21
 8003d8a:	f022 0203 	bic.w	r2, r2, #3
 8003d8e:	3204      	adds	r2, #4
 8003d90:	f105 0115 	add.w	r1, r5, #21
 8003d94:	458c      	cmp	ip, r1
 8003d96:	bf38      	it	cc
 8003d98:	2204      	movcc	r2, #4
 8003d9a:	9201      	str	r2, [sp, #4]
 8003d9c:	9a02      	ldr	r2, [sp, #8]
 8003d9e:	9303      	str	r3, [sp, #12]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d808      	bhi.n	8003db6 <__multiply+0x96>
 8003da4:	2f00      	cmp	r7, #0
 8003da6:	dc55      	bgt.n	8003e54 <__multiply+0x134>
 8003da8:	6107      	str	r7, [r0, #16]
 8003daa:	b005      	add	sp, #20
 8003dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003db0:	f843 2b04 	str.w	r2, [r3], #4
 8003db4:	e7db      	b.n	8003d6e <__multiply+0x4e>
 8003db6:	f8b3 a000 	ldrh.w	sl, [r3]
 8003dba:	f1ba 0f00 	cmp.w	sl, #0
 8003dbe:	d020      	beq.n	8003e02 <__multiply+0xe2>
 8003dc0:	46b1      	mov	r9, r6
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f105 0e14 	add.w	lr, r5, #20
 8003dc8:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003dcc:	f8d9 b000 	ldr.w	fp, [r9]
 8003dd0:	b2a1      	uxth	r1, r4
 8003dd2:	fa1f fb8b 	uxth.w	fp, fp
 8003dd6:	fb0a b101 	mla	r1, sl, r1, fp
 8003dda:	4411      	add	r1, r2
 8003ddc:	f8d9 2000 	ldr.w	r2, [r9]
 8003de0:	0c24      	lsrs	r4, r4, #16
 8003de2:	0c12      	lsrs	r2, r2, #16
 8003de4:	fb0a 2404 	mla	r4, sl, r4, r2
 8003de8:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8003dec:	b289      	uxth	r1, r1
 8003dee:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003df2:	45f4      	cmp	ip, lr
 8003df4:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8003df8:	f849 1b04 	str.w	r1, [r9], #4
 8003dfc:	d8e4      	bhi.n	8003dc8 <__multiply+0xa8>
 8003dfe:	9901      	ldr	r1, [sp, #4]
 8003e00:	5072      	str	r2, [r6, r1]
 8003e02:	9a03      	ldr	r2, [sp, #12]
 8003e04:	3304      	adds	r3, #4
 8003e06:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003e0a:	f1b9 0f00 	cmp.w	r9, #0
 8003e0e:	d01f      	beq.n	8003e50 <__multiply+0x130>
 8003e10:	46b6      	mov	lr, r6
 8003e12:	f04f 0a00 	mov.w	sl, #0
 8003e16:	6834      	ldr	r4, [r6, #0]
 8003e18:	f105 0114 	add.w	r1, r5, #20
 8003e1c:	880a      	ldrh	r2, [r1, #0]
 8003e1e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003e22:	b2a4      	uxth	r4, r4
 8003e24:	fb09 b202 	mla	r2, r9, r2, fp
 8003e28:	4492      	add	sl, r2
 8003e2a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003e2e:	f84e 4b04 	str.w	r4, [lr], #4
 8003e32:	f851 4b04 	ldr.w	r4, [r1], #4
 8003e36:	f8be 2000 	ldrh.w	r2, [lr]
 8003e3a:	0c24      	lsrs	r4, r4, #16
 8003e3c:	fb09 2404 	mla	r4, r9, r4, r2
 8003e40:	458c      	cmp	ip, r1
 8003e42:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8003e46:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003e4a:	d8e7      	bhi.n	8003e1c <__multiply+0xfc>
 8003e4c:	9a01      	ldr	r2, [sp, #4]
 8003e4e:	50b4      	str	r4, [r6, r2]
 8003e50:	3604      	adds	r6, #4
 8003e52:	e7a3      	b.n	8003d9c <__multiply+0x7c>
 8003e54:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1a5      	bne.n	8003da8 <__multiply+0x88>
 8003e5c:	3f01      	subs	r7, #1
 8003e5e:	e7a1      	b.n	8003da4 <__multiply+0x84>
 8003e60:	08005589 	.word	0x08005589
 8003e64:	0800562f 	.word	0x0800562f

08003e68 <__pow5mult>:
 8003e68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e6c:	4615      	mov	r5, r2
 8003e6e:	f012 0203 	ands.w	r2, r2, #3
 8003e72:	4606      	mov	r6, r0
 8003e74:	460f      	mov	r7, r1
 8003e76:	d007      	beq.n	8003e88 <__pow5mult+0x20>
 8003e78:	4c25      	ldr	r4, [pc, #148]	; (8003f10 <__pow5mult+0xa8>)
 8003e7a:	3a01      	subs	r2, #1
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e82:	f7ff fe55 	bl	8003b30 <__multadd>
 8003e86:	4607      	mov	r7, r0
 8003e88:	10ad      	asrs	r5, r5, #2
 8003e8a:	d03d      	beq.n	8003f08 <__pow5mult+0xa0>
 8003e8c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003e8e:	b97c      	cbnz	r4, 8003eb0 <__pow5mult+0x48>
 8003e90:	2010      	movs	r0, #16
 8003e92:	f000 fb71 	bl	8004578 <malloc>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6270      	str	r0, [r6, #36]	; 0x24
 8003e9a:	b928      	cbnz	r0, 8003ea8 <__pow5mult+0x40>
 8003e9c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003ea0:	4b1c      	ldr	r3, [pc, #112]	; (8003f14 <__pow5mult+0xac>)
 8003ea2:	481d      	ldr	r0, [pc, #116]	; (8003f18 <__pow5mult+0xb0>)
 8003ea4:	f000 fb38 	bl	8004518 <__assert_func>
 8003ea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003eac:	6004      	str	r4, [r0, #0]
 8003eae:	60c4      	str	r4, [r0, #12]
 8003eb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003eb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003eb8:	b94c      	cbnz	r4, 8003ece <__pow5mult+0x66>
 8003eba:	f240 2171 	movw	r1, #625	; 0x271
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	f7ff ff18 	bl	8003cf4 <__i2b>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ecc:	6003      	str	r3, [r0, #0]
 8003ece:	f04f 0900 	mov.w	r9, #0
 8003ed2:	07eb      	lsls	r3, r5, #31
 8003ed4:	d50a      	bpl.n	8003eec <__pow5mult+0x84>
 8003ed6:	4639      	mov	r1, r7
 8003ed8:	4622      	mov	r2, r4
 8003eda:	4630      	mov	r0, r6
 8003edc:	f7ff ff20 	bl	8003d20 <__multiply>
 8003ee0:	4680      	mov	r8, r0
 8003ee2:	4639      	mov	r1, r7
 8003ee4:	4630      	mov	r0, r6
 8003ee6:	f7ff fe01 	bl	8003aec <_Bfree>
 8003eea:	4647      	mov	r7, r8
 8003eec:	106d      	asrs	r5, r5, #1
 8003eee:	d00b      	beq.n	8003f08 <__pow5mult+0xa0>
 8003ef0:	6820      	ldr	r0, [r4, #0]
 8003ef2:	b938      	cbnz	r0, 8003f04 <__pow5mult+0x9c>
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	4630      	mov	r0, r6
 8003efa:	f7ff ff11 	bl	8003d20 <__multiply>
 8003efe:	6020      	str	r0, [r4, #0]
 8003f00:	f8c0 9000 	str.w	r9, [r0]
 8003f04:	4604      	mov	r4, r0
 8003f06:	e7e4      	b.n	8003ed2 <__pow5mult+0x6a>
 8003f08:	4638      	mov	r0, r7
 8003f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f0e:	bf00      	nop
 8003f10:	08005780 	.word	0x08005780
 8003f14:	08005618 	.word	0x08005618
 8003f18:	0800562f 	.word	0x0800562f

08003f1c <__lshift>:
 8003f1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f20:	460c      	mov	r4, r1
 8003f22:	4607      	mov	r7, r0
 8003f24:	4691      	mov	r9, r2
 8003f26:	6923      	ldr	r3, [r4, #16]
 8003f28:	6849      	ldr	r1, [r1, #4]
 8003f2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003f2e:	68a3      	ldr	r3, [r4, #8]
 8003f30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f34:	f108 0601 	add.w	r6, r8, #1
 8003f38:	42b3      	cmp	r3, r6
 8003f3a:	db0b      	blt.n	8003f54 <__lshift+0x38>
 8003f3c:	4638      	mov	r0, r7
 8003f3e:	f7ff fd95 	bl	8003a6c <_Balloc>
 8003f42:	4605      	mov	r5, r0
 8003f44:	b948      	cbnz	r0, 8003f5a <__lshift+0x3e>
 8003f46:	4602      	mov	r2, r0
 8003f48:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003f4c:	4b27      	ldr	r3, [pc, #156]	; (8003fec <__lshift+0xd0>)
 8003f4e:	4828      	ldr	r0, [pc, #160]	; (8003ff0 <__lshift+0xd4>)
 8003f50:	f000 fae2 	bl	8004518 <__assert_func>
 8003f54:	3101      	adds	r1, #1
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	e7ee      	b.n	8003f38 <__lshift+0x1c>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f100 0114 	add.w	r1, r0, #20
 8003f60:	f100 0210 	add.w	r2, r0, #16
 8003f64:	4618      	mov	r0, r3
 8003f66:	4553      	cmp	r3, sl
 8003f68:	db33      	blt.n	8003fd2 <__lshift+0xb6>
 8003f6a:	6920      	ldr	r0, [r4, #16]
 8003f6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f70:	f104 0314 	add.w	r3, r4, #20
 8003f74:	f019 091f 	ands.w	r9, r9, #31
 8003f78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003f7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003f80:	d02b      	beq.n	8003fda <__lshift+0xbe>
 8003f82:	468a      	mov	sl, r1
 8003f84:	2200      	movs	r2, #0
 8003f86:	f1c9 0e20 	rsb	lr, r9, #32
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	fa00 f009 	lsl.w	r0, r0, r9
 8003f90:	4302      	orrs	r2, r0
 8003f92:	f84a 2b04 	str.w	r2, [sl], #4
 8003f96:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f9a:	459c      	cmp	ip, r3
 8003f9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8003fa0:	d8f3      	bhi.n	8003f8a <__lshift+0x6e>
 8003fa2:	ebac 0304 	sub.w	r3, ip, r4
 8003fa6:	3b15      	subs	r3, #21
 8003fa8:	f023 0303 	bic.w	r3, r3, #3
 8003fac:	3304      	adds	r3, #4
 8003fae:	f104 0015 	add.w	r0, r4, #21
 8003fb2:	4584      	cmp	ip, r0
 8003fb4:	bf38      	it	cc
 8003fb6:	2304      	movcc	r3, #4
 8003fb8:	50ca      	str	r2, [r1, r3]
 8003fba:	b10a      	cbz	r2, 8003fc0 <__lshift+0xa4>
 8003fbc:	f108 0602 	add.w	r6, r8, #2
 8003fc0:	3e01      	subs	r6, #1
 8003fc2:	4638      	mov	r0, r7
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	612e      	str	r6, [r5, #16]
 8003fc8:	f7ff fd90 	bl	8003aec <_Bfree>
 8003fcc:	4628      	mov	r0, r5
 8003fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	e7c5      	b.n	8003f66 <__lshift+0x4a>
 8003fda:	3904      	subs	r1, #4
 8003fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fe0:	459c      	cmp	ip, r3
 8003fe2:	f841 2f04 	str.w	r2, [r1, #4]!
 8003fe6:	d8f9      	bhi.n	8003fdc <__lshift+0xc0>
 8003fe8:	e7ea      	b.n	8003fc0 <__lshift+0xa4>
 8003fea:	bf00      	nop
 8003fec:	08005589 	.word	0x08005589
 8003ff0:	0800562f 	.word	0x0800562f

08003ff4 <__mcmp>:
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	690a      	ldr	r2, [r1, #16]
 8003ff8:	6900      	ldr	r0, [r0, #16]
 8003ffa:	b530      	push	{r4, r5, lr}
 8003ffc:	1a80      	subs	r0, r0, r2
 8003ffe:	d10d      	bne.n	800401c <__mcmp+0x28>
 8004000:	3314      	adds	r3, #20
 8004002:	3114      	adds	r1, #20
 8004004:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004008:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800400c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004014:	4295      	cmp	r5, r2
 8004016:	d002      	beq.n	800401e <__mcmp+0x2a>
 8004018:	d304      	bcc.n	8004024 <__mcmp+0x30>
 800401a:	2001      	movs	r0, #1
 800401c:	bd30      	pop	{r4, r5, pc}
 800401e:	42a3      	cmp	r3, r4
 8004020:	d3f4      	bcc.n	800400c <__mcmp+0x18>
 8004022:	e7fb      	b.n	800401c <__mcmp+0x28>
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	e7f8      	b.n	800401c <__mcmp+0x28>
	...

0800402c <__mdiff>:
 800402c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004030:	460c      	mov	r4, r1
 8004032:	4606      	mov	r6, r0
 8004034:	4611      	mov	r1, r2
 8004036:	4620      	mov	r0, r4
 8004038:	4692      	mov	sl, r2
 800403a:	f7ff ffdb 	bl	8003ff4 <__mcmp>
 800403e:	1e05      	subs	r5, r0, #0
 8004040:	d111      	bne.n	8004066 <__mdiff+0x3a>
 8004042:	4629      	mov	r1, r5
 8004044:	4630      	mov	r0, r6
 8004046:	f7ff fd11 	bl	8003a6c <_Balloc>
 800404a:	4602      	mov	r2, r0
 800404c:	b928      	cbnz	r0, 800405a <__mdiff+0x2e>
 800404e:	f240 2132 	movw	r1, #562	; 0x232
 8004052:	4b3c      	ldr	r3, [pc, #240]	; (8004144 <__mdiff+0x118>)
 8004054:	483c      	ldr	r0, [pc, #240]	; (8004148 <__mdiff+0x11c>)
 8004056:	f000 fa5f 	bl	8004518 <__assert_func>
 800405a:	2301      	movs	r3, #1
 800405c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004060:	4610      	mov	r0, r2
 8004062:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004066:	bfa4      	itt	ge
 8004068:	4653      	movge	r3, sl
 800406a:	46a2      	movge	sl, r4
 800406c:	4630      	mov	r0, r6
 800406e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004072:	bfa6      	itte	ge
 8004074:	461c      	movge	r4, r3
 8004076:	2500      	movge	r5, #0
 8004078:	2501      	movlt	r5, #1
 800407a:	f7ff fcf7 	bl	8003a6c <_Balloc>
 800407e:	4602      	mov	r2, r0
 8004080:	b918      	cbnz	r0, 800408a <__mdiff+0x5e>
 8004082:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004086:	4b2f      	ldr	r3, [pc, #188]	; (8004144 <__mdiff+0x118>)
 8004088:	e7e4      	b.n	8004054 <__mdiff+0x28>
 800408a:	f100 0814 	add.w	r8, r0, #20
 800408e:	f8da 7010 	ldr.w	r7, [sl, #16]
 8004092:	60c5      	str	r5, [r0, #12]
 8004094:	f04f 0c00 	mov.w	ip, #0
 8004098:	f10a 0514 	add.w	r5, sl, #20
 800409c:	f10a 0010 	add.w	r0, sl, #16
 80040a0:	46c2      	mov	sl, r8
 80040a2:	6926      	ldr	r6, [r4, #16]
 80040a4:	f104 0914 	add.w	r9, r4, #20
 80040a8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 80040ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80040b0:	f850 bf04 	ldr.w	fp, [r0, #4]!
 80040b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80040b8:	fa1f f18b 	uxth.w	r1, fp
 80040bc:	4461      	add	r1, ip
 80040be:	fa1f fc83 	uxth.w	ip, r3
 80040c2:	0c1b      	lsrs	r3, r3, #16
 80040c4:	eba1 010c 	sub.w	r1, r1, ip
 80040c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80040cc:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80040d0:	b289      	uxth	r1, r1
 80040d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80040d6:	454e      	cmp	r6, r9
 80040d8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80040dc:	f84a 3b04 	str.w	r3, [sl], #4
 80040e0:	d8e6      	bhi.n	80040b0 <__mdiff+0x84>
 80040e2:	1b33      	subs	r3, r6, r4
 80040e4:	3b15      	subs	r3, #21
 80040e6:	f023 0303 	bic.w	r3, r3, #3
 80040ea:	3415      	adds	r4, #21
 80040ec:	3304      	adds	r3, #4
 80040ee:	42a6      	cmp	r6, r4
 80040f0:	bf38      	it	cc
 80040f2:	2304      	movcc	r3, #4
 80040f4:	441d      	add	r5, r3
 80040f6:	4443      	add	r3, r8
 80040f8:	461e      	mov	r6, r3
 80040fa:	462c      	mov	r4, r5
 80040fc:	4574      	cmp	r4, lr
 80040fe:	d30e      	bcc.n	800411e <__mdiff+0xf2>
 8004100:	f10e 0103 	add.w	r1, lr, #3
 8004104:	1b49      	subs	r1, r1, r5
 8004106:	f021 0103 	bic.w	r1, r1, #3
 800410a:	3d03      	subs	r5, #3
 800410c:	45ae      	cmp	lr, r5
 800410e:	bf38      	it	cc
 8004110:	2100      	movcc	r1, #0
 8004112:	4419      	add	r1, r3
 8004114:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004118:	b18b      	cbz	r3, 800413e <__mdiff+0x112>
 800411a:	6117      	str	r7, [r2, #16]
 800411c:	e7a0      	b.n	8004060 <__mdiff+0x34>
 800411e:	f854 8b04 	ldr.w	r8, [r4], #4
 8004122:	fa1f f188 	uxth.w	r1, r8
 8004126:	4461      	add	r1, ip
 8004128:	1408      	asrs	r0, r1, #16
 800412a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800412e:	b289      	uxth	r1, r1
 8004130:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004134:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004138:	f846 1b04 	str.w	r1, [r6], #4
 800413c:	e7de      	b.n	80040fc <__mdiff+0xd0>
 800413e:	3f01      	subs	r7, #1
 8004140:	e7e8      	b.n	8004114 <__mdiff+0xe8>
 8004142:	bf00      	nop
 8004144:	08005589 	.word	0x08005589
 8004148:	0800562f 	.word	0x0800562f

0800414c <__ulp>:
 800414c:	4b11      	ldr	r3, [pc, #68]	; (8004194 <__ulp+0x48>)
 800414e:	400b      	ands	r3, r1
 8004150:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8004154:	2b00      	cmp	r3, #0
 8004156:	dd02      	ble.n	800415e <__ulp+0x12>
 8004158:	2000      	movs	r0, #0
 800415a:	4619      	mov	r1, r3
 800415c:	4770      	bx	lr
 800415e:	425b      	negs	r3, r3
 8004160:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004164:	f04f 0000 	mov.w	r0, #0
 8004168:	f04f 0100 	mov.w	r1, #0
 800416c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004170:	da04      	bge.n	800417c <__ulp+0x30>
 8004172:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004176:	fa43 f102 	asr.w	r1, r3, r2
 800417a:	4770      	bx	lr
 800417c:	f1a2 0314 	sub.w	r3, r2, #20
 8004180:	2b1e      	cmp	r3, #30
 8004182:	bfd6      	itet	le
 8004184:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8004188:	2301      	movgt	r3, #1
 800418a:	fa22 f303 	lsrle.w	r3, r2, r3
 800418e:	4618      	mov	r0, r3
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	7ff00000 	.word	0x7ff00000

08004198 <__b2d>:
 8004198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800419c:	6907      	ldr	r7, [r0, #16]
 800419e:	f100 0914 	add.w	r9, r0, #20
 80041a2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80041a6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80041aa:	f1a7 0804 	sub.w	r8, r7, #4
 80041ae:	4630      	mov	r0, r6
 80041b0:	f7ff fd52 	bl	8003c58 <__hi0bits>
 80041b4:	f1c0 0320 	rsb	r3, r0, #32
 80041b8:	280a      	cmp	r0, #10
 80041ba:	600b      	str	r3, [r1, #0]
 80041bc:	491f      	ldr	r1, [pc, #124]	; (800423c <__b2d+0xa4>)
 80041be:	dc17      	bgt.n	80041f0 <__b2d+0x58>
 80041c0:	45c1      	cmp	r9, r8
 80041c2:	bf28      	it	cs
 80041c4:	2200      	movcs	r2, #0
 80041c6:	f1c0 0c0b 	rsb	ip, r0, #11
 80041ca:	fa26 f30c 	lsr.w	r3, r6, ip
 80041ce:	bf38      	it	cc
 80041d0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80041d4:	ea43 0501 	orr.w	r5, r3, r1
 80041d8:	f100 0315 	add.w	r3, r0, #21
 80041dc:	fa06 f303 	lsl.w	r3, r6, r3
 80041e0:	fa22 f20c 	lsr.w	r2, r2, ip
 80041e4:	ea43 0402 	orr.w	r4, r3, r2
 80041e8:	4620      	mov	r0, r4
 80041ea:	4629      	mov	r1, r5
 80041ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041f0:	45c1      	cmp	r9, r8
 80041f2:	bf2e      	itee	cs
 80041f4:	2200      	movcs	r2, #0
 80041f6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80041fa:	f1a7 0808 	subcc.w	r8, r7, #8
 80041fe:	f1b0 030b 	subs.w	r3, r0, #11
 8004202:	d016      	beq.n	8004232 <__b2d+0x9a>
 8004204:	f1c3 0720 	rsb	r7, r3, #32
 8004208:	fa22 f107 	lsr.w	r1, r2, r7
 800420c:	45c8      	cmp	r8, r9
 800420e:	fa06 f603 	lsl.w	r6, r6, r3
 8004212:	ea46 0601 	orr.w	r6, r6, r1
 8004216:	bf94      	ite	ls
 8004218:	2100      	movls	r1, #0
 800421a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800421e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8004222:	fa02 f003 	lsl.w	r0, r2, r3
 8004226:	40f9      	lsrs	r1, r7
 8004228:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800422c:	ea40 0401 	orr.w	r4, r0, r1
 8004230:	e7da      	b.n	80041e8 <__b2d+0x50>
 8004232:	4614      	mov	r4, r2
 8004234:	ea46 0501 	orr.w	r5, r6, r1
 8004238:	e7d6      	b.n	80041e8 <__b2d+0x50>
 800423a:	bf00      	nop
 800423c:	3ff00000 	.word	0x3ff00000

08004240 <__d2b>:
 8004240:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004244:	2101      	movs	r1, #1
 8004246:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800424a:	4690      	mov	r8, r2
 800424c:	461d      	mov	r5, r3
 800424e:	f7ff fc0d 	bl	8003a6c <_Balloc>
 8004252:	4604      	mov	r4, r0
 8004254:	b930      	cbnz	r0, 8004264 <__d2b+0x24>
 8004256:	4602      	mov	r2, r0
 8004258:	f240 310a 	movw	r1, #778	; 0x30a
 800425c:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <__d2b+0xb0>)
 800425e:	4825      	ldr	r0, [pc, #148]	; (80042f4 <__d2b+0xb4>)
 8004260:	f000 f95a 	bl	8004518 <__assert_func>
 8004264:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004268:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800426c:	bb2d      	cbnz	r5, 80042ba <__d2b+0x7a>
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	f1b8 0300 	subs.w	r3, r8, #0
 8004274:	d026      	beq.n	80042c4 <__d2b+0x84>
 8004276:	4668      	mov	r0, sp
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	f7ff fd0d 	bl	8003c98 <__lo0bits>
 800427e:	9900      	ldr	r1, [sp, #0]
 8004280:	b1f0      	cbz	r0, 80042c0 <__d2b+0x80>
 8004282:	9a01      	ldr	r2, [sp, #4]
 8004284:	f1c0 0320 	rsb	r3, r0, #32
 8004288:	fa02 f303 	lsl.w	r3, r2, r3
 800428c:	430b      	orrs	r3, r1
 800428e:	40c2      	lsrs	r2, r0
 8004290:	6163      	str	r3, [r4, #20]
 8004292:	9201      	str	r2, [sp, #4]
 8004294:	9b01      	ldr	r3, [sp, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	bf14      	ite	ne
 800429a:	2102      	movne	r1, #2
 800429c:	2101      	moveq	r1, #1
 800429e:	61a3      	str	r3, [r4, #24]
 80042a0:	6121      	str	r1, [r4, #16]
 80042a2:	b1c5      	cbz	r5, 80042d6 <__d2b+0x96>
 80042a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80042a8:	4405      	add	r5, r0
 80042aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80042ae:	603d      	str	r5, [r7, #0]
 80042b0:	6030      	str	r0, [r6, #0]
 80042b2:	4620      	mov	r0, r4
 80042b4:	b002      	add	sp, #8
 80042b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042be:	e7d6      	b.n	800426e <__d2b+0x2e>
 80042c0:	6161      	str	r1, [r4, #20]
 80042c2:	e7e7      	b.n	8004294 <__d2b+0x54>
 80042c4:	a801      	add	r0, sp, #4
 80042c6:	f7ff fce7 	bl	8003c98 <__lo0bits>
 80042ca:	2101      	movs	r1, #1
 80042cc:	9b01      	ldr	r3, [sp, #4]
 80042ce:	6121      	str	r1, [r4, #16]
 80042d0:	6163      	str	r3, [r4, #20]
 80042d2:	3020      	adds	r0, #32
 80042d4:	e7e5      	b.n	80042a2 <__d2b+0x62>
 80042d6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80042da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80042de:	6038      	str	r0, [r7, #0]
 80042e0:	6918      	ldr	r0, [r3, #16]
 80042e2:	f7ff fcb9 	bl	8003c58 <__hi0bits>
 80042e6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80042ea:	6031      	str	r1, [r6, #0]
 80042ec:	e7e1      	b.n	80042b2 <__d2b+0x72>
 80042ee:	bf00      	nop
 80042f0:	08005589 	.word	0x08005589
 80042f4:	0800562f 	.word	0x0800562f

080042f8 <__ratio>:
 80042f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	4688      	mov	r8, r1
 80042fe:	4669      	mov	r1, sp
 8004300:	4681      	mov	r9, r0
 8004302:	f7ff ff49 	bl	8004198 <__b2d>
 8004306:	460f      	mov	r7, r1
 8004308:	4604      	mov	r4, r0
 800430a:	460d      	mov	r5, r1
 800430c:	4640      	mov	r0, r8
 800430e:	a901      	add	r1, sp, #4
 8004310:	f7ff ff42 	bl	8004198 <__b2d>
 8004314:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004318:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800431c:	468b      	mov	fp, r1
 800431e:	eba3 0c02 	sub.w	ip, r3, r2
 8004322:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800432c:	2b00      	cmp	r3, #0
 800432e:	bfd5      	itete	le
 8004330:	460a      	movle	r2, r1
 8004332:	462a      	movgt	r2, r5
 8004334:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8004338:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800433c:	bfd8      	it	le
 800433e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8004342:	465b      	mov	r3, fp
 8004344:	4602      	mov	r2, r0
 8004346:	4639      	mov	r1, r7
 8004348:	4620      	mov	r0, r4
 800434a:	f7fc f9f9 	bl	8000740 <__aeabi_ddiv>
 800434e:	b003      	add	sp, #12
 8004350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004354 <__copybits>:
 8004354:	3901      	subs	r1, #1
 8004356:	b570      	push	{r4, r5, r6, lr}
 8004358:	1149      	asrs	r1, r1, #5
 800435a:	6914      	ldr	r4, [r2, #16]
 800435c:	3101      	adds	r1, #1
 800435e:	f102 0314 	add.w	r3, r2, #20
 8004362:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004366:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800436a:	1f05      	subs	r5, r0, #4
 800436c:	42a3      	cmp	r3, r4
 800436e:	d30c      	bcc.n	800438a <__copybits+0x36>
 8004370:	1aa3      	subs	r3, r4, r2
 8004372:	3b11      	subs	r3, #17
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	3211      	adds	r2, #17
 800437a:	42a2      	cmp	r2, r4
 800437c:	bf88      	it	hi
 800437e:	2300      	movhi	r3, #0
 8004380:	4418      	add	r0, r3
 8004382:	2300      	movs	r3, #0
 8004384:	4288      	cmp	r0, r1
 8004386:	d305      	bcc.n	8004394 <__copybits+0x40>
 8004388:	bd70      	pop	{r4, r5, r6, pc}
 800438a:	f853 6b04 	ldr.w	r6, [r3], #4
 800438e:	f845 6f04 	str.w	r6, [r5, #4]!
 8004392:	e7eb      	b.n	800436c <__copybits+0x18>
 8004394:	f840 3b04 	str.w	r3, [r0], #4
 8004398:	e7f4      	b.n	8004384 <__copybits+0x30>

0800439a <__any_on>:
 800439a:	f100 0214 	add.w	r2, r0, #20
 800439e:	6900      	ldr	r0, [r0, #16]
 80043a0:	114b      	asrs	r3, r1, #5
 80043a2:	4298      	cmp	r0, r3
 80043a4:	b510      	push	{r4, lr}
 80043a6:	db11      	blt.n	80043cc <__any_on+0x32>
 80043a8:	dd0a      	ble.n	80043c0 <__any_on+0x26>
 80043aa:	f011 011f 	ands.w	r1, r1, #31
 80043ae:	d007      	beq.n	80043c0 <__any_on+0x26>
 80043b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80043b4:	fa24 f001 	lsr.w	r0, r4, r1
 80043b8:	fa00 f101 	lsl.w	r1, r0, r1
 80043bc:	428c      	cmp	r4, r1
 80043be:	d10b      	bne.n	80043d8 <__any_on+0x3e>
 80043c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d803      	bhi.n	80043d0 <__any_on+0x36>
 80043c8:	2000      	movs	r0, #0
 80043ca:	bd10      	pop	{r4, pc}
 80043cc:	4603      	mov	r3, r0
 80043ce:	e7f7      	b.n	80043c0 <__any_on+0x26>
 80043d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80043d4:	2900      	cmp	r1, #0
 80043d6:	d0f5      	beq.n	80043c4 <__any_on+0x2a>
 80043d8:	2001      	movs	r0, #1
 80043da:	e7f6      	b.n	80043ca <__any_on+0x30>

080043dc <_calloc_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	fb02 f501 	mul.w	r5, r2, r1
 80043e2:	4629      	mov	r1, r5
 80043e4:	f000 f808 	bl	80043f8 <_malloc_r>
 80043e8:	4604      	mov	r4, r0
 80043ea:	b118      	cbz	r0, 80043f4 <_calloc_r+0x18>
 80043ec:	462a      	mov	r2, r5
 80043ee:	2100      	movs	r1, #0
 80043f0:	f7fe f8e8 	bl	80025c4 <memset>
 80043f4:	4620      	mov	r0, r4
 80043f6:	bd38      	pop	{r3, r4, r5, pc}

080043f8 <_malloc_r>:
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fa:	1ccd      	adds	r5, r1, #3
 80043fc:	f025 0503 	bic.w	r5, r5, #3
 8004400:	3508      	adds	r5, #8
 8004402:	2d0c      	cmp	r5, #12
 8004404:	bf38      	it	cc
 8004406:	250c      	movcc	r5, #12
 8004408:	2d00      	cmp	r5, #0
 800440a:	4606      	mov	r6, r0
 800440c:	db01      	blt.n	8004412 <_malloc_r+0x1a>
 800440e:	42a9      	cmp	r1, r5
 8004410:	d903      	bls.n	800441a <_malloc_r+0x22>
 8004412:	230c      	movs	r3, #12
 8004414:	6033      	str	r3, [r6, #0]
 8004416:	2000      	movs	r0, #0
 8004418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800441a:	f000 f8b5 	bl	8004588 <__malloc_lock>
 800441e:	4921      	ldr	r1, [pc, #132]	; (80044a4 <_malloc_r+0xac>)
 8004420:	680a      	ldr	r2, [r1, #0]
 8004422:	4614      	mov	r4, r2
 8004424:	b99c      	cbnz	r4, 800444e <_malloc_r+0x56>
 8004426:	4f20      	ldr	r7, [pc, #128]	; (80044a8 <_malloc_r+0xb0>)
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	b923      	cbnz	r3, 8004436 <_malloc_r+0x3e>
 800442c:	4621      	mov	r1, r4
 800442e:	4630      	mov	r0, r6
 8004430:	f000 f842 	bl	80044b8 <_sbrk_r>
 8004434:	6038      	str	r0, [r7, #0]
 8004436:	4629      	mov	r1, r5
 8004438:	4630      	mov	r0, r6
 800443a:	f000 f83d 	bl	80044b8 <_sbrk_r>
 800443e:	1c43      	adds	r3, r0, #1
 8004440:	d123      	bne.n	800448a <_malloc_r+0x92>
 8004442:	230c      	movs	r3, #12
 8004444:	4630      	mov	r0, r6
 8004446:	6033      	str	r3, [r6, #0]
 8004448:	f000 f8a4 	bl	8004594 <__malloc_unlock>
 800444c:	e7e3      	b.n	8004416 <_malloc_r+0x1e>
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	1b5b      	subs	r3, r3, r5
 8004452:	d417      	bmi.n	8004484 <_malloc_r+0x8c>
 8004454:	2b0b      	cmp	r3, #11
 8004456:	d903      	bls.n	8004460 <_malloc_r+0x68>
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	441c      	add	r4, r3
 800445c:	6025      	str	r5, [r4, #0]
 800445e:	e004      	b.n	800446a <_malloc_r+0x72>
 8004460:	6863      	ldr	r3, [r4, #4]
 8004462:	42a2      	cmp	r2, r4
 8004464:	bf0c      	ite	eq
 8004466:	600b      	streq	r3, [r1, #0]
 8004468:	6053      	strne	r3, [r2, #4]
 800446a:	4630      	mov	r0, r6
 800446c:	f000 f892 	bl	8004594 <__malloc_unlock>
 8004470:	f104 000b 	add.w	r0, r4, #11
 8004474:	1d23      	adds	r3, r4, #4
 8004476:	f020 0007 	bic.w	r0, r0, #7
 800447a:	1ac2      	subs	r2, r0, r3
 800447c:	d0cc      	beq.n	8004418 <_malloc_r+0x20>
 800447e:	1a1b      	subs	r3, r3, r0
 8004480:	50a3      	str	r3, [r4, r2]
 8004482:	e7c9      	b.n	8004418 <_malloc_r+0x20>
 8004484:	4622      	mov	r2, r4
 8004486:	6864      	ldr	r4, [r4, #4]
 8004488:	e7cc      	b.n	8004424 <_malloc_r+0x2c>
 800448a:	1cc4      	adds	r4, r0, #3
 800448c:	f024 0403 	bic.w	r4, r4, #3
 8004490:	42a0      	cmp	r0, r4
 8004492:	d0e3      	beq.n	800445c <_malloc_r+0x64>
 8004494:	1a21      	subs	r1, r4, r0
 8004496:	4630      	mov	r0, r6
 8004498:	f000 f80e 	bl	80044b8 <_sbrk_r>
 800449c:	3001      	adds	r0, #1
 800449e:	d1dd      	bne.n	800445c <_malloc_r+0x64>
 80044a0:	e7cf      	b.n	8004442 <_malloc_r+0x4a>
 80044a2:	bf00      	nop
 80044a4:	20000408 	.word	0x20000408
 80044a8:	2000040c 	.word	0x2000040c

080044ac <nan>:
 80044ac:	2000      	movs	r0, #0
 80044ae:	4901      	ldr	r1, [pc, #4]	; (80044b4 <nan+0x8>)
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	7ff80000 	.word	0x7ff80000

080044b8 <_sbrk_r>:
 80044b8:	b538      	push	{r3, r4, r5, lr}
 80044ba:	2300      	movs	r3, #0
 80044bc:	4d05      	ldr	r5, [pc, #20]	; (80044d4 <_sbrk_r+0x1c>)
 80044be:	4604      	mov	r4, r0
 80044c0:	4608      	mov	r0, r1
 80044c2:	602b      	str	r3, [r5, #0]
 80044c4:	f7fc ff1e 	bl	8001304 <_sbrk>
 80044c8:	1c43      	adds	r3, r0, #1
 80044ca:	d102      	bne.n	80044d2 <_sbrk_r+0x1a>
 80044cc:	682b      	ldr	r3, [r5, #0]
 80044ce:	b103      	cbz	r3, 80044d2 <_sbrk_r+0x1a>
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	bd38      	pop	{r3, r4, r5, pc}
 80044d4:	20000454 	.word	0x20000454

080044d8 <strncmp>:
 80044d8:	b510      	push	{r4, lr}
 80044da:	b16a      	cbz	r2, 80044f8 <strncmp+0x20>
 80044dc:	3901      	subs	r1, #1
 80044de:	1884      	adds	r4, r0, r2
 80044e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80044e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d103      	bne.n	80044f4 <strncmp+0x1c>
 80044ec:	42a0      	cmp	r0, r4
 80044ee:	d001      	beq.n	80044f4 <strncmp+0x1c>
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1f5      	bne.n	80044e0 <strncmp+0x8>
 80044f4:	1a98      	subs	r0, r3, r2
 80044f6:	bd10      	pop	{r4, pc}
 80044f8:	4610      	mov	r0, r2
 80044fa:	e7fc      	b.n	80044f6 <strncmp+0x1e>

080044fc <__ascii_wctomb>:
 80044fc:	4603      	mov	r3, r0
 80044fe:	4608      	mov	r0, r1
 8004500:	b141      	cbz	r1, 8004514 <__ascii_wctomb+0x18>
 8004502:	2aff      	cmp	r2, #255	; 0xff
 8004504:	d904      	bls.n	8004510 <__ascii_wctomb+0x14>
 8004506:	228a      	movs	r2, #138	; 0x8a
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	4770      	bx	lr
 8004510:	2001      	movs	r0, #1
 8004512:	700a      	strb	r2, [r1, #0]
 8004514:	4770      	bx	lr
	...

08004518 <__assert_func>:
 8004518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800451a:	4614      	mov	r4, r2
 800451c:	461a      	mov	r2, r3
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <__assert_func+0x2c>)
 8004520:	4605      	mov	r5, r0
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68d8      	ldr	r0, [r3, #12]
 8004526:	b14c      	cbz	r4, 800453c <__assert_func+0x24>
 8004528:	4b07      	ldr	r3, [pc, #28]	; (8004548 <__assert_func+0x30>)
 800452a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800452e:	9100      	str	r1, [sp, #0]
 8004530:	462b      	mov	r3, r5
 8004532:	4906      	ldr	r1, [pc, #24]	; (800454c <__assert_func+0x34>)
 8004534:	f000 f80e 	bl	8004554 <fiprintf>
 8004538:	f000 fc2c 	bl	8004d94 <abort>
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <__assert_func+0x38>)
 800453e:	461c      	mov	r4, r3
 8004540:	e7f3      	b.n	800452a <__assert_func+0x12>
 8004542:	bf00      	nop
 8004544:	20000014 	.word	0x20000014
 8004548:	0800578c 	.word	0x0800578c
 800454c:	08005799 	.word	0x08005799
 8004550:	080057c7 	.word	0x080057c7

08004554 <fiprintf>:
 8004554:	b40e      	push	{r1, r2, r3}
 8004556:	b503      	push	{r0, r1, lr}
 8004558:	4601      	mov	r1, r0
 800455a:	ab03      	add	r3, sp, #12
 800455c:	4805      	ldr	r0, [pc, #20]	; (8004574 <fiprintf+0x20>)
 800455e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004562:	6800      	ldr	r0, [r0, #0]
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	f000 f88f 	bl	8004688 <_vfiprintf_r>
 800456a:	b002      	add	sp, #8
 800456c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004570:	b003      	add	sp, #12
 8004572:	4770      	bx	lr
 8004574:	20000014 	.word	0x20000014

08004578 <malloc>:
 8004578:	4b02      	ldr	r3, [pc, #8]	; (8004584 <malloc+0xc>)
 800457a:	4601      	mov	r1, r0
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	f7ff bf3b 	b.w	80043f8 <_malloc_r>
 8004582:	bf00      	nop
 8004584:	20000014 	.word	0x20000014

08004588 <__malloc_lock>:
 8004588:	4801      	ldr	r0, [pc, #4]	; (8004590 <__malloc_lock+0x8>)
 800458a:	f000 bdc3 	b.w	8005114 <__retarget_lock_acquire_recursive>
 800458e:	bf00      	nop
 8004590:	2000045c 	.word	0x2000045c

08004594 <__malloc_unlock>:
 8004594:	4801      	ldr	r0, [pc, #4]	; (800459c <__malloc_unlock+0x8>)
 8004596:	f000 bdbe 	b.w	8005116 <__retarget_lock_release_recursive>
 800459a:	bf00      	nop
 800459c:	2000045c 	.word	0x2000045c

080045a0 <_free_r>:
 80045a0:	b538      	push	{r3, r4, r5, lr}
 80045a2:	4605      	mov	r5, r0
 80045a4:	2900      	cmp	r1, #0
 80045a6:	d043      	beq.n	8004630 <_free_r+0x90>
 80045a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ac:	1f0c      	subs	r4, r1, #4
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bfb8      	it	lt
 80045b2:	18e4      	addlt	r4, r4, r3
 80045b4:	f7ff ffe8 	bl	8004588 <__malloc_lock>
 80045b8:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <_free_r+0x94>)
 80045ba:	6813      	ldr	r3, [r2, #0]
 80045bc:	4610      	mov	r0, r2
 80045be:	b933      	cbnz	r3, 80045ce <_free_r+0x2e>
 80045c0:	6063      	str	r3, [r4, #4]
 80045c2:	6014      	str	r4, [r2, #0]
 80045c4:	4628      	mov	r0, r5
 80045c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045ca:	f7ff bfe3 	b.w	8004594 <__malloc_unlock>
 80045ce:	42a3      	cmp	r3, r4
 80045d0:	d90a      	bls.n	80045e8 <_free_r+0x48>
 80045d2:	6821      	ldr	r1, [r4, #0]
 80045d4:	1862      	adds	r2, r4, r1
 80045d6:	4293      	cmp	r3, r2
 80045d8:	bf01      	itttt	eq
 80045da:	681a      	ldreq	r2, [r3, #0]
 80045dc:	685b      	ldreq	r3, [r3, #4]
 80045de:	1852      	addeq	r2, r2, r1
 80045e0:	6022      	streq	r2, [r4, #0]
 80045e2:	6063      	str	r3, [r4, #4]
 80045e4:	6004      	str	r4, [r0, #0]
 80045e6:	e7ed      	b.n	80045c4 <_free_r+0x24>
 80045e8:	461a      	mov	r2, r3
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	b10b      	cbz	r3, 80045f2 <_free_r+0x52>
 80045ee:	42a3      	cmp	r3, r4
 80045f0:	d9fa      	bls.n	80045e8 <_free_r+0x48>
 80045f2:	6811      	ldr	r1, [r2, #0]
 80045f4:	1850      	adds	r0, r2, r1
 80045f6:	42a0      	cmp	r0, r4
 80045f8:	d10b      	bne.n	8004612 <_free_r+0x72>
 80045fa:	6820      	ldr	r0, [r4, #0]
 80045fc:	4401      	add	r1, r0
 80045fe:	1850      	adds	r0, r2, r1
 8004600:	4283      	cmp	r3, r0
 8004602:	6011      	str	r1, [r2, #0]
 8004604:	d1de      	bne.n	80045c4 <_free_r+0x24>
 8004606:	6818      	ldr	r0, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	4401      	add	r1, r0
 800460c:	6011      	str	r1, [r2, #0]
 800460e:	6053      	str	r3, [r2, #4]
 8004610:	e7d8      	b.n	80045c4 <_free_r+0x24>
 8004612:	d902      	bls.n	800461a <_free_r+0x7a>
 8004614:	230c      	movs	r3, #12
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	e7d4      	b.n	80045c4 <_free_r+0x24>
 800461a:	6820      	ldr	r0, [r4, #0]
 800461c:	1821      	adds	r1, r4, r0
 800461e:	428b      	cmp	r3, r1
 8004620:	bf01      	itttt	eq
 8004622:	6819      	ldreq	r1, [r3, #0]
 8004624:	685b      	ldreq	r3, [r3, #4]
 8004626:	1809      	addeq	r1, r1, r0
 8004628:	6021      	streq	r1, [r4, #0]
 800462a:	6063      	str	r3, [r4, #4]
 800462c:	6054      	str	r4, [r2, #4]
 800462e:	e7c9      	b.n	80045c4 <_free_r+0x24>
 8004630:	bd38      	pop	{r3, r4, r5, pc}
 8004632:	bf00      	nop
 8004634:	20000408 	.word	0x20000408

08004638 <__sfputc_r>:
 8004638:	6893      	ldr	r3, [r2, #8]
 800463a:	b410      	push	{r4}
 800463c:	3b01      	subs	r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	6093      	str	r3, [r2, #8]
 8004642:	da07      	bge.n	8004654 <__sfputc_r+0x1c>
 8004644:	6994      	ldr	r4, [r2, #24]
 8004646:	42a3      	cmp	r3, r4
 8004648:	db01      	blt.n	800464e <__sfputc_r+0x16>
 800464a:	290a      	cmp	r1, #10
 800464c:	d102      	bne.n	8004654 <__sfputc_r+0x1c>
 800464e:	bc10      	pop	{r4}
 8004650:	f000 bae0 	b.w	8004c14 <__swbuf_r>
 8004654:	6813      	ldr	r3, [r2, #0]
 8004656:	1c58      	adds	r0, r3, #1
 8004658:	6010      	str	r0, [r2, #0]
 800465a:	7019      	strb	r1, [r3, #0]
 800465c:	4608      	mov	r0, r1
 800465e:	bc10      	pop	{r4}
 8004660:	4770      	bx	lr

08004662 <__sfputs_r>:
 8004662:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004664:	4606      	mov	r6, r0
 8004666:	460f      	mov	r7, r1
 8004668:	4614      	mov	r4, r2
 800466a:	18d5      	adds	r5, r2, r3
 800466c:	42ac      	cmp	r4, r5
 800466e:	d101      	bne.n	8004674 <__sfputs_r+0x12>
 8004670:	2000      	movs	r0, #0
 8004672:	e007      	b.n	8004684 <__sfputs_r+0x22>
 8004674:	463a      	mov	r2, r7
 8004676:	4630      	mov	r0, r6
 8004678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800467c:	f7ff ffdc 	bl	8004638 <__sfputc_r>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d1f3      	bne.n	800466c <__sfputs_r+0xa>
 8004684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004688 <_vfiprintf_r>:
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	460d      	mov	r5, r1
 800468e:	4614      	mov	r4, r2
 8004690:	4698      	mov	r8, r3
 8004692:	4606      	mov	r6, r0
 8004694:	b09d      	sub	sp, #116	; 0x74
 8004696:	b118      	cbz	r0, 80046a0 <_vfiprintf_r+0x18>
 8004698:	6983      	ldr	r3, [r0, #24]
 800469a:	b90b      	cbnz	r3, 80046a0 <_vfiprintf_r+0x18>
 800469c:	f000 fc9c 	bl	8004fd8 <__sinit>
 80046a0:	4b89      	ldr	r3, [pc, #548]	; (80048c8 <_vfiprintf_r+0x240>)
 80046a2:	429d      	cmp	r5, r3
 80046a4:	d11b      	bne.n	80046de <_vfiprintf_r+0x56>
 80046a6:	6875      	ldr	r5, [r6, #4]
 80046a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046aa:	07d9      	lsls	r1, r3, #31
 80046ac:	d405      	bmi.n	80046ba <_vfiprintf_r+0x32>
 80046ae:	89ab      	ldrh	r3, [r5, #12]
 80046b0:	059a      	lsls	r2, r3, #22
 80046b2:	d402      	bmi.n	80046ba <_vfiprintf_r+0x32>
 80046b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046b6:	f000 fd2d 	bl	8005114 <__retarget_lock_acquire_recursive>
 80046ba:	89ab      	ldrh	r3, [r5, #12]
 80046bc:	071b      	lsls	r3, r3, #28
 80046be:	d501      	bpl.n	80046c4 <_vfiprintf_r+0x3c>
 80046c0:	692b      	ldr	r3, [r5, #16]
 80046c2:	b9eb      	cbnz	r3, 8004700 <_vfiprintf_r+0x78>
 80046c4:	4629      	mov	r1, r5
 80046c6:	4630      	mov	r0, r6
 80046c8:	f000 faf6 	bl	8004cb8 <__swsetup_r>
 80046cc:	b1c0      	cbz	r0, 8004700 <_vfiprintf_r+0x78>
 80046ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046d0:	07dc      	lsls	r4, r3, #31
 80046d2:	d50e      	bpl.n	80046f2 <_vfiprintf_r+0x6a>
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295
 80046d8:	b01d      	add	sp, #116	; 0x74
 80046da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046de:	4b7b      	ldr	r3, [pc, #492]	; (80048cc <_vfiprintf_r+0x244>)
 80046e0:	429d      	cmp	r5, r3
 80046e2:	d101      	bne.n	80046e8 <_vfiprintf_r+0x60>
 80046e4:	68b5      	ldr	r5, [r6, #8]
 80046e6:	e7df      	b.n	80046a8 <_vfiprintf_r+0x20>
 80046e8:	4b79      	ldr	r3, [pc, #484]	; (80048d0 <_vfiprintf_r+0x248>)
 80046ea:	429d      	cmp	r5, r3
 80046ec:	bf08      	it	eq
 80046ee:	68f5      	ldreq	r5, [r6, #12]
 80046f0:	e7da      	b.n	80046a8 <_vfiprintf_r+0x20>
 80046f2:	89ab      	ldrh	r3, [r5, #12]
 80046f4:	0598      	lsls	r0, r3, #22
 80046f6:	d4ed      	bmi.n	80046d4 <_vfiprintf_r+0x4c>
 80046f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046fa:	f000 fd0c 	bl	8005116 <__retarget_lock_release_recursive>
 80046fe:	e7e9      	b.n	80046d4 <_vfiprintf_r+0x4c>
 8004700:	2300      	movs	r3, #0
 8004702:	9309      	str	r3, [sp, #36]	; 0x24
 8004704:	2320      	movs	r3, #32
 8004706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800470a:	2330      	movs	r3, #48	; 0x30
 800470c:	f04f 0901 	mov.w	r9, #1
 8004710:	f8cd 800c 	str.w	r8, [sp, #12]
 8004714:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80048d4 <_vfiprintf_r+0x24c>
 8004718:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800471c:	4623      	mov	r3, r4
 800471e:	469a      	mov	sl, r3
 8004720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004724:	b10a      	cbz	r2, 800472a <_vfiprintf_r+0xa2>
 8004726:	2a25      	cmp	r2, #37	; 0x25
 8004728:	d1f9      	bne.n	800471e <_vfiprintf_r+0x96>
 800472a:	ebba 0b04 	subs.w	fp, sl, r4
 800472e:	d00b      	beq.n	8004748 <_vfiprintf_r+0xc0>
 8004730:	465b      	mov	r3, fp
 8004732:	4622      	mov	r2, r4
 8004734:	4629      	mov	r1, r5
 8004736:	4630      	mov	r0, r6
 8004738:	f7ff ff93 	bl	8004662 <__sfputs_r>
 800473c:	3001      	adds	r0, #1
 800473e:	f000 80aa 	beq.w	8004896 <_vfiprintf_r+0x20e>
 8004742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004744:	445a      	add	r2, fp
 8004746:	9209      	str	r2, [sp, #36]	; 0x24
 8004748:	f89a 3000 	ldrb.w	r3, [sl]
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80a2 	beq.w	8004896 <_vfiprintf_r+0x20e>
 8004752:	2300      	movs	r3, #0
 8004754:	f04f 32ff 	mov.w	r2, #4294967295
 8004758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800475c:	f10a 0a01 	add.w	sl, sl, #1
 8004760:	9304      	str	r3, [sp, #16]
 8004762:	9307      	str	r3, [sp, #28]
 8004764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004768:	931a      	str	r3, [sp, #104]	; 0x68
 800476a:	4654      	mov	r4, sl
 800476c:	2205      	movs	r2, #5
 800476e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004772:	4858      	ldr	r0, [pc, #352]	; (80048d4 <_vfiprintf_r+0x24c>)
 8004774:	f000 fd34 	bl	80051e0 <memchr>
 8004778:	9a04      	ldr	r2, [sp, #16]
 800477a:	b9d8      	cbnz	r0, 80047b4 <_vfiprintf_r+0x12c>
 800477c:	06d1      	lsls	r1, r2, #27
 800477e:	bf44      	itt	mi
 8004780:	2320      	movmi	r3, #32
 8004782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004786:	0713      	lsls	r3, r2, #28
 8004788:	bf44      	itt	mi
 800478a:	232b      	movmi	r3, #43	; 0x2b
 800478c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004790:	f89a 3000 	ldrb.w	r3, [sl]
 8004794:	2b2a      	cmp	r3, #42	; 0x2a
 8004796:	d015      	beq.n	80047c4 <_vfiprintf_r+0x13c>
 8004798:	4654      	mov	r4, sl
 800479a:	2000      	movs	r0, #0
 800479c:	f04f 0c0a 	mov.w	ip, #10
 80047a0:	9a07      	ldr	r2, [sp, #28]
 80047a2:	4621      	mov	r1, r4
 80047a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047a8:	3b30      	subs	r3, #48	; 0x30
 80047aa:	2b09      	cmp	r3, #9
 80047ac:	d94e      	bls.n	800484c <_vfiprintf_r+0x1c4>
 80047ae:	b1b0      	cbz	r0, 80047de <_vfiprintf_r+0x156>
 80047b0:	9207      	str	r2, [sp, #28]
 80047b2:	e014      	b.n	80047de <_vfiprintf_r+0x156>
 80047b4:	eba0 0308 	sub.w	r3, r0, r8
 80047b8:	fa09 f303 	lsl.w	r3, r9, r3
 80047bc:	4313      	orrs	r3, r2
 80047be:	46a2      	mov	sl, r4
 80047c0:	9304      	str	r3, [sp, #16]
 80047c2:	e7d2      	b.n	800476a <_vfiprintf_r+0xe2>
 80047c4:	9b03      	ldr	r3, [sp, #12]
 80047c6:	1d19      	adds	r1, r3, #4
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	9103      	str	r1, [sp, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bfbb      	ittet	lt
 80047d0:	425b      	neglt	r3, r3
 80047d2:	f042 0202 	orrlt.w	r2, r2, #2
 80047d6:	9307      	strge	r3, [sp, #28]
 80047d8:	9307      	strlt	r3, [sp, #28]
 80047da:	bfb8      	it	lt
 80047dc:	9204      	strlt	r2, [sp, #16]
 80047de:	7823      	ldrb	r3, [r4, #0]
 80047e0:	2b2e      	cmp	r3, #46	; 0x2e
 80047e2:	d10c      	bne.n	80047fe <_vfiprintf_r+0x176>
 80047e4:	7863      	ldrb	r3, [r4, #1]
 80047e6:	2b2a      	cmp	r3, #42	; 0x2a
 80047e8:	d135      	bne.n	8004856 <_vfiprintf_r+0x1ce>
 80047ea:	9b03      	ldr	r3, [sp, #12]
 80047ec:	3402      	adds	r4, #2
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	9203      	str	r2, [sp, #12]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bfb8      	it	lt
 80047f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80047fc:	9305      	str	r3, [sp, #20]
 80047fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80048e4 <_vfiprintf_r+0x25c>
 8004802:	2203      	movs	r2, #3
 8004804:	4650      	mov	r0, sl
 8004806:	7821      	ldrb	r1, [r4, #0]
 8004808:	f000 fcea 	bl	80051e0 <memchr>
 800480c:	b140      	cbz	r0, 8004820 <_vfiprintf_r+0x198>
 800480e:	2340      	movs	r3, #64	; 0x40
 8004810:	eba0 000a 	sub.w	r0, r0, sl
 8004814:	fa03 f000 	lsl.w	r0, r3, r0
 8004818:	9b04      	ldr	r3, [sp, #16]
 800481a:	3401      	adds	r4, #1
 800481c:	4303      	orrs	r3, r0
 800481e:	9304      	str	r3, [sp, #16]
 8004820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004824:	2206      	movs	r2, #6
 8004826:	482c      	ldr	r0, [pc, #176]	; (80048d8 <_vfiprintf_r+0x250>)
 8004828:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800482c:	f000 fcd8 	bl	80051e0 <memchr>
 8004830:	2800      	cmp	r0, #0
 8004832:	d03f      	beq.n	80048b4 <_vfiprintf_r+0x22c>
 8004834:	4b29      	ldr	r3, [pc, #164]	; (80048dc <_vfiprintf_r+0x254>)
 8004836:	bb1b      	cbnz	r3, 8004880 <_vfiprintf_r+0x1f8>
 8004838:	9b03      	ldr	r3, [sp, #12]
 800483a:	3307      	adds	r3, #7
 800483c:	f023 0307 	bic.w	r3, r3, #7
 8004840:	3308      	adds	r3, #8
 8004842:	9303      	str	r3, [sp, #12]
 8004844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004846:	443b      	add	r3, r7
 8004848:	9309      	str	r3, [sp, #36]	; 0x24
 800484a:	e767      	b.n	800471c <_vfiprintf_r+0x94>
 800484c:	460c      	mov	r4, r1
 800484e:	2001      	movs	r0, #1
 8004850:	fb0c 3202 	mla	r2, ip, r2, r3
 8004854:	e7a5      	b.n	80047a2 <_vfiprintf_r+0x11a>
 8004856:	2300      	movs	r3, #0
 8004858:	f04f 0c0a 	mov.w	ip, #10
 800485c:	4619      	mov	r1, r3
 800485e:	3401      	adds	r4, #1
 8004860:	9305      	str	r3, [sp, #20]
 8004862:	4620      	mov	r0, r4
 8004864:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004868:	3a30      	subs	r2, #48	; 0x30
 800486a:	2a09      	cmp	r2, #9
 800486c:	d903      	bls.n	8004876 <_vfiprintf_r+0x1ee>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d0c5      	beq.n	80047fe <_vfiprintf_r+0x176>
 8004872:	9105      	str	r1, [sp, #20]
 8004874:	e7c3      	b.n	80047fe <_vfiprintf_r+0x176>
 8004876:	4604      	mov	r4, r0
 8004878:	2301      	movs	r3, #1
 800487a:	fb0c 2101 	mla	r1, ip, r1, r2
 800487e:	e7f0      	b.n	8004862 <_vfiprintf_r+0x1da>
 8004880:	ab03      	add	r3, sp, #12
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	462a      	mov	r2, r5
 8004886:	4630      	mov	r0, r6
 8004888:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <_vfiprintf_r+0x258>)
 800488a:	a904      	add	r1, sp, #16
 800488c:	f3af 8000 	nop.w
 8004890:	4607      	mov	r7, r0
 8004892:	1c78      	adds	r0, r7, #1
 8004894:	d1d6      	bne.n	8004844 <_vfiprintf_r+0x1bc>
 8004896:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004898:	07d9      	lsls	r1, r3, #31
 800489a:	d405      	bmi.n	80048a8 <_vfiprintf_r+0x220>
 800489c:	89ab      	ldrh	r3, [r5, #12]
 800489e:	059a      	lsls	r2, r3, #22
 80048a0:	d402      	bmi.n	80048a8 <_vfiprintf_r+0x220>
 80048a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048a4:	f000 fc37 	bl	8005116 <__retarget_lock_release_recursive>
 80048a8:	89ab      	ldrh	r3, [r5, #12]
 80048aa:	065b      	lsls	r3, r3, #25
 80048ac:	f53f af12 	bmi.w	80046d4 <_vfiprintf_r+0x4c>
 80048b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048b2:	e711      	b.n	80046d8 <_vfiprintf_r+0x50>
 80048b4:	ab03      	add	r3, sp, #12
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	462a      	mov	r2, r5
 80048ba:	4630      	mov	r0, r6
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <_vfiprintf_r+0x258>)
 80048be:	a904      	add	r1, sp, #16
 80048c0:	f000 f882 	bl	80049c8 <_printf_i>
 80048c4:	e7e4      	b.n	8004890 <_vfiprintf_r+0x208>
 80048c6:	bf00      	nop
 80048c8:	0800581c 	.word	0x0800581c
 80048cc:	0800583c 	.word	0x0800583c
 80048d0:	080057fc 	.word	0x080057fc
 80048d4:	080057c8 	.word	0x080057c8
 80048d8:	080057d2 	.word	0x080057d2
 80048dc:	00000000 	.word	0x00000000
 80048e0:	08004663 	.word	0x08004663
 80048e4:	080057ce 	.word	0x080057ce

080048e8 <_printf_common>:
 80048e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048ec:	4616      	mov	r6, r2
 80048ee:	4699      	mov	r9, r3
 80048f0:	688a      	ldr	r2, [r1, #8]
 80048f2:	690b      	ldr	r3, [r1, #16]
 80048f4:	4607      	mov	r7, r0
 80048f6:	4293      	cmp	r3, r2
 80048f8:	bfb8      	it	lt
 80048fa:	4613      	movlt	r3, r2
 80048fc:	6033      	str	r3, [r6, #0]
 80048fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004902:	460c      	mov	r4, r1
 8004904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004908:	b10a      	cbz	r2, 800490e <_printf_common+0x26>
 800490a:	3301      	adds	r3, #1
 800490c:	6033      	str	r3, [r6, #0]
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	0699      	lsls	r1, r3, #26
 8004912:	bf42      	ittt	mi
 8004914:	6833      	ldrmi	r3, [r6, #0]
 8004916:	3302      	addmi	r3, #2
 8004918:	6033      	strmi	r3, [r6, #0]
 800491a:	6825      	ldr	r5, [r4, #0]
 800491c:	f015 0506 	ands.w	r5, r5, #6
 8004920:	d106      	bne.n	8004930 <_printf_common+0x48>
 8004922:	f104 0a19 	add.w	sl, r4, #25
 8004926:	68e3      	ldr	r3, [r4, #12]
 8004928:	6832      	ldr	r2, [r6, #0]
 800492a:	1a9b      	subs	r3, r3, r2
 800492c:	42ab      	cmp	r3, r5
 800492e:	dc28      	bgt.n	8004982 <_printf_common+0x9a>
 8004930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004934:	1e13      	subs	r3, r2, #0
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	bf18      	it	ne
 800493a:	2301      	movne	r3, #1
 800493c:	0692      	lsls	r2, r2, #26
 800493e:	d42d      	bmi.n	800499c <_printf_common+0xb4>
 8004940:	4649      	mov	r1, r9
 8004942:	4638      	mov	r0, r7
 8004944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004948:	47c0      	blx	r8
 800494a:	3001      	adds	r0, #1
 800494c:	d020      	beq.n	8004990 <_printf_common+0xa8>
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	68e5      	ldr	r5, [r4, #12]
 8004952:	f003 0306 	and.w	r3, r3, #6
 8004956:	2b04      	cmp	r3, #4
 8004958:	bf18      	it	ne
 800495a:	2500      	movne	r5, #0
 800495c:	6832      	ldr	r2, [r6, #0]
 800495e:	f04f 0600 	mov.w	r6, #0
 8004962:	68a3      	ldr	r3, [r4, #8]
 8004964:	bf08      	it	eq
 8004966:	1aad      	subeq	r5, r5, r2
 8004968:	6922      	ldr	r2, [r4, #16]
 800496a:	bf08      	it	eq
 800496c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004970:	4293      	cmp	r3, r2
 8004972:	bfc4      	itt	gt
 8004974:	1a9b      	subgt	r3, r3, r2
 8004976:	18ed      	addgt	r5, r5, r3
 8004978:	341a      	adds	r4, #26
 800497a:	42b5      	cmp	r5, r6
 800497c:	d11a      	bne.n	80049b4 <_printf_common+0xcc>
 800497e:	2000      	movs	r0, #0
 8004980:	e008      	b.n	8004994 <_printf_common+0xac>
 8004982:	2301      	movs	r3, #1
 8004984:	4652      	mov	r2, sl
 8004986:	4649      	mov	r1, r9
 8004988:	4638      	mov	r0, r7
 800498a:	47c0      	blx	r8
 800498c:	3001      	adds	r0, #1
 800498e:	d103      	bne.n	8004998 <_printf_common+0xb0>
 8004990:	f04f 30ff 	mov.w	r0, #4294967295
 8004994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004998:	3501      	adds	r5, #1
 800499a:	e7c4      	b.n	8004926 <_printf_common+0x3e>
 800499c:	2030      	movs	r0, #48	; 0x30
 800499e:	18e1      	adds	r1, r4, r3
 80049a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049aa:	4422      	add	r2, r4
 80049ac:	3302      	adds	r3, #2
 80049ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049b2:	e7c5      	b.n	8004940 <_printf_common+0x58>
 80049b4:	2301      	movs	r3, #1
 80049b6:	4622      	mov	r2, r4
 80049b8:	4649      	mov	r1, r9
 80049ba:	4638      	mov	r0, r7
 80049bc:	47c0      	blx	r8
 80049be:	3001      	adds	r0, #1
 80049c0:	d0e6      	beq.n	8004990 <_printf_common+0xa8>
 80049c2:	3601      	adds	r6, #1
 80049c4:	e7d9      	b.n	800497a <_printf_common+0x92>
	...

080049c8 <_printf_i>:
 80049c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049cc:	460c      	mov	r4, r1
 80049ce:	7e27      	ldrb	r7, [r4, #24]
 80049d0:	4691      	mov	r9, r2
 80049d2:	2f78      	cmp	r7, #120	; 0x78
 80049d4:	4680      	mov	r8, r0
 80049d6:	469a      	mov	sl, r3
 80049d8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049de:	d807      	bhi.n	80049f0 <_printf_i+0x28>
 80049e0:	2f62      	cmp	r7, #98	; 0x62
 80049e2:	d80a      	bhi.n	80049fa <_printf_i+0x32>
 80049e4:	2f00      	cmp	r7, #0
 80049e6:	f000 80d9 	beq.w	8004b9c <_printf_i+0x1d4>
 80049ea:	2f58      	cmp	r7, #88	; 0x58
 80049ec:	f000 80a4 	beq.w	8004b38 <_printf_i+0x170>
 80049f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049f8:	e03a      	b.n	8004a70 <_printf_i+0xa8>
 80049fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049fe:	2b15      	cmp	r3, #21
 8004a00:	d8f6      	bhi.n	80049f0 <_printf_i+0x28>
 8004a02:	a001      	add	r0, pc, #4	; (adr r0, 8004a08 <_printf_i+0x40>)
 8004a04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004a08:	08004a61 	.word	0x08004a61
 8004a0c:	08004a75 	.word	0x08004a75
 8004a10:	080049f1 	.word	0x080049f1
 8004a14:	080049f1 	.word	0x080049f1
 8004a18:	080049f1 	.word	0x080049f1
 8004a1c:	080049f1 	.word	0x080049f1
 8004a20:	08004a75 	.word	0x08004a75
 8004a24:	080049f1 	.word	0x080049f1
 8004a28:	080049f1 	.word	0x080049f1
 8004a2c:	080049f1 	.word	0x080049f1
 8004a30:	080049f1 	.word	0x080049f1
 8004a34:	08004b83 	.word	0x08004b83
 8004a38:	08004aa5 	.word	0x08004aa5
 8004a3c:	08004b65 	.word	0x08004b65
 8004a40:	080049f1 	.word	0x080049f1
 8004a44:	080049f1 	.word	0x080049f1
 8004a48:	08004ba5 	.word	0x08004ba5
 8004a4c:	080049f1 	.word	0x080049f1
 8004a50:	08004aa5 	.word	0x08004aa5
 8004a54:	080049f1 	.word	0x080049f1
 8004a58:	080049f1 	.word	0x080049f1
 8004a5c:	08004b6d 	.word	0x08004b6d
 8004a60:	680b      	ldr	r3, [r1, #0]
 8004a62:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a66:	1d1a      	adds	r2, r3, #4
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	600a      	str	r2, [r1, #0]
 8004a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a70:	2301      	movs	r3, #1
 8004a72:	e0a4      	b.n	8004bbe <_printf_i+0x1f6>
 8004a74:	6825      	ldr	r5, [r4, #0]
 8004a76:	6808      	ldr	r0, [r1, #0]
 8004a78:	062e      	lsls	r6, r5, #24
 8004a7a:	f100 0304 	add.w	r3, r0, #4
 8004a7e:	d50a      	bpl.n	8004a96 <_printf_i+0xce>
 8004a80:	6805      	ldr	r5, [r0, #0]
 8004a82:	600b      	str	r3, [r1, #0]
 8004a84:	2d00      	cmp	r5, #0
 8004a86:	da03      	bge.n	8004a90 <_printf_i+0xc8>
 8004a88:	232d      	movs	r3, #45	; 0x2d
 8004a8a:	426d      	negs	r5, r5
 8004a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a90:	230a      	movs	r3, #10
 8004a92:	485e      	ldr	r0, [pc, #376]	; (8004c0c <_printf_i+0x244>)
 8004a94:	e019      	b.n	8004aca <_printf_i+0x102>
 8004a96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a9a:	6805      	ldr	r5, [r0, #0]
 8004a9c:	600b      	str	r3, [r1, #0]
 8004a9e:	bf18      	it	ne
 8004aa0:	b22d      	sxthne	r5, r5
 8004aa2:	e7ef      	b.n	8004a84 <_printf_i+0xbc>
 8004aa4:	680b      	ldr	r3, [r1, #0]
 8004aa6:	6825      	ldr	r5, [r4, #0]
 8004aa8:	1d18      	adds	r0, r3, #4
 8004aaa:	6008      	str	r0, [r1, #0]
 8004aac:	0628      	lsls	r0, r5, #24
 8004aae:	d501      	bpl.n	8004ab4 <_printf_i+0xec>
 8004ab0:	681d      	ldr	r5, [r3, #0]
 8004ab2:	e002      	b.n	8004aba <_printf_i+0xf2>
 8004ab4:	0669      	lsls	r1, r5, #25
 8004ab6:	d5fb      	bpl.n	8004ab0 <_printf_i+0xe8>
 8004ab8:	881d      	ldrh	r5, [r3, #0]
 8004aba:	2f6f      	cmp	r7, #111	; 0x6f
 8004abc:	bf0c      	ite	eq
 8004abe:	2308      	moveq	r3, #8
 8004ac0:	230a      	movne	r3, #10
 8004ac2:	4852      	ldr	r0, [pc, #328]	; (8004c0c <_printf_i+0x244>)
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aca:	6866      	ldr	r6, [r4, #4]
 8004acc:	2e00      	cmp	r6, #0
 8004ace:	bfa8      	it	ge
 8004ad0:	6821      	ldrge	r1, [r4, #0]
 8004ad2:	60a6      	str	r6, [r4, #8]
 8004ad4:	bfa4      	itt	ge
 8004ad6:	f021 0104 	bicge.w	r1, r1, #4
 8004ada:	6021      	strge	r1, [r4, #0]
 8004adc:	b90d      	cbnz	r5, 8004ae2 <_printf_i+0x11a>
 8004ade:	2e00      	cmp	r6, #0
 8004ae0:	d04d      	beq.n	8004b7e <_printf_i+0x1b6>
 8004ae2:	4616      	mov	r6, r2
 8004ae4:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ae8:	fb03 5711 	mls	r7, r3, r1, r5
 8004aec:	5dc7      	ldrb	r7, [r0, r7]
 8004aee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004af2:	462f      	mov	r7, r5
 8004af4:	42bb      	cmp	r3, r7
 8004af6:	460d      	mov	r5, r1
 8004af8:	d9f4      	bls.n	8004ae4 <_printf_i+0x11c>
 8004afa:	2b08      	cmp	r3, #8
 8004afc:	d10b      	bne.n	8004b16 <_printf_i+0x14e>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	07df      	lsls	r7, r3, #31
 8004b02:	d508      	bpl.n	8004b16 <_printf_i+0x14e>
 8004b04:	6923      	ldr	r3, [r4, #16]
 8004b06:	6861      	ldr	r1, [r4, #4]
 8004b08:	4299      	cmp	r1, r3
 8004b0a:	bfde      	ittt	le
 8004b0c:	2330      	movle	r3, #48	; 0x30
 8004b0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004b16:	1b92      	subs	r2, r2, r6
 8004b18:	6122      	str	r2, [r4, #16]
 8004b1a:	464b      	mov	r3, r9
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	4640      	mov	r0, r8
 8004b20:	f8cd a000 	str.w	sl, [sp]
 8004b24:	aa03      	add	r2, sp, #12
 8004b26:	f7ff fedf 	bl	80048e8 <_printf_common>
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	d14c      	bne.n	8004bc8 <_printf_i+0x200>
 8004b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8004b32:	b004      	add	sp, #16
 8004b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b38:	4834      	ldr	r0, [pc, #208]	; (8004c0c <_printf_i+0x244>)
 8004b3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b3e:	680e      	ldr	r6, [r1, #0]
 8004b40:	6823      	ldr	r3, [r4, #0]
 8004b42:	f856 5b04 	ldr.w	r5, [r6], #4
 8004b46:	061f      	lsls	r7, r3, #24
 8004b48:	600e      	str	r6, [r1, #0]
 8004b4a:	d514      	bpl.n	8004b76 <_printf_i+0x1ae>
 8004b4c:	07d9      	lsls	r1, r3, #31
 8004b4e:	bf44      	itt	mi
 8004b50:	f043 0320 	orrmi.w	r3, r3, #32
 8004b54:	6023      	strmi	r3, [r4, #0]
 8004b56:	b91d      	cbnz	r5, 8004b60 <_printf_i+0x198>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	f023 0320 	bic.w	r3, r3, #32
 8004b5e:	6023      	str	r3, [r4, #0]
 8004b60:	2310      	movs	r3, #16
 8004b62:	e7af      	b.n	8004ac4 <_printf_i+0xfc>
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	f043 0320 	orr.w	r3, r3, #32
 8004b6a:	6023      	str	r3, [r4, #0]
 8004b6c:	2378      	movs	r3, #120	; 0x78
 8004b6e:	4828      	ldr	r0, [pc, #160]	; (8004c10 <_printf_i+0x248>)
 8004b70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b74:	e7e3      	b.n	8004b3e <_printf_i+0x176>
 8004b76:	065e      	lsls	r6, r3, #25
 8004b78:	bf48      	it	mi
 8004b7a:	b2ad      	uxthmi	r5, r5
 8004b7c:	e7e6      	b.n	8004b4c <_printf_i+0x184>
 8004b7e:	4616      	mov	r6, r2
 8004b80:	e7bb      	b.n	8004afa <_printf_i+0x132>
 8004b82:	680b      	ldr	r3, [r1, #0]
 8004b84:	6826      	ldr	r6, [r4, #0]
 8004b86:	1d1d      	adds	r5, r3, #4
 8004b88:	6960      	ldr	r0, [r4, #20]
 8004b8a:	600d      	str	r5, [r1, #0]
 8004b8c:	0635      	lsls	r5, r6, #24
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	d501      	bpl.n	8004b96 <_printf_i+0x1ce>
 8004b92:	6018      	str	r0, [r3, #0]
 8004b94:	e002      	b.n	8004b9c <_printf_i+0x1d4>
 8004b96:	0671      	lsls	r1, r6, #25
 8004b98:	d5fb      	bpl.n	8004b92 <_printf_i+0x1ca>
 8004b9a:	8018      	strh	r0, [r3, #0]
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	4616      	mov	r6, r2
 8004ba0:	6123      	str	r3, [r4, #16]
 8004ba2:	e7ba      	b.n	8004b1a <_printf_i+0x152>
 8004ba4:	680b      	ldr	r3, [r1, #0]
 8004ba6:	1d1a      	adds	r2, r3, #4
 8004ba8:	600a      	str	r2, [r1, #0]
 8004baa:	681e      	ldr	r6, [r3, #0]
 8004bac:	2100      	movs	r1, #0
 8004bae:	4630      	mov	r0, r6
 8004bb0:	6862      	ldr	r2, [r4, #4]
 8004bb2:	f000 fb15 	bl	80051e0 <memchr>
 8004bb6:	b108      	cbz	r0, 8004bbc <_printf_i+0x1f4>
 8004bb8:	1b80      	subs	r0, r0, r6
 8004bba:	6060      	str	r0, [r4, #4]
 8004bbc:	6863      	ldr	r3, [r4, #4]
 8004bbe:	6123      	str	r3, [r4, #16]
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc6:	e7a8      	b.n	8004b1a <_printf_i+0x152>
 8004bc8:	4632      	mov	r2, r6
 8004bca:	4649      	mov	r1, r9
 8004bcc:	4640      	mov	r0, r8
 8004bce:	6923      	ldr	r3, [r4, #16]
 8004bd0:	47d0      	blx	sl
 8004bd2:	3001      	adds	r0, #1
 8004bd4:	d0ab      	beq.n	8004b2e <_printf_i+0x166>
 8004bd6:	6823      	ldr	r3, [r4, #0]
 8004bd8:	079b      	lsls	r3, r3, #30
 8004bda:	d413      	bmi.n	8004c04 <_printf_i+0x23c>
 8004bdc:	68e0      	ldr	r0, [r4, #12]
 8004bde:	9b03      	ldr	r3, [sp, #12]
 8004be0:	4298      	cmp	r0, r3
 8004be2:	bfb8      	it	lt
 8004be4:	4618      	movlt	r0, r3
 8004be6:	e7a4      	b.n	8004b32 <_printf_i+0x16a>
 8004be8:	2301      	movs	r3, #1
 8004bea:	4632      	mov	r2, r6
 8004bec:	4649      	mov	r1, r9
 8004bee:	4640      	mov	r0, r8
 8004bf0:	47d0      	blx	sl
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d09b      	beq.n	8004b2e <_printf_i+0x166>
 8004bf6:	3501      	adds	r5, #1
 8004bf8:	68e3      	ldr	r3, [r4, #12]
 8004bfa:	9903      	ldr	r1, [sp, #12]
 8004bfc:	1a5b      	subs	r3, r3, r1
 8004bfe:	42ab      	cmp	r3, r5
 8004c00:	dcf2      	bgt.n	8004be8 <_printf_i+0x220>
 8004c02:	e7eb      	b.n	8004bdc <_printf_i+0x214>
 8004c04:	2500      	movs	r5, #0
 8004c06:	f104 0619 	add.w	r6, r4, #25
 8004c0a:	e7f5      	b.n	8004bf8 <_printf_i+0x230>
 8004c0c:	080057d9 	.word	0x080057d9
 8004c10:	080057ea 	.word	0x080057ea

08004c14 <__swbuf_r>:
 8004c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c16:	460e      	mov	r6, r1
 8004c18:	4614      	mov	r4, r2
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	b118      	cbz	r0, 8004c26 <__swbuf_r+0x12>
 8004c1e:	6983      	ldr	r3, [r0, #24]
 8004c20:	b90b      	cbnz	r3, 8004c26 <__swbuf_r+0x12>
 8004c22:	f000 f9d9 	bl	8004fd8 <__sinit>
 8004c26:	4b21      	ldr	r3, [pc, #132]	; (8004cac <__swbuf_r+0x98>)
 8004c28:	429c      	cmp	r4, r3
 8004c2a:	d12b      	bne.n	8004c84 <__swbuf_r+0x70>
 8004c2c:	686c      	ldr	r4, [r5, #4]
 8004c2e:	69a3      	ldr	r3, [r4, #24]
 8004c30:	60a3      	str	r3, [r4, #8]
 8004c32:	89a3      	ldrh	r3, [r4, #12]
 8004c34:	071a      	lsls	r2, r3, #28
 8004c36:	d52f      	bpl.n	8004c98 <__swbuf_r+0x84>
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	b36b      	cbz	r3, 8004c98 <__swbuf_r+0x84>
 8004c3c:	6923      	ldr	r3, [r4, #16]
 8004c3e:	6820      	ldr	r0, [r4, #0]
 8004c40:	b2f6      	uxtb	r6, r6
 8004c42:	1ac0      	subs	r0, r0, r3
 8004c44:	6963      	ldr	r3, [r4, #20]
 8004c46:	4637      	mov	r7, r6
 8004c48:	4283      	cmp	r3, r0
 8004c4a:	dc04      	bgt.n	8004c56 <__swbuf_r+0x42>
 8004c4c:	4621      	mov	r1, r4
 8004c4e:	4628      	mov	r0, r5
 8004c50:	f000 f92e 	bl	8004eb0 <_fflush_r>
 8004c54:	bb30      	cbnz	r0, 8004ca4 <__swbuf_r+0x90>
 8004c56:	68a3      	ldr	r3, [r4, #8]
 8004c58:	3001      	adds	r0, #1
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	60a3      	str	r3, [r4, #8]
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	6022      	str	r2, [r4, #0]
 8004c64:	701e      	strb	r6, [r3, #0]
 8004c66:	6963      	ldr	r3, [r4, #20]
 8004c68:	4283      	cmp	r3, r0
 8004c6a:	d004      	beq.n	8004c76 <__swbuf_r+0x62>
 8004c6c:	89a3      	ldrh	r3, [r4, #12]
 8004c6e:	07db      	lsls	r3, r3, #31
 8004c70:	d506      	bpl.n	8004c80 <__swbuf_r+0x6c>
 8004c72:	2e0a      	cmp	r6, #10
 8004c74:	d104      	bne.n	8004c80 <__swbuf_r+0x6c>
 8004c76:	4621      	mov	r1, r4
 8004c78:	4628      	mov	r0, r5
 8004c7a:	f000 f919 	bl	8004eb0 <_fflush_r>
 8004c7e:	b988      	cbnz	r0, 8004ca4 <__swbuf_r+0x90>
 8004c80:	4638      	mov	r0, r7
 8004c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c84:	4b0a      	ldr	r3, [pc, #40]	; (8004cb0 <__swbuf_r+0x9c>)
 8004c86:	429c      	cmp	r4, r3
 8004c88:	d101      	bne.n	8004c8e <__swbuf_r+0x7a>
 8004c8a:	68ac      	ldr	r4, [r5, #8]
 8004c8c:	e7cf      	b.n	8004c2e <__swbuf_r+0x1a>
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <__swbuf_r+0xa0>)
 8004c90:	429c      	cmp	r4, r3
 8004c92:	bf08      	it	eq
 8004c94:	68ec      	ldreq	r4, [r5, #12]
 8004c96:	e7ca      	b.n	8004c2e <__swbuf_r+0x1a>
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f000 f80c 	bl	8004cb8 <__swsetup_r>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	d0cb      	beq.n	8004c3c <__swbuf_r+0x28>
 8004ca4:	f04f 37ff 	mov.w	r7, #4294967295
 8004ca8:	e7ea      	b.n	8004c80 <__swbuf_r+0x6c>
 8004caa:	bf00      	nop
 8004cac:	0800581c 	.word	0x0800581c
 8004cb0:	0800583c 	.word	0x0800583c
 8004cb4:	080057fc 	.word	0x080057fc

08004cb8 <__swsetup_r>:
 8004cb8:	4b32      	ldr	r3, [pc, #200]	; (8004d84 <__swsetup_r+0xcc>)
 8004cba:	b570      	push	{r4, r5, r6, lr}
 8004cbc:	681d      	ldr	r5, [r3, #0]
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	b125      	cbz	r5, 8004cce <__swsetup_r+0x16>
 8004cc4:	69ab      	ldr	r3, [r5, #24]
 8004cc6:	b913      	cbnz	r3, 8004cce <__swsetup_r+0x16>
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f000 f985 	bl	8004fd8 <__sinit>
 8004cce:	4b2e      	ldr	r3, [pc, #184]	; (8004d88 <__swsetup_r+0xd0>)
 8004cd0:	429c      	cmp	r4, r3
 8004cd2:	d10f      	bne.n	8004cf4 <__swsetup_r+0x3c>
 8004cd4:	686c      	ldr	r4, [r5, #4]
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cdc:	0719      	lsls	r1, r3, #28
 8004cde:	d42c      	bmi.n	8004d3a <__swsetup_r+0x82>
 8004ce0:	06dd      	lsls	r5, r3, #27
 8004ce2:	d411      	bmi.n	8004d08 <__swsetup_r+0x50>
 8004ce4:	2309      	movs	r3, #9
 8004ce6:	6033      	str	r3, [r6, #0]
 8004ce8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004cec:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	e03e      	b.n	8004d72 <__swsetup_r+0xba>
 8004cf4:	4b25      	ldr	r3, [pc, #148]	; (8004d8c <__swsetup_r+0xd4>)
 8004cf6:	429c      	cmp	r4, r3
 8004cf8:	d101      	bne.n	8004cfe <__swsetup_r+0x46>
 8004cfa:	68ac      	ldr	r4, [r5, #8]
 8004cfc:	e7eb      	b.n	8004cd6 <__swsetup_r+0x1e>
 8004cfe:	4b24      	ldr	r3, [pc, #144]	; (8004d90 <__swsetup_r+0xd8>)
 8004d00:	429c      	cmp	r4, r3
 8004d02:	bf08      	it	eq
 8004d04:	68ec      	ldreq	r4, [r5, #12]
 8004d06:	e7e6      	b.n	8004cd6 <__swsetup_r+0x1e>
 8004d08:	0758      	lsls	r0, r3, #29
 8004d0a:	d512      	bpl.n	8004d32 <__swsetup_r+0x7a>
 8004d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d0e:	b141      	cbz	r1, 8004d22 <__swsetup_r+0x6a>
 8004d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d14:	4299      	cmp	r1, r3
 8004d16:	d002      	beq.n	8004d1e <__swsetup_r+0x66>
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f7ff fc41 	bl	80045a0 <_free_r>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	6363      	str	r3, [r4, #52]	; 0x34
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d28:	81a3      	strh	r3, [r4, #12]
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	6063      	str	r3, [r4, #4]
 8004d2e:	6923      	ldr	r3, [r4, #16]
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	f043 0308 	orr.w	r3, r3, #8
 8004d38:	81a3      	strh	r3, [r4, #12]
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	b94b      	cbnz	r3, 8004d52 <__swsetup_r+0x9a>
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d48:	d003      	beq.n	8004d52 <__swsetup_r+0x9a>
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	f000 fa07 	bl	8005160 <__smakebuf_r>
 8004d52:	89a0      	ldrh	r0, [r4, #12]
 8004d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d58:	f010 0301 	ands.w	r3, r0, #1
 8004d5c:	d00a      	beq.n	8004d74 <__swsetup_r+0xbc>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	60a3      	str	r3, [r4, #8]
 8004d62:	6963      	ldr	r3, [r4, #20]
 8004d64:	425b      	negs	r3, r3
 8004d66:	61a3      	str	r3, [r4, #24]
 8004d68:	6923      	ldr	r3, [r4, #16]
 8004d6a:	b943      	cbnz	r3, 8004d7e <__swsetup_r+0xc6>
 8004d6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004d70:	d1ba      	bne.n	8004ce8 <__swsetup_r+0x30>
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	0781      	lsls	r1, r0, #30
 8004d76:	bf58      	it	pl
 8004d78:	6963      	ldrpl	r3, [r4, #20]
 8004d7a:	60a3      	str	r3, [r4, #8]
 8004d7c:	e7f4      	b.n	8004d68 <__swsetup_r+0xb0>
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e7f7      	b.n	8004d72 <__swsetup_r+0xba>
 8004d82:	bf00      	nop
 8004d84:	20000014 	.word	0x20000014
 8004d88:	0800581c 	.word	0x0800581c
 8004d8c:	0800583c 	.word	0x0800583c
 8004d90:	080057fc 	.word	0x080057fc

08004d94 <abort>:
 8004d94:	2006      	movs	r0, #6
 8004d96:	b508      	push	{r3, lr}
 8004d98:	f000 fa58 	bl	800524c <raise>
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f7fc fa3d 	bl	800121c <_exit>
	...

08004da4 <__sflush_r>:
 8004da4:	898a      	ldrh	r2, [r1, #12]
 8004da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004daa:	4605      	mov	r5, r0
 8004dac:	0710      	lsls	r0, r2, #28
 8004dae:	460c      	mov	r4, r1
 8004db0:	d458      	bmi.n	8004e64 <__sflush_r+0xc0>
 8004db2:	684b      	ldr	r3, [r1, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	dc05      	bgt.n	8004dc4 <__sflush_r+0x20>
 8004db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	dc02      	bgt.n	8004dc4 <__sflush_r+0x20>
 8004dbe:	2000      	movs	r0, #0
 8004dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dc6:	2e00      	cmp	r6, #0
 8004dc8:	d0f9      	beq.n	8004dbe <__sflush_r+0x1a>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004dd0:	682f      	ldr	r7, [r5, #0]
 8004dd2:	602b      	str	r3, [r5, #0]
 8004dd4:	d032      	beq.n	8004e3c <__sflush_r+0x98>
 8004dd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	075a      	lsls	r2, r3, #29
 8004ddc:	d505      	bpl.n	8004dea <__sflush_r+0x46>
 8004dde:	6863      	ldr	r3, [r4, #4]
 8004de0:	1ac0      	subs	r0, r0, r3
 8004de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004de4:	b10b      	cbz	r3, 8004dea <__sflush_r+0x46>
 8004de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004de8:	1ac0      	subs	r0, r0, r3
 8004dea:	2300      	movs	r3, #0
 8004dec:	4602      	mov	r2, r0
 8004dee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004df0:	4628      	mov	r0, r5
 8004df2:	6a21      	ldr	r1, [r4, #32]
 8004df4:	47b0      	blx	r6
 8004df6:	1c43      	adds	r3, r0, #1
 8004df8:	89a3      	ldrh	r3, [r4, #12]
 8004dfa:	d106      	bne.n	8004e0a <__sflush_r+0x66>
 8004dfc:	6829      	ldr	r1, [r5, #0]
 8004dfe:	291d      	cmp	r1, #29
 8004e00:	d82c      	bhi.n	8004e5c <__sflush_r+0xb8>
 8004e02:	4a2a      	ldr	r2, [pc, #168]	; (8004eac <__sflush_r+0x108>)
 8004e04:	40ca      	lsrs	r2, r1
 8004e06:	07d6      	lsls	r6, r2, #31
 8004e08:	d528      	bpl.n	8004e5c <__sflush_r+0xb8>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	6062      	str	r2, [r4, #4]
 8004e0e:	6922      	ldr	r2, [r4, #16]
 8004e10:	04d9      	lsls	r1, r3, #19
 8004e12:	6022      	str	r2, [r4, #0]
 8004e14:	d504      	bpl.n	8004e20 <__sflush_r+0x7c>
 8004e16:	1c42      	adds	r2, r0, #1
 8004e18:	d101      	bne.n	8004e1e <__sflush_r+0x7a>
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	b903      	cbnz	r3, 8004e20 <__sflush_r+0x7c>
 8004e1e:	6560      	str	r0, [r4, #84]	; 0x54
 8004e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e22:	602f      	str	r7, [r5, #0]
 8004e24:	2900      	cmp	r1, #0
 8004e26:	d0ca      	beq.n	8004dbe <__sflush_r+0x1a>
 8004e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e2c:	4299      	cmp	r1, r3
 8004e2e:	d002      	beq.n	8004e36 <__sflush_r+0x92>
 8004e30:	4628      	mov	r0, r5
 8004e32:	f7ff fbb5 	bl	80045a0 <_free_r>
 8004e36:	2000      	movs	r0, #0
 8004e38:	6360      	str	r0, [r4, #52]	; 0x34
 8004e3a:	e7c1      	b.n	8004dc0 <__sflush_r+0x1c>
 8004e3c:	6a21      	ldr	r1, [r4, #32]
 8004e3e:	2301      	movs	r3, #1
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b0      	blx	r6
 8004e44:	1c41      	adds	r1, r0, #1
 8004e46:	d1c7      	bne.n	8004dd8 <__sflush_r+0x34>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0c4      	beq.n	8004dd8 <__sflush_r+0x34>
 8004e4e:	2b1d      	cmp	r3, #29
 8004e50:	d001      	beq.n	8004e56 <__sflush_r+0xb2>
 8004e52:	2b16      	cmp	r3, #22
 8004e54:	d101      	bne.n	8004e5a <__sflush_r+0xb6>
 8004e56:	602f      	str	r7, [r5, #0]
 8004e58:	e7b1      	b.n	8004dbe <__sflush_r+0x1a>
 8004e5a:	89a3      	ldrh	r3, [r4, #12]
 8004e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	e7ad      	b.n	8004dc0 <__sflush_r+0x1c>
 8004e64:	690f      	ldr	r7, [r1, #16]
 8004e66:	2f00      	cmp	r7, #0
 8004e68:	d0a9      	beq.n	8004dbe <__sflush_r+0x1a>
 8004e6a:	0793      	lsls	r3, r2, #30
 8004e6c:	bf18      	it	ne
 8004e6e:	2300      	movne	r3, #0
 8004e70:	680e      	ldr	r6, [r1, #0]
 8004e72:	bf08      	it	eq
 8004e74:	694b      	ldreq	r3, [r1, #20]
 8004e76:	eba6 0807 	sub.w	r8, r6, r7
 8004e7a:	600f      	str	r7, [r1, #0]
 8004e7c:	608b      	str	r3, [r1, #8]
 8004e7e:	f1b8 0f00 	cmp.w	r8, #0
 8004e82:	dd9c      	ble.n	8004dbe <__sflush_r+0x1a>
 8004e84:	4643      	mov	r3, r8
 8004e86:	463a      	mov	r2, r7
 8004e88:	4628      	mov	r0, r5
 8004e8a:	6a21      	ldr	r1, [r4, #32]
 8004e8c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e8e:	47b0      	blx	r6
 8004e90:	2800      	cmp	r0, #0
 8004e92:	dc06      	bgt.n	8004ea2 <__sflush_r+0xfe>
 8004e94:	89a3      	ldrh	r3, [r4, #12]
 8004e96:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e9e:	81a3      	strh	r3, [r4, #12]
 8004ea0:	e78e      	b.n	8004dc0 <__sflush_r+0x1c>
 8004ea2:	4407      	add	r7, r0
 8004ea4:	eba8 0800 	sub.w	r8, r8, r0
 8004ea8:	e7e9      	b.n	8004e7e <__sflush_r+0xda>
 8004eaa:	bf00      	nop
 8004eac:	20400001 	.word	0x20400001

08004eb0 <_fflush_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	690b      	ldr	r3, [r1, #16]
 8004eb4:	4605      	mov	r5, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	b913      	cbnz	r3, 8004ec0 <_fflush_r+0x10>
 8004eba:	2500      	movs	r5, #0
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	bd38      	pop	{r3, r4, r5, pc}
 8004ec0:	b118      	cbz	r0, 8004eca <_fflush_r+0x1a>
 8004ec2:	6983      	ldr	r3, [r0, #24]
 8004ec4:	b90b      	cbnz	r3, 8004eca <_fflush_r+0x1a>
 8004ec6:	f000 f887 	bl	8004fd8 <__sinit>
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <_fflush_r+0x6c>)
 8004ecc:	429c      	cmp	r4, r3
 8004ece:	d11b      	bne.n	8004f08 <_fflush_r+0x58>
 8004ed0:	686c      	ldr	r4, [r5, #4]
 8004ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ef      	beq.n	8004eba <_fflush_r+0xa>
 8004eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004edc:	07d0      	lsls	r0, r2, #31
 8004ede:	d404      	bmi.n	8004eea <_fflush_r+0x3a>
 8004ee0:	0599      	lsls	r1, r3, #22
 8004ee2:	d402      	bmi.n	8004eea <_fflush_r+0x3a>
 8004ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ee6:	f000 f915 	bl	8005114 <__retarget_lock_acquire_recursive>
 8004eea:	4628      	mov	r0, r5
 8004eec:	4621      	mov	r1, r4
 8004eee:	f7ff ff59 	bl	8004da4 <__sflush_r>
 8004ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ef4:	4605      	mov	r5, r0
 8004ef6:	07da      	lsls	r2, r3, #31
 8004ef8:	d4e0      	bmi.n	8004ebc <_fflush_r+0xc>
 8004efa:	89a3      	ldrh	r3, [r4, #12]
 8004efc:	059b      	lsls	r3, r3, #22
 8004efe:	d4dd      	bmi.n	8004ebc <_fflush_r+0xc>
 8004f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f02:	f000 f908 	bl	8005116 <__retarget_lock_release_recursive>
 8004f06:	e7d9      	b.n	8004ebc <_fflush_r+0xc>
 8004f08:	4b05      	ldr	r3, [pc, #20]	; (8004f20 <_fflush_r+0x70>)
 8004f0a:	429c      	cmp	r4, r3
 8004f0c:	d101      	bne.n	8004f12 <_fflush_r+0x62>
 8004f0e:	68ac      	ldr	r4, [r5, #8]
 8004f10:	e7df      	b.n	8004ed2 <_fflush_r+0x22>
 8004f12:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <_fflush_r+0x74>)
 8004f14:	429c      	cmp	r4, r3
 8004f16:	bf08      	it	eq
 8004f18:	68ec      	ldreq	r4, [r5, #12]
 8004f1a:	e7da      	b.n	8004ed2 <_fflush_r+0x22>
 8004f1c:	0800581c 	.word	0x0800581c
 8004f20:	0800583c 	.word	0x0800583c
 8004f24:	080057fc 	.word	0x080057fc

08004f28 <std>:
 8004f28:	2300      	movs	r3, #0
 8004f2a:	b510      	push	{r4, lr}
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f36:	6083      	str	r3, [r0, #8]
 8004f38:	8181      	strh	r1, [r0, #12]
 8004f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8004f3c:	81c2      	strh	r2, [r0, #14]
 8004f3e:	6183      	str	r3, [r0, #24]
 8004f40:	4619      	mov	r1, r3
 8004f42:	2208      	movs	r2, #8
 8004f44:	305c      	adds	r0, #92	; 0x5c
 8004f46:	f7fd fb3d 	bl	80025c4 <memset>
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <std+0x38>)
 8004f4c:	6224      	str	r4, [r4, #32]
 8004f4e:	6263      	str	r3, [r4, #36]	; 0x24
 8004f50:	4b04      	ldr	r3, [pc, #16]	; (8004f64 <std+0x3c>)
 8004f52:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <std+0x40>)
 8004f56:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f58:	4b04      	ldr	r3, [pc, #16]	; (8004f6c <std+0x44>)
 8004f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	bf00      	nop
 8004f60:	08005285 	.word	0x08005285
 8004f64:	080052a7 	.word	0x080052a7
 8004f68:	080052df 	.word	0x080052df
 8004f6c:	08005303 	.word	0x08005303

08004f70 <_cleanup_r>:
 8004f70:	4901      	ldr	r1, [pc, #4]	; (8004f78 <_cleanup_r+0x8>)
 8004f72:	f000 b8af 	b.w	80050d4 <_fwalk_reent>
 8004f76:	bf00      	nop
 8004f78:	08004eb1 	.word	0x08004eb1

08004f7c <__sfmoreglue>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	2568      	movs	r5, #104	; 0x68
 8004f80:	1e4a      	subs	r2, r1, #1
 8004f82:	4355      	muls	r5, r2
 8004f84:	460e      	mov	r6, r1
 8004f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f8a:	f7ff fa35 	bl	80043f8 <_malloc_r>
 8004f8e:	4604      	mov	r4, r0
 8004f90:	b140      	cbz	r0, 8004fa4 <__sfmoreglue+0x28>
 8004f92:	2100      	movs	r1, #0
 8004f94:	e9c0 1600 	strd	r1, r6, [r0]
 8004f98:	300c      	adds	r0, #12
 8004f9a:	60a0      	str	r0, [r4, #8]
 8004f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fa0:	f7fd fb10 	bl	80025c4 <memset>
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}

08004fa8 <__sfp_lock_acquire>:
 8004fa8:	4801      	ldr	r0, [pc, #4]	; (8004fb0 <__sfp_lock_acquire+0x8>)
 8004faa:	f000 b8b3 	b.w	8005114 <__retarget_lock_acquire_recursive>
 8004fae:	bf00      	nop
 8004fb0:	20000460 	.word	0x20000460

08004fb4 <__sfp_lock_release>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__sfp_lock_release+0x8>)
 8004fb6:	f000 b8ae 	b.w	8005116 <__retarget_lock_release_recursive>
 8004fba:	bf00      	nop
 8004fbc:	20000460 	.word	0x20000460

08004fc0 <__sinit_lock_acquire>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__sinit_lock_acquire+0x8>)
 8004fc2:	f000 b8a7 	b.w	8005114 <__retarget_lock_acquire_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	2000045b 	.word	0x2000045b

08004fcc <__sinit_lock_release>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__sinit_lock_release+0x8>)
 8004fce:	f000 b8a2 	b.w	8005116 <__retarget_lock_release_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	2000045b 	.word	0x2000045b

08004fd8 <__sinit>:
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	4604      	mov	r4, r0
 8004fdc:	f7ff fff0 	bl	8004fc0 <__sinit_lock_acquire>
 8004fe0:	69a3      	ldr	r3, [r4, #24]
 8004fe2:	b11b      	cbz	r3, 8004fec <__sinit+0x14>
 8004fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fe8:	f7ff bff0 	b.w	8004fcc <__sinit_lock_release>
 8004fec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8004ff2:	4b13      	ldr	r3, [pc, #76]	; (8005040 <__sinit+0x68>)
 8004ff4:	4a13      	ldr	r2, [pc, #76]	; (8005044 <__sinit+0x6c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ffa:	42a3      	cmp	r3, r4
 8004ffc:	bf08      	it	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	4620      	mov	r0, r4
 8005002:	bf08      	it	eq
 8005004:	61a3      	streq	r3, [r4, #24]
 8005006:	f000 f81f 	bl	8005048 <__sfp>
 800500a:	6060      	str	r0, [r4, #4]
 800500c:	4620      	mov	r0, r4
 800500e:	f000 f81b 	bl	8005048 <__sfp>
 8005012:	60a0      	str	r0, [r4, #8]
 8005014:	4620      	mov	r0, r4
 8005016:	f000 f817 	bl	8005048 <__sfp>
 800501a:	2200      	movs	r2, #0
 800501c:	2104      	movs	r1, #4
 800501e:	60e0      	str	r0, [r4, #12]
 8005020:	6860      	ldr	r0, [r4, #4]
 8005022:	f7ff ff81 	bl	8004f28 <std>
 8005026:	2201      	movs	r2, #1
 8005028:	2109      	movs	r1, #9
 800502a:	68a0      	ldr	r0, [r4, #8]
 800502c:	f7ff ff7c 	bl	8004f28 <std>
 8005030:	2202      	movs	r2, #2
 8005032:	2112      	movs	r1, #18
 8005034:	68e0      	ldr	r0, [r4, #12]
 8005036:	f7ff ff77 	bl	8004f28 <std>
 800503a:	2301      	movs	r3, #1
 800503c:	61a3      	str	r3, [r4, #24]
 800503e:	e7d1      	b.n	8004fe4 <__sinit+0xc>
 8005040:	08005424 	.word	0x08005424
 8005044:	08004f71 	.word	0x08004f71

08005048 <__sfp>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	4607      	mov	r7, r0
 800504c:	f7ff ffac 	bl	8004fa8 <__sfp_lock_acquire>
 8005050:	4b1e      	ldr	r3, [pc, #120]	; (80050cc <__sfp+0x84>)
 8005052:	681e      	ldr	r6, [r3, #0]
 8005054:	69b3      	ldr	r3, [r6, #24]
 8005056:	b913      	cbnz	r3, 800505e <__sfp+0x16>
 8005058:	4630      	mov	r0, r6
 800505a:	f7ff ffbd 	bl	8004fd8 <__sinit>
 800505e:	3648      	adds	r6, #72	; 0x48
 8005060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005064:	3b01      	subs	r3, #1
 8005066:	d503      	bpl.n	8005070 <__sfp+0x28>
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	b30b      	cbz	r3, 80050b0 <__sfp+0x68>
 800506c:	6836      	ldr	r6, [r6, #0]
 800506e:	e7f7      	b.n	8005060 <__sfp+0x18>
 8005070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005074:	b9d5      	cbnz	r5, 80050ac <__sfp+0x64>
 8005076:	4b16      	ldr	r3, [pc, #88]	; (80050d0 <__sfp+0x88>)
 8005078:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800507c:	60e3      	str	r3, [r4, #12]
 800507e:	6665      	str	r5, [r4, #100]	; 0x64
 8005080:	f000 f847 	bl	8005112 <__retarget_lock_init_recursive>
 8005084:	f7ff ff96 	bl	8004fb4 <__sfp_lock_release>
 8005088:	2208      	movs	r2, #8
 800508a:	4629      	mov	r1, r5
 800508c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005090:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005094:	6025      	str	r5, [r4, #0]
 8005096:	61a5      	str	r5, [r4, #24]
 8005098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800509c:	f7fd fa92 	bl	80025c4 <memset>
 80050a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050a8:	4620      	mov	r0, r4
 80050aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050ac:	3468      	adds	r4, #104	; 0x68
 80050ae:	e7d9      	b.n	8005064 <__sfp+0x1c>
 80050b0:	2104      	movs	r1, #4
 80050b2:	4638      	mov	r0, r7
 80050b4:	f7ff ff62 	bl	8004f7c <__sfmoreglue>
 80050b8:	4604      	mov	r4, r0
 80050ba:	6030      	str	r0, [r6, #0]
 80050bc:	2800      	cmp	r0, #0
 80050be:	d1d5      	bne.n	800506c <__sfp+0x24>
 80050c0:	f7ff ff78 	bl	8004fb4 <__sfp_lock_release>
 80050c4:	230c      	movs	r3, #12
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	e7ee      	b.n	80050a8 <__sfp+0x60>
 80050ca:	bf00      	nop
 80050cc:	08005424 	.word	0x08005424
 80050d0:	ffff0001 	.word	0xffff0001

080050d4 <_fwalk_reent>:
 80050d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050d8:	4606      	mov	r6, r0
 80050da:	4688      	mov	r8, r1
 80050dc:	2700      	movs	r7, #0
 80050de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050e6:	f1b9 0901 	subs.w	r9, r9, #1
 80050ea:	d505      	bpl.n	80050f8 <_fwalk_reent+0x24>
 80050ec:	6824      	ldr	r4, [r4, #0]
 80050ee:	2c00      	cmp	r4, #0
 80050f0:	d1f7      	bne.n	80050e2 <_fwalk_reent+0xe>
 80050f2:	4638      	mov	r0, r7
 80050f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050f8:	89ab      	ldrh	r3, [r5, #12]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d907      	bls.n	800510e <_fwalk_reent+0x3a>
 80050fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005102:	3301      	adds	r3, #1
 8005104:	d003      	beq.n	800510e <_fwalk_reent+0x3a>
 8005106:	4629      	mov	r1, r5
 8005108:	4630      	mov	r0, r6
 800510a:	47c0      	blx	r8
 800510c:	4307      	orrs	r7, r0
 800510e:	3568      	adds	r5, #104	; 0x68
 8005110:	e7e9      	b.n	80050e6 <_fwalk_reent+0x12>

08005112 <__retarget_lock_init_recursive>:
 8005112:	4770      	bx	lr

08005114 <__retarget_lock_acquire_recursive>:
 8005114:	4770      	bx	lr

08005116 <__retarget_lock_release_recursive>:
 8005116:	4770      	bx	lr

08005118 <__swhatbuf_r>:
 8005118:	b570      	push	{r4, r5, r6, lr}
 800511a:	460e      	mov	r6, r1
 800511c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005120:	4614      	mov	r4, r2
 8005122:	2900      	cmp	r1, #0
 8005124:	461d      	mov	r5, r3
 8005126:	b096      	sub	sp, #88	; 0x58
 8005128:	da07      	bge.n	800513a <__swhatbuf_r+0x22>
 800512a:	2300      	movs	r3, #0
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	89b3      	ldrh	r3, [r6, #12]
 8005130:	061a      	lsls	r2, r3, #24
 8005132:	d410      	bmi.n	8005156 <__swhatbuf_r+0x3e>
 8005134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005138:	e00e      	b.n	8005158 <__swhatbuf_r+0x40>
 800513a:	466a      	mov	r2, sp
 800513c:	f000 f908 	bl	8005350 <_fstat_r>
 8005140:	2800      	cmp	r0, #0
 8005142:	dbf2      	blt.n	800512a <__swhatbuf_r+0x12>
 8005144:	9a01      	ldr	r2, [sp, #4]
 8005146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800514a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800514e:	425a      	negs	r2, r3
 8005150:	415a      	adcs	r2, r3
 8005152:	602a      	str	r2, [r5, #0]
 8005154:	e7ee      	b.n	8005134 <__swhatbuf_r+0x1c>
 8005156:	2340      	movs	r3, #64	; 0x40
 8005158:	2000      	movs	r0, #0
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	b016      	add	sp, #88	; 0x58
 800515e:	bd70      	pop	{r4, r5, r6, pc}

08005160 <__smakebuf_r>:
 8005160:	898b      	ldrh	r3, [r1, #12]
 8005162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005164:	079d      	lsls	r5, r3, #30
 8005166:	4606      	mov	r6, r0
 8005168:	460c      	mov	r4, r1
 800516a:	d507      	bpl.n	800517c <__smakebuf_r+0x1c>
 800516c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005170:	6023      	str	r3, [r4, #0]
 8005172:	6123      	str	r3, [r4, #16]
 8005174:	2301      	movs	r3, #1
 8005176:	6163      	str	r3, [r4, #20]
 8005178:	b002      	add	sp, #8
 800517a:	bd70      	pop	{r4, r5, r6, pc}
 800517c:	466a      	mov	r2, sp
 800517e:	ab01      	add	r3, sp, #4
 8005180:	f7ff ffca 	bl	8005118 <__swhatbuf_r>
 8005184:	9900      	ldr	r1, [sp, #0]
 8005186:	4605      	mov	r5, r0
 8005188:	4630      	mov	r0, r6
 800518a:	f7ff f935 	bl	80043f8 <_malloc_r>
 800518e:	b948      	cbnz	r0, 80051a4 <__smakebuf_r+0x44>
 8005190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005194:	059a      	lsls	r2, r3, #22
 8005196:	d4ef      	bmi.n	8005178 <__smakebuf_r+0x18>
 8005198:	f023 0303 	bic.w	r3, r3, #3
 800519c:	f043 0302 	orr.w	r3, r3, #2
 80051a0:	81a3      	strh	r3, [r4, #12]
 80051a2:	e7e3      	b.n	800516c <__smakebuf_r+0xc>
 80051a4:	4b0d      	ldr	r3, [pc, #52]	; (80051dc <__smakebuf_r+0x7c>)
 80051a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	6020      	str	r0, [r4, #0]
 80051ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	9b00      	ldr	r3, [sp, #0]
 80051b4:	6120      	str	r0, [r4, #16]
 80051b6:	6163      	str	r3, [r4, #20]
 80051b8:	9b01      	ldr	r3, [sp, #4]
 80051ba:	b15b      	cbz	r3, 80051d4 <__smakebuf_r+0x74>
 80051bc:	4630      	mov	r0, r6
 80051be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051c2:	f000 f8d7 	bl	8005374 <_isatty_r>
 80051c6:	b128      	cbz	r0, 80051d4 <__smakebuf_r+0x74>
 80051c8:	89a3      	ldrh	r3, [r4, #12]
 80051ca:	f023 0303 	bic.w	r3, r3, #3
 80051ce:	f043 0301 	orr.w	r3, r3, #1
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	89a0      	ldrh	r0, [r4, #12]
 80051d6:	4305      	orrs	r5, r0
 80051d8:	81a5      	strh	r5, [r4, #12]
 80051da:	e7cd      	b.n	8005178 <__smakebuf_r+0x18>
 80051dc:	08004f71 	.word	0x08004f71

080051e0 <memchr>:
 80051e0:	4603      	mov	r3, r0
 80051e2:	b510      	push	{r4, lr}
 80051e4:	b2c9      	uxtb	r1, r1
 80051e6:	4402      	add	r2, r0
 80051e8:	4293      	cmp	r3, r2
 80051ea:	4618      	mov	r0, r3
 80051ec:	d101      	bne.n	80051f2 <memchr+0x12>
 80051ee:	2000      	movs	r0, #0
 80051f0:	e003      	b.n	80051fa <memchr+0x1a>
 80051f2:	7804      	ldrb	r4, [r0, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	428c      	cmp	r4, r1
 80051f8:	d1f6      	bne.n	80051e8 <memchr+0x8>
 80051fa:	bd10      	pop	{r4, pc}

080051fc <_raise_r>:
 80051fc:	291f      	cmp	r1, #31
 80051fe:	b538      	push	{r3, r4, r5, lr}
 8005200:	4604      	mov	r4, r0
 8005202:	460d      	mov	r5, r1
 8005204:	d904      	bls.n	8005210 <_raise_r+0x14>
 8005206:	2316      	movs	r3, #22
 8005208:	6003      	str	r3, [r0, #0]
 800520a:	f04f 30ff 	mov.w	r0, #4294967295
 800520e:	bd38      	pop	{r3, r4, r5, pc}
 8005210:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005212:	b112      	cbz	r2, 800521a <_raise_r+0x1e>
 8005214:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005218:	b94b      	cbnz	r3, 800522e <_raise_r+0x32>
 800521a:	4620      	mov	r0, r4
 800521c:	f000 f830 	bl	8005280 <_getpid_r>
 8005220:	462a      	mov	r2, r5
 8005222:	4601      	mov	r1, r0
 8005224:	4620      	mov	r0, r4
 8005226:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800522a:	f000 b817 	b.w	800525c <_kill_r>
 800522e:	2b01      	cmp	r3, #1
 8005230:	d00a      	beq.n	8005248 <_raise_r+0x4c>
 8005232:	1c59      	adds	r1, r3, #1
 8005234:	d103      	bne.n	800523e <_raise_r+0x42>
 8005236:	2316      	movs	r3, #22
 8005238:	6003      	str	r3, [r0, #0]
 800523a:	2001      	movs	r0, #1
 800523c:	e7e7      	b.n	800520e <_raise_r+0x12>
 800523e:	2400      	movs	r4, #0
 8005240:	4628      	mov	r0, r5
 8005242:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005246:	4798      	blx	r3
 8005248:	2000      	movs	r0, #0
 800524a:	e7e0      	b.n	800520e <_raise_r+0x12>

0800524c <raise>:
 800524c:	4b02      	ldr	r3, [pc, #8]	; (8005258 <raise+0xc>)
 800524e:	4601      	mov	r1, r0
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	f7ff bfd3 	b.w	80051fc <_raise_r>
 8005256:	bf00      	nop
 8005258:	20000014 	.word	0x20000014

0800525c <_kill_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	2300      	movs	r3, #0
 8005260:	4d06      	ldr	r5, [pc, #24]	; (800527c <_kill_r+0x20>)
 8005262:	4604      	mov	r4, r0
 8005264:	4608      	mov	r0, r1
 8005266:	4611      	mov	r1, r2
 8005268:	602b      	str	r3, [r5, #0]
 800526a:	f7fb ffc7 	bl	80011fc <_kill>
 800526e:	1c43      	adds	r3, r0, #1
 8005270:	d102      	bne.n	8005278 <_kill_r+0x1c>
 8005272:	682b      	ldr	r3, [r5, #0]
 8005274:	b103      	cbz	r3, 8005278 <_kill_r+0x1c>
 8005276:	6023      	str	r3, [r4, #0]
 8005278:	bd38      	pop	{r3, r4, r5, pc}
 800527a:	bf00      	nop
 800527c:	20000454 	.word	0x20000454

08005280 <_getpid_r>:
 8005280:	f7fb bfb5 	b.w	80011ee <_getpid>

08005284 <__sread>:
 8005284:	b510      	push	{r4, lr}
 8005286:	460c      	mov	r4, r1
 8005288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800528c:	f000 f894 	bl	80053b8 <_read_r>
 8005290:	2800      	cmp	r0, #0
 8005292:	bfab      	itete	ge
 8005294:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005296:	89a3      	ldrhlt	r3, [r4, #12]
 8005298:	181b      	addge	r3, r3, r0
 800529a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800529e:	bfac      	ite	ge
 80052a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052a2:	81a3      	strhlt	r3, [r4, #12]
 80052a4:	bd10      	pop	{r4, pc}

080052a6 <__swrite>:
 80052a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052aa:	461f      	mov	r7, r3
 80052ac:	898b      	ldrh	r3, [r1, #12]
 80052ae:	4605      	mov	r5, r0
 80052b0:	05db      	lsls	r3, r3, #23
 80052b2:	460c      	mov	r4, r1
 80052b4:	4616      	mov	r6, r2
 80052b6:	d505      	bpl.n	80052c4 <__swrite+0x1e>
 80052b8:	2302      	movs	r3, #2
 80052ba:	2200      	movs	r2, #0
 80052bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052c0:	f000 f868 	bl	8005394 <_lseek_r>
 80052c4:	89a3      	ldrh	r3, [r4, #12]
 80052c6:	4632      	mov	r2, r6
 80052c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052cc:	81a3      	strh	r3, [r4, #12]
 80052ce:	4628      	mov	r0, r5
 80052d0:	463b      	mov	r3, r7
 80052d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052da:	f000 b817 	b.w	800530c <_write_r>

080052de <__sseek>:
 80052de:	b510      	push	{r4, lr}
 80052e0:	460c      	mov	r4, r1
 80052e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052e6:	f000 f855 	bl	8005394 <_lseek_r>
 80052ea:	1c43      	adds	r3, r0, #1
 80052ec:	89a3      	ldrh	r3, [r4, #12]
 80052ee:	bf15      	itete	ne
 80052f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052fa:	81a3      	strheq	r3, [r4, #12]
 80052fc:	bf18      	it	ne
 80052fe:	81a3      	strhne	r3, [r4, #12]
 8005300:	bd10      	pop	{r4, pc}

08005302 <__sclose>:
 8005302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005306:	f000 b813 	b.w	8005330 <_close_r>
	...

0800530c <_write_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4604      	mov	r4, r0
 8005310:	4608      	mov	r0, r1
 8005312:	4611      	mov	r1, r2
 8005314:	2200      	movs	r2, #0
 8005316:	4d05      	ldr	r5, [pc, #20]	; (800532c <_write_r+0x20>)
 8005318:	602a      	str	r2, [r5, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	f7fb ffa5 	bl	800126a <_write>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_write_r+0x1e>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_write_r+0x1e>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	20000454 	.word	0x20000454

08005330 <_close_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	2300      	movs	r3, #0
 8005334:	4d05      	ldr	r5, [pc, #20]	; (800534c <_close_r+0x1c>)
 8005336:	4604      	mov	r4, r0
 8005338:	4608      	mov	r0, r1
 800533a:	602b      	str	r3, [r5, #0]
 800533c:	f7fb ffb1 	bl	80012a2 <_close>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_close_r+0x1a>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_close_r+0x1a>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	20000454 	.word	0x20000454

08005350 <_fstat_r>:
 8005350:	b538      	push	{r3, r4, r5, lr}
 8005352:	2300      	movs	r3, #0
 8005354:	4d06      	ldr	r5, [pc, #24]	; (8005370 <_fstat_r+0x20>)
 8005356:	4604      	mov	r4, r0
 8005358:	4608      	mov	r0, r1
 800535a:	4611      	mov	r1, r2
 800535c:	602b      	str	r3, [r5, #0]
 800535e:	f7fb ffab 	bl	80012b8 <_fstat>
 8005362:	1c43      	adds	r3, r0, #1
 8005364:	d102      	bne.n	800536c <_fstat_r+0x1c>
 8005366:	682b      	ldr	r3, [r5, #0]
 8005368:	b103      	cbz	r3, 800536c <_fstat_r+0x1c>
 800536a:	6023      	str	r3, [r4, #0]
 800536c:	bd38      	pop	{r3, r4, r5, pc}
 800536e:	bf00      	nop
 8005370:	20000454 	.word	0x20000454

08005374 <_isatty_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	2300      	movs	r3, #0
 8005378:	4d05      	ldr	r5, [pc, #20]	; (8005390 <_isatty_r+0x1c>)
 800537a:	4604      	mov	r4, r0
 800537c:	4608      	mov	r0, r1
 800537e:	602b      	str	r3, [r5, #0]
 8005380:	f7fb ffa9 	bl	80012d6 <_isatty>
 8005384:	1c43      	adds	r3, r0, #1
 8005386:	d102      	bne.n	800538e <_isatty_r+0x1a>
 8005388:	682b      	ldr	r3, [r5, #0]
 800538a:	b103      	cbz	r3, 800538e <_isatty_r+0x1a>
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	bd38      	pop	{r3, r4, r5, pc}
 8005390:	20000454 	.word	0x20000454

08005394 <_lseek_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	2200      	movs	r2, #0
 800539e:	4d05      	ldr	r5, [pc, #20]	; (80053b4 <_lseek_r+0x20>)
 80053a0:	602a      	str	r2, [r5, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	f7fb ffa1 	bl	80012ea <_lseek>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d102      	bne.n	80053b2 <_lseek_r+0x1e>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	b103      	cbz	r3, 80053b2 <_lseek_r+0x1e>
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	20000454 	.word	0x20000454

080053b8 <_read_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4604      	mov	r4, r0
 80053bc:	4608      	mov	r0, r1
 80053be:	4611      	mov	r1, r2
 80053c0:	2200      	movs	r2, #0
 80053c2:	4d05      	ldr	r5, [pc, #20]	; (80053d8 <_read_r+0x20>)
 80053c4:	602a      	str	r2, [r5, #0]
 80053c6:	461a      	mov	r2, r3
 80053c8:	f7fb ff32 	bl	8001230 <_read>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d102      	bne.n	80053d6 <_read_r+0x1e>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	b103      	cbz	r3, 80053d6 <_read_r+0x1e>
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	20000454 	.word	0x20000454

080053dc <_init>:
 80053dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053de:	bf00      	nop
 80053e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e2:	bc08      	pop	{r3}
 80053e4:	469e      	mov	lr, r3
 80053e6:	4770      	bx	lr

080053e8 <_fini>:
 80053e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ea:	bf00      	nop
 80053ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ee:	bc08      	pop	{r3}
 80053f0:	469e      	mov	lr, r3
 80053f2:	4770      	bx	lr
