
ReadRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c64  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001d70  08001d70  00011d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d90  08001d90  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001d90  08001d90  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d90  08001d90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d90  08001d90  00011d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d94  08001d94  00011d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  2000000c  08001da4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08001da4  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000514d  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001365  00000000  00000000  00025182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  000264e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000004f0  00000000  00000000  00026a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f4b  00000000  00000000  00026f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005d25  00000000  00000000  0003cea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e09d  00000000  00000000  00042bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c0c65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001490  00000000  00000000  000c0cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d58 	.word	0x08001d58

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001d58 	.word	0x08001d58

0800014c <QueueFull>:
 *  Created on: Mar 16, 2021
 *      Author: Mikkel
 */
#include "circle_queue.h"

int QueueFull(struct Queue *q){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	return (((q->pointWR +1) % SIZE_OF_QUEUE) == q->pointRD);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	885b      	ldrh	r3, [r3, #2]
 8000158:	1c59      	adds	r1, r3, #1
 800015a:	4b0c      	ldr	r3, [pc, #48]	; (800018c <QueueFull+0x40>)
 800015c:	fb83 2301 	smull	r2, r3, r3, r1
 8000160:	10da      	asrs	r2, r3, #3
 8000162:	17cb      	asrs	r3, r1, #31
 8000164:	1ad2      	subs	r2, r2, r3
 8000166:	4613      	mov	r3, r2
 8000168:	009b      	lsls	r3, r3, #2
 800016a:	4413      	add	r3, r2
 800016c:	009a      	lsls	r2, r3, #2
 800016e:	4413      	add	r3, r2
 8000170:	1aca      	subs	r2, r1, r3
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	881b      	ldrh	r3, [r3, #0]
 8000176:	429a      	cmp	r2, r3
 8000178:	bf0c      	ite	eq
 800017a:	2301      	moveq	r3, #1
 800017c:	2300      	movne	r3, #0
 800017e:	b2db      	uxtb	r3, r3
}
 8000180:	4618      	mov	r0, r3
 8000182:	370c      	adds	r7, #12
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	51eb851f 	.word	0x51eb851f

08000190 <QueueEmpty>:

int QueueEmpty(struct Queue *q){
 8000190:	b480      	push	{r7}
 8000192:	b083      	sub	sp, #12
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
	return (q->pointWR == q->pointRD);
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	885a      	ldrh	r2, [r3, #2]
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	881b      	ldrh	r3, [r3, #0]
 80001a0:	429a      	cmp	r2, r3
 80001a2:	bf0c      	ite	eq
 80001a4:	2301      	moveq	r3, #1
 80001a6:	2300      	movne	r3, #0
 80001a8:	b2db      	uxtb	r3, r3
}
 80001aa:	4618      	mov	r0, r3
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr

080001b4 <EnterQueue>:

int EnterQueue(struct Queue *q, uint8_t data) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
 80001bc:	460b      	mov	r3, r1
 80001be:	70fb      	strb	r3, [r7, #3]

	if (QueueFull(q)) {
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f7ff ffc3 	bl	800014c <QueueFull>
 80001c6:	4603      	mov	r3, r0
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d001      	beq.n	80001d0 <EnterQueue+0x1c>
		return 0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	e015      	b.n	80001fc <EnterQueue+0x48>
	}
	else {
		q->queue[q->pointWR] = data;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	885b      	ldrh	r3, [r3, #2]
 80001d4:	461a      	mov	r2, r3
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4413      	add	r3, r2
 80001da:	78fa      	ldrb	r2, [r7, #3]
 80001dc:	711a      	strb	r2, [r3, #4]


		if ((q->pointWR + 1) == SIZE_OF_QUEUE){
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	885b      	ldrh	r3, [r3, #2]
 80001e2:	2b18      	cmp	r3, #24
 80001e4:	d103      	bne.n	80001ee <EnterQueue+0x3a>
			q->pointWR = 0;
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	2200      	movs	r2, #0
 80001ea:	805a      	strh	r2, [r3, #2]
 80001ec:	e005      	b.n	80001fa <EnterQueue+0x46>
		}
		else{
			q->pointWR += 1;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	885b      	ldrh	r3, [r3, #2]
 80001f2:	3301      	adds	r3, #1
 80001f4:	b29a      	uxth	r2, r3
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	805a      	strh	r2, [r3, #2]
		}

	}
	return 1;
 80001fa:	2301      	movs	r3, #1
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <LeaveQueue>:

int LeaveQueue(struct Queue *q, uint8_t *data) {
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	6039      	str	r1, [r7, #0]
	if (QueueEmpty(q)){
 800020e:	6878      	ldr	r0, [r7, #4]
 8000210:	f7ff ffbe 	bl	8000190 <QueueEmpty>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <LeaveQueue+0x1a>
		return 0;
 800021a:	2300      	movs	r3, #0
 800021c:	e016      	b.n	800024c <LeaveQueue+0x48>
	}
	else {
		*data = q->queue[q->pointRD];
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	461a      	mov	r2, r3
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4413      	add	r3, r2
 8000228:	791a      	ldrb	r2, [r3, #4]
 800022a:	683b      	ldr	r3, [r7, #0]
 800022c:	701a      	strb	r2, [r3, #0]
		if((q->pointRD + 1) ==SIZE_OF_QUEUE){
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	881b      	ldrh	r3, [r3, #0]
 8000232:	2b18      	cmp	r3, #24
 8000234:	d103      	bne.n	800023e <LeaveQueue+0x3a>
			q->pointRD = 0;
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	2200      	movs	r2, #0
 800023a:	801a      	strh	r2, [r3, #0]
 800023c:	e005      	b.n	800024a <LeaveQueue+0x46>
		}
		else{
			q->pointRD +=1;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	881b      	ldrh	r3, [r3, #0]
 8000242:	3301      	adds	r3, #1
 8000244:	b29a      	uxth	r2, r3
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	801a      	strh	r2, [r3, #0]
		}
	}
	return 1;
 800024a:	2301      	movs	r3, #1
}
 800024c:	4618      	mov	r0, r3
 800024e:	3708      	adds	r7, #8
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000258:	f000 fb26 	bl	80008a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_CAN_Start(&hcan);
 800025c:	4805      	ldr	r0, [pc, #20]	; (8000274 <main+0x20>)
 800025e:	f000 fd49 	bl	8000cf4 <HAL_CAN_Start>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f809 	bl	8000278 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 f8cf 	bl	8000408 <MX_GPIO_Init>
  MX_CAN_Init();
 800026a:	f000 f84b 	bl	8000304 <MX_CAN_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 sendImageData();
 800026e:	f000 f999 	bl	80005a4 <sendImageData>
  {
 8000272:	e7fc      	b.n	800026e <main+0x1a>
 8000274:	20000070 	.word	0x20000070

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b090      	sub	sp, #64	; 0x40
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0318 	add.w	r3, r7, #24
 8000282:	2228      	movs	r2, #40	; 0x28
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f001 fd5e 	bl	8001d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029a:	2301      	movs	r3, #1
 800029c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800029e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a8:	2301      	movs	r3, #1
 80002aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ac:	2302      	movs	r3, #2
 80002ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002b6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 0318 	add.w	r3, r7, #24
 80002c0:	4618      	mov	r0, r3
 80002c2:	f001 f935 	bl	8001530 <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002cc:	f000 f9fb 	bl	80006c6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d4:	2302      	movs	r3, #2
 80002d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	2102      	movs	r1, #2
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 fba0 	bl	8001a30 <HAL_RCC_ClockConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002f6:	f000 f9e6 	bl	80006c6 <Error_Handler>
  }
}
 80002fa:	bf00      	nop
 80002fc:	3740      	adds	r7, #64	; 0x40
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
	...

08000304 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN CAN_Init 0 */

	  CanFilter.FilterIdHigh = 0x0000;						// Da vi har 32 bit ID, er dette de 16 MSB af ID
 800030a:	4b39      	ldr	r3, [pc, #228]	; (80003f0 <MX_CAN_Init+0xec>)
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
	  CanFilter.FilterIdLow = 0x0010;						// Da vi har 32 bit ID, er dette de 16 LSB af ID
 8000310:	4b37      	ldr	r3, [pc, #220]	; (80003f0 <MX_CAN_Init+0xec>)
 8000312:	2210      	movs	r2, #16
 8000314:	605a      	str	r2, [r3, #4]
	  CanFilter.FilterScale = CAN_FILTERSCALE_32BIT;		// ID er et 32 bit-tal
 8000316:	4b36      	ldr	r3, [pc, #216]	; (80003f0 <MX_CAN_Init+0xec>)
 8000318:	2201      	movs	r2, #1
 800031a:	61da      	str	r2, [r3, #28]
	  CanFilter.FilterActivation = ENABLE;					// Vi aktiverer filteret
 800031c:	4b34      	ldr	r3, [pc, #208]	; (80003f0 <MX_CAN_Init+0xec>)
 800031e:	2201      	movs	r2, #1
 8000320:	621a      	str	r2, [r3, #32]
	  CanFilter.FilterBank = 0;								// Vi vælger filter 0 ud af 14 mulige filtre
 8000322:	4b33      	ldr	r3, [pc, #204]	; (80003f0 <MX_CAN_Init+0xec>)
 8000324:	2200      	movs	r2, #0
 8000326:	615a      	str	r2, [r3, #20]
	  CanFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;	// Vi vælger FIFO0 til forskel for FIFO1
 8000328:	4b31      	ldr	r3, [pc, #196]	; (80003f0 <MX_CAN_Init+0xec>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]


	  CanTxHeader.DLC = PACKAGE_SIZE;						// Der kommer 8 byte som data i beskeden
 800032e:	4b31      	ldr	r3, [pc, #196]	; (80003f4 <MX_CAN_Init+0xf0>)
 8000330:	2208      	movs	r2, #8
 8000332:	611a      	str	r2, [r3, #16]
	  CanTxHeader.ExtId = 0x00000010;						// 32 bit ID
 8000334:	4b2f      	ldr	r3, [pc, #188]	; (80003f4 <MX_CAN_Init+0xf0>)
 8000336:	2210      	movs	r2, #16
 8000338:	605a      	str	r2, [r3, #4]
	  CanTxHeader.IDE = CAN_ID_EXT;							// Vi har et extended ID = 32 bit til forskel fra standard på 16 bit
 800033a:	4b2e      	ldr	r3, [pc, #184]	; (80003f4 <MX_CAN_Init+0xf0>)
 800033c:	2204      	movs	r2, #4
 800033e:	609a      	str	r2, [r3, #8]
	  CanTxHeader.RTR = CAN_RTR_DATA;						// Vi sender data
 8000340:	4b2c      	ldr	r3, [pc, #176]	; (80003f4 <MX_CAN_Init+0xf0>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
	  CanTxHeader.TransmitGlobalTime = DISABLE;				// Der skal IKKE sendes et timestamp med hver besked
 8000346:	4b2b      	ldr	r3, [pc, #172]	; (80003f4 <MX_CAN_Init+0xf0>)
 8000348:	2200      	movs	r2, #0
 800034a:	751a      	strb	r2, [r3, #20]


	  CanRxHeader.DLC = PACKAGE_SIZE;
 800034c:	4b2a      	ldr	r3, [pc, #168]	; (80003f8 <MX_CAN_Init+0xf4>)
 800034e:	2208      	movs	r2, #8
 8000350:	611a      	str	r2, [r3, #16]
	  CanRxHeader.ExtId = 0x00000010;
 8000352:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <MX_CAN_Init+0xf4>)
 8000354:	2210      	movs	r2, #16
 8000356:	605a      	str	r2, [r3, #4]
	  CanRxHeader.IDE = CAN_ID_EXT;
 8000358:	4b27      	ldr	r3, [pc, #156]	; (80003f8 <MX_CAN_Init+0xf4>)
 800035a:	2204      	movs	r2, #4
 800035c:	609a      	str	r2, [r3, #8]
	  CanRxHeader.RTR = CAN_RTR_DATA;
 800035e:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <MX_CAN_Init+0xf4>)
 8000360:	2200      	movs	r2, #0
 8000362:	60da      	str	r2, [r3, #12]
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000364:	4b25      	ldr	r3, [pc, #148]	; (80003fc <MX_CAN_Init+0xf8>)
 8000366:	4a26      	ldr	r2, [pc, #152]	; (8000400 <MX_CAN_Init+0xfc>)
 8000368:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 800036a:	4b24      	ldr	r3, [pc, #144]	; (80003fc <MX_CAN_Init+0xf8>)
 800036c:	2209      	movs	r2, #9
 800036e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000370:	4b22      	ldr	r3, [pc, #136]	; (80003fc <MX_CAN_Init+0xf8>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000376:	4b21      	ldr	r3, [pc, #132]	; (80003fc <MX_CAN_Init+0xf8>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 800037c:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <MX_CAN_Init+0xf8>)
 800037e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000382:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <MX_CAN_Init+0xf8>)
 8000386:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800038a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800038c:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <MX_CAN_Init+0xf8>)
 800038e:	2200      	movs	r2, #0
 8000390:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <MX_CAN_Init+0xf8>)
 8000394:	2200      	movs	r2, #0
 8000396:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000398:	4b18      	ldr	r3, [pc, #96]	; (80003fc <MX_CAN_Init+0xf8>)
 800039a:	2200      	movs	r2, #0
 800039c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800039e:	4b17      	ldr	r3, [pc, #92]	; (80003fc <MX_CAN_Init+0xf8>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003a4:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MX_CAN_Init+0xf8>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80003aa:	4b14      	ldr	r3, [pc, #80]	; (80003fc <MX_CAN_Init+0xf8>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003b0:	4812      	ldr	r0, [pc, #72]	; (80003fc <MX_CAN_Init+0xf8>)
 80003b2:	f000 fadb 	bl	800096c <HAL_CAN_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_CAN_Init+0xbc>
  {
    Error_Handler();
 80003bc:	f000 f983 	bl	80006c6 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  __HAL_RCC_CAN1_CLK_ENABLE();
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <MX_CAN_Init+0x100>)
 80003c2:	69db      	ldr	r3, [r3, #28]
 80003c4:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <MX_CAN_Init+0x100>)
 80003c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003ca:	61d3      	str	r3, [r2, #28]
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <MX_CAN_Init+0x100>)
 80003ce:	69db      	ldr	r3, [r3, #28]
 80003d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]
  HAL_CAN_ConfigFilter(&hcan, &CanFilter);
 80003d8:	4905      	ldr	r1, [pc, #20]	; (80003f0 <MX_CAN_Init+0xec>)
 80003da:	4808      	ldr	r0, [pc, #32]	; (80003fc <MX_CAN_Init+0xf8>)
 80003dc:	f000 fbc1 	bl	8000b62 <HAL_CAN_ConfigFilter>
  //HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
  HAL_CAN_Start(&hcan);
 80003e0:	4806      	ldr	r0, [pc, #24]	; (80003fc <MX_CAN_Init+0xf8>)
 80003e2:	f000 fc87 	bl	8000cf4 <HAL_CAN_Start>
  /* USER CODE END CAN_Init 2 */

}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	20000048 	.word	0x20000048
 80003f4:	20000098 	.word	0x20000098
 80003f8:	200000b0 	.word	0x200000b0
 80003fc:	20000070 	.word	0x20000070
 8000400:	40006400 	.word	0x40006400
 8000404:	40021000 	.word	0x40021000

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041c:	4b3e      	ldr	r3, [pc, #248]	; (8000518 <MX_GPIO_Init+0x110>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a3d      	ldr	r2, [pc, #244]	; (8000518 <MX_GPIO_Init+0x110>)
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b3b      	ldr	r3, [pc, #236]	; (8000518 <MX_GPIO_Init+0x110>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0310 	and.w	r3, r3, #16
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000434:	4b38      	ldr	r3, [pc, #224]	; (8000518 <MX_GPIO_Init+0x110>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a37      	ldr	r2, [pc, #220]	; (8000518 <MX_GPIO_Init+0x110>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b35      	ldr	r3, [pc, #212]	; (8000518 <MX_GPIO_Init+0x110>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0320 	and.w	r3, r3, #32
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b32      	ldr	r3, [pc, #200]	; (8000518 <MX_GPIO_Init+0x110>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a31      	ldr	r2, [pc, #196]	; (8000518 <MX_GPIO_Init+0x110>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b2f      	ldr	r3, [pc, #188]	; (8000518 <MX_GPIO_Init+0x110>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000464:	4b2c      	ldr	r3, [pc, #176]	; (8000518 <MX_GPIO_Init+0x110>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	4a2b      	ldr	r2, [pc, #172]	; (8000518 <MX_GPIO_Init+0x110>)
 800046a:	f043 0308 	orr.w	r3, r3, #8
 800046e:	6193      	str	r3, [r2, #24]
 8000470:	4b29      	ldr	r3, [pc, #164]	; (8000518 <MX_GPIO_Init+0x110>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	f003 0308 	and.w	r3, r3, #8
 8000478:	603b      	str	r3, [r7, #0]
 800047a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000482:	4826      	ldr	r0, [pc, #152]	; (800051c <MX_GPIO_Init+0x114>)
 8000484:	f001 f80a 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800048e:	4824      	ldr	r0, [pc, #144]	; (8000520 <MX_GPIO_Init+0x118>)
 8000490:	f001 f804 	bl	800149c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800049a:	2301      	movs	r3, #1
 800049c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049e:	2300      	movs	r3, #0
 80004a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004a2:	2302      	movs	r3, #2
 80004a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004a6:	f107 0310 	add.w	r3, r7, #16
 80004aa:	4619      	mov	r1, r3
 80004ac:	481b      	ldr	r0, [pc, #108]	; (800051c <MX_GPIO_Init+0x114>)
 80004ae:	f000 fe71 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004b2:	23ff      	movs	r3, #255	; 0xff
 80004b4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004ba:	2302      	movs	r3, #2
 80004bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	4817      	ldr	r0, [pc, #92]	; (8000524 <MX_GPIO_Init+0x11c>)
 80004c6:	f000 fe65 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004ca:	2301      	movs	r3, #1
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ce:	4b16      	ldr	r3, [pc, #88]	; (8000528 <MX_GPIO_Init+0x120>)
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004d2:	2302      	movs	r3, #2
 80004d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004d6:	f107 0310 	add.w	r3, r7, #16
 80004da:	4619      	mov	r1, r3
 80004dc:	4810      	ldr	r0, [pc, #64]	; (8000520 <MX_GPIO_Init+0x118>)
 80004de:	f000 fe59 	bl	8001194 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e8:	2301      	movs	r3, #1
 80004ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ec:	2300      	movs	r3, #0
 80004ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f0:	2302      	movs	r3, #2
 80004f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4619      	mov	r1, r3
 80004fa:	4809      	ldr	r0, [pc, #36]	; (8000520 <MX_GPIO_Init+0x118>)
 80004fc:	f000 fe4a 	bl	8001194 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	2100      	movs	r1, #0
 8000504:	2006      	movs	r0, #6
 8000506:	f000 fe0e 	bl	8001126 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800050a:	2006      	movs	r0, #6
 800050c:	f000 fe27 	bl	800115e <HAL_NVIC_EnableIRQ>

}
 8000510:	bf00      	nop
 8000512:	3720      	adds	r7, #32
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40021000 	.word	0x40021000
 800051c:	40011000 	.word	0x40011000
 8000520:	40010c00 	.word	0x40010c00
 8000524:	40010800 	.word	0x40010800
 8000528:	10110000 	.word	0x10110000

0800052c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8000536:	88fb      	ldrh	r3, [r7, #6]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d12b      	bne.n	8000594 <HAL_GPIO_EXTI_Callback+0x68>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800053c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000540:	4816      	ldr	r0, [pc, #88]	; (800059c <HAL_GPIO_EXTI_Callback+0x70>)
 8000542:	f000 ffc3 	bl	80014cc <HAL_GPIO_TogglePin>
		//Kode der implementerer en cirkel buffer
		for (int i = 0; i<8; i++){
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	e006      	b.n	800055a <HAL_GPIO_EXTI_Callback+0x2e>
			EnterQueue(&queueRAM,(uint8_t) 15);
 800054c:	210f      	movs	r1, #15
 800054e:	4814      	ldr	r0, [pc, #80]	; (80005a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000550:	f7ff fe30 	bl	80001b4 <EnterQueue>
		for (int i = 0; i<8; i++){
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	3301      	adds	r3, #1
 8000558:	617b      	str	r3, [r7, #20]
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	2b07      	cmp	r3, #7
 800055e:	ddf5      	ble.n	800054c <HAL_GPIO_EXTI_Callback+0x20>
		}
		for (int i = 0; i<8; i++){
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	e006      	b.n	8000574 <HAL_GPIO_EXTI_Callback+0x48>
			EnterQueue(&queueRAM,(uint8_t) 27);
 8000566:	211b      	movs	r1, #27
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <HAL_GPIO_EXTI_Callback+0x74>)
 800056a:	f7ff fe23 	bl	80001b4 <EnterQueue>
		for (int i = 0; i<8; i++){
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	3301      	adds	r3, #1
 8000572:	613b      	str	r3, [r7, #16]
 8000574:	693b      	ldr	r3, [r7, #16]
 8000576:	2b07      	cmp	r3, #7
 8000578:	ddf5      	ble.n	8000566 <HAL_GPIO_EXTI_Callback+0x3a>
		}
		for (int i = 0; i<8; i++){
 800057a:	2300      	movs	r3, #0
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	e006      	b.n	800058e <HAL_GPIO_EXTI_Callback+0x62>
			EnterQueue(&queueRAM,(uint8_t) 102);
 8000580:	2166      	movs	r1, #102	; 0x66
 8000582:	4807      	ldr	r0, [pc, #28]	; (80005a0 <HAL_GPIO_EXTI_Callback+0x74>)
 8000584:	f7ff fe16 	bl	80001b4 <EnterQueue>
		for (int i = 0; i<8; i++){
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	3301      	adds	r3, #1
 800058c:	60fb      	str	r3, [r7, #12]
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	2b07      	cmp	r3, #7
 8000592:	ddf5      	ble.n	8000580 <HAL_GPIO_EXTI_Callback+0x54>
		}
		//EnterQueue(&queueRAM, (uint8_t) GPIOA->IDR &0xFF); // Sætter dataen på PA0-7 ind i køen.
	}
}
 8000594:	bf00      	nop
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40010c00 	.word	0x40010c00
 80005a0:	20000028 	.word	0x20000028

080005a4 <sendImageData>:

void sendImageData() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
	uint8_t dataToMB0[PACKAGE_SIZE] = {0};
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
	uint8_t dataToMB1[PACKAGE_SIZE] = {0};
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
	uint8_t dataToMB2[PACKAGE_SIZE] = {0};
 80005ba:	2300      	movs	r3, #0
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
	uint32_t randoMailBox;
	uint8_t hej;
	if (fillDataArray(&queueRAM, dataToMB0)) {
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	482d      	ldr	r0, [pc, #180]	; (8000680 <sendImageData+0xdc>)
 80005ca:	f000 f85f 	bl	800068c <fillDataArray>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d016      	beq.n	8000602 <sendImageData+0x5e>
		if (HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, dataToMB0, &randoMailBox) != HAL_OK) {
 80005d4:	463b      	mov	r3, r7
 80005d6:	f107 0214 	add.w	r2, r7, #20
 80005da:	492a      	ldr	r1, [pc, #168]	; (8000684 <sendImageData+0xe0>)
 80005dc:	482a      	ldr	r0, [pc, #168]	; (8000688 <sendImageData+0xe4>)
 80005de:	f000 fbcd 	bl	8000d7c <HAL_CAN_AddTxMessage>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d004      	beq.n	80005f2 <sendImageData+0x4e>
			Error_Handler();
 80005e8:	f000 f86d 	bl	80006c6 <Error_Handler>
		}
		while (HAL_CAN_IsTxMessagePending(&hcan, randoMailBox) == 1) {
 80005ec:	e001      	b.n	80005f2 <sendImageData+0x4e>
			hej = 1;
 80005ee:	2301      	movs	r3, #1
 80005f0:	77fb      	strb	r3, [r7, #31]
		while (HAL_CAN_IsTxMessagePending(&hcan, randoMailBox) == 1) {
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4824      	ldr	r0, [pc, #144]	; (8000688 <sendImageData+0xe4>)
 80005f8:	f000 fc9a 	bl	8000f30 <HAL_CAN_IsTxMessagePending>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d0f5      	beq.n	80005ee <sendImageData+0x4a>
		}
	}
	if (fillDataArray(&queueRAM, dataToMB1)) {
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	4619      	mov	r1, r3
 8000608:	481d      	ldr	r0, [pc, #116]	; (8000680 <sendImageData+0xdc>)
 800060a:	f000 f83f 	bl	800068c <fillDataArray>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d014      	beq.n	800063e <sendImageData+0x9a>
		if (HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, dataToMB1, &randoMailBox) != HAL_OK) {
 8000614:	463b      	mov	r3, r7
 8000616:	f107 020c 	add.w	r2, r7, #12
 800061a:	491a      	ldr	r1, [pc, #104]	; (8000684 <sendImageData+0xe0>)
 800061c:	481a      	ldr	r0, [pc, #104]	; (8000688 <sendImageData+0xe4>)
 800061e:	f000 fbad 	bl	8000d7c <HAL_CAN_AddTxMessage>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <sendImageData+0x88>
			Error_Handler();
 8000628:	f000 f84d 	bl	80006c6 <Error_Handler>
		}
		while (HAL_CAN_IsTxMessagePending(&hcan, randoMailBox));
 800062c:	bf00      	nop
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	4619      	mov	r1, r3
 8000632:	4815      	ldr	r0, [pc, #84]	; (8000688 <sendImageData+0xe4>)
 8000634:	f000 fc7c 	bl	8000f30 <HAL_CAN_IsTxMessagePending>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d1f7      	bne.n	800062e <sendImageData+0x8a>
	}
	if (fillDataArray(&queueRAM, dataToMB2)) {
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4619      	mov	r1, r3
 8000642:	480f      	ldr	r0, [pc, #60]	; (8000680 <sendImageData+0xdc>)
 8000644:	f000 f822 	bl	800068c <fillDataArray>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d013      	beq.n	8000676 <sendImageData+0xd2>
		if (HAL_CAN_AddTxMessage(&hcan, &CanTxHeader, dataToMB2, &randoMailBox) != HAL_OK) {
 800064e:	463b      	mov	r3, r7
 8000650:	1d3a      	adds	r2, r7, #4
 8000652:	490c      	ldr	r1, [pc, #48]	; (8000684 <sendImageData+0xe0>)
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <sendImageData+0xe4>)
 8000656:	f000 fb91 	bl	8000d7c <HAL_CAN_AddTxMessage>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <sendImageData+0xc0>
			Error_Handler();
 8000660:	f000 f831 	bl	80006c6 <Error_Handler>
		}
		while (HAL_CAN_IsTxMessagePending(&hcan, randoMailBox));
 8000664:	bf00      	nop
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	4619      	mov	r1, r3
 800066a:	4807      	ldr	r0, [pc, #28]	; (8000688 <sendImageData+0xe4>)
 800066c:	f000 fc60 	bl	8000f30 <HAL_CAN_IsTxMessagePending>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d1f7      	bne.n	8000666 <sendImageData+0xc2>
	}
}
 8000676:	bf00      	nop
 8000678:	3720      	adds	r7, #32
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000028 	.word	0x20000028
 8000684:	20000098 	.word	0x20000098
 8000688:	20000070 	.word	0x20000070

0800068c <fillDataArray>:

void fillDataArray(struct Queue *source, uint8_t *data) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < PACKAGE_SIZE; i++) {
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	e00c      	b.n	80006b6 <fillDataArray+0x2a>
		if (LeaveQueue(source, data + i)) { //Gemmer en byte fra source til data. Flere bytes gemmes ved at inkrementere data (som jo er en pointer til hvert element i data[])
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	4413      	add	r3, r2
 80006a2:	4619      	mov	r1, r3
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff fdad 	bl	8000204 <LeaveQueue>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d006      	beq.n	80006be <fillDataArray+0x32>
	for (int i = 0; i < PACKAGE_SIZE; i++) {
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3301      	adds	r3, #1
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	2b07      	cmp	r3, #7
 80006ba:	ddef      	ble.n	800069c <fillDataArray+0x10>
			continue;
		} else {
			return 0;
		}
	}
	return 1;
 80006bc:	e000      	b.n	80006c0 <fillDataArray+0x34>
			return 0;
 80006be:	bf00      	nop
}
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c6:	b480      	push	{r7}
 80006c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ca:	b672      	cpsid	i
}
 80006cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ce:	e7fe      	b.n	80006ce <Error_Handler+0x8>

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b085      	sub	sp, #20
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <HAL_MspInit+0x5c>)
 80006d8:	699b      	ldr	r3, [r3, #24]
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <HAL_MspInit+0x5c>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6193      	str	r3, [r2, #24]
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <HAL_MspInit+0x5c>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_MspInit+0x5c>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_MspInit+0x5c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	61d3      	str	r3, [r2, #28]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_MspInit+0x5c>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000706:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <HAL_MspInit+0x60>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <HAL_MspInit+0x60>)
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000722:	bf00      	nop
 8000724:	3714      	adds	r7, #20
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	40021000 	.word	0x40021000
 8000730:	40010000 	.word	0x40010000

08000734 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <HAL_CAN_MspInit+0xb0>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d143      	bne.n	80007dc <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000754:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <HAL_CAN_MspInit+0xb4>)
 8000756:	69db      	ldr	r3, [r3, #28]
 8000758:	4a23      	ldr	r2, [pc, #140]	; (80007e8 <HAL_CAN_MspInit+0xb4>)
 800075a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800075e:	61d3      	str	r3, [r2, #28]
 8000760:	4b21      	ldr	r3, [pc, #132]	; (80007e8 <HAL_CAN_MspInit+0xb4>)
 8000762:	69db      	ldr	r3, [r3, #28]
 8000764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076c:	4b1e      	ldr	r3, [pc, #120]	; (80007e8 <HAL_CAN_MspInit+0xb4>)
 800076e:	699b      	ldr	r3, [r3, #24]
 8000770:	4a1d      	ldr	r2, [pc, #116]	; (80007e8 <HAL_CAN_MspInit+0xb4>)
 8000772:	f043 0308 	orr.w	r3, r3, #8
 8000776:	6193      	str	r3, [r2, #24]
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <HAL_CAN_MspInit+0xb4>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	f003 0308 	and.w	r3, r3, #8
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	4814      	ldr	r0, [pc, #80]	; (80007ec <HAL_CAN_MspInit+0xb8>)
 800079a:	f000 fcfb 	bl	8001194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800079e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a4:	2302      	movs	r3, #2
 80007a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <HAL_CAN_MspInit+0xb8>)
 80007b4:	f000 fcee 	bl	8001194 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_CAN_MspInit+0xbc>)
 80007ba:	685b      	ldr	r3, [r3, #4]
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
 80007c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007cc:	627b      	str	r3, [r7, #36]	; 0x24
 80007ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
 80007d6:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_CAN_MspInit+0xbc>)
 80007d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007da:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40006400 	.word	0x40006400
 80007e8:	40021000 	.word	0x40021000
 80007ec:	40010c00 	.word	0x40010c00
 80007f0:	40010000 	.word	0x40010000

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <NMI_Handler+0x4>

080007fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <MemManage_Handler+0x4>

08000806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <UsageFault_Handler+0x4>

08000812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083a:	f000 f87b 	bl	8000934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}

08000842 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000846:	2001      	movs	r0, #1
 8000848:	f000 fe5a 	bl	8001500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}

08000850 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800085c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800085e:	e003      	b.n	8000868 <LoopCopyDataInit>

08000860 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000862:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000864:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000866:	3104      	adds	r1, #4

08000868 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000868:	480a      	ldr	r0, [pc, #40]	; (8000894 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800086a:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800086c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800086e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000870:	d3f6      	bcc.n	8000860 <CopyDataInit>
  ldr r2, =_sbss
 8000872:	4a0a      	ldr	r2, [pc, #40]	; (800089c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000874:	e002      	b.n	800087c <LoopFillZerobss>

08000876 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000878:	f842 3b04 	str.w	r3, [r2], #4

0800087c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800087e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000880:	d3f9      	bcc.n	8000876 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000882:	f7ff ffe5 	bl	8000850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000886:	f001 fa3b 	bl	8001d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088a:	f7ff fce3 	bl	8000254 <main>
  bx lr
 800088e:	4770      	bx	lr
  ldr r3, =_sidata
 8000890:	08001d98 	.word	0x08001d98
  ldr r0, =_sdata
 8000894:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000898:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800089c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80008a0:	200000d0 	.word	0x200000d0

080008a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC1_2_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008ac:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <HAL_Init+0x28>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <HAL_Init+0x28>)
 80008b2:	f043 0310 	orr.w	r3, r3, #16
 80008b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b8:	2003      	movs	r0, #3
 80008ba:	f000 fc29 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 f808 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c4:	f7ff ff04 	bl	80006d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40022000 	.word	0x40022000

080008d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x54>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <HAL_InitTick+0x58>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f2:	4618      	mov	r0, r3
 80008f4:	f000 fc41 	bl	800117a <HAL_SYSTICK_Config>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fe:	2301      	movs	r3, #1
 8000900:	e00e      	b.n	8000920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b0f      	cmp	r3, #15
 8000906:	d80a      	bhi.n	800091e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000908:	2200      	movs	r2, #0
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	f04f 30ff 	mov.w	r0, #4294967295
 8000910:	f000 fc09 	bl	8001126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000914:	4a06      	ldr	r2, [pc, #24]	; (8000930 <HAL_InitTick+0x5c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800091a:	2300      	movs	r3, #0
 800091c:	e000      	b.n	8000920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000000 	.word	0x20000000
 800092c:	20000008 	.word	0x20000008
 8000930:	20000004 	.word	0x20000004

08000934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x1c>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <HAL_IncTick+0x20>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4413      	add	r3, r2
 8000944:	4a03      	ldr	r2, [pc, #12]	; (8000954 <HAL_IncTick+0x20>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	20000008 	.word	0x20000008
 8000954:	200000cc 	.word	0x200000cc

08000958 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return uwTick;
 800095c:	4b02      	ldr	r3, [pc, #8]	; (8000968 <HAL_GetTick+0x10>)
 800095e:	681b      	ldr	r3, [r3, #0]
}
 8000960:	4618      	mov	r0, r3
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	200000cc 	.word	0x200000cc

0800096c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d101      	bne.n	800097e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e0ed      	b.n	8000b5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d102      	bne.n	8000990 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff fed2 	bl	8000734 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	f022 0202 	bic.w	r2, r2, #2
 800099e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009a0:	f7ff ffda 	bl	8000958 <HAL_GetTick>
 80009a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009a6:	e012      	b.n	80009ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009a8:	f7ff ffd6 	bl	8000958 <HAL_GetTick>
 80009ac:	4602      	mov	r2, r0
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	2b0a      	cmp	r3, #10
 80009b4:	d90b      	bls.n	80009ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2205      	movs	r2, #5
 80009c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e0c5      	b.n	8000b5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 0302 	and.w	r3, r3, #2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1e5      	bne.n	80009a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f042 0201 	orr.w	r2, r2, #1
 80009ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009ec:	f7ff ffb4 	bl	8000958 <HAL_GetTick>
 80009f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009f2:	e012      	b.n	8000a1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009f4:	f7ff ffb0 	bl	8000958 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	2b0a      	cmp	r3, #10
 8000a00:	d90b      	bls.n	8000a1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2205      	movs	r2, #5
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e09f      	b.n	8000b5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0e5      	beq.n	80009f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	7e1b      	ldrb	r3, [r3, #24]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d108      	bne.n	8000a42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	e007      	b.n	8000a52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000a50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	7e5b      	ldrb	r3, [r3, #25]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d108      	bne.n	8000a6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	e007      	b.n	8000a7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	7e9b      	ldrb	r3, [r3, #26]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d108      	bne.n	8000a96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f042 0220 	orr.w	r2, r2, #32
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	e007      	b.n	8000aa6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f022 0220 	bic.w	r2, r2, #32
 8000aa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	7edb      	ldrb	r3, [r3, #27]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d108      	bne.n	8000ac0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f022 0210 	bic.w	r2, r2, #16
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	e007      	b.n	8000ad0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f042 0210 	orr.w	r2, r2, #16
 8000ace:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7f1b      	ldrb	r3, [r3, #28]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d108      	bne.n	8000aea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f042 0208 	orr.w	r2, r2, #8
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e007      	b.n	8000afa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0208 	bic.w	r2, r2, #8
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7f5b      	ldrb	r3, [r3, #29]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d108      	bne.n	8000b14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f042 0204 	orr.w	r2, r2, #4
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e007      	b.n	8000b24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 0204 	bic.w	r2, r2, #4
 8000b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689a      	ldr	r2, [r3, #8]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	431a      	orrs	r2, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	ea42 0103 	orr.w	r1, r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	1e5a      	subs	r2, r3, #1
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	430a      	orrs	r2, r1
 8000b48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2201      	movs	r2, #1
 8000b54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b087      	sub	sp, #28
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
 8000b6a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b78:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b7a:	7cfb      	ldrb	r3, [r7, #19]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d003      	beq.n	8000b88 <HAL_CAN_ConfigFilter+0x26>
 8000b80:	7cfb      	ldrb	r3, [r7, #19]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	f040 80aa 	bne.w	8000cdc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b8e:	f043 0201 	orr.w	r2, r3, #1
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	f003 031f 	and.w	r3, r3, #31
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d123      	bne.n	8000c0a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	43db      	mvns	r3, r3
 8000bcc:	401a      	ands	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000be4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	3248      	adds	r2, #72	; 0x48
 8000bea:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bfe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c00:	6979      	ldr	r1, [r7, #20]
 8000c02:	3348      	adds	r3, #72	; 0x48
 8000c04:	00db      	lsls	r3, r3, #3
 8000c06:	440b      	add	r3, r1
 8000c08:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d122      	bne.n	8000c58 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	431a      	orrs	r2, r3
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	3248      	adds	r2, #72	; 0x48
 8000c38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	689b      	ldr	r3, [r3, #8]
 8000c40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c4e:	6979      	ldr	r1, [r7, #20]
 8000c50:	3348      	adds	r3, #72	; 0x48
 8000c52:	00db      	lsls	r3, r3, #3
 8000c54:	440b      	add	r3, r1
 8000c56:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d109      	bne.n	8000c74 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	401a      	ands	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000c72:	e007      	b.n	8000c84 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	431a      	orrs	r2, r3
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	691b      	ldr	r3, [r3, #16]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d109      	bne.n	8000ca0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000c9e:	e007      	b.n	8000cb0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	6a1b      	ldr	r3, [r3, #32]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d107      	bne.n	8000cc8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	431a      	orrs	r2, r3
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000cce:	f023 0201 	bic.w	r2, r3, #1
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	e006      	b.n	8000cea <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
  }
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d12e      	bne.n	8000d66 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2202      	movs	r2, #2
 8000d0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f022 0201 	bic.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d20:	f7ff fe1a 	bl	8000958 <HAL_GetTick>
 8000d24:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d26:	e012      	b.n	8000d4e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d28:	f7ff fe16 	bl	8000958 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d90b      	bls.n	8000d4e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2205      	movs	r2, #5
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e012      	b.n	8000d74 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d1e5      	bne.n	8000d28 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	2200      	movs	r2, #0
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	e006      	b.n	8000d74 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
  }
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3710      	adds	r7, #16
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d90:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d9a:	7ffb      	ldrb	r3, [r7, #31]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d003      	beq.n	8000da8 <HAL_CAN_AddTxMessage+0x2c>
 8000da0:	7ffb      	ldrb	r3, [r7, #31]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	f040 80b8 	bne.w	8000f18 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10a      	bne.n	8000dc8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d105      	bne.n	8000dc8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 80a0 	beq.w	8000f08 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	0e1b      	lsrs	r3, r3, #24
 8000dcc:	f003 0303 	and.w	r3, r3, #3
 8000dd0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d907      	bls.n	8000de8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	e09e      	b.n	8000f26 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000de8:	2201      	movs	r2, #1
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	409a      	lsls	r2, r3
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10d      	bne.n	8000e16 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e04:	68f9      	ldr	r1, [r7, #12]
 8000e06:	6809      	ldr	r1, [r1, #0]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3318      	adds	r3, #24
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	440b      	add	r3, r1
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e00f      	b.n	8000e36 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e20:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e26:	68f9      	ldr	r1, [r7, #12]
 8000e28:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000e2a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3318      	adds	r3, #24
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	440b      	add	r3, r1
 8000e34:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6819      	ldr	r1, [r3, #0]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	691a      	ldr	r2, [r3, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	3318      	adds	r3, #24
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	440b      	add	r3, r1
 8000e46:	3304      	adds	r3, #4
 8000e48:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	7d1b      	ldrb	r3, [r3, #20]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d111      	bne.n	8000e76 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	3318      	adds	r3, #24
 8000e5a:	011b      	lsls	r3, r3, #4
 8000e5c:	4413      	add	r3, r2
 8000e5e:	3304      	adds	r3, #4
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	6811      	ldr	r1, [r2, #0]
 8000e66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3318      	adds	r3, #24
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	440b      	add	r3, r1
 8000e72:	3304      	adds	r3, #4
 8000e74:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3307      	adds	r3, #7
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	061a      	lsls	r2, r3, #24
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3306      	adds	r3, #6
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	041b      	lsls	r3, r3, #16
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3305      	adds	r3, #5
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	021b      	lsls	r3, r3, #8
 8000e90:	4313      	orrs	r3, r2
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	3204      	adds	r2, #4
 8000e96:	7812      	ldrb	r2, [r2, #0]
 8000e98:	4610      	mov	r0, r2
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	6811      	ldr	r1, [r2, #0]
 8000e9e:	ea43 0200 	orr.w	r2, r3, r0
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000eac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	3303      	adds	r3, #3
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	061a      	lsls	r2, r3, #24
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3302      	adds	r3, #2
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	041b      	lsls	r3, r3, #16
 8000ebe:	431a      	orrs	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	021b      	lsls	r3, r3, #8
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	7812      	ldrb	r2, [r2, #0]
 8000ece:	4610      	mov	r0, r2
 8000ed0:	68fa      	ldr	r2, [r7, #12]
 8000ed2:	6811      	ldr	r1, [r2, #0]
 8000ed4:	ea43 0200 	orr.w	r2, r3, r0
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	011b      	lsls	r3, r3, #4
 8000edc:	440b      	add	r3, r1
 8000ede:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000ee2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3318      	adds	r3, #24
 8000eec:	011b      	lsls	r3, r3, #4
 8000eee:	4413      	add	r3, r2
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	6811      	ldr	r1, [r2, #0]
 8000ef6:	f043 0201 	orr.w	r2, r3, #1
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3318      	adds	r3, #24
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	440b      	add	r3, r1
 8000f02:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	e00e      	b.n	8000f26 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e006      	b.n	8000f26 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
  }
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr

08000f30 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
 8000f38:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f44:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f46:	7afb      	ldrb	r3, [r7, #11]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d002      	beq.n	8000f52 <HAL_CAN_IsTxMessagePending+0x22>
 8000f4c:	7afb      	ldrb	r3, [r7, #11]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d10b      	bne.n	8000f6a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	069b      	lsls	r3, r3, #26
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	069b      	lsls	r3, r3, #26
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d001      	beq.n	8000f6a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8000f66:	2301      	movs	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
	...

08000f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f94:	4013      	ands	r3, r2
 8000f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000faa:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <__NVIC_SetPriorityGrouping+0x44>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	60d3      	str	r3, [r2, #12]
}
 8000fb0:	bf00      	nop
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	f003 0307 	and.w	r3, r3, #7
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	db0b      	blt.n	8001006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	f003 021f 	and.w	r2, r3, #31
 8000ff4:	4906      	ldr	r1, [pc, #24]	; (8001010 <__NVIC_EnableIRQ+0x34>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	095b      	lsrs	r3, r3, #5
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8001002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	; (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	; 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	; 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff90 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff2d 	bl	8000f78 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff42 	bl	8000fc0 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff90 	bl	8001068 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5f 	bl	8001014 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff35 	bl	8000fdc <__NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffa2 	bl	80010cc <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
	...

08001194 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001194:	b480      	push	{r7}
 8001196:	b08b      	sub	sp, #44	; 0x2c
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011a2:	2300      	movs	r3, #0
 80011a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a6:	e169      	b.n	800147c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011a8:	2201      	movs	r2, #1
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	f040 8158 	bne.w	8001476 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	4a9a      	ldr	r2, [pc, #616]	; (8001434 <HAL_GPIO_Init+0x2a0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d05e      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011d0:	4a98      	ldr	r2, [pc, #608]	; (8001434 <HAL_GPIO_Init+0x2a0>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d875      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011d6:	4a98      	ldr	r2, [pc, #608]	; (8001438 <HAL_GPIO_Init+0x2a4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d058      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011dc:	4a96      	ldr	r2, [pc, #600]	; (8001438 <HAL_GPIO_Init+0x2a4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d86f      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011e2:	4a96      	ldr	r2, [pc, #600]	; (800143c <HAL_GPIO_Init+0x2a8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d052      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011e8:	4a94      	ldr	r2, [pc, #592]	; (800143c <HAL_GPIO_Init+0x2a8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d869      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011ee:	4a94      	ldr	r2, [pc, #592]	; (8001440 <HAL_GPIO_Init+0x2ac>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d04c      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 80011f4:	4a92      	ldr	r2, [pc, #584]	; (8001440 <HAL_GPIO_Init+0x2ac>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d863      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 80011fa:	4a92      	ldr	r2, [pc, #584]	; (8001444 <HAL_GPIO_Init+0x2b0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d046      	beq.n	800128e <HAL_GPIO_Init+0xfa>
 8001200:	4a90      	ldr	r2, [pc, #576]	; (8001444 <HAL_GPIO_Init+0x2b0>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d85d      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 8001206:	2b12      	cmp	r3, #18
 8001208:	d82a      	bhi.n	8001260 <HAL_GPIO_Init+0xcc>
 800120a:	2b12      	cmp	r3, #18
 800120c:	d859      	bhi.n	80012c2 <HAL_GPIO_Init+0x12e>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <HAL_GPIO_Init+0x80>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	0800128f 	.word	0x0800128f
 8001218:	08001269 	.word	0x08001269
 800121c:	0800127b 	.word	0x0800127b
 8001220:	080012bd 	.word	0x080012bd
 8001224:	080012c3 	.word	0x080012c3
 8001228:	080012c3 	.word	0x080012c3
 800122c:	080012c3 	.word	0x080012c3
 8001230:	080012c3 	.word	0x080012c3
 8001234:	080012c3 	.word	0x080012c3
 8001238:	080012c3 	.word	0x080012c3
 800123c:	080012c3 	.word	0x080012c3
 8001240:	080012c3 	.word	0x080012c3
 8001244:	080012c3 	.word	0x080012c3
 8001248:	080012c3 	.word	0x080012c3
 800124c:	080012c3 	.word	0x080012c3
 8001250:	080012c3 	.word	0x080012c3
 8001254:	080012c3 	.word	0x080012c3
 8001258:	08001271 	.word	0x08001271
 800125c:	08001285 	.word	0x08001285
 8001260:	4a79      	ldr	r2, [pc, #484]	; (8001448 <HAL_GPIO_Init+0x2b4>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d013      	beq.n	800128e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001266:	e02c      	b.n	80012c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	623b      	str	r3, [r7, #32]
          break;
 800126e:	e029      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	3304      	adds	r3, #4
 8001276:	623b      	str	r3, [r7, #32]
          break;
 8001278:	e024      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	3308      	adds	r3, #8
 8001280:	623b      	str	r3, [r7, #32]
          break;
 8001282:	e01f      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	330c      	adds	r3, #12
 800128a:	623b      	str	r3, [r7, #32]
          break;
 800128c:	e01a      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d102      	bne.n	800129c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001296:	2304      	movs	r3, #4
 8001298:	623b      	str	r3, [r7, #32]
          break;
 800129a:	e013      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d105      	bne.n	80012b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a4:	2308      	movs	r3, #8
 80012a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	611a      	str	r2, [r3, #16]
          break;
 80012ae:	e009      	b.n	80012c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b0:	2308      	movs	r3, #8
 80012b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	615a      	str	r2, [r3, #20]
          break;
 80012ba:	e003      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
          break;
 80012c0:	e000      	b.n	80012c4 <HAL_GPIO_Init+0x130>
          break;
 80012c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	2bff      	cmp	r3, #255	; 0xff
 80012c8:	d801      	bhi.n	80012ce <HAL_GPIO_Init+0x13a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	e001      	b.n	80012d2 <HAL_GPIO_Init+0x13e>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3304      	adds	r3, #4
 80012d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2bff      	cmp	r3, #255	; 0xff
 80012d8:	d802      	bhi.n	80012e0 <HAL_GPIO_Init+0x14c>
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	e002      	b.n	80012e6 <HAL_GPIO_Init+0x152>
 80012e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e2:	3b08      	subs	r3, #8
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	210f      	movs	r1, #15
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	401a      	ands	r2, r3
 80012f8:	6a39      	ldr	r1, [r7, #32]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	431a      	orrs	r2, r3
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 80b1 	beq.w	8001476 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001314:	4b4d      	ldr	r3, [pc, #308]	; (800144c <HAL_GPIO_Init+0x2b8>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	4a4c      	ldr	r2, [pc, #304]	; (800144c <HAL_GPIO_Init+0x2b8>)
 800131a:	f043 0301 	orr.w	r3, r3, #1
 800131e:	6193      	str	r3, [r2, #24]
 8001320:	4b4a      	ldr	r3, [pc, #296]	; (800144c <HAL_GPIO_Init+0x2b8>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	60bb      	str	r3, [r7, #8]
 800132a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800132c:	4a48      	ldr	r2, [pc, #288]	; (8001450 <HAL_GPIO_Init+0x2bc>)
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001338:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800133a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	220f      	movs	r2, #15
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	43db      	mvns	r3, r3
 800134a:	68fa      	ldr	r2, [r7, #12]
 800134c:	4013      	ands	r3, r2
 800134e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a40      	ldr	r2, [pc, #256]	; (8001454 <HAL_GPIO_Init+0x2c0>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d013      	beq.n	8001380 <HAL_GPIO_Init+0x1ec>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a3f      	ldr	r2, [pc, #252]	; (8001458 <HAL_GPIO_Init+0x2c4>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d00d      	beq.n	800137c <HAL_GPIO_Init+0x1e8>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a3e      	ldr	r2, [pc, #248]	; (800145c <HAL_GPIO_Init+0x2c8>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d007      	beq.n	8001378 <HAL_GPIO_Init+0x1e4>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <HAL_GPIO_Init+0x2cc>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d101      	bne.n	8001374 <HAL_GPIO_Init+0x1e0>
 8001370:	2303      	movs	r3, #3
 8001372:	e006      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001374:	2304      	movs	r3, #4
 8001376:	e004      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001378:	2302      	movs	r3, #2
 800137a:	e002      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_GPIO_Init+0x1ee>
 8001380:	2300      	movs	r3, #0
 8001382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001384:	f002 0203 	and.w	r2, r2, #3
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	4093      	lsls	r3, r2
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001392:	492f      	ldr	r1, [pc, #188]	; (8001450 <HAL_GPIO_Init+0x2bc>)
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d006      	beq.n	80013ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013ac:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	492c      	ldr	r1, [pc, #176]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	4928      	ldr	r1, [pc, #160]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013c4:	4013      	ands	r3, r2
 80013c6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	4922      	ldr	r1, [pc, #136]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	491e      	ldr	r1, [pc, #120]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	4918      	ldr	r1, [pc, #96]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	608b      	str	r3, [r1, #8]
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	43db      	mvns	r3, r3
 8001412:	4914      	ldr	r1, [pc, #80]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 8001414:	4013      	ands	r3, r2
 8001416:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d021      	beq.n	8001468 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001424:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	490e      	ldr	r1, [pc, #56]	; (8001464 <HAL_GPIO_Init+0x2d0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	60cb      	str	r3, [r1, #12]
 8001430:	e021      	b.n	8001476 <HAL_GPIO_Init+0x2e2>
 8001432:	bf00      	nop
 8001434:	10320000 	.word	0x10320000
 8001438:	10310000 	.word	0x10310000
 800143c:	10220000 	.word	0x10220000
 8001440:	10210000 	.word	0x10210000
 8001444:	10120000 	.word	0x10120000
 8001448:	10110000 	.word	0x10110000
 800144c:	40021000 	.word	0x40021000
 8001450:	40010000 	.word	0x40010000
 8001454:	40010800 	.word	0x40010800
 8001458:	40010c00 	.word	0x40010c00
 800145c:	40011000 	.word	0x40011000
 8001460:	40011400 	.word	0x40011400
 8001464:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_GPIO_Init+0x304>)
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	43db      	mvns	r3, r3
 8001470:	4909      	ldr	r1, [pc, #36]	; (8001498 <HAL_GPIO_Init+0x304>)
 8001472:	4013      	ands	r3, r2
 8001474:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	3301      	adds	r3, #1
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	f47f ae8e 	bne.w	80011a8 <HAL_GPIO_Init+0x14>
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	372c      	adds	r7, #44	; 0x2c
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40010400 	.word	0x40010400

0800149c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	460b      	mov	r3, r1
 80014a6:	807b      	strh	r3, [r7, #2]
 80014a8:	4613      	mov	r3, r2
 80014aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ac:	787b      	ldrb	r3, [r7, #1]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014b8:	e003      	b.n	80014c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ba:	887b      	ldrh	r3, [r7, #2]
 80014bc:	041a      	lsls	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	611a      	str	r2, [r3, #16]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4013      	ands	r3, r2
 80014e4:	041a      	lsls	r2, r3, #16
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43d9      	mvns	r1, r3
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	400b      	ands	r3, r1
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	611a      	str	r2, [r3, #16]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800150c:	695a      	ldr	r2, [r3, #20]
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d006      	beq.n	8001524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001516:	4a05      	ldr	r2, [pc, #20]	; (800152c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001518:	88fb      	ldrh	r3, [r7, #6]
 800151a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f804 	bl	800052c <HAL_GPIO_EXTI_Callback>
  }
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40010400 	.word	0x40010400

08001530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e26c      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8087 	beq.w	800165e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001550:	4b92      	ldr	r3, [pc, #584]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b04      	cmp	r3, #4
 800155a:	d00c      	beq.n	8001576 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800155c:	4b8f      	ldr	r3, [pc, #572]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d112      	bne.n	800158e <HAL_RCC_OscConfig+0x5e>
 8001568:	4b8c      	ldr	r3, [pc, #560]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001574:	d10b      	bne.n	800158e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001576:	4b89      	ldr	r3, [pc, #548]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d06c      	beq.n	800165c <HAL_RCC_OscConfig+0x12c>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d168      	bne.n	800165c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e246      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x76>
 8001598:	4b80      	ldr	r3, [pc, #512]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a7f      	ldr	r2, [pc, #508]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e02e      	b.n	8001604 <HAL_RCC_OscConfig+0xd4>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x98>
 80015ae:	4b7b      	ldr	r3, [pc, #492]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7a      	ldr	r2, [pc, #488]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b78      	ldr	r3, [pc, #480]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a77      	ldr	r2, [pc, #476]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0xd4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0xbc>
 80015d2:	4b72      	ldr	r3, [pc, #456]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a71      	ldr	r2, [pc, #452]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b6f      	ldr	r3, [pc, #444]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a6e      	ldr	r2, [pc, #440]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xd4>
 80015ec:	4b6b      	ldr	r3, [pc, #428]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6a      	ldr	r2, [pc, #424]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b68      	ldr	r3, [pc, #416]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a67      	ldr	r2, [pc, #412]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160c:	f7ff f9a4 	bl	8000958 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff f9a0 	bl	8000958 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e1fa      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b5d      	ldr	r3, [pc, #372]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0xe4>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001634:	f7ff f990 	bl	8000958 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff f98c 	bl	8000958 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e1e6      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x10c>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d063      	beq.n	8001732 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800166a:	4b4c      	ldr	r3, [pc, #304]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001676:	4b49      	ldr	r3, [pc, #292]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d11c      	bne.n	80016bc <HAL_RCC_OscConfig+0x18c>
 8001682:	4b46      	ldr	r3, [pc, #280]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d116      	bne.n	80016bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	4b43      	ldr	r3, [pc, #268]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_RCC_OscConfig+0x176>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e1ba      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b3d      	ldr	r3, [pc, #244]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	4939      	ldr	r1, [pc, #228]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	e03a      	b.n	8001732 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c4:	4b36      	ldr	r3, [pc, #216]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff f945 	bl	8000958 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff f941 	bl	8000958 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e19b      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e4:	4b2d      	ldr	r3, [pc, #180]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4927      	ldr	r1, [pc, #156]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001700:	4313      	orrs	r3, r2
 8001702:	600b      	str	r3, [r1, #0]
 8001704:	e015      	b.n	8001732 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <HAL_RCC_OscConfig+0x270>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff f924 	bl	8000958 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff f920 	bl	8000958 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e17a      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0308 	and.w	r3, r3, #8
 800173a:	2b00      	cmp	r3, #0
 800173c:	d03a      	beq.n	80017b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d019      	beq.n	800177a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001746:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_RCC_OscConfig+0x274>)
 8001748:	2201      	movs	r2, #1
 800174a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff f904 	bl	8000958 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001754:	f7ff f900 	bl	8000958 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e15a      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_RCC_OscConfig+0x26c>)
 8001768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001772:	2001      	movs	r0, #1
 8001774:	f000 faa6 	bl	8001cc4 <RCC_Delay>
 8001778:	e01c      	b.n	80017b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_RCC_OscConfig+0x274>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001780:	f7ff f8ea 	bl	8000958 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001786:	e00f      	b.n	80017a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001788:	f7ff f8e6 	bl	8000958 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d908      	bls.n	80017a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e140      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	42420000 	.word	0x42420000
 80017a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a8:	4b9e      	ldr	r3, [pc, #632]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1e9      	bne.n	8001788 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a6 	beq.w	800190e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c2:	2300      	movs	r3, #0
 80017c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c6:	4b97      	ldr	r3, [pc, #604]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d10d      	bne.n	80017ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d2:	4b94      	ldr	r3, [pc, #592]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	4a93      	ldr	r2, [pc, #588]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	61d3      	str	r3, [r2, #28]
 80017de:	4b91      	ldr	r3, [pc, #580]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ee:	4b8e      	ldr	r3, [pc, #568]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fa:	4b8b      	ldr	r3, [pc, #556]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a8a      	ldr	r2, [pc, #552]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001806:	f7ff f8a7 	bl	8000958 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180e:	f7ff f8a3 	bl	8000958 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b64      	cmp	r3, #100	; 0x64
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0fd      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	4b81      	ldr	r3, [pc, #516]	; (8001a28 <HAL_RCC_OscConfig+0x4f8>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x312>
 8001834:	4b7b      	ldr	r3, [pc, #492]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4a7a      	ldr	r2, [pc, #488]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6213      	str	r3, [r2, #32]
 8001840:	e02d      	b.n	800189e <HAL_RCC_OscConfig+0x36e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x334>
 800184a:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a75      	ldr	r2, [pc, #468]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	4b73      	ldr	r3, [pc, #460]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4a72      	ldr	r2, [pc, #456]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800185c:	f023 0304 	bic.w	r3, r3, #4
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	e01c      	b.n	800189e <HAL_RCC_OscConfig+0x36e>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b05      	cmp	r3, #5
 800186a:	d10c      	bne.n	8001886 <HAL_RCC_OscConfig+0x356>
 800186c:	4b6d      	ldr	r3, [pc, #436]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4a6c      	ldr	r2, [pc, #432]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	f043 0304 	orr.w	r3, r3, #4
 8001876:	6213      	str	r3, [r2, #32]
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	4a69      	ldr	r2, [pc, #420]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	6213      	str	r3, [r2, #32]
 8001884:	e00b      	b.n	800189e <HAL_RCC_OscConfig+0x36e>
 8001886:	4b67      	ldr	r3, [pc, #412]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001888:	6a1b      	ldr	r3, [r3, #32]
 800188a:	4a66      	ldr	r2, [pc, #408]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800188c:	f023 0301 	bic.w	r3, r3, #1
 8001890:	6213      	str	r3, [r2, #32]
 8001892:	4b64      	ldr	r3, [pc, #400]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	4a63      	ldr	r2, [pc, #396]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d015      	beq.n	80018d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff f857 	bl	8000958 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff f853 	bl	8000958 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e0ab      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c4:	4b57      	ldr	r3, [pc, #348]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0ee      	beq.n	80018ae <HAL_RCC_OscConfig+0x37e>
 80018d0:	e014      	b.n	80018fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d2:	f7ff f841 	bl	8000958 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018da:	f7ff f83d 	bl	8000958 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e095      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f0:	4b4c      	ldr	r3, [pc, #304]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80018f2:	6a1b      	ldr	r3, [r3, #32]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ee      	bne.n	80018da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d105      	bne.n	800190e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	4a47      	ldr	r2, [pc, #284]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001908:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8081 	beq.w	8001a1a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001918:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d061      	beq.n	80019e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d146      	bne.n	80019ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192c:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <HAL_RCC_OscConfig+0x4fc>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff f811 	bl	8000958 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff f80d 	bl	8000958 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e067      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d108      	bne.n	8001974 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001962:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	492d      	ldr	r1, [pc, #180]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a19      	ldr	r1, [r3, #32]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	430b      	orrs	r3, r1
 8001986:	4927      	ldr	r1, [pc, #156]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198c:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_RCC_OscConfig+0x4fc>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7fe ffe1 	bl	8000958 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199a:	f7fe ffdd 	bl	8000958 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e037      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x46a>
 80019b8:	e02f      	b.n	8001a1a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_RCC_OscConfig+0x4fc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7fe ffca 	bl	8000958 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c8:	f7fe ffc6 	bl	8000958 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e020      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x498>
 80019e6:	e018      	b.n	8001a1a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e013      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d001      	beq.n	8001a1a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	42420060 	.word	0x42420060

08001a30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0d0      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a44:	4b6a      	ldr	r3, [pc, #424]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d910      	bls.n	8001a74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 0207 	bic.w	r2, r3, #7
 8001a5a:	4965      	ldr	r1, [pc, #404]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b63      	ldr	r3, [pc, #396]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e0b8      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d020      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a8c:	4b59      	ldr	r3, [pc, #356]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4a58      	ldr	r2, [pc, #352]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a96:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa4:	4b53      	ldr	r3, [pc, #332]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4a52      	ldr	r2, [pc, #328]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001aae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	4b50      	ldr	r3, [pc, #320]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	494d      	ldr	r1, [pc, #308]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d040      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b47      	ldr	r3, [pc, #284]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d115      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e07f      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aee:	4b41      	ldr	r3, [pc, #260]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d109      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e073      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afe:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e06b      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b0e:	4b39      	ldr	r3, [pc, #228]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f023 0203 	bic.w	r2, r3, #3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4936      	ldr	r1, [pc, #216]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b20:	f7fe ff1a 	bl	8000958 <HAL_GetTick>
 8001b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b28:	f7fe ff16 	bl	8000958 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e053      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	4b2d      	ldr	r3, [pc, #180]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 020c 	and.w	r2, r3, #12
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d1eb      	bne.n	8001b28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b50:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d210      	bcs.n	8001b80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b5e:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 0207 	bic.w	r2, r3, #7
 8001b66:	4922      	ldr	r1, [pc, #136]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	683a      	ldr	r2, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e032      	b.n	8001be6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d008      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	4916      	ldr	r1, [pc, #88]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d009      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bbe:	f000 f821 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	490a      	ldr	r1, [pc, #40]	; (8001bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8001bd0:	5ccb      	ldrb	r3, [r1, r3]
 8001bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_RCC_ClockConfig+0x1cc>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x1d0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fe78 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40022000 	.word	0x40022000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08001d80 	.word	0x08001d80
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	b490      	push	{r4, r7}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c0c:	1d3c      	adds	r4, r7, #4
 8001c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c14:	f240 2301 	movw	r3, #513	; 0x201
 8001c18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c2e:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x40>
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x46>
 8001c42:	e02d      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c46:	623b      	str	r3, [r7, #32]
      break;
 8001c48:	e02d      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	0c9b      	lsrs	r3, r3, #18
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c56:	4413      	add	r3, r2
 8001c58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	0c5b      	lsrs	r3, r3, #17
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c76:	4413      	add	r3, r2
 8001c78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	4a0e      	ldr	r2, [pc, #56]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c82:	fb02 f203 	mul.w	r2, r2, r3
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8e:	e004      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	623b      	str	r3, [r7, #32]
      break;
 8001c9e:	e002      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca2:	623b      	str	r3, [r7, #32]
      break;
 8001ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc90      	pop	{r4, r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	08001d70 	.word	0x08001d70
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	007a1200 	.word	0x007a1200
 8001cc0:	003d0900 	.word	0x003d0900

08001cc4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <RCC_Delay+0x34>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <RCC_Delay+0x38>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	0a5b      	lsrs	r3, r3, #9
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	fb02 f303 	mul.w	r3, r2, r3
 8001cde:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ce0:	bf00      	nop
  }
  while (Delay --);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1e5a      	subs	r2, r3, #1
 8001ce6:	60fa      	str	r2, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f9      	bne.n	8001ce0 <RCC_Delay+0x1c>
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	10624dd3 	.word	0x10624dd3

08001d00 <__libc_init_array>:
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	2600      	movs	r6, #0
 8001d04:	4d0c      	ldr	r5, [pc, #48]	; (8001d38 <__libc_init_array+0x38>)
 8001d06:	4c0d      	ldr	r4, [pc, #52]	; (8001d3c <__libc_init_array+0x3c>)
 8001d08:	1b64      	subs	r4, r4, r5
 8001d0a:	10a4      	asrs	r4, r4, #2
 8001d0c:	42a6      	cmp	r6, r4
 8001d0e:	d109      	bne.n	8001d24 <__libc_init_array+0x24>
 8001d10:	f000 f822 	bl	8001d58 <_init>
 8001d14:	2600      	movs	r6, #0
 8001d16:	4d0a      	ldr	r5, [pc, #40]	; (8001d40 <__libc_init_array+0x40>)
 8001d18:	4c0a      	ldr	r4, [pc, #40]	; (8001d44 <__libc_init_array+0x44>)
 8001d1a:	1b64      	subs	r4, r4, r5
 8001d1c:	10a4      	asrs	r4, r4, #2
 8001d1e:	42a6      	cmp	r6, r4
 8001d20:	d105      	bne.n	8001d2e <__libc_init_array+0x2e>
 8001d22:	bd70      	pop	{r4, r5, r6, pc}
 8001d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d28:	4798      	blx	r3
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	e7ee      	b.n	8001d0c <__libc_init_array+0xc>
 8001d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d32:	4798      	blx	r3
 8001d34:	3601      	adds	r6, #1
 8001d36:	e7f2      	b.n	8001d1e <__libc_init_array+0x1e>
 8001d38:	08001d90 	.word	0x08001d90
 8001d3c:	08001d90 	.word	0x08001d90
 8001d40:	08001d90 	.word	0x08001d90
 8001d44:	08001d94 	.word	0x08001d94

08001d48 <memset>:
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4402      	add	r2, r0
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d100      	bne.n	8001d52 <memset+0xa>
 8001d50:	4770      	bx	lr
 8001d52:	f803 1b01 	strb.w	r1, [r3], #1
 8001d56:	e7f9      	b.n	8001d4c <memset+0x4>

08001d58 <_init>:
 8001d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d5a:	bf00      	nop
 8001d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d5e:	bc08      	pop	{r3}
 8001d60:	469e      	mov	lr, r3
 8001d62:	4770      	bx	lr

08001d64 <_fini>:
 8001d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d66:	bf00      	nop
 8001d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d6a:	bc08      	pop	{r3}
 8001d6c:	469e      	mov	lr, r3
 8001d6e:	4770      	bx	lr
