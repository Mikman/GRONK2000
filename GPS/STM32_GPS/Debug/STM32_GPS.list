
STM32_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005108  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08005218  08005218  00015218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800577c  0800577c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800577c  0800577c  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800577c  0800577c  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800577c  0800577c  0001577c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005780  08005780  00015780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08005784  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  200001e8  0800596c  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800596c  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000071d2  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016af  00000000  00000000  000273e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  00028a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d0  00000000  00000000  00029120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a54  00000000  00000000  000296f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e3d  00000000  00000000  00041144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008333d  00000000  00000000  00047f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cb2be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b64  00000000  00000000  000cb314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005200 	.word	0x08005200

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08005200 	.word	0x08005200

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	; 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_d2uiz>:
 8000a20:	004a      	lsls	r2, r1, #1
 8000a22:	d211      	bcs.n	8000a48 <__aeabi_d2uiz+0x28>
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a28:	d211      	bcs.n	8000a4e <__aeabi_d2uiz+0x2e>
 8000a2a:	d50d      	bpl.n	8000a48 <__aeabi_d2uiz+0x28>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d40e      	bmi.n	8000a54 <__aeabi_d2uiz+0x34>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	4770      	bx	lr
 8000a48:	f04f 0000 	mov.w	r0, #0
 8000a4c:	4770      	bx	lr
 8000a4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_d2uiz+0x3a>
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0000 	mov.w	r0, #0
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2lz>:
 8000b00:	b538      	push	{r3, r4, r5, lr}
 8000b02:	460c      	mov	r4, r1
 8000b04:	4605      	mov	r5, r0
 8000b06:	4621      	mov	r1, r4
 8000b08:	4628      	mov	r0, r5
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f7ff ff5f 	bl	80009d0 <__aeabi_dcmplt>
 8000b12:	b928      	cbnz	r0, 8000b20 <__aeabi_d2lz+0x20>
 8000b14:	4628      	mov	r0, r5
 8000b16:	4621      	mov	r1, r4
 8000b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b1c:	f000 b80a 	b.w	8000b34 <__aeabi_d2ulz>
 8000b20:	4628      	mov	r0, r5
 8000b22:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b26:	f000 f805 	bl	8000b34 <__aeabi_d2ulz>
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2ulz>:
 8000b34:	b5d0      	push	{r4, r6, r7, lr}
 8000b36:	2200      	movs	r2, #0
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <__aeabi_d2ulz+0x34>)
 8000b3a:	4606      	mov	r6, r0
 8000b3c:	460f      	mov	r7, r1
 8000b3e:	f7ff fcd5 	bl	80004ec <__aeabi_dmul>
 8000b42:	f7ff ff6d 	bl	8000a20 <__aeabi_d2uiz>
 8000b46:	4604      	mov	r4, r0
 8000b48:	f7ff fc56 	bl	80003f8 <__aeabi_ui2d>
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <__aeabi_d2ulz+0x38>)
 8000b50:	f7ff fccc 	bl	80004ec <__aeabi_dmul>
 8000b54:	4602      	mov	r2, r0
 8000b56:	460b      	mov	r3, r1
 8000b58:	4630      	mov	r0, r6
 8000b5a:	4639      	mov	r1, r7
 8000b5c:	f7ff fb0e 	bl	800017c <__aeabi_dsub>
 8000b60:	f7ff ff5e 	bl	8000a20 <__aeabi_d2uiz>
 8000b64:	4621      	mov	r1, r4
 8000b66:	bdd0      	pop	{r4, r6, r7, pc}
 8000b68:	3df00000 	.word	0x3df00000
 8000b6c:	41f00000 	.word	0x41f00000

08000b70 <readGPS>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */



int8_t readGPS(struct GPS_FIX_DATA *data){
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	6018      	str	r0, [r3, #0]

	int flag = 1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
	//HAL_UART_Receive(&huart1, rawData , 255, HAL_MAX_DELAY); // Reads incoming UART transmission and blocks the CPU until 255 bytes is received.

	for (int i = 0 ; i < sizeof(rawData) && flag != 1 ; i = i + 1){ // Looking for start of data format indicated as '$'
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000b88:	e067      	b.n	8000c5a <readGPS+0xea>
		if (rawData[i] == '$') {
 8000b8a:	4a5e      	ldr	r2, [pc, #376]	; (8000d04 <readGPS+0x194>)
 8000b8c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b24      	cmp	r3, #36	; 0x24
 8000b96:	d15b      	bne.n	8000c50 <readGPS+0xe0>
			char formatTest[6] = { 0 }; // String for format comparison, i.e. $GPGGA
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8a7 3204 	strh.w	r3, [r7, #516]	; 0x204
			int check = 5; // Something else than 0 just for safety, since 0 means correct match
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

			for (int x = 0; x < 6; x = x + 1) {  // Loops over the next 6 characters and puts then in an array to check for the desired format
 8000baa:	2300      	movs	r3, #0
 8000bac:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000bb0:	e04a      	b.n	8000c48 <readGPS+0xd8>
				formatTest[x] = rawData[i + x];
 8000bb2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000bb6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a51      	ldr	r2, [pc, #324]	; (8000d04 <readGPS+0x194>)
 8000bbe:	5cd1      	ldrb	r1, [r2, r3]
 8000bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8000bc4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000bc8:	4413      	add	r3, r2
 8000bca:	460a      	mov	r2, r1
 8000bcc:	701a      	strb	r2, [r3, #0]
				check = strcmp(formatTest, GPSFormat);
 8000bce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bd2:	494d      	ldr	r1, [pc, #308]	; (8000d08 <readGPS+0x198>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fabb 	bl	8000150 <strcmp>
 8000bda:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208

				if (check == 0) {
 8000bde:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d12b      	bne.n	8000c3e <readGPS+0xce>

					uint8_t counter = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
					for (i = i + 1; i < sizeof(rawData); i = i + 1) { // loops until a '$' is found.
 8000bec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000bf6:	e01e      	b.n	8000c36 <readGPS+0xc6>
						if (rawData[i] != '$') {
 8000bf8:	4a42      	ldr	r2, [pc, #264]	; (8000d04 <readGPS+0x194>)
 8000bfa:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000bfe:	4413      	add	r3, r2
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b24      	cmp	r3, #36	; 0x24
 8000c04:	d00e      	beq.n	8000c24 <readGPS+0xb4>
							GPSData[counter] = rawData[i]; // Desired data format (GPGGA) is passed into another array
 8000c06:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 8000c0a:	493e      	ldr	r1, [pc, #248]	; (8000d04 <readGPS+0x194>)
 8000c0c:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000c10:	440a      	add	r2, r1
 8000c12:	7811      	ldrb	r1, [r2, #0]
 8000c14:	4a3d      	ldr	r2, [pc, #244]	; (8000d0c <readGPS+0x19c>)
 8000c16:	54d1      	strb	r1, [r2, r3]
							counter = counter + 1;
 8000c18:	f897 3213 	ldrb.w	r3, [r7, #531]	; 0x213
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
 8000c22:	e003      	b.n	8000c2c <readGPS+0xbc>
						} else {
							flag = 1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
							break;
 8000c2a:	e008      	b.n	8000c3e <readGPS+0xce>
					for (i = i + 1; i < sizeof(rawData); i = i + 1) { // loops until a '$' is found.
 8000c2c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c30:	3301      	adds	r3, #1
 8000c32:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000c36:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c3a:	2bfe      	cmp	r3, #254	; 0xfe
 8000c3c:	d9dc      	bls.n	8000bf8 <readGPS+0x88>
			for (int x = 0; x < 6; x = x + 1) {  // Loops over the next 6 characters and puts then in an array to check for the desired format
 8000c3e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000c42:	3301      	adds	r3, #1
 8000c44:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8000c48:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000c4c:	2b05      	cmp	r3, #5
 8000c4e:	ddb0      	ble.n	8000bb2 <readGPS+0x42>
	for (int i = 0 ; i < sizeof(rawData) && flag != 1 ; i = i + 1){ // Looking for start of data format indicated as '$'
 8000c50:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c54:	3301      	adds	r3, #1
 8000c56:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8000c5a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000c5e:	2bfe      	cmp	r3, #254	; 0xfe
 8000c60:	d803      	bhi.n	8000c6a <readGPS+0xfa>
 8000c62:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d18f      	bne.n	8000b8a <readGPS+0x1a>
				}
			}
		}
	}

	if (flag != 1){
 8000c6a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d001      	beq.n	8000c76 <readGPS+0x106>

		return 0; // No data available
 8000c72:	2300      	movs	r3, #0
 8000c74:	e154      	b.n	8000f20 <readGPS+0x3b0>

	}else {

		//                                  Format, time   ,  Latitude  ,  Longitude
		char testString[sizeof(GPSData)] = "GPGGA,085350.00,5702.98823,N,00954.55932,E,1,06,1.23,10.7,M,42.4,M,,*6D\r\n";
 8000c76:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <readGPS+0x1a0>)
 8000c7c:	4620      	mov	r0, r4
 8000c7e:	4619      	mov	r1, r3
 8000c80:	234a      	movs	r3, #74	; 0x4a
 8000c82:	461a      	mov	r2, r3
 8000c84:	f001 fbb0 	bl	80023e8 <memcpy>
 8000c88:	f104 034a 	add.w	r3, r4, #74	; 0x4a
 8000c8c:	22b5      	movs	r2, #181	; 0xb5
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f001 fbb7 	bl	8002404 <memset>

		for (uint8_t i = 0; i < sizeof(testString); i++) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	f887 3212 	strb.w	r3, [r7, #530]	; 0x212
 8000c9c:	e00d      	b.n	8000cba <readGPS+0x14a>
			GPSData[i] = testString[i];
 8000c9e:	f897 2212 	ldrb.w	r2, [r7, #530]	; 0x212
 8000ca2:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 8000ca6:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8000caa:	5c89      	ldrb	r1, [r1, r2]
 8000cac:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <readGPS+0x19c>)
 8000cae:	54d1      	strb	r1, [r2, r3]
		for (uint8_t i = 0; i < sizeof(testString); i++) {
 8000cb0:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	f887 3212 	strb.w	r3, [r7, #530]	; 0x212
 8000cba:	f897 3212 	ldrb.w	r3, [r7, #530]	; 0x212
 8000cbe:	2bff      	cmp	r3, #255	; 0xff
 8000cc0:	d1ed      	bne.n	8000c9e <readGPS+0x12e>
		}


		// Divide GPSData string up in individual sections, each one in its own array sections[i]
		uint8_t sectionNum = 0, sectionChar = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210

		char sections[GPS_SECTIONS][GPS_SEC_LENGTH] = { 0 };
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	23e1      	movs	r3, #225	; 0xe1
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f001 fb93 	bl	8002404 <memset>

		for (uint16_t i = 0; i < sizeof(GPSData); i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000ce4:	e031      	b.n	8000d4a <readGPS+0x1da>

			if (GPSData[i] == ',') {
 8000ce6:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <readGPS+0x19c>)
 8000cec:	5cd3      	ldrb	r3, [r2, r3]
 8000cee:	2b2c      	cmp	r3, #44	; 0x2c
 8000cf0:	d110      	bne.n	8000d14 <readGPS+0x1a4>
				sectionNum++;
 8000cf2:	f897 3211 	ldrb.w	r3, [r7, #529]	; 0x211
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	f887 3211 	strb.w	r3, [r7, #529]	; 0x211
				sectionChar = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
 8000d02:	e01d      	b.n	8000d40 <readGPS+0x1d0>
 8000d04:	20000204 	.word	0x20000204
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000304 	.word	0x20000304
 8000d10:	08005218 	.word	0x08005218
			}
			else {
				sections[sectionNum][sectionChar] = GPSData[i];
 8000d14:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d18:	f897 2211 	ldrb.w	r2, [r7, #529]	; 0x211
 8000d1c:	f897 1210 	ldrb.w	r1, [r7, #528]	; 0x210
 8000d20:	4882      	ldr	r0, [pc, #520]	; (8000f2c <readGPS+0x3bc>)
 8000d22:	5cc4      	ldrb	r4, [r0, r3]
 8000d24:	f107 0008 	add.w	r0, r7, #8
 8000d28:	4613      	mov	r3, r2
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	1a9b      	subs	r3, r3, r2
 8000d2e:	4403      	add	r3, r0
 8000d30:	440b      	add	r3, r1
 8000d32:	4622      	mov	r2, r4
 8000d34:	701a      	strb	r2, [r3, #0]
				sectionChar++;
 8000d36:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
		for (uint16_t i = 0; i < sizeof(GPSData); i++) {
 8000d40:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d44:	3301      	adds	r3, #1
 8000d46:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8000d4a:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8000d4e:	2bfe      	cmp	r3, #254	; 0xfe
 8000d50:	d9c9      	bls.n	8000ce6 <readGPS+0x176>
			}
		}

		// Convert gps data from sections[i] into GPS_FIX_DATA struct

		char h[3] = {0}, m[3] = {0}, s[3] = {0};
 8000d52:	4b77      	ldr	r3, [pc, #476]	; (8000f30 <readGPS+0x3c0>)
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	f8a7 31fc 	strh.w	r3, [r7, #508]	; 0x1fc
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f887 31fe 	strb.w	r3, [r7, #510]	; 0x1fe
 8000d60:	4b73      	ldr	r3, [pc, #460]	; (8000f30 <readGPS+0x3c0>)
 8000d62:	881b      	ldrh	r3, [r3, #0]
 8000d64:	f8a7 31f8 	strh.w	r3, [r7, #504]	; 0x1f8
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 31fa 	strb.w	r3, [r7, #506]	; 0x1fa
 8000d6e:	4b70      	ldr	r3, [pc, #448]	; (8000f30 <readGPS+0x3c0>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	f8a7 31f4 	strh.w	r3, [r7, #500]	; 0x1f4
 8000d76:	2300      	movs	r3, #0
 8000d78:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6

		strncpy(h, sections[1], 2);
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	f103 010f 	add.w	r1, r3, #15
 8000d84:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000d88:	2202      	movs	r2, #2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 fb42 	bl	8002414 <strncpy>
		strncpy(m, sections[1] + 2, 2);
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	330f      	adds	r3, #15
 8000d96:	3302      	adds	r3, #2
 8000d98:	f507 70fc 	add.w	r0, r7, #504	; 0x1f8
 8000d9c:	2202      	movs	r2, #2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f001 fb38 	bl	8002414 <strncpy>
		strncpy(s, sections[1] + 4, 2);
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	330f      	adds	r3, #15
 8000daa:	3304      	adds	r3, #4
 8000dac:	f507 70fa 	add.w	r0, r7, #500	; 0x1f4
 8000db0:	2202      	movs	r2, #2
 8000db2:	4619      	mov	r1, r3
 8000db4:	f001 fb2e 	bl	8002414 <strncpy>

		data->HOURS = 	atoi(h);
 8000db8:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f001 fae4 	bl	800238a <atoi>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	701a      	strb	r2, [r3, #0]
		data->MIN = 	atoi(m);
 8000dcc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fada 	bl	800238a <atoi>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	705a      	strb	r2, [r3, #1]
		data->SEC = 	atoi(s);
 8000de0:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fad0 	bl	800238a <atoi>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	709a      	strb	r2, [r3, #2]

		data->LAT = 	atof(sections[2]);
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	331e      	adds	r3, #30
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f001 fac2 	bl	8002384 <atof>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	4610      	mov	r0, r2
 8000e06:	4619      	mov	r1, r3
 8000e08:	f7ff fe2a 	bl	8000a60 <__aeabi_d2f>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
		data->LAT_DIR = sections[3][0];
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	721a      	strb	r2, [r3, #8]
		data->LON = 	atof(sections[4]);
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	333c      	adds	r3, #60	; 0x3c
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 faab 	bl	8002384 <atof>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fe13 	bl	8000a60 <__aeabi_d2f>
 8000e3a:	4602      	mov	r2, r0
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60da      	str	r2, [r3, #12]
		data->LON_DIR =	sections[5][0];
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	741a      	strb	r2, [r3, #16]
		data->QUALITY = atoi(sections[6]);
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	335a      	adds	r3, #90	; 0x5a
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 fa97 	bl	800238a <atoi>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	745a      	strb	r2, [r3, #17]
		data->SATS = 	atoi(sections[7]);
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	3369      	adds	r3, #105	; 0x69
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 fa8c 	bl	800238a <atoi>
 8000e72:	4603      	mov	r3, r0
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	749a      	strb	r2, [r3, #18]
		data->HDOP = 	atof(sections[8]);
 8000e7c:	f107 0308 	add.w	r3, r7, #8
 8000e80:	3378      	adds	r3, #120	; 0x78
 8000e82:	4618      	mov	r0, r3
 8000e84:	f001 fa7e 	bl	8002384 <atof>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4619      	mov	r1, r3
 8000e90:	f7ff fde6 	bl	8000a60 <__aeabi_d2f>
 8000e94:	4602      	mov	r2, r0
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	615a      	str	r2, [r3, #20]
		data->ALTITUDE=	atof(sections[9]);
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	3387      	adds	r3, #135	; 0x87
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 fa6e 	bl	8002384 <atof>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	460b      	mov	r3, r1
 8000eac:	4610      	mov	r0, r2
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f7ff fdd6 	bl	8000a60 <__aeabi_d2f>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	619a      	str	r2, [r3, #24]
		data->H_GEOID =	atof(sections[11]);
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	33a5      	adds	r3, #165	; 0xa5
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 fa5e 	bl	8002384 <atof>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fdc6 	bl	8000a60 <__aeabi_d2f>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	61da      	str	r2, [r3, #28]

		char ck[3] = { sections[14][1], sections[14][2], 0};
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	f893 30d3 	ldrb.w	r3, [r3, #211]	; 0xd3
 8000ee4:	f887 31f0 	strb.w	r3, [r7, #496]	; 0x1f0
 8000ee8:	f107 0308 	add.w	r3, r7, #8
 8000eec:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8000ef0:	f887 31f1 	strb.w	r3, [r7, #497]	; 0x1f1
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	f887 31f2 	strb.w	r3, [r7, #498]	; 0x1f2

		char *eptr;
		data->CHECK	=	strtol(ck, &eptr, 16);
 8000efa:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8000efe:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000f02:	2210      	movs	r2, #16
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 f941 	bl	800318c <strtol>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]



		sectionChar++;
 8000f16:	f897 3210 	ldrb.w	r3, [r7, #528]	; 0x210
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	f887 3210 	strb.w	r3, [r7, #528]	; 0x210
	}
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	f507 7709 	add.w	r7, r7, #548	; 0x224
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd90      	pop	{r4, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000304 	.word	0x20000304
 8000f30:	08005318 	.word	0x08005318

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f000 fa3f 	bl	80013bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f813 	bl	8000f68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f42:	f000 f881 	bl	8001048 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000f46:	f000 f855 	bl	8000ff4 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 struct GPS_FIX_DATA data = { 0 };
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2224      	movs	r2, #36	; 0x24
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f001 fa57 	bl	8002404 <memset>

	 readGPS(&data);
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fe09 	bl	8000b70 <readGPS>


	 HAL_Delay(1000);
 8000f5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f62:	f000 fa8d 	bl	8001480 <HAL_Delay>
  {
 8000f66:	e7f0      	b.n	8000f4a <main+0x16>

08000f68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b090      	sub	sp, #64	; 0x40
 8000f6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	2228      	movs	r2, #40	; 0x28
 8000f74:	2100      	movs	r1, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 fa44 	bl	8002404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
 8000f88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f92:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fa6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 fcf1 	bl	8001998 <HAL_RCC_OscConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000fbc:	f000 f866 	bl	800108c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc0:	230f      	movs	r3, #15
 8000fc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f000 ff5c 	bl	8001e98 <HAL_RCC_ClockConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fe6:	f000 f851 	bl	800108c <Error_Handler>
  }
}
 8000fea:	bf00      	nop
 8000fec:	3740      	adds	r7, #64	; 0x40
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ff8:	4b11      	ldr	r3, [pc, #68]	; (8001040 <MX_USART1_UART_Init+0x4c>)
 8000ffa:	4a12      	ldr	r2, [pc, #72]	; (8001044 <MX_USART1_UART_Init+0x50>)
 8000ffc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000ffe:	4b10      	ldr	r3, [pc, #64]	; (8001040 <MX_USART1_UART_Init+0x4c>)
 8001000:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001004:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001006:	4b0e      	ldr	r3, [pc, #56]	; (8001040 <MX_USART1_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <MX_USART1_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <MX_USART1_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001018:	4b09      	ldr	r3, [pc, #36]	; (8001040 <MX_USART1_UART_Init+0x4c>)
 800101a:	220c      	movs	r2, #12
 800101c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <MX_USART1_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <MX_USART1_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_USART1_UART_Init+0x4c>)
 800102c:	f001 f8ce 	bl	80021cc <HAL_UART_Init>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001036:	f000 f829 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000410 	.word	0x20000410
 8001044:	40013800 	.word	0x40013800

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <MX_GPIO_Init+0x40>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	4a0d      	ldr	r2, [pc, #52]	; (8001088 <MX_GPIO_Init+0x40>)
 8001054:	f043 0320 	orr.w	r3, r3, #32
 8001058:	6193      	str	r3, [r2, #24]
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <MX_GPIO_Init+0x40>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f003 0320 	and.w	r3, r3, #32
 8001062:	607b      	str	r3, [r7, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <MX_GPIO_Init+0x40>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <MX_GPIO_Init+0x40>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <MX_GPIO_Init+0x40>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>
	...

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_MspInit+0x5c>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_MspInit+0x5c>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6193      	str	r3, [r2, #24]
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_MspInit+0x5c>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_MspInit+0x5c>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_MspInit+0x5c>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_MspInit+0x5c>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_MspInit+0x60>)
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <HAL_MspInit+0x60>)
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010000 	.word	0x40010000

080010fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a1c      	ldr	r2, [pc, #112]	; (8001188 <HAL_UART_MspInit+0x8c>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d131      	bne.n	8001180 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800111c:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_UART_MspInit+0x90>)
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	4a1a      	ldr	r2, [pc, #104]	; (800118c <HAL_UART_MspInit+0x90>)
 8001122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001126:	6193      	str	r3, [r2, #24]
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_UART_MspInit+0x90>)
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0x90>)
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_UART_MspInit+0x90>)
 800113a:	f043 0304 	orr.w	r3, r3, #4
 800113e:	6193      	str	r3, [r2, #24]
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_UART_MspInit+0x90>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	f003 0304 	and.w	r3, r3, #4
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800114c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001150:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001156:	2303      	movs	r3, #3
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	480b      	ldr	r0, [pc, #44]	; (8001190 <HAL_UART_MspInit+0x94>)
 8001162:	f000 fa95 	bl	8001690 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_UART_MspInit+0x94>)
 800117c:	f000 fa88 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40013800 	.word	0x40013800
 800118c:	40021000 	.word	0x40021000
 8001190:	40010800 	.word	0x40010800

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr

080011d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011da:	f000 f935 	bl	8001448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
	return 1;
 80011e6:	2301      	movs	r3, #1
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <_kill>:

int _kill(int pid, int sig)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011fa:	f001 f8cb 	bl	8002394 <__errno>
 80011fe:	4603      	mov	r3, r0
 8001200:	2216      	movs	r2, #22
 8001202:	601a      	str	r2, [r3, #0]
	return -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_exit>:

void _exit (int status)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001218:	f04f 31ff 	mov.w	r1, #4294967295
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ffe7 	bl	80011f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001222:	e7fe      	b.n	8001222 <_exit+0x12>

08001224 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	e00a      	b.n	800124c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001236:	f3af 8000 	nop.w
 800123a:	4601      	mov	r1, r0
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	1c5a      	adds	r2, r3, #1
 8001240:	60ba      	str	r2, [r7, #8]
 8001242:	b2ca      	uxtb	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	697a      	ldr	r2, [r7, #20]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	429a      	cmp	r2, r3
 8001252:	dbf0      	blt.n	8001236 <_read+0x12>
	}

return len;
 8001254:	687b      	ldr	r3, [r7, #4]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b086      	sub	sp, #24
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	e009      	b.n	8001284 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	60ba      	str	r2, [r7, #8]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4618      	mov	r0, r3
 800127a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	429a      	cmp	r2, r3
 800128a:	dbf1      	blt.n	8001270 <_write+0x12>
	}
	return len;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3718      	adds	r7, #24
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_close>:

int _close(int file)
{
 8001296:	b480      	push	{r7}
 8001298:	b083      	sub	sp, #12
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
	return -1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012bc:	605a      	str	r2, [r3, #4]
	return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr

080012ca <_isatty>:

int _isatty(int file)
{
 80012ca:	b480      	push	{r7}
 80012cc:	b083      	sub	sp, #12
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
	return 1;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
	return 0;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bc80      	pop	{r7}
 80012f4:	4770      	bx	lr
	...

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f001 f834 	bl	8002394 <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <_sbrk+0x64>)
 8001348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20005000 	.word	0x20005000
 8001358:	00000400 	.word	0x00000400
 800135c:	20000404 	.word	0x20000404
 8001360:	20000468 	.word	0x20000468

08001364 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001370:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001372:	e003      	b.n	800137c <LoopCopyDataInit>

08001374 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001376:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001378:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800137a:	3104      	adds	r1, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800137c:	480a      	ldr	r0, [pc, #40]	; (80013a8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001380:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001382:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001384:	d3f6      	bcc.n	8001374 <CopyDataInit>
  ldr r2, =_sbss
 8001386:	4a0a      	ldr	r2, [pc, #40]	; (80013b0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001388:	e002      	b.n	8001390 <LoopFillZerobss>

0800138a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800138c:	f842 3b04 	str.w	r3, [r2], #4

08001390 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001392:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001394:	d3f9      	bcc.n	800138a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001396:	f7ff ffe5 	bl	8001364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800139a:	f001 f801 	bl	80023a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139e:	f7ff fdc9 	bl	8000f34 <main>
  bx lr
 80013a2:	4770      	bx	lr
  ldr r3, =_sidata
 80013a4:	08005784 	.word	0x08005784
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80013ac:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 80013b0:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 80013b4:	20000464 	.word	0x20000464

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>
	...

080013bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <HAL_Init+0x28>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a07      	ldr	r2, [pc, #28]	; (80013e4 <HAL_Init+0x28>)
 80013c6:	f043 0310 	orr.w	r3, r3, #16
 80013ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f92b 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013d2:	2000      	movs	r0, #0
 80013d4:	f000 f808 	bl	80013e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d8:	f7ff fe5e 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40022000 	.word	0x40022000

080013e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x54>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x58>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4619      	mov	r1, r3
 80013fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001402:	fbb2 f3f3 	udiv	r3, r2, r3
 8001406:	4618      	mov	r0, r3
 8001408:	f000 f935 	bl	8001676 <HAL_SYSTICK_Config>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e00e      	b.n	8001434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b0f      	cmp	r3, #15
 800141a:	d80a      	bhi.n	8001432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800141c:	2200      	movs	r2, #0
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	f04f 30ff 	mov.w	r0, #4294967295
 8001424:	f000 f90b 	bl	800163e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001428:	4a06      	ldr	r2, [pc, #24]	; (8001444 <HAL_InitTick+0x5c>)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	e000      	b.n	8001434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000008 	.word	0x20000008
 8001440:	20000010 	.word	0x20000010
 8001444:	2000000c 	.word	0x2000000c

08001448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x1c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	461a      	mov	r2, r3
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_IncTick+0x20>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4413      	add	r3, r2
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_IncTick+0x20>)
 800145a:	6013      	str	r3, [r2, #0]
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000010 	.word	0x20000010
 8001468:	20000450 	.word	0x20000450

0800146c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return uwTick;
 8001470:	4b02      	ldr	r3, [pc, #8]	; (800147c <HAL_GetTick+0x10>)
 8001472:	681b      	ldr	r3, [r3, #0]
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	20000450 	.word	0x20000450

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff fff0 	bl	800146c <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffe0 	bl	800146c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000010 	.word	0x20000010

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff90 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff49 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff5e 	bl	8001510 <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff90 	bl	8001580 <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5f 	bl	800152c <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffb0 	bl	80015e4 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b08b      	sub	sp, #44	; 0x2c
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800169a:	2300      	movs	r3, #0
 800169c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800169e:	2300      	movs	r3, #0
 80016a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a2:	e169      	b.n	8001978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016a4:	2201      	movs	r2, #1
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	69fa      	ldr	r2, [r7, #28]
 80016b4:	4013      	ands	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	429a      	cmp	r2, r3
 80016be:	f040 8158 	bne.w	8001972 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a9a      	ldr	r2, [pc, #616]	; (8001930 <HAL_GPIO_Init+0x2a0>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d05e      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016cc:	4a98      	ldr	r2, [pc, #608]	; (8001930 <HAL_GPIO_Init+0x2a0>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d875      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016d2:	4a98      	ldr	r2, [pc, #608]	; (8001934 <HAL_GPIO_Init+0x2a4>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d058      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016d8:	4a96      	ldr	r2, [pc, #600]	; (8001934 <HAL_GPIO_Init+0x2a4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d86f      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016de:	4a96      	ldr	r2, [pc, #600]	; (8001938 <HAL_GPIO_Init+0x2a8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d052      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016e4:	4a94      	ldr	r2, [pc, #592]	; (8001938 <HAL_GPIO_Init+0x2a8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d869      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016ea:	4a94      	ldr	r2, [pc, #592]	; (800193c <HAL_GPIO_Init+0x2ac>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d04c      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016f0:	4a92      	ldr	r2, [pc, #584]	; (800193c <HAL_GPIO_Init+0x2ac>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d863      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 80016f6:	4a92      	ldr	r2, [pc, #584]	; (8001940 <HAL_GPIO_Init+0x2b0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d046      	beq.n	800178a <HAL_GPIO_Init+0xfa>
 80016fc:	4a90      	ldr	r2, [pc, #576]	; (8001940 <HAL_GPIO_Init+0x2b0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d85d      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 8001702:	2b12      	cmp	r3, #18
 8001704:	d82a      	bhi.n	800175c <HAL_GPIO_Init+0xcc>
 8001706:	2b12      	cmp	r3, #18
 8001708:	d859      	bhi.n	80017be <HAL_GPIO_Init+0x12e>
 800170a:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <HAL_GPIO_Init+0x80>)
 800170c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001710:	0800178b 	.word	0x0800178b
 8001714:	08001765 	.word	0x08001765
 8001718:	08001777 	.word	0x08001777
 800171c:	080017b9 	.word	0x080017b9
 8001720:	080017bf 	.word	0x080017bf
 8001724:	080017bf 	.word	0x080017bf
 8001728:	080017bf 	.word	0x080017bf
 800172c:	080017bf 	.word	0x080017bf
 8001730:	080017bf 	.word	0x080017bf
 8001734:	080017bf 	.word	0x080017bf
 8001738:	080017bf 	.word	0x080017bf
 800173c:	080017bf 	.word	0x080017bf
 8001740:	080017bf 	.word	0x080017bf
 8001744:	080017bf 	.word	0x080017bf
 8001748:	080017bf 	.word	0x080017bf
 800174c:	080017bf 	.word	0x080017bf
 8001750:	080017bf 	.word	0x080017bf
 8001754:	0800176d 	.word	0x0800176d
 8001758:	08001781 	.word	0x08001781
 800175c:	4a79      	ldr	r2, [pc, #484]	; (8001944 <HAL_GPIO_Init+0x2b4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d013      	beq.n	800178a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001762:	e02c      	b.n	80017be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e029      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	3304      	adds	r3, #4
 8001772:	623b      	str	r3, [r7, #32]
          break;
 8001774:	e024      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	3308      	adds	r3, #8
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e01f      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	330c      	adds	r3, #12
 8001786:	623b      	str	r3, [r7, #32]
          break;
 8001788:	e01a      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001792:	2304      	movs	r3, #4
 8001794:	623b      	str	r3, [r7, #32]
          break;
 8001796:	e013      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d105      	bne.n	80017ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	611a      	str	r2, [r3, #16]
          break;
 80017aa:	e009      	b.n	80017c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017ac:	2308      	movs	r3, #8
 80017ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	615a      	str	r2, [r3, #20]
          break;
 80017b6:	e003      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x130>
          break;
 80017be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2bff      	cmp	r3, #255	; 0xff
 80017c4:	d801      	bhi.n	80017ca <HAL_GPIO_Init+0x13a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	e001      	b.n	80017ce <HAL_GPIO_Init+0x13e>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	3304      	adds	r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	2bff      	cmp	r3, #255	; 0xff
 80017d4:	d802      	bhi.n	80017dc <HAL_GPIO_Init+0x14c>
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	e002      	b.n	80017e2 <HAL_GPIO_Init+0x152>
 80017dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017de:	3b08      	subs	r3, #8
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	210f      	movs	r1, #15
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	fa01 f303 	lsl.w	r3, r1, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	401a      	ands	r2, r3
 80017f4:	6a39      	ldr	r1, [r7, #32]
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	431a      	orrs	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 80b1 	beq.w	8001972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001810:	4b4d      	ldr	r3, [pc, #308]	; (8001948 <HAL_GPIO_Init+0x2b8>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <HAL_GPIO_Init+0x2b8>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b4a      	ldr	r3, [pc, #296]	; (8001948 <HAL_GPIO_Init+0x2b8>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001828:	4a48      	ldr	r2, [pc, #288]	; (800194c <HAL_GPIO_Init+0x2bc>)
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	089b      	lsrs	r3, r3, #2
 800182e:	3302      	adds	r3, #2
 8001830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a40      	ldr	r2, [pc, #256]	; (8001950 <HAL_GPIO_Init+0x2c0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d013      	beq.n	800187c <HAL_GPIO_Init+0x1ec>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4a3f      	ldr	r2, [pc, #252]	; (8001954 <HAL_GPIO_Init+0x2c4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d00d      	beq.n	8001878 <HAL_GPIO_Init+0x1e8>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a3e      	ldr	r2, [pc, #248]	; (8001958 <HAL_GPIO_Init+0x2c8>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d007      	beq.n	8001874 <HAL_GPIO_Init+0x1e4>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4a3d      	ldr	r2, [pc, #244]	; (800195c <HAL_GPIO_Init+0x2cc>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_GPIO_Init+0x1e0>
 800186c:	2303      	movs	r3, #3
 800186e:	e006      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001870:	2304      	movs	r3, #4
 8001872:	e004      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001874:	2302      	movs	r3, #2
 8001876:	e002      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <HAL_GPIO_Init+0x1ee>
 800187c:	2300      	movs	r3, #0
 800187e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001880:	f002 0203 	and.w	r2, r2, #3
 8001884:	0092      	lsls	r2, r2, #2
 8001886:	4093      	lsls	r3, r2
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800188e:	492f      	ldr	r1, [pc, #188]	; (800194c <HAL_GPIO_Init+0x2bc>)
 8001890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	492c      	ldr	r1, [pc, #176]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	600b      	str	r3, [r1, #0]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	4928      	ldr	r1, [pc, #160]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	4922      	ldr	r1, [pc, #136]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	604b      	str	r3, [r1, #4]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018de:	4b20      	ldr	r3, [pc, #128]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	491e      	ldr	r1, [pc, #120]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d006      	beq.n	8001906 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f8:	4b19      	ldr	r3, [pc, #100]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	4918      	ldr	r1, [pc, #96]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001906:	4b16      	ldr	r3, [pc, #88]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	43db      	mvns	r3, r3
 800190e:	4914      	ldr	r1, [pc, #80]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001910:	4013      	ands	r3, r2
 8001912:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d021      	beq.n	8001964 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001922:	68da      	ldr	r2, [r3, #12]
 8001924:	490e      	ldr	r1, [pc, #56]	; (8001960 <HAL_GPIO_Init+0x2d0>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	60cb      	str	r3, [r1, #12]
 800192c:	e021      	b.n	8001972 <HAL_GPIO_Init+0x2e2>
 800192e:	bf00      	nop
 8001930:	10320000 	.word	0x10320000
 8001934:	10310000 	.word	0x10310000
 8001938:	10220000 	.word	0x10220000
 800193c:	10210000 	.word	0x10210000
 8001940:	10120000 	.word	0x10120000
 8001944:	10110000 	.word	0x10110000
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	40010800 	.word	0x40010800
 8001954:	40010c00 	.word	0x40010c00
 8001958:	40011000 	.word	0x40011000
 800195c:	40011400 	.word	0x40011400
 8001960:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_GPIO_Init+0x304>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	43db      	mvns	r3, r3
 800196c:	4909      	ldr	r1, [pc, #36]	; (8001994 <HAL_GPIO_Init+0x304>)
 800196e:	4013      	ands	r3, r2
 8001970:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	3301      	adds	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	f47f ae8e 	bne.w	80016a4 <HAL_GPIO_Init+0x14>
  }
}
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	372c      	adds	r7, #44	; 0x2c
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	40010400 	.word	0x40010400

08001998 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e26c      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8087 	beq.w	8001ac6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019b8:	4b92      	ldr	r3, [pc, #584]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 030c 	and.w	r3, r3, #12
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d00c      	beq.n	80019de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c4:	4b8f      	ldr	r3, [pc, #572]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d112      	bne.n	80019f6 <HAL_RCC_OscConfig+0x5e>
 80019d0:	4b8c      	ldr	r3, [pc, #560]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019dc:	d10b      	bne.n	80019f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	4b89      	ldr	r3, [pc, #548]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d06c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x12c>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d168      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e246      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x76>
 8001a00:	4b80      	ldr	r3, [pc, #512]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a7f      	ldr	r2, [pc, #508]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e02e      	b.n	8001a6c <HAL_RCC_OscConfig+0xd4>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x98>
 8001a16:	4b7b      	ldr	r3, [pc, #492]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a7a      	ldr	r2, [pc, #488]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	4b78      	ldr	r3, [pc, #480]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a77      	ldr	r2, [pc, #476]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e01d      	b.n	8001a6c <HAL_RCC_OscConfig+0xd4>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a38:	d10c      	bne.n	8001a54 <HAL_RCC_OscConfig+0xbc>
 8001a3a:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a71      	ldr	r2, [pc, #452]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	4b6f      	ldr	r3, [pc, #444]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a6e      	ldr	r2, [pc, #440]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	e00b      	b.n	8001a6c <HAL_RCC_OscConfig+0xd4>
 8001a54:	4b6b      	ldr	r3, [pc, #428]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a6a      	ldr	r2, [pc, #424]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a5e:	6013      	str	r3, [r2, #0]
 8001a60:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a67      	ldr	r2, [pc, #412]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d013      	beq.n	8001a9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fcfa 	bl	800146c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff fcf6 	bl	800146c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	; 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1fa      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b5d      	ldr	r3, [pc, #372]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0xe4>
 8001a9a:	e014      	b.n	8001ac6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fce6 	bl	800146c <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fce2 	bl	800146c <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e1e6      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	4b53      	ldr	r3, [pc, #332]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f0      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x10c>
 8001ac2:	e000      	b.n	8001ac6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d063      	beq.n	8001b9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ad2:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ade:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d11c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x18c>
 8001aea:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d116      	bne.n	8001b24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001af6:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_RCC_OscConfig+0x176>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e1ba      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b3d      	ldr	r3, [pc, #244]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4939      	ldr	r1, [pc, #228]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	e03a      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b2c:	4b36      	ldr	r3, [pc, #216]	; (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff fc9b 	bl	800146c <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3a:	f7ff fc97 	bl	800146c <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e19b      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f0      	beq.n	8001b3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4927      	ldr	r1, [pc, #156]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
 8001b6c:	e015      	b.n	8001b9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b74:	f7ff fc7a 	bl	800146c <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7c:	f7ff fc76 	bl	800146c <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e17a      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f0      	bne.n	8001b7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d03a      	beq.n	8001c1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d019      	beq.n	8001be2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bae:	4b17      	ldr	r3, [pc, #92]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fc5a 	bl	800146c <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bbc:	f7ff fc56 	bl	800146c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e15a      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bce:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f000 fad8 	bl	8002190 <RCC_Delay>
 8001be0:	e01c      	b.n	8001c1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be8:	f7ff fc40 	bl	800146c <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bee:	e00f      	b.n	8001c10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7ff fc3c 	bl	800146c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d908      	bls.n	8001c10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e140      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	42420000 	.word	0x42420000
 8001c0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c10:	4b9e      	ldr	r3, [pc, #632]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e9      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80a6 	beq.w	8001d76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2e:	4b97      	ldr	r3, [pc, #604]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10d      	bne.n	8001c56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b94      	ldr	r3, [pc, #592]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	4a93      	ldr	r2, [pc, #588]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c44:	61d3      	str	r3, [r2, #28]
 8001c46:	4b91      	ldr	r3, [pc, #580]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c56:	4b8e      	ldr	r3, [pc, #568]	; (8001e90 <HAL_RCC_OscConfig+0x4f8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c62:	4b8b      	ldr	r3, [pc, #556]	; (8001e90 <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a8a      	ldr	r2, [pc, #552]	; (8001e90 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fbfd 	bl	800146c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7ff fbf9 	bl	800146c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b64      	cmp	r3, #100	; 0x64
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0fd      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b81      	ldr	r3, [pc, #516]	; (8001e90 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x312>
 8001c9c:	4b7b      	ldr	r3, [pc, #492]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4a7a      	ldr	r2, [pc, #488]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	e02d      	b.n	8001d06 <HAL_RCC_OscConfig+0x36e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x334>
 8001cb2:	4b76      	ldr	r3, [pc, #472]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a75      	ldr	r2, [pc, #468]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	f023 0301 	bic.w	r3, r3, #1
 8001cbc:	6213      	str	r3, [r2, #32]
 8001cbe:	4b73      	ldr	r3, [pc, #460]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a72      	ldr	r2, [pc, #456]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f023 0304 	bic.w	r3, r3, #4
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	e01c      	b.n	8001d06 <HAL_RCC_OscConfig+0x36e>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b05      	cmp	r3, #5
 8001cd2:	d10c      	bne.n	8001cee <HAL_RCC_OscConfig+0x356>
 8001cd4:	4b6d      	ldr	r3, [pc, #436]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	4a6c      	ldr	r2, [pc, #432]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6213      	str	r3, [r2, #32]
 8001ce0:	4b6a      	ldr	r3, [pc, #424]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a69      	ldr	r2, [pc, #420]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	f043 0301 	orr.w	r3, r3, #1
 8001cea:	6213      	str	r3, [r2, #32]
 8001cec:	e00b      	b.n	8001d06 <HAL_RCC_OscConfig+0x36e>
 8001cee:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a66      	ldr	r2, [pc, #408]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a63      	ldr	r2, [pc, #396]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f023 0304 	bic.w	r3, r3, #4
 8001d04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d015      	beq.n	8001d3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0e:	f7ff fbad 	bl	800146c <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d16:	f7ff fba9 	bl	800146c <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0ab      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	4b57      	ldr	r3, [pc, #348]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0ee      	beq.n	8001d16 <HAL_RCC_OscConfig+0x37e>
 8001d38:	e014      	b.n	8001d64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fb97 	bl	800146c <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7ff fb93 	bl	800146c <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e095      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ee      	bne.n	8001d42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d64:	7dfb      	ldrb	r3, [r7, #23]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d105      	bne.n	8001d76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d6a:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a47      	ldr	r2, [pc, #284]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 8081 	beq.w	8001e82 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d80:	4b42      	ldr	r3, [pc, #264]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d061      	beq.n	8001e50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d146      	bne.n	8001e22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d94:	4b3f      	ldr	r3, [pc, #252]	; (8001e94 <HAL_RCC_OscConfig+0x4fc>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fb67 	bl	800146c <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da2:	f7ff fb63 	bl	800146c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e067      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db4:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc8:	d108      	bne.n	8001ddc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	492d      	ldr	r1, [pc, #180]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a19      	ldr	r1, [r3, #32]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	430b      	orrs	r3, r1
 8001dee:	4927      	ldr	r1, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df4:	4b27      	ldr	r3, [pc, #156]	; (8001e94 <HAL_RCC_OscConfig+0x4fc>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fb37 	bl	800146c <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff fb33 	bl	800146c <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e037      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x46a>
 8001e20:	e02f      	b.n	8001e82 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e22:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <HAL_RCC_OscConfig+0x4fc>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff fb20 	bl	800146c <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e30:	f7ff fb1c 	bl	800146c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e020      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	4b12      	ldr	r3, [pc, #72]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x498>
 8001e4e:	e018      	b.n	8001e82 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e013      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_RCC_OscConfig+0x4f4>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d106      	bne.n	8001e7e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d001      	beq.n	8001e82 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	40007000 	.word	0x40007000
 8001e94:	42420060 	.word	0x42420060

08001e98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0d0      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eac:	4b6a      	ldr	r3, [pc, #424]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d910      	bls.n	8001edc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b67      	ldr	r3, [pc, #412]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f023 0207 	bic.w	r2, r3, #7
 8001ec2:	4965      	ldr	r1, [pc, #404]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0b8      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d020      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef4:	4b59      	ldr	r3, [pc, #356]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4a58      	ldr	r2, [pc, #352]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001efe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f0c:	4b53      	ldr	r3, [pc, #332]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a52      	ldr	r2, [pc, #328]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	494d      	ldr	r1, [pc, #308]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d040      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d107      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	4b47      	ldr	r3, [pc, #284]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d115      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e07f      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f56:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e073      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	4b3d      	ldr	r3, [pc, #244]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e06b      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f76:	4b39      	ldr	r3, [pc, #228]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f023 0203 	bic.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4936      	ldr	r1, [pc, #216]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f88:	f7ff fa70 	bl	800146c <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f90:	f7ff fa6c 	bl	800146c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e053      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 020c 	and.w	r2, r3, #12
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1eb      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d210      	bcs.n	8001fe8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 0207 	bic.w	r2, r3, #7
 8001fce:	4922      	ldr	r1, [pc, #136]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e032      	b.n	800204e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d008      	beq.n	8002006 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	4916      	ldr	r1, [pc, #88]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	490e      	ldr	r1, [pc, #56]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	4313      	orrs	r3, r2
 8002024:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002026:	f000 f821 	bl	800206c <HAL_RCC_GetSysClockFreq>
 800202a:	4602      	mov	r2, r0
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	f003 030f 	and.w	r3, r3, #15
 8002036:	490a      	ldr	r1, [pc, #40]	; (8002060 <HAL_RCC_ClockConfig+0x1c8>)
 8002038:	5ccb      	ldrb	r3, [r1, r3]
 800203a:	fa22 f303 	lsr.w	r3, r2, r3
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_RCC_ClockConfig+0x1cc>)
 8002040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002042:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x1d0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff f9ce 	bl	80013e8 <HAL_InitTick>

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40022000 	.word	0x40022000
 800205c:	40021000 	.word	0x40021000
 8002060:	0800532c 	.word	0x0800532c
 8002064:	20000008 	.word	0x20000008
 8002068:	2000000c 	.word	0x2000000c

0800206c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	b490      	push	{r4, r7}
 800206e:	b08a      	sub	sp, #40	; 0x28
 8002070:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002074:	1d3c      	adds	r4, r7, #4
 8002076:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002078:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800207c:	f240 2301 	movw	r3, #513	; 0x201
 8002080:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	2300      	movs	r3, #0
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d002      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0x40>
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d003      	beq.n	80020b2 <HAL_RCC_GetSysClockFreq+0x46>
 80020aa:	e02d      	b.n	8002108 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ae:	623b      	str	r3, [r7, #32]
      break;
 80020b0:	e02d      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	0c9b      	lsrs	r3, r3, #18
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020be:	4413      	add	r3, r2
 80020c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d013      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	0c5b      	lsrs	r3, r3, #17
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020de:	4413      	add	r3, r2
 80020e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	4a0e      	ldr	r2, [pc, #56]	; (8002124 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ea:	fb02 f203 	mul.w	r2, r2, r3
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
 80020f6:	e004      	b.n	8002102 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	4a0b      	ldr	r2, [pc, #44]	; (8002128 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	623b      	str	r3, [r7, #32]
      break;
 8002106:	e002      	b.n	800210e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <HAL_RCC_GetSysClockFreq+0xb8>)
 800210a:	623b      	str	r3, [r7, #32]
      break;
 800210c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210e:	6a3b      	ldr	r3, [r7, #32]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3728      	adds	r7, #40	; 0x28
 8002114:	46bd      	mov	sp, r7
 8002116:	bc90      	pop	{r4, r7}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	0800531c 	.word	0x0800531c
 8002120:	40021000 	.word	0x40021000
 8002124:	007a1200 	.word	0x007a1200
 8002128:	003d0900 	.word	0x003d0900

0800212c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002130:	4b02      	ldr	r3, [pc, #8]	; (800213c <HAL_RCC_GetHCLKFreq+0x10>)
 8002132:	681b      	ldr	r3, [r3, #0]
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	20000008 	.word	0x20000008

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002144:	f7ff fff2 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002148:	4602      	mov	r2, r0
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	4903      	ldr	r1, [pc, #12]	; (8002164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002156:	5ccb      	ldrb	r3, [r1, r3]
 8002158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800215c:	4618      	mov	r0, r3
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40021000 	.word	0x40021000
 8002164:	0800533c 	.word	0x0800533c

08002168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800216c:	f7ff ffde 	bl	800212c <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	0adb      	lsrs	r3, r3, #11
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK2Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	0800533c 	.word	0x0800533c

08002190 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002198:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <RCC_Delay+0x34>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <RCC_Delay+0x38>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0a5b      	lsrs	r3, r3, #9
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021ac:	bf00      	nop
  }
  while (Delay --);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	1e5a      	subs	r2, r3, #1
 80021b2:	60fa      	str	r2, [r7, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f9      	bne.n	80021ac <RCC_Delay+0x1c>
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	3714      	adds	r7, #20
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr
 80021c4:	20000008 	.word	0x20000008
 80021c8:	10624dd3 	.word	0x10624dd3

080021cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e03f      	b.n	800225e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d106      	bne.n	80021f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7fe ff82 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2224      	movs	r2, #36	; 0x24
 80021fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800220e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f829 	bl	8002268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002224:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	695a      	ldr	r2, [r3, #20]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002234:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002244:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2220      	movs	r2, #32
 8002258:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	4313      	orrs	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022a2:	f023 030c 	bic.w	r3, r3, #12
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a2c      	ldr	r2, [pc, #176]	; (800237c <UART_SetConfig+0x114>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d103      	bne.n	80022d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80022d0:	f7ff ff4a 	bl	8002168 <HAL_RCC_GetPCLK2Freq>
 80022d4:	60f8      	str	r0, [r7, #12]
 80022d6:	e002      	b.n	80022de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80022d8:	f7ff ff32 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80022dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	009a      	lsls	r2, r3, #2
 80022e8:	441a      	add	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	4a22      	ldr	r2, [pc, #136]	; (8002380 <UART_SetConfig+0x118>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	0119      	lsls	r1, r3, #4
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	009a      	lsls	r2, r3, #2
 8002308:	441a      	add	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fbb2 f2f3 	udiv	r2, r2, r3
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <UART_SetConfig+0x118>)
 8002316:	fba3 0302 	umull	r0, r3, r3, r2
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2064      	movs	r0, #100	; 0x64
 800231e:	fb00 f303 	mul.w	r3, r0, r3
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	3332      	adds	r3, #50	; 0x32
 8002328:	4a15      	ldr	r2, [pc, #84]	; (8002380 <UART_SetConfig+0x118>)
 800232a:	fba2 2303 	umull	r2, r3, r2, r3
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002334:	4419      	add	r1, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4613      	mov	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	009a      	lsls	r2, r3, #2
 8002340:	441a      	add	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	fbb2 f2f3 	udiv	r2, r2, r3
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <UART_SetConfig+0x118>)
 800234e:	fba3 0302 	umull	r0, r3, r3, r2
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2064      	movs	r0, #100	; 0x64
 8002356:	fb00 f303 	mul.w	r3, r0, r3
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	3332      	adds	r3, #50	; 0x32
 8002360:	4a07      	ldr	r2, [pc, #28]	; (8002380 <UART_SetConfig+0x118>)
 8002362:	fba2 2303 	umull	r2, r3, r2, r3
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	f003 020f 	and.w	r2, r3, #15
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	440a      	add	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40013800 	.word	0x40013800
 8002380:	51eb851f 	.word	0x51eb851f

08002384 <atof>:
 8002384:	2100      	movs	r1, #0
 8002386:	f000 be6f 	b.w	8003068 <strtod>

0800238a <atoi>:
 800238a:	220a      	movs	r2, #10
 800238c:	2100      	movs	r1, #0
 800238e:	f000 befd 	b.w	800318c <strtol>
	...

08002394 <__errno>:
 8002394:	4b01      	ldr	r3, [pc, #4]	; (800239c <__errno+0x8>)
 8002396:	6818      	ldr	r0, [r3, #0]
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000014 	.word	0x20000014

080023a0 <__libc_init_array>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	2600      	movs	r6, #0
 80023a4:	4d0c      	ldr	r5, [pc, #48]	; (80023d8 <__libc_init_array+0x38>)
 80023a6:	4c0d      	ldr	r4, [pc, #52]	; (80023dc <__libc_init_array+0x3c>)
 80023a8:	1b64      	subs	r4, r4, r5
 80023aa:	10a4      	asrs	r4, r4, #2
 80023ac:	42a6      	cmp	r6, r4
 80023ae:	d109      	bne.n	80023c4 <__libc_init_array+0x24>
 80023b0:	f002 ff26 	bl	8005200 <_init>
 80023b4:	2600      	movs	r6, #0
 80023b6:	4d0a      	ldr	r5, [pc, #40]	; (80023e0 <__libc_init_array+0x40>)
 80023b8:	4c0a      	ldr	r4, [pc, #40]	; (80023e4 <__libc_init_array+0x44>)
 80023ba:	1b64      	subs	r4, r4, r5
 80023bc:	10a4      	asrs	r4, r4, #2
 80023be:	42a6      	cmp	r6, r4
 80023c0:	d105      	bne.n	80023ce <__libc_init_array+0x2e>
 80023c2:	bd70      	pop	{r4, r5, r6, pc}
 80023c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80023c8:	4798      	blx	r3
 80023ca:	3601      	adds	r6, #1
 80023cc:	e7ee      	b.n	80023ac <__libc_init_array+0xc>
 80023ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80023d2:	4798      	blx	r3
 80023d4:	3601      	adds	r6, #1
 80023d6:	e7f2      	b.n	80023be <__libc_init_array+0x1e>
 80023d8:	0800577c 	.word	0x0800577c
 80023dc:	0800577c 	.word	0x0800577c
 80023e0:	0800577c 	.word	0x0800577c
 80023e4:	08005780 	.word	0x08005780

080023e8 <memcpy>:
 80023e8:	440a      	add	r2, r1
 80023ea:	4291      	cmp	r1, r2
 80023ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80023f0:	d100      	bne.n	80023f4 <memcpy+0xc>
 80023f2:	4770      	bx	lr
 80023f4:	b510      	push	{r4, lr}
 80023f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023fa:	4291      	cmp	r1, r2
 80023fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002400:	d1f9      	bne.n	80023f6 <memcpy+0xe>
 8002402:	bd10      	pop	{r4, pc}

08002404 <memset>:
 8002404:	4603      	mov	r3, r0
 8002406:	4402      	add	r2, r0
 8002408:	4293      	cmp	r3, r2
 800240a:	d100      	bne.n	800240e <memset+0xa>
 800240c:	4770      	bx	lr
 800240e:	f803 1b01 	strb.w	r1, [r3], #1
 8002412:	e7f9      	b.n	8002408 <memset+0x4>

08002414 <strncpy>:
 8002414:	4603      	mov	r3, r0
 8002416:	b510      	push	{r4, lr}
 8002418:	3901      	subs	r1, #1
 800241a:	b132      	cbz	r2, 800242a <strncpy+0x16>
 800241c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002420:	3a01      	subs	r2, #1
 8002422:	f803 4b01 	strb.w	r4, [r3], #1
 8002426:	2c00      	cmp	r4, #0
 8002428:	d1f7      	bne.n	800241a <strncpy+0x6>
 800242a:	2100      	movs	r1, #0
 800242c:	441a      	add	r2, r3
 800242e:	4293      	cmp	r3, r2
 8002430:	d100      	bne.n	8002434 <strncpy+0x20>
 8002432:	bd10      	pop	{r4, pc}
 8002434:	f803 1b01 	strb.w	r1, [r3], #1
 8002438:	e7f9      	b.n	800242e <strncpy+0x1a>

0800243a <sulp>:
 800243a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800243e:	460f      	mov	r7, r1
 8002440:	4690      	mov	r8, r2
 8002442:	f001 fd95 	bl	8003f70 <__ulp>
 8002446:	4604      	mov	r4, r0
 8002448:	460d      	mov	r5, r1
 800244a:	f1b8 0f00 	cmp.w	r8, #0
 800244e:	d011      	beq.n	8002474 <sulp+0x3a>
 8002450:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8002454:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002458:	2b00      	cmp	r3, #0
 800245a:	dd0b      	ble.n	8002474 <sulp+0x3a>
 800245c:	2400      	movs	r4, #0
 800245e:	051b      	lsls	r3, r3, #20
 8002460:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8002464:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8002468:	4622      	mov	r2, r4
 800246a:	462b      	mov	r3, r5
 800246c:	f7fe f83e 	bl	80004ec <__aeabi_dmul>
 8002470:	4604      	mov	r4, r0
 8002472:	460d      	mov	r5, r1
 8002474:	4620      	mov	r0, r4
 8002476:	4629      	mov	r1, r5
 8002478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800247c:	0000      	movs	r0, r0
	...

08002480 <_strtod_l>:
 8002480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002484:	469b      	mov	fp, r3
 8002486:	2300      	movs	r3, #0
 8002488:	b0a1      	sub	sp, #132	; 0x84
 800248a:	931c      	str	r3, [sp, #112]	; 0x70
 800248c:	4ba1      	ldr	r3, [pc, #644]	; (8002714 <_strtod_l+0x294>)
 800248e:	4682      	mov	sl, r0
 8002490:	681f      	ldr	r7, [r3, #0]
 8002492:	460e      	mov	r6, r1
 8002494:	4638      	mov	r0, r7
 8002496:	9217      	str	r2, [sp, #92]	; 0x5c
 8002498:	f7fd fe64 	bl	8000164 <strlen>
 800249c:	f04f 0800 	mov.w	r8, #0
 80024a0:	4604      	mov	r4, r0
 80024a2:	f04f 0900 	mov.w	r9, #0
 80024a6:	961b      	str	r6, [sp, #108]	; 0x6c
 80024a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	2a2b      	cmp	r2, #43	; 0x2b
 80024ae:	d04c      	beq.n	800254a <_strtod_l+0xca>
 80024b0:	d83a      	bhi.n	8002528 <_strtod_l+0xa8>
 80024b2:	2a0d      	cmp	r2, #13
 80024b4:	d833      	bhi.n	800251e <_strtod_l+0x9e>
 80024b6:	2a08      	cmp	r2, #8
 80024b8:	d833      	bhi.n	8002522 <_strtod_l+0xa2>
 80024ba:	2a00      	cmp	r2, #0
 80024bc:	d03d      	beq.n	800253a <_strtod_l+0xba>
 80024be:	2300      	movs	r3, #0
 80024c0:	930c      	str	r3, [sp, #48]	; 0x30
 80024c2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80024c4:	782b      	ldrb	r3, [r5, #0]
 80024c6:	2b30      	cmp	r3, #48	; 0x30
 80024c8:	f040 80af 	bne.w	800262a <_strtod_l+0x1aa>
 80024cc:	786b      	ldrb	r3, [r5, #1]
 80024ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80024d2:	2b58      	cmp	r3, #88	; 0x58
 80024d4:	d16c      	bne.n	80025b0 <_strtod_l+0x130>
 80024d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80024d8:	4650      	mov	r0, sl
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	ab1c      	add	r3, sp, #112	; 0x70
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	4a8d      	ldr	r2, [pc, #564]	; (8002718 <_strtod_l+0x298>)
 80024e2:	f8cd b008 	str.w	fp, [sp, #8]
 80024e6:	ab1d      	add	r3, sp, #116	; 0x74
 80024e8:	a91b      	add	r1, sp, #108	; 0x6c
 80024ea:	f000 fec1 	bl	8003270 <__gethex>
 80024ee:	f010 0607 	ands.w	r6, r0, #7
 80024f2:	4604      	mov	r4, r0
 80024f4:	d005      	beq.n	8002502 <_strtod_l+0x82>
 80024f6:	2e06      	cmp	r6, #6
 80024f8:	d129      	bne.n	800254e <_strtod_l+0xce>
 80024fa:	2300      	movs	r3, #0
 80024fc:	3501      	adds	r5, #1
 80024fe:	951b      	str	r5, [sp, #108]	; 0x6c
 8002500:	930c      	str	r3, [sp, #48]	; 0x30
 8002502:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8002504:	2b00      	cmp	r3, #0
 8002506:	f040 8596 	bne.w	8003036 <_strtod_l+0xbb6>
 800250a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800250c:	b1d3      	cbz	r3, 8002544 <_strtod_l+0xc4>
 800250e:	4642      	mov	r2, r8
 8002510:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	b021      	add	sp, #132	; 0x84
 800251a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800251e:	2a20      	cmp	r2, #32
 8002520:	d1cd      	bne.n	80024be <_strtod_l+0x3e>
 8002522:	3301      	adds	r3, #1
 8002524:	931b      	str	r3, [sp, #108]	; 0x6c
 8002526:	e7bf      	b.n	80024a8 <_strtod_l+0x28>
 8002528:	2a2d      	cmp	r2, #45	; 0x2d
 800252a:	d1c8      	bne.n	80024be <_strtod_l+0x3e>
 800252c:	2201      	movs	r2, #1
 800252e:	920c      	str	r2, [sp, #48]	; 0x30
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	921b      	str	r2, [sp, #108]	; 0x6c
 8002534:	785b      	ldrb	r3, [r3, #1]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1c3      	bne.n	80024c2 <_strtod_l+0x42>
 800253a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800253c:	961b      	str	r6, [sp, #108]	; 0x6c
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 8577 	bne.w	8003032 <_strtod_l+0xbb2>
 8002544:	4642      	mov	r2, r8
 8002546:	464b      	mov	r3, r9
 8002548:	e7e4      	b.n	8002514 <_strtod_l+0x94>
 800254a:	2200      	movs	r2, #0
 800254c:	e7ef      	b.n	800252e <_strtod_l+0xae>
 800254e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002550:	b13a      	cbz	r2, 8002562 <_strtod_l+0xe2>
 8002552:	2135      	movs	r1, #53	; 0x35
 8002554:	a81e      	add	r0, sp, #120	; 0x78
 8002556:	f001 fe0f 	bl	8004178 <__copybits>
 800255a:	4650      	mov	r0, sl
 800255c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800255e:	f001 f9d7 	bl	8003910 <_Bfree>
 8002562:	3e01      	subs	r6, #1
 8002564:	2e05      	cmp	r6, #5
 8002566:	d807      	bhi.n	8002578 <_strtod_l+0xf8>
 8002568:	e8df f006 	tbb	[pc, r6]
 800256c:	1d180b0e 	.word	0x1d180b0e
 8002570:	030e      	.short	0x030e
 8002572:	f04f 0900 	mov.w	r9, #0
 8002576:	46c8      	mov	r8, r9
 8002578:	0721      	lsls	r1, r4, #28
 800257a:	d5c2      	bpl.n	8002502 <_strtod_l+0x82>
 800257c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8002580:	e7bf      	b.n	8002502 <_strtod_l+0x82>
 8002582:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8002586:	e7f7      	b.n	8002578 <_strtod_l+0xf8>
 8002588:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800258a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800258e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8002592:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002596:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800259a:	e7ed      	b.n	8002578 <_strtod_l+0xf8>
 800259c:	f04f 0800 	mov.w	r8, #0
 80025a0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800271c <_strtod_l+0x29c>
 80025a4:	e7e8      	b.n	8002578 <_strtod_l+0xf8>
 80025a6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80025aa:	f04f 38ff 	mov.w	r8, #4294967295
 80025ae:	e7e3      	b.n	8002578 <_strtod_l+0xf8>
 80025b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	921b      	str	r2, [sp, #108]	; 0x6c
 80025b6:	785b      	ldrb	r3, [r3, #1]
 80025b8:	2b30      	cmp	r3, #48	; 0x30
 80025ba:	d0f9      	beq.n	80025b0 <_strtod_l+0x130>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0a0      	beq.n	8002502 <_strtod_l+0x82>
 80025c0:	2301      	movs	r3, #1
 80025c2:	9307      	str	r3, [sp, #28]
 80025c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80025c6:	220a      	movs	r2, #10
 80025c8:	9308      	str	r3, [sp, #32]
 80025ca:	2300      	movs	r3, #0
 80025cc:	469b      	mov	fp, r3
 80025ce:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80025d2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80025d4:	7805      	ldrb	r5, [r0, #0]
 80025d6:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80025da:	b2d9      	uxtb	r1, r3
 80025dc:	2909      	cmp	r1, #9
 80025de:	d926      	bls.n	800262e <_strtod_l+0x1ae>
 80025e0:	4622      	mov	r2, r4
 80025e2:	4639      	mov	r1, r7
 80025e4:	f001 fe8a 	bl	80042fc <strncmp>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d032      	beq.n	8002652 <_strtod_l+0x1d2>
 80025ec:	2000      	movs	r0, #0
 80025ee:	462b      	mov	r3, r5
 80025f0:	465c      	mov	r4, fp
 80025f2:	4602      	mov	r2, r0
 80025f4:	9004      	str	r0, [sp, #16]
 80025f6:	2b65      	cmp	r3, #101	; 0x65
 80025f8:	d001      	beq.n	80025fe <_strtod_l+0x17e>
 80025fa:	2b45      	cmp	r3, #69	; 0x45
 80025fc:	d113      	bne.n	8002626 <_strtod_l+0x1a6>
 80025fe:	b91c      	cbnz	r4, 8002608 <_strtod_l+0x188>
 8002600:	9b07      	ldr	r3, [sp, #28]
 8002602:	4303      	orrs	r3, r0
 8002604:	d099      	beq.n	800253a <_strtod_l+0xba>
 8002606:	2400      	movs	r4, #0
 8002608:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800260a:	1c73      	adds	r3, r6, #1
 800260c:	931b      	str	r3, [sp, #108]	; 0x6c
 800260e:	7873      	ldrb	r3, [r6, #1]
 8002610:	2b2b      	cmp	r3, #43	; 0x2b
 8002612:	d078      	beq.n	8002706 <_strtod_l+0x286>
 8002614:	2b2d      	cmp	r3, #45	; 0x2d
 8002616:	d07b      	beq.n	8002710 <_strtod_l+0x290>
 8002618:	2700      	movs	r7, #0
 800261a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800261e:	2909      	cmp	r1, #9
 8002620:	f240 8082 	bls.w	8002728 <_strtod_l+0x2a8>
 8002624:	961b      	str	r6, [sp, #108]	; 0x6c
 8002626:	2500      	movs	r5, #0
 8002628:	e09e      	b.n	8002768 <_strtod_l+0x2e8>
 800262a:	2300      	movs	r3, #0
 800262c:	e7c9      	b.n	80025c2 <_strtod_l+0x142>
 800262e:	f1bb 0f08 	cmp.w	fp, #8
 8002632:	bfd5      	itete	le
 8002634:	9906      	ldrle	r1, [sp, #24]
 8002636:	9905      	ldrgt	r1, [sp, #20]
 8002638:	fb02 3301 	mlale	r3, r2, r1, r3
 800263c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8002640:	f100 0001 	add.w	r0, r0, #1
 8002644:	bfd4      	ite	le
 8002646:	9306      	strle	r3, [sp, #24]
 8002648:	9305      	strgt	r3, [sp, #20]
 800264a:	f10b 0b01 	add.w	fp, fp, #1
 800264e:	901b      	str	r0, [sp, #108]	; 0x6c
 8002650:	e7bf      	b.n	80025d2 <_strtod_l+0x152>
 8002652:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002654:	191a      	adds	r2, r3, r4
 8002656:	921b      	str	r2, [sp, #108]	; 0x6c
 8002658:	5d1b      	ldrb	r3, [r3, r4]
 800265a:	f1bb 0f00 	cmp.w	fp, #0
 800265e:	d036      	beq.n	80026ce <_strtod_l+0x24e>
 8002660:	465c      	mov	r4, fp
 8002662:	9004      	str	r0, [sp, #16]
 8002664:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002668:	2a09      	cmp	r2, #9
 800266a:	d912      	bls.n	8002692 <_strtod_l+0x212>
 800266c:	2201      	movs	r2, #1
 800266e:	e7c2      	b.n	80025f6 <_strtod_l+0x176>
 8002670:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002672:	3001      	adds	r0, #1
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	921b      	str	r2, [sp, #108]	; 0x6c
 8002678:	785b      	ldrb	r3, [r3, #1]
 800267a:	2b30      	cmp	r3, #48	; 0x30
 800267c:	d0f8      	beq.n	8002670 <_strtod_l+0x1f0>
 800267e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8002682:	2a08      	cmp	r2, #8
 8002684:	f200 84dc 	bhi.w	8003040 <_strtod_l+0xbc0>
 8002688:	9004      	str	r0, [sp, #16]
 800268a:	2000      	movs	r0, #0
 800268c:	4604      	mov	r4, r0
 800268e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002690:	9208      	str	r2, [sp, #32]
 8002692:	3b30      	subs	r3, #48	; 0x30
 8002694:	f100 0201 	add.w	r2, r0, #1
 8002698:	d013      	beq.n	80026c2 <_strtod_l+0x242>
 800269a:	9904      	ldr	r1, [sp, #16]
 800269c:	1905      	adds	r5, r0, r4
 800269e:	4411      	add	r1, r2
 80026a0:	9104      	str	r1, [sp, #16]
 80026a2:	4622      	mov	r2, r4
 80026a4:	210a      	movs	r1, #10
 80026a6:	42aa      	cmp	r2, r5
 80026a8:	d113      	bne.n	80026d2 <_strtod_l+0x252>
 80026aa:	1822      	adds	r2, r4, r0
 80026ac:	2a08      	cmp	r2, #8
 80026ae:	f104 0401 	add.w	r4, r4, #1
 80026b2:	4404      	add	r4, r0
 80026b4:	dc1b      	bgt.n	80026ee <_strtod_l+0x26e>
 80026b6:	220a      	movs	r2, #10
 80026b8:	9906      	ldr	r1, [sp, #24]
 80026ba:	fb02 3301 	mla	r3, r2, r1, r3
 80026be:	9306      	str	r3, [sp, #24]
 80026c0:	2200      	movs	r2, #0
 80026c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80026c4:	4610      	mov	r0, r2
 80026c6:	1c59      	adds	r1, r3, #1
 80026c8:	911b      	str	r1, [sp, #108]	; 0x6c
 80026ca:	785b      	ldrb	r3, [r3, #1]
 80026cc:	e7ca      	b.n	8002664 <_strtod_l+0x1e4>
 80026ce:	4658      	mov	r0, fp
 80026d0:	e7d3      	b.n	800267a <_strtod_l+0x1fa>
 80026d2:	2a08      	cmp	r2, #8
 80026d4:	dc04      	bgt.n	80026e0 <_strtod_l+0x260>
 80026d6:	9f06      	ldr	r7, [sp, #24]
 80026d8:	434f      	muls	r7, r1
 80026da:	9706      	str	r7, [sp, #24]
 80026dc:	3201      	adds	r2, #1
 80026de:	e7e2      	b.n	80026a6 <_strtod_l+0x226>
 80026e0:	1c57      	adds	r7, r2, #1
 80026e2:	2f10      	cmp	r7, #16
 80026e4:	bfde      	ittt	le
 80026e6:	9f05      	ldrle	r7, [sp, #20]
 80026e8:	434f      	mulle	r7, r1
 80026ea:	9705      	strle	r7, [sp, #20]
 80026ec:	e7f6      	b.n	80026dc <_strtod_l+0x25c>
 80026ee:	2c10      	cmp	r4, #16
 80026f0:	bfdf      	itttt	le
 80026f2:	220a      	movle	r2, #10
 80026f4:	9905      	ldrle	r1, [sp, #20]
 80026f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80026fa:	9305      	strle	r3, [sp, #20]
 80026fc:	e7e0      	b.n	80026c0 <_strtod_l+0x240>
 80026fe:	2300      	movs	r3, #0
 8002700:	2201      	movs	r2, #1
 8002702:	9304      	str	r3, [sp, #16]
 8002704:	e77c      	b.n	8002600 <_strtod_l+0x180>
 8002706:	2700      	movs	r7, #0
 8002708:	1cb3      	adds	r3, r6, #2
 800270a:	931b      	str	r3, [sp, #108]	; 0x6c
 800270c:	78b3      	ldrb	r3, [r6, #2]
 800270e:	e784      	b.n	800261a <_strtod_l+0x19a>
 8002710:	2701      	movs	r7, #1
 8002712:	e7f9      	b.n	8002708 <_strtod_l+0x288>
 8002714:	08005524 	.word	0x08005524
 8002718:	08005354 	.word	0x08005354
 800271c:	7ff00000 	.word	0x7ff00000
 8002720:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002722:	1c59      	adds	r1, r3, #1
 8002724:	911b      	str	r1, [sp, #108]	; 0x6c
 8002726:	785b      	ldrb	r3, [r3, #1]
 8002728:	2b30      	cmp	r3, #48	; 0x30
 800272a:	d0f9      	beq.n	8002720 <_strtod_l+0x2a0>
 800272c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8002730:	2908      	cmp	r1, #8
 8002732:	f63f af78 	bhi.w	8002626 <_strtod_l+0x1a6>
 8002736:	f04f 0e0a 	mov.w	lr, #10
 800273a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 800273e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002740:	9309      	str	r3, [sp, #36]	; 0x24
 8002742:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002744:	1c59      	adds	r1, r3, #1
 8002746:	911b      	str	r1, [sp, #108]	; 0x6c
 8002748:	785b      	ldrb	r3, [r3, #1]
 800274a:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 800274e:	2d09      	cmp	r5, #9
 8002750:	d935      	bls.n	80027be <_strtod_l+0x33e>
 8002752:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002754:	1b49      	subs	r1, r1, r5
 8002756:	2908      	cmp	r1, #8
 8002758:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800275c:	dc02      	bgt.n	8002764 <_strtod_l+0x2e4>
 800275e:	4565      	cmp	r5, ip
 8002760:	bfa8      	it	ge
 8002762:	4665      	movge	r5, ip
 8002764:	b107      	cbz	r7, 8002768 <_strtod_l+0x2e8>
 8002766:	426d      	negs	r5, r5
 8002768:	2c00      	cmp	r4, #0
 800276a:	d14c      	bne.n	8002806 <_strtod_l+0x386>
 800276c:	9907      	ldr	r1, [sp, #28]
 800276e:	4301      	orrs	r1, r0
 8002770:	f47f aec7 	bne.w	8002502 <_strtod_l+0x82>
 8002774:	2a00      	cmp	r2, #0
 8002776:	f47f aee0 	bne.w	800253a <_strtod_l+0xba>
 800277a:	2b69      	cmp	r3, #105	; 0x69
 800277c:	d026      	beq.n	80027cc <_strtod_l+0x34c>
 800277e:	dc23      	bgt.n	80027c8 <_strtod_l+0x348>
 8002780:	2b49      	cmp	r3, #73	; 0x49
 8002782:	d023      	beq.n	80027cc <_strtod_l+0x34c>
 8002784:	2b4e      	cmp	r3, #78	; 0x4e
 8002786:	f47f aed8 	bne.w	800253a <_strtod_l+0xba>
 800278a:	499c      	ldr	r1, [pc, #624]	; (80029fc <_strtod_l+0x57c>)
 800278c:	a81b      	add	r0, sp, #108	; 0x6c
 800278e:	f000 ffbd 	bl	800370c <__match>
 8002792:	2800      	cmp	r0, #0
 8002794:	f43f aed1 	beq.w	800253a <_strtod_l+0xba>
 8002798:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b28      	cmp	r3, #40	; 0x28
 800279e:	d12c      	bne.n	80027fa <_strtod_l+0x37a>
 80027a0:	4997      	ldr	r1, [pc, #604]	; (8002a00 <_strtod_l+0x580>)
 80027a2:	aa1e      	add	r2, sp, #120	; 0x78
 80027a4:	a81b      	add	r0, sp, #108	; 0x6c
 80027a6:	f000 ffc5 	bl	8003734 <__hexnan>
 80027aa:	2805      	cmp	r0, #5
 80027ac:	d125      	bne.n	80027fa <_strtod_l+0x37a>
 80027ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80027b0:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80027b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80027b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80027bc:	e6a1      	b.n	8002502 <_strtod_l+0x82>
 80027be:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80027c2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80027c6:	e7bc      	b.n	8002742 <_strtod_l+0x2c2>
 80027c8:	2b6e      	cmp	r3, #110	; 0x6e
 80027ca:	e7dc      	b.n	8002786 <_strtod_l+0x306>
 80027cc:	498d      	ldr	r1, [pc, #564]	; (8002a04 <_strtod_l+0x584>)
 80027ce:	a81b      	add	r0, sp, #108	; 0x6c
 80027d0:	f000 ff9c 	bl	800370c <__match>
 80027d4:	2800      	cmp	r0, #0
 80027d6:	f43f aeb0 	beq.w	800253a <_strtod_l+0xba>
 80027da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80027dc:	498a      	ldr	r1, [pc, #552]	; (8002a08 <_strtod_l+0x588>)
 80027de:	3b01      	subs	r3, #1
 80027e0:	a81b      	add	r0, sp, #108	; 0x6c
 80027e2:	931b      	str	r3, [sp, #108]	; 0x6c
 80027e4:	f000 ff92 	bl	800370c <__match>
 80027e8:	b910      	cbnz	r0, 80027f0 <_strtod_l+0x370>
 80027ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80027ec:	3301      	adds	r3, #1
 80027ee:	931b      	str	r3, [sp, #108]	; 0x6c
 80027f0:	f04f 0800 	mov.w	r8, #0
 80027f4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8002a18 <_strtod_l+0x598>
 80027f8:	e683      	b.n	8002502 <_strtod_l+0x82>
 80027fa:	4884      	ldr	r0, [pc, #528]	; (8002a0c <_strtod_l+0x58c>)
 80027fc:	f001 fd68 	bl	80042d0 <nan>
 8002800:	4680      	mov	r8, r0
 8002802:	4689      	mov	r9, r1
 8002804:	e67d      	b.n	8002502 <_strtod_l+0x82>
 8002806:	9b04      	ldr	r3, [sp, #16]
 8002808:	f1bb 0f00 	cmp.w	fp, #0
 800280c:	bf08      	it	eq
 800280e:	46a3      	moveq	fp, r4
 8002810:	1aeb      	subs	r3, r5, r3
 8002812:	2c10      	cmp	r4, #16
 8002814:	9806      	ldr	r0, [sp, #24]
 8002816:	4626      	mov	r6, r4
 8002818:	9307      	str	r3, [sp, #28]
 800281a:	bfa8      	it	ge
 800281c:	2610      	movge	r6, #16
 800281e:	f7fd fdeb 	bl	80003f8 <__aeabi_ui2d>
 8002822:	2c09      	cmp	r4, #9
 8002824:	4680      	mov	r8, r0
 8002826:	4689      	mov	r9, r1
 8002828:	dd13      	ble.n	8002852 <_strtod_l+0x3d2>
 800282a:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <_strtod_l+0x590>)
 800282c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002830:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8002834:	f7fd fe5a 	bl	80004ec <__aeabi_dmul>
 8002838:	4680      	mov	r8, r0
 800283a:	9805      	ldr	r0, [sp, #20]
 800283c:	4689      	mov	r9, r1
 800283e:	f7fd fddb 	bl	80003f8 <__aeabi_ui2d>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4640      	mov	r0, r8
 8002848:	4649      	mov	r1, r9
 800284a:	f7fd fc99 	bl	8000180 <__adddf3>
 800284e:	4680      	mov	r8, r0
 8002850:	4689      	mov	r9, r1
 8002852:	2c0f      	cmp	r4, #15
 8002854:	dc36      	bgt.n	80028c4 <_strtod_l+0x444>
 8002856:	9b07      	ldr	r3, [sp, #28]
 8002858:	2b00      	cmp	r3, #0
 800285a:	f43f ae52 	beq.w	8002502 <_strtod_l+0x82>
 800285e:	dd22      	ble.n	80028a6 <_strtod_l+0x426>
 8002860:	2b16      	cmp	r3, #22
 8002862:	dc09      	bgt.n	8002878 <_strtod_l+0x3f8>
 8002864:	4c6a      	ldr	r4, [pc, #424]	; (8002a10 <_strtod_l+0x590>)
 8002866:	4642      	mov	r2, r8
 8002868:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800286c:	464b      	mov	r3, r9
 800286e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8002872:	f7fd fe3b 	bl	80004ec <__aeabi_dmul>
 8002876:	e7c3      	b.n	8002800 <_strtod_l+0x380>
 8002878:	9a07      	ldr	r2, [sp, #28]
 800287a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800287e:	4293      	cmp	r3, r2
 8002880:	db20      	blt.n	80028c4 <_strtod_l+0x444>
 8002882:	4d63      	ldr	r5, [pc, #396]	; (8002a10 <_strtod_l+0x590>)
 8002884:	f1c4 040f 	rsb	r4, r4, #15
 8002888:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800288c:	4642      	mov	r2, r8
 800288e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002892:	464b      	mov	r3, r9
 8002894:	f7fd fe2a 	bl	80004ec <__aeabi_dmul>
 8002898:	9b07      	ldr	r3, [sp, #28]
 800289a:	1b1c      	subs	r4, r3, r4
 800289c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80028a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80028a4:	e7e5      	b.n	8002872 <_strtod_l+0x3f2>
 80028a6:	9b07      	ldr	r3, [sp, #28]
 80028a8:	3316      	adds	r3, #22
 80028aa:	db0b      	blt.n	80028c4 <_strtod_l+0x444>
 80028ac:	9b04      	ldr	r3, [sp, #16]
 80028ae:	4a58      	ldr	r2, [pc, #352]	; (8002a10 <_strtod_l+0x590>)
 80028b0:	1b5d      	subs	r5, r3, r5
 80028b2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80028b6:	4640      	mov	r0, r8
 80028b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80028bc:	4649      	mov	r1, r9
 80028be:	f7fd ff3f 	bl	8000740 <__aeabi_ddiv>
 80028c2:	e79d      	b.n	8002800 <_strtod_l+0x380>
 80028c4:	9b07      	ldr	r3, [sp, #28]
 80028c6:	1ba6      	subs	r6, r4, r6
 80028c8:	441e      	add	r6, r3
 80028ca:	2e00      	cmp	r6, #0
 80028cc:	dd71      	ble.n	80029b2 <_strtod_l+0x532>
 80028ce:	f016 030f 	ands.w	r3, r6, #15
 80028d2:	d00a      	beq.n	80028ea <_strtod_l+0x46a>
 80028d4:	494e      	ldr	r1, [pc, #312]	; (8002a10 <_strtod_l+0x590>)
 80028d6:	4642      	mov	r2, r8
 80028d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80028dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028e0:	464b      	mov	r3, r9
 80028e2:	f7fd fe03 	bl	80004ec <__aeabi_dmul>
 80028e6:	4680      	mov	r8, r0
 80028e8:	4689      	mov	r9, r1
 80028ea:	f036 060f 	bics.w	r6, r6, #15
 80028ee:	d050      	beq.n	8002992 <_strtod_l+0x512>
 80028f0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80028f4:	dd27      	ble.n	8002946 <_strtod_l+0x4c6>
 80028f6:	f04f 0b00 	mov.w	fp, #0
 80028fa:	f8cd b010 	str.w	fp, [sp, #16]
 80028fe:	f8cd b020 	str.w	fp, [sp, #32]
 8002902:	f8cd b018 	str.w	fp, [sp, #24]
 8002906:	2322      	movs	r3, #34	; 0x22
 8002908:	f04f 0800 	mov.w	r8, #0
 800290c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8002a18 <_strtod_l+0x598>
 8002910:	f8ca 3000 	str.w	r3, [sl]
 8002914:	9b08      	ldr	r3, [sp, #32]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f43f adf3 	beq.w	8002502 <_strtod_l+0x82>
 800291c:	4650      	mov	r0, sl
 800291e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002920:	f000 fff6 	bl	8003910 <_Bfree>
 8002924:	4650      	mov	r0, sl
 8002926:	9906      	ldr	r1, [sp, #24]
 8002928:	f000 fff2 	bl	8003910 <_Bfree>
 800292c:	4650      	mov	r0, sl
 800292e:	9904      	ldr	r1, [sp, #16]
 8002930:	f000 ffee 	bl	8003910 <_Bfree>
 8002934:	4650      	mov	r0, sl
 8002936:	9908      	ldr	r1, [sp, #32]
 8002938:	f000 ffea 	bl	8003910 <_Bfree>
 800293c:	4659      	mov	r1, fp
 800293e:	4650      	mov	r0, sl
 8002940:	f000 ffe6 	bl	8003910 <_Bfree>
 8002944:	e5dd      	b.n	8002502 <_strtod_l+0x82>
 8002946:	2300      	movs	r3, #0
 8002948:	4640      	mov	r0, r8
 800294a:	4649      	mov	r1, r9
 800294c:	461f      	mov	r7, r3
 800294e:	1136      	asrs	r6, r6, #4
 8002950:	2e01      	cmp	r6, #1
 8002952:	dc21      	bgt.n	8002998 <_strtod_l+0x518>
 8002954:	b10b      	cbz	r3, 800295a <_strtod_l+0x4da>
 8002956:	4680      	mov	r8, r0
 8002958:	4689      	mov	r9, r1
 800295a:	4b2e      	ldr	r3, [pc, #184]	; (8002a14 <_strtod_l+0x594>)
 800295c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8002960:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8002964:	4642      	mov	r2, r8
 8002966:	e9d7 0100 	ldrd	r0, r1, [r7]
 800296a:	464b      	mov	r3, r9
 800296c:	f7fd fdbe 	bl	80004ec <__aeabi_dmul>
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <_strtod_l+0x598>)
 8002972:	460a      	mov	r2, r1
 8002974:	400b      	ands	r3, r1
 8002976:	4929      	ldr	r1, [pc, #164]	; (8002a1c <_strtod_l+0x59c>)
 8002978:	4680      	mov	r8, r0
 800297a:	428b      	cmp	r3, r1
 800297c:	d8bb      	bhi.n	80028f6 <_strtod_l+0x476>
 800297e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8002982:	428b      	cmp	r3, r1
 8002984:	bf86      	itte	hi
 8002986:	f04f 38ff 	movhi.w	r8, #4294967295
 800298a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8002a20 <_strtod_l+0x5a0>
 800298e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8002992:	2300      	movs	r3, #0
 8002994:	9305      	str	r3, [sp, #20]
 8002996:	e07e      	b.n	8002a96 <_strtod_l+0x616>
 8002998:	07f2      	lsls	r2, r6, #31
 800299a:	d507      	bpl.n	80029ac <_strtod_l+0x52c>
 800299c:	4b1d      	ldr	r3, [pc, #116]	; (8002a14 <_strtod_l+0x594>)
 800299e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80029a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029a6:	f7fd fda1 	bl	80004ec <__aeabi_dmul>
 80029aa:	2301      	movs	r3, #1
 80029ac:	3701      	adds	r7, #1
 80029ae:	1076      	asrs	r6, r6, #1
 80029b0:	e7ce      	b.n	8002950 <_strtod_l+0x4d0>
 80029b2:	d0ee      	beq.n	8002992 <_strtod_l+0x512>
 80029b4:	4276      	negs	r6, r6
 80029b6:	f016 020f 	ands.w	r2, r6, #15
 80029ba:	d00a      	beq.n	80029d2 <_strtod_l+0x552>
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <_strtod_l+0x590>)
 80029be:	4640      	mov	r0, r8
 80029c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029c4:	4649      	mov	r1, r9
 80029c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ca:	f7fd feb9 	bl	8000740 <__aeabi_ddiv>
 80029ce:	4680      	mov	r8, r0
 80029d0:	4689      	mov	r9, r1
 80029d2:	1136      	asrs	r6, r6, #4
 80029d4:	d0dd      	beq.n	8002992 <_strtod_l+0x512>
 80029d6:	2e1f      	cmp	r6, #31
 80029d8:	dd24      	ble.n	8002a24 <_strtod_l+0x5a4>
 80029da:	f04f 0b00 	mov.w	fp, #0
 80029de:	f8cd b010 	str.w	fp, [sp, #16]
 80029e2:	f8cd b020 	str.w	fp, [sp, #32]
 80029e6:	f8cd b018 	str.w	fp, [sp, #24]
 80029ea:	2322      	movs	r3, #34	; 0x22
 80029ec:	f04f 0800 	mov.w	r8, #0
 80029f0:	f04f 0900 	mov.w	r9, #0
 80029f4:	f8ca 3000 	str.w	r3, [sl]
 80029f8:	e78c      	b.n	8002914 <_strtod_l+0x494>
 80029fa:	bf00      	nop
 80029fc:	08005351 	.word	0x08005351
 8002a00:	08005368 	.word	0x08005368
 8002a04:	08005348 	.word	0x08005348
 8002a08:	0800534b 	.word	0x0800534b
 8002a0c:	080056e7 	.word	0x080056e7
 8002a10:	080055d8 	.word	0x080055d8
 8002a14:	080055b0 	.word	0x080055b0
 8002a18:	7ff00000 	.word	0x7ff00000
 8002a1c:	7ca00000 	.word	0x7ca00000
 8002a20:	7fefffff 	.word	0x7fefffff
 8002a24:	f016 0310 	ands.w	r3, r6, #16
 8002a28:	bf18      	it	ne
 8002a2a:	236a      	movne	r3, #106	; 0x6a
 8002a2c:	4640      	mov	r0, r8
 8002a2e:	9305      	str	r3, [sp, #20]
 8002a30:	4649      	mov	r1, r9
 8002a32:	2300      	movs	r3, #0
 8002a34:	4fb2      	ldr	r7, [pc, #712]	; (8002d00 <_strtod_l+0x880>)
 8002a36:	07f2      	lsls	r2, r6, #31
 8002a38:	d504      	bpl.n	8002a44 <_strtod_l+0x5c4>
 8002a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a3e:	f7fd fd55 	bl	80004ec <__aeabi_dmul>
 8002a42:	2301      	movs	r3, #1
 8002a44:	1076      	asrs	r6, r6, #1
 8002a46:	f107 0708 	add.w	r7, r7, #8
 8002a4a:	d1f4      	bne.n	8002a36 <_strtod_l+0x5b6>
 8002a4c:	b10b      	cbz	r3, 8002a52 <_strtod_l+0x5d2>
 8002a4e:	4680      	mov	r8, r0
 8002a50:	4689      	mov	r9, r1
 8002a52:	9b05      	ldr	r3, [sp, #20]
 8002a54:	b1bb      	cbz	r3, 8002a86 <_strtod_l+0x606>
 8002a56:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8002a5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	4649      	mov	r1, r9
 8002a62:	dd10      	ble.n	8002a86 <_strtod_l+0x606>
 8002a64:	2b1f      	cmp	r3, #31
 8002a66:	f340 812b 	ble.w	8002cc0 <_strtod_l+0x840>
 8002a6a:	2b34      	cmp	r3, #52	; 0x34
 8002a6c:	bfd8      	it	le
 8002a6e:	f04f 32ff 	movle.w	r2, #4294967295
 8002a72:	f04f 0800 	mov.w	r8, #0
 8002a76:	bfcf      	iteee	gt
 8002a78:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8002a7c:	3b20      	suble	r3, #32
 8002a7e:	fa02 f303 	lslle.w	r3, r2, r3
 8002a82:	ea03 0901 	andle.w	r9, r3, r1
 8002a86:	2200      	movs	r2, #0
 8002a88:	2300      	movs	r3, #0
 8002a8a:	4640      	mov	r0, r8
 8002a8c:	4649      	mov	r1, r9
 8002a8e:	f7fd ff95 	bl	80009bc <__aeabi_dcmpeq>
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d1a1      	bne.n	80029da <_strtod_l+0x55a>
 8002a96:	9b06      	ldr	r3, [sp, #24]
 8002a98:	465a      	mov	r2, fp
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4650      	mov	r0, sl
 8002a9e:	4623      	mov	r3, r4
 8002aa0:	9908      	ldr	r1, [sp, #32]
 8002aa2:	f000 ffa1 	bl	80039e8 <__s2b>
 8002aa6:	9008      	str	r0, [sp, #32]
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	f43f af24 	beq.w	80028f6 <_strtod_l+0x476>
 8002aae:	9b04      	ldr	r3, [sp, #16]
 8002ab0:	f04f 0b00 	mov.w	fp, #0
 8002ab4:	1b5d      	subs	r5, r3, r5
 8002ab6:	9b07      	ldr	r3, [sp, #28]
 8002ab8:	f8cd b010 	str.w	fp, [sp, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	bfb4      	ite	lt
 8002ac0:	462b      	movlt	r3, r5
 8002ac2:	2300      	movge	r3, #0
 8002ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8002ac6:	9b07      	ldr	r3, [sp, #28]
 8002ac8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002acc:	9316      	str	r3, [sp, #88]	; 0x58
 8002ace:	9b08      	ldr	r3, [sp, #32]
 8002ad0:	4650      	mov	r0, sl
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	f000 fedc 	bl	8003890 <_Balloc>
 8002ad8:	9006      	str	r0, [sp, #24]
 8002ada:	2800      	cmp	r0, #0
 8002adc:	f43f af13 	beq.w	8002906 <_strtod_l+0x486>
 8002ae0:	9b08      	ldr	r3, [sp, #32]
 8002ae2:	300c      	adds	r0, #12
 8002ae4:	691a      	ldr	r2, [r3, #16]
 8002ae6:	f103 010c 	add.w	r1, r3, #12
 8002aea:	3202      	adds	r2, #2
 8002aec:	0092      	lsls	r2, r2, #2
 8002aee:	f7ff fc7b 	bl	80023e8 <memcpy>
 8002af2:	ab1e      	add	r3, sp, #120	; 0x78
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	ab1d      	add	r3, sp, #116	; 0x74
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	4642      	mov	r2, r8
 8002afc:	464b      	mov	r3, r9
 8002afe:	4650      	mov	r0, sl
 8002b00:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8002b04:	f001 faae 	bl	8004064 <__d2b>
 8002b08:	901c      	str	r0, [sp, #112]	; 0x70
 8002b0a:	2800      	cmp	r0, #0
 8002b0c:	f43f aefb 	beq.w	8002906 <_strtod_l+0x486>
 8002b10:	2101      	movs	r1, #1
 8002b12:	4650      	mov	r0, sl
 8002b14:	f001 f800 	bl	8003b18 <__i2b>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	9004      	str	r0, [sp, #16]
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	f43f aef2 	beq.w	8002906 <_strtod_l+0x486>
 8002b22:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8002b24:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002b26:	2d00      	cmp	r5, #0
 8002b28:	bfab      	itete	ge
 8002b2a:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8002b2c:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8002b2e:	18ee      	addge	r6, r5, r3
 8002b30:	1b5c      	sublt	r4, r3, r5
 8002b32:	9b05      	ldr	r3, [sp, #20]
 8002b34:	bfa8      	it	ge
 8002b36:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8002b38:	eba5 0503 	sub.w	r5, r5, r3
 8002b3c:	4415      	add	r5, r2
 8002b3e:	4b71      	ldr	r3, [pc, #452]	; (8002d04 <_strtod_l+0x884>)
 8002b40:	f105 35ff 	add.w	r5, r5, #4294967295
 8002b44:	bfb8      	it	lt
 8002b46:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8002b48:	429d      	cmp	r5, r3
 8002b4a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8002b4e:	f280 80c9 	bge.w	8002ce4 <_strtod_l+0x864>
 8002b52:	1b5b      	subs	r3, r3, r5
 8002b54:	2b1f      	cmp	r3, #31
 8002b56:	f04f 0701 	mov.w	r7, #1
 8002b5a:	eba2 0203 	sub.w	r2, r2, r3
 8002b5e:	f300 80b6 	bgt.w	8002cce <_strtod_l+0x84e>
 8002b62:	2500      	movs	r5, #0
 8002b64:	fa07 f303 	lsl.w	r3, r7, r3
 8002b68:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b6a:	18b7      	adds	r7, r6, r2
 8002b6c:	9b05      	ldr	r3, [sp, #20]
 8002b6e:	42be      	cmp	r6, r7
 8002b70:	4414      	add	r4, r2
 8002b72:	441c      	add	r4, r3
 8002b74:	4633      	mov	r3, r6
 8002b76:	bfa8      	it	ge
 8002b78:	463b      	movge	r3, r7
 8002b7a:	42a3      	cmp	r3, r4
 8002b7c:	bfa8      	it	ge
 8002b7e:	4623      	movge	r3, r4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bfc2      	ittt	gt
 8002b84:	1aff      	subgt	r7, r7, r3
 8002b86:	1ae4      	subgt	r4, r4, r3
 8002b88:	1af6      	subgt	r6, r6, r3
 8002b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	dd17      	ble.n	8002bc0 <_strtod_l+0x740>
 8002b90:	461a      	mov	r2, r3
 8002b92:	4650      	mov	r0, sl
 8002b94:	9904      	ldr	r1, [sp, #16]
 8002b96:	f001 f879 	bl	8003c8c <__pow5mult>
 8002b9a:	9004      	str	r0, [sp, #16]
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	f43f aeb2 	beq.w	8002906 <_strtod_l+0x486>
 8002ba2:	4601      	mov	r1, r0
 8002ba4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002ba6:	4650      	mov	r0, sl
 8002ba8:	f000 ffcc 	bl	8003b44 <__multiply>
 8002bac:	9009      	str	r0, [sp, #36]	; 0x24
 8002bae:	2800      	cmp	r0, #0
 8002bb0:	f43f aea9 	beq.w	8002906 <_strtod_l+0x486>
 8002bb4:	4650      	mov	r0, sl
 8002bb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002bb8:	f000 feaa 	bl	8003910 <_Bfree>
 8002bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bbe:	931c      	str	r3, [sp, #112]	; 0x70
 8002bc0:	2f00      	cmp	r7, #0
 8002bc2:	f300 8093 	bgt.w	8002cec <_strtod_l+0x86c>
 8002bc6:	9b07      	ldr	r3, [sp, #28]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	dd08      	ble.n	8002bde <_strtod_l+0x75e>
 8002bcc:	4650      	mov	r0, sl
 8002bce:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8002bd0:	9906      	ldr	r1, [sp, #24]
 8002bd2:	f001 f85b 	bl	8003c8c <__pow5mult>
 8002bd6:	9006      	str	r0, [sp, #24]
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	f43f ae94 	beq.w	8002906 <_strtod_l+0x486>
 8002bde:	2c00      	cmp	r4, #0
 8002be0:	dd08      	ble.n	8002bf4 <_strtod_l+0x774>
 8002be2:	4622      	mov	r2, r4
 8002be4:	4650      	mov	r0, sl
 8002be6:	9906      	ldr	r1, [sp, #24]
 8002be8:	f001 f8aa 	bl	8003d40 <__lshift>
 8002bec:	9006      	str	r0, [sp, #24]
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	f43f ae89 	beq.w	8002906 <_strtod_l+0x486>
 8002bf4:	2e00      	cmp	r6, #0
 8002bf6:	dd08      	ble.n	8002c0a <_strtod_l+0x78a>
 8002bf8:	4632      	mov	r2, r6
 8002bfa:	4650      	mov	r0, sl
 8002bfc:	9904      	ldr	r1, [sp, #16]
 8002bfe:	f001 f89f 	bl	8003d40 <__lshift>
 8002c02:	9004      	str	r0, [sp, #16]
 8002c04:	2800      	cmp	r0, #0
 8002c06:	f43f ae7e 	beq.w	8002906 <_strtod_l+0x486>
 8002c0a:	4650      	mov	r0, sl
 8002c0c:	9a06      	ldr	r2, [sp, #24]
 8002c0e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002c10:	f001 f91e 	bl	8003e50 <__mdiff>
 8002c14:	4683      	mov	fp, r0
 8002c16:	2800      	cmp	r0, #0
 8002c18:	f43f ae75 	beq.w	8002906 <_strtod_l+0x486>
 8002c1c:	2400      	movs	r4, #0
 8002c1e:	68c3      	ldr	r3, [r0, #12]
 8002c20:	9904      	ldr	r1, [sp, #16]
 8002c22:	60c4      	str	r4, [r0, #12]
 8002c24:	930d      	str	r3, [sp, #52]	; 0x34
 8002c26:	f001 f8f7 	bl	8003e18 <__mcmp>
 8002c2a:	42a0      	cmp	r0, r4
 8002c2c:	da70      	bge.n	8002d10 <_strtod_l+0x890>
 8002c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c30:	ea53 0308 	orrs.w	r3, r3, r8
 8002c34:	f040 8096 	bne.w	8002d64 <_strtod_l+0x8e4>
 8002c38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f040 8091 	bne.w	8002d64 <_strtod_l+0x8e4>
 8002c42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002c46:	0d1b      	lsrs	r3, r3, #20
 8002c48:	051b      	lsls	r3, r3, #20
 8002c4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8002c4e:	f240 8089 	bls.w	8002d64 <_strtod_l+0x8e4>
 8002c52:	f8db 3014 	ldr.w	r3, [fp, #20]
 8002c56:	b923      	cbnz	r3, 8002c62 <_strtod_l+0x7e2>
 8002c58:	f8db 3010 	ldr.w	r3, [fp, #16]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	f340 8081 	ble.w	8002d64 <_strtod_l+0x8e4>
 8002c62:	4659      	mov	r1, fp
 8002c64:	2201      	movs	r2, #1
 8002c66:	4650      	mov	r0, sl
 8002c68:	f001 f86a 	bl	8003d40 <__lshift>
 8002c6c:	9904      	ldr	r1, [sp, #16]
 8002c6e:	4683      	mov	fp, r0
 8002c70:	f001 f8d2 	bl	8003e18 <__mcmp>
 8002c74:	2800      	cmp	r0, #0
 8002c76:	dd75      	ble.n	8002d64 <_strtod_l+0x8e4>
 8002c78:	9905      	ldr	r1, [sp, #20]
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <_strtod_l+0x888>)
 8002c7e:	2900      	cmp	r1, #0
 8002c80:	f000 8091 	beq.w	8002da6 <_strtod_l+0x926>
 8002c84:	ea02 0109 	and.w	r1, r2, r9
 8002c88:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8002c8c:	f300 808b 	bgt.w	8002da6 <_strtod_l+0x926>
 8002c90:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8002c94:	f77f aea9 	ble.w	80029ea <_strtod_l+0x56a>
 8002c98:	2300      	movs	r3, #0
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <_strtod_l+0x88c>)
 8002c9c:	4640      	mov	r0, r8
 8002c9e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8002ca2:	4649      	mov	r1, r9
 8002ca4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8002ca8:	f7fd fc20 	bl	80004ec <__aeabi_dmul>
 8002cac:	460b      	mov	r3, r1
 8002cae:	4303      	orrs	r3, r0
 8002cb0:	bf08      	it	eq
 8002cb2:	2322      	moveq	r3, #34	; 0x22
 8002cb4:	4680      	mov	r8, r0
 8002cb6:	4689      	mov	r9, r1
 8002cb8:	bf08      	it	eq
 8002cba:	f8ca 3000 	streq.w	r3, [sl]
 8002cbe:	e62d      	b.n	800291c <_strtod_l+0x49c>
 8002cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	ea03 0808 	and.w	r8, r3, r8
 8002ccc:	e6db      	b.n	8002a86 <_strtod_l+0x606>
 8002cce:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8002cd2:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8002cd6:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8002cda:	35e2      	adds	r5, #226	; 0xe2
 8002cdc:	fa07 f505 	lsl.w	r5, r7, r5
 8002ce0:	970f      	str	r7, [sp, #60]	; 0x3c
 8002ce2:	e742      	b.n	8002b6a <_strtod_l+0x6ea>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	2500      	movs	r5, #0
 8002ce8:	930f      	str	r3, [sp, #60]	; 0x3c
 8002cea:	e73e      	b.n	8002b6a <_strtod_l+0x6ea>
 8002cec:	463a      	mov	r2, r7
 8002cee:	4650      	mov	r0, sl
 8002cf0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002cf2:	f001 f825 	bl	8003d40 <__lshift>
 8002cf6:	901c      	str	r0, [sp, #112]	; 0x70
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	f47f af64 	bne.w	8002bc6 <_strtod_l+0x746>
 8002cfe:	e602      	b.n	8002906 <_strtod_l+0x486>
 8002d00:	08005380 	.word	0x08005380
 8002d04:	fffffc02 	.word	0xfffffc02
 8002d08:	7ff00000 	.word	0x7ff00000
 8002d0c:	39500000 	.word	0x39500000
 8002d10:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8002d14:	d166      	bne.n	8002de4 <_strtod_l+0x964>
 8002d16:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002d18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002d1c:	b35a      	cbz	r2, 8002d76 <_strtod_l+0x8f6>
 8002d1e:	4a9c      	ldr	r2, [pc, #624]	; (8002f90 <_strtod_l+0xb10>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d12c      	bne.n	8002d7e <_strtod_l+0x8fe>
 8002d24:	9b05      	ldr	r3, [sp, #20]
 8002d26:	4640      	mov	r0, r8
 8002d28:	b303      	cbz	r3, 8002d6c <_strtod_l+0x8ec>
 8002d2a:	464b      	mov	r3, r9
 8002d2c:	4a99      	ldr	r2, [pc, #612]	; (8002f94 <_strtod_l+0xb14>)
 8002d2e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d32:	401a      	ands	r2, r3
 8002d34:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8002d38:	d81b      	bhi.n	8002d72 <_strtod_l+0x8f2>
 8002d3a:	0d12      	lsrs	r2, r2, #20
 8002d3c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	4298      	cmp	r0, r3
 8002d46:	d11a      	bne.n	8002d7e <_strtod_l+0x8fe>
 8002d48:	4b93      	ldr	r3, [pc, #588]	; (8002f98 <_strtod_l+0xb18>)
 8002d4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d102      	bne.n	8002d56 <_strtod_l+0x8d6>
 8002d50:	3001      	adds	r0, #1
 8002d52:	f43f add8 	beq.w	8002906 <_strtod_l+0x486>
 8002d56:	f04f 0800 	mov.w	r8, #0
 8002d5a:	4b8e      	ldr	r3, [pc, #568]	; (8002f94 <_strtod_l+0xb14>)
 8002d5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d5e:	401a      	ands	r2, r3
 8002d60:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8002d64:	9b05      	ldr	r3, [sp, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d196      	bne.n	8002c98 <_strtod_l+0x818>
 8002d6a:	e5d7      	b.n	800291c <_strtod_l+0x49c>
 8002d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d70:	e7e8      	b.n	8002d44 <_strtod_l+0x8c4>
 8002d72:	460b      	mov	r3, r1
 8002d74:	e7e6      	b.n	8002d44 <_strtod_l+0x8c4>
 8002d76:	ea53 0308 	orrs.w	r3, r3, r8
 8002d7a:	f43f af7d 	beq.w	8002c78 <_strtod_l+0x7f8>
 8002d7e:	b1e5      	cbz	r5, 8002dba <_strtod_l+0x93a>
 8002d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d82:	421d      	tst	r5, r3
 8002d84:	d0ee      	beq.n	8002d64 <_strtod_l+0x8e4>
 8002d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d88:	4640      	mov	r0, r8
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	9a05      	ldr	r2, [sp, #20]
 8002d8e:	b1c3      	cbz	r3, 8002dc2 <_strtod_l+0x942>
 8002d90:	f7ff fb53 	bl	800243a <sulp>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002d9c:	f7fd f9f0 	bl	8000180 <__adddf3>
 8002da0:	4680      	mov	r8, r0
 8002da2:	4689      	mov	r9, r1
 8002da4:	e7de      	b.n	8002d64 <_strtod_l+0x8e4>
 8002da6:	4013      	ands	r3, r2
 8002da8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002dac:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8002db0:	f04f 38ff 	mov.w	r8, #4294967295
 8002db4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8002db8:	e7d4      	b.n	8002d64 <_strtod_l+0x8e4>
 8002dba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002dbc:	ea13 0f08 	tst.w	r3, r8
 8002dc0:	e7e0      	b.n	8002d84 <_strtod_l+0x904>
 8002dc2:	f7ff fb3a 	bl	800243a <sulp>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002dce:	f7fd f9d5 	bl	800017c <__aeabi_dsub>
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	4680      	mov	r8, r0
 8002dd8:	4689      	mov	r9, r1
 8002dda:	f7fd fdef 	bl	80009bc <__aeabi_dcmpeq>
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d0c0      	beq.n	8002d64 <_strtod_l+0x8e4>
 8002de2:	e602      	b.n	80029ea <_strtod_l+0x56a>
 8002de4:	4658      	mov	r0, fp
 8002de6:	9904      	ldr	r1, [sp, #16]
 8002de8:	f001 f998 	bl	800411c <__ratio>
 8002dec:	2200      	movs	r2, #0
 8002dee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002df2:	4606      	mov	r6, r0
 8002df4:	460f      	mov	r7, r1
 8002df6:	f7fd fdf5 	bl	80009e4 <__aeabi_dcmple>
 8002dfa:	2800      	cmp	r0, #0
 8002dfc:	d075      	beq.n	8002eea <_strtod_l+0xa6a>
 8002dfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d047      	beq.n	8002e94 <_strtod_l+0xa14>
 8002e04:	2600      	movs	r6, #0
 8002e06:	4f65      	ldr	r7, [pc, #404]	; (8002f9c <_strtod_l+0xb1c>)
 8002e08:	4d64      	ldr	r5, [pc, #400]	; (8002f9c <_strtod_l+0xb1c>)
 8002e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e10:	0d1b      	lsrs	r3, r3, #20
 8002e12:	051b      	lsls	r3, r3, #20
 8002e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8002e16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <_strtod_l+0xb20>)
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	f040 80c8 	bne.w	8002fb0 <_strtod_l+0xb30>
 8002e20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002e24:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8002e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e2a:	4640      	mov	r0, r8
 8002e2c:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8002e30:	4649      	mov	r1, r9
 8002e32:	f001 f89d 	bl	8003f70 <__ulp>
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4630      	mov	r0, r6
 8002e3c:	4639      	mov	r1, r7
 8002e3e:	f7fd fb55 	bl	80004ec <__aeabi_dmul>
 8002e42:	4642      	mov	r2, r8
 8002e44:	464b      	mov	r3, r9
 8002e46:	f7fd f99b 	bl	8000180 <__adddf3>
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4951      	ldr	r1, [pc, #324]	; (8002f94 <_strtod_l+0xb14>)
 8002e4e:	4a55      	ldr	r2, [pc, #340]	; (8002fa4 <_strtod_l+0xb24>)
 8002e50:	4019      	ands	r1, r3
 8002e52:	4291      	cmp	r1, r2
 8002e54:	4680      	mov	r8, r0
 8002e56:	d95e      	bls.n	8002f16 <_strtod_l+0xa96>
 8002e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e5a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d103      	bne.n	8002e6a <_strtod_l+0x9ea>
 8002e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e64:	3301      	adds	r3, #1
 8002e66:	f43f ad4e 	beq.w	8002906 <_strtod_l+0x486>
 8002e6a:	f04f 38ff 	mov.w	r8, #4294967295
 8002e6e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8002f98 <_strtod_l+0xb18>
 8002e72:	4650      	mov	r0, sl
 8002e74:	991c      	ldr	r1, [sp, #112]	; 0x70
 8002e76:	f000 fd4b 	bl	8003910 <_Bfree>
 8002e7a:	4650      	mov	r0, sl
 8002e7c:	9906      	ldr	r1, [sp, #24]
 8002e7e:	f000 fd47 	bl	8003910 <_Bfree>
 8002e82:	4650      	mov	r0, sl
 8002e84:	9904      	ldr	r1, [sp, #16]
 8002e86:	f000 fd43 	bl	8003910 <_Bfree>
 8002e8a:	4659      	mov	r1, fp
 8002e8c:	4650      	mov	r0, sl
 8002e8e:	f000 fd3f 	bl	8003910 <_Bfree>
 8002e92:	e61c      	b.n	8002ace <_strtod_l+0x64e>
 8002e94:	f1b8 0f00 	cmp.w	r8, #0
 8002e98:	d119      	bne.n	8002ece <_strtod_l+0xa4e>
 8002e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea0:	b9e3      	cbnz	r3, 8002edc <_strtod_l+0xa5c>
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	4630      	mov	r0, r6
 8002ea6:	4639      	mov	r1, r7
 8002ea8:	4b3c      	ldr	r3, [pc, #240]	; (8002f9c <_strtod_l+0xb1c>)
 8002eaa:	f7fd fd91 	bl	80009d0 <__aeabi_dcmplt>
 8002eae:	b9c8      	cbnz	r0, 8002ee4 <_strtod_l+0xa64>
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	4639      	mov	r1, r7
 8002eb6:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <_strtod_l+0xb28>)
 8002eb8:	f7fd fb18 	bl	80004ec <__aeabi_dmul>
 8002ebc:	4604      	mov	r4, r0
 8002ebe:	460d      	mov	r5, r1
 8002ec0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002ec4:	9418      	str	r4, [sp, #96]	; 0x60
 8002ec6:	9319      	str	r3, [sp, #100]	; 0x64
 8002ec8:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8002ecc:	e79d      	b.n	8002e0a <_strtod_l+0x98a>
 8002ece:	f1b8 0f01 	cmp.w	r8, #1
 8002ed2:	d103      	bne.n	8002edc <_strtod_l+0xa5c>
 8002ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f43f ad87 	beq.w	80029ea <_strtod_l+0x56a>
 8002edc:	2600      	movs	r6, #0
 8002ede:	2400      	movs	r4, #0
 8002ee0:	4f32      	ldr	r7, [pc, #200]	; (8002fac <_strtod_l+0xb2c>)
 8002ee2:	e791      	b.n	8002e08 <_strtod_l+0x988>
 8002ee4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002ee6:	4d30      	ldr	r5, [pc, #192]	; (8002fa8 <_strtod_l+0xb28>)
 8002ee8:	e7ea      	b.n	8002ec0 <_strtod_l+0xa40>
 8002eea:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <_strtod_l+0xb28>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	4630      	mov	r0, r6
 8002ef0:	4639      	mov	r1, r7
 8002ef2:	f7fd fafb 	bl	80004ec <__aeabi_dmul>
 8002ef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002ef8:	4604      	mov	r4, r0
 8002efa:	460d      	mov	r5, r1
 8002efc:	b933      	cbnz	r3, 8002f0c <_strtod_l+0xa8c>
 8002efe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002f02:	9010      	str	r0, [sp, #64]	; 0x40
 8002f04:	9311      	str	r3, [sp, #68]	; 0x44
 8002f06:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8002f0a:	e77e      	b.n	8002e0a <_strtod_l+0x98a>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8002f14:	e7f7      	b.n	8002f06 <_strtod_l+0xa86>
 8002f16:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8002f1a:	9b05      	ldr	r3, [sp, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d1a8      	bne.n	8002e72 <_strtod_l+0x9f2>
 8002f20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002f24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002f26:	0d1b      	lsrs	r3, r3, #20
 8002f28:	051b      	lsls	r3, r3, #20
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d1a1      	bne.n	8002e72 <_strtod_l+0x9f2>
 8002f2e:	4620      	mov	r0, r4
 8002f30:	4629      	mov	r1, r5
 8002f32:	f7fd fde5 	bl	8000b00 <__aeabi_d2lz>
 8002f36:	f7fd faab 	bl	8000490 <__aeabi_l2d>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4620      	mov	r0, r4
 8002f40:	4629      	mov	r1, r5
 8002f42:	f7fd f91b 	bl	800017c <__aeabi_dsub>
 8002f46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002f4c:	ea43 0308 	orr.w	r3, r3, r8
 8002f50:	4313      	orrs	r3, r2
 8002f52:	4604      	mov	r4, r0
 8002f54:	460d      	mov	r5, r1
 8002f56:	d066      	beq.n	8003026 <_strtod_l+0xba6>
 8002f58:	a309      	add	r3, pc, #36	; (adr r3, 8002f80 <_strtod_l+0xb00>)
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f7fd fd37 	bl	80009d0 <__aeabi_dcmplt>
 8002f62:	2800      	cmp	r0, #0
 8002f64:	f47f acda 	bne.w	800291c <_strtod_l+0x49c>
 8002f68:	a307      	add	r3, pc, #28	; (adr r3, 8002f88 <_strtod_l+0xb08>)
 8002f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6e:	4620      	mov	r0, r4
 8002f70:	4629      	mov	r1, r5
 8002f72:	f7fd fd4b 	bl	8000a0c <__aeabi_dcmpgt>
 8002f76:	2800      	cmp	r0, #0
 8002f78:	f43f af7b 	beq.w	8002e72 <_strtod_l+0x9f2>
 8002f7c:	e4ce      	b.n	800291c <_strtod_l+0x49c>
 8002f7e:	bf00      	nop
 8002f80:	94a03595 	.word	0x94a03595
 8002f84:	3fdfffff 	.word	0x3fdfffff
 8002f88:	35afe535 	.word	0x35afe535
 8002f8c:	3fe00000 	.word	0x3fe00000
 8002f90:	000fffff 	.word	0x000fffff
 8002f94:	7ff00000 	.word	0x7ff00000
 8002f98:	7fefffff 	.word	0x7fefffff
 8002f9c:	3ff00000 	.word	0x3ff00000
 8002fa0:	7fe00000 	.word	0x7fe00000
 8002fa4:	7c9fffff 	.word	0x7c9fffff
 8002fa8:	3fe00000 	.word	0x3fe00000
 8002fac:	bff00000 	.word	0xbff00000
 8002fb0:	9b05      	ldr	r3, [sp, #20]
 8002fb2:	b313      	cbz	r3, 8002ffa <_strtod_l+0xb7a>
 8002fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fb6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8002fba:	d81e      	bhi.n	8002ffa <_strtod_l+0xb7a>
 8002fbc:	a326      	add	r3, pc, #152	; (adr r3, 8003058 <_strtod_l+0xbd8>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	f7fd fd0d 	bl	80009e4 <__aeabi_dcmple>
 8002fca:	b190      	cbz	r0, 8002ff2 <_strtod_l+0xb72>
 8002fcc:	4629      	mov	r1, r5
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f7fd fd26 	bl	8000a20 <__aeabi_d2uiz>
 8002fd4:	2801      	cmp	r0, #1
 8002fd6:	bf38      	it	cc
 8002fd8:	2001      	movcc	r0, #1
 8002fda:	f7fd fa0d 	bl	80003f8 <__aeabi_ui2d>
 8002fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	460d      	mov	r5, r1
 8002fe4:	b9d3      	cbnz	r3, 800301c <_strtod_l+0xb9c>
 8002fe6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002fea:	9012      	str	r0, [sp, #72]	; 0x48
 8002fec:	9313      	str	r3, [sp, #76]	; 0x4c
 8002fee:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8002ff2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002ff4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8002ff8:	1a9f      	subs	r7, r3, r2
 8002ffa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002ffe:	f000 ffb7 	bl	8003f70 <__ulp>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4630      	mov	r0, r6
 8003008:	4639      	mov	r1, r7
 800300a:	f7fd fa6f 	bl	80004ec <__aeabi_dmul>
 800300e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003012:	f7fd f8b5 	bl	8000180 <__adddf3>
 8003016:	4680      	mov	r8, r0
 8003018:	4689      	mov	r9, r1
 800301a:	e77e      	b.n	8002f1a <_strtod_l+0xa9a>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8003024:	e7e3      	b.n	8002fee <_strtod_l+0xb6e>
 8003026:	a30e      	add	r3, pc, #56	; (adr r3, 8003060 <_strtod_l+0xbe0>)
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f7fd fcd0 	bl	80009d0 <__aeabi_dcmplt>
 8003030:	e7a1      	b.n	8002f76 <_strtod_l+0xaf6>
 8003032:	2300      	movs	r3, #0
 8003034:	930c      	str	r3, [sp, #48]	; 0x30
 8003036:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003038:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800303a:	6013      	str	r3, [r2, #0]
 800303c:	f7ff ba65 	b.w	800250a <_strtod_l+0x8a>
 8003040:	2b65      	cmp	r3, #101	; 0x65
 8003042:	f43f ab5c 	beq.w	80026fe <_strtod_l+0x27e>
 8003046:	2b45      	cmp	r3, #69	; 0x45
 8003048:	f43f ab59 	beq.w	80026fe <_strtod_l+0x27e>
 800304c:	2201      	movs	r2, #1
 800304e:	f7ff bb8d 	b.w	800276c <_strtod_l+0x2ec>
 8003052:	bf00      	nop
 8003054:	f3af 8000 	nop.w
 8003058:	ffc00000 	.word	0xffc00000
 800305c:	41dfffff 	.word	0x41dfffff
 8003060:	94a03595 	.word	0x94a03595
 8003064:	3fcfffff 	.word	0x3fcfffff

08003068 <strtod>:
 8003068:	460a      	mov	r2, r1
 800306a:	4601      	mov	r1, r0
 800306c:	4802      	ldr	r0, [pc, #8]	; (8003078 <strtod+0x10>)
 800306e:	4b03      	ldr	r3, [pc, #12]	; (800307c <strtod+0x14>)
 8003070:	6800      	ldr	r0, [r0, #0]
 8003072:	f7ff ba05 	b.w	8002480 <_strtod_l>
 8003076:	bf00      	nop
 8003078:	20000014 	.word	0x20000014
 800307c:	2000007c 	.word	0x2000007c

08003080 <_strtol_l.isra.0>:
 8003080:	2b01      	cmp	r3, #1
 8003082:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003086:	4686      	mov	lr, r0
 8003088:	d001      	beq.n	800308e <_strtol_l.isra.0+0xe>
 800308a:	2b24      	cmp	r3, #36	; 0x24
 800308c:	d906      	bls.n	800309c <_strtol_l.isra.0+0x1c>
 800308e:	f7ff f981 	bl	8002394 <__errno>
 8003092:	2316      	movs	r3, #22
 8003094:	6003      	str	r3, [r0, #0]
 8003096:	2000      	movs	r0, #0
 8003098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800309c:	468c      	mov	ip, r1
 800309e:	4e3a      	ldr	r6, [pc, #232]	; (8003188 <_strtol_l.isra.0+0x108>)
 80030a0:	4660      	mov	r0, ip
 80030a2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80030a6:	5da5      	ldrb	r5, [r4, r6]
 80030a8:	f015 0508 	ands.w	r5, r5, #8
 80030ac:	d1f8      	bne.n	80030a0 <_strtol_l.isra.0+0x20>
 80030ae:	2c2d      	cmp	r4, #45	; 0x2d
 80030b0:	d133      	bne.n	800311a <_strtol_l.isra.0+0x9a>
 80030b2:	f04f 0801 	mov.w	r8, #1
 80030b6:	f89c 4000 	ldrb.w	r4, [ip]
 80030ba:	f100 0c02 	add.w	ip, r0, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d05d      	beq.n	800317e <_strtol_l.isra.0+0xfe>
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d10c      	bne.n	80030e0 <_strtol_l.isra.0+0x60>
 80030c6:	2c30      	cmp	r4, #48	; 0x30
 80030c8:	d10a      	bne.n	80030e0 <_strtol_l.isra.0+0x60>
 80030ca:	f89c 0000 	ldrb.w	r0, [ip]
 80030ce:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80030d2:	2858      	cmp	r0, #88	; 0x58
 80030d4:	d14e      	bne.n	8003174 <_strtol_l.isra.0+0xf4>
 80030d6:	2310      	movs	r3, #16
 80030d8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 80030dc:	f10c 0c02 	add.w	ip, ip, #2
 80030e0:	2500      	movs	r5, #0
 80030e2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 80030e6:	3f01      	subs	r7, #1
 80030e8:	fbb7 f9f3 	udiv	r9, r7, r3
 80030ec:	4628      	mov	r0, r5
 80030ee:	fb03 7a19 	mls	sl, r3, r9, r7
 80030f2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80030f6:	2e09      	cmp	r6, #9
 80030f8:	d818      	bhi.n	800312c <_strtol_l.isra.0+0xac>
 80030fa:	4634      	mov	r4, r6
 80030fc:	42a3      	cmp	r3, r4
 80030fe:	dd24      	ble.n	800314a <_strtol_l.isra.0+0xca>
 8003100:	2d00      	cmp	r5, #0
 8003102:	db1f      	blt.n	8003144 <_strtol_l.isra.0+0xc4>
 8003104:	4581      	cmp	r9, r0
 8003106:	d31d      	bcc.n	8003144 <_strtol_l.isra.0+0xc4>
 8003108:	d101      	bne.n	800310e <_strtol_l.isra.0+0x8e>
 800310a:	45a2      	cmp	sl, r4
 800310c:	db1a      	blt.n	8003144 <_strtol_l.isra.0+0xc4>
 800310e:	2501      	movs	r5, #1
 8003110:	fb00 4003 	mla	r0, r0, r3, r4
 8003114:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8003118:	e7eb      	b.n	80030f2 <_strtol_l.isra.0+0x72>
 800311a:	2c2b      	cmp	r4, #43	; 0x2b
 800311c:	bf08      	it	eq
 800311e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8003122:	46a8      	mov	r8, r5
 8003124:	bf08      	it	eq
 8003126:	f100 0c02 	addeq.w	ip, r0, #2
 800312a:	e7c8      	b.n	80030be <_strtol_l.isra.0+0x3e>
 800312c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8003130:	2e19      	cmp	r6, #25
 8003132:	d801      	bhi.n	8003138 <_strtol_l.isra.0+0xb8>
 8003134:	3c37      	subs	r4, #55	; 0x37
 8003136:	e7e1      	b.n	80030fc <_strtol_l.isra.0+0x7c>
 8003138:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800313c:	2e19      	cmp	r6, #25
 800313e:	d804      	bhi.n	800314a <_strtol_l.isra.0+0xca>
 8003140:	3c57      	subs	r4, #87	; 0x57
 8003142:	e7db      	b.n	80030fc <_strtol_l.isra.0+0x7c>
 8003144:	f04f 35ff 	mov.w	r5, #4294967295
 8003148:	e7e4      	b.n	8003114 <_strtol_l.isra.0+0x94>
 800314a:	2d00      	cmp	r5, #0
 800314c:	da08      	bge.n	8003160 <_strtol_l.isra.0+0xe0>
 800314e:	2322      	movs	r3, #34	; 0x22
 8003150:	4638      	mov	r0, r7
 8003152:	f8ce 3000 	str.w	r3, [lr]
 8003156:	2a00      	cmp	r2, #0
 8003158:	d09e      	beq.n	8003098 <_strtol_l.isra.0+0x18>
 800315a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800315e:	e007      	b.n	8003170 <_strtol_l.isra.0+0xf0>
 8003160:	f1b8 0f00 	cmp.w	r8, #0
 8003164:	d000      	beq.n	8003168 <_strtol_l.isra.0+0xe8>
 8003166:	4240      	negs	r0, r0
 8003168:	2a00      	cmp	r2, #0
 800316a:	d095      	beq.n	8003098 <_strtol_l.isra.0+0x18>
 800316c:	2d00      	cmp	r5, #0
 800316e:	d1f4      	bne.n	800315a <_strtol_l.isra.0+0xda>
 8003170:	6011      	str	r1, [r2, #0]
 8003172:	e791      	b.n	8003098 <_strtol_l.isra.0+0x18>
 8003174:	2430      	movs	r4, #48	; 0x30
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1b2      	bne.n	80030e0 <_strtol_l.isra.0+0x60>
 800317a:	2308      	movs	r3, #8
 800317c:	e7b0      	b.n	80030e0 <_strtol_l.isra.0+0x60>
 800317e:	2c30      	cmp	r4, #48	; 0x30
 8003180:	d0a3      	beq.n	80030ca <_strtol_l.isra.0+0x4a>
 8003182:	230a      	movs	r3, #10
 8003184:	e7ac      	b.n	80030e0 <_strtol_l.isra.0+0x60>
 8003186:	bf00      	nop
 8003188:	080053a9 	.word	0x080053a9

0800318c <strtol>:
 800318c:	4613      	mov	r3, r2
 800318e:	460a      	mov	r2, r1
 8003190:	4601      	mov	r1, r0
 8003192:	4802      	ldr	r0, [pc, #8]	; (800319c <strtol+0x10>)
 8003194:	6800      	ldr	r0, [r0, #0]
 8003196:	f7ff bf73 	b.w	8003080 <_strtol_l.isra.0>
 800319a:	bf00      	nop
 800319c:	20000014 	.word	0x20000014

080031a0 <rshift>:
 80031a0:	6903      	ldr	r3, [r0, #16]
 80031a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80031aa:	f100 0414 	add.w	r4, r0, #20
 80031ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80031b2:	dd46      	ble.n	8003242 <rshift+0xa2>
 80031b4:	f011 011f 	ands.w	r1, r1, #31
 80031b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80031bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80031c0:	d10c      	bne.n	80031dc <rshift+0x3c>
 80031c2:	4629      	mov	r1, r5
 80031c4:	f100 0710 	add.w	r7, r0, #16
 80031c8:	42b1      	cmp	r1, r6
 80031ca:	d335      	bcc.n	8003238 <rshift+0x98>
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	1eea      	subs	r2, r5, #3
 80031d2:	4296      	cmp	r6, r2
 80031d4:	bf38      	it	cc
 80031d6:	2300      	movcc	r3, #0
 80031d8:	4423      	add	r3, r4
 80031da:	e015      	b.n	8003208 <rshift+0x68>
 80031dc:	46a1      	mov	r9, r4
 80031de:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80031e2:	f1c1 0820 	rsb	r8, r1, #32
 80031e6:	40cf      	lsrs	r7, r1
 80031e8:	f105 0e04 	add.w	lr, r5, #4
 80031ec:	4576      	cmp	r6, lr
 80031ee:	46f4      	mov	ip, lr
 80031f0:	d816      	bhi.n	8003220 <rshift+0x80>
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009a      	lsls	r2, r3, #2
 80031f6:	3a04      	subs	r2, #4
 80031f8:	3501      	adds	r5, #1
 80031fa:	42ae      	cmp	r6, r5
 80031fc:	bf38      	it	cc
 80031fe:	2200      	movcc	r2, #0
 8003200:	18a3      	adds	r3, r4, r2
 8003202:	50a7      	str	r7, [r4, r2]
 8003204:	b107      	cbz	r7, 8003208 <rshift+0x68>
 8003206:	3304      	adds	r3, #4
 8003208:	42a3      	cmp	r3, r4
 800320a:	eba3 0204 	sub.w	r2, r3, r4
 800320e:	bf08      	it	eq
 8003210:	2300      	moveq	r3, #0
 8003212:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8003216:	6102      	str	r2, [r0, #16]
 8003218:	bf08      	it	eq
 800321a:	6143      	streq	r3, [r0, #20]
 800321c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003220:	f8dc c000 	ldr.w	ip, [ip]
 8003224:	fa0c fc08 	lsl.w	ip, ip, r8
 8003228:	ea4c 0707 	orr.w	r7, ip, r7
 800322c:	f849 7b04 	str.w	r7, [r9], #4
 8003230:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003234:	40cf      	lsrs	r7, r1
 8003236:	e7d9      	b.n	80031ec <rshift+0x4c>
 8003238:	f851 cb04 	ldr.w	ip, [r1], #4
 800323c:	f847 cf04 	str.w	ip, [r7, #4]!
 8003240:	e7c2      	b.n	80031c8 <rshift+0x28>
 8003242:	4623      	mov	r3, r4
 8003244:	e7e0      	b.n	8003208 <rshift+0x68>

08003246 <__hexdig_fun>:
 8003246:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800324a:	2b09      	cmp	r3, #9
 800324c:	d802      	bhi.n	8003254 <__hexdig_fun+0xe>
 800324e:	3820      	subs	r0, #32
 8003250:	b2c0      	uxtb	r0, r0
 8003252:	4770      	bx	lr
 8003254:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8003258:	2b05      	cmp	r3, #5
 800325a:	d801      	bhi.n	8003260 <__hexdig_fun+0x1a>
 800325c:	3847      	subs	r0, #71	; 0x47
 800325e:	e7f7      	b.n	8003250 <__hexdig_fun+0xa>
 8003260:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8003264:	2b05      	cmp	r3, #5
 8003266:	d801      	bhi.n	800326c <__hexdig_fun+0x26>
 8003268:	3827      	subs	r0, #39	; 0x27
 800326a:	e7f1      	b.n	8003250 <__hexdig_fun+0xa>
 800326c:	2000      	movs	r0, #0
 800326e:	4770      	bx	lr

08003270 <__gethex>:
 8003270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003274:	b08b      	sub	sp, #44	; 0x2c
 8003276:	9306      	str	r3, [sp, #24]
 8003278:	4bb9      	ldr	r3, [pc, #740]	; (8003560 <__gethex+0x2f0>)
 800327a:	9002      	str	r0, [sp, #8]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	468b      	mov	fp, r1
 8003280:	4618      	mov	r0, r3
 8003282:	4690      	mov	r8, r2
 8003284:	9303      	str	r3, [sp, #12]
 8003286:	f7fc ff6d 	bl	8000164 <strlen>
 800328a:	4682      	mov	sl, r0
 800328c:	9b03      	ldr	r3, [sp, #12]
 800328e:	f8db 2000 	ldr.w	r2, [fp]
 8003292:	4403      	add	r3, r0
 8003294:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8003298:	9307      	str	r3, [sp, #28]
 800329a:	1c93      	adds	r3, r2, #2
 800329c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80032a0:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80032a4:	32fe      	adds	r2, #254	; 0xfe
 80032a6:	18d1      	adds	r1, r2, r3
 80032a8:	461f      	mov	r7, r3
 80032aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 80032ae:	9101      	str	r1, [sp, #4]
 80032b0:	2830      	cmp	r0, #48	; 0x30
 80032b2:	d0f8      	beq.n	80032a6 <__gethex+0x36>
 80032b4:	f7ff ffc7 	bl	8003246 <__hexdig_fun>
 80032b8:	4604      	mov	r4, r0
 80032ba:	2800      	cmp	r0, #0
 80032bc:	d13a      	bne.n	8003334 <__gethex+0xc4>
 80032be:	4652      	mov	r2, sl
 80032c0:	4638      	mov	r0, r7
 80032c2:	9903      	ldr	r1, [sp, #12]
 80032c4:	f001 f81a 	bl	80042fc <strncmp>
 80032c8:	4605      	mov	r5, r0
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d166      	bne.n	800339c <__gethex+0x12c>
 80032ce:	f817 000a 	ldrb.w	r0, [r7, sl]
 80032d2:	eb07 060a 	add.w	r6, r7, sl
 80032d6:	f7ff ffb6 	bl	8003246 <__hexdig_fun>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d060      	beq.n	80033a0 <__gethex+0x130>
 80032de:	4633      	mov	r3, r6
 80032e0:	7818      	ldrb	r0, [r3, #0]
 80032e2:	461f      	mov	r7, r3
 80032e4:	2830      	cmp	r0, #48	; 0x30
 80032e6:	f103 0301 	add.w	r3, r3, #1
 80032ea:	d0f9      	beq.n	80032e0 <__gethex+0x70>
 80032ec:	f7ff ffab 	bl	8003246 <__hexdig_fun>
 80032f0:	2301      	movs	r3, #1
 80032f2:	fab0 f480 	clz	r4, r0
 80032f6:	4635      	mov	r5, r6
 80032f8:	0964      	lsrs	r4, r4, #5
 80032fa:	9301      	str	r3, [sp, #4]
 80032fc:	463a      	mov	r2, r7
 80032fe:	4616      	mov	r6, r2
 8003300:	7830      	ldrb	r0, [r6, #0]
 8003302:	3201      	adds	r2, #1
 8003304:	f7ff ff9f 	bl	8003246 <__hexdig_fun>
 8003308:	2800      	cmp	r0, #0
 800330a:	d1f8      	bne.n	80032fe <__gethex+0x8e>
 800330c:	4652      	mov	r2, sl
 800330e:	4630      	mov	r0, r6
 8003310:	9903      	ldr	r1, [sp, #12]
 8003312:	f000 fff3 	bl	80042fc <strncmp>
 8003316:	b980      	cbnz	r0, 800333a <__gethex+0xca>
 8003318:	b94d      	cbnz	r5, 800332e <__gethex+0xbe>
 800331a:	eb06 050a 	add.w	r5, r6, sl
 800331e:	462a      	mov	r2, r5
 8003320:	4616      	mov	r6, r2
 8003322:	7830      	ldrb	r0, [r6, #0]
 8003324:	3201      	adds	r2, #1
 8003326:	f7ff ff8e 	bl	8003246 <__hexdig_fun>
 800332a:	2800      	cmp	r0, #0
 800332c:	d1f8      	bne.n	8003320 <__gethex+0xb0>
 800332e:	1bad      	subs	r5, r5, r6
 8003330:	00ad      	lsls	r5, r5, #2
 8003332:	e004      	b.n	800333e <__gethex+0xce>
 8003334:	2400      	movs	r4, #0
 8003336:	4625      	mov	r5, r4
 8003338:	e7e0      	b.n	80032fc <__gethex+0x8c>
 800333a:	2d00      	cmp	r5, #0
 800333c:	d1f7      	bne.n	800332e <__gethex+0xbe>
 800333e:	7833      	ldrb	r3, [r6, #0]
 8003340:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003344:	2b50      	cmp	r3, #80	; 0x50
 8003346:	d139      	bne.n	80033bc <__gethex+0x14c>
 8003348:	7873      	ldrb	r3, [r6, #1]
 800334a:	2b2b      	cmp	r3, #43	; 0x2b
 800334c:	d02a      	beq.n	80033a4 <__gethex+0x134>
 800334e:	2b2d      	cmp	r3, #45	; 0x2d
 8003350:	d02c      	beq.n	80033ac <__gethex+0x13c>
 8003352:	f04f 0900 	mov.w	r9, #0
 8003356:	1c71      	adds	r1, r6, #1
 8003358:	7808      	ldrb	r0, [r1, #0]
 800335a:	f7ff ff74 	bl	8003246 <__hexdig_fun>
 800335e:	1e43      	subs	r3, r0, #1
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b18      	cmp	r3, #24
 8003364:	d82a      	bhi.n	80033bc <__gethex+0x14c>
 8003366:	f1a0 0210 	sub.w	r2, r0, #16
 800336a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800336e:	f7ff ff6a 	bl	8003246 <__hexdig_fun>
 8003372:	1e43      	subs	r3, r0, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b18      	cmp	r3, #24
 8003378:	d91b      	bls.n	80033b2 <__gethex+0x142>
 800337a:	f1b9 0f00 	cmp.w	r9, #0
 800337e:	d000      	beq.n	8003382 <__gethex+0x112>
 8003380:	4252      	negs	r2, r2
 8003382:	4415      	add	r5, r2
 8003384:	f8cb 1000 	str.w	r1, [fp]
 8003388:	b1d4      	cbz	r4, 80033c0 <__gethex+0x150>
 800338a:	9b01      	ldr	r3, [sp, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf14      	ite	ne
 8003390:	2700      	movne	r7, #0
 8003392:	2706      	moveq	r7, #6
 8003394:	4638      	mov	r0, r7
 8003396:	b00b      	add	sp, #44	; 0x2c
 8003398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800339c:	463e      	mov	r6, r7
 800339e:	4625      	mov	r5, r4
 80033a0:	2401      	movs	r4, #1
 80033a2:	e7cc      	b.n	800333e <__gethex+0xce>
 80033a4:	f04f 0900 	mov.w	r9, #0
 80033a8:	1cb1      	adds	r1, r6, #2
 80033aa:	e7d5      	b.n	8003358 <__gethex+0xe8>
 80033ac:	f04f 0901 	mov.w	r9, #1
 80033b0:	e7fa      	b.n	80033a8 <__gethex+0x138>
 80033b2:	230a      	movs	r3, #10
 80033b4:	fb03 0202 	mla	r2, r3, r2, r0
 80033b8:	3a10      	subs	r2, #16
 80033ba:	e7d6      	b.n	800336a <__gethex+0xfa>
 80033bc:	4631      	mov	r1, r6
 80033be:	e7e1      	b.n	8003384 <__gethex+0x114>
 80033c0:	4621      	mov	r1, r4
 80033c2:	1bf3      	subs	r3, r6, r7
 80033c4:	3b01      	subs	r3, #1
 80033c6:	2b07      	cmp	r3, #7
 80033c8:	dc0a      	bgt.n	80033e0 <__gethex+0x170>
 80033ca:	9802      	ldr	r0, [sp, #8]
 80033cc:	f000 fa60 	bl	8003890 <_Balloc>
 80033d0:	4604      	mov	r4, r0
 80033d2:	b940      	cbnz	r0, 80033e6 <__gethex+0x176>
 80033d4:	4602      	mov	r2, r0
 80033d6:	21de      	movs	r1, #222	; 0xde
 80033d8:	4b62      	ldr	r3, [pc, #392]	; (8003564 <__gethex+0x2f4>)
 80033da:	4863      	ldr	r0, [pc, #396]	; (8003568 <__gethex+0x2f8>)
 80033dc:	f000 ffae 	bl	800433c <__assert_func>
 80033e0:	3101      	adds	r1, #1
 80033e2:	105b      	asrs	r3, r3, #1
 80033e4:	e7ef      	b.n	80033c6 <__gethex+0x156>
 80033e6:	f04f 0b00 	mov.w	fp, #0
 80033ea:	f100 0914 	add.w	r9, r0, #20
 80033ee:	f1ca 0301 	rsb	r3, sl, #1
 80033f2:	f8cd 9010 	str.w	r9, [sp, #16]
 80033f6:	f8cd b004 	str.w	fp, [sp, #4]
 80033fa:	9308      	str	r3, [sp, #32]
 80033fc:	42b7      	cmp	r7, r6
 80033fe:	d33f      	bcc.n	8003480 <__gethex+0x210>
 8003400:	9f04      	ldr	r7, [sp, #16]
 8003402:	9b01      	ldr	r3, [sp, #4]
 8003404:	f847 3b04 	str.w	r3, [r7], #4
 8003408:	eba7 0709 	sub.w	r7, r7, r9
 800340c:	10bf      	asrs	r7, r7, #2
 800340e:	6127      	str	r7, [r4, #16]
 8003410:	4618      	mov	r0, r3
 8003412:	f000 fb33 	bl	8003a7c <__hi0bits>
 8003416:	017f      	lsls	r7, r7, #5
 8003418:	f8d8 6000 	ldr.w	r6, [r8]
 800341c:	1a3f      	subs	r7, r7, r0
 800341e:	42b7      	cmp	r7, r6
 8003420:	dd62      	ble.n	80034e8 <__gethex+0x278>
 8003422:	1bbf      	subs	r7, r7, r6
 8003424:	4639      	mov	r1, r7
 8003426:	4620      	mov	r0, r4
 8003428:	f000 fec9 	bl	80041be <__any_on>
 800342c:	4682      	mov	sl, r0
 800342e:	b1a8      	cbz	r0, 800345c <__gethex+0x1ec>
 8003430:	f04f 0a01 	mov.w	sl, #1
 8003434:	1e7b      	subs	r3, r7, #1
 8003436:	1159      	asrs	r1, r3, #5
 8003438:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800343c:	f003 021f 	and.w	r2, r3, #31
 8003440:	fa0a f202 	lsl.w	r2, sl, r2
 8003444:	420a      	tst	r2, r1
 8003446:	d009      	beq.n	800345c <__gethex+0x1ec>
 8003448:	4553      	cmp	r3, sl
 800344a:	dd05      	ble.n	8003458 <__gethex+0x1e8>
 800344c:	4620      	mov	r0, r4
 800344e:	1eb9      	subs	r1, r7, #2
 8003450:	f000 feb5 	bl	80041be <__any_on>
 8003454:	2800      	cmp	r0, #0
 8003456:	d144      	bne.n	80034e2 <__gethex+0x272>
 8003458:	f04f 0a02 	mov.w	sl, #2
 800345c:	4639      	mov	r1, r7
 800345e:	4620      	mov	r0, r4
 8003460:	f7ff fe9e 	bl	80031a0 <rshift>
 8003464:	443d      	add	r5, r7
 8003466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800346a:	42ab      	cmp	r3, r5
 800346c:	da4a      	bge.n	8003504 <__gethex+0x294>
 800346e:	4621      	mov	r1, r4
 8003470:	9802      	ldr	r0, [sp, #8]
 8003472:	f000 fa4d 	bl	8003910 <_Bfree>
 8003476:	2300      	movs	r3, #0
 8003478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800347a:	27a3      	movs	r7, #163	; 0xa3
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	e789      	b.n	8003394 <__gethex+0x124>
 8003480:	1e73      	subs	r3, r6, #1
 8003482:	9a07      	ldr	r2, [sp, #28]
 8003484:	9305      	str	r3, [sp, #20]
 8003486:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800348a:	4293      	cmp	r3, r2
 800348c:	d019      	beq.n	80034c2 <__gethex+0x252>
 800348e:	f1bb 0f20 	cmp.w	fp, #32
 8003492:	d107      	bne.n	80034a4 <__gethex+0x234>
 8003494:	9b04      	ldr	r3, [sp, #16]
 8003496:	9a01      	ldr	r2, [sp, #4]
 8003498:	f843 2b04 	str.w	r2, [r3], #4
 800349c:	9304      	str	r3, [sp, #16]
 800349e:	2300      	movs	r3, #0
 80034a0:	469b      	mov	fp, r3
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80034a8:	f7ff fecd 	bl	8003246 <__hexdig_fun>
 80034ac:	9b01      	ldr	r3, [sp, #4]
 80034ae:	f000 000f 	and.w	r0, r0, #15
 80034b2:	fa00 f00b 	lsl.w	r0, r0, fp
 80034b6:	4303      	orrs	r3, r0
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	f10b 0b04 	add.w	fp, fp, #4
 80034be:	9b05      	ldr	r3, [sp, #20]
 80034c0:	e00d      	b.n	80034de <__gethex+0x26e>
 80034c2:	9b05      	ldr	r3, [sp, #20]
 80034c4:	9a08      	ldr	r2, [sp, #32]
 80034c6:	4413      	add	r3, r2
 80034c8:	42bb      	cmp	r3, r7
 80034ca:	d3e0      	bcc.n	800348e <__gethex+0x21e>
 80034cc:	4618      	mov	r0, r3
 80034ce:	4652      	mov	r2, sl
 80034d0:	9903      	ldr	r1, [sp, #12]
 80034d2:	9309      	str	r3, [sp, #36]	; 0x24
 80034d4:	f000 ff12 	bl	80042fc <strncmp>
 80034d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034da:	2800      	cmp	r0, #0
 80034dc:	d1d7      	bne.n	800348e <__gethex+0x21e>
 80034de:	461e      	mov	r6, r3
 80034e0:	e78c      	b.n	80033fc <__gethex+0x18c>
 80034e2:	f04f 0a03 	mov.w	sl, #3
 80034e6:	e7b9      	b.n	800345c <__gethex+0x1ec>
 80034e8:	da09      	bge.n	80034fe <__gethex+0x28e>
 80034ea:	1bf7      	subs	r7, r6, r7
 80034ec:	4621      	mov	r1, r4
 80034ee:	463a      	mov	r2, r7
 80034f0:	9802      	ldr	r0, [sp, #8]
 80034f2:	f000 fc25 	bl	8003d40 <__lshift>
 80034f6:	4604      	mov	r4, r0
 80034f8:	1bed      	subs	r5, r5, r7
 80034fa:	f100 0914 	add.w	r9, r0, #20
 80034fe:	f04f 0a00 	mov.w	sl, #0
 8003502:	e7b0      	b.n	8003466 <__gethex+0x1f6>
 8003504:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8003508:	42a8      	cmp	r0, r5
 800350a:	dd71      	ble.n	80035f0 <__gethex+0x380>
 800350c:	1b45      	subs	r5, r0, r5
 800350e:	42ae      	cmp	r6, r5
 8003510:	dc34      	bgt.n	800357c <__gethex+0x30c>
 8003512:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d028      	beq.n	800356c <__gethex+0x2fc>
 800351a:	2b03      	cmp	r3, #3
 800351c:	d02a      	beq.n	8003574 <__gethex+0x304>
 800351e:	2b01      	cmp	r3, #1
 8003520:	d115      	bne.n	800354e <__gethex+0x2de>
 8003522:	42ae      	cmp	r6, r5
 8003524:	d113      	bne.n	800354e <__gethex+0x2de>
 8003526:	2e01      	cmp	r6, #1
 8003528:	d10b      	bne.n	8003542 <__gethex+0x2d2>
 800352a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800352e:	9a06      	ldr	r2, [sp, #24]
 8003530:	2762      	movs	r7, #98	; 0x62
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	2301      	movs	r3, #1
 8003536:	6123      	str	r3, [r4, #16]
 8003538:	f8c9 3000 	str.w	r3, [r9]
 800353c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800353e:	601c      	str	r4, [r3, #0]
 8003540:	e728      	b.n	8003394 <__gethex+0x124>
 8003542:	4620      	mov	r0, r4
 8003544:	1e71      	subs	r1, r6, #1
 8003546:	f000 fe3a 	bl	80041be <__any_on>
 800354a:	2800      	cmp	r0, #0
 800354c:	d1ed      	bne.n	800352a <__gethex+0x2ba>
 800354e:	4621      	mov	r1, r4
 8003550:	9802      	ldr	r0, [sp, #8]
 8003552:	f000 f9dd 	bl	8003910 <_Bfree>
 8003556:	2300      	movs	r3, #0
 8003558:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800355a:	2750      	movs	r7, #80	; 0x50
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e719      	b.n	8003394 <__gethex+0x124>
 8003560:	08005524 	.word	0x08005524
 8003564:	080054a9 	.word	0x080054a9
 8003568:	080054ba 	.word	0x080054ba
 800356c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1ed      	bne.n	800354e <__gethex+0x2de>
 8003572:	e7da      	b.n	800352a <__gethex+0x2ba>
 8003574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1d7      	bne.n	800352a <__gethex+0x2ba>
 800357a:	e7e8      	b.n	800354e <__gethex+0x2de>
 800357c:	1e6f      	subs	r7, r5, #1
 800357e:	f1ba 0f00 	cmp.w	sl, #0
 8003582:	d132      	bne.n	80035ea <__gethex+0x37a>
 8003584:	b127      	cbz	r7, 8003590 <__gethex+0x320>
 8003586:	4639      	mov	r1, r7
 8003588:	4620      	mov	r0, r4
 800358a:	f000 fe18 	bl	80041be <__any_on>
 800358e:	4682      	mov	sl, r0
 8003590:	2101      	movs	r1, #1
 8003592:	117b      	asrs	r3, r7, #5
 8003594:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003598:	f007 071f 	and.w	r7, r7, #31
 800359c:	fa01 f707 	lsl.w	r7, r1, r7
 80035a0:	421f      	tst	r7, r3
 80035a2:	f04f 0702 	mov.w	r7, #2
 80035a6:	4629      	mov	r1, r5
 80035a8:	4620      	mov	r0, r4
 80035aa:	bf18      	it	ne
 80035ac:	f04a 0a02 	orrne.w	sl, sl, #2
 80035b0:	1b76      	subs	r6, r6, r5
 80035b2:	f7ff fdf5 	bl	80031a0 <rshift>
 80035b6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80035ba:	f1ba 0f00 	cmp.w	sl, #0
 80035be:	d048      	beq.n	8003652 <__gethex+0x3e2>
 80035c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d015      	beq.n	80035f4 <__gethex+0x384>
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d017      	beq.n	80035fc <__gethex+0x38c>
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d109      	bne.n	80035e4 <__gethex+0x374>
 80035d0:	f01a 0f02 	tst.w	sl, #2
 80035d4:	d006      	beq.n	80035e4 <__gethex+0x374>
 80035d6:	f8d9 0000 	ldr.w	r0, [r9]
 80035da:	ea4a 0a00 	orr.w	sl, sl, r0
 80035de:	f01a 0f01 	tst.w	sl, #1
 80035e2:	d10e      	bne.n	8003602 <__gethex+0x392>
 80035e4:	f047 0710 	orr.w	r7, r7, #16
 80035e8:	e033      	b.n	8003652 <__gethex+0x3e2>
 80035ea:	f04f 0a01 	mov.w	sl, #1
 80035ee:	e7cf      	b.n	8003590 <__gethex+0x320>
 80035f0:	2701      	movs	r7, #1
 80035f2:	e7e2      	b.n	80035ba <__gethex+0x34a>
 80035f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80035f6:	f1c3 0301 	rsb	r3, r3, #1
 80035fa:	9315      	str	r3, [sp, #84]	; 0x54
 80035fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0f0      	beq.n	80035e4 <__gethex+0x374>
 8003602:	f04f 0c00 	mov.w	ip, #0
 8003606:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800360a:	f104 0314 	add.w	r3, r4, #20
 800360e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8003612:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8003616:	4618      	mov	r0, r3
 8003618:	f853 2b04 	ldr.w	r2, [r3], #4
 800361c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8003620:	d01c      	beq.n	800365c <__gethex+0x3ec>
 8003622:	3201      	adds	r2, #1
 8003624:	6002      	str	r2, [r0, #0]
 8003626:	2f02      	cmp	r7, #2
 8003628:	f104 0314 	add.w	r3, r4, #20
 800362c:	d13d      	bne.n	80036aa <__gethex+0x43a>
 800362e:	f8d8 2000 	ldr.w	r2, [r8]
 8003632:	3a01      	subs	r2, #1
 8003634:	42b2      	cmp	r2, r6
 8003636:	d10a      	bne.n	800364e <__gethex+0x3de>
 8003638:	2201      	movs	r2, #1
 800363a:	1171      	asrs	r1, r6, #5
 800363c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003640:	f006 061f 	and.w	r6, r6, #31
 8003644:	fa02 f606 	lsl.w	r6, r2, r6
 8003648:	421e      	tst	r6, r3
 800364a:	bf18      	it	ne
 800364c:	4617      	movne	r7, r2
 800364e:	f047 0720 	orr.w	r7, r7, #32
 8003652:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003654:	601c      	str	r4, [r3, #0]
 8003656:	9b06      	ldr	r3, [sp, #24]
 8003658:	601d      	str	r5, [r3, #0]
 800365a:	e69b      	b.n	8003394 <__gethex+0x124>
 800365c:	4299      	cmp	r1, r3
 800365e:	f843 cc04 	str.w	ip, [r3, #-4]
 8003662:	d8d8      	bhi.n	8003616 <__gethex+0x3a6>
 8003664:	68a3      	ldr	r3, [r4, #8]
 8003666:	459b      	cmp	fp, r3
 8003668:	db17      	blt.n	800369a <__gethex+0x42a>
 800366a:	6861      	ldr	r1, [r4, #4]
 800366c:	9802      	ldr	r0, [sp, #8]
 800366e:	3101      	adds	r1, #1
 8003670:	f000 f90e 	bl	8003890 <_Balloc>
 8003674:	4681      	mov	r9, r0
 8003676:	b918      	cbnz	r0, 8003680 <__gethex+0x410>
 8003678:	4602      	mov	r2, r0
 800367a:	2184      	movs	r1, #132	; 0x84
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <__gethex+0x474>)
 800367e:	e6ac      	b.n	80033da <__gethex+0x16a>
 8003680:	6922      	ldr	r2, [r4, #16]
 8003682:	f104 010c 	add.w	r1, r4, #12
 8003686:	3202      	adds	r2, #2
 8003688:	0092      	lsls	r2, r2, #2
 800368a:	300c      	adds	r0, #12
 800368c:	f7fe feac 	bl	80023e8 <memcpy>
 8003690:	4621      	mov	r1, r4
 8003692:	9802      	ldr	r0, [sp, #8]
 8003694:	f000 f93c 	bl	8003910 <_Bfree>
 8003698:	464c      	mov	r4, r9
 800369a:	6923      	ldr	r3, [r4, #16]
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	6122      	str	r2, [r4, #16]
 80036a0:	2201      	movs	r2, #1
 80036a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80036a6:	615a      	str	r2, [r3, #20]
 80036a8:	e7bd      	b.n	8003626 <__gethex+0x3b6>
 80036aa:	6922      	ldr	r2, [r4, #16]
 80036ac:	455a      	cmp	r2, fp
 80036ae:	dd0b      	ble.n	80036c8 <__gethex+0x458>
 80036b0:	2101      	movs	r1, #1
 80036b2:	4620      	mov	r0, r4
 80036b4:	f7ff fd74 	bl	80031a0 <rshift>
 80036b8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80036bc:	3501      	adds	r5, #1
 80036be:	42ab      	cmp	r3, r5
 80036c0:	f6ff aed5 	blt.w	800346e <__gethex+0x1fe>
 80036c4:	2701      	movs	r7, #1
 80036c6:	e7c2      	b.n	800364e <__gethex+0x3de>
 80036c8:	f016 061f 	ands.w	r6, r6, #31
 80036cc:	d0fa      	beq.n	80036c4 <__gethex+0x454>
 80036ce:	449a      	add	sl, r3
 80036d0:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80036d4:	f000 f9d2 	bl	8003a7c <__hi0bits>
 80036d8:	f1c6 0620 	rsb	r6, r6, #32
 80036dc:	42b0      	cmp	r0, r6
 80036de:	dbe7      	blt.n	80036b0 <__gethex+0x440>
 80036e0:	e7f0      	b.n	80036c4 <__gethex+0x454>
 80036e2:	bf00      	nop
 80036e4:	080054a9 	.word	0x080054a9

080036e8 <L_shift>:
 80036e8:	f1c2 0208 	rsb	r2, r2, #8
 80036ec:	0092      	lsls	r2, r2, #2
 80036ee:	b570      	push	{r4, r5, r6, lr}
 80036f0:	f1c2 0620 	rsb	r6, r2, #32
 80036f4:	6843      	ldr	r3, [r0, #4]
 80036f6:	6804      	ldr	r4, [r0, #0]
 80036f8:	fa03 f506 	lsl.w	r5, r3, r6
 80036fc:	432c      	orrs	r4, r5
 80036fe:	40d3      	lsrs	r3, r2
 8003700:	6004      	str	r4, [r0, #0]
 8003702:	f840 3f04 	str.w	r3, [r0, #4]!
 8003706:	4288      	cmp	r0, r1
 8003708:	d3f4      	bcc.n	80036f4 <L_shift+0xc>
 800370a:	bd70      	pop	{r4, r5, r6, pc}

0800370c <__match>:
 800370c:	b530      	push	{r4, r5, lr}
 800370e:	6803      	ldr	r3, [r0, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003716:	b914      	cbnz	r4, 800371e <__match+0x12>
 8003718:	6003      	str	r3, [r0, #0]
 800371a:	2001      	movs	r0, #1
 800371c:	bd30      	pop	{r4, r5, pc}
 800371e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003722:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8003726:	2d19      	cmp	r5, #25
 8003728:	bf98      	it	ls
 800372a:	3220      	addls	r2, #32
 800372c:	42a2      	cmp	r2, r4
 800372e:	d0f0      	beq.n	8003712 <__match+0x6>
 8003730:	2000      	movs	r0, #0
 8003732:	e7f3      	b.n	800371c <__match+0x10>

08003734 <__hexnan>:
 8003734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003738:	2500      	movs	r5, #0
 800373a:	680b      	ldr	r3, [r1, #0]
 800373c:	4682      	mov	sl, r0
 800373e:	115e      	asrs	r6, r3, #5
 8003740:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8003744:	f013 031f 	ands.w	r3, r3, #31
 8003748:	bf18      	it	ne
 800374a:	3604      	addne	r6, #4
 800374c:	1f37      	subs	r7, r6, #4
 800374e:	4690      	mov	r8, r2
 8003750:	46b9      	mov	r9, r7
 8003752:	463c      	mov	r4, r7
 8003754:	46ab      	mov	fp, r5
 8003756:	b087      	sub	sp, #28
 8003758:	6801      	ldr	r1, [r0, #0]
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	f846 5c04 	str.w	r5, [r6, #-4]
 8003760:	9502      	str	r5, [sp, #8]
 8003762:	784a      	ldrb	r2, [r1, #1]
 8003764:	1c4b      	adds	r3, r1, #1
 8003766:	9303      	str	r3, [sp, #12]
 8003768:	b342      	cbz	r2, 80037bc <__hexnan+0x88>
 800376a:	4610      	mov	r0, r2
 800376c:	9105      	str	r1, [sp, #20]
 800376e:	9204      	str	r2, [sp, #16]
 8003770:	f7ff fd69 	bl	8003246 <__hexdig_fun>
 8003774:	2800      	cmp	r0, #0
 8003776:	d14f      	bne.n	8003818 <__hexnan+0xe4>
 8003778:	9a04      	ldr	r2, [sp, #16]
 800377a:	9905      	ldr	r1, [sp, #20]
 800377c:	2a20      	cmp	r2, #32
 800377e:	d818      	bhi.n	80037b2 <__hexnan+0x7e>
 8003780:	9b02      	ldr	r3, [sp, #8]
 8003782:	459b      	cmp	fp, r3
 8003784:	dd13      	ble.n	80037ae <__hexnan+0x7a>
 8003786:	454c      	cmp	r4, r9
 8003788:	d206      	bcs.n	8003798 <__hexnan+0x64>
 800378a:	2d07      	cmp	r5, #7
 800378c:	dc04      	bgt.n	8003798 <__hexnan+0x64>
 800378e:	462a      	mov	r2, r5
 8003790:	4649      	mov	r1, r9
 8003792:	4620      	mov	r0, r4
 8003794:	f7ff ffa8 	bl	80036e8 <L_shift>
 8003798:	4544      	cmp	r4, r8
 800379a:	d950      	bls.n	800383e <__hexnan+0x10a>
 800379c:	2300      	movs	r3, #0
 800379e:	f1a4 0904 	sub.w	r9, r4, #4
 80037a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80037a6:	461d      	mov	r5, r3
 80037a8:	464c      	mov	r4, r9
 80037aa:	f8cd b008 	str.w	fp, [sp, #8]
 80037ae:	9903      	ldr	r1, [sp, #12]
 80037b0:	e7d7      	b.n	8003762 <__hexnan+0x2e>
 80037b2:	2a29      	cmp	r2, #41	; 0x29
 80037b4:	d156      	bne.n	8003864 <__hexnan+0x130>
 80037b6:	3102      	adds	r1, #2
 80037b8:	f8ca 1000 	str.w	r1, [sl]
 80037bc:	f1bb 0f00 	cmp.w	fp, #0
 80037c0:	d050      	beq.n	8003864 <__hexnan+0x130>
 80037c2:	454c      	cmp	r4, r9
 80037c4:	d206      	bcs.n	80037d4 <__hexnan+0xa0>
 80037c6:	2d07      	cmp	r5, #7
 80037c8:	dc04      	bgt.n	80037d4 <__hexnan+0xa0>
 80037ca:	462a      	mov	r2, r5
 80037cc:	4649      	mov	r1, r9
 80037ce:	4620      	mov	r0, r4
 80037d0:	f7ff ff8a 	bl	80036e8 <L_shift>
 80037d4:	4544      	cmp	r4, r8
 80037d6:	d934      	bls.n	8003842 <__hexnan+0x10e>
 80037d8:	4623      	mov	r3, r4
 80037da:	f1a8 0204 	sub.w	r2, r8, #4
 80037de:	f853 1b04 	ldr.w	r1, [r3], #4
 80037e2:	429f      	cmp	r7, r3
 80037e4:	f842 1f04 	str.w	r1, [r2, #4]!
 80037e8:	d2f9      	bcs.n	80037de <__hexnan+0xaa>
 80037ea:	1b3b      	subs	r3, r7, r4
 80037ec:	f023 0303 	bic.w	r3, r3, #3
 80037f0:	3304      	adds	r3, #4
 80037f2:	3401      	adds	r4, #1
 80037f4:	3e03      	subs	r6, #3
 80037f6:	42b4      	cmp	r4, r6
 80037f8:	bf88      	it	hi
 80037fa:	2304      	movhi	r3, #4
 80037fc:	2200      	movs	r2, #0
 80037fe:	4443      	add	r3, r8
 8003800:	f843 2b04 	str.w	r2, [r3], #4
 8003804:	429f      	cmp	r7, r3
 8003806:	d2fb      	bcs.n	8003800 <__hexnan+0xcc>
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	b91b      	cbnz	r3, 8003814 <__hexnan+0xe0>
 800380c:	4547      	cmp	r7, r8
 800380e:	d127      	bne.n	8003860 <__hexnan+0x12c>
 8003810:	2301      	movs	r3, #1
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	2005      	movs	r0, #5
 8003816:	e026      	b.n	8003866 <__hexnan+0x132>
 8003818:	3501      	adds	r5, #1
 800381a:	2d08      	cmp	r5, #8
 800381c:	f10b 0b01 	add.w	fp, fp, #1
 8003820:	dd06      	ble.n	8003830 <__hexnan+0xfc>
 8003822:	4544      	cmp	r4, r8
 8003824:	d9c3      	bls.n	80037ae <__hexnan+0x7a>
 8003826:	2300      	movs	r3, #0
 8003828:	2501      	movs	r5, #1
 800382a:	f844 3c04 	str.w	r3, [r4, #-4]
 800382e:	3c04      	subs	r4, #4
 8003830:	6822      	ldr	r2, [r4, #0]
 8003832:	f000 000f 	and.w	r0, r0, #15
 8003836:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800383a:	6022      	str	r2, [r4, #0]
 800383c:	e7b7      	b.n	80037ae <__hexnan+0x7a>
 800383e:	2508      	movs	r5, #8
 8003840:	e7b5      	b.n	80037ae <__hexnan+0x7a>
 8003842:	9b01      	ldr	r3, [sp, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0df      	beq.n	8003808 <__hexnan+0xd4>
 8003848:	f04f 32ff 	mov.w	r2, #4294967295
 800384c:	f1c3 0320 	rsb	r3, r3, #32
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
 8003854:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8003858:	401a      	ands	r2, r3
 800385a:	f846 2c04 	str.w	r2, [r6, #-4]
 800385e:	e7d3      	b.n	8003808 <__hexnan+0xd4>
 8003860:	3f04      	subs	r7, #4
 8003862:	e7d1      	b.n	8003808 <__hexnan+0xd4>
 8003864:	2004      	movs	r0, #4
 8003866:	b007      	add	sp, #28
 8003868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800386c <__ascii_mbtowc>:
 800386c:	b082      	sub	sp, #8
 800386e:	b901      	cbnz	r1, 8003872 <__ascii_mbtowc+0x6>
 8003870:	a901      	add	r1, sp, #4
 8003872:	b142      	cbz	r2, 8003886 <__ascii_mbtowc+0x1a>
 8003874:	b14b      	cbz	r3, 800388a <__ascii_mbtowc+0x1e>
 8003876:	7813      	ldrb	r3, [r2, #0]
 8003878:	600b      	str	r3, [r1, #0]
 800387a:	7812      	ldrb	r2, [r2, #0]
 800387c:	1e10      	subs	r0, r2, #0
 800387e:	bf18      	it	ne
 8003880:	2001      	movne	r0, #1
 8003882:	b002      	add	sp, #8
 8003884:	4770      	bx	lr
 8003886:	4610      	mov	r0, r2
 8003888:	e7fb      	b.n	8003882 <__ascii_mbtowc+0x16>
 800388a:	f06f 0001 	mvn.w	r0, #1
 800388e:	e7f8      	b.n	8003882 <__ascii_mbtowc+0x16>

08003890 <_Balloc>:
 8003890:	b570      	push	{r4, r5, r6, lr}
 8003892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003894:	4604      	mov	r4, r0
 8003896:	460d      	mov	r5, r1
 8003898:	b976      	cbnz	r6, 80038b8 <_Balloc+0x28>
 800389a:	2010      	movs	r0, #16
 800389c:	f000 fd7e 	bl	800439c <malloc>
 80038a0:	4602      	mov	r2, r0
 80038a2:	6260      	str	r0, [r4, #36]	; 0x24
 80038a4:	b920      	cbnz	r0, 80038b0 <_Balloc+0x20>
 80038a6:	2166      	movs	r1, #102	; 0x66
 80038a8:	4b17      	ldr	r3, [pc, #92]	; (8003908 <_Balloc+0x78>)
 80038aa:	4818      	ldr	r0, [pc, #96]	; (800390c <_Balloc+0x7c>)
 80038ac:	f000 fd46 	bl	800433c <__assert_func>
 80038b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80038b4:	6006      	str	r6, [r0, #0]
 80038b6:	60c6      	str	r6, [r0, #12]
 80038b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80038ba:	68f3      	ldr	r3, [r6, #12]
 80038bc:	b183      	cbz	r3, 80038e0 <_Balloc+0x50>
 80038be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80038c6:	b9b8      	cbnz	r0, 80038f8 <_Balloc+0x68>
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f605 	lsl.w	r6, r1, r5
 80038ce:	1d72      	adds	r2, r6, #5
 80038d0:	4620      	mov	r0, r4
 80038d2:	0092      	lsls	r2, r2, #2
 80038d4:	f000 fc94 	bl	8004200 <_calloc_r>
 80038d8:	b160      	cbz	r0, 80038f4 <_Balloc+0x64>
 80038da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80038de:	e00e      	b.n	80038fe <_Balloc+0x6e>
 80038e0:	2221      	movs	r2, #33	; 0x21
 80038e2:	2104      	movs	r1, #4
 80038e4:	4620      	mov	r0, r4
 80038e6:	f000 fc8b 	bl	8004200 <_calloc_r>
 80038ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80038ec:	60f0      	str	r0, [r6, #12]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1e4      	bne.n	80038be <_Balloc+0x2e>
 80038f4:	2000      	movs	r0, #0
 80038f6:	bd70      	pop	{r4, r5, r6, pc}
 80038f8:	6802      	ldr	r2, [r0, #0]
 80038fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80038fe:	2300      	movs	r3, #0
 8003900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003904:	e7f7      	b.n	80038f6 <_Balloc+0x66>
 8003906:	bf00      	nop
 8003908:	08005538 	.word	0x08005538
 800390c:	0800554f 	.word	0x0800554f

08003910 <_Bfree>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003914:	4605      	mov	r5, r0
 8003916:	460c      	mov	r4, r1
 8003918:	b976      	cbnz	r6, 8003938 <_Bfree+0x28>
 800391a:	2010      	movs	r0, #16
 800391c:	f000 fd3e 	bl	800439c <malloc>
 8003920:	4602      	mov	r2, r0
 8003922:	6268      	str	r0, [r5, #36]	; 0x24
 8003924:	b920      	cbnz	r0, 8003930 <_Bfree+0x20>
 8003926:	218a      	movs	r1, #138	; 0x8a
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <_Bfree+0x3c>)
 800392a:	4809      	ldr	r0, [pc, #36]	; (8003950 <_Bfree+0x40>)
 800392c:	f000 fd06 	bl	800433c <__assert_func>
 8003930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003934:	6006      	str	r6, [r0, #0]
 8003936:	60c6      	str	r6, [r0, #12]
 8003938:	b13c      	cbz	r4, 800394a <_Bfree+0x3a>
 800393a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800393c:	6862      	ldr	r2, [r4, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003944:	6021      	str	r1, [r4, #0]
 8003946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800394a:	bd70      	pop	{r4, r5, r6, pc}
 800394c:	08005538 	.word	0x08005538
 8003950:	0800554f 	.word	0x0800554f

08003954 <__multadd>:
 8003954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003958:	4698      	mov	r8, r3
 800395a:	460c      	mov	r4, r1
 800395c:	2300      	movs	r3, #0
 800395e:	690e      	ldr	r6, [r1, #16]
 8003960:	4607      	mov	r7, r0
 8003962:	f101 0014 	add.w	r0, r1, #20
 8003966:	6805      	ldr	r5, [r0, #0]
 8003968:	3301      	adds	r3, #1
 800396a:	b2a9      	uxth	r1, r5
 800396c:	fb02 8101 	mla	r1, r2, r1, r8
 8003970:	0c2d      	lsrs	r5, r5, #16
 8003972:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003976:	fb02 c505 	mla	r5, r2, r5, ip
 800397a:	b289      	uxth	r1, r1
 800397c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003980:	429e      	cmp	r6, r3
 8003982:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003986:	f840 1b04 	str.w	r1, [r0], #4
 800398a:	dcec      	bgt.n	8003966 <__multadd+0x12>
 800398c:	f1b8 0f00 	cmp.w	r8, #0
 8003990:	d022      	beq.n	80039d8 <__multadd+0x84>
 8003992:	68a3      	ldr	r3, [r4, #8]
 8003994:	42b3      	cmp	r3, r6
 8003996:	dc19      	bgt.n	80039cc <__multadd+0x78>
 8003998:	6861      	ldr	r1, [r4, #4]
 800399a:	4638      	mov	r0, r7
 800399c:	3101      	adds	r1, #1
 800399e:	f7ff ff77 	bl	8003890 <_Balloc>
 80039a2:	4605      	mov	r5, r0
 80039a4:	b928      	cbnz	r0, 80039b2 <__multadd+0x5e>
 80039a6:	4602      	mov	r2, r0
 80039a8:	21b5      	movs	r1, #181	; 0xb5
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <__multadd+0x8c>)
 80039ac:	480d      	ldr	r0, [pc, #52]	; (80039e4 <__multadd+0x90>)
 80039ae:	f000 fcc5 	bl	800433c <__assert_func>
 80039b2:	6922      	ldr	r2, [r4, #16]
 80039b4:	f104 010c 	add.w	r1, r4, #12
 80039b8:	3202      	adds	r2, #2
 80039ba:	0092      	lsls	r2, r2, #2
 80039bc:	300c      	adds	r0, #12
 80039be:	f7fe fd13 	bl	80023e8 <memcpy>
 80039c2:	4621      	mov	r1, r4
 80039c4:	4638      	mov	r0, r7
 80039c6:	f7ff ffa3 	bl	8003910 <_Bfree>
 80039ca:	462c      	mov	r4, r5
 80039cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80039d0:	3601      	adds	r6, #1
 80039d2:	f8c3 8014 	str.w	r8, [r3, #20]
 80039d6:	6126      	str	r6, [r4, #16]
 80039d8:	4620      	mov	r0, r4
 80039da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039de:	bf00      	nop
 80039e0:	080054a9 	.word	0x080054a9
 80039e4:	0800554f 	.word	0x0800554f

080039e8 <__s2b>:
 80039e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039ec:	4615      	mov	r5, r2
 80039ee:	2209      	movs	r2, #9
 80039f0:	461f      	mov	r7, r3
 80039f2:	3308      	adds	r3, #8
 80039f4:	460c      	mov	r4, r1
 80039f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80039fa:	4606      	mov	r6, r0
 80039fc:	2201      	movs	r2, #1
 80039fe:	2100      	movs	r1, #0
 8003a00:	429a      	cmp	r2, r3
 8003a02:	db09      	blt.n	8003a18 <__s2b+0x30>
 8003a04:	4630      	mov	r0, r6
 8003a06:	f7ff ff43 	bl	8003890 <_Balloc>
 8003a0a:	b940      	cbnz	r0, 8003a1e <__s2b+0x36>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	21ce      	movs	r1, #206	; 0xce
 8003a10:	4b18      	ldr	r3, [pc, #96]	; (8003a74 <__s2b+0x8c>)
 8003a12:	4819      	ldr	r0, [pc, #100]	; (8003a78 <__s2b+0x90>)
 8003a14:	f000 fc92 	bl	800433c <__assert_func>
 8003a18:	0052      	lsls	r2, r2, #1
 8003a1a:	3101      	adds	r1, #1
 8003a1c:	e7f0      	b.n	8003a00 <__s2b+0x18>
 8003a1e:	9b08      	ldr	r3, [sp, #32]
 8003a20:	2d09      	cmp	r5, #9
 8003a22:	6143      	str	r3, [r0, #20]
 8003a24:	f04f 0301 	mov.w	r3, #1
 8003a28:	6103      	str	r3, [r0, #16]
 8003a2a:	dd16      	ble.n	8003a5a <__s2b+0x72>
 8003a2c:	f104 0909 	add.w	r9, r4, #9
 8003a30:	46c8      	mov	r8, r9
 8003a32:	442c      	add	r4, r5
 8003a34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003a38:	4601      	mov	r1, r0
 8003a3a:	220a      	movs	r2, #10
 8003a3c:	4630      	mov	r0, r6
 8003a3e:	3b30      	subs	r3, #48	; 0x30
 8003a40:	f7ff ff88 	bl	8003954 <__multadd>
 8003a44:	45a0      	cmp	r8, r4
 8003a46:	d1f5      	bne.n	8003a34 <__s2b+0x4c>
 8003a48:	f1a5 0408 	sub.w	r4, r5, #8
 8003a4c:	444c      	add	r4, r9
 8003a4e:	1b2d      	subs	r5, r5, r4
 8003a50:	1963      	adds	r3, r4, r5
 8003a52:	42bb      	cmp	r3, r7
 8003a54:	db04      	blt.n	8003a60 <__s2b+0x78>
 8003a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a5a:	2509      	movs	r5, #9
 8003a5c:	340a      	adds	r4, #10
 8003a5e:	e7f6      	b.n	8003a4e <__s2b+0x66>
 8003a60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003a64:	4601      	mov	r1, r0
 8003a66:	220a      	movs	r2, #10
 8003a68:	4630      	mov	r0, r6
 8003a6a:	3b30      	subs	r3, #48	; 0x30
 8003a6c:	f7ff ff72 	bl	8003954 <__multadd>
 8003a70:	e7ee      	b.n	8003a50 <__s2b+0x68>
 8003a72:	bf00      	nop
 8003a74:	080054a9 	.word	0x080054a9
 8003a78:	0800554f 	.word	0x0800554f

08003a7c <__hi0bits>:
 8003a7c:	0c02      	lsrs	r2, r0, #16
 8003a7e:	0412      	lsls	r2, r2, #16
 8003a80:	4603      	mov	r3, r0
 8003a82:	b9ca      	cbnz	r2, 8003ab8 <__hi0bits+0x3c>
 8003a84:	0403      	lsls	r3, r0, #16
 8003a86:	2010      	movs	r0, #16
 8003a88:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003a8c:	bf04      	itt	eq
 8003a8e:	021b      	lsleq	r3, r3, #8
 8003a90:	3008      	addeq	r0, #8
 8003a92:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003a96:	bf04      	itt	eq
 8003a98:	011b      	lsleq	r3, r3, #4
 8003a9a:	3004      	addeq	r0, #4
 8003a9c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003aa0:	bf04      	itt	eq
 8003aa2:	009b      	lsleq	r3, r3, #2
 8003aa4:	3002      	addeq	r0, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	db05      	blt.n	8003ab6 <__hi0bits+0x3a>
 8003aaa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003aae:	f100 0001 	add.w	r0, r0, #1
 8003ab2:	bf08      	it	eq
 8003ab4:	2020      	moveq	r0, #32
 8003ab6:	4770      	bx	lr
 8003ab8:	2000      	movs	r0, #0
 8003aba:	e7e5      	b.n	8003a88 <__hi0bits+0xc>

08003abc <__lo0bits>:
 8003abc:	6803      	ldr	r3, [r0, #0]
 8003abe:	4602      	mov	r2, r0
 8003ac0:	f013 0007 	ands.w	r0, r3, #7
 8003ac4:	d00b      	beq.n	8003ade <__lo0bits+0x22>
 8003ac6:	07d9      	lsls	r1, r3, #31
 8003ac8:	d422      	bmi.n	8003b10 <__lo0bits+0x54>
 8003aca:	0798      	lsls	r0, r3, #30
 8003acc:	bf49      	itett	mi
 8003ace:	085b      	lsrmi	r3, r3, #1
 8003ad0:	089b      	lsrpl	r3, r3, #2
 8003ad2:	2001      	movmi	r0, #1
 8003ad4:	6013      	strmi	r3, [r2, #0]
 8003ad6:	bf5c      	itt	pl
 8003ad8:	2002      	movpl	r0, #2
 8003ada:	6013      	strpl	r3, [r2, #0]
 8003adc:	4770      	bx	lr
 8003ade:	b299      	uxth	r1, r3
 8003ae0:	b909      	cbnz	r1, 8003ae6 <__lo0bits+0x2a>
 8003ae2:	2010      	movs	r0, #16
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003aea:	bf04      	itt	eq
 8003aec:	0a1b      	lsreq	r3, r3, #8
 8003aee:	3008      	addeq	r0, #8
 8003af0:	0719      	lsls	r1, r3, #28
 8003af2:	bf04      	itt	eq
 8003af4:	091b      	lsreq	r3, r3, #4
 8003af6:	3004      	addeq	r0, #4
 8003af8:	0799      	lsls	r1, r3, #30
 8003afa:	bf04      	itt	eq
 8003afc:	089b      	lsreq	r3, r3, #2
 8003afe:	3002      	addeq	r0, #2
 8003b00:	07d9      	lsls	r1, r3, #31
 8003b02:	d403      	bmi.n	8003b0c <__lo0bits+0x50>
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	f100 0001 	add.w	r0, r0, #1
 8003b0a:	d003      	beq.n	8003b14 <__lo0bits+0x58>
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	4770      	bx	lr
 8003b10:	2000      	movs	r0, #0
 8003b12:	4770      	bx	lr
 8003b14:	2020      	movs	r0, #32
 8003b16:	4770      	bx	lr

08003b18 <__i2b>:
 8003b18:	b510      	push	{r4, lr}
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	f7ff feb7 	bl	8003890 <_Balloc>
 8003b22:	4602      	mov	r2, r0
 8003b24:	b928      	cbnz	r0, 8003b32 <__i2b+0x1a>
 8003b26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003b2a:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <__i2b+0x24>)
 8003b2c:	4804      	ldr	r0, [pc, #16]	; (8003b40 <__i2b+0x28>)
 8003b2e:	f000 fc05 	bl	800433c <__assert_func>
 8003b32:	2301      	movs	r3, #1
 8003b34:	6144      	str	r4, [r0, #20]
 8003b36:	6103      	str	r3, [r0, #16]
 8003b38:	bd10      	pop	{r4, pc}
 8003b3a:	bf00      	nop
 8003b3c:	080054a9 	.word	0x080054a9
 8003b40:	0800554f 	.word	0x0800554f

08003b44 <__multiply>:
 8003b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b48:	4614      	mov	r4, r2
 8003b4a:	690a      	ldr	r2, [r1, #16]
 8003b4c:	6923      	ldr	r3, [r4, #16]
 8003b4e:	460d      	mov	r5, r1
 8003b50:	429a      	cmp	r2, r3
 8003b52:	bfbe      	ittt	lt
 8003b54:	460b      	movlt	r3, r1
 8003b56:	4625      	movlt	r5, r4
 8003b58:	461c      	movlt	r4, r3
 8003b5a:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003b5e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003b62:	68ab      	ldr	r3, [r5, #8]
 8003b64:	6869      	ldr	r1, [r5, #4]
 8003b66:	eb0a 0709 	add.w	r7, sl, r9
 8003b6a:	42bb      	cmp	r3, r7
 8003b6c:	b085      	sub	sp, #20
 8003b6e:	bfb8      	it	lt
 8003b70:	3101      	addlt	r1, #1
 8003b72:	f7ff fe8d 	bl	8003890 <_Balloc>
 8003b76:	b930      	cbnz	r0, 8003b86 <__multiply+0x42>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	f240 115d 	movw	r1, #349	; 0x15d
 8003b7e:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <__multiply+0x140>)
 8003b80:	4841      	ldr	r0, [pc, #260]	; (8003c88 <__multiply+0x144>)
 8003b82:	f000 fbdb 	bl	800433c <__assert_func>
 8003b86:	f100 0614 	add.w	r6, r0, #20
 8003b8a:	4633      	mov	r3, r6
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8003b92:	4543      	cmp	r3, r8
 8003b94:	d31e      	bcc.n	8003bd4 <__multiply+0x90>
 8003b96:	f105 0c14 	add.w	ip, r5, #20
 8003b9a:	f104 0314 	add.w	r3, r4, #20
 8003b9e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003ba2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8003ba6:	9202      	str	r2, [sp, #8]
 8003ba8:	ebac 0205 	sub.w	r2, ip, r5
 8003bac:	3a15      	subs	r2, #21
 8003bae:	f022 0203 	bic.w	r2, r2, #3
 8003bb2:	3204      	adds	r2, #4
 8003bb4:	f105 0115 	add.w	r1, r5, #21
 8003bb8:	458c      	cmp	ip, r1
 8003bba:	bf38      	it	cc
 8003bbc:	2204      	movcc	r2, #4
 8003bbe:	9201      	str	r2, [sp, #4]
 8003bc0:	9a02      	ldr	r2, [sp, #8]
 8003bc2:	9303      	str	r3, [sp, #12]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d808      	bhi.n	8003bda <__multiply+0x96>
 8003bc8:	2f00      	cmp	r7, #0
 8003bca:	dc55      	bgt.n	8003c78 <__multiply+0x134>
 8003bcc:	6107      	str	r7, [r0, #16]
 8003bce:	b005      	add	sp, #20
 8003bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd4:	f843 2b04 	str.w	r2, [r3], #4
 8003bd8:	e7db      	b.n	8003b92 <__multiply+0x4e>
 8003bda:	f8b3 a000 	ldrh.w	sl, [r3]
 8003bde:	f1ba 0f00 	cmp.w	sl, #0
 8003be2:	d020      	beq.n	8003c26 <__multiply+0xe2>
 8003be4:	46b1      	mov	r9, r6
 8003be6:	2200      	movs	r2, #0
 8003be8:	f105 0e14 	add.w	lr, r5, #20
 8003bec:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003bf0:	f8d9 b000 	ldr.w	fp, [r9]
 8003bf4:	b2a1      	uxth	r1, r4
 8003bf6:	fa1f fb8b 	uxth.w	fp, fp
 8003bfa:	fb0a b101 	mla	r1, sl, r1, fp
 8003bfe:	4411      	add	r1, r2
 8003c00:	f8d9 2000 	ldr.w	r2, [r9]
 8003c04:	0c24      	lsrs	r4, r4, #16
 8003c06:	0c12      	lsrs	r2, r2, #16
 8003c08:	fb0a 2404 	mla	r4, sl, r4, r2
 8003c0c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8003c10:	b289      	uxth	r1, r1
 8003c12:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003c16:	45f4      	cmp	ip, lr
 8003c18:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8003c1c:	f849 1b04 	str.w	r1, [r9], #4
 8003c20:	d8e4      	bhi.n	8003bec <__multiply+0xa8>
 8003c22:	9901      	ldr	r1, [sp, #4]
 8003c24:	5072      	str	r2, [r6, r1]
 8003c26:	9a03      	ldr	r2, [sp, #12]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003c2e:	f1b9 0f00 	cmp.w	r9, #0
 8003c32:	d01f      	beq.n	8003c74 <__multiply+0x130>
 8003c34:	46b6      	mov	lr, r6
 8003c36:	f04f 0a00 	mov.w	sl, #0
 8003c3a:	6834      	ldr	r4, [r6, #0]
 8003c3c:	f105 0114 	add.w	r1, r5, #20
 8003c40:	880a      	ldrh	r2, [r1, #0]
 8003c42:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003c46:	b2a4      	uxth	r4, r4
 8003c48:	fb09 b202 	mla	r2, r9, r2, fp
 8003c4c:	4492      	add	sl, r2
 8003c4e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003c52:	f84e 4b04 	str.w	r4, [lr], #4
 8003c56:	f851 4b04 	ldr.w	r4, [r1], #4
 8003c5a:	f8be 2000 	ldrh.w	r2, [lr]
 8003c5e:	0c24      	lsrs	r4, r4, #16
 8003c60:	fb09 2404 	mla	r4, r9, r4, r2
 8003c64:	458c      	cmp	ip, r1
 8003c66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8003c6a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003c6e:	d8e7      	bhi.n	8003c40 <__multiply+0xfc>
 8003c70:	9a01      	ldr	r2, [sp, #4]
 8003c72:	50b4      	str	r4, [r6, r2]
 8003c74:	3604      	adds	r6, #4
 8003c76:	e7a3      	b.n	8003bc0 <__multiply+0x7c>
 8003c78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1a5      	bne.n	8003bcc <__multiply+0x88>
 8003c80:	3f01      	subs	r7, #1
 8003c82:	e7a1      	b.n	8003bc8 <__multiply+0x84>
 8003c84:	080054a9 	.word	0x080054a9
 8003c88:	0800554f 	.word	0x0800554f

08003c8c <__pow5mult>:
 8003c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c90:	4615      	mov	r5, r2
 8003c92:	f012 0203 	ands.w	r2, r2, #3
 8003c96:	4606      	mov	r6, r0
 8003c98:	460f      	mov	r7, r1
 8003c9a:	d007      	beq.n	8003cac <__pow5mult+0x20>
 8003c9c:	4c25      	ldr	r4, [pc, #148]	; (8003d34 <__pow5mult+0xa8>)
 8003c9e:	3a01      	subs	r2, #1
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003ca6:	f7ff fe55 	bl	8003954 <__multadd>
 8003caa:	4607      	mov	r7, r0
 8003cac:	10ad      	asrs	r5, r5, #2
 8003cae:	d03d      	beq.n	8003d2c <__pow5mult+0xa0>
 8003cb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003cb2:	b97c      	cbnz	r4, 8003cd4 <__pow5mult+0x48>
 8003cb4:	2010      	movs	r0, #16
 8003cb6:	f000 fb71 	bl	800439c <malloc>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6270      	str	r0, [r6, #36]	; 0x24
 8003cbe:	b928      	cbnz	r0, 8003ccc <__pow5mult+0x40>
 8003cc0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003cc4:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <__pow5mult+0xac>)
 8003cc6:	481d      	ldr	r0, [pc, #116]	; (8003d3c <__pow5mult+0xb0>)
 8003cc8:	f000 fb38 	bl	800433c <__assert_func>
 8003ccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003cd0:	6004      	str	r4, [r0, #0]
 8003cd2:	60c4      	str	r4, [r0, #12]
 8003cd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003cd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003cdc:	b94c      	cbnz	r4, 8003cf2 <__pow5mult+0x66>
 8003cde:	f240 2171 	movw	r1, #625	; 0x271
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f7ff ff18 	bl	8003b18 <__i2b>
 8003ce8:	2300      	movs	r3, #0
 8003cea:	4604      	mov	r4, r0
 8003cec:	f8c8 0008 	str.w	r0, [r8, #8]
 8003cf0:	6003      	str	r3, [r0, #0]
 8003cf2:	f04f 0900 	mov.w	r9, #0
 8003cf6:	07eb      	lsls	r3, r5, #31
 8003cf8:	d50a      	bpl.n	8003d10 <__pow5mult+0x84>
 8003cfa:	4639      	mov	r1, r7
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	4630      	mov	r0, r6
 8003d00:	f7ff ff20 	bl	8003b44 <__multiply>
 8003d04:	4680      	mov	r8, r0
 8003d06:	4639      	mov	r1, r7
 8003d08:	4630      	mov	r0, r6
 8003d0a:	f7ff fe01 	bl	8003910 <_Bfree>
 8003d0e:	4647      	mov	r7, r8
 8003d10:	106d      	asrs	r5, r5, #1
 8003d12:	d00b      	beq.n	8003d2c <__pow5mult+0xa0>
 8003d14:	6820      	ldr	r0, [r4, #0]
 8003d16:	b938      	cbnz	r0, 8003d28 <__pow5mult+0x9c>
 8003d18:	4622      	mov	r2, r4
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f7ff ff11 	bl	8003b44 <__multiply>
 8003d22:	6020      	str	r0, [r4, #0]
 8003d24:	f8c0 9000 	str.w	r9, [r0]
 8003d28:	4604      	mov	r4, r0
 8003d2a:	e7e4      	b.n	8003cf6 <__pow5mult+0x6a>
 8003d2c:	4638      	mov	r0, r7
 8003d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d32:	bf00      	nop
 8003d34:	080056a0 	.word	0x080056a0
 8003d38:	08005538 	.word	0x08005538
 8003d3c:	0800554f 	.word	0x0800554f

08003d40 <__lshift>:
 8003d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d44:	460c      	mov	r4, r1
 8003d46:	4607      	mov	r7, r0
 8003d48:	4691      	mov	r9, r2
 8003d4a:	6923      	ldr	r3, [r4, #16]
 8003d4c:	6849      	ldr	r1, [r1, #4]
 8003d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003d52:	68a3      	ldr	r3, [r4, #8]
 8003d54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003d58:	f108 0601 	add.w	r6, r8, #1
 8003d5c:	42b3      	cmp	r3, r6
 8003d5e:	db0b      	blt.n	8003d78 <__lshift+0x38>
 8003d60:	4638      	mov	r0, r7
 8003d62:	f7ff fd95 	bl	8003890 <_Balloc>
 8003d66:	4605      	mov	r5, r0
 8003d68:	b948      	cbnz	r0, 8003d7e <__lshift+0x3e>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003d70:	4b27      	ldr	r3, [pc, #156]	; (8003e10 <__lshift+0xd0>)
 8003d72:	4828      	ldr	r0, [pc, #160]	; (8003e14 <__lshift+0xd4>)
 8003d74:	f000 fae2 	bl	800433c <__assert_func>
 8003d78:	3101      	adds	r1, #1
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	e7ee      	b.n	8003d5c <__lshift+0x1c>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f100 0114 	add.w	r1, r0, #20
 8003d84:	f100 0210 	add.w	r2, r0, #16
 8003d88:	4618      	mov	r0, r3
 8003d8a:	4553      	cmp	r3, sl
 8003d8c:	db33      	blt.n	8003df6 <__lshift+0xb6>
 8003d8e:	6920      	ldr	r0, [r4, #16]
 8003d90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003d94:	f104 0314 	add.w	r3, r4, #20
 8003d98:	f019 091f 	ands.w	r9, r9, #31
 8003d9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003da0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003da4:	d02b      	beq.n	8003dfe <__lshift+0xbe>
 8003da6:	468a      	mov	sl, r1
 8003da8:	2200      	movs	r2, #0
 8003daa:	f1c9 0e20 	rsb	lr, r9, #32
 8003dae:	6818      	ldr	r0, [r3, #0]
 8003db0:	fa00 f009 	lsl.w	r0, r0, r9
 8003db4:	4302      	orrs	r2, r0
 8003db6:	f84a 2b04 	str.w	r2, [sl], #4
 8003dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8003dbe:	459c      	cmp	ip, r3
 8003dc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8003dc4:	d8f3      	bhi.n	8003dae <__lshift+0x6e>
 8003dc6:	ebac 0304 	sub.w	r3, ip, r4
 8003dca:	3b15      	subs	r3, #21
 8003dcc:	f023 0303 	bic.w	r3, r3, #3
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	f104 0015 	add.w	r0, r4, #21
 8003dd6:	4584      	cmp	ip, r0
 8003dd8:	bf38      	it	cc
 8003dda:	2304      	movcc	r3, #4
 8003ddc:	50ca      	str	r2, [r1, r3]
 8003dde:	b10a      	cbz	r2, 8003de4 <__lshift+0xa4>
 8003de0:	f108 0602 	add.w	r6, r8, #2
 8003de4:	3e01      	subs	r6, #1
 8003de6:	4638      	mov	r0, r7
 8003de8:	4621      	mov	r1, r4
 8003dea:	612e      	str	r6, [r5, #16]
 8003dec:	f7ff fd90 	bl	8003910 <_Bfree>
 8003df0:	4628      	mov	r0, r5
 8003df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df6:	f842 0f04 	str.w	r0, [r2, #4]!
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	e7c5      	b.n	8003d8a <__lshift+0x4a>
 8003dfe:	3904      	subs	r1, #4
 8003e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8003e04:	459c      	cmp	ip, r3
 8003e06:	f841 2f04 	str.w	r2, [r1, #4]!
 8003e0a:	d8f9      	bhi.n	8003e00 <__lshift+0xc0>
 8003e0c:	e7ea      	b.n	8003de4 <__lshift+0xa4>
 8003e0e:	bf00      	nop
 8003e10:	080054a9 	.word	0x080054a9
 8003e14:	0800554f 	.word	0x0800554f

08003e18 <__mcmp>:
 8003e18:	4603      	mov	r3, r0
 8003e1a:	690a      	ldr	r2, [r1, #16]
 8003e1c:	6900      	ldr	r0, [r0, #16]
 8003e1e:	b530      	push	{r4, r5, lr}
 8003e20:	1a80      	subs	r0, r0, r2
 8003e22:	d10d      	bne.n	8003e40 <__mcmp+0x28>
 8003e24:	3314      	adds	r3, #20
 8003e26:	3114      	adds	r1, #20
 8003e28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003e2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003e30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003e34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003e38:	4295      	cmp	r5, r2
 8003e3a:	d002      	beq.n	8003e42 <__mcmp+0x2a>
 8003e3c:	d304      	bcc.n	8003e48 <__mcmp+0x30>
 8003e3e:	2001      	movs	r0, #1
 8003e40:	bd30      	pop	{r4, r5, pc}
 8003e42:	42a3      	cmp	r3, r4
 8003e44:	d3f4      	bcc.n	8003e30 <__mcmp+0x18>
 8003e46:	e7fb      	b.n	8003e40 <__mcmp+0x28>
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	e7f8      	b.n	8003e40 <__mcmp+0x28>
	...

08003e50 <__mdiff>:
 8003e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e54:	460c      	mov	r4, r1
 8003e56:	4606      	mov	r6, r0
 8003e58:	4611      	mov	r1, r2
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	4692      	mov	sl, r2
 8003e5e:	f7ff ffdb 	bl	8003e18 <__mcmp>
 8003e62:	1e05      	subs	r5, r0, #0
 8003e64:	d111      	bne.n	8003e8a <__mdiff+0x3a>
 8003e66:	4629      	mov	r1, r5
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f7ff fd11 	bl	8003890 <_Balloc>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	b928      	cbnz	r0, 8003e7e <__mdiff+0x2e>
 8003e72:	f240 2132 	movw	r1, #562	; 0x232
 8003e76:	4b3c      	ldr	r3, [pc, #240]	; (8003f68 <__mdiff+0x118>)
 8003e78:	483c      	ldr	r0, [pc, #240]	; (8003f6c <__mdiff+0x11c>)
 8003e7a:	f000 fa5f 	bl	800433c <__assert_func>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003e84:	4610      	mov	r0, r2
 8003e86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e8a:	bfa4      	itt	ge
 8003e8c:	4653      	movge	r3, sl
 8003e8e:	46a2      	movge	sl, r4
 8003e90:	4630      	mov	r0, r6
 8003e92:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003e96:	bfa6      	itte	ge
 8003e98:	461c      	movge	r4, r3
 8003e9a:	2500      	movge	r5, #0
 8003e9c:	2501      	movlt	r5, #1
 8003e9e:	f7ff fcf7 	bl	8003890 <_Balloc>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	b918      	cbnz	r0, 8003eae <__mdiff+0x5e>
 8003ea6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003eaa:	4b2f      	ldr	r3, [pc, #188]	; (8003f68 <__mdiff+0x118>)
 8003eac:	e7e4      	b.n	8003e78 <__mdiff+0x28>
 8003eae:	f100 0814 	add.w	r8, r0, #20
 8003eb2:	f8da 7010 	ldr.w	r7, [sl, #16]
 8003eb6:	60c5      	str	r5, [r0, #12]
 8003eb8:	f04f 0c00 	mov.w	ip, #0
 8003ebc:	f10a 0514 	add.w	r5, sl, #20
 8003ec0:	f10a 0010 	add.w	r0, sl, #16
 8003ec4:	46c2      	mov	sl, r8
 8003ec6:	6926      	ldr	r6, [r4, #16]
 8003ec8:	f104 0914 	add.w	r9, r4, #20
 8003ecc:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8003ed0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003ed4:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8003ed8:	f859 3b04 	ldr.w	r3, [r9], #4
 8003edc:	fa1f f18b 	uxth.w	r1, fp
 8003ee0:	4461      	add	r1, ip
 8003ee2:	fa1f fc83 	uxth.w	ip, r3
 8003ee6:	0c1b      	lsrs	r3, r3, #16
 8003ee8:	eba1 010c 	sub.w	r1, r1, ip
 8003eec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003ef0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003ef4:	b289      	uxth	r1, r1
 8003ef6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8003efa:	454e      	cmp	r6, r9
 8003efc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003f00:	f84a 3b04 	str.w	r3, [sl], #4
 8003f04:	d8e6      	bhi.n	8003ed4 <__mdiff+0x84>
 8003f06:	1b33      	subs	r3, r6, r4
 8003f08:	3b15      	subs	r3, #21
 8003f0a:	f023 0303 	bic.w	r3, r3, #3
 8003f0e:	3415      	adds	r4, #21
 8003f10:	3304      	adds	r3, #4
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	bf38      	it	cc
 8003f16:	2304      	movcc	r3, #4
 8003f18:	441d      	add	r5, r3
 8003f1a:	4443      	add	r3, r8
 8003f1c:	461e      	mov	r6, r3
 8003f1e:	462c      	mov	r4, r5
 8003f20:	4574      	cmp	r4, lr
 8003f22:	d30e      	bcc.n	8003f42 <__mdiff+0xf2>
 8003f24:	f10e 0103 	add.w	r1, lr, #3
 8003f28:	1b49      	subs	r1, r1, r5
 8003f2a:	f021 0103 	bic.w	r1, r1, #3
 8003f2e:	3d03      	subs	r5, #3
 8003f30:	45ae      	cmp	lr, r5
 8003f32:	bf38      	it	cc
 8003f34:	2100      	movcc	r1, #0
 8003f36:	4419      	add	r1, r3
 8003f38:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003f3c:	b18b      	cbz	r3, 8003f62 <__mdiff+0x112>
 8003f3e:	6117      	str	r7, [r2, #16]
 8003f40:	e7a0      	b.n	8003e84 <__mdiff+0x34>
 8003f42:	f854 8b04 	ldr.w	r8, [r4], #4
 8003f46:	fa1f f188 	uxth.w	r1, r8
 8003f4a:	4461      	add	r1, ip
 8003f4c:	1408      	asrs	r0, r1, #16
 8003f4e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8003f52:	b289      	uxth	r1, r1
 8003f54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003f58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003f5c:	f846 1b04 	str.w	r1, [r6], #4
 8003f60:	e7de      	b.n	8003f20 <__mdiff+0xd0>
 8003f62:	3f01      	subs	r7, #1
 8003f64:	e7e8      	b.n	8003f38 <__mdiff+0xe8>
 8003f66:	bf00      	nop
 8003f68:	080054a9 	.word	0x080054a9
 8003f6c:	0800554f 	.word	0x0800554f

08003f70 <__ulp>:
 8003f70:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <__ulp+0x48>)
 8003f72:	400b      	ands	r3, r1
 8003f74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	dd02      	ble.n	8003f82 <__ulp+0x12>
 8003f7c:	2000      	movs	r0, #0
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4770      	bx	lr
 8003f82:	425b      	negs	r3, r3
 8003f84:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8003f88:	f04f 0000 	mov.w	r0, #0
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	ea4f 5223 	mov.w	r2, r3, asr #20
 8003f94:	da04      	bge.n	8003fa0 <__ulp+0x30>
 8003f96:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003f9a:	fa43 f102 	asr.w	r1, r3, r2
 8003f9e:	4770      	bx	lr
 8003fa0:	f1a2 0314 	sub.w	r3, r2, #20
 8003fa4:	2b1e      	cmp	r3, #30
 8003fa6:	bfd6      	itet	le
 8003fa8:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8003fac:	2301      	movgt	r3, #1
 8003fae:	fa22 f303 	lsrle.w	r3, r2, r3
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	7ff00000 	.word	0x7ff00000

08003fbc <__b2d>:
 8003fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fc0:	6907      	ldr	r7, [r0, #16]
 8003fc2:	f100 0914 	add.w	r9, r0, #20
 8003fc6:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8003fca:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8003fce:	f1a7 0804 	sub.w	r8, r7, #4
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	f7ff fd52 	bl	8003a7c <__hi0bits>
 8003fd8:	f1c0 0320 	rsb	r3, r0, #32
 8003fdc:	280a      	cmp	r0, #10
 8003fde:	600b      	str	r3, [r1, #0]
 8003fe0:	491f      	ldr	r1, [pc, #124]	; (8004060 <__b2d+0xa4>)
 8003fe2:	dc17      	bgt.n	8004014 <__b2d+0x58>
 8003fe4:	45c1      	cmp	r9, r8
 8003fe6:	bf28      	it	cs
 8003fe8:	2200      	movcs	r2, #0
 8003fea:	f1c0 0c0b 	rsb	ip, r0, #11
 8003fee:	fa26 f30c 	lsr.w	r3, r6, ip
 8003ff2:	bf38      	it	cc
 8003ff4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8003ff8:	ea43 0501 	orr.w	r5, r3, r1
 8003ffc:	f100 0315 	add.w	r3, r0, #21
 8004000:	fa06 f303 	lsl.w	r3, r6, r3
 8004004:	fa22 f20c 	lsr.w	r2, r2, ip
 8004008:	ea43 0402 	orr.w	r4, r3, r2
 800400c:	4620      	mov	r0, r4
 800400e:	4629      	mov	r1, r5
 8004010:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004014:	45c1      	cmp	r9, r8
 8004016:	bf2e      	itee	cs
 8004018:	2200      	movcs	r2, #0
 800401a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800401e:	f1a7 0808 	subcc.w	r8, r7, #8
 8004022:	f1b0 030b 	subs.w	r3, r0, #11
 8004026:	d016      	beq.n	8004056 <__b2d+0x9a>
 8004028:	f1c3 0720 	rsb	r7, r3, #32
 800402c:	fa22 f107 	lsr.w	r1, r2, r7
 8004030:	45c8      	cmp	r8, r9
 8004032:	fa06 f603 	lsl.w	r6, r6, r3
 8004036:	ea46 0601 	orr.w	r6, r6, r1
 800403a:	bf94      	ite	ls
 800403c:	2100      	movls	r1, #0
 800403e:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8004042:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8004046:	fa02 f003 	lsl.w	r0, r2, r3
 800404a:	40f9      	lsrs	r1, r7
 800404c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004050:	ea40 0401 	orr.w	r4, r0, r1
 8004054:	e7da      	b.n	800400c <__b2d+0x50>
 8004056:	4614      	mov	r4, r2
 8004058:	ea46 0501 	orr.w	r5, r6, r1
 800405c:	e7d6      	b.n	800400c <__b2d+0x50>
 800405e:	bf00      	nop
 8004060:	3ff00000 	.word	0x3ff00000

08004064 <__d2b>:
 8004064:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004068:	2101      	movs	r1, #1
 800406a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800406e:	4690      	mov	r8, r2
 8004070:	461d      	mov	r5, r3
 8004072:	f7ff fc0d 	bl	8003890 <_Balloc>
 8004076:	4604      	mov	r4, r0
 8004078:	b930      	cbnz	r0, 8004088 <__d2b+0x24>
 800407a:	4602      	mov	r2, r0
 800407c:	f240 310a 	movw	r1, #778	; 0x30a
 8004080:	4b24      	ldr	r3, [pc, #144]	; (8004114 <__d2b+0xb0>)
 8004082:	4825      	ldr	r0, [pc, #148]	; (8004118 <__d2b+0xb4>)
 8004084:	f000 f95a 	bl	800433c <__assert_func>
 8004088:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800408c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004090:	bb2d      	cbnz	r5, 80040de <__d2b+0x7a>
 8004092:	9301      	str	r3, [sp, #4]
 8004094:	f1b8 0300 	subs.w	r3, r8, #0
 8004098:	d026      	beq.n	80040e8 <__d2b+0x84>
 800409a:	4668      	mov	r0, sp
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	f7ff fd0d 	bl	8003abc <__lo0bits>
 80040a2:	9900      	ldr	r1, [sp, #0]
 80040a4:	b1f0      	cbz	r0, 80040e4 <__d2b+0x80>
 80040a6:	9a01      	ldr	r2, [sp, #4]
 80040a8:	f1c0 0320 	rsb	r3, r0, #32
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	430b      	orrs	r3, r1
 80040b2:	40c2      	lsrs	r2, r0
 80040b4:	6163      	str	r3, [r4, #20]
 80040b6:	9201      	str	r2, [sp, #4]
 80040b8:	9b01      	ldr	r3, [sp, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bf14      	ite	ne
 80040be:	2102      	movne	r1, #2
 80040c0:	2101      	moveq	r1, #1
 80040c2:	61a3      	str	r3, [r4, #24]
 80040c4:	6121      	str	r1, [r4, #16]
 80040c6:	b1c5      	cbz	r5, 80040fa <__d2b+0x96>
 80040c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80040cc:	4405      	add	r5, r0
 80040ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80040d2:	603d      	str	r5, [r7, #0]
 80040d4:	6030      	str	r0, [r6, #0]
 80040d6:	4620      	mov	r0, r4
 80040d8:	b002      	add	sp, #8
 80040da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e2:	e7d6      	b.n	8004092 <__d2b+0x2e>
 80040e4:	6161      	str	r1, [r4, #20]
 80040e6:	e7e7      	b.n	80040b8 <__d2b+0x54>
 80040e8:	a801      	add	r0, sp, #4
 80040ea:	f7ff fce7 	bl	8003abc <__lo0bits>
 80040ee:	2101      	movs	r1, #1
 80040f0:	9b01      	ldr	r3, [sp, #4]
 80040f2:	6121      	str	r1, [r4, #16]
 80040f4:	6163      	str	r3, [r4, #20]
 80040f6:	3020      	adds	r0, #32
 80040f8:	e7e5      	b.n	80040c6 <__d2b+0x62>
 80040fa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80040fe:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004102:	6038      	str	r0, [r7, #0]
 8004104:	6918      	ldr	r0, [r3, #16]
 8004106:	f7ff fcb9 	bl	8003a7c <__hi0bits>
 800410a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800410e:	6031      	str	r1, [r6, #0]
 8004110:	e7e1      	b.n	80040d6 <__d2b+0x72>
 8004112:	bf00      	nop
 8004114:	080054a9 	.word	0x080054a9
 8004118:	0800554f 	.word	0x0800554f

0800411c <__ratio>:
 800411c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004120:	4688      	mov	r8, r1
 8004122:	4669      	mov	r1, sp
 8004124:	4681      	mov	r9, r0
 8004126:	f7ff ff49 	bl	8003fbc <__b2d>
 800412a:	460f      	mov	r7, r1
 800412c:	4604      	mov	r4, r0
 800412e:	460d      	mov	r5, r1
 8004130:	4640      	mov	r0, r8
 8004132:	a901      	add	r1, sp, #4
 8004134:	f7ff ff42 	bl	8003fbc <__b2d>
 8004138:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800413c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004140:	468b      	mov	fp, r1
 8004142:	eba3 0c02 	sub.w	ip, r3, r2
 8004146:	e9dd 3200 	ldrd	r3, r2, [sp]
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8004150:	2b00      	cmp	r3, #0
 8004152:	bfd5      	itete	le
 8004154:	460a      	movle	r2, r1
 8004156:	462a      	movgt	r2, r5
 8004158:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800415c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8004160:	bfd8      	it	le
 8004162:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8004166:	465b      	mov	r3, fp
 8004168:	4602      	mov	r2, r0
 800416a:	4639      	mov	r1, r7
 800416c:	4620      	mov	r0, r4
 800416e:	f7fc fae7 	bl	8000740 <__aeabi_ddiv>
 8004172:	b003      	add	sp, #12
 8004174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004178 <__copybits>:
 8004178:	3901      	subs	r1, #1
 800417a:	b570      	push	{r4, r5, r6, lr}
 800417c:	1149      	asrs	r1, r1, #5
 800417e:	6914      	ldr	r4, [r2, #16]
 8004180:	3101      	adds	r1, #1
 8004182:	f102 0314 	add.w	r3, r2, #20
 8004186:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800418a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800418e:	1f05      	subs	r5, r0, #4
 8004190:	42a3      	cmp	r3, r4
 8004192:	d30c      	bcc.n	80041ae <__copybits+0x36>
 8004194:	1aa3      	subs	r3, r4, r2
 8004196:	3b11      	subs	r3, #17
 8004198:	f023 0303 	bic.w	r3, r3, #3
 800419c:	3211      	adds	r2, #17
 800419e:	42a2      	cmp	r2, r4
 80041a0:	bf88      	it	hi
 80041a2:	2300      	movhi	r3, #0
 80041a4:	4418      	add	r0, r3
 80041a6:	2300      	movs	r3, #0
 80041a8:	4288      	cmp	r0, r1
 80041aa:	d305      	bcc.n	80041b8 <__copybits+0x40>
 80041ac:	bd70      	pop	{r4, r5, r6, pc}
 80041ae:	f853 6b04 	ldr.w	r6, [r3], #4
 80041b2:	f845 6f04 	str.w	r6, [r5, #4]!
 80041b6:	e7eb      	b.n	8004190 <__copybits+0x18>
 80041b8:	f840 3b04 	str.w	r3, [r0], #4
 80041bc:	e7f4      	b.n	80041a8 <__copybits+0x30>

080041be <__any_on>:
 80041be:	f100 0214 	add.w	r2, r0, #20
 80041c2:	6900      	ldr	r0, [r0, #16]
 80041c4:	114b      	asrs	r3, r1, #5
 80041c6:	4298      	cmp	r0, r3
 80041c8:	b510      	push	{r4, lr}
 80041ca:	db11      	blt.n	80041f0 <__any_on+0x32>
 80041cc:	dd0a      	ble.n	80041e4 <__any_on+0x26>
 80041ce:	f011 011f 	ands.w	r1, r1, #31
 80041d2:	d007      	beq.n	80041e4 <__any_on+0x26>
 80041d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80041d8:	fa24 f001 	lsr.w	r0, r4, r1
 80041dc:	fa00 f101 	lsl.w	r1, r0, r1
 80041e0:	428c      	cmp	r4, r1
 80041e2:	d10b      	bne.n	80041fc <__any_on+0x3e>
 80041e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d803      	bhi.n	80041f4 <__any_on+0x36>
 80041ec:	2000      	movs	r0, #0
 80041ee:	bd10      	pop	{r4, pc}
 80041f0:	4603      	mov	r3, r0
 80041f2:	e7f7      	b.n	80041e4 <__any_on+0x26>
 80041f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80041f8:	2900      	cmp	r1, #0
 80041fa:	d0f5      	beq.n	80041e8 <__any_on+0x2a>
 80041fc:	2001      	movs	r0, #1
 80041fe:	e7f6      	b.n	80041ee <__any_on+0x30>

08004200 <_calloc_r>:
 8004200:	b538      	push	{r3, r4, r5, lr}
 8004202:	fb02 f501 	mul.w	r5, r2, r1
 8004206:	4629      	mov	r1, r5
 8004208:	f000 f808 	bl	800421c <_malloc_r>
 800420c:	4604      	mov	r4, r0
 800420e:	b118      	cbz	r0, 8004218 <_calloc_r+0x18>
 8004210:	462a      	mov	r2, r5
 8004212:	2100      	movs	r1, #0
 8004214:	f7fe f8f6 	bl	8002404 <memset>
 8004218:	4620      	mov	r0, r4
 800421a:	bd38      	pop	{r3, r4, r5, pc}

0800421c <_malloc_r>:
 800421c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800421e:	1ccd      	adds	r5, r1, #3
 8004220:	f025 0503 	bic.w	r5, r5, #3
 8004224:	3508      	adds	r5, #8
 8004226:	2d0c      	cmp	r5, #12
 8004228:	bf38      	it	cc
 800422a:	250c      	movcc	r5, #12
 800422c:	2d00      	cmp	r5, #0
 800422e:	4606      	mov	r6, r0
 8004230:	db01      	blt.n	8004236 <_malloc_r+0x1a>
 8004232:	42a9      	cmp	r1, r5
 8004234:	d903      	bls.n	800423e <_malloc_r+0x22>
 8004236:	230c      	movs	r3, #12
 8004238:	6033      	str	r3, [r6, #0]
 800423a:	2000      	movs	r0, #0
 800423c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800423e:	f000 f8b5 	bl	80043ac <__malloc_lock>
 8004242:	4921      	ldr	r1, [pc, #132]	; (80042c8 <_malloc_r+0xac>)
 8004244:	680a      	ldr	r2, [r1, #0]
 8004246:	4614      	mov	r4, r2
 8004248:	b99c      	cbnz	r4, 8004272 <_malloc_r+0x56>
 800424a:	4f20      	ldr	r7, [pc, #128]	; (80042cc <_malloc_r+0xb0>)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	b923      	cbnz	r3, 800425a <_malloc_r+0x3e>
 8004250:	4621      	mov	r1, r4
 8004252:	4630      	mov	r0, r6
 8004254:	f000 f842 	bl	80042dc <_sbrk_r>
 8004258:	6038      	str	r0, [r7, #0]
 800425a:	4629      	mov	r1, r5
 800425c:	4630      	mov	r0, r6
 800425e:	f000 f83d 	bl	80042dc <_sbrk_r>
 8004262:	1c43      	adds	r3, r0, #1
 8004264:	d123      	bne.n	80042ae <_malloc_r+0x92>
 8004266:	230c      	movs	r3, #12
 8004268:	4630      	mov	r0, r6
 800426a:	6033      	str	r3, [r6, #0]
 800426c:	f000 f8a4 	bl	80043b8 <__malloc_unlock>
 8004270:	e7e3      	b.n	800423a <_malloc_r+0x1e>
 8004272:	6823      	ldr	r3, [r4, #0]
 8004274:	1b5b      	subs	r3, r3, r5
 8004276:	d417      	bmi.n	80042a8 <_malloc_r+0x8c>
 8004278:	2b0b      	cmp	r3, #11
 800427a:	d903      	bls.n	8004284 <_malloc_r+0x68>
 800427c:	6023      	str	r3, [r4, #0]
 800427e:	441c      	add	r4, r3
 8004280:	6025      	str	r5, [r4, #0]
 8004282:	e004      	b.n	800428e <_malloc_r+0x72>
 8004284:	6863      	ldr	r3, [r4, #4]
 8004286:	42a2      	cmp	r2, r4
 8004288:	bf0c      	ite	eq
 800428a:	600b      	streq	r3, [r1, #0]
 800428c:	6053      	strne	r3, [r2, #4]
 800428e:	4630      	mov	r0, r6
 8004290:	f000 f892 	bl	80043b8 <__malloc_unlock>
 8004294:	f104 000b 	add.w	r0, r4, #11
 8004298:	1d23      	adds	r3, r4, #4
 800429a:	f020 0007 	bic.w	r0, r0, #7
 800429e:	1ac2      	subs	r2, r0, r3
 80042a0:	d0cc      	beq.n	800423c <_malloc_r+0x20>
 80042a2:	1a1b      	subs	r3, r3, r0
 80042a4:	50a3      	str	r3, [r4, r2]
 80042a6:	e7c9      	b.n	800423c <_malloc_r+0x20>
 80042a8:	4622      	mov	r2, r4
 80042aa:	6864      	ldr	r4, [r4, #4]
 80042ac:	e7cc      	b.n	8004248 <_malloc_r+0x2c>
 80042ae:	1cc4      	adds	r4, r0, #3
 80042b0:	f024 0403 	bic.w	r4, r4, #3
 80042b4:	42a0      	cmp	r0, r4
 80042b6:	d0e3      	beq.n	8004280 <_malloc_r+0x64>
 80042b8:	1a21      	subs	r1, r4, r0
 80042ba:	4630      	mov	r0, r6
 80042bc:	f000 f80e 	bl	80042dc <_sbrk_r>
 80042c0:	3001      	adds	r0, #1
 80042c2:	d1dd      	bne.n	8004280 <_malloc_r+0x64>
 80042c4:	e7cf      	b.n	8004266 <_malloc_r+0x4a>
 80042c6:	bf00      	nop
 80042c8:	20000408 	.word	0x20000408
 80042cc:	2000040c 	.word	0x2000040c

080042d0 <nan>:
 80042d0:	2000      	movs	r0, #0
 80042d2:	4901      	ldr	r1, [pc, #4]	; (80042d8 <nan+0x8>)
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	7ff80000 	.word	0x7ff80000

080042dc <_sbrk_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	2300      	movs	r3, #0
 80042e0:	4d05      	ldr	r5, [pc, #20]	; (80042f8 <_sbrk_r+0x1c>)
 80042e2:	4604      	mov	r4, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	602b      	str	r3, [r5, #0]
 80042e8:	f7fd f806 	bl	80012f8 <_sbrk>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d102      	bne.n	80042f6 <_sbrk_r+0x1a>
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	b103      	cbz	r3, 80042f6 <_sbrk_r+0x1a>
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	20000454 	.word	0x20000454

080042fc <strncmp>:
 80042fc:	b510      	push	{r4, lr}
 80042fe:	b16a      	cbz	r2, 800431c <strncmp+0x20>
 8004300:	3901      	subs	r1, #1
 8004302:	1884      	adds	r4, r0, r2
 8004304:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004308:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800430c:	4293      	cmp	r3, r2
 800430e:	d103      	bne.n	8004318 <strncmp+0x1c>
 8004310:	42a0      	cmp	r0, r4
 8004312:	d001      	beq.n	8004318 <strncmp+0x1c>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f5      	bne.n	8004304 <strncmp+0x8>
 8004318:	1a98      	subs	r0, r3, r2
 800431a:	bd10      	pop	{r4, pc}
 800431c:	4610      	mov	r0, r2
 800431e:	e7fc      	b.n	800431a <strncmp+0x1e>

08004320 <__ascii_wctomb>:
 8004320:	4603      	mov	r3, r0
 8004322:	4608      	mov	r0, r1
 8004324:	b141      	cbz	r1, 8004338 <__ascii_wctomb+0x18>
 8004326:	2aff      	cmp	r2, #255	; 0xff
 8004328:	d904      	bls.n	8004334 <__ascii_wctomb+0x14>
 800432a:	228a      	movs	r2, #138	; 0x8a
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	4770      	bx	lr
 8004334:	2001      	movs	r0, #1
 8004336:	700a      	strb	r2, [r1, #0]
 8004338:	4770      	bx	lr
	...

0800433c <__assert_func>:
 800433c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800433e:	4614      	mov	r4, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <__assert_func+0x2c>)
 8004344:	4605      	mov	r5, r0
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68d8      	ldr	r0, [r3, #12]
 800434a:	b14c      	cbz	r4, 8004360 <__assert_func+0x24>
 800434c:	4b07      	ldr	r3, [pc, #28]	; (800436c <__assert_func+0x30>)
 800434e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004352:	9100      	str	r1, [sp, #0]
 8004354:	462b      	mov	r3, r5
 8004356:	4906      	ldr	r1, [pc, #24]	; (8004370 <__assert_func+0x34>)
 8004358:	f000 f80e 	bl	8004378 <fiprintf>
 800435c:	f000 fc2c 	bl	8004bb8 <abort>
 8004360:	4b04      	ldr	r3, [pc, #16]	; (8004374 <__assert_func+0x38>)
 8004362:	461c      	mov	r4, r3
 8004364:	e7f3      	b.n	800434e <__assert_func+0x12>
 8004366:	bf00      	nop
 8004368:	20000014 	.word	0x20000014
 800436c:	080056ac 	.word	0x080056ac
 8004370:	080056b9 	.word	0x080056b9
 8004374:	080056e7 	.word	0x080056e7

08004378 <fiprintf>:
 8004378:	b40e      	push	{r1, r2, r3}
 800437a:	b503      	push	{r0, r1, lr}
 800437c:	4601      	mov	r1, r0
 800437e:	ab03      	add	r3, sp, #12
 8004380:	4805      	ldr	r0, [pc, #20]	; (8004398 <fiprintf+0x20>)
 8004382:	f853 2b04 	ldr.w	r2, [r3], #4
 8004386:	6800      	ldr	r0, [r0, #0]
 8004388:	9301      	str	r3, [sp, #4]
 800438a:	f000 f88f 	bl	80044ac <_vfiprintf_r>
 800438e:	b002      	add	sp, #8
 8004390:	f85d eb04 	ldr.w	lr, [sp], #4
 8004394:	b003      	add	sp, #12
 8004396:	4770      	bx	lr
 8004398:	20000014 	.word	0x20000014

0800439c <malloc>:
 800439c:	4b02      	ldr	r3, [pc, #8]	; (80043a8 <malloc+0xc>)
 800439e:	4601      	mov	r1, r0
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	f7ff bf3b 	b.w	800421c <_malloc_r>
 80043a6:	bf00      	nop
 80043a8:	20000014 	.word	0x20000014

080043ac <__malloc_lock>:
 80043ac:	4801      	ldr	r0, [pc, #4]	; (80043b4 <__malloc_lock+0x8>)
 80043ae:	f000 bdc3 	b.w	8004f38 <__retarget_lock_acquire_recursive>
 80043b2:	bf00      	nop
 80043b4:	2000045c 	.word	0x2000045c

080043b8 <__malloc_unlock>:
 80043b8:	4801      	ldr	r0, [pc, #4]	; (80043c0 <__malloc_unlock+0x8>)
 80043ba:	f000 bdbe 	b.w	8004f3a <__retarget_lock_release_recursive>
 80043be:	bf00      	nop
 80043c0:	2000045c 	.word	0x2000045c

080043c4 <_free_r>:
 80043c4:	b538      	push	{r3, r4, r5, lr}
 80043c6:	4605      	mov	r5, r0
 80043c8:	2900      	cmp	r1, #0
 80043ca:	d043      	beq.n	8004454 <_free_r+0x90>
 80043cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d0:	1f0c      	subs	r4, r1, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	bfb8      	it	lt
 80043d6:	18e4      	addlt	r4, r4, r3
 80043d8:	f7ff ffe8 	bl	80043ac <__malloc_lock>
 80043dc:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <_free_r+0x94>)
 80043de:	6813      	ldr	r3, [r2, #0]
 80043e0:	4610      	mov	r0, r2
 80043e2:	b933      	cbnz	r3, 80043f2 <_free_r+0x2e>
 80043e4:	6063      	str	r3, [r4, #4]
 80043e6:	6014      	str	r4, [r2, #0]
 80043e8:	4628      	mov	r0, r5
 80043ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043ee:	f7ff bfe3 	b.w	80043b8 <__malloc_unlock>
 80043f2:	42a3      	cmp	r3, r4
 80043f4:	d90a      	bls.n	800440c <_free_r+0x48>
 80043f6:	6821      	ldr	r1, [r4, #0]
 80043f8:	1862      	adds	r2, r4, r1
 80043fa:	4293      	cmp	r3, r2
 80043fc:	bf01      	itttt	eq
 80043fe:	681a      	ldreq	r2, [r3, #0]
 8004400:	685b      	ldreq	r3, [r3, #4]
 8004402:	1852      	addeq	r2, r2, r1
 8004404:	6022      	streq	r2, [r4, #0]
 8004406:	6063      	str	r3, [r4, #4]
 8004408:	6004      	str	r4, [r0, #0]
 800440a:	e7ed      	b.n	80043e8 <_free_r+0x24>
 800440c:	461a      	mov	r2, r3
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	b10b      	cbz	r3, 8004416 <_free_r+0x52>
 8004412:	42a3      	cmp	r3, r4
 8004414:	d9fa      	bls.n	800440c <_free_r+0x48>
 8004416:	6811      	ldr	r1, [r2, #0]
 8004418:	1850      	adds	r0, r2, r1
 800441a:	42a0      	cmp	r0, r4
 800441c:	d10b      	bne.n	8004436 <_free_r+0x72>
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	4401      	add	r1, r0
 8004422:	1850      	adds	r0, r2, r1
 8004424:	4283      	cmp	r3, r0
 8004426:	6011      	str	r1, [r2, #0]
 8004428:	d1de      	bne.n	80043e8 <_free_r+0x24>
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4401      	add	r1, r0
 8004430:	6011      	str	r1, [r2, #0]
 8004432:	6053      	str	r3, [r2, #4]
 8004434:	e7d8      	b.n	80043e8 <_free_r+0x24>
 8004436:	d902      	bls.n	800443e <_free_r+0x7a>
 8004438:	230c      	movs	r3, #12
 800443a:	602b      	str	r3, [r5, #0]
 800443c:	e7d4      	b.n	80043e8 <_free_r+0x24>
 800443e:	6820      	ldr	r0, [r4, #0]
 8004440:	1821      	adds	r1, r4, r0
 8004442:	428b      	cmp	r3, r1
 8004444:	bf01      	itttt	eq
 8004446:	6819      	ldreq	r1, [r3, #0]
 8004448:	685b      	ldreq	r3, [r3, #4]
 800444a:	1809      	addeq	r1, r1, r0
 800444c:	6021      	streq	r1, [r4, #0]
 800444e:	6063      	str	r3, [r4, #4]
 8004450:	6054      	str	r4, [r2, #4]
 8004452:	e7c9      	b.n	80043e8 <_free_r+0x24>
 8004454:	bd38      	pop	{r3, r4, r5, pc}
 8004456:	bf00      	nop
 8004458:	20000408 	.word	0x20000408

0800445c <__sfputc_r>:
 800445c:	6893      	ldr	r3, [r2, #8]
 800445e:	b410      	push	{r4}
 8004460:	3b01      	subs	r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	6093      	str	r3, [r2, #8]
 8004466:	da07      	bge.n	8004478 <__sfputc_r+0x1c>
 8004468:	6994      	ldr	r4, [r2, #24]
 800446a:	42a3      	cmp	r3, r4
 800446c:	db01      	blt.n	8004472 <__sfputc_r+0x16>
 800446e:	290a      	cmp	r1, #10
 8004470:	d102      	bne.n	8004478 <__sfputc_r+0x1c>
 8004472:	bc10      	pop	{r4}
 8004474:	f000 bae0 	b.w	8004a38 <__swbuf_r>
 8004478:	6813      	ldr	r3, [r2, #0]
 800447a:	1c58      	adds	r0, r3, #1
 800447c:	6010      	str	r0, [r2, #0]
 800447e:	7019      	strb	r1, [r3, #0]
 8004480:	4608      	mov	r0, r1
 8004482:	bc10      	pop	{r4}
 8004484:	4770      	bx	lr

08004486 <__sfputs_r>:
 8004486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004488:	4606      	mov	r6, r0
 800448a:	460f      	mov	r7, r1
 800448c:	4614      	mov	r4, r2
 800448e:	18d5      	adds	r5, r2, r3
 8004490:	42ac      	cmp	r4, r5
 8004492:	d101      	bne.n	8004498 <__sfputs_r+0x12>
 8004494:	2000      	movs	r0, #0
 8004496:	e007      	b.n	80044a8 <__sfputs_r+0x22>
 8004498:	463a      	mov	r2, r7
 800449a:	4630      	mov	r0, r6
 800449c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a0:	f7ff ffdc 	bl	800445c <__sfputc_r>
 80044a4:	1c43      	adds	r3, r0, #1
 80044a6:	d1f3      	bne.n	8004490 <__sfputs_r+0xa>
 80044a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044ac <_vfiprintf_r>:
 80044ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b0:	460d      	mov	r5, r1
 80044b2:	4614      	mov	r4, r2
 80044b4:	4698      	mov	r8, r3
 80044b6:	4606      	mov	r6, r0
 80044b8:	b09d      	sub	sp, #116	; 0x74
 80044ba:	b118      	cbz	r0, 80044c4 <_vfiprintf_r+0x18>
 80044bc:	6983      	ldr	r3, [r0, #24]
 80044be:	b90b      	cbnz	r3, 80044c4 <_vfiprintf_r+0x18>
 80044c0:	f000 fc9c 	bl	8004dfc <__sinit>
 80044c4:	4b89      	ldr	r3, [pc, #548]	; (80046ec <_vfiprintf_r+0x240>)
 80044c6:	429d      	cmp	r5, r3
 80044c8:	d11b      	bne.n	8004502 <_vfiprintf_r+0x56>
 80044ca:	6875      	ldr	r5, [r6, #4]
 80044cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044ce:	07d9      	lsls	r1, r3, #31
 80044d0:	d405      	bmi.n	80044de <_vfiprintf_r+0x32>
 80044d2:	89ab      	ldrh	r3, [r5, #12]
 80044d4:	059a      	lsls	r2, r3, #22
 80044d6:	d402      	bmi.n	80044de <_vfiprintf_r+0x32>
 80044d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044da:	f000 fd2d 	bl	8004f38 <__retarget_lock_acquire_recursive>
 80044de:	89ab      	ldrh	r3, [r5, #12]
 80044e0:	071b      	lsls	r3, r3, #28
 80044e2:	d501      	bpl.n	80044e8 <_vfiprintf_r+0x3c>
 80044e4:	692b      	ldr	r3, [r5, #16]
 80044e6:	b9eb      	cbnz	r3, 8004524 <_vfiprintf_r+0x78>
 80044e8:	4629      	mov	r1, r5
 80044ea:	4630      	mov	r0, r6
 80044ec:	f000 faf6 	bl	8004adc <__swsetup_r>
 80044f0:	b1c0      	cbz	r0, 8004524 <_vfiprintf_r+0x78>
 80044f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044f4:	07dc      	lsls	r4, r3, #31
 80044f6:	d50e      	bpl.n	8004516 <_vfiprintf_r+0x6a>
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	b01d      	add	sp, #116	; 0x74
 80044fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004502:	4b7b      	ldr	r3, [pc, #492]	; (80046f0 <_vfiprintf_r+0x244>)
 8004504:	429d      	cmp	r5, r3
 8004506:	d101      	bne.n	800450c <_vfiprintf_r+0x60>
 8004508:	68b5      	ldr	r5, [r6, #8]
 800450a:	e7df      	b.n	80044cc <_vfiprintf_r+0x20>
 800450c:	4b79      	ldr	r3, [pc, #484]	; (80046f4 <_vfiprintf_r+0x248>)
 800450e:	429d      	cmp	r5, r3
 8004510:	bf08      	it	eq
 8004512:	68f5      	ldreq	r5, [r6, #12]
 8004514:	e7da      	b.n	80044cc <_vfiprintf_r+0x20>
 8004516:	89ab      	ldrh	r3, [r5, #12]
 8004518:	0598      	lsls	r0, r3, #22
 800451a:	d4ed      	bmi.n	80044f8 <_vfiprintf_r+0x4c>
 800451c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800451e:	f000 fd0c 	bl	8004f3a <__retarget_lock_release_recursive>
 8004522:	e7e9      	b.n	80044f8 <_vfiprintf_r+0x4c>
 8004524:	2300      	movs	r3, #0
 8004526:	9309      	str	r3, [sp, #36]	; 0x24
 8004528:	2320      	movs	r3, #32
 800452a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800452e:	2330      	movs	r3, #48	; 0x30
 8004530:	f04f 0901 	mov.w	r9, #1
 8004534:	f8cd 800c 	str.w	r8, [sp, #12]
 8004538:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80046f8 <_vfiprintf_r+0x24c>
 800453c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004540:	4623      	mov	r3, r4
 8004542:	469a      	mov	sl, r3
 8004544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004548:	b10a      	cbz	r2, 800454e <_vfiprintf_r+0xa2>
 800454a:	2a25      	cmp	r2, #37	; 0x25
 800454c:	d1f9      	bne.n	8004542 <_vfiprintf_r+0x96>
 800454e:	ebba 0b04 	subs.w	fp, sl, r4
 8004552:	d00b      	beq.n	800456c <_vfiprintf_r+0xc0>
 8004554:	465b      	mov	r3, fp
 8004556:	4622      	mov	r2, r4
 8004558:	4629      	mov	r1, r5
 800455a:	4630      	mov	r0, r6
 800455c:	f7ff ff93 	bl	8004486 <__sfputs_r>
 8004560:	3001      	adds	r0, #1
 8004562:	f000 80aa 	beq.w	80046ba <_vfiprintf_r+0x20e>
 8004566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004568:	445a      	add	r2, fp
 800456a:	9209      	str	r2, [sp, #36]	; 0x24
 800456c:	f89a 3000 	ldrb.w	r3, [sl]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80a2 	beq.w	80046ba <_vfiprintf_r+0x20e>
 8004576:	2300      	movs	r3, #0
 8004578:	f04f 32ff 	mov.w	r2, #4294967295
 800457c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004580:	f10a 0a01 	add.w	sl, sl, #1
 8004584:	9304      	str	r3, [sp, #16]
 8004586:	9307      	str	r3, [sp, #28]
 8004588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800458c:	931a      	str	r3, [sp, #104]	; 0x68
 800458e:	4654      	mov	r4, sl
 8004590:	2205      	movs	r2, #5
 8004592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004596:	4858      	ldr	r0, [pc, #352]	; (80046f8 <_vfiprintf_r+0x24c>)
 8004598:	f000 fd34 	bl	8005004 <memchr>
 800459c:	9a04      	ldr	r2, [sp, #16]
 800459e:	b9d8      	cbnz	r0, 80045d8 <_vfiprintf_r+0x12c>
 80045a0:	06d1      	lsls	r1, r2, #27
 80045a2:	bf44      	itt	mi
 80045a4:	2320      	movmi	r3, #32
 80045a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045aa:	0713      	lsls	r3, r2, #28
 80045ac:	bf44      	itt	mi
 80045ae:	232b      	movmi	r3, #43	; 0x2b
 80045b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045b4:	f89a 3000 	ldrb.w	r3, [sl]
 80045b8:	2b2a      	cmp	r3, #42	; 0x2a
 80045ba:	d015      	beq.n	80045e8 <_vfiprintf_r+0x13c>
 80045bc:	4654      	mov	r4, sl
 80045be:	2000      	movs	r0, #0
 80045c0:	f04f 0c0a 	mov.w	ip, #10
 80045c4:	9a07      	ldr	r2, [sp, #28]
 80045c6:	4621      	mov	r1, r4
 80045c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045cc:	3b30      	subs	r3, #48	; 0x30
 80045ce:	2b09      	cmp	r3, #9
 80045d0:	d94e      	bls.n	8004670 <_vfiprintf_r+0x1c4>
 80045d2:	b1b0      	cbz	r0, 8004602 <_vfiprintf_r+0x156>
 80045d4:	9207      	str	r2, [sp, #28]
 80045d6:	e014      	b.n	8004602 <_vfiprintf_r+0x156>
 80045d8:	eba0 0308 	sub.w	r3, r0, r8
 80045dc:	fa09 f303 	lsl.w	r3, r9, r3
 80045e0:	4313      	orrs	r3, r2
 80045e2:	46a2      	mov	sl, r4
 80045e4:	9304      	str	r3, [sp, #16]
 80045e6:	e7d2      	b.n	800458e <_vfiprintf_r+0xe2>
 80045e8:	9b03      	ldr	r3, [sp, #12]
 80045ea:	1d19      	adds	r1, r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	9103      	str	r1, [sp, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bfbb      	ittet	lt
 80045f4:	425b      	neglt	r3, r3
 80045f6:	f042 0202 	orrlt.w	r2, r2, #2
 80045fa:	9307      	strge	r3, [sp, #28]
 80045fc:	9307      	strlt	r3, [sp, #28]
 80045fe:	bfb8      	it	lt
 8004600:	9204      	strlt	r2, [sp, #16]
 8004602:	7823      	ldrb	r3, [r4, #0]
 8004604:	2b2e      	cmp	r3, #46	; 0x2e
 8004606:	d10c      	bne.n	8004622 <_vfiprintf_r+0x176>
 8004608:	7863      	ldrb	r3, [r4, #1]
 800460a:	2b2a      	cmp	r3, #42	; 0x2a
 800460c:	d135      	bne.n	800467a <_vfiprintf_r+0x1ce>
 800460e:	9b03      	ldr	r3, [sp, #12]
 8004610:	3402      	adds	r4, #2
 8004612:	1d1a      	adds	r2, r3, #4
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	9203      	str	r2, [sp, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	bfb8      	it	lt
 800461c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004620:	9305      	str	r3, [sp, #20]
 8004622:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004708 <_vfiprintf_r+0x25c>
 8004626:	2203      	movs	r2, #3
 8004628:	4650      	mov	r0, sl
 800462a:	7821      	ldrb	r1, [r4, #0]
 800462c:	f000 fcea 	bl	8005004 <memchr>
 8004630:	b140      	cbz	r0, 8004644 <_vfiprintf_r+0x198>
 8004632:	2340      	movs	r3, #64	; 0x40
 8004634:	eba0 000a 	sub.w	r0, r0, sl
 8004638:	fa03 f000 	lsl.w	r0, r3, r0
 800463c:	9b04      	ldr	r3, [sp, #16]
 800463e:	3401      	adds	r4, #1
 8004640:	4303      	orrs	r3, r0
 8004642:	9304      	str	r3, [sp, #16]
 8004644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004648:	2206      	movs	r2, #6
 800464a:	482c      	ldr	r0, [pc, #176]	; (80046fc <_vfiprintf_r+0x250>)
 800464c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004650:	f000 fcd8 	bl	8005004 <memchr>
 8004654:	2800      	cmp	r0, #0
 8004656:	d03f      	beq.n	80046d8 <_vfiprintf_r+0x22c>
 8004658:	4b29      	ldr	r3, [pc, #164]	; (8004700 <_vfiprintf_r+0x254>)
 800465a:	bb1b      	cbnz	r3, 80046a4 <_vfiprintf_r+0x1f8>
 800465c:	9b03      	ldr	r3, [sp, #12]
 800465e:	3307      	adds	r3, #7
 8004660:	f023 0307 	bic.w	r3, r3, #7
 8004664:	3308      	adds	r3, #8
 8004666:	9303      	str	r3, [sp, #12]
 8004668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800466a:	443b      	add	r3, r7
 800466c:	9309      	str	r3, [sp, #36]	; 0x24
 800466e:	e767      	b.n	8004540 <_vfiprintf_r+0x94>
 8004670:	460c      	mov	r4, r1
 8004672:	2001      	movs	r0, #1
 8004674:	fb0c 3202 	mla	r2, ip, r2, r3
 8004678:	e7a5      	b.n	80045c6 <_vfiprintf_r+0x11a>
 800467a:	2300      	movs	r3, #0
 800467c:	f04f 0c0a 	mov.w	ip, #10
 8004680:	4619      	mov	r1, r3
 8004682:	3401      	adds	r4, #1
 8004684:	9305      	str	r3, [sp, #20]
 8004686:	4620      	mov	r0, r4
 8004688:	f810 2b01 	ldrb.w	r2, [r0], #1
 800468c:	3a30      	subs	r2, #48	; 0x30
 800468e:	2a09      	cmp	r2, #9
 8004690:	d903      	bls.n	800469a <_vfiprintf_r+0x1ee>
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0c5      	beq.n	8004622 <_vfiprintf_r+0x176>
 8004696:	9105      	str	r1, [sp, #20]
 8004698:	e7c3      	b.n	8004622 <_vfiprintf_r+0x176>
 800469a:	4604      	mov	r4, r0
 800469c:	2301      	movs	r3, #1
 800469e:	fb0c 2101 	mla	r1, ip, r1, r2
 80046a2:	e7f0      	b.n	8004686 <_vfiprintf_r+0x1da>
 80046a4:	ab03      	add	r3, sp, #12
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	462a      	mov	r2, r5
 80046aa:	4630      	mov	r0, r6
 80046ac:	4b15      	ldr	r3, [pc, #84]	; (8004704 <_vfiprintf_r+0x258>)
 80046ae:	a904      	add	r1, sp, #16
 80046b0:	f3af 8000 	nop.w
 80046b4:	4607      	mov	r7, r0
 80046b6:	1c78      	adds	r0, r7, #1
 80046b8:	d1d6      	bne.n	8004668 <_vfiprintf_r+0x1bc>
 80046ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046bc:	07d9      	lsls	r1, r3, #31
 80046be:	d405      	bmi.n	80046cc <_vfiprintf_r+0x220>
 80046c0:	89ab      	ldrh	r3, [r5, #12]
 80046c2:	059a      	lsls	r2, r3, #22
 80046c4:	d402      	bmi.n	80046cc <_vfiprintf_r+0x220>
 80046c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046c8:	f000 fc37 	bl	8004f3a <__retarget_lock_release_recursive>
 80046cc:	89ab      	ldrh	r3, [r5, #12]
 80046ce:	065b      	lsls	r3, r3, #25
 80046d0:	f53f af12 	bmi.w	80044f8 <_vfiprintf_r+0x4c>
 80046d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046d6:	e711      	b.n	80044fc <_vfiprintf_r+0x50>
 80046d8:	ab03      	add	r3, sp, #12
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	462a      	mov	r2, r5
 80046de:	4630      	mov	r0, r6
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <_vfiprintf_r+0x258>)
 80046e2:	a904      	add	r1, sp, #16
 80046e4:	f000 f882 	bl	80047ec <_printf_i>
 80046e8:	e7e4      	b.n	80046b4 <_vfiprintf_r+0x208>
 80046ea:	bf00      	nop
 80046ec:	0800573c 	.word	0x0800573c
 80046f0:	0800575c 	.word	0x0800575c
 80046f4:	0800571c 	.word	0x0800571c
 80046f8:	080056e8 	.word	0x080056e8
 80046fc:	080056f2 	.word	0x080056f2
 8004700:	00000000 	.word	0x00000000
 8004704:	08004487 	.word	0x08004487
 8004708:	080056ee 	.word	0x080056ee

0800470c <_printf_common>:
 800470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004710:	4616      	mov	r6, r2
 8004712:	4699      	mov	r9, r3
 8004714:	688a      	ldr	r2, [r1, #8]
 8004716:	690b      	ldr	r3, [r1, #16]
 8004718:	4607      	mov	r7, r0
 800471a:	4293      	cmp	r3, r2
 800471c:	bfb8      	it	lt
 800471e:	4613      	movlt	r3, r2
 8004720:	6033      	str	r3, [r6, #0]
 8004722:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004726:	460c      	mov	r4, r1
 8004728:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800472c:	b10a      	cbz	r2, 8004732 <_printf_common+0x26>
 800472e:	3301      	adds	r3, #1
 8004730:	6033      	str	r3, [r6, #0]
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	0699      	lsls	r1, r3, #26
 8004736:	bf42      	ittt	mi
 8004738:	6833      	ldrmi	r3, [r6, #0]
 800473a:	3302      	addmi	r3, #2
 800473c:	6033      	strmi	r3, [r6, #0]
 800473e:	6825      	ldr	r5, [r4, #0]
 8004740:	f015 0506 	ands.w	r5, r5, #6
 8004744:	d106      	bne.n	8004754 <_printf_common+0x48>
 8004746:	f104 0a19 	add.w	sl, r4, #25
 800474a:	68e3      	ldr	r3, [r4, #12]
 800474c:	6832      	ldr	r2, [r6, #0]
 800474e:	1a9b      	subs	r3, r3, r2
 8004750:	42ab      	cmp	r3, r5
 8004752:	dc28      	bgt.n	80047a6 <_printf_common+0x9a>
 8004754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004758:	1e13      	subs	r3, r2, #0
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	bf18      	it	ne
 800475e:	2301      	movne	r3, #1
 8004760:	0692      	lsls	r2, r2, #26
 8004762:	d42d      	bmi.n	80047c0 <_printf_common+0xb4>
 8004764:	4649      	mov	r1, r9
 8004766:	4638      	mov	r0, r7
 8004768:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800476c:	47c0      	blx	r8
 800476e:	3001      	adds	r0, #1
 8004770:	d020      	beq.n	80047b4 <_printf_common+0xa8>
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	68e5      	ldr	r5, [r4, #12]
 8004776:	f003 0306 	and.w	r3, r3, #6
 800477a:	2b04      	cmp	r3, #4
 800477c:	bf18      	it	ne
 800477e:	2500      	movne	r5, #0
 8004780:	6832      	ldr	r2, [r6, #0]
 8004782:	f04f 0600 	mov.w	r6, #0
 8004786:	68a3      	ldr	r3, [r4, #8]
 8004788:	bf08      	it	eq
 800478a:	1aad      	subeq	r5, r5, r2
 800478c:	6922      	ldr	r2, [r4, #16]
 800478e:	bf08      	it	eq
 8004790:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004794:	4293      	cmp	r3, r2
 8004796:	bfc4      	itt	gt
 8004798:	1a9b      	subgt	r3, r3, r2
 800479a:	18ed      	addgt	r5, r5, r3
 800479c:	341a      	adds	r4, #26
 800479e:	42b5      	cmp	r5, r6
 80047a0:	d11a      	bne.n	80047d8 <_printf_common+0xcc>
 80047a2:	2000      	movs	r0, #0
 80047a4:	e008      	b.n	80047b8 <_printf_common+0xac>
 80047a6:	2301      	movs	r3, #1
 80047a8:	4652      	mov	r2, sl
 80047aa:	4649      	mov	r1, r9
 80047ac:	4638      	mov	r0, r7
 80047ae:	47c0      	blx	r8
 80047b0:	3001      	adds	r0, #1
 80047b2:	d103      	bne.n	80047bc <_printf_common+0xb0>
 80047b4:	f04f 30ff 	mov.w	r0, #4294967295
 80047b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047bc:	3501      	adds	r5, #1
 80047be:	e7c4      	b.n	800474a <_printf_common+0x3e>
 80047c0:	2030      	movs	r0, #48	; 0x30
 80047c2:	18e1      	adds	r1, r4, r3
 80047c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047ce:	4422      	add	r2, r4
 80047d0:	3302      	adds	r3, #2
 80047d2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047d6:	e7c5      	b.n	8004764 <_printf_common+0x58>
 80047d8:	2301      	movs	r3, #1
 80047da:	4622      	mov	r2, r4
 80047dc:	4649      	mov	r1, r9
 80047de:	4638      	mov	r0, r7
 80047e0:	47c0      	blx	r8
 80047e2:	3001      	adds	r0, #1
 80047e4:	d0e6      	beq.n	80047b4 <_printf_common+0xa8>
 80047e6:	3601      	adds	r6, #1
 80047e8:	e7d9      	b.n	800479e <_printf_common+0x92>
	...

080047ec <_printf_i>:
 80047ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047f0:	460c      	mov	r4, r1
 80047f2:	7e27      	ldrb	r7, [r4, #24]
 80047f4:	4691      	mov	r9, r2
 80047f6:	2f78      	cmp	r7, #120	; 0x78
 80047f8:	4680      	mov	r8, r0
 80047fa:	469a      	mov	sl, r3
 80047fc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004802:	d807      	bhi.n	8004814 <_printf_i+0x28>
 8004804:	2f62      	cmp	r7, #98	; 0x62
 8004806:	d80a      	bhi.n	800481e <_printf_i+0x32>
 8004808:	2f00      	cmp	r7, #0
 800480a:	f000 80d9 	beq.w	80049c0 <_printf_i+0x1d4>
 800480e:	2f58      	cmp	r7, #88	; 0x58
 8004810:	f000 80a4 	beq.w	800495c <_printf_i+0x170>
 8004814:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004818:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800481c:	e03a      	b.n	8004894 <_printf_i+0xa8>
 800481e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004822:	2b15      	cmp	r3, #21
 8004824:	d8f6      	bhi.n	8004814 <_printf_i+0x28>
 8004826:	a001      	add	r0, pc, #4	; (adr r0, 800482c <_printf_i+0x40>)
 8004828:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800482c:	08004885 	.word	0x08004885
 8004830:	08004899 	.word	0x08004899
 8004834:	08004815 	.word	0x08004815
 8004838:	08004815 	.word	0x08004815
 800483c:	08004815 	.word	0x08004815
 8004840:	08004815 	.word	0x08004815
 8004844:	08004899 	.word	0x08004899
 8004848:	08004815 	.word	0x08004815
 800484c:	08004815 	.word	0x08004815
 8004850:	08004815 	.word	0x08004815
 8004854:	08004815 	.word	0x08004815
 8004858:	080049a7 	.word	0x080049a7
 800485c:	080048c9 	.word	0x080048c9
 8004860:	08004989 	.word	0x08004989
 8004864:	08004815 	.word	0x08004815
 8004868:	08004815 	.word	0x08004815
 800486c:	080049c9 	.word	0x080049c9
 8004870:	08004815 	.word	0x08004815
 8004874:	080048c9 	.word	0x080048c9
 8004878:	08004815 	.word	0x08004815
 800487c:	08004815 	.word	0x08004815
 8004880:	08004991 	.word	0x08004991
 8004884:	680b      	ldr	r3, [r1, #0]
 8004886:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800488a:	1d1a      	adds	r2, r3, #4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	600a      	str	r2, [r1, #0]
 8004890:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004894:	2301      	movs	r3, #1
 8004896:	e0a4      	b.n	80049e2 <_printf_i+0x1f6>
 8004898:	6825      	ldr	r5, [r4, #0]
 800489a:	6808      	ldr	r0, [r1, #0]
 800489c:	062e      	lsls	r6, r5, #24
 800489e:	f100 0304 	add.w	r3, r0, #4
 80048a2:	d50a      	bpl.n	80048ba <_printf_i+0xce>
 80048a4:	6805      	ldr	r5, [r0, #0]
 80048a6:	600b      	str	r3, [r1, #0]
 80048a8:	2d00      	cmp	r5, #0
 80048aa:	da03      	bge.n	80048b4 <_printf_i+0xc8>
 80048ac:	232d      	movs	r3, #45	; 0x2d
 80048ae:	426d      	negs	r5, r5
 80048b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048b4:	230a      	movs	r3, #10
 80048b6:	485e      	ldr	r0, [pc, #376]	; (8004a30 <_printf_i+0x244>)
 80048b8:	e019      	b.n	80048ee <_printf_i+0x102>
 80048ba:	f015 0f40 	tst.w	r5, #64	; 0x40
 80048be:	6805      	ldr	r5, [r0, #0]
 80048c0:	600b      	str	r3, [r1, #0]
 80048c2:	bf18      	it	ne
 80048c4:	b22d      	sxthne	r5, r5
 80048c6:	e7ef      	b.n	80048a8 <_printf_i+0xbc>
 80048c8:	680b      	ldr	r3, [r1, #0]
 80048ca:	6825      	ldr	r5, [r4, #0]
 80048cc:	1d18      	adds	r0, r3, #4
 80048ce:	6008      	str	r0, [r1, #0]
 80048d0:	0628      	lsls	r0, r5, #24
 80048d2:	d501      	bpl.n	80048d8 <_printf_i+0xec>
 80048d4:	681d      	ldr	r5, [r3, #0]
 80048d6:	e002      	b.n	80048de <_printf_i+0xf2>
 80048d8:	0669      	lsls	r1, r5, #25
 80048da:	d5fb      	bpl.n	80048d4 <_printf_i+0xe8>
 80048dc:	881d      	ldrh	r5, [r3, #0]
 80048de:	2f6f      	cmp	r7, #111	; 0x6f
 80048e0:	bf0c      	ite	eq
 80048e2:	2308      	moveq	r3, #8
 80048e4:	230a      	movne	r3, #10
 80048e6:	4852      	ldr	r0, [pc, #328]	; (8004a30 <_printf_i+0x244>)
 80048e8:	2100      	movs	r1, #0
 80048ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ee:	6866      	ldr	r6, [r4, #4]
 80048f0:	2e00      	cmp	r6, #0
 80048f2:	bfa8      	it	ge
 80048f4:	6821      	ldrge	r1, [r4, #0]
 80048f6:	60a6      	str	r6, [r4, #8]
 80048f8:	bfa4      	itt	ge
 80048fa:	f021 0104 	bicge.w	r1, r1, #4
 80048fe:	6021      	strge	r1, [r4, #0]
 8004900:	b90d      	cbnz	r5, 8004906 <_printf_i+0x11a>
 8004902:	2e00      	cmp	r6, #0
 8004904:	d04d      	beq.n	80049a2 <_printf_i+0x1b6>
 8004906:	4616      	mov	r6, r2
 8004908:	fbb5 f1f3 	udiv	r1, r5, r3
 800490c:	fb03 5711 	mls	r7, r3, r1, r5
 8004910:	5dc7      	ldrb	r7, [r0, r7]
 8004912:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004916:	462f      	mov	r7, r5
 8004918:	42bb      	cmp	r3, r7
 800491a:	460d      	mov	r5, r1
 800491c:	d9f4      	bls.n	8004908 <_printf_i+0x11c>
 800491e:	2b08      	cmp	r3, #8
 8004920:	d10b      	bne.n	800493a <_printf_i+0x14e>
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	07df      	lsls	r7, r3, #31
 8004926:	d508      	bpl.n	800493a <_printf_i+0x14e>
 8004928:	6923      	ldr	r3, [r4, #16]
 800492a:	6861      	ldr	r1, [r4, #4]
 800492c:	4299      	cmp	r1, r3
 800492e:	bfde      	ittt	le
 8004930:	2330      	movle	r3, #48	; 0x30
 8004932:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004936:	f106 36ff 	addle.w	r6, r6, #4294967295
 800493a:	1b92      	subs	r2, r2, r6
 800493c:	6122      	str	r2, [r4, #16]
 800493e:	464b      	mov	r3, r9
 8004940:	4621      	mov	r1, r4
 8004942:	4640      	mov	r0, r8
 8004944:	f8cd a000 	str.w	sl, [sp]
 8004948:	aa03      	add	r2, sp, #12
 800494a:	f7ff fedf 	bl	800470c <_printf_common>
 800494e:	3001      	adds	r0, #1
 8004950:	d14c      	bne.n	80049ec <_printf_i+0x200>
 8004952:	f04f 30ff 	mov.w	r0, #4294967295
 8004956:	b004      	add	sp, #16
 8004958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495c:	4834      	ldr	r0, [pc, #208]	; (8004a30 <_printf_i+0x244>)
 800495e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004962:	680e      	ldr	r6, [r1, #0]
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	f856 5b04 	ldr.w	r5, [r6], #4
 800496a:	061f      	lsls	r7, r3, #24
 800496c:	600e      	str	r6, [r1, #0]
 800496e:	d514      	bpl.n	800499a <_printf_i+0x1ae>
 8004970:	07d9      	lsls	r1, r3, #31
 8004972:	bf44      	itt	mi
 8004974:	f043 0320 	orrmi.w	r3, r3, #32
 8004978:	6023      	strmi	r3, [r4, #0]
 800497a:	b91d      	cbnz	r5, 8004984 <_printf_i+0x198>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	f023 0320 	bic.w	r3, r3, #32
 8004982:	6023      	str	r3, [r4, #0]
 8004984:	2310      	movs	r3, #16
 8004986:	e7af      	b.n	80048e8 <_printf_i+0xfc>
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	f043 0320 	orr.w	r3, r3, #32
 800498e:	6023      	str	r3, [r4, #0]
 8004990:	2378      	movs	r3, #120	; 0x78
 8004992:	4828      	ldr	r0, [pc, #160]	; (8004a34 <_printf_i+0x248>)
 8004994:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004998:	e7e3      	b.n	8004962 <_printf_i+0x176>
 800499a:	065e      	lsls	r6, r3, #25
 800499c:	bf48      	it	mi
 800499e:	b2ad      	uxthmi	r5, r5
 80049a0:	e7e6      	b.n	8004970 <_printf_i+0x184>
 80049a2:	4616      	mov	r6, r2
 80049a4:	e7bb      	b.n	800491e <_printf_i+0x132>
 80049a6:	680b      	ldr	r3, [r1, #0]
 80049a8:	6826      	ldr	r6, [r4, #0]
 80049aa:	1d1d      	adds	r5, r3, #4
 80049ac:	6960      	ldr	r0, [r4, #20]
 80049ae:	600d      	str	r5, [r1, #0]
 80049b0:	0635      	lsls	r5, r6, #24
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	d501      	bpl.n	80049ba <_printf_i+0x1ce>
 80049b6:	6018      	str	r0, [r3, #0]
 80049b8:	e002      	b.n	80049c0 <_printf_i+0x1d4>
 80049ba:	0671      	lsls	r1, r6, #25
 80049bc:	d5fb      	bpl.n	80049b6 <_printf_i+0x1ca>
 80049be:	8018      	strh	r0, [r3, #0]
 80049c0:	2300      	movs	r3, #0
 80049c2:	4616      	mov	r6, r2
 80049c4:	6123      	str	r3, [r4, #16]
 80049c6:	e7ba      	b.n	800493e <_printf_i+0x152>
 80049c8:	680b      	ldr	r3, [r1, #0]
 80049ca:	1d1a      	adds	r2, r3, #4
 80049cc:	600a      	str	r2, [r1, #0]
 80049ce:	681e      	ldr	r6, [r3, #0]
 80049d0:	2100      	movs	r1, #0
 80049d2:	4630      	mov	r0, r6
 80049d4:	6862      	ldr	r2, [r4, #4]
 80049d6:	f000 fb15 	bl	8005004 <memchr>
 80049da:	b108      	cbz	r0, 80049e0 <_printf_i+0x1f4>
 80049dc:	1b80      	subs	r0, r0, r6
 80049de:	6060      	str	r0, [r4, #4]
 80049e0:	6863      	ldr	r3, [r4, #4]
 80049e2:	6123      	str	r3, [r4, #16]
 80049e4:	2300      	movs	r3, #0
 80049e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049ea:	e7a8      	b.n	800493e <_printf_i+0x152>
 80049ec:	4632      	mov	r2, r6
 80049ee:	4649      	mov	r1, r9
 80049f0:	4640      	mov	r0, r8
 80049f2:	6923      	ldr	r3, [r4, #16]
 80049f4:	47d0      	blx	sl
 80049f6:	3001      	adds	r0, #1
 80049f8:	d0ab      	beq.n	8004952 <_printf_i+0x166>
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	079b      	lsls	r3, r3, #30
 80049fe:	d413      	bmi.n	8004a28 <_printf_i+0x23c>
 8004a00:	68e0      	ldr	r0, [r4, #12]
 8004a02:	9b03      	ldr	r3, [sp, #12]
 8004a04:	4298      	cmp	r0, r3
 8004a06:	bfb8      	it	lt
 8004a08:	4618      	movlt	r0, r3
 8004a0a:	e7a4      	b.n	8004956 <_printf_i+0x16a>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	4632      	mov	r2, r6
 8004a10:	4649      	mov	r1, r9
 8004a12:	4640      	mov	r0, r8
 8004a14:	47d0      	blx	sl
 8004a16:	3001      	adds	r0, #1
 8004a18:	d09b      	beq.n	8004952 <_printf_i+0x166>
 8004a1a:	3501      	adds	r5, #1
 8004a1c:	68e3      	ldr	r3, [r4, #12]
 8004a1e:	9903      	ldr	r1, [sp, #12]
 8004a20:	1a5b      	subs	r3, r3, r1
 8004a22:	42ab      	cmp	r3, r5
 8004a24:	dcf2      	bgt.n	8004a0c <_printf_i+0x220>
 8004a26:	e7eb      	b.n	8004a00 <_printf_i+0x214>
 8004a28:	2500      	movs	r5, #0
 8004a2a:	f104 0619 	add.w	r6, r4, #25
 8004a2e:	e7f5      	b.n	8004a1c <_printf_i+0x230>
 8004a30:	080056f9 	.word	0x080056f9
 8004a34:	0800570a 	.word	0x0800570a

08004a38 <__swbuf_r>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	460e      	mov	r6, r1
 8004a3c:	4614      	mov	r4, r2
 8004a3e:	4605      	mov	r5, r0
 8004a40:	b118      	cbz	r0, 8004a4a <__swbuf_r+0x12>
 8004a42:	6983      	ldr	r3, [r0, #24]
 8004a44:	b90b      	cbnz	r3, 8004a4a <__swbuf_r+0x12>
 8004a46:	f000 f9d9 	bl	8004dfc <__sinit>
 8004a4a:	4b21      	ldr	r3, [pc, #132]	; (8004ad0 <__swbuf_r+0x98>)
 8004a4c:	429c      	cmp	r4, r3
 8004a4e:	d12b      	bne.n	8004aa8 <__swbuf_r+0x70>
 8004a50:	686c      	ldr	r4, [r5, #4]
 8004a52:	69a3      	ldr	r3, [r4, #24]
 8004a54:	60a3      	str	r3, [r4, #8]
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	071a      	lsls	r2, r3, #28
 8004a5a:	d52f      	bpl.n	8004abc <__swbuf_r+0x84>
 8004a5c:	6923      	ldr	r3, [r4, #16]
 8004a5e:	b36b      	cbz	r3, 8004abc <__swbuf_r+0x84>
 8004a60:	6923      	ldr	r3, [r4, #16]
 8004a62:	6820      	ldr	r0, [r4, #0]
 8004a64:	b2f6      	uxtb	r6, r6
 8004a66:	1ac0      	subs	r0, r0, r3
 8004a68:	6963      	ldr	r3, [r4, #20]
 8004a6a:	4637      	mov	r7, r6
 8004a6c:	4283      	cmp	r3, r0
 8004a6e:	dc04      	bgt.n	8004a7a <__swbuf_r+0x42>
 8004a70:	4621      	mov	r1, r4
 8004a72:	4628      	mov	r0, r5
 8004a74:	f000 f92e 	bl	8004cd4 <_fflush_r>
 8004a78:	bb30      	cbnz	r0, 8004ac8 <__swbuf_r+0x90>
 8004a7a:	68a3      	ldr	r3, [r4, #8]
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	6022      	str	r2, [r4, #0]
 8004a88:	701e      	strb	r6, [r3, #0]
 8004a8a:	6963      	ldr	r3, [r4, #20]
 8004a8c:	4283      	cmp	r3, r0
 8004a8e:	d004      	beq.n	8004a9a <__swbuf_r+0x62>
 8004a90:	89a3      	ldrh	r3, [r4, #12]
 8004a92:	07db      	lsls	r3, r3, #31
 8004a94:	d506      	bpl.n	8004aa4 <__swbuf_r+0x6c>
 8004a96:	2e0a      	cmp	r6, #10
 8004a98:	d104      	bne.n	8004aa4 <__swbuf_r+0x6c>
 8004a9a:	4621      	mov	r1, r4
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f000 f919 	bl	8004cd4 <_fflush_r>
 8004aa2:	b988      	cbnz	r0, 8004ac8 <__swbuf_r+0x90>
 8004aa4:	4638      	mov	r0, r7
 8004aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aa8:	4b0a      	ldr	r3, [pc, #40]	; (8004ad4 <__swbuf_r+0x9c>)
 8004aaa:	429c      	cmp	r4, r3
 8004aac:	d101      	bne.n	8004ab2 <__swbuf_r+0x7a>
 8004aae:	68ac      	ldr	r4, [r5, #8]
 8004ab0:	e7cf      	b.n	8004a52 <__swbuf_r+0x1a>
 8004ab2:	4b09      	ldr	r3, [pc, #36]	; (8004ad8 <__swbuf_r+0xa0>)
 8004ab4:	429c      	cmp	r4, r3
 8004ab6:	bf08      	it	eq
 8004ab8:	68ec      	ldreq	r4, [r5, #12]
 8004aba:	e7ca      	b.n	8004a52 <__swbuf_r+0x1a>
 8004abc:	4621      	mov	r1, r4
 8004abe:	4628      	mov	r0, r5
 8004ac0:	f000 f80c 	bl	8004adc <__swsetup_r>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d0cb      	beq.n	8004a60 <__swbuf_r+0x28>
 8004ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8004acc:	e7ea      	b.n	8004aa4 <__swbuf_r+0x6c>
 8004ace:	bf00      	nop
 8004ad0:	0800573c 	.word	0x0800573c
 8004ad4:	0800575c 	.word	0x0800575c
 8004ad8:	0800571c 	.word	0x0800571c

08004adc <__swsetup_r>:
 8004adc:	4b32      	ldr	r3, [pc, #200]	; (8004ba8 <__swsetup_r+0xcc>)
 8004ade:	b570      	push	{r4, r5, r6, lr}
 8004ae0:	681d      	ldr	r5, [r3, #0]
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	b125      	cbz	r5, 8004af2 <__swsetup_r+0x16>
 8004ae8:	69ab      	ldr	r3, [r5, #24]
 8004aea:	b913      	cbnz	r3, 8004af2 <__swsetup_r+0x16>
 8004aec:	4628      	mov	r0, r5
 8004aee:	f000 f985 	bl	8004dfc <__sinit>
 8004af2:	4b2e      	ldr	r3, [pc, #184]	; (8004bac <__swsetup_r+0xd0>)
 8004af4:	429c      	cmp	r4, r3
 8004af6:	d10f      	bne.n	8004b18 <__swsetup_r+0x3c>
 8004af8:	686c      	ldr	r4, [r5, #4]
 8004afa:	89a3      	ldrh	r3, [r4, #12]
 8004afc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b00:	0719      	lsls	r1, r3, #28
 8004b02:	d42c      	bmi.n	8004b5e <__swsetup_r+0x82>
 8004b04:	06dd      	lsls	r5, r3, #27
 8004b06:	d411      	bmi.n	8004b2c <__swsetup_r+0x50>
 8004b08:	2309      	movs	r3, #9
 8004b0a:	6033      	str	r3, [r6, #0]
 8004b0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295
 8004b14:	81a3      	strh	r3, [r4, #12]
 8004b16:	e03e      	b.n	8004b96 <__swsetup_r+0xba>
 8004b18:	4b25      	ldr	r3, [pc, #148]	; (8004bb0 <__swsetup_r+0xd4>)
 8004b1a:	429c      	cmp	r4, r3
 8004b1c:	d101      	bne.n	8004b22 <__swsetup_r+0x46>
 8004b1e:	68ac      	ldr	r4, [r5, #8]
 8004b20:	e7eb      	b.n	8004afa <__swsetup_r+0x1e>
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <__swsetup_r+0xd8>)
 8004b24:	429c      	cmp	r4, r3
 8004b26:	bf08      	it	eq
 8004b28:	68ec      	ldreq	r4, [r5, #12]
 8004b2a:	e7e6      	b.n	8004afa <__swsetup_r+0x1e>
 8004b2c:	0758      	lsls	r0, r3, #29
 8004b2e:	d512      	bpl.n	8004b56 <__swsetup_r+0x7a>
 8004b30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b32:	b141      	cbz	r1, 8004b46 <__swsetup_r+0x6a>
 8004b34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	d002      	beq.n	8004b42 <__swsetup_r+0x66>
 8004b3c:	4630      	mov	r0, r6
 8004b3e:	f7ff fc41 	bl	80043c4 <_free_r>
 8004b42:	2300      	movs	r3, #0
 8004b44:	6363      	str	r3, [r4, #52]	; 0x34
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b4c:	81a3      	strh	r3, [r4, #12]
 8004b4e:	2300      	movs	r3, #0
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	6923      	ldr	r3, [r4, #16]
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	f043 0308 	orr.w	r3, r3, #8
 8004b5c:	81a3      	strh	r3, [r4, #12]
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	b94b      	cbnz	r3, 8004b76 <__swsetup_r+0x9a>
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b6c:	d003      	beq.n	8004b76 <__swsetup_r+0x9a>
 8004b6e:	4621      	mov	r1, r4
 8004b70:	4630      	mov	r0, r6
 8004b72:	f000 fa07 	bl	8004f84 <__smakebuf_r>
 8004b76:	89a0      	ldrh	r0, [r4, #12]
 8004b78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b7c:	f010 0301 	ands.w	r3, r0, #1
 8004b80:	d00a      	beq.n	8004b98 <__swsetup_r+0xbc>
 8004b82:	2300      	movs	r3, #0
 8004b84:	60a3      	str	r3, [r4, #8]
 8004b86:	6963      	ldr	r3, [r4, #20]
 8004b88:	425b      	negs	r3, r3
 8004b8a:	61a3      	str	r3, [r4, #24]
 8004b8c:	6923      	ldr	r3, [r4, #16]
 8004b8e:	b943      	cbnz	r3, 8004ba2 <__swsetup_r+0xc6>
 8004b90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b94:	d1ba      	bne.n	8004b0c <__swsetup_r+0x30>
 8004b96:	bd70      	pop	{r4, r5, r6, pc}
 8004b98:	0781      	lsls	r1, r0, #30
 8004b9a:	bf58      	it	pl
 8004b9c:	6963      	ldrpl	r3, [r4, #20]
 8004b9e:	60a3      	str	r3, [r4, #8]
 8004ba0:	e7f4      	b.n	8004b8c <__swsetup_r+0xb0>
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	e7f7      	b.n	8004b96 <__swsetup_r+0xba>
 8004ba6:	bf00      	nop
 8004ba8:	20000014 	.word	0x20000014
 8004bac:	0800573c 	.word	0x0800573c
 8004bb0:	0800575c 	.word	0x0800575c
 8004bb4:	0800571c 	.word	0x0800571c

08004bb8 <abort>:
 8004bb8:	2006      	movs	r0, #6
 8004bba:	b508      	push	{r3, lr}
 8004bbc:	f000 fa58 	bl	8005070 <raise>
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	f7fc fb25 	bl	8001210 <_exit>
	...

08004bc8 <__sflush_r>:
 8004bc8:	898a      	ldrh	r2, [r1, #12]
 8004bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bce:	4605      	mov	r5, r0
 8004bd0:	0710      	lsls	r0, r2, #28
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	d458      	bmi.n	8004c88 <__sflush_r+0xc0>
 8004bd6:	684b      	ldr	r3, [r1, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	dc05      	bgt.n	8004be8 <__sflush_r+0x20>
 8004bdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	dc02      	bgt.n	8004be8 <__sflush_r+0x20>
 8004be2:	2000      	movs	r0, #0
 8004be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	d0f9      	beq.n	8004be2 <__sflush_r+0x1a>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bf4:	682f      	ldr	r7, [r5, #0]
 8004bf6:	602b      	str	r3, [r5, #0]
 8004bf8:	d032      	beq.n	8004c60 <__sflush_r+0x98>
 8004bfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bfc:	89a3      	ldrh	r3, [r4, #12]
 8004bfe:	075a      	lsls	r2, r3, #29
 8004c00:	d505      	bpl.n	8004c0e <__sflush_r+0x46>
 8004c02:	6863      	ldr	r3, [r4, #4]
 8004c04:	1ac0      	subs	r0, r0, r3
 8004c06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c08:	b10b      	cbz	r3, 8004c0e <__sflush_r+0x46>
 8004c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c0c:	1ac0      	subs	r0, r0, r3
 8004c0e:	2300      	movs	r3, #0
 8004c10:	4602      	mov	r2, r0
 8004c12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c14:	4628      	mov	r0, r5
 8004c16:	6a21      	ldr	r1, [r4, #32]
 8004c18:	47b0      	blx	r6
 8004c1a:	1c43      	adds	r3, r0, #1
 8004c1c:	89a3      	ldrh	r3, [r4, #12]
 8004c1e:	d106      	bne.n	8004c2e <__sflush_r+0x66>
 8004c20:	6829      	ldr	r1, [r5, #0]
 8004c22:	291d      	cmp	r1, #29
 8004c24:	d82c      	bhi.n	8004c80 <__sflush_r+0xb8>
 8004c26:	4a2a      	ldr	r2, [pc, #168]	; (8004cd0 <__sflush_r+0x108>)
 8004c28:	40ca      	lsrs	r2, r1
 8004c2a:	07d6      	lsls	r6, r2, #31
 8004c2c:	d528      	bpl.n	8004c80 <__sflush_r+0xb8>
 8004c2e:	2200      	movs	r2, #0
 8004c30:	6062      	str	r2, [r4, #4]
 8004c32:	6922      	ldr	r2, [r4, #16]
 8004c34:	04d9      	lsls	r1, r3, #19
 8004c36:	6022      	str	r2, [r4, #0]
 8004c38:	d504      	bpl.n	8004c44 <__sflush_r+0x7c>
 8004c3a:	1c42      	adds	r2, r0, #1
 8004c3c:	d101      	bne.n	8004c42 <__sflush_r+0x7a>
 8004c3e:	682b      	ldr	r3, [r5, #0]
 8004c40:	b903      	cbnz	r3, 8004c44 <__sflush_r+0x7c>
 8004c42:	6560      	str	r0, [r4, #84]	; 0x54
 8004c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c46:	602f      	str	r7, [r5, #0]
 8004c48:	2900      	cmp	r1, #0
 8004c4a:	d0ca      	beq.n	8004be2 <__sflush_r+0x1a>
 8004c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c50:	4299      	cmp	r1, r3
 8004c52:	d002      	beq.n	8004c5a <__sflush_r+0x92>
 8004c54:	4628      	mov	r0, r5
 8004c56:	f7ff fbb5 	bl	80043c4 <_free_r>
 8004c5a:	2000      	movs	r0, #0
 8004c5c:	6360      	str	r0, [r4, #52]	; 0x34
 8004c5e:	e7c1      	b.n	8004be4 <__sflush_r+0x1c>
 8004c60:	6a21      	ldr	r1, [r4, #32]
 8004c62:	2301      	movs	r3, #1
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b0      	blx	r6
 8004c68:	1c41      	adds	r1, r0, #1
 8004c6a:	d1c7      	bne.n	8004bfc <__sflush_r+0x34>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d0c4      	beq.n	8004bfc <__sflush_r+0x34>
 8004c72:	2b1d      	cmp	r3, #29
 8004c74:	d001      	beq.n	8004c7a <__sflush_r+0xb2>
 8004c76:	2b16      	cmp	r3, #22
 8004c78:	d101      	bne.n	8004c7e <__sflush_r+0xb6>
 8004c7a:	602f      	str	r7, [r5, #0]
 8004c7c:	e7b1      	b.n	8004be2 <__sflush_r+0x1a>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	e7ad      	b.n	8004be4 <__sflush_r+0x1c>
 8004c88:	690f      	ldr	r7, [r1, #16]
 8004c8a:	2f00      	cmp	r7, #0
 8004c8c:	d0a9      	beq.n	8004be2 <__sflush_r+0x1a>
 8004c8e:	0793      	lsls	r3, r2, #30
 8004c90:	bf18      	it	ne
 8004c92:	2300      	movne	r3, #0
 8004c94:	680e      	ldr	r6, [r1, #0]
 8004c96:	bf08      	it	eq
 8004c98:	694b      	ldreq	r3, [r1, #20]
 8004c9a:	eba6 0807 	sub.w	r8, r6, r7
 8004c9e:	600f      	str	r7, [r1, #0]
 8004ca0:	608b      	str	r3, [r1, #8]
 8004ca2:	f1b8 0f00 	cmp.w	r8, #0
 8004ca6:	dd9c      	ble.n	8004be2 <__sflush_r+0x1a>
 8004ca8:	4643      	mov	r3, r8
 8004caa:	463a      	mov	r2, r7
 8004cac:	4628      	mov	r0, r5
 8004cae:	6a21      	ldr	r1, [r4, #32]
 8004cb0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004cb2:	47b0      	blx	r6
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	dc06      	bgt.n	8004cc6 <__sflush_r+0xfe>
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	f04f 30ff 	mov.w	r0, #4294967295
 8004cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cc2:	81a3      	strh	r3, [r4, #12]
 8004cc4:	e78e      	b.n	8004be4 <__sflush_r+0x1c>
 8004cc6:	4407      	add	r7, r0
 8004cc8:	eba8 0800 	sub.w	r8, r8, r0
 8004ccc:	e7e9      	b.n	8004ca2 <__sflush_r+0xda>
 8004cce:	bf00      	nop
 8004cd0:	20400001 	.word	0x20400001

08004cd4 <_fflush_r>:
 8004cd4:	b538      	push	{r3, r4, r5, lr}
 8004cd6:	690b      	ldr	r3, [r1, #16]
 8004cd8:	4605      	mov	r5, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	b913      	cbnz	r3, 8004ce4 <_fflush_r+0x10>
 8004cde:	2500      	movs	r5, #0
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	b118      	cbz	r0, 8004cee <_fflush_r+0x1a>
 8004ce6:	6983      	ldr	r3, [r0, #24]
 8004ce8:	b90b      	cbnz	r3, 8004cee <_fflush_r+0x1a>
 8004cea:	f000 f887 	bl	8004dfc <__sinit>
 8004cee:	4b14      	ldr	r3, [pc, #80]	; (8004d40 <_fflush_r+0x6c>)
 8004cf0:	429c      	cmp	r4, r3
 8004cf2:	d11b      	bne.n	8004d2c <_fflush_r+0x58>
 8004cf4:	686c      	ldr	r4, [r5, #4]
 8004cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0ef      	beq.n	8004cde <_fflush_r+0xa>
 8004cfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d00:	07d0      	lsls	r0, r2, #31
 8004d02:	d404      	bmi.n	8004d0e <_fflush_r+0x3a>
 8004d04:	0599      	lsls	r1, r3, #22
 8004d06:	d402      	bmi.n	8004d0e <_fflush_r+0x3a>
 8004d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d0a:	f000 f915 	bl	8004f38 <__retarget_lock_acquire_recursive>
 8004d0e:	4628      	mov	r0, r5
 8004d10:	4621      	mov	r1, r4
 8004d12:	f7ff ff59 	bl	8004bc8 <__sflush_r>
 8004d16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d18:	4605      	mov	r5, r0
 8004d1a:	07da      	lsls	r2, r3, #31
 8004d1c:	d4e0      	bmi.n	8004ce0 <_fflush_r+0xc>
 8004d1e:	89a3      	ldrh	r3, [r4, #12]
 8004d20:	059b      	lsls	r3, r3, #22
 8004d22:	d4dd      	bmi.n	8004ce0 <_fflush_r+0xc>
 8004d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d26:	f000 f908 	bl	8004f3a <__retarget_lock_release_recursive>
 8004d2a:	e7d9      	b.n	8004ce0 <_fflush_r+0xc>
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <_fflush_r+0x70>)
 8004d2e:	429c      	cmp	r4, r3
 8004d30:	d101      	bne.n	8004d36 <_fflush_r+0x62>
 8004d32:	68ac      	ldr	r4, [r5, #8]
 8004d34:	e7df      	b.n	8004cf6 <_fflush_r+0x22>
 8004d36:	4b04      	ldr	r3, [pc, #16]	; (8004d48 <_fflush_r+0x74>)
 8004d38:	429c      	cmp	r4, r3
 8004d3a:	bf08      	it	eq
 8004d3c:	68ec      	ldreq	r4, [r5, #12]
 8004d3e:	e7da      	b.n	8004cf6 <_fflush_r+0x22>
 8004d40:	0800573c 	.word	0x0800573c
 8004d44:	0800575c 	.word	0x0800575c
 8004d48:	0800571c 	.word	0x0800571c

08004d4c <std>:
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	b510      	push	{r4, lr}
 8004d50:	4604      	mov	r4, r0
 8004d52:	e9c0 3300 	strd	r3, r3, [r0]
 8004d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d5a:	6083      	str	r3, [r0, #8]
 8004d5c:	8181      	strh	r1, [r0, #12]
 8004d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8004d60:	81c2      	strh	r2, [r0, #14]
 8004d62:	6183      	str	r3, [r0, #24]
 8004d64:	4619      	mov	r1, r3
 8004d66:	2208      	movs	r2, #8
 8004d68:	305c      	adds	r0, #92	; 0x5c
 8004d6a:	f7fd fb4b 	bl	8002404 <memset>
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <std+0x38>)
 8004d70:	6224      	str	r4, [r4, #32]
 8004d72:	6263      	str	r3, [r4, #36]	; 0x24
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <std+0x3c>)
 8004d76:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d78:	4b04      	ldr	r3, [pc, #16]	; (8004d8c <std+0x40>)
 8004d7a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d7c:	4b04      	ldr	r3, [pc, #16]	; (8004d90 <std+0x44>)
 8004d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8004d80:	bd10      	pop	{r4, pc}
 8004d82:	bf00      	nop
 8004d84:	080050a9 	.word	0x080050a9
 8004d88:	080050cb 	.word	0x080050cb
 8004d8c:	08005103 	.word	0x08005103
 8004d90:	08005127 	.word	0x08005127

08004d94 <_cleanup_r>:
 8004d94:	4901      	ldr	r1, [pc, #4]	; (8004d9c <_cleanup_r+0x8>)
 8004d96:	f000 b8af 	b.w	8004ef8 <_fwalk_reent>
 8004d9a:	bf00      	nop
 8004d9c:	08004cd5 	.word	0x08004cd5

08004da0 <__sfmoreglue>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	2568      	movs	r5, #104	; 0x68
 8004da4:	1e4a      	subs	r2, r1, #1
 8004da6:	4355      	muls	r5, r2
 8004da8:	460e      	mov	r6, r1
 8004daa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dae:	f7ff fa35 	bl	800421c <_malloc_r>
 8004db2:	4604      	mov	r4, r0
 8004db4:	b140      	cbz	r0, 8004dc8 <__sfmoreglue+0x28>
 8004db6:	2100      	movs	r1, #0
 8004db8:	e9c0 1600 	strd	r1, r6, [r0]
 8004dbc:	300c      	adds	r0, #12
 8004dbe:	60a0      	str	r0, [r4, #8]
 8004dc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004dc4:	f7fd fb1e 	bl	8002404 <memset>
 8004dc8:	4620      	mov	r0, r4
 8004dca:	bd70      	pop	{r4, r5, r6, pc}

08004dcc <__sfp_lock_acquire>:
 8004dcc:	4801      	ldr	r0, [pc, #4]	; (8004dd4 <__sfp_lock_acquire+0x8>)
 8004dce:	f000 b8b3 	b.w	8004f38 <__retarget_lock_acquire_recursive>
 8004dd2:	bf00      	nop
 8004dd4:	20000460 	.word	0x20000460

08004dd8 <__sfp_lock_release>:
 8004dd8:	4801      	ldr	r0, [pc, #4]	; (8004de0 <__sfp_lock_release+0x8>)
 8004dda:	f000 b8ae 	b.w	8004f3a <__retarget_lock_release_recursive>
 8004dde:	bf00      	nop
 8004de0:	20000460 	.word	0x20000460

08004de4 <__sinit_lock_acquire>:
 8004de4:	4801      	ldr	r0, [pc, #4]	; (8004dec <__sinit_lock_acquire+0x8>)
 8004de6:	f000 b8a7 	b.w	8004f38 <__retarget_lock_acquire_recursive>
 8004dea:	bf00      	nop
 8004dec:	2000045b 	.word	0x2000045b

08004df0 <__sinit_lock_release>:
 8004df0:	4801      	ldr	r0, [pc, #4]	; (8004df8 <__sinit_lock_release+0x8>)
 8004df2:	f000 b8a2 	b.w	8004f3a <__retarget_lock_release_recursive>
 8004df6:	bf00      	nop
 8004df8:	2000045b 	.word	0x2000045b

08004dfc <__sinit>:
 8004dfc:	b510      	push	{r4, lr}
 8004dfe:	4604      	mov	r4, r0
 8004e00:	f7ff fff0 	bl	8004de4 <__sinit_lock_acquire>
 8004e04:	69a3      	ldr	r3, [r4, #24]
 8004e06:	b11b      	cbz	r3, 8004e10 <__sinit+0x14>
 8004e08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e0c:	f7ff bff0 	b.w	8004df0 <__sinit_lock_release>
 8004e10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004e14:	6523      	str	r3, [r4, #80]	; 0x50
 8004e16:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <__sinit+0x68>)
 8004e18:	4a13      	ldr	r2, [pc, #76]	; (8004e68 <__sinit+0x6c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	bf08      	it	eq
 8004e22:	2301      	moveq	r3, #1
 8004e24:	4620      	mov	r0, r4
 8004e26:	bf08      	it	eq
 8004e28:	61a3      	streq	r3, [r4, #24]
 8004e2a:	f000 f81f 	bl	8004e6c <__sfp>
 8004e2e:	6060      	str	r0, [r4, #4]
 8004e30:	4620      	mov	r0, r4
 8004e32:	f000 f81b 	bl	8004e6c <__sfp>
 8004e36:	60a0      	str	r0, [r4, #8]
 8004e38:	4620      	mov	r0, r4
 8004e3a:	f000 f817 	bl	8004e6c <__sfp>
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2104      	movs	r1, #4
 8004e42:	60e0      	str	r0, [r4, #12]
 8004e44:	6860      	ldr	r0, [r4, #4]
 8004e46:	f7ff ff81 	bl	8004d4c <std>
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2109      	movs	r1, #9
 8004e4e:	68a0      	ldr	r0, [r4, #8]
 8004e50:	f7ff ff7c 	bl	8004d4c <std>
 8004e54:	2202      	movs	r2, #2
 8004e56:	2112      	movs	r1, #18
 8004e58:	68e0      	ldr	r0, [r4, #12]
 8004e5a:	f7ff ff77 	bl	8004d4c <std>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	61a3      	str	r3, [r4, #24]
 8004e62:	e7d1      	b.n	8004e08 <__sinit+0xc>
 8004e64:	08005344 	.word	0x08005344
 8004e68:	08004d95 	.word	0x08004d95

08004e6c <__sfp>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	4607      	mov	r7, r0
 8004e70:	f7ff ffac 	bl	8004dcc <__sfp_lock_acquire>
 8004e74:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <__sfp+0x84>)
 8004e76:	681e      	ldr	r6, [r3, #0]
 8004e78:	69b3      	ldr	r3, [r6, #24]
 8004e7a:	b913      	cbnz	r3, 8004e82 <__sfp+0x16>
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	f7ff ffbd 	bl	8004dfc <__sinit>
 8004e82:	3648      	adds	r6, #72	; 0x48
 8004e84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	d503      	bpl.n	8004e94 <__sfp+0x28>
 8004e8c:	6833      	ldr	r3, [r6, #0]
 8004e8e:	b30b      	cbz	r3, 8004ed4 <__sfp+0x68>
 8004e90:	6836      	ldr	r6, [r6, #0]
 8004e92:	e7f7      	b.n	8004e84 <__sfp+0x18>
 8004e94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e98:	b9d5      	cbnz	r5, 8004ed0 <__sfp+0x64>
 8004e9a:	4b16      	ldr	r3, [pc, #88]	; (8004ef4 <__sfp+0x88>)
 8004e9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004ea0:	60e3      	str	r3, [r4, #12]
 8004ea2:	6665      	str	r5, [r4, #100]	; 0x64
 8004ea4:	f000 f847 	bl	8004f36 <__retarget_lock_init_recursive>
 8004ea8:	f7ff ff96 	bl	8004dd8 <__sfp_lock_release>
 8004eac:	2208      	movs	r2, #8
 8004eae:	4629      	mov	r1, r5
 8004eb0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004eb4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004eb8:	6025      	str	r5, [r4, #0]
 8004eba:	61a5      	str	r5, [r4, #24]
 8004ebc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ec0:	f7fd faa0 	bl	8002404 <memset>
 8004ec4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ec8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ecc:	4620      	mov	r0, r4
 8004ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed0:	3468      	adds	r4, #104	; 0x68
 8004ed2:	e7d9      	b.n	8004e88 <__sfp+0x1c>
 8004ed4:	2104      	movs	r1, #4
 8004ed6:	4638      	mov	r0, r7
 8004ed8:	f7ff ff62 	bl	8004da0 <__sfmoreglue>
 8004edc:	4604      	mov	r4, r0
 8004ede:	6030      	str	r0, [r6, #0]
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d1d5      	bne.n	8004e90 <__sfp+0x24>
 8004ee4:	f7ff ff78 	bl	8004dd8 <__sfp_lock_release>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	e7ee      	b.n	8004ecc <__sfp+0x60>
 8004eee:	bf00      	nop
 8004ef0:	08005344 	.word	0x08005344
 8004ef4:	ffff0001 	.word	0xffff0001

08004ef8 <_fwalk_reent>:
 8004ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004efc:	4606      	mov	r6, r0
 8004efe:	4688      	mov	r8, r1
 8004f00:	2700      	movs	r7, #0
 8004f02:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f0a:	f1b9 0901 	subs.w	r9, r9, #1
 8004f0e:	d505      	bpl.n	8004f1c <_fwalk_reent+0x24>
 8004f10:	6824      	ldr	r4, [r4, #0]
 8004f12:	2c00      	cmp	r4, #0
 8004f14:	d1f7      	bne.n	8004f06 <_fwalk_reent+0xe>
 8004f16:	4638      	mov	r0, r7
 8004f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f1c:	89ab      	ldrh	r3, [r5, #12]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d907      	bls.n	8004f32 <_fwalk_reent+0x3a>
 8004f22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f26:	3301      	adds	r3, #1
 8004f28:	d003      	beq.n	8004f32 <_fwalk_reent+0x3a>
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	47c0      	blx	r8
 8004f30:	4307      	orrs	r7, r0
 8004f32:	3568      	adds	r5, #104	; 0x68
 8004f34:	e7e9      	b.n	8004f0a <_fwalk_reent+0x12>

08004f36 <__retarget_lock_init_recursive>:
 8004f36:	4770      	bx	lr

08004f38 <__retarget_lock_acquire_recursive>:
 8004f38:	4770      	bx	lr

08004f3a <__retarget_lock_release_recursive>:
 8004f3a:	4770      	bx	lr

08004f3c <__swhatbuf_r>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	460e      	mov	r6, r1
 8004f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f44:	4614      	mov	r4, r2
 8004f46:	2900      	cmp	r1, #0
 8004f48:	461d      	mov	r5, r3
 8004f4a:	b096      	sub	sp, #88	; 0x58
 8004f4c:	da07      	bge.n	8004f5e <__swhatbuf_r+0x22>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	602b      	str	r3, [r5, #0]
 8004f52:	89b3      	ldrh	r3, [r6, #12]
 8004f54:	061a      	lsls	r2, r3, #24
 8004f56:	d410      	bmi.n	8004f7a <__swhatbuf_r+0x3e>
 8004f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f5c:	e00e      	b.n	8004f7c <__swhatbuf_r+0x40>
 8004f5e:	466a      	mov	r2, sp
 8004f60:	f000 f908 	bl	8005174 <_fstat_r>
 8004f64:	2800      	cmp	r0, #0
 8004f66:	dbf2      	blt.n	8004f4e <__swhatbuf_r+0x12>
 8004f68:	9a01      	ldr	r2, [sp, #4]
 8004f6a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f6e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f72:	425a      	negs	r2, r3
 8004f74:	415a      	adcs	r2, r3
 8004f76:	602a      	str	r2, [r5, #0]
 8004f78:	e7ee      	b.n	8004f58 <__swhatbuf_r+0x1c>
 8004f7a:	2340      	movs	r3, #64	; 0x40
 8004f7c:	2000      	movs	r0, #0
 8004f7e:	6023      	str	r3, [r4, #0]
 8004f80:	b016      	add	sp, #88	; 0x58
 8004f82:	bd70      	pop	{r4, r5, r6, pc}

08004f84 <__smakebuf_r>:
 8004f84:	898b      	ldrh	r3, [r1, #12]
 8004f86:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f88:	079d      	lsls	r5, r3, #30
 8004f8a:	4606      	mov	r6, r0
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	d507      	bpl.n	8004fa0 <__smakebuf_r+0x1c>
 8004f90:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	6123      	str	r3, [r4, #16]
 8004f98:	2301      	movs	r3, #1
 8004f9a:	6163      	str	r3, [r4, #20]
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
 8004fa0:	466a      	mov	r2, sp
 8004fa2:	ab01      	add	r3, sp, #4
 8004fa4:	f7ff ffca 	bl	8004f3c <__swhatbuf_r>
 8004fa8:	9900      	ldr	r1, [sp, #0]
 8004faa:	4605      	mov	r5, r0
 8004fac:	4630      	mov	r0, r6
 8004fae:	f7ff f935 	bl	800421c <_malloc_r>
 8004fb2:	b948      	cbnz	r0, 8004fc8 <__smakebuf_r+0x44>
 8004fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fb8:	059a      	lsls	r2, r3, #22
 8004fba:	d4ef      	bmi.n	8004f9c <__smakebuf_r+0x18>
 8004fbc:	f023 0303 	bic.w	r3, r3, #3
 8004fc0:	f043 0302 	orr.w	r3, r3, #2
 8004fc4:	81a3      	strh	r3, [r4, #12]
 8004fc6:	e7e3      	b.n	8004f90 <__smakebuf_r+0xc>
 8004fc8:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <__smakebuf_r+0x7c>)
 8004fca:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	6020      	str	r0, [r4, #0]
 8004fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd4:	81a3      	strh	r3, [r4, #12]
 8004fd6:	9b00      	ldr	r3, [sp, #0]
 8004fd8:	6120      	str	r0, [r4, #16]
 8004fda:	6163      	str	r3, [r4, #20]
 8004fdc:	9b01      	ldr	r3, [sp, #4]
 8004fde:	b15b      	cbz	r3, 8004ff8 <__smakebuf_r+0x74>
 8004fe0:	4630      	mov	r0, r6
 8004fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fe6:	f000 f8d7 	bl	8005198 <_isatty_r>
 8004fea:	b128      	cbz	r0, 8004ff8 <__smakebuf_r+0x74>
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	81a3      	strh	r3, [r4, #12]
 8004ff8:	89a0      	ldrh	r0, [r4, #12]
 8004ffa:	4305      	orrs	r5, r0
 8004ffc:	81a5      	strh	r5, [r4, #12]
 8004ffe:	e7cd      	b.n	8004f9c <__smakebuf_r+0x18>
 8005000:	08004d95 	.word	0x08004d95

08005004 <memchr>:
 8005004:	4603      	mov	r3, r0
 8005006:	b510      	push	{r4, lr}
 8005008:	b2c9      	uxtb	r1, r1
 800500a:	4402      	add	r2, r0
 800500c:	4293      	cmp	r3, r2
 800500e:	4618      	mov	r0, r3
 8005010:	d101      	bne.n	8005016 <memchr+0x12>
 8005012:	2000      	movs	r0, #0
 8005014:	e003      	b.n	800501e <memchr+0x1a>
 8005016:	7804      	ldrb	r4, [r0, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	428c      	cmp	r4, r1
 800501c:	d1f6      	bne.n	800500c <memchr+0x8>
 800501e:	bd10      	pop	{r4, pc}

08005020 <_raise_r>:
 8005020:	291f      	cmp	r1, #31
 8005022:	b538      	push	{r3, r4, r5, lr}
 8005024:	4604      	mov	r4, r0
 8005026:	460d      	mov	r5, r1
 8005028:	d904      	bls.n	8005034 <_raise_r+0x14>
 800502a:	2316      	movs	r3, #22
 800502c:	6003      	str	r3, [r0, #0]
 800502e:	f04f 30ff 	mov.w	r0, #4294967295
 8005032:	bd38      	pop	{r3, r4, r5, pc}
 8005034:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005036:	b112      	cbz	r2, 800503e <_raise_r+0x1e>
 8005038:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800503c:	b94b      	cbnz	r3, 8005052 <_raise_r+0x32>
 800503e:	4620      	mov	r0, r4
 8005040:	f000 f830 	bl	80050a4 <_getpid_r>
 8005044:	462a      	mov	r2, r5
 8005046:	4601      	mov	r1, r0
 8005048:	4620      	mov	r0, r4
 800504a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800504e:	f000 b817 	b.w	8005080 <_kill_r>
 8005052:	2b01      	cmp	r3, #1
 8005054:	d00a      	beq.n	800506c <_raise_r+0x4c>
 8005056:	1c59      	adds	r1, r3, #1
 8005058:	d103      	bne.n	8005062 <_raise_r+0x42>
 800505a:	2316      	movs	r3, #22
 800505c:	6003      	str	r3, [r0, #0]
 800505e:	2001      	movs	r0, #1
 8005060:	e7e7      	b.n	8005032 <_raise_r+0x12>
 8005062:	2400      	movs	r4, #0
 8005064:	4628      	mov	r0, r5
 8005066:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800506a:	4798      	blx	r3
 800506c:	2000      	movs	r0, #0
 800506e:	e7e0      	b.n	8005032 <_raise_r+0x12>

08005070 <raise>:
 8005070:	4b02      	ldr	r3, [pc, #8]	; (800507c <raise+0xc>)
 8005072:	4601      	mov	r1, r0
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	f7ff bfd3 	b.w	8005020 <_raise_r>
 800507a:	bf00      	nop
 800507c:	20000014 	.word	0x20000014

08005080 <_kill_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	2300      	movs	r3, #0
 8005084:	4d06      	ldr	r5, [pc, #24]	; (80050a0 <_kill_r+0x20>)
 8005086:	4604      	mov	r4, r0
 8005088:	4608      	mov	r0, r1
 800508a:	4611      	mov	r1, r2
 800508c:	602b      	str	r3, [r5, #0]
 800508e:	f7fc f8af 	bl	80011f0 <_kill>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	d102      	bne.n	800509c <_kill_r+0x1c>
 8005096:	682b      	ldr	r3, [r5, #0]
 8005098:	b103      	cbz	r3, 800509c <_kill_r+0x1c>
 800509a:	6023      	str	r3, [r4, #0]
 800509c:	bd38      	pop	{r3, r4, r5, pc}
 800509e:	bf00      	nop
 80050a0:	20000454 	.word	0x20000454

080050a4 <_getpid_r>:
 80050a4:	f7fc b89d 	b.w	80011e2 <_getpid>

080050a8 <__sread>:
 80050a8:	b510      	push	{r4, lr}
 80050aa:	460c      	mov	r4, r1
 80050ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050b0:	f000 f894 	bl	80051dc <_read_r>
 80050b4:	2800      	cmp	r0, #0
 80050b6:	bfab      	itete	ge
 80050b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050ba:	89a3      	ldrhlt	r3, [r4, #12]
 80050bc:	181b      	addge	r3, r3, r0
 80050be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050c2:	bfac      	ite	ge
 80050c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80050c6:	81a3      	strhlt	r3, [r4, #12]
 80050c8:	bd10      	pop	{r4, pc}

080050ca <__swrite>:
 80050ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ce:	461f      	mov	r7, r3
 80050d0:	898b      	ldrh	r3, [r1, #12]
 80050d2:	4605      	mov	r5, r0
 80050d4:	05db      	lsls	r3, r3, #23
 80050d6:	460c      	mov	r4, r1
 80050d8:	4616      	mov	r6, r2
 80050da:	d505      	bpl.n	80050e8 <__swrite+0x1e>
 80050dc:	2302      	movs	r3, #2
 80050de:	2200      	movs	r2, #0
 80050e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e4:	f000 f868 	bl	80051b8 <_lseek_r>
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	4632      	mov	r2, r6
 80050ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f0:	81a3      	strh	r3, [r4, #12]
 80050f2:	4628      	mov	r0, r5
 80050f4:	463b      	mov	r3, r7
 80050f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050fe:	f000 b817 	b.w	8005130 <_write_r>

08005102 <__sseek>:
 8005102:	b510      	push	{r4, lr}
 8005104:	460c      	mov	r4, r1
 8005106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510a:	f000 f855 	bl	80051b8 <_lseek_r>
 800510e:	1c43      	adds	r3, r0, #1
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	bf15      	itete	ne
 8005114:	6560      	strne	r0, [r4, #84]	; 0x54
 8005116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800511a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800511e:	81a3      	strheq	r3, [r4, #12]
 8005120:	bf18      	it	ne
 8005122:	81a3      	strhne	r3, [r4, #12]
 8005124:	bd10      	pop	{r4, pc}

08005126 <__sclose>:
 8005126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800512a:	f000 b813 	b.w	8005154 <_close_r>
	...

08005130 <_write_r>:
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	4604      	mov	r4, r0
 8005134:	4608      	mov	r0, r1
 8005136:	4611      	mov	r1, r2
 8005138:	2200      	movs	r2, #0
 800513a:	4d05      	ldr	r5, [pc, #20]	; (8005150 <_write_r+0x20>)
 800513c:	602a      	str	r2, [r5, #0]
 800513e:	461a      	mov	r2, r3
 8005140:	f7fc f88d 	bl	800125e <_write>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_write_r+0x1e>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	b103      	cbz	r3, 800514e <_write_r+0x1e>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	20000454 	.word	0x20000454

08005154 <_close_r>:
 8005154:	b538      	push	{r3, r4, r5, lr}
 8005156:	2300      	movs	r3, #0
 8005158:	4d05      	ldr	r5, [pc, #20]	; (8005170 <_close_r+0x1c>)
 800515a:	4604      	mov	r4, r0
 800515c:	4608      	mov	r0, r1
 800515e:	602b      	str	r3, [r5, #0]
 8005160:	f7fc f899 	bl	8001296 <_close>
 8005164:	1c43      	adds	r3, r0, #1
 8005166:	d102      	bne.n	800516e <_close_r+0x1a>
 8005168:	682b      	ldr	r3, [r5, #0]
 800516a:	b103      	cbz	r3, 800516e <_close_r+0x1a>
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	20000454 	.word	0x20000454

08005174 <_fstat_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	2300      	movs	r3, #0
 8005178:	4d06      	ldr	r5, [pc, #24]	; (8005194 <_fstat_r+0x20>)
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	4611      	mov	r1, r2
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	f7fc f893 	bl	80012ac <_fstat>
 8005186:	1c43      	adds	r3, r0, #1
 8005188:	d102      	bne.n	8005190 <_fstat_r+0x1c>
 800518a:	682b      	ldr	r3, [r5, #0]
 800518c:	b103      	cbz	r3, 8005190 <_fstat_r+0x1c>
 800518e:	6023      	str	r3, [r4, #0]
 8005190:	bd38      	pop	{r3, r4, r5, pc}
 8005192:	bf00      	nop
 8005194:	20000454 	.word	0x20000454

08005198 <_isatty_r>:
 8005198:	b538      	push	{r3, r4, r5, lr}
 800519a:	2300      	movs	r3, #0
 800519c:	4d05      	ldr	r5, [pc, #20]	; (80051b4 <_isatty_r+0x1c>)
 800519e:	4604      	mov	r4, r0
 80051a0:	4608      	mov	r0, r1
 80051a2:	602b      	str	r3, [r5, #0]
 80051a4:	f7fc f891 	bl	80012ca <_isatty>
 80051a8:	1c43      	adds	r3, r0, #1
 80051aa:	d102      	bne.n	80051b2 <_isatty_r+0x1a>
 80051ac:	682b      	ldr	r3, [r5, #0]
 80051ae:	b103      	cbz	r3, 80051b2 <_isatty_r+0x1a>
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	20000454 	.word	0x20000454

080051b8 <_lseek_r>:
 80051b8:	b538      	push	{r3, r4, r5, lr}
 80051ba:	4604      	mov	r4, r0
 80051bc:	4608      	mov	r0, r1
 80051be:	4611      	mov	r1, r2
 80051c0:	2200      	movs	r2, #0
 80051c2:	4d05      	ldr	r5, [pc, #20]	; (80051d8 <_lseek_r+0x20>)
 80051c4:	602a      	str	r2, [r5, #0]
 80051c6:	461a      	mov	r2, r3
 80051c8:	f7fc f889 	bl	80012de <_lseek>
 80051cc:	1c43      	adds	r3, r0, #1
 80051ce:	d102      	bne.n	80051d6 <_lseek_r+0x1e>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	b103      	cbz	r3, 80051d6 <_lseek_r+0x1e>
 80051d4:	6023      	str	r3, [r4, #0]
 80051d6:	bd38      	pop	{r3, r4, r5, pc}
 80051d8:	20000454 	.word	0x20000454

080051dc <_read_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	4604      	mov	r4, r0
 80051e0:	4608      	mov	r0, r1
 80051e2:	4611      	mov	r1, r2
 80051e4:	2200      	movs	r2, #0
 80051e6:	4d05      	ldr	r5, [pc, #20]	; (80051fc <_read_r+0x20>)
 80051e8:	602a      	str	r2, [r5, #0]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f7fc f81a 	bl	8001224 <_read>
 80051f0:	1c43      	adds	r3, r0, #1
 80051f2:	d102      	bne.n	80051fa <_read_r+0x1e>
 80051f4:	682b      	ldr	r3, [r5, #0]
 80051f6:	b103      	cbz	r3, 80051fa <_read_r+0x1e>
 80051f8:	6023      	str	r3, [r4, #0]
 80051fa:	bd38      	pop	{r3, r4, r5, pc}
 80051fc:	20000454 	.word	0x20000454

08005200 <_init>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr

0800520c <_fini>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr
