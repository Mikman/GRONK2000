
I2C_kamera_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005510  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e4  080056e4  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056ec  080056ec  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056ec  080056ec  000156ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056f0  080056f0  000156f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  080056f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000298  0800598c  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  0800598c  00020450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149d5  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274a  00000000  00000000  00034c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  000373e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  00038650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002094d  00000000  00000000  000397c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e36  00000000  00000000  0005a10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8285  00000000  00000000  0006df43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001361c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dfc  00000000  00000000  0013621c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000298 	.word	0x20000298
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005684 	.word	0x08005684

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000029c 	.word	0x2000029c
 80001c8:	08005684 	.word	0x08005684

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <CAM_init>:
 *      Author: joach
 */

#include "camera.h"

void CAM_init(CAM_HandleTypeDef *cam) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	// init SCCB
	CAM_setReg(cam, 0x12, 0x80); // Software reset, YUV mode
 80004cc:	2280      	movs	r2, #128	; 0x80
 80004ce:	2112      	movs	r1, #18
 80004d0:	6878      	ldr	r0, [r7, #4]
 80004d2:	f000 f927 	bl	8000724 <CAM_setReg>
	CAM_setReg(cam, 0x1E, 0x31); // Flip image vertically and mirror image
 80004d6:	2231      	movs	r2, #49	; 0x31
 80004d8:	211e      	movs	r1, #30
 80004da:	6878      	ldr	r0, [r7, #4]
 80004dc:	f000 f922 	bl	8000724 <CAM_setReg>
	CAM_setReg(cam, 0x13, 0x81); // Fast algorithm and auto exposure enable
 80004e0:	2281      	movs	r2, #129	; 0x81
 80004e2:	2113      	movs	r1, #19
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f000 f91d 	bl	8000724 <CAM_setReg>
	CAM_setReg(cam, 0x3F, 0x01); // Edge enhancement factor
 80004ea:	2201      	movs	r2, #1
 80004ec:	213f      	movs	r1, #63	; 0x3f
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	f000 f918 	bl	8000724 <CAM_setReg>
	//CAM_setReg(cam, 0x71, 0xB5); // 8-bar color bar test pattern
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <CAM_startLineTransfer>:

void CAM_startLineTransfer(CAM_HandleTypeDef *cam) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	// init DMA
	while (cam->requestDataTimer->Instance->CNT <=  120) {}
 8000504:	bf00      	nop
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	685b      	ldr	r3, [r3, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050e:	2b78      	cmp	r3, #120	; 0x78
 8000510:	d9f9      	bls.n	8000506 <CAM_startLineTransfer+0xa>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
	//int x0 = cam->requestDataTimer->Instance->CNT;
	HAL_DMA_Start_IT(cam->hdma, cam->source, cam->destination, cam->pic->width);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6818      	ldr	r0, [r3, #0]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	69db      	ldr	r3, [r3, #28]
 800051a:	4619      	mov	r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6a1b      	ldr	r3, [r3, #32]
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	889b      	ldrh	r3, [r3, #4]
 8000528:	f001 f87c 	bl	8001624 <HAL_DMA_Start_IT>
	//int x = cam->requestDataTimer->Instance->CNT;
	HAL_TIM_PWM_Start(cam->requestDataTimer, cam->requestDataChannel);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	4619      	mov	r1, r3
 8000536:	4610      	mov	r0, r2
 8000538:	f003 fbf0 	bl	8003d1c <HAL_TIM_PWM_Start>
	//int x1 = cam->requestDataTimer->Instance->CNT;


	cam->status = RECEIVING;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2201      	movs	r2, #1
 8000540:	761a      	strb	r2, [r3, #24]
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <CAM_stopLineTransfer>:

void CAM_stopLineTransfer(CAM_HandleTypeDef *cam) {
 800054a:	b580      	push	{r7, lr}
 800054c:	b082      	sub	sp, #8
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
	// abort DMA
	//int y0 = cam->requestDataTimer->Instance->CNT;
	HAL_DMA_Abort_IT(cam->hdma);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4618      	mov	r0, r3
 8000558:	f001 f8c4 	bl	80016e4 <HAL_DMA_Abort_IT>
	//int y1 = cam->requestDataTimer->Instance->CNT;
	while (cam->requestDataTimer->Instance->CNT <= 120) {}
 800055c:	bf00      	nop
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	685b      	ldr	r3, [r3, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000566:	2b78      	cmp	r3, #120	; 0x78
 8000568:	d9f9      	bls.n	800055e <CAM_stopLineTransfer+0x14>
	//int y2 = cam->requestDataTimer->Instance->CNT;
	HAL_TIM_PWM_Stop(cam->requestDataTimer, cam->requestDataChannel);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	685a      	ldr	r2, [r3, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	68db      	ldr	r3, [r3, #12]
 8000572:	4619      	mov	r1, r3
 8000574:	4610      	mov	r0, r2
 8000576:	f003 fcaf 	bl	8003ed8 <HAL_TIM_PWM_Stop>
	//int y3 = cam->requestDataTimer->Instance->CNT;
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);

	cam->status = WAITING;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2202      	movs	r2, #2
 800057e:	761a      	strb	r2, [r3, #24]
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <CAM_update>:

void CAM_update(CAM_HandleTypeDef *cam) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	if (cam->status == READY) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	7e1b      	ldrb	r3, [r3, #24]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d11e      	bne.n	80005d6 <CAM_update+0x4e>
		if (cam->pic->y < cam->pic->height) {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	885a      	ldrh	r2, [r3, #2]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	88db      	ldrh	r3, [r3, #6]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d203      	bcs.n	80005b0 <CAM_update+0x28>
			CAM_startLineTransfer(cam);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff ffa7 	bl	80004fc <CAM_startLineTransfer>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
		}
	} else if (cam->status == WAITING) {
		CAM_toOutputQueue(cam);
	}
}
 80005ae:	e019      	b.n	80005e4 <CAM_update+0x5c>
			cam->pic->x = 0;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	2200      	movs	r2, #0
 80005b6:	801a      	strh	r2, [r3, #0]
			cam->pic->y = 0;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	695b      	ldr	r3, [r3, #20]
 80005bc:	2200      	movs	r2, #0
 80005be:	805a      	strh	r2, [r3, #2]
			cam->status = STANDBY;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2203      	movs	r2, #3
 80005c4:	761a      	strb	r2, [r3, #24]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d0:	f001 fb12 	bl	8001bf8 <HAL_GPIO_WritePin>
}
 80005d4:	e006      	b.n	80005e4 <CAM_update+0x5c>
	} else if (cam->status == WAITING) {
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7e1b      	ldrb	r3, [r3, #24]
 80005da:	2b02      	cmp	r3, #2
 80005dc:	d102      	bne.n	80005e4 <CAM_update+0x5c>
		CAM_toOutputQueue(cam);
 80005de:	6878      	ldr	r0, [r7, #4]
 80005e0:	f000 f831 	bl	8000646 <CAM_toOutputQueue>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <CAM_takePicture>:

void CAM_takePicture(CAM_HandleTypeDef *cam) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	//HUSK at ændre i OBC-filen

	// Hvis ikke vi er ved at sende et billede, pulsér getImagePin på FPGA
	if (cam->status == STANDBY) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	7e1b      	ldrb	r3, [r3, #24]
 80005f8:	2b03      	cmp	r3, #3
 80005fa:	d113      	bne.n	8000624 <CAM_takePicture+0x38>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f001 faf7 	bl	8001bf8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000614:	f001 faf0 	bl	8001bf8 <HAL_GPIO_WritePin>
		HAL_Delay(50);
 8000618:	2032      	movs	r0, #50	; 0x32
 800061a:	f000 fe15 	bl	8001248 <HAL_Delay>
		cam->status = READY;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	761a      	strb	r2, [r3, #24]
	}
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <CAN_queuePackage>:

int CAN_queuePackage(uint32_t ID, uint8_t *data, uint32_t DLC) {}
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	bf00      	nop
 800063a:	4618      	mov	r0, r3
 800063c:	3714      	adds	r7, #20
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <CAM_toOutputQueue>:

void CAM_toOutputQueue(CAM_HandleTypeDef *cam) {
 8000646:	b580      	push	{r7, lr}
 8000648:	b084      	sub	sp, #16
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	// Vent og placer pixel-koordinat-pakke i CAN-køen
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	b2db      	uxtb	r3, r3
 8000656:	723b      	strb	r3, [r7, #8]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	0a1b      	lsrs	r3, r3, #8
 8000660:	b29b      	uxth	r3, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	727b      	strb	r3, [r7, #9]
									(cam->pic->y & 0x00FF), (cam->pic->y >> 8),
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	885b      	ldrh	r3, [r3, #2]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 800066c:	b2db      	uxtb	r3, r3
 800066e:	72bb      	strb	r3, [r7, #10]
									(cam->pic->y & 0x00FF), (cam->pic->y >> 8),
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	885b      	ldrh	r3, [r3, #2]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000676:	0a1b      	lsrs	r3, r3, #8
 8000678:	b29b      	uxth	r3, r3
 800067a:	b2db      	uxtb	r3, r3
 800067c:	72fb      	strb	r3, [r7, #11]
									(cam->pic->width & 0x00FF), (cam->pic->width >> 8),
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	695b      	ldr	r3, [r3, #20]
 8000682:	889b      	ldrh	r3, [r3, #4]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 8000684:	b2db      	uxtb	r3, r3
 8000686:	733b      	strb	r3, [r7, #12]
									(cam->pic->width & 0x00FF), (cam->pic->width >> 8),
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	695b      	ldr	r3, [r3, #20]
 800068c:	889b      	ldrh	r3, [r3, #4]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 800068e:	0a1b      	lsrs	r3, r3, #8
 8000690:	b29b      	uxth	r3, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	737b      	strb	r3, [r7, #13]
									(cam->pic->height & 0x00FF), (cam->pic->height >> 8)};
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	88db      	ldrh	r3, [r3, #6]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 800069c:	b2db      	uxtb	r3, r3
 800069e:	73bb      	strb	r3, [r7, #14]
									(cam->pic->height & 0x00FF), (cam->pic->height >> 8)};
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	88db      	ldrh	r3, [r3, #6]
	uint8_t coordinatePackage[8] = {(cam->pic->x & 0x00FF), (cam->pic->x >> 8),
 80006a6:	0a1b      	lsrs	r3, r3, #8
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	b2db      	uxtb	r3, r3
 80006ac:	73fb      	strb	r3, [r7, #15]
	while(!CAN_queuePackage(CAN_ID_COORDINATE, coordinatePackage, 8)) {}
 80006ae:	bf00      	nop
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2208      	movs	r2, #8
 80006b6:	4619      	mov	r1, r3
 80006b8:	2020      	movs	r0, #32
 80006ba:	f7ff ffb7 	bl	800062c <CAN_queuePackage>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d0f5      	beq.n	80006b0 <CAM_toOutputQueue+0x6a>

	// Vent på at der plads i CAN-køen til en pakke med 8 pixels

	while(cam->pic->x < cam->pic->width) { // Gentag indtil hele linjen er sendt / hele bufferen er tømt
 80006c4:	e015      	b.n	80006f2 <CAM_toOutputQueue+0xac>
		// Når der er plads, put dem i køen
		if (CAN_queuePackage(CAN_ID_DATA, cam->destination + cam->pic->x, 8)) {
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	6a1b      	ldr	r3, [r3, #32]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	6952      	ldr	r2, [r2, #20]
 80006ce:	8812      	ldrh	r2, [r2, #0]
 80006d0:	4413      	add	r3, r2
 80006d2:	2208      	movs	r2, #8
 80006d4:	4619      	mov	r1, r3
 80006d6:	2021      	movs	r0, #33	; 0x21
 80006d8:	f7ff ffa8 	bl	800062c <CAN_queuePackage>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <CAM_toOutputQueue+0xac>
			// Inkrementer x-positionen i Picture
			cam->pic->x += 8;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	695b      	ldr	r3, [r3, #20]
 80006e6:	881a      	ldrh	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	695b      	ldr	r3, [r3, #20]
 80006ec:	3208      	adds	r2, #8
 80006ee:	b292      	uxth	r2, r2
 80006f0:	801a      	strh	r2, [r3, #0]
	while(cam->pic->x < cam->pic->width) { // Gentag indtil hele linjen er sendt / hele bufferen er tømt
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	881a      	ldrh	r2, [r3, #0]
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	889b      	ldrh	r3, [r3, #4]
 80006fe:	429a      	cmp	r2, r3
 8000700:	d3e1      	bcc.n	80006c6 <CAM_toOutputQueue+0x80>
		}
		*/
	}

	// Opdater koordinaterne i Picture
	cam->pic->y++;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	885a      	ldrh	r2, [r3, #2]
 8000708:	3201      	adds	r2, #1
 800070a:	b292      	uxth	r2, r2
 800070c:	805a      	strh	r2, [r3, #2]
	cam->pic->x = 0;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]

	cam->status = READY;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	761a      	strb	r2, [r3, #24]
}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <CAM_setReg>:

void CAM_setReg(CAM_HandleTypeDef *cam, uint8_t reg_addr, uint8_t value) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af02      	add	r7, sp, #8
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	460b      	mov	r3, r1
 800072e:	70fb      	strb	r3, [r7, #3]
 8000730:	4613      	mov	r3, r2
 8000732:	70bb      	strb	r3, [r7, #2]
	uint8_t addrAndValue[2] = {reg_addr, value};
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	733b      	strb	r3, [r7, #12]
 8000738:	78bb      	ldrb	r3, [r7, #2]
 800073a:	737b      	strb	r3, [r7, #13]
	uint8_t adressentest = cam->I2C_Address<<1;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000742:	005b      	lsls	r3, r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(cam->I2C_Handler, (cam->I2C_Address<<1), addrAndValue, 2, HAL_MAX_DELAY);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000750:	b29b      	uxth	r3, r3
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	b299      	uxth	r1, r3
 8000756:	f107 020c 	add.w	r2, r7, #12
 800075a:	f04f 33ff 	mov.w	r3, #4294967295
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2302      	movs	r3, #2
 8000762:	f001 faf1 	bl	8001d48 <HAL_I2C_Master_Transmit>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <CAM_getReg>:

int CAM_getReg(CAM_HandleTypeDef *cam, int reg_addr) {
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af02      	add	r7, sp, #8
 8000774:	6078      	str	r0, [r7, #4]
 8000776:	6039      	str	r1, [r7, #0]
	int buf[1] = {reg_addr};
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(cam->I2C_Handler, (cam->I2C_Address<<1), buf, 1, HAL_MAX_DELAY);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000786:	b29b      	uxth	r3, r3
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	b299      	uxth	r1, r3
 800078c:	f107 020c 	add.w	r2, r7, #12
 8000790:	f04f 33ff 	mov.w	r3, #4294967295
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2301      	movs	r3, #1
 8000798:	f001 fad6 	bl	8001d48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(cam->I2C_Handler, (cam->I2C_Address<<1) | 0x01, buf, 1, HAL_MAX_DELAY);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	f043 0301 	orr.w	r3, r3, #1
 80007ae:	b21b      	sxth	r3, r3
 80007b0:	b299      	uxth	r1, r3
 80007b2:	f107 020c 	add.w	r2, r7, #12
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	2301      	movs	r3, #1
 80007be:	f001 fbb7 	bl	8001f30 <HAL_I2C_Master_Receive>

	return buf[0];
 80007c2:	68fb      	ldr	r3, [r7, #12]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f000 fcc4 	bl	800115e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f84f 	bl	8000878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80007da:	f000 fa11 	bl	8000c00 <MX_DMA_Init>
  MX_GPIO_Init();
 80007de:	f000 fa2d 	bl	8000c3c <MX_GPIO_Init>
  MX_I2C1_Init();
 80007e2:	f000 f8cd 	bl	8000980 <MX_I2C1_Init>
  MX_TIM1_Init();
 80007e6:	f000 f90b 	bl	8000a00 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007ea:	f000 f9d9 	bl	8000ba0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //hi2c1.Instance->CR1 |= 0x8000;
  //if (HAL_I2C_Master_Transmit(&hi2c1, 0x68 << 1, cameraData, 2, HAL_MAX_DELAY) != HAL_OK) {
	//  int dev = 0;
  //}
  CAM_Handle_Init(&hcam);
 80007ee:	4820      	ldr	r0, [pc, #128]	; (8000870 <main+0xa4>)
 80007f0:	f000 fa92 	bl	8000d18 <CAM_Handle_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET); // Transfer pin sættes lav
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fe:	f001 f9fb 	bl	8001bf8 <HAL_GPIO_WritePin>
  //HAL_TIM_PWM_Start(hcam.requestDataTimer, hcam.requestDataChannel); // PWM/addrInc startes

  CAM_init(&hcam);
 8000802:	481b      	ldr	r0, [pc, #108]	; (8000870 <main+0xa4>)
 8000804:	f7ff fe5e 	bl	80004c4 <CAM_init>


  int a = CAM_getReg(&hcam, 0x12);
 8000808:	2112      	movs	r1, #18
 800080a:	4819      	ldr	r0, [pc, #100]	; (8000870 <main+0xa4>)
 800080c:	f7ff ffaf 	bl	800076e <CAM_getReg>
 8000810:	6178      	str	r0, [r7, #20]
  int b = CAM_getReg(&hcam, 0x1E);
 8000812:	211e      	movs	r1, #30
 8000814:	4816      	ldr	r0, [pc, #88]	; (8000870 <main+0xa4>)
 8000816:	f7ff ffaa 	bl	800076e <CAM_getReg>
 800081a:	6138      	str	r0, [r7, #16]
  int c = CAM_getReg(&hcam, 0x13);
 800081c:	2113      	movs	r1, #19
 800081e:	4814      	ldr	r0, [pc, #80]	; (8000870 <main+0xa4>)
 8000820:	f7ff ffa5 	bl	800076e <CAM_getReg>
 8000824:	60f8      	str	r0, [r7, #12]
  int d = CAM_getReg(&hcam, 0x3F);
 8000826:	213f      	movs	r1, #63	; 0x3f
 8000828:	4811      	ldr	r0, [pc, #68]	; (8000870 <main+0xa4>)
 800082a:	f7ff ffa0 	bl	800076e <CAM_getReg>
 800082e:	60b8      	str	r0, [r7, #8]
  int e = CAM_getReg(&hcam, 0x71);
 8000830:	2171      	movs	r1, #113	; 0x71
 8000832:	480f      	ldr	r0, [pc, #60]	; (8000870 <main+0xa4>)
 8000834:	f7ff ff9b 	bl	800076e <CAM_getReg>
 8000838:	6078      	str	r0, [r7, #4]


  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1); // Random kanal for at timeren altid kører
 800083a:	2100      	movs	r1, #0
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <main+0xa8>)
 800083e:	f003 f92d 	bl	8003a9c <HAL_TIM_OC_Start>
  __HAL_TIM_ENABLE_DMA(&htim1, TIM_DMA_CC3); // DENNE LINJE GJORDE AT DMA VILLE SIT LIV
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <main+0xa8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	68da      	ldr	r2, [r3, #12]
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <main+0xa8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000850:	60da      	str	r2, [r3, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET); // Transfer pin sættes høj
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f001 f9cc 	bl	8001bf8 <HAL_GPIO_WritePin>
  //HAL_DMA_Start_IT(htim1.hdma[TIM_DMA_ID_CC3], (uint32_t)&(GPIOA->IDR), (uint32_t)cameraData, 640);

  CAM_takePicture(&hcam);
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <main+0xa4>)
 8000862:	f7ff fec3 	bl	80005ec <CAM_takePicture>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CAM_update(&hcam);
 8000866:	4802      	ldr	r0, [pc, #8]	; (8000870 <main+0xa4>)
 8000868:	f7ff fe8e 	bl	8000588 <CAM_update>
 800086c:	e7fb      	b.n	8000866 <main+0x9a>
 800086e:	bf00      	nop
 8000870:	20000420 	.word	0x20000420
 8000874:	200003d4 	.word	0x200003d4

08000878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b0ac      	sub	sp, #176	; 0xb0
 800087c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000882:	2244      	movs	r2, #68	; 0x44
 8000884:	2100      	movs	r1, #0
 8000886:	4618      	mov	r0, r3
 8000888:	f004 fef4 	bl	8005674 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800088c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2254      	movs	r2, #84	; 0x54
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 fee6 	bl	8005674 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80008a8:	f001 feb0 	bl	800260c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80008ac:	4b33      	ldr	r3, [pc, #204]	; (800097c <SystemClock_Config+0x104>)
 80008ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008b2:	4a32      	ldr	r2, [pc, #200]	; (800097c <SystemClock_Config+0x104>)
 80008b4:	f023 0318 	bic.w	r3, r3, #24
 80008b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008bc:	2314      	movs	r3, #20
 80008be:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008c0:	2301      	movs	r3, #1
 80008c2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008c4:	2301      	movs	r3, #1
 80008c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008d0:	2360      	movs	r3, #96	; 0x60
 80008d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d6:	2302      	movs	r3, #2
 80008d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008dc:	2301      	movs	r3, #1
 80008de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 36;
 80008e8:	2324      	movs	r3, #36	; 0x24
 80008ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ee:	2307      	movs	r3, #7
 80008f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008f4:	2302      	movs	r3, #2
 80008f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000900:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000904:	4618      	mov	r0, r3
 8000906:	f001 fef5 	bl	80026f4 <HAL_RCC_OscConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000910:	f000 fa5c 	bl	8000dcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000914:	230f      	movs	r3, #15
 8000916:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000918:	2303      	movs	r3, #3
 800091a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091c:	2300      	movs	r3, #0
 800091e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000920:	2300      	movs	r3, #0
 8000922:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000924:	2300      	movs	r3, #0
 8000926:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000928:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800092c:	2104      	movs	r1, #4
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fb00 	bl	8002f34 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800093a:	f000 fa47 	bl	8000dcc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 800093e:	2341      	movs	r3, #65	; 0x41
 8000940:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000946:	2300      	movs	r3, #0
 8000948:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4618      	mov	r0, r3
 800094e:	f002 fcf7 	bl	8003340 <HAL_RCCEx_PeriphCLKConfig>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000958:	f000 fa38 	bl	8000dcc <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800095c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000960:	f001 fe72 	bl	8002648 <HAL_PWREx_ControlVoltageScaling>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800096a:	f000 fa2f 	bl	8000dcc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800096e:	f002 fedb 	bl	8003728 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000972:	bf00      	nop
 8000974:	37b0      	adds	r7, #176	; 0xb0
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_I2C1_Init+0x74>)
 8000986:	4a1c      	ldr	r2, [pc, #112]	; (80009f8 <MX_I2C1_Init+0x78>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10808DD3;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_I2C1_Init+0x74>)
 800098c:	4a1b      	ldr	r2, [pc, #108]	; (80009fc <MX_I2C1_Init+0x7c>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_I2C1_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000996:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_I2C1_Init+0x74>)
 8000998:	2201      	movs	r2, #1
 800099a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_I2C1_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009a2:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ba:	480e      	ldr	r0, [pc, #56]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009bc:	f001 f934 	bl	8001c28 <HAL_I2C_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009c6:	f000 fa01 	bl	8000dcc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ca:	2100      	movs	r1, #0
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009ce:	f001 fd85 	bl	80024dc <HAL_I2CEx_ConfigAnalogFilter>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009d8:	f000 f9f8 	bl	8000dcc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009dc:	2100      	movs	r1, #0
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_I2C1_Init+0x74>)
 80009e0:	f001 fdc7 	bl	8002572 <HAL_I2CEx_ConfigDigitalFilter>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ea:	f000 f9ef 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200002fc 	.word	0x200002fc
 80009f8:	40005400 	.word	0x40005400
 80009fc:	10808dd3 	.word	0x10808dd3

08000a00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b09a      	sub	sp, #104	; 0x68
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
 8000a30:	615a      	str	r2, [r3, #20]
 8000a32:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	222c      	movs	r2, #44	; 0x2c
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f004 fe1a 	bl	8005674 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a40:	4b55      	ldr	r3, [pc, #340]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000a42:	4a56      	ldr	r2, [pc, #344]	; (8000b9c <MX_TIM1_Init+0x19c>)
 8000a44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6-1;
 8000a46:	4b54      	ldr	r3, [pc, #336]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000a48:	2205      	movs	r2, #5
 8000a4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4c:	4b52      	ldr	r3, [pc, #328]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 240-1;
 8000a52:	4b51      	ldr	r3, [pc, #324]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000a54:	22ef      	movs	r2, #239	; 0xef
 8000a56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b4f      	ldr	r3, [pc, #316]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a5e:	4b4e      	ldr	r3, [pc, #312]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b4c      	ldr	r3, [pc, #304]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a6a:	484b      	ldr	r0, [pc, #300]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000a6c:	f002 ff5e 	bl	800392c <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a76:	f000 f9a9 	bl	8000dcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a80:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a84:	4619      	mov	r1, r3
 8000a86:	4844      	ldr	r0, [pc, #272]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000a88:	f003 fc34 	bl	80042f4 <HAL_TIM_ConfigClockSource>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000a92:	f000 f99b 	bl	8000dcc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000a96:	4840      	ldr	r0, [pc, #256]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000a98:	f002 ff9f 	bl	80039da <HAL_TIM_OC_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000aa2:	f000 f993 	bl	8000dcc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aa6:	483c      	ldr	r0, [pc, #240]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000aa8:	f003 f8d6 	bl	8003c58 <HAL_TIM_PWM_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000ab2:	f000 f98b 	bl	8000dcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4833      	ldr	r0, [pc, #204]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000aca:	f004 f87b 	bl	8004bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000ad4:	f000 f97a 	bl	8000dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aec:	2300      	movs	r3, #0
 8000aee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af8:	2200      	movs	r2, #0
 8000afa:	4619      	mov	r1, r3
 8000afc:	4826      	ldr	r0, [pc, #152]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000afe:	f003 fa73 	bl	8003fe8 <HAL_TIM_OC_ConfigChannel>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000b08:	f000 f960 	bl	8000dcc <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b10:	2208      	movs	r2, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	4820      	ldr	r0, [pc, #128]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000b16:	f003 fa67 	bl	8003fe8 <HAL_TIM_OC_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000b20:	f000 f954 	bl	8000dcc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b24:	2370      	movs	r3, #112	; 0x70
 8000b26:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 120-1;
 8000b28:	2377      	movs	r3, #119	; 0x77
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b30:	220c      	movs	r2, #12
 8000b32:	4619      	mov	r1, r3
 8000b34:	4818      	ldr	r0, [pc, #96]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000b36:	f003 facd 	bl	80040d4 <HAL_TIM_PWM_ConfigChannel>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000b40:	f000 f944 	bl	8000dcc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	4619      	mov	r1, r3
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000b7a:	f004 f889 	bl	8004c90 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000b84:	f000 f922 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <MX_TIM1_Init+0x198>)
 8000b8a:	f000 f9d7 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000b8e:	bf00      	nop
 8000b90:	3768      	adds	r7, #104	; 0x68
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200003d4 	.word	0x200003d4
 8000b9c:	40012c00 	.word	0x40012c00

08000ba0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000ba6:	4a15      	ldr	r2, [pc, #84]	; (8000bfc <MX_USART1_UART_Init+0x5c>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_USART1_UART_Init+0x58>)
 8000be4:	f004 f8cc 	bl	8004d80 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bee:	f000 f8ed 	bl	8000dcc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000350 	.word	0x20000350
 8000bfc:	40013800 	.word	0x40013800

08000c00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_DMA_Init+0x38>)
 8000c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <MX_DMA_Init+0x38>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6493      	str	r3, [r2, #72]	; 0x48
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_DMA_Init+0x38>)
 8000c14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	2011      	movs	r0, #17
 8000c24:	f000 fc0f 	bl	8001446 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c28:	2011      	movs	r0, #17
 8000c2a:	f000 fc28 	bl	800147e <HAL_NVIC_EnableIRQ>

}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <MX_GPIO_Init+0xd4>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a2e      	ldr	r2, [pc, #184]	; (8000d10 <MX_GPIO_Init+0xd4>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <MX_GPIO_Init+0xd4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <MX_GPIO_Init+0xd4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a28      	ldr	r2, [pc, #160]	; (8000d10 <MX_GPIO_Init+0xd4>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <MX_GPIO_Init+0xd4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <MX_GPIO_Init+0xd4>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a22      	ldr	r2, [pc, #136]	; (8000d10 <MX_GPIO_Init+0xd4>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b20      	ldr	r3, [pc, #128]	; (8000d10 <MX_GPIO_Init+0xd4>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8000ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca4:	f000 ffa8 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	2130      	movs	r1, #48	; 0x30
 8000cac:	4819      	ldr	r0, [pc, #100]	; (8000d14 <MX_GPIO_Init+0xd8>)
 8000cae:	f000 ffa3 	bl	8001bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000cb2:	23ff      	movs	r3, #255	; 0xff
 8000cb4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 030c 	add.w	r3, r7, #12
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fe2c 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000ccc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000cd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce8:	f000 fe1c 	bl	8001924 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000cec:	2330      	movs	r3, #48	; 0x30
 8000cee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 030c 	add.w	r3, r7, #12
 8000d00:	4619      	mov	r1, r3
 8000d02:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_GPIO_Init+0xd8>)
 8000d04:	f000 fe0e 	bl	8001924 <HAL_GPIO_Init>

}
 8000d08:	bf00      	nop
 8000d0a:	3720      	adds	r7, #32
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000400 	.word	0x48000400

08000d18 <CAM_Handle_Init>:

/* USER CODE BEGIN 4 */
void CAM_Handle_Init(CAM_HandleTypeDef *cam) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	cam->I2C_Address = 0x21;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2221      	movs	r2, #33	; 0x21
 8000d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cam->destination = cameraData;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a1a      	ldr	r2, [pc, #104]	; (8000d94 <CAM_Handle_Init+0x7c>)
 8000d2c:	621a      	str	r2, [r3, #32]
	cam->hdma = &hdma_tim1_ch3;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <CAM_Handle_Init+0x80>)
 8000d32:	601a      	str	r2, [r3, #0]
	cam->pic = &pic1;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <CAM_Handle_Init+0x84>)
 8000d38:	615a      	str	r2, [r3, #20]
	cam->requestDataTimer = &htim1;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a18      	ldr	r2, [pc, #96]	; (8000da0 <CAM_Handle_Init+0x88>)
 8000d3e:	605a      	str	r2, [r3, #4]
	cam->requestDataChannel = TIM_CHANNEL_4;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	220c      	movs	r2, #12
 8000d44:	60da      	str	r2, [r3, #12]
	cam->DMATimer = &htim1;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <CAM_Handle_Init+0x88>)
 8000d4a:	609a      	str	r2, [r3, #8]
	cam->DMAChannel = TIM_CHANNEL_3;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2208      	movs	r2, #8
 8000d50:	611a      	str	r2, [r3, #16]
	cam->source = &(GPIOA->IDR);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <CAM_Handle_Init+0x8c>)
 8000d56:	61da      	str	r2, [r3, #28]
	cam->status = STANDBY;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	761a      	strb	r2, [r3, #24]
	cam->I2C_Handler = &hi2c1;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a11      	ldr	r2, [pc, #68]	; (8000da8 <CAM_Handle_Init+0x90>)
 8000d62:	629a      	str	r2, [r3, #40]	; 0x28

	cam->pic->x = 0;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	695b      	ldr	r3, [r3, #20]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	801a      	strh	r2, [r3, #0]
	cam->pic->y = 0;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	2200      	movs	r2, #0
 8000d72:	805a      	strh	r2, [r3, #2]
	cam->pic->height = 480;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	695b      	ldr	r3, [r3, #20]
 8000d78:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000d7c:	80da      	strh	r2, [r3, #6]
	cam->pic->width = 640;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000d86:	809a      	strh	r2, [r3, #4]

}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	20000000 	.word	0x20000000
 8000d98:	200002b4 	.word	0x200002b4
 8000d9c:	20000348 	.word	0x20000348
 8000da0:	200003d4 	.word	0x200003d4
 8000da4:	48000010 	.word	0x48000010
 8000da8:	200002fc 	.word	0x200002fc

08000dac <transmitBuffer>:

void transmitBuffer() {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, cameraData, 640, HAL_MAX_DELAY);
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
 8000db4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000db8:	4902      	ldr	r1, [pc, #8]	; (8000dc4 <transmitBuffer+0x18>)
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <transmitBuffer+0x1c>)
 8000dbc:	f004 f82e 	bl	8004e1c <HAL_UART_Transmit>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000000 	.word	0x20000000
 8000dc8:	20000350 	.word	0x20000350

08000dcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <Error_Handler+0x8>
	...

08000dd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_MspInit+0x44>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_MspInit+0x44>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_MspInit+0x44>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_MspInit+0x44>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x44>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a17      	ldr	r2, [pc, #92]	; (8000e9c <HAL_I2C_MspInit+0x7c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d127      	bne.n	8000e92 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	4a16      	ldr	r2, [pc, #88]	; (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e48:	f043 0302 	orr.w	r3, r3, #2
 8000e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e5a:	23c0      	movs	r3, #192	; 0xc0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5e:	2312      	movs	r3, #18
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	480b      	ldr	r0, [pc, #44]	; (8000ea4 <HAL_I2C_MspInit+0x84>)
 8000e76:	f000 fd55 	bl	8001924 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e84:	6593      	str	r3, [r2, #88]	; 0x58
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_I2C_MspInit+0x80>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3728      	adds	r7, #40	; 0x28
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40005400 	.word	0x40005400
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000400 	.word	0x48000400

08000ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	; (8000f2c <HAL_TIM_Base_MspInit+0x84>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d134      	bne.n	8000f24 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eba:	4b1d      	ldr	r3, [pc, #116]	; (8000f30 <HAL_TIM_Base_MspInit+0x88>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <HAL_TIM_Base_MspInit+0x88>)
 8000ec0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec6:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_TIM_Base_MspInit+0x88>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA1_Channel7;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000ed4:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_TIM_Base_MspInit+0x90>)
 8000ed6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Request = DMA_REQUEST_7;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000eda:	2207      	movs	r2, #7
 8000edc:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef0:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_NORMAL;
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 8000f08:	480a      	ldr	r0, [pc, #40]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000f0a:	f000 fad3 	bl	80014b4 <HAL_DMA_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000f14:	f7ff ff5a 	bl	8000dcc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f1e:	4a05      	ldr	r2, [pc, #20]	; (8000f34 <HAL_TIM_Base_MspInit+0x8c>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40012c00 	.word	0x40012c00
 8000f30:	40021000 	.word	0x40021000
 8000f34:	200002b4 	.word	0x200002b4
 8000f38:	40020080 	.word	0x40020080

08000f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <HAL_TIM_MspPostInit+0x68>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d11d      	bne.n	8000f9a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_TIM_MspPostInit+0x6c>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <HAL_TIM_MspPostInit+0x6c>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_TIM_MspPostInit+0x6c>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
 8000f74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f000 fcc5 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40012c00 	.word	0x40012c00
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a18      	ldr	r2, [pc, #96]	; (800102c <HAL_UART_MspInit+0x80>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d129      	bne.n	8001022 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fce:	4b18      	ldr	r3, [pc, #96]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fea:	4a11      	ldr	r2, [pc, #68]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_UART_MspInit+0x84>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ffe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001004:	2302      	movs	r3, #2
 8001006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001010:	2307      	movs	r3, #7
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101e:	f000 fc81 	bl	8001924 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3728      	adds	r7, #40	; 0x28
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40013800 	.word	0x40013800
 8001030:	40021000 	.word	0x40021000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f8c2 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
  CAM_stopLineTransfer(&hcam);
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <DMA1_Channel7_IRQHandler+0x18>)
 800108e:	f7ff fa5c 	bl	800054a <CAM_stopLineTransfer>
  transmitBuffer();
 8001092:	f7ff fe8b 	bl	8000dac <transmitBuffer>
  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <DMA1_Channel7_IRQHandler+0x1c>)
 8001098:	f000 fb65 	bl	8001766 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */
  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000420 	.word	0x20000420
 80010a4:	200002b4 	.word	0x200002b4

080010a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <SystemInit+0x5c>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <SystemInit+0x5c>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010bc:	4b12      	ldr	r3, [pc, #72]	; (8001108 <SystemInit+0x60>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a11      	ldr	r2, [pc, #68]	; (8001108 <SystemInit+0x60>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010c8:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <SystemInit+0x60>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <SystemInit+0x60>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <SystemInit+0x60>)
 80010d4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010d8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <SystemInit+0x60>)
 80010e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <SystemInit+0x60>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <SystemInit+0x60>)
 80010ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010f2:	4b05      	ldr	r3, [pc, #20]	; (8001108 <SystemInit+0x60>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	619a      	str	r2, [r3, #24]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00
 8001108:	40021000 	.word	0x40021000

0800110c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001110:	f7ff ffca 	bl	80010a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001114:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001116:	e003      	b.n	8001120 <LoopCopyDataInit>

08001118 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001118:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800111a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800111c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800111e:	3104      	adds	r1, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001120:	480a      	ldr	r0, [pc, #40]	; (800114c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001124:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001126:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001128:	d3f6      	bcc.n	8001118 <CopyDataInit>
	ldr	r2, =_sbss
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <LoopForever+0x12>)
	b	LoopFillZerobss
 800112c:	e002      	b.n	8001134 <LoopFillZerobss>

0800112e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800112e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001130:	f842 3b04 	str.w	r3, [r2], #4

08001134 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <LoopForever+0x16>)
	cmp	r2, r3
 8001136:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001138:	d3f9      	bcc.n	800112e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113a:	f004 fa77 	bl	800562c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800113e:	f7ff fb45 	bl	80007cc <main>

08001142 <LoopForever>:

LoopForever:
    b LoopForever
 8001142:	e7fe      	b.n	8001142 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001144:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001148:	080056f4 	.word	0x080056f4
	ldr	r0, =_sdata
 800114c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001150:	20000298 	.word	0x20000298
	ldr	r2, =_sbss
 8001154:	20000298 	.word	0x20000298
	ldr	r3, = _ebss
 8001158:	20000450 	.word	0x20000450

0800115c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC1_IRQHandler>

0800115e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001168:	2003      	movs	r0, #3
 800116a:	f000 f961 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800116e:	2000      	movs	r0, #0
 8001170:	f000 f80e 	bl	8001190 <HAL_InitTick>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d002      	beq.n	8001180 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	e001      	b.n	8001184 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001180:	f7ff fe2a 	bl	8000dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001184:	79fb      	ldrb	r3, [r7, #7]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800119c:	4b17      	ldr	r3, [pc, #92]	; (80011fc <HAL_InitTick+0x6c>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d023      	beq.n	80011ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_InitTick+0x70>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_InitTick+0x6c>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 f96d 	bl	800149a <HAL_SYSTICK_Config>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10f      	bne.n	80011e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d809      	bhi.n	80011e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f937 	bl	8001446 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_InitTick+0x74>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e007      	b.n	80011f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e004      	b.n	80011f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
 80011ea:	e001      	b.n	80011f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000294 	.word	0x20000294
 8001200:	2000028c 	.word	0x2000028c
 8001204:	20000290 	.word	0x20000290

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000294 	.word	0x20000294
 800122c:	2000044c 	.word	0x2000044c

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	2000044c 	.word	0x2000044c

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff ffee 	bl	8001230 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_Delay+0x44>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffde 	bl	8001230 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000294 	.word	0x20000294

08001290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <__NVIC_GetPriorityGrouping+0x18>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	f003 0307 	and.w	r3, r3, #7
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <__NVIC_EnableIRQ+0x38>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff29 	bl	8001290 <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff3e 	bl	80012d8 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff8e 	bl	8001384 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5d 	bl	8001330 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ff31 	bl	80012f4 <__NVIC_EnableIRQ>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ffa2 	bl	80013ec <SysTick_Config>
 80014a8:	4603      	mov	r3, r0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e098      	b.n	80015f8 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <HAL_DMA_Init+0x150>)
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d80f      	bhi.n	80014f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b4b      	ldr	r3, [pc, #300]	; (8001608 <HAL_DMA_Init+0x154>)
 80014da:	4413      	add	r3, r2
 80014dc:	4a4b      	ldr	r2, [pc, #300]	; (800160c <HAL_DMA_Init+0x158>)
 80014de:	fba2 2303 	umull	r2, r3, r2, r3
 80014e2:	091b      	lsrs	r3, r3, #4
 80014e4:	009a      	lsls	r2, r3, #2
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a48      	ldr	r2, [pc, #288]	; (8001610 <HAL_DMA_Init+0x15c>)
 80014ee:	641a      	str	r2, [r3, #64]	; 0x40
 80014f0:	e00e      	b.n	8001510 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	4b46      	ldr	r3, [pc, #280]	; (8001614 <HAL_DMA_Init+0x160>)
 80014fa:	4413      	add	r3, r2
 80014fc:	4a43      	ldr	r2, [pc, #268]	; (800160c <HAL_DMA_Init+0x158>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	009a      	lsls	r2, r3, #2
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a42      	ldr	r2, [pc, #264]	; (8001618 <HAL_DMA_Init+0x164>)
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800152a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001534:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	691b      	ldr	r3, [r3, #16]
 800153a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800156a:	d039      	beq.n	80015e0 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a27      	ldr	r2, [pc, #156]	; (8001610 <HAL_DMA_Init+0x15c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d11a      	bne.n	80015ac <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001576:	4b29      	ldr	r3, [pc, #164]	; (800161c <HAL_DMA_Init+0x168>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 031c 	and.w	r3, r3, #28
 8001582:	210f      	movs	r1, #15
 8001584:	fa01 f303 	lsl.w	r3, r1, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	4924      	ldr	r1, [pc, #144]	; (800161c <HAL_DMA_Init+0x168>)
 800158c:	4013      	ands	r3, r2
 800158e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001590:	4b22      	ldr	r3, [pc, #136]	; (800161c <HAL_DMA_Init+0x168>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6859      	ldr	r1, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159c:	f003 031c 	and.w	r3, r3, #28
 80015a0:	fa01 f303 	lsl.w	r3, r1, r3
 80015a4:	491d      	ldr	r1, [pc, #116]	; (800161c <HAL_DMA_Init+0x168>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	600b      	str	r3, [r1, #0]
 80015aa:	e019      	b.n	80015e0 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80015ac:	4b1c      	ldr	r3, [pc, #112]	; (8001620 <HAL_DMA_Init+0x16c>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f003 031c 	and.w	r3, r3, #28
 80015b8:	210f      	movs	r1, #15
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43db      	mvns	r3, r3
 80015c0:	4917      	ldr	r1, [pc, #92]	; (8001620 <HAL_DMA_Init+0x16c>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_DMA_Init+0x16c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6859      	ldr	r1, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	f003 031c 	and.w	r3, r3, #28
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	4911      	ldr	r1, [pc, #68]	; (8001620 <HAL_DMA_Init+0x16c>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40020407 	.word	0x40020407
 8001608:	bffdfff8 	.word	0xbffdfff8
 800160c:	cccccccd 	.word	0xcccccccd
 8001610:	40020000 	.word	0x40020000
 8001614:	bffdfbf8 	.word	0xbffdfbf8
 8001618:	40020400 	.word	0x40020400
 800161c:	400200a8 	.word	0x400200a8
 8001620:	400204a8 	.word	0x400204a8

08001624 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_DMA_Start_IT+0x20>
 8001640:	2302      	movs	r3, #2
 8001642:	e04b      	b.n	80016dc <HAL_DMA_Start_IT+0xb8>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d13a      	bne.n	80016ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f921 	bl	80018c4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 020e 	orr.w	r2, r2, #14
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e00f      	b.n	80016bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0204 	bic.w	r2, r2, #4
 80016aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 020a 	orr.w	r2, r2, #10
 80016ba:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e005      	b.n	80016da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016da:	7dfb      	ldrb	r3, [r7, #23]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d005      	beq.n	8001708 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2204      	movs	r2, #4
 8001700:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	e029      	b.n	800175c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 020e 	bic.w	r2, r2, #14
 8001716:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	f003 021c 	and.w	r2, r3, #28
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2201      	movs	r2, #1
 8001740:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	4798      	blx	r3
    }
  }
  return status;
 800175c:	7bfb      	ldrb	r3, [r7, #15]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f003 031c 	and.w	r3, r3, #28
 8001786:	2204      	movs	r2, #4
 8001788:	409a      	lsls	r2, r3
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4013      	ands	r3, r2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d026      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x7a>
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d021      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0320 	and.w	r3, r3, #32
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d107      	bne.n	80017ba <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0204 	bic.w	r2, r2, #4
 80017b8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f003 021c 	and.w	r2, r3, #28
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	2104      	movs	r1, #4
 80017c8:	fa01 f202 	lsl.w	r2, r1, r2
 80017cc:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d071      	beq.n	80018ba <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80017de:	e06c      	b.n	80018ba <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	f003 031c 	and.w	r3, r3, #28
 80017e8:	2202      	movs	r2, #2
 80017ea:	409a      	lsls	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d02e      	beq.n	8001852 <HAL_DMA_IRQHandler+0xec>
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d029      	beq.n	8001852 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0320 	and.w	r3, r3, #32
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10b      	bne.n	8001824 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 020a 	bic.w	r2, r2, #10
 800181a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	f003 021c 	and.w	r2, r3, #28
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2102      	movs	r1, #2
 8001832:	fa01 f202 	lsl.w	r2, r1, r2
 8001836:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	2b00      	cmp	r3, #0
 8001846:	d038      	beq.n	80018ba <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001850:	e033      	b.n	80018ba <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f003 031c 	and.w	r3, r3, #28
 800185a:	2208      	movs	r2, #8
 800185c:	409a      	lsls	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d02a      	beq.n	80018bc <HAL_DMA_IRQHandler+0x156>
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d025      	beq.n	80018bc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 020e 	bic.w	r2, r2, #14
 800187e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f003 021c 	and.w	r2, r3, #28
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f202 	lsl.w	r2, r1, r2
 8001892:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d004      	beq.n	80018bc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
}
 80018be:	3710      	adds	r7, #16
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	f003 021c 	and.w	r2, r3, #28
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f202 	lsl.w	r2, r1, r2
 80018e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d108      	bne.n	8001908 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001906:	e007      	b.n	8001918 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	60da      	str	r2, [r3, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b087      	sub	sp, #28
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001932:	e148      	b.n	8001bc6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 813a 	beq.w	8001bc0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d00b      	beq.n	800196c <HAL_GPIO_Init+0x48>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d007      	beq.n	800196c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001960:	2b11      	cmp	r3, #17
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b12      	cmp	r3, #18
 800196a:	d130      	bne.n	80019ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a2:	2201      	movs	r2, #1
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	f003 0201 	and.w	r2, r3, #1
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	2203      	movs	r2, #3
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0xea>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b12      	cmp	r3, #18
 8001a0c:	d123      	bne.n	8001a56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	220f      	movs	r2, #15
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	08da      	lsrs	r2, r3, #3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3208      	adds	r2, #8
 8001a50:	6939      	ldr	r1, [r7, #16]
 8001a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	2203      	movs	r2, #3
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43db      	mvns	r3, r3
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0203 	and.w	r2, r3, #3
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8094 	beq.w	8001bc0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a98:	4b52      	ldr	r3, [pc, #328]	; (8001be4 <HAL_GPIO_Init+0x2c0>)
 8001a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9c:	4a51      	ldr	r2, [pc, #324]	; (8001be4 <HAL_GPIO_Init+0x2c0>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa4:	4b4f      	ldr	r3, [pc, #316]	; (8001be4 <HAL_GPIO_Init+0x2c0>)
 8001aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab0:	4a4d      	ldr	r2, [pc, #308]	; (8001be8 <HAL_GPIO_Init+0x2c4>)
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	089b      	lsrs	r3, r3, #2
 8001ab6:	3302      	adds	r3, #2
 8001ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	f003 0303 	and.w	r3, r3, #3
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	220f      	movs	r2, #15
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ada:	d00d      	beq.n	8001af8 <HAL_GPIO_Init+0x1d4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a43      	ldr	r2, [pc, #268]	; (8001bec <HAL_GPIO_Init+0x2c8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d007      	beq.n	8001af4 <HAL_GPIO_Init+0x1d0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a42      	ldr	r2, [pc, #264]	; (8001bf0 <HAL_GPIO_Init+0x2cc>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_GPIO_Init+0x1cc>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e004      	b.n	8001afa <HAL_GPIO_Init+0x1d6>
 8001af0:	2307      	movs	r3, #7
 8001af2:	e002      	b.n	8001afa <HAL_GPIO_Init+0x1d6>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <HAL_GPIO_Init+0x1d6>
 8001af8:	2300      	movs	r3, #0
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	f002 0203 	and.w	r2, r2, #3
 8001b00:	0092      	lsls	r2, r2, #2
 8001b02:	4093      	lsls	r3, r2
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b0a:	4937      	ldr	r1, [pc, #220]	; (8001be8 <HAL_GPIO_Init+0x2c4>)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	089b      	lsrs	r3, r3, #2
 8001b10:	3302      	adds	r3, #2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b3c:	4a2d      	ldr	r2, [pc, #180]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b42:	4b2c      	ldr	r3, [pc, #176]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b66:	4a23      	ldr	r2, [pc, #140]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b6c:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b90:	4a18      	ldr	r2, [pc, #96]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_GPIO_Init+0x2d0>)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f47f aeaf 	bne.w	8001934 <HAL_GPIO_Init+0x10>
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	bf00      	nop
 8001bda:	371c      	adds	r7, #28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40010000 	.word	0x40010000
 8001bec:	48000400 	.word	0x48000400
 8001bf0:	48000800 	.word	0x48000800
 8001bf4:	40010400 	.word	0x40010400

08001bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
 8001c04:	4613      	mov	r3, r2
 8001c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c08:	787b      	ldrb	r3, [r7, #1]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c0e:	887a      	ldrh	r2, [r7, #2]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c14:	e002      	b.n	8001c1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e081      	b.n	8001d3e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff f8e6 	bl	8000e20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2224      	movs	r2, #36	; 0x24
 8001c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d107      	bne.n	8001ca2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	e006      	b.n	8001cb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689a      	ldr	r2, [r3, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d104      	bne.n	8001cc2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	6812      	ldr	r2, [r2, #0]
 8001ccc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ce4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	ea42 0103 	orr.w	r1, r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	021a      	lsls	r2, r3, #8
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69d9      	ldr	r1, [r3, #28]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a1a      	ldr	r2, [r3, #32]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af02      	add	r7, sp, #8
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	607a      	str	r2, [r7, #4]
 8001d52:	461a      	mov	r2, r3
 8001d54:	460b      	mov	r3, r1
 8001d56:	817b      	strh	r3, [r7, #10]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	f040 80da 	bne.w	8001f1e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_I2C_Master_Transmit+0x30>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e0d3      	b.n	8001f20 <HAL_I2C_Master_Transmit+0x1d8>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d80:	f7ff fa56 	bl	8001230 <HAL_GetTick>
 8001d84:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2319      	movs	r3, #25
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	f000 f9e6 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0be      	b.n	8001f20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2221      	movs	r2, #33	; 0x21
 8001da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2210      	movs	r2, #16
 8001dae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	893a      	ldrh	r2, [r7, #8]
 8001dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	2bff      	cmp	r3, #255	; 0xff
 8001dd2:	d90e      	bls.n	8001df2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	22ff      	movs	r2, #255	; 0xff
 8001dd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	8979      	ldrh	r1, [r7, #10]
 8001de2:	4b51      	ldr	r3, [pc, #324]	; (8001f28 <HAL_I2C_Master_Transmit+0x1e0>)
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 fb48 	bl	8002480 <I2C_TransferConfig>
 8001df0:	e06c      	b.n	8001ecc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	8979      	ldrh	r1, [r7, #10]
 8001e04:	4b48      	ldr	r3, [pc, #288]	; (8001f28 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fb37 	bl	8002480 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001e12:	e05b      	b.n	8001ecc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	6a39      	ldr	r1, [r7, #32]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f9e3 	bl	80021e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e07b      	b.n	8001f20 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2c:	781a      	ldrb	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d034      	beq.n	8001ecc <HAL_I2C_Master_Transmit+0x184>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d130      	bne.n	8001ecc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	2200      	movs	r2, #0
 8001e72:	2180      	movs	r1, #128	; 0x80
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 f975 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e04d      	b.n	8001f20 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	2bff      	cmp	r3, #255	; 0xff
 8001e8c:	d90e      	bls.n	8001eac <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	22ff      	movs	r2, #255	; 0xff
 8001e92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	8979      	ldrh	r1, [r7, #10]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 faeb 	bl	8002480 <I2C_TransferConfig>
 8001eaa:	e00f      	b.n	8001ecc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	8979      	ldrh	r1, [r7, #10]
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fada 	bl	8002480 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d19e      	bne.n	8001e14 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	6a39      	ldr	r1, [r7, #32]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f9c2 	bl	8002264 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e01a      	b.n	8001f20 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6859      	ldr	r1, [r3, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_I2C_Master_Transmit+0x1e4>)
 8001efe:	400b      	ands	r3, r1
 8001f00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e000      	b.n	8001f20 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001f1e:	2302      	movs	r3, #2
  }
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	80002000 	.word	0x80002000
 8001f2c:	fe00e800 	.word	0xfe00e800

08001f30 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b088      	sub	sp, #32
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	607a      	str	r2, [r7, #4]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	817b      	strh	r3, [r7, #10]
 8001f40:	4613      	mov	r3, r2
 8001f42:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b20      	cmp	r3, #32
 8001f4e:	f040 80db 	bne.w	8002108 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_I2C_Master_Receive+0x30>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e0d4      	b.n	800210a <HAL_I2C_Master_Receive+0x1da>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f68:	f7ff f962 	bl	8001230 <HAL_GetTick>
 8001f6c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2319      	movs	r3, #25
 8001f74:	2201      	movs	r2, #1
 8001f76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 f8f2 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e0bf      	b.n	800210a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2222      	movs	r2, #34	; 0x22
 8001f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2210      	movs	r2, #16
 8001f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	893a      	ldrh	r2, [r7, #8]
 8001faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	2bff      	cmp	r3, #255	; 0xff
 8001fba:	d90e      	bls.n	8001fda <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	22ff      	movs	r2, #255	; 0xff
 8001fc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	8979      	ldrh	r1, [r7, #10]
 8001fca:	4b52      	ldr	r3, [pc, #328]	; (8002114 <HAL_I2C_Master_Receive+0x1e4>)
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fa54 	bl	8002480 <I2C_TransferConfig>
 8001fd8:	e06d      	b.n	80020b6 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	8979      	ldrh	r1, [r7, #10]
 8001fec:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_I2C_Master_Receive+0x1e4>)
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 fa43 	bl	8002480 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ffa:	e05c      	b.n	80020b6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	6a39      	ldr	r1, [r7, #32]
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f96b 	bl	80022dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e07c      	b.n	800210a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800202c:	3b01      	subs	r3, #1
 800202e:	b29a      	uxth	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002038:	b29b      	uxth	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d034      	beq.n	80020b6 <HAL_I2C_Master_Receive+0x186>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d130      	bne.n	80020b6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	2200      	movs	r2, #0
 800205c:	2180      	movs	r1, #128	; 0x80
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f880 	bl	8002164 <I2C_WaitOnFlagUntilTimeout>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e04d      	b.n	800210a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	2bff      	cmp	r3, #255	; 0xff
 8002076:	d90e      	bls.n	8002096 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	22ff      	movs	r2, #255	; 0xff
 800207c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	b2da      	uxtb	r2, r3
 8002084:	8979      	ldrh	r1, [r7, #10]
 8002086:	2300      	movs	r3, #0
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f9f6 	bl	8002480 <I2C_TransferConfig>
 8002094:	e00f      	b.n	80020b6 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29a      	uxth	r2, r3
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	8979      	ldrh	r1, [r7, #10]
 80020a8:	2300      	movs	r3, #0
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020b0:	68f8      	ldr	r0, [r7, #12]
 80020b2:	f000 f9e5 	bl	8002480 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d19d      	bne.n	8001ffc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	6a39      	ldr	r1, [r7, #32]
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f8cd 	bl	8002264 <I2C_WaitOnSTOPFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e01a      	b.n	800210a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2220      	movs	r2, #32
 80020da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6859      	ldr	r1, [r3, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <HAL_I2C_Master_Receive+0x1e8>)
 80020e8:	400b      	ands	r3, r1
 80020ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	e000      	b.n	800210a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002108:	2302      	movs	r3, #2
  }
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	80002400 	.word	0x80002400
 8002118:	fe00e800 	.word	0xfe00e800

0800211c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b02      	cmp	r3, #2
 8002130:	d103      	bne.n	800213a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2200      	movs	r2, #0
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b01      	cmp	r3, #1
 8002146:	d007      	beq.n	8002158 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699a      	ldr	r2, [r3, #24]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f042 0201 	orr.w	r2, r2, #1
 8002156:	619a      	str	r2, [r3, #24]
  }
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	603b      	str	r3, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002174:	e022      	b.n	80021bc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d01e      	beq.n	80021bc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217e:	f7ff f857 	bl	8001230 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d302      	bcc.n	8002194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d113      	bne.n	80021bc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f043 0220 	orr.w	r2, r3, #32
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2220      	movs	r2, #32
 80021a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e00f      	b.n	80021dc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	4013      	ands	r3, r2
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	461a      	mov	r2, r3
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d0cd      	beq.n	8002176 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021f0:	e02c      	b.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	68b9      	ldr	r1, [r7, #8]
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f000 f8dc 	bl	80023b4 <I2C_IsAcknowledgeFailed>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e02a      	b.n	800225c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d01e      	beq.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220e:	f7ff f80f 	bl	8001230 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	68ba      	ldr	r2, [r7, #8]
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d113      	bne.n	800224c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	f043 0220 	orr.w	r2, r3, #32
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e007      	b.n	800225c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d1cb      	bne.n	80021f2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002270:	e028      	b.n	80022c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f89c 	bl	80023b4 <I2C_IsAcknowledgeFailed>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e026      	b.n	80022d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002286:	f7fe ffd3 	bl	8001230 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	429a      	cmp	r2, r3
 8002294:	d302      	bcc.n	800229c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d113      	bne.n	80022c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	f043 0220 	orr.w	r2, r3, #32
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e007      	b.n	80022d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b20      	cmp	r3, #32
 80022d0:	d1cf      	bne.n	8002272 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022e8:	e055      	b.n	8002396 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68b9      	ldr	r1, [r7, #8]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f860 	bl	80023b4 <I2C_IsAcknowledgeFailed>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e053      	b.n	80023a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	f003 0320 	and.w	r3, r3, #32
 8002308:	2b20      	cmp	r3, #32
 800230a:	d129      	bne.n	8002360 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b04      	cmp	r3, #4
 8002318:	d105      	bne.n	8002326 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e03f      	b.n	80023a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2220      	movs	r2, #32
 800232c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800233a:	400b      	ands	r3, r1
 800233c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2220      	movs	r2, #32
 8002348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e022      	b.n	80023a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002360:	f7fe ff66 	bl	8001230 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	d302      	bcc.n	8002376 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	f043 0220 	orr.w	r2, r3, #32
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e007      	b.n	80023a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d1a2      	bne.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	fe00e800 	.word	0xfe00e800

080023b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b10      	cmp	r3, #16
 80023cc:	d151      	bne.n	8002472 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ce:	e022      	b.n	8002416 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d6:	d01e      	beq.n	8002416 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d8:	f7fe ff2a 	bl	8001230 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d302      	bcc.n	80023ee <I2C_IsAcknowledgeFailed+0x3a>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d113      	bne.n	8002416 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	f043 0220 	orr.w	r2, r3, #32
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e02e      	b.n	8002474 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0320 	and.w	r3, r3, #32
 8002420:	2b20      	cmp	r3, #32
 8002422:	d1d5      	bne.n	80023d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2210      	movs	r2, #16
 800242a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2220      	movs	r2, #32
 8002432:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff fe71 	bl	800211c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6859      	ldr	r1, [r3, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b0d      	ldr	r3, [pc, #52]	; (800247c <I2C_IsAcknowledgeFailed+0xc8>)
 8002446:	400b      	ands	r3, r1
 8002448:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f043 0204 	orr.w	r2, r3, #4
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	fe00e800 	.word	0xfe00e800

08002480 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	817b      	strh	r3, [r7, #10]
 800248e:	4613      	mov	r3, r2
 8002490:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	0d5b      	lsrs	r3, r3, #21
 800249c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024a0:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <I2C_TransferConfig+0x58>)
 80024a2:	430b      	orrs	r3, r1
 80024a4:	43db      	mvns	r3, r3
 80024a6:	ea02 0103 	and.w	r1, r2, r3
 80024aa:	897b      	ldrh	r3, [r7, #10]
 80024ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024b0:	7a7b      	ldrb	r3, [r7, #9]
 80024b2:	041b      	lsls	r3, r3, #16
 80024b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	431a      	orrs	r2, r3
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	431a      	orrs	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80024ca:	bf00      	nop
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	03ff63ff 	.word	0x03ff63ff

080024dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	d138      	bne.n	8002564 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e032      	b.n	8002566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2224      	movs	r2, #36	; 0x24
 800250c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0201 	bic.w	r2, r2, #1
 800251e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800252e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6819      	ldr	r1, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	430a      	orrs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2220      	movs	r2, #32
 8002554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002560:	2300      	movs	r3, #0
 8002562:	e000      	b.n	8002566 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002564:	2302      	movs	r3, #2
  }
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002572:	b480      	push	{r7}
 8002574:	b085      	sub	sp, #20
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
 800257a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b20      	cmp	r3, #32
 8002586:	d139      	bne.n	80025fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002592:	2302      	movs	r3, #2
 8002594:	e033      	b.n	80025fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2224      	movs	r2, #36	; 0x24
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0201 	bic.w	r2, r2, #1
 80025b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	021b      	lsls	r3, r3, #8
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a04      	ldr	r2, [pc, #16]	; (8002628 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800261a:	6013      	str	r3, [r2, #0]
}
 800261c:	bf00      	nop
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40007000 	.word	0x40007000

0800262c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <HAL_PWREx_GetVoltageRange+0x18>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002638:	4618      	mov	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40007000 	.word	0x40007000

08002648 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002656:	d130      	bne.n	80026ba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002658:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002664:	d038      	beq.n	80026d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800266e:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002674:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2232      	movs	r2, #50	; 0x32
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	4a1b      	ldr	r2, [pc, #108]	; (80026f0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	0c9b      	lsrs	r3, r3, #18
 8002688:	3301      	adds	r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800268c:	e002      	b.n	8002694 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3b01      	subs	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002694:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026a0:	d102      	bne.n	80026a8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f2      	bne.n	800268e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026b4:	d110      	bne.n	80026d8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e00f      	b.n	80026da <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c6:	d007      	beq.n	80026d8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026c8:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026d0:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026d6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40007000 	.word	0x40007000
 80026ec:	2000028c 	.word	0x2000028c
 80026f0:	431bde83 	.word	0x431bde83

080026f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d102      	bne.n	8002708 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	f000 bc11 	b.w	8002f2a <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002708:	4ba0      	ldr	r3, [pc, #640]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002712:	4b9e      	ldr	r3, [pc, #632]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 80e4 	beq.w	80028f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d007      	beq.n	8002740 <HAL_RCC_OscConfig+0x4c>
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b0c      	cmp	r3, #12
 8002734:	f040 808b 	bne.w	800284e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2b01      	cmp	r3, #1
 800273c:	f040 8087 	bne.w	800284e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002740:	4b92      	ldr	r3, [pc, #584]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_OscConfig+0x64>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e3e8      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1a      	ldr	r2, [r3, #32]
 800275c:	4b8b      	ldr	r3, [pc, #556]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <HAL_RCC_OscConfig+0x7e>
 8002768:	4b88      	ldr	r3, [pc, #544]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002770:	e005      	b.n	800277e <HAL_RCC_OscConfig+0x8a>
 8002772:	4b86      	ldr	r3, [pc, #536]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800277e:	4293      	cmp	r3, r2
 8002780:	d223      	bcs.n	80027ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	4618      	mov	r0, r3
 8002788:	f000 fd7a 	bl	8003280 <RCC_SetFlashLatencyFromMSIRange>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e3c9      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002796:	4b7d      	ldr	r3, [pc, #500]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a7c      	ldr	r2, [pc, #496]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	4b7a      	ldr	r3, [pc, #488]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	4977      	ldr	r1, [pc, #476]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027b4:	4b75      	ldr	r3, [pc, #468]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	4972      	ldr	r1, [pc, #456]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
 80027c8:	e025      	b.n	8002816 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ca:	4b70      	ldr	r3, [pc, #448]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6f      	ldr	r2, [pc, #444]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	4b6d      	ldr	r3, [pc, #436]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	496a      	ldr	r1, [pc, #424]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027e8:	4b68      	ldr	r3, [pc, #416]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	021b      	lsls	r3, r3, #8
 80027f6:	4965      	ldr	r1, [pc, #404]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 fd3a 	bl	8003280 <RCC_SetFlashLatencyFromMSIRange>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e389      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002816:	f000 fc6f 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 800281a:	4602      	mov	r2, r0
 800281c:	4b5b      	ldr	r3, [pc, #364]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	495a      	ldr	r1, [pc, #360]	; (8002990 <HAL_RCC_OscConfig+0x29c>)
 8002828:	5ccb      	ldrb	r3, [r1, r3]
 800282a:	f003 031f 	and.w	r3, r3, #31
 800282e:	fa22 f303 	lsr.w	r3, r2, r3
 8002832:	4a58      	ldr	r2, [pc, #352]	; (8002994 <HAL_RCC_OscConfig+0x2a0>)
 8002834:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002836:	4b58      	ldr	r3, [pc, #352]	; (8002998 <HAL_RCC_OscConfig+0x2a4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7fe fca8 	bl	8001190 <HAL_InitTick>
 8002840:	4603      	mov	r3, r0
 8002842:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002844:	7bfb      	ldrb	r3, [r7, #15]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d052      	beq.n	80028f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	e36d      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d032      	beq.n	80028bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002856:	4b4d      	ldr	r3, [pc, #308]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a4c      	ldr	r2, [pc, #304]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002862:	f7fe fce5 	bl	8001230 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800286a:	f7fe fce1 	bl	8001230 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e356      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800287c:	4b43      	ldr	r3, [pc, #268]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002888:	4b40      	ldr	r3, [pc, #256]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a3f      	ldr	r2, [pc, #252]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800288e:	f043 0308 	orr.w	r3, r3, #8
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	493a      	ldr	r1, [pc, #232]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	021b      	lsls	r3, r3, #8
 80028b4:	4935      	ldr	r1, [pc, #212]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	604b      	str	r3, [r1, #4]
 80028ba:	e01a      	b.n	80028f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028bc:	4b33      	ldr	r3, [pc, #204]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a32      	ldr	r2, [pc, #200]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028c8:	f7fe fcb2 	bl	8001230 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028d0:	f7fe fcae 	bl	8001230 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e323      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028e2:	4b2a      	ldr	r3, [pc, #168]	; (800298c <HAL_RCC_OscConfig+0x298>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x1dc>
 80028ee:	e000      	b.n	80028f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d073      	beq.n	80029e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	2b08      	cmp	r3, #8
 8002902:	d005      	beq.n	8002910 <HAL_RCC_OscConfig+0x21c>
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	2b0c      	cmp	r3, #12
 8002908:	d10e      	bne.n	8002928 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d10b      	bne.n	8002928 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002910:	4b1e      	ldr	r3, [pc, #120]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d063      	beq.n	80029e4 <HAL_RCC_OscConfig+0x2f0>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d15f      	bne.n	80029e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e300      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002930:	d106      	bne.n	8002940 <HAL_RCC_OscConfig+0x24c>
 8002932:	4b16      	ldr	r3, [pc, #88]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a15      	ldr	r2, [pc, #84]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e01d      	b.n	800297c <HAL_RCC_OscConfig+0x288>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0x270>
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a0f      	ldr	r2, [pc, #60]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a0c      	ldr	r2, [pc, #48]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0x288>
 8002964:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_RCC_OscConfig+0x298>)
 800296a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a05      	ldr	r2, [pc, #20]	; (800298c <HAL_RCC_OscConfig+0x298>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800297a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01b      	beq.n	80029bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fc54 	bl	8001230 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	e010      	b.n	80029ae <HAL_RCC_OscConfig+0x2ba>
 800298c:	40021000 	.word	0x40021000
 8002990:	0800569c 	.word	0x0800569c
 8002994:	2000028c 	.word	0x2000028c
 8002998:	20000290 	.word	0x20000290
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800299c:	f7fe fc48 	bl	8001230 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e2bd      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029ae:	4baf      	ldr	r3, [pc, #700]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x2a8>
 80029ba:	e014      	b.n	80029e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe fc38 	bl	8001230 <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c4:	f7fe fc34 	bl	8001230 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e2a9      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029d6:	4ba5      	ldr	r3, [pc, #660]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x2d0>
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d060      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_OscConfig+0x310>
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	2b0c      	cmp	r3, #12
 80029fc:	d119      	bne.n	8002a32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d116      	bne.n	8002a32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a04:	4b99      	ldr	r3, [pc, #612]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_OscConfig+0x328>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e286      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	4b93      	ldr	r3, [pc, #588]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	4990      	ldr	r1, [pc, #576]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a30:	e040      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d023      	beq.n	8002a82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a3a:	4b8c      	ldr	r3, [pc, #560]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a8b      	ldr	r2, [pc, #556]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a46:	f7fe fbf3 	bl	8001230 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4e:	f7fe fbef 	bl	8001230 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e264      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a60:	4b82      	ldr	r3, [pc, #520]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6c:	4b7f      	ldr	r3, [pc, #508]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	497c      	ldr	r1, [pc, #496]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	604b      	str	r3, [r1, #4]
 8002a80:	e018      	b.n	8002ab4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a82:	4b7a      	ldr	r3, [pc, #488]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a79      	ldr	r2, [pc, #484]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fbcf 	bl	8001230 <HAL_GetTick>
 8002a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a96:	f7fe fbcb 	bl	8001230 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e240      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aa8:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1f0      	bne.n	8002a96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d03c      	beq.n	8002b3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d01c      	beq.n	8002b02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac8:	4b68      	ldr	r3, [pc, #416]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ace:	4a67      	ldr	r2, [pc, #412]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fbaa 	bl	8001230 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae0:	f7fe fba6 	bl	8001230 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e21b      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002af2:	4b5e      	ldr	r3, [pc, #376]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ef      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x3ec>
 8002b00:	e01b      	b.n	8002b3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b02:	4b5a      	ldr	r3, [pc, #360]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b08:	4a58      	ldr	r2, [pc, #352]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b12:	f7fe fb8d 	bl	8001230 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b1a:	f7fe fb89 	bl	8001230 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e1fe      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b2c:	4b4f      	ldr	r3, [pc, #316]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ef      	bne.n	8002b1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80a6 	beq.w	8002c94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b4c:	4b47      	ldr	r3, [pc, #284]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10d      	bne.n	8002b74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b58:	4b44      	ldr	r3, [pc, #272]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5c:	4a43      	ldr	r2, [pc, #268]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b62:	6593      	str	r3, [r2, #88]	; 0x58
 8002b64:	4b41      	ldr	r3, [pc, #260]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b70:	2301      	movs	r3, #1
 8002b72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b74:	4b3e      	ldr	r3, [pc, #248]	; (8002c70 <HAL_RCC_OscConfig+0x57c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d118      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b80:	4b3b      	ldr	r3, [pc, #236]	; (8002c70 <HAL_RCC_OscConfig+0x57c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a3a      	ldr	r2, [pc, #232]	; (8002c70 <HAL_RCC_OscConfig+0x57c>)
 8002b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8c:	f7fe fb50 	bl	8001230 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b94:	f7fe fb4c 	bl	8001230 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e1c1      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ba6:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <HAL_RCC_OscConfig+0x57c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d108      	bne.n	8002bcc <HAL_RCC_OscConfig+0x4d8>
 8002bba:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc0:	4a2a      	ldr	r2, [pc, #168]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bca:	e024      	b.n	8002c16 <HAL_RCC_OscConfig+0x522>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	2b05      	cmp	r3, #5
 8002bd2:	d110      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x502>
 8002bd4:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	4a24      	ldr	r2, [pc, #144]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002bdc:	f043 0304 	orr.w	r3, r3, #4
 8002be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be4:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	4a20      	ldr	r2, [pc, #128]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf4:	e00f      	b.n	8002c16 <HAL_RCC_OscConfig+0x522>
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfc:	4a1b      	ldr	r2, [pc, #108]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002bfe:	f023 0301 	bic.w	r3, r3, #1
 8002c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0c:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002c0e:	f023 0304 	bic.w	r3, r3, #4
 8002c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1e:	f7fe fb07 	bl	8001230 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c24:	e00a      	b.n	8002c3c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c26:	f7fe fb03 	bl	8001230 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d901      	bls.n	8002c3c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e176      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_RCC_OscConfig+0x578>)
 8002c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0ed      	beq.n	8002c26 <HAL_RCC_OscConfig+0x532>
 8002c4a:	e01a      	b.n	8002c82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4c:	f7fe faf0 	bl	8001230 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c52:	e00f      	b.n	8002c74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c54:	f7fe faec 	bl	8001230 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d906      	bls.n	8002c74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e15f      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
 8002c6a:	bf00      	nop
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c74:	4baa      	ldr	r3, [pc, #680]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1e8      	bne.n	8002c54 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c82:	7ffb      	ldrb	r3, [r7, #31]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c88:	4ba5      	ldr	r3, [pc, #660]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8c:	4aa4      	ldr	r2, [pc, #656]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d03c      	beq.n	8002d1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d01c      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ca8:	4b9d      	ldr	r3, [pc, #628]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cae:	4a9c      	ldr	r2, [pc, #624]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe faba 	bl	8001230 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cc0:	f7fe fab6 	bl	8001230 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e12b      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cd2:	4b93      	ldr	r3, [pc, #588]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0ef      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x5cc>
 8002ce0:	e01b      	b.n	8002d1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ce2:	4b8f      	ldr	r3, [pc, #572]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ce8:	4a8d      	ldr	r2, [pc, #564]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002cea:	f023 0301 	bic.w	r3, r3, #1
 8002cee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf2:	f7fe fa9d 	bl	8001230 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cfa:	f7fe fa99 	bl	8001230 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e10e      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d0c:	4b84      	ldr	r3, [pc, #528]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1ef      	bne.n	8002cfa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 8102 	beq.w	8002f28 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	f040 80c5 	bne.w	8002eb8 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d2e:	4b7c      	ldr	r3, [pc, #496]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0203 	and.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d12c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d123      	bne.n	8002d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d11b      	bne.n	8002d9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d113      	bne.n	8002d9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	085b      	lsrs	r3, r3, #1
 8002d80:	3b01      	subs	r3, #1
 8002d82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d109      	bne.n	8002d9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	3b01      	subs	r3, #1
 8002d96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d067      	beq.n	8002e6c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b0c      	cmp	r3, #12
 8002da0:	d062      	beq.n	8002e68 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002da2:	4b5f      	ldr	r3, [pc, #380]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0bb      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002db2:	4b5b      	ldr	r3, [pc, #364]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a5a      	ldr	r2, [pc, #360]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002db8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dbc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dbe:	f7fe fa37 	bl	8001230 <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dc6:	f7fe fa33 	bl	8001230 <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e0a8      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dd8:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1f0      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de4:	4b4e      	ldr	r3, [pc, #312]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	4b4e      	ldr	r3, [pc, #312]	; (8002f24 <HAL_RCC_OscConfig+0x830>)
 8002dea:	4013      	ands	r3, r2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002df4:	3a01      	subs	r2, #1
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	4311      	orrs	r1, r2
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dfe:	0212      	lsls	r2, r2, #8
 8002e00:	4311      	orrs	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e06:	0852      	lsrs	r2, r2, #1
 8002e08:	3a01      	subs	r2, #1
 8002e0a:	0552      	lsls	r2, r2, #21
 8002e0c:	4311      	orrs	r1, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e12:	0852      	lsrs	r2, r2, #1
 8002e14:	3a01      	subs	r2, #1
 8002e16:	0652      	lsls	r2, r2, #25
 8002e18:	4311      	orrs	r1, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e1e:	06d2      	lsls	r2, r2, #27
 8002e20:	430a      	orrs	r2, r1
 8002e22:	493f      	ldr	r1, [pc, #252]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e28:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a3c      	ldr	r2, [pc, #240]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e34:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4a39      	ldr	r2, [pc, #228]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002e3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e40:	f7fe f9f6 	bl	8001230 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe f9f2 	bl	8001230 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e067      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e66:	e05f      	b.n	8002f28 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e05e      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d157      	bne.n	8002f28 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e78:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002e7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e84:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a25      	ldr	r2, [pc, #148]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e90:	f7fe f9ce 	bl	8001230 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e98:	f7fe f9ca 	bl	8001230 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e03f      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x7a4>
 8002eb6:	e037      	b.n	8002f28 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eb8:	69bb      	ldr	r3, [r7, #24]
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d02d      	beq.n	8002f1a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b18      	ldr	r3, [pc, #96]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a17      	ldr	r2, [pc, #92]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eca:	4b15      	ldr	r3, [pc, #84]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ed6:	4b12      	ldr	r3, [pc, #72]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	4a11      	ldr	r2, [pc, #68]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002edc:	f023 0303 	bic.w	r3, r3, #3
 8002ee0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4a0e      	ldr	r2, [pc, #56]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002ee8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002eec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef2:	f7fe f99d 	bl	8001230 <HAL_GetTick>
 8002ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efa:	f7fe f999 	bl	8001230 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e00e      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <HAL_RCC_OscConfig+0x82c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1f0      	bne.n	8002efa <HAL_RCC_OscConfig+0x806>
 8002f18:	e006      	b.n	8002f28 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e005      	b.n	8002f2a <HAL_RCC_OscConfig+0x836>
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000
 8002f24:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop

08002f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d101      	bne.n	8002f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e0c8      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f48:	4b66      	ldr	r3, [pc, #408]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d910      	bls.n	8002f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 0207 	bic.w	r2, r3, #7
 8002f5e:	4961      	ldr	r1, [pc, #388]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f66:	4b5f      	ldr	r3, [pc, #380]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	683a      	ldr	r2, [r7, #0]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0b0      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d04c      	beq.n	800301e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8c:	4b56      	ldr	r3, [pc, #344]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d121      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e09e      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa4:	4b50      	ldr	r3, [pc, #320]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d115      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e092      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fbc:	4b4a      	ldr	r3, [pc, #296]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e086      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fcc:	4b46      	ldr	r3, [pc, #280]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e07e      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fdc:	4b42      	ldr	r3, [pc, #264]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f023 0203 	bic.w	r2, r3, #3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	493f      	ldr	r1, [pc, #252]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fee:	f7fe f91f 	bl	8001230 <HAL_GetTick>
 8002ff2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff4:	e00a      	b.n	800300c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ff6:	f7fe f91b 	bl	8001230 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	f241 3288 	movw	r2, #5000	; 0x1388
 8003004:	4293      	cmp	r3, r2
 8003006:	d901      	bls.n	800300c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e066      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 020c 	and.w	r2, r3, #12
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	429a      	cmp	r2, r3
 800301c:	d1eb      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800302a:	4b2f      	ldr	r3, [pc, #188]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	492c      	ldr	r1, [pc, #176]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800303c:	4b29      	ldr	r3, [pc, #164]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	429a      	cmp	r2, r3
 8003048:	d210      	bcs.n	800306c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800304a:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 0207 	bic.w	r2, r3, #7
 8003052:	4924      	ldr	r1, [pc, #144]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b22      	ldr	r3, [pc, #136]	; (80030e4 <HAL_RCC_ClockConfig+0x1b0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e036      	b.n	80030da <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b1b      	ldr	r3, [pc, #108]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4918      	ldr	r1, [pc, #96]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003096:	4b14      	ldr	r3, [pc, #80]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4910      	ldr	r1, [pc, #64]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030aa:	f000 f825 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0d      	ldr	r3, [pc, #52]	; (80030e8 <HAL_RCC_ClockConfig+0x1b4>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490c      	ldr	r1, [pc, #48]	; (80030ec <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	f003 031f 	and.w	r3, r3, #31
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	4a0a      	ldr	r2, [pc, #40]	; (80030f0 <HAL_RCC_ClockConfig+0x1bc>)
 80030c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030ca:	4b0a      	ldr	r3, [pc, #40]	; (80030f4 <HAL_RCC_ClockConfig+0x1c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe f85e 	bl	8001190 <HAL_InitTick>
 80030d4:	4603      	mov	r3, r0
 80030d6:	72fb      	strb	r3, [r7, #11]

  return status;
 80030d8:	7afb      	ldrb	r3, [r7, #11]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40022000 	.word	0x40022000
 80030e8:	40021000 	.word	0x40021000
 80030ec:	0800569c 	.word	0x0800569c
 80030f0:	2000028c 	.word	0x2000028c
 80030f4:	20000290 	.word	0x20000290

080030f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003106:	4b3e      	ldr	r3, [pc, #248]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003110:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x34>
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	2b0c      	cmp	r3, #12
 8003124:	d121      	bne.n	800316a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d11e      	bne.n	800316a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800312c:	4b34      	ldr	r3, [pc, #208]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003138:	4b31      	ldr	r3, [pc, #196]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 800313a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	61fb      	str	r3, [r7, #28]
 8003146:	e005      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003148:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003154:	4a2b      	ldr	r2, [pc, #172]	; (8003204 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800315c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10d      	bne.n	8003180 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003168:	e00a      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b04      	cmp	r3, #4
 800316e:	d102      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <HAL_RCC_GetSysClockFreq+0x110>)
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	e004      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b08      	cmp	r3, #8
 800317a:	d101      	bne.n	8003180 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800317c:	4b23      	ldr	r3, [pc, #140]	; (800320c <HAL_RCC_GetSysClockFreq+0x114>)
 800317e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	2b0c      	cmp	r3, #12
 8003184:	d134      	bne.n	80031f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003186:	4b1e      	ldr	r3, [pc, #120]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0xa6>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d003      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0xac>
 800319c:	e005      	b.n	80031aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800319e:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <HAL_RCC_GetSysClockFreq+0x110>)
 80031a0:	617b      	str	r3, [r7, #20]
      break;
 80031a2:	e005      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031a4:	4b19      	ldr	r3, [pc, #100]	; (800320c <HAL_RCC_GetSysClockFreq+0x114>)
 80031a6:	617b      	str	r3, [r7, #20]
      break;
 80031a8:	e002      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	617b      	str	r3, [r7, #20]
      break;
 80031ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	091b      	lsrs	r3, r3, #4
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	3301      	adds	r3, #1
 80031bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031be:	4b10      	ldr	r3, [pc, #64]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	0a1b      	lsrs	r3, r3, #8
 80031c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	fb02 f203 	mul.w	r2, r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	0e5b      	lsrs	r3, r3, #25
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	3301      	adds	r3, #1
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031f0:	69bb      	ldr	r3, [r7, #24]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3724      	adds	r7, #36	; 0x24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	080056b4 	.word	0x080056b4
 8003208:	00f42400 	.word	0x00f42400
 800320c:	007a1200 	.word	0x007a1200

08003210 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HAL_RCC_GetHCLKFreq+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	2000028c 	.word	0x2000028c

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800322c:	f7ff fff0 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003230:	4602      	mov	r2, r0
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	4904      	ldr	r1, [pc, #16]	; (8003250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800323e:	5ccb      	ldrb	r3, [r1, r3]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	080056ac 	.word	0x080056ac

08003254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003258:	f7ff ffda 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0adb      	lsrs	r3, r3, #11
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4904      	ldr	r1, [pc, #16]	; (800327c <HAL_RCC_GetPCLK2Freq+0x28>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	080056ac 	.word	0x080056ac

08003280 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003288:	2300      	movs	r3, #0
 800328a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800328c:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003290:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003298:	f7ff f9c8 	bl	800262c <HAL_PWREx_GetVoltageRange>
 800329c:	6178      	str	r0, [r7, #20]
 800329e:	e014      	b.n	80032ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032a0:	4b25      	ldr	r3, [pc, #148]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	4a24      	ldr	r2, [pc, #144]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032aa:	6593      	str	r3, [r2, #88]	; 0x58
 80032ac:	4b22      	ldr	r3, [pc, #136]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032b8:	f7ff f9b8 	bl	800262c <HAL_PWREx_GetVoltageRange>
 80032bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032be:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d0:	d10b      	bne.n	80032ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b80      	cmp	r3, #128	; 0x80
 80032d6:	d919      	bls.n	800330c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2ba0      	cmp	r3, #160	; 0xa0
 80032dc:	d902      	bls.n	80032e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032de:	2302      	movs	r3, #2
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	e013      	b.n	800330c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032e4:	2301      	movs	r3, #1
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	e010      	b.n	800330c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d902      	bls.n	80032f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032f0:	2303      	movs	r3, #3
 80032f2:	613b      	str	r3, [r7, #16]
 80032f4:	e00a      	b.n	800330c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b80      	cmp	r3, #128	; 0x80
 80032fa:	d102      	bne.n	8003302 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032fc:	2302      	movs	r3, #2
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	e004      	b.n	800330c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b70      	cmp	r3, #112	; 0x70
 8003306:	d101      	bne.n	800330c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003308:	2301      	movs	r3, #1
 800330a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 0207 	bic.w	r2, r3, #7
 8003314:	4909      	ldr	r1, [pc, #36]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800331c:	4b07      	ldr	r3, [pc, #28]	; (800333c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0307 	and.w	r3, r3, #7
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	429a      	cmp	r2, r3
 8003328:	d001      	beq.n	800332e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	40021000 	.word	0x40021000
 800333c:	40022000 	.word	0x40022000

08003340 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003348:	2300      	movs	r3, #0
 800334a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800334c:	2300      	movs	r3, #0
 800334e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003358:	2b00      	cmp	r3, #0
 800335a:	d031      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003360:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003364:	d01a      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003366:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800336a:	d814      	bhi.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003370:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003374:	d10f      	bne.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003376:	4bac      	ldr	r3, [pc, #688]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	4aab      	ldr	r2, [pc, #684]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003382:	e00c      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f9dc 	bl	8003748 <RCCEx_PLLSAI1_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003394:	e003      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	74fb      	strb	r3, [r7, #19]
      break;
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800339c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800339e:	7cfb      	ldrb	r3, [r7, #19]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d10b      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033a4:	4ba0      	ldr	r3, [pc, #640]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b2:	499d      	ldr	r1, [pc, #628]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033ba:	e001      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 8099 	beq.w	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ce:	2300      	movs	r3, #0
 80033d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033d2:	4b95      	ldr	r3, [pc, #596]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80033e2:	2300      	movs	r3, #0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e8:	4b8f      	ldr	r3, [pc, #572]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	4a8e      	ldr	r2, [pc, #568]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f2:	6593      	str	r3, [r2, #88]	; 0x58
 80033f4:	4b8c      	ldr	r3, [pc, #560]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003400:	2301      	movs	r3, #1
 8003402:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003404:	4b89      	ldr	r3, [pc, #548]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a88      	ldr	r2, [pc, #544]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800340a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003410:	f7fd ff0e 	bl	8001230 <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003416:	e009      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003418:	f7fd ff0a 	bl	8001230 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d902      	bls.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	74fb      	strb	r3, [r7, #19]
        break;
 800342a:	e005      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800342c:	4b7f      	ldr	r3, [pc, #508]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0ef      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d155      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800343e:	4b7a      	ldr	r3, [pc, #488]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003448:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d01e      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	429a      	cmp	r2, r3
 8003458:	d019      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800345a:	4b73      	ldr	r3, [pc, #460]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003464:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003466:	4b70      	ldr	r3, [pc, #448]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800346c:	4a6e      	ldr	r2, [pc, #440]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800346e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003476:	4b6c      	ldr	r3, [pc, #432]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347c:	4a6a      	ldr	r2, [pc, #424]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800347e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003482:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003486:	4a68      	ldr	r2, [pc, #416]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d016      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fd feca 	bl	8001230 <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349e:	e00b      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fd fec6 	bl	8001230 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d902      	bls.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	74fb      	strb	r3, [r7, #19]
            break;
 80034b6:	e006      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b8:	4b5b      	ldr	r3, [pc, #364]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0ec      	beq.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d10b      	bne.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034cc:	4b56      	ldr	r3, [pc, #344]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034da:	4953      	ldr	r1, [pc, #332]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034e2:	e004      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	74bb      	strb	r3, [r7, #18]
 80034e8:	e001      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ee:	7c7b      	ldrb	r3, [r7, #17]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d105      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f4:	4b4c      	ldr	r3, [pc, #304]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f8:	4a4b      	ldr	r2, [pc, #300]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80034fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800350c:	4b46      	ldr	r3, [pc, #280]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f023 0203 	bic.w	r2, r3, #3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	4943      	ldr	r1, [pc, #268]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800352e:	4b3e      	ldr	r3, [pc, #248]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f023 020c 	bic.w	r2, r3, #12
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	493a      	ldr	r1, [pc, #232]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003550:	4b35      	ldr	r3, [pc, #212]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	4932      	ldr	r1, [pc, #200]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003572:	4b2d      	ldr	r3, [pc, #180]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	4929      	ldr	r1, [pc, #164]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003594:	4b24      	ldr	r3, [pc, #144]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	4921      	ldr	r1, [pc, #132]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035b6:	4b1c      	ldr	r3, [pc, #112]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	4918      	ldr	r1, [pc, #96]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035d8:	4b13      	ldr	r3, [pc, #76]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	4910      	ldr	r1, [pc, #64]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d02c      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035fa:	4b0b      	ldr	r3, [pc, #44]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	4907      	ldr	r1, [pc, #28]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003618:	d10a      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800361a:	4b03      	ldr	r3, [pc, #12]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	4a02      	ldr	r2, [pc, #8]	; (8003628 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003620:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003624:	60d3      	str	r3, [r2, #12]
 8003626:	e015      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003628:	40021000 	.word	0x40021000
 800362c:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003638:	d10c      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	3304      	adds	r3, #4
 800363e:	2101      	movs	r1, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f881 	bl	8003748 <RCCEx_PLLSAI1_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003650:	7cfb      	ldrb	r3, [r7, #19]
 8003652:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d028      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003660:	4b30      	ldr	r3, [pc, #192]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	492d      	ldr	r1, [pc, #180]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800367e:	d106      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003686:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800368a:	60d3      	str	r3, [r2, #12]
 800368c:	e011      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003696:	d10c      	bne.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	2101      	movs	r1, #1
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 f852 	bl	8003748 <RCCEx_PLLSAI1_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80036ae:	7cfb      	ldrb	r3, [r7, #19]
 80036b0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d01c      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036be:	4b19      	ldr	r3, [pc, #100]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036cc:	4915      	ldr	r1, [pc, #84]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	3304      	adds	r3, #4
 80036e2:	2102      	movs	r1, #2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f82f 	bl	8003748 <RCCEx_PLLSAI1_Config>
 80036ea:	4603      	mov	r3, r0
 80036ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ee:	7cfb      	ldrb	r3, [r7, #19]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80036f4:	7cfb      	ldrb	r3, [r7, #19]
 80036f6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00a      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003704:	4b07      	ldr	r3, [pc, #28]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	4904      	ldr	r1, [pc, #16]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800371a:	7cbb      	ldrb	r3, [r7, #18]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40021000 	.word	0x40021000

08003728 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a04      	ldr	r2, [pc, #16]	; (8003744 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6013      	str	r3, [r2, #0]
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000

08003748 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003756:	4b74      	ldr	r3, [pc, #464]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003762:	4b71      	ldr	r3, [pc, #452]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0203 	and.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d10d      	bne.n	800378e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
       ||
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800377a:	4b6b      	ldr	r3, [pc, #428]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
       ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d047      	beq.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
 8003792:	e044      	b.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d018      	beq.n	80037ce <RCCEx_PLLSAI1_Config+0x86>
 800379c:	2b03      	cmp	r3, #3
 800379e:	d825      	bhi.n	80037ec <RCCEx_PLLSAI1_Config+0xa4>
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d002      	beq.n	80037aa <RCCEx_PLLSAI1_Config+0x62>
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d009      	beq.n	80037bc <RCCEx_PLLSAI1_Config+0x74>
 80037a8:	e020      	b.n	80037ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037aa:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11d      	bne.n	80037f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ba:	e01a      	b.n	80037f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037bc:	4b5a      	ldr	r3, [pc, #360]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d116      	bne.n	80037f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037cc:	e013      	b.n	80037f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ce:	4b56      	ldr	r3, [pc, #344]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037da:	4b53      	ldr	r3, [pc, #332]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ea:	e006      	b.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e004      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003802:	4b49      	ldr	r3, [pc, #292]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	3b01      	subs	r3, #1
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	430b      	orrs	r3, r1
 8003818:	4943      	ldr	r1, [pc, #268]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800381a:	4313      	orrs	r3, r2
 800381c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d17c      	bne.n	800391e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003824:	4b40      	ldr	r3, [pc, #256]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800382a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800382e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003830:	f7fd fcfe 	bl	8001230 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003836:	e009      	b.n	800384c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003838:	f7fd fcfa 	bl	8001230 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	73fb      	strb	r3, [r7, #15]
        break;
 800384a:	e005      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800384c:	4b36      	ldr	r3, [pc, #216]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ef      	bne.n	8003838 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d15f      	bne.n	800391e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d110      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003864:	4b30      	ldr	r3, [pc, #192]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800386c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6892      	ldr	r2, [r2, #8]
 8003874:	0211      	lsls	r1, r2, #8
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68d2      	ldr	r2, [r2, #12]
 800387a:	06d2      	lsls	r2, r2, #27
 800387c:	430a      	orrs	r2, r1
 800387e:	492a      	ldr	r1, [pc, #168]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	610b      	str	r3, [r1, #16]
 8003884:	e027      	b.n	80038d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d112      	bne.n	80038b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800388c:	4b26      	ldr	r3, [pc, #152]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003894:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6892      	ldr	r2, [r2, #8]
 800389c:	0211      	lsls	r1, r2, #8
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6912      	ldr	r2, [r2, #16]
 80038a2:	0852      	lsrs	r2, r2, #1
 80038a4:	3a01      	subs	r2, #1
 80038a6:	0552      	lsls	r2, r2, #21
 80038a8:	430a      	orrs	r2, r1
 80038aa:	491f      	ldr	r1, [pc, #124]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	610b      	str	r3, [r1, #16]
 80038b0:	e011      	b.n	80038d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6892      	ldr	r2, [r2, #8]
 80038c2:	0211      	lsls	r1, r2, #8
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6952      	ldr	r2, [r2, #20]
 80038c8:	0852      	lsrs	r2, r2, #1
 80038ca:	3a01      	subs	r2, #1
 80038cc:	0652      	lsls	r2, r2, #25
 80038ce:	430a      	orrs	r2, r1
 80038d0:	4915      	ldr	r1, [pc, #84]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a13      	ldr	r2, [pc, #76]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e2:	f7fd fca5 	bl	8001230 <HAL_GetTick>
 80038e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038e8:	e009      	b.n	80038fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ea:	f7fd fca1 	bl	8001230 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d902      	bls.n	80038fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	73fb      	strb	r3, [r7, #15]
          break;
 80038fc:	e005      	b.n	800390a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0ef      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4903      	ldr	r1, [pc, #12]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800391a:	4313      	orrs	r3, r2
 800391c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000

0800392c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e049      	b.n	80039d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd faa8 	bl	8000ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3304      	adds	r3, #4
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f000 fd88 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e049      	b.n	8003a80 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f841 	bl	8003a88 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	3304      	adds	r3, #4
 8003a16:	4619      	mov	r1, r3
 8003a18:	4610      	mov	r0, r2
 8003a1a:	f000 fd31 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_TIM_OC_Start+0x24>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	e03c      	b.n	8003b3a <HAL_TIM_OC_Start+0x9e>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d109      	bne.n	8003ada <HAL_TIM_OC_Start+0x3e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	e02f      	b.n	8003b3a <HAL_TIM_OC_Start+0x9e>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d109      	bne.n	8003af4 <HAL_TIM_OC_Start+0x58>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	e022      	b.n	8003b3a <HAL_TIM_OC_Start+0x9e>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	2b0c      	cmp	r3, #12
 8003af8:	d109      	bne.n	8003b0e <HAL_TIM_OC_Start+0x72>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	bf14      	ite	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	2300      	moveq	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	e015      	b.n	8003b3a <HAL_TIM_OC_Start+0x9e>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	2b10      	cmp	r3, #16
 8003b12:	d109      	bne.n	8003b28 <HAL_TIM_OC_Start+0x8c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	bf14      	ite	ne
 8003b20:	2301      	movne	r3, #1
 8003b22:	2300      	moveq	r3, #0
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	e008      	b.n	8003b3a <HAL_TIM_OC_Start+0x9e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	bf14      	ite	ne
 8003b34:	2301      	movne	r3, #1
 8003b36:	2300      	moveq	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_TIM_OC_Start+0xa6>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e07e      	b.n	8003c40 <HAL_TIM_OC_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d104      	bne.n	8003b52 <HAL_TIM_OC_Start+0xb6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b50:	e023      	b.n	8003b9a <HAL_TIM_OC_Start+0xfe>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d104      	bne.n	8003b62 <HAL_TIM_OC_Start+0xc6>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b60:	e01b      	b.n	8003b9a <HAL_TIM_OC_Start+0xfe>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d104      	bne.n	8003b72 <HAL_TIM_OC_Start+0xd6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b70:	e013      	b.n	8003b9a <HAL_TIM_OC_Start+0xfe>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	d104      	bne.n	8003b82 <HAL_TIM_OC_Start+0xe6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003b80:	e00b      	b.n	8003b9a <HAL_TIM_OC_Start+0xfe>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d104      	bne.n	8003b92 <HAL_TIM_OC_Start+0xf6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b90:	e003      	b.n	8003b9a <HAL_TIM_OC_Start+0xfe>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2202      	movs	r2, #2
 8003b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	6839      	ldr	r1, [r7, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 ffe8 	bl	8004b78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a26      	ldr	r2, [pc, #152]	; (8003c48 <HAL_TIM_OC_Start+0x1ac>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d009      	beq.n	8003bc6 <HAL_TIM_OC_Start+0x12a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a25      	ldr	r2, [pc, #148]	; (8003c4c <HAL_TIM_OC_Start+0x1b0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_TIM_OC_Start+0x12a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a23      	ldr	r2, [pc, #140]	; (8003c50 <HAL_TIM_OC_Start+0x1b4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_TIM_OC_Start+0x12e>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <HAL_TIM_OC_Start+0x130>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <HAL_TIM_OC_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bde:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a18      	ldr	r2, [pc, #96]	; (8003c48 <HAL_TIM_OC_Start+0x1ac>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d009      	beq.n	8003bfe <HAL_TIM_OC_Start+0x162>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d004      	beq.n	8003bfe <HAL_TIM_OC_Start+0x162>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a14      	ldr	r2, [pc, #80]	; (8003c4c <HAL_TIM_OC_Start+0x1b0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d115      	bne.n	8003c2a <HAL_TIM_OC_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	4b13      	ldr	r3, [pc, #76]	; (8003c54 <HAL_TIM_OC_Start+0x1b8>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2b06      	cmp	r3, #6
 8003c0e:	d015      	beq.n	8003c3c <HAL_TIM_OC_Start+0x1a0>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c16:	d011      	beq.n	8003c3c <HAL_TIM_OC_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0201 	orr.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c28:	e008      	b.n	8003c3c <HAL_TIM_OC_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e000      	b.n	8003c3e <HAL_TIM_OC_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40012c00 	.word	0x40012c00
 8003c4c:	40014000 	.word	0x40014000
 8003c50:	40014400 	.word	0x40014400
 8003c54:	00010007 	.word	0x00010007

08003c58 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e049      	b.n	8003cfe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f841 	bl	8003d06 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3304      	adds	r3, #4
 8003c94:	4619      	mov	r1, r3
 8003c96:	4610      	mov	r0, r2
 8003c98:	f000 fbf2 	bl	8004480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d109      	bne.n	8003d40 <HAL_TIM_PWM_Start+0x24>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e03c      	b.n	8003dba <HAL_TIM_PWM_Start+0x9e>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d109      	bne.n	8003d5a <HAL_TIM_PWM_Start+0x3e>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	bf14      	ite	ne
 8003d52:	2301      	movne	r3, #1
 8003d54:	2300      	moveq	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	e02f      	b.n	8003dba <HAL_TIM_PWM_Start+0x9e>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d109      	bne.n	8003d74 <HAL_TIM_PWM_Start+0x58>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	bf14      	ite	ne
 8003d6c:	2301      	movne	r3, #1
 8003d6e:	2300      	moveq	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	e022      	b.n	8003dba <HAL_TIM_PWM_Start+0x9e>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b0c      	cmp	r3, #12
 8003d78:	d109      	bne.n	8003d8e <HAL_TIM_PWM_Start+0x72>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	bf14      	ite	ne
 8003d86:	2301      	movne	r3, #1
 8003d88:	2300      	moveq	r3, #0
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	e015      	b.n	8003dba <HAL_TIM_PWM_Start+0x9e>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d109      	bne.n	8003da8 <HAL_TIM_PWM_Start+0x8c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	e008      	b.n	8003dba <HAL_TIM_PWM_Start+0x9e>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	bf14      	ite	ne
 8003db4:	2301      	movne	r3, #1
 8003db6:	2300      	moveq	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e07e      	b.n	8003ec0 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0xb6>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd0:	e023      	b.n	8003e1a <HAL_TIM_PWM_Start+0xfe>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_PWM_Start+0xc6>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de0:	e01b      	b.n	8003e1a <HAL_TIM_PWM_Start+0xfe>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d104      	bne.n	8003df2 <HAL_TIM_PWM_Start+0xd6>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df0:	e013      	b.n	8003e1a <HAL_TIM_PWM_Start+0xfe>
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b0c      	cmp	r3, #12
 8003df6:	d104      	bne.n	8003e02 <HAL_TIM_PWM_Start+0xe6>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e00:	e00b      	b.n	8003e1a <HAL_TIM_PWM_Start+0xfe>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d104      	bne.n	8003e12 <HAL_TIM_PWM_Start+0xf6>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e10:	e003      	b.n	8003e1a <HAL_TIM_PWM_Start+0xfe>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	6839      	ldr	r1, [r7, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 fea8 	bl	8004b78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <HAL_TIM_PWM_Start+0x1ac>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d009      	beq.n	8003e46 <HAL_TIM_PWM_Start+0x12a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <HAL_TIM_PWM_Start+0x1b0>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_TIM_PWM_Start+0x12a>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <HAL_TIM_PWM_Start+0x1b4>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d101      	bne.n	8003e4a <HAL_TIM_PWM_Start+0x12e>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <HAL_TIM_PWM_Start+0x130>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d007      	beq.n	8003e60 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <HAL_TIM_PWM_Start+0x1ac>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d009      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x162>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e72:	d004      	beq.n	8003e7e <HAL_TIM_PWM_Start+0x162>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <HAL_TIM_PWM_Start+0x1b0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d115      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	4b13      	ldr	r3, [pc, #76]	; (8003ed4 <HAL_TIM_PWM_Start+0x1b8>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b06      	cmp	r3, #6
 8003e8e:	d015      	beq.n	8003ebc <HAL_TIM_PWM_Start+0x1a0>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e96:	d011      	beq.n	8003ebc <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0201 	orr.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea8:	e008      	b.n	8003ebc <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e000      	b.n	8003ebe <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ebc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40012c00 	.word	0x40012c00
 8003ecc:	40014000 	.word	0x40014000
 8003ed0:	40014400 	.word	0x40014400
 8003ed4:	00010007 	.word	0x00010007

08003ed8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	6839      	ldr	r1, [r7, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fe44 	bl	8004b78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a39      	ldr	r2, [pc, #228]	; (8003fdc <HAL_TIM_PWM_Stop+0x104>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d009      	beq.n	8003f0e <HAL_TIM_PWM_Stop+0x36>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a38      	ldr	r2, [pc, #224]	; (8003fe0 <HAL_TIM_PWM_Stop+0x108>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d004      	beq.n	8003f0e <HAL_TIM_PWM_Stop+0x36>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a36      	ldr	r2, [pc, #216]	; (8003fe4 <HAL_TIM_PWM_Stop+0x10c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_PWM_Stop+0x3a>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e000      	b.n	8003f14 <HAL_TIM_PWM_Stop+0x3c>
 8003f12:	2300      	movs	r3, #0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d017      	beq.n	8003f48 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10f      	bne.n	8003f48 <HAL_TIM_PWM_Stop+0x70>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6a1a      	ldr	r2, [r3, #32]
 8003f2e:	f240 4344 	movw	r3, #1092	; 0x444
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d107      	bne.n	8003f48 <HAL_TIM_PWM_Stop+0x70>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6a1a      	ldr	r2, [r3, #32]
 8003f4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10f      	bne.n	8003f78 <HAL_TIM_PWM_Stop+0xa0>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	f240 4344 	movw	r3, #1092	; 0x444
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d107      	bne.n	8003f78 <HAL_TIM_PWM_Stop+0xa0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d104      	bne.n	8003f88 <HAL_TIM_PWM_Stop+0xb0>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f86:	e023      	b.n	8003fd0 <HAL_TIM_PWM_Stop+0xf8>
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d104      	bne.n	8003f98 <HAL_TIM_PWM_Stop+0xc0>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f96:	e01b      	b.n	8003fd0 <HAL_TIM_PWM_Stop+0xf8>
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b08      	cmp	r3, #8
 8003f9c:	d104      	bne.n	8003fa8 <HAL_TIM_PWM_Stop+0xd0>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fa6:	e013      	b.n	8003fd0 <HAL_TIM_PWM_Stop+0xf8>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b0c      	cmp	r3, #12
 8003fac:	d104      	bne.n	8003fb8 <HAL_TIM_PWM_Stop+0xe0>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fb6:	e00b      	b.n	8003fd0 <HAL_TIM_PWM_Stop+0xf8>
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	2b10      	cmp	r3, #16
 8003fbc:	d104      	bne.n	8003fc8 <HAL_TIM_PWM_Stop+0xf0>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fc6:	e003      	b.n	8003fd0 <HAL_TIM_PWM_Stop+0xf8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40012c00 	.word	0x40012c00
 8003fe0:	40014000 	.word	0x40014000
 8003fe4:	40014400 	.word	0x40014400

08003fe8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d101      	bne.n	8004002 <HAL_TIM_OC_ConfigChannel+0x1a>
 8003ffe:	2302      	movs	r3, #2
 8004000:	e064      	b.n	80040cc <HAL_TIM_OC_ConfigChannel+0xe4>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b14      	cmp	r3, #20
 800400e:	d857      	bhi.n	80040c0 <HAL_TIM_OC_ConfigChannel+0xd8>
 8004010:	a201      	add	r2, pc, #4	; (adr r2, 8004018 <HAL_TIM_OC_ConfigChannel+0x30>)
 8004012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004016:	bf00      	nop
 8004018:	0800406d 	.word	0x0800406d
 800401c:	080040c1 	.word	0x080040c1
 8004020:	080040c1 	.word	0x080040c1
 8004024:	080040c1 	.word	0x080040c1
 8004028:	0800407b 	.word	0x0800407b
 800402c:	080040c1 	.word	0x080040c1
 8004030:	080040c1 	.word	0x080040c1
 8004034:	080040c1 	.word	0x080040c1
 8004038:	08004089 	.word	0x08004089
 800403c:	080040c1 	.word	0x080040c1
 8004040:	080040c1 	.word	0x080040c1
 8004044:	080040c1 	.word	0x080040c1
 8004048:	08004097 	.word	0x08004097
 800404c:	080040c1 	.word	0x080040c1
 8004050:	080040c1 	.word	0x080040c1
 8004054:	080040c1 	.word	0x080040c1
 8004058:	080040a5 	.word	0x080040a5
 800405c:	080040c1 	.word	0x080040c1
 8004060:	080040c1 	.word	0x080040c1
 8004064:	080040c1 	.word	0x080040c1
 8004068:	080040b3 	.word	0x080040b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fa68 	bl	8004548 <TIM_OC1_SetConfig>
      break;
 8004078:	e023      	b.n	80040c2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fadd 	bl	8004640 <TIM_OC2_SetConfig>
      break;
 8004086:	e01c      	b.n	80040c2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fb50 	bl	8004734 <TIM_OC3_SetConfig>
      break;
 8004094:	e015      	b.n	80040c2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fbc1 	bl	8004824 <TIM_OC4_SetConfig>
      break;
 80040a2:	e00e      	b.n	80040c2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68b9      	ldr	r1, [r7, #8]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fc18 	bl	80048e0 <TIM_OC5_SetConfig>
      break;
 80040b0:	e007      	b.n	80040c2 <HAL_TIM_OC_ConfigChannel+0xda>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68b9      	ldr	r1, [r7, #8]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fc69 	bl	8004990 <TIM_OC6_SetConfig>
      break;
 80040be:	e000      	b.n	80040c2 <HAL_TIM_OC_ConfigChannel+0xda>
    }

    default:
      break;
 80040c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e0fd      	b.n	80042ea <HAL_TIM_PWM_ConfigChannel+0x216>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b14      	cmp	r3, #20
 80040fa:	f200 80f0 	bhi.w	80042de <HAL_TIM_PWM_ConfigChannel+0x20a>
 80040fe:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004159 	.word	0x08004159
 8004108:	080042df 	.word	0x080042df
 800410c:	080042df 	.word	0x080042df
 8004110:	080042df 	.word	0x080042df
 8004114:	08004199 	.word	0x08004199
 8004118:	080042df 	.word	0x080042df
 800411c:	080042df 	.word	0x080042df
 8004120:	080042df 	.word	0x080042df
 8004124:	080041db 	.word	0x080041db
 8004128:	080042df 	.word	0x080042df
 800412c:	080042df 	.word	0x080042df
 8004130:	080042df 	.word	0x080042df
 8004134:	0800421b 	.word	0x0800421b
 8004138:	080042df 	.word	0x080042df
 800413c:	080042df 	.word	0x080042df
 8004140:	080042df 	.word	0x080042df
 8004144:	0800425d 	.word	0x0800425d
 8004148:	080042df 	.word	0x080042df
 800414c:	080042df 	.word	0x080042df
 8004150:	080042df 	.word	0x080042df
 8004154:	0800429d 	.word	0x0800429d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f9f2 	bl	8004548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0208 	orr.w	r2, r2, #8
 8004172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6999      	ldr	r1, [r3, #24]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	619a      	str	r2, [r3, #24]
      break;
 8004196:	e0a3      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fa4e 	bl	8004640 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	619a      	str	r2, [r3, #24]
      break;
 80041d8:	e082      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 faa7 	bl	8004734 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0208 	orr.w	r2, r2, #8
 80041f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0204 	bic.w	r2, r2, #4
 8004204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69d9      	ldr	r1, [r3, #28]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	61da      	str	r2, [r3, #28]
      break;
 8004218:	e062      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 faff 	bl	8004824 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69d9      	ldr	r1, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	021a      	lsls	r2, r3, #8
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	61da      	str	r2, [r3, #28]
      break;
 800425a:	e041      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fb3c 	bl	80048e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0208 	orr.w	r2, r2, #8
 8004276:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0204 	bic.w	r2, r2, #4
 8004286:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800429a:	e021      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fb74 	bl	8004990 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	021a      	lsls	r2, r3, #8
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042dc:	e000      	b.n	80042e0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80042de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop

080042f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIM_ConfigClockSource+0x18>
 8004308:	2302      	movs	r3, #2
 800430a:	e0b5      	b.n	8004478 <HAL_TIM_ConfigClockSource+0x184>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800432e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004336:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004348:	d03e      	beq.n	80043c8 <HAL_TIM_ConfigClockSource+0xd4>
 800434a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800434e:	f200 8087 	bhi.w	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004356:	f000 8085 	beq.w	8004464 <HAL_TIM_ConfigClockSource+0x170>
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435e:	d87f      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004360:	2b70      	cmp	r3, #112	; 0x70
 8004362:	d01a      	beq.n	800439a <HAL_TIM_ConfigClockSource+0xa6>
 8004364:	2b70      	cmp	r3, #112	; 0x70
 8004366:	d87b      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004368:	2b60      	cmp	r3, #96	; 0x60
 800436a:	d050      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x11a>
 800436c:	2b60      	cmp	r3, #96	; 0x60
 800436e:	d877      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004370:	2b50      	cmp	r3, #80	; 0x50
 8004372:	d03c      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0xfa>
 8004374:	2b50      	cmp	r3, #80	; 0x50
 8004376:	d873      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004378:	2b40      	cmp	r3, #64	; 0x40
 800437a:	d058      	beq.n	800442e <HAL_TIM_ConfigClockSource+0x13a>
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d86f      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004380:	2b30      	cmp	r3, #48	; 0x30
 8004382:	d064      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x15a>
 8004384:	2b30      	cmp	r3, #48	; 0x30
 8004386:	d86b      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	2b20      	cmp	r3, #32
 800438a:	d060      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x15a>
 800438c:	2b20      	cmp	r3, #32
 800438e:	d867      	bhi.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b00      	cmp	r3, #0
 8004392:	d05c      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x15a>
 8004394:	2b10      	cmp	r3, #16
 8004396:	d05a      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004398:	e062      	b.n	8004460 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6899      	ldr	r1, [r3, #8]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f000 fbc5 	bl	8004b38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	609a      	str	r2, [r3, #8]
      break;
 80043c6:	e04e      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	6899      	ldr	r1, [r3, #8]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f000 fbae 	bl	8004b38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043ea:	609a      	str	r2, [r3, #8]
      break;
 80043ec:	e03b      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 fb22 	bl	8004a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2150      	movs	r1, #80	; 0x50
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fb7b 	bl	8004b02 <TIM_ITRx_SetConfig>
      break;
 800440c:	e02b      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	6859      	ldr	r1, [r3, #4]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	461a      	mov	r2, r3
 800441c:	f000 fb41 	bl	8004aa2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2160      	movs	r1, #96	; 0x60
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fb6b 	bl	8004b02 <TIM_ITRx_SetConfig>
      break;
 800442c:	e01b      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	461a      	mov	r2, r3
 800443c:	f000 fb02 	bl	8004a44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2140      	movs	r1, #64	; 0x40
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fb5b 	bl	8004b02 <TIM_ITRx_SetConfig>
      break;
 800444c:	e00b      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4619      	mov	r1, r3
 8004458:	4610      	mov	r0, r2
 800445a:	f000 fb52 	bl	8004b02 <TIM_ITRx_SetConfig>
        break;
 800445e:	e002      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004460:	bf00      	nop
 8004462:	e000      	b.n	8004466 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8004464:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a2a      	ldr	r2, [pc, #168]	; (800453c <TIM_Base_SetConfig+0xbc>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_Base_SetConfig+0x20>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449e:	d108      	bne.n	80044b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a21      	ldr	r2, [pc, #132]	; (800453c <TIM_Base_SetConfig+0xbc>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00b      	beq.n	80044d2 <TIM_Base_SetConfig+0x52>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c0:	d007      	beq.n	80044d2 <TIM_Base_SetConfig+0x52>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <TIM_Base_SetConfig+0xc0>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d003      	beq.n	80044d2 <TIM_Base_SetConfig+0x52>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <TIM_Base_SetConfig+0xc4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d108      	bne.n	80044e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a0c      	ldr	r2, [pc, #48]	; (800453c <TIM_Base_SetConfig+0xbc>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d007      	beq.n	8004520 <TIM_Base_SetConfig+0xa0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a0b      	ldr	r2, [pc, #44]	; (8004540 <TIM_Base_SetConfig+0xc0>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d003      	beq.n	8004520 <TIM_Base_SetConfig+0xa0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a0a      	ldr	r2, [pc, #40]	; (8004544 <TIM_Base_SetConfig+0xc4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d103      	bne.n	8004528 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	691a      	ldr	r2, [r3, #16]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	615a      	str	r2, [r3, #20]
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40014000 	.word	0x40014000
 8004544:	40014400 	.word	0x40014400

08004548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	f023 0201 	bic.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0303 	bic.w	r3, r3, #3
 8004582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f023 0302 	bic.w	r3, r3, #2
 8004594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a24      	ldr	r2, [pc, #144]	; (8004634 <TIM_OC1_SetConfig+0xec>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d007      	beq.n	80045b8 <TIM_OC1_SetConfig+0x70>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a23      	ldr	r2, [pc, #140]	; (8004638 <TIM_OC1_SetConfig+0xf0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <TIM_OC1_SetConfig+0x70>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a22      	ldr	r2, [pc, #136]	; (800463c <TIM_OC1_SetConfig+0xf4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d10c      	bne.n	80045d2 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f023 0308 	bic.w	r3, r3, #8
 80045be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a17      	ldr	r2, [pc, #92]	; (8004634 <TIM_OC1_SetConfig+0xec>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d007      	beq.n	80045ea <TIM_OC1_SetConfig+0xa2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a16      	ldr	r2, [pc, #88]	; (8004638 <TIM_OC1_SetConfig+0xf0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_OC1_SetConfig+0xa2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a15      	ldr	r2, [pc, #84]	; (800463c <TIM_OC1_SetConfig+0xf4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d111      	bne.n	800460e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	621a      	str	r2, [r3, #32]
}
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr
 8004634:	40012c00 	.word	0x40012c00
 8004638:	40014000 	.word	0x40014000
 800463c:	40014400 	.word	0x40014400

08004640 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0210 	bic.w	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	4313      	orrs	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0320 	bic.w	r3, r3, #32
 800468e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4313      	orrs	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a22      	ldr	r2, [pc, #136]	; (8004728 <TIM_OC2_SetConfig+0xe8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d10d      	bne.n	80046c0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a19      	ldr	r2, [pc, #100]	; (8004728 <TIM_OC2_SetConfig+0xe8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <TIM_OC2_SetConfig+0x98>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a18      	ldr	r2, [pc, #96]	; (800472c <TIM_OC2_SetConfig+0xec>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d003      	beq.n	80046d8 <TIM_OC2_SetConfig+0x98>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a17      	ldr	r2, [pc, #92]	; (8004730 <TIM_OC2_SetConfig+0xf0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d113      	bne.n	8004700 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	40012c00 	.word	0x40012c00
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400

08004734 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004734:	b480      	push	{r7}
 8004736:	b087      	sub	sp, #28
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0303 	bic.w	r3, r3, #3
 800476e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	021b      	lsls	r3, r3, #8
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a21      	ldr	r2, [pc, #132]	; (8004818 <TIM_OC3_SetConfig+0xe4>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d10d      	bne.n	80047b2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800479c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a18      	ldr	r2, [pc, #96]	; (8004818 <TIM_OC3_SetConfig+0xe4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d007      	beq.n	80047ca <TIM_OC3_SetConfig+0x96>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a17      	ldr	r2, [pc, #92]	; (800481c <TIM_OC3_SetConfig+0xe8>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_OC3_SetConfig+0x96>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a16      	ldr	r2, [pc, #88]	; (8004820 <TIM_OC3_SetConfig+0xec>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d113      	bne.n	80047f2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	011b      	lsls	r3, r3, #4
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	011b      	lsls	r3, r3, #4
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	621a      	str	r2, [r3, #32]
}
 800480c:	bf00      	nop
 800480e:	371c      	adds	r7, #28
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40014000 	.word	0x40014000
 8004820:	40014400 	.word	0x40014400

08004824 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	4313      	orrs	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	031b      	lsls	r3, r3, #12
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a14      	ldr	r2, [pc, #80]	; (80048d4 <TIM_OC4_SetConfig+0xb0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d007      	beq.n	8004898 <TIM_OC4_SetConfig+0x74>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a13      	ldr	r2, [pc, #76]	; (80048d8 <TIM_OC4_SetConfig+0xb4>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_OC4_SetConfig+0x74>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a12      	ldr	r2, [pc, #72]	; (80048dc <TIM_OC4_SetConfig+0xb8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d109      	bne.n	80048ac <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800489e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	019b      	lsls	r3, r3, #6
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40014400 	.word	0x40014400

080048e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800490e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004924:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	041b      	lsls	r3, r3, #16
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a13      	ldr	r2, [pc, #76]	; (8004984 <TIM_OC5_SetConfig+0xa4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d007      	beq.n	800494a <TIM_OC5_SetConfig+0x6a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a12      	ldr	r2, [pc, #72]	; (8004988 <TIM_OC5_SetConfig+0xa8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d003      	beq.n	800494a <TIM_OC5_SetConfig+0x6a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a11      	ldr	r2, [pc, #68]	; (800498c <TIM_OC5_SetConfig+0xac>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d109      	bne.n	800495e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004950:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	4313      	orrs	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	621a      	str	r2, [r3, #32]
}
 8004978:	bf00      	nop
 800497a:	371c      	adds	r7, #28
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40014000 	.word	0x40014000
 800498c:	40014400 	.word	0x40014400

08004990 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a1b      	ldr	r3, [r3, #32]
 800499e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a1b      	ldr	r3, [r3, #32]
 80049aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	051b      	lsls	r3, r3, #20
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a14      	ldr	r2, [pc, #80]	; (8004a38 <TIM_OC6_SetConfig+0xa8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d007      	beq.n	80049fc <TIM_OC6_SetConfig+0x6c>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a13      	ldr	r2, [pc, #76]	; (8004a3c <TIM_OC6_SetConfig+0xac>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_OC6_SetConfig+0x6c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a12      	ldr	r2, [pc, #72]	; (8004a40 <TIM_OC6_SetConfig+0xb0>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d109      	bne.n	8004a10 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	029b      	lsls	r3, r3, #10
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	621a      	str	r2, [r3, #32]
}
 8004a2a:	bf00      	nop
 8004a2c:	371c      	adds	r7, #28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40014000 	.word	0x40014000
 8004a40:	40014400 	.word	0x40014400

08004a44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	f023 0201 	bic.w	r2, r3, #1
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	011b      	lsls	r3, r3, #4
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f023 030a 	bic.w	r3, r3, #10
 8004a80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b087      	sub	sp, #28
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	60f8      	str	r0, [r7, #12]
 8004aaa:	60b9      	str	r1, [r7, #8]
 8004aac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	f023 0210 	bic.w	r2, r3, #16
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004acc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	031b      	lsls	r3, r3, #12
 8004ad2:	697a      	ldr	r2, [r7, #20]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ade:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	621a      	str	r2, [r3, #32]
}
 8004af6:	bf00      	nop
 8004af8:	371c      	adds	r7, #28
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f043 0307 	orr.w	r3, r3, #7
 8004b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	609a      	str	r2, [r3, #8]
}
 8004b2c:	bf00      	nop
 8004b2e:	3714      	adds	r7, #20
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b087      	sub	sp, #28
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	021a      	lsls	r2, r3, #8
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	431a      	orrs	r2, r3
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	609a      	str	r2, [r3, #8]
}
 8004b6c:	bf00      	nop
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 031f 	and.w	r3, r3, #31
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a1a      	ldr	r2, [r3, #32]
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	401a      	ands	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6a1a      	ldr	r2, [r3, #32]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 031f 	and.w	r3, r3, #31
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb0:	431a      	orrs	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
	...

08004bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e04f      	b.n	8004c7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d108      	bne.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c0c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c44:	d004      	beq.n	8004c50 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a10      	ldr	r2, [pc, #64]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10c      	bne.n	8004c6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40014000 	.word	0x40014000

08004c90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d101      	bne.n	8004cac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ca8:	2302      	movs	r3, #2
 8004caa:	e060      	b.n	8004d6e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	041b      	lsls	r3, r3, #16
 8004d22:	4313      	orrs	r3, r2
 8004d24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d115      	bne.n	8004d5c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	051b      	lsls	r3, r3, #20
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40012c00 	.word	0x40012c00

08004d80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e040      	b.n	8004e14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fc f902 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2224      	movs	r2, #36	; 0x24
 8004dac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f8c0 	bl	8004f44 <UART_SetConfig>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e022      	b.n	8004e14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 fac0 	bl	800535c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689a      	ldr	r2, [r3, #8]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f042 0201 	orr.w	r2, r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 fb47 	bl	80054a0 <UART_CheckIdleState>
 8004e12:	4603      	mov	r3, r0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b08a      	sub	sp, #40	; 0x28
 8004e20:	af02      	add	r7, sp, #8
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	603b      	str	r3, [r7, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	f040 8082 	bne.w	8004f3a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d002      	beq.n	8004e42 <HAL_UART_Transmit+0x26>
 8004e3c:	88fb      	ldrh	r3, [r7, #6]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e07a      	b.n	8004f3c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_UART_Transmit+0x38>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e073      	b.n	8004f3c <HAL_UART_Transmit+0x120>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2221      	movs	r2, #33	; 0x21
 8004e68:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e6a:	f7fc f9e1 	bl	8001230 <HAL_GetTick>
 8004e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	88fa      	ldrh	r2, [r7, #6]
 8004e74:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	88fa      	ldrh	r2, [r7, #6]
 8004e7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e88:	d108      	bne.n	8004e9c <HAL_UART_Transmit+0x80>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d104      	bne.n	8004e9c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	e003      	b.n	8004ea4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004eac:	e02d      	b.n	8004f0a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2180      	movs	r1, #128	; 0x80
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 fb3a 	bl	8005532 <UART_WaitOnFlagUntilTimeout>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e039      	b.n	8004f3c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	881a      	ldrh	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eda:	b292      	uxth	r2, r2
 8004edc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e008      	b.n	8004ef8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	781a      	ldrb	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1cb      	bne.n	8004eae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	2140      	movs	r1, #64	; 0x40
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 fb06 	bl	8005532 <UART_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e005      	b.n	8004f3c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2220      	movs	r2, #32
 8004f34:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e000      	b.n	8004f3c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004f3a:	2302      	movs	r3, #2
  }
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3720      	adds	r7, #32
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f44:	b5b0      	push	{r4, r5, r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	69db      	ldr	r3, [r3, #28]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4baf      	ldr	r3, [pc, #700]	; (800522c <UART_SetConfig+0x2e8>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	69f9      	ldr	r1, [r7, #28]
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68da      	ldr	r2, [r3, #12]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4aa4      	ldr	r2, [pc, #656]	; (8005230 <UART_SetConfig+0x2ec>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d004      	beq.n	8004fac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a9b      	ldr	r2, [pc, #620]	; (8005234 <UART_SetConfig+0x2f0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d121      	bne.n	800500e <UART_SetConfig+0xca>
 8004fca:	4b9b      	ldr	r3, [pc, #620]	; (8005238 <UART_SetConfig+0x2f4>)
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d817      	bhi.n	8005008 <UART_SetConfig+0xc4>
 8004fd8:	a201      	add	r2, pc, #4	; (adr r2, 8004fe0 <UART_SetConfig+0x9c>)
 8004fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fde:	bf00      	nop
 8004fe0:	08004ff1 	.word	0x08004ff1
 8004fe4:	08004ffd 	.word	0x08004ffd
 8004fe8:	08004ff7 	.word	0x08004ff7
 8004fec:	08005003 	.word	0x08005003
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	76fb      	strb	r3, [r7, #27]
 8004ff4:	e070      	b.n	80050d8 <UART_SetConfig+0x194>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	76fb      	strb	r3, [r7, #27]
 8004ffa:	e06d      	b.n	80050d8 <UART_SetConfig+0x194>
 8004ffc:	2304      	movs	r3, #4
 8004ffe:	76fb      	strb	r3, [r7, #27]
 8005000:	e06a      	b.n	80050d8 <UART_SetConfig+0x194>
 8005002:	2308      	movs	r3, #8
 8005004:	76fb      	strb	r3, [r7, #27]
 8005006:	e067      	b.n	80050d8 <UART_SetConfig+0x194>
 8005008:	2310      	movs	r3, #16
 800500a:	76fb      	strb	r3, [r7, #27]
 800500c:	e064      	b.n	80050d8 <UART_SetConfig+0x194>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a8a      	ldr	r2, [pc, #552]	; (800523c <UART_SetConfig+0x2f8>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d132      	bne.n	800507e <UART_SetConfig+0x13a>
 8005018:	4b87      	ldr	r3, [pc, #540]	; (8005238 <UART_SetConfig+0x2f4>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f003 030c 	and.w	r3, r3, #12
 8005022:	2b0c      	cmp	r3, #12
 8005024:	d828      	bhi.n	8005078 <UART_SetConfig+0x134>
 8005026:	a201      	add	r2, pc, #4	; (adr r2, 800502c <UART_SetConfig+0xe8>)
 8005028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502c:	08005061 	.word	0x08005061
 8005030:	08005079 	.word	0x08005079
 8005034:	08005079 	.word	0x08005079
 8005038:	08005079 	.word	0x08005079
 800503c:	0800506d 	.word	0x0800506d
 8005040:	08005079 	.word	0x08005079
 8005044:	08005079 	.word	0x08005079
 8005048:	08005079 	.word	0x08005079
 800504c:	08005067 	.word	0x08005067
 8005050:	08005079 	.word	0x08005079
 8005054:	08005079 	.word	0x08005079
 8005058:	08005079 	.word	0x08005079
 800505c:	08005073 	.word	0x08005073
 8005060:	2300      	movs	r3, #0
 8005062:	76fb      	strb	r3, [r7, #27]
 8005064:	e038      	b.n	80050d8 <UART_SetConfig+0x194>
 8005066:	2302      	movs	r3, #2
 8005068:	76fb      	strb	r3, [r7, #27]
 800506a:	e035      	b.n	80050d8 <UART_SetConfig+0x194>
 800506c:	2304      	movs	r3, #4
 800506e:	76fb      	strb	r3, [r7, #27]
 8005070:	e032      	b.n	80050d8 <UART_SetConfig+0x194>
 8005072:	2308      	movs	r3, #8
 8005074:	76fb      	strb	r3, [r7, #27]
 8005076:	e02f      	b.n	80050d8 <UART_SetConfig+0x194>
 8005078:	2310      	movs	r3, #16
 800507a:	76fb      	strb	r3, [r7, #27]
 800507c:	e02c      	b.n	80050d8 <UART_SetConfig+0x194>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a6b      	ldr	r2, [pc, #428]	; (8005230 <UART_SetConfig+0x2ec>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d125      	bne.n	80050d4 <UART_SetConfig+0x190>
 8005088:	4b6b      	ldr	r3, [pc, #428]	; (8005238 <UART_SetConfig+0x2f4>)
 800508a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005092:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005096:	d017      	beq.n	80050c8 <UART_SetConfig+0x184>
 8005098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800509c:	d817      	bhi.n	80050ce <UART_SetConfig+0x18a>
 800509e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a2:	d00b      	beq.n	80050bc <UART_SetConfig+0x178>
 80050a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050a8:	d811      	bhi.n	80050ce <UART_SetConfig+0x18a>
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d003      	beq.n	80050b6 <UART_SetConfig+0x172>
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b2:	d006      	beq.n	80050c2 <UART_SetConfig+0x17e>
 80050b4:	e00b      	b.n	80050ce <UART_SetConfig+0x18a>
 80050b6:	2300      	movs	r3, #0
 80050b8:	76fb      	strb	r3, [r7, #27]
 80050ba:	e00d      	b.n	80050d8 <UART_SetConfig+0x194>
 80050bc:	2302      	movs	r3, #2
 80050be:	76fb      	strb	r3, [r7, #27]
 80050c0:	e00a      	b.n	80050d8 <UART_SetConfig+0x194>
 80050c2:	2304      	movs	r3, #4
 80050c4:	76fb      	strb	r3, [r7, #27]
 80050c6:	e007      	b.n	80050d8 <UART_SetConfig+0x194>
 80050c8:	2308      	movs	r3, #8
 80050ca:	76fb      	strb	r3, [r7, #27]
 80050cc:	e004      	b.n	80050d8 <UART_SetConfig+0x194>
 80050ce:	2310      	movs	r3, #16
 80050d0:	76fb      	strb	r3, [r7, #27]
 80050d2:	e001      	b.n	80050d8 <UART_SetConfig+0x194>
 80050d4:	2310      	movs	r3, #16
 80050d6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a54      	ldr	r2, [pc, #336]	; (8005230 <UART_SetConfig+0x2ec>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d173      	bne.n	80051ca <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050e2:	7efb      	ldrb	r3, [r7, #27]
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d824      	bhi.n	8005132 <UART_SetConfig+0x1ee>
 80050e8:	a201      	add	r2, pc, #4	; (adr r2, 80050f0 <UART_SetConfig+0x1ac>)
 80050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ee:	bf00      	nop
 80050f0:	08005115 	.word	0x08005115
 80050f4:	08005133 	.word	0x08005133
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	08005133 	.word	0x08005133
 8005100:	08005123 	.word	0x08005123
 8005104:	08005133 	.word	0x08005133
 8005108:	08005133 	.word	0x08005133
 800510c:	08005133 	.word	0x08005133
 8005110:	0800512b 	.word	0x0800512b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005114:	f7fe f888 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8005118:	6178      	str	r0, [r7, #20]
        break;
 800511a:	e00f      	b.n	800513c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800511c:	4b48      	ldr	r3, [pc, #288]	; (8005240 <UART_SetConfig+0x2fc>)
 800511e:	617b      	str	r3, [r7, #20]
        break;
 8005120:	e00c      	b.n	800513c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005122:	f7fd ffe9 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 8005126:	6178      	str	r0, [r7, #20]
        break;
 8005128:	e008      	b.n	800513c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512e:	617b      	str	r3, [r7, #20]
        break;
 8005130:	e004      	b.n	800513c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	76bb      	strb	r3, [r7, #26]
        break;
 800513a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 80fe 	beq.w	8005340 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	4613      	mov	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4413      	add	r3, r2
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	429a      	cmp	r2, r3
 8005152:	d305      	bcc.n	8005160 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	429a      	cmp	r2, r3
 800515e:	d902      	bls.n	8005166 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	76bb      	strb	r3, [r7, #26]
 8005164:	e0ec      	b.n	8005340 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	4618      	mov	r0, r3
 800516a:	f04f 0100 	mov.w	r1, #0
 800516e:	f04f 0200 	mov.w	r2, #0
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	020b      	lsls	r3, r1, #8
 8005178:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800517c:	0202      	lsls	r2, r0, #8
 800517e:	6879      	ldr	r1, [r7, #4]
 8005180:	6849      	ldr	r1, [r1, #4]
 8005182:	0849      	lsrs	r1, r1, #1
 8005184:	4608      	mov	r0, r1
 8005186:	f04f 0100 	mov.w	r1, #0
 800518a:	1814      	adds	r4, r2, r0
 800518c:	eb43 0501 	adc.w	r5, r3, r1
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	461a      	mov	r2, r3
 8005196:	f04f 0300 	mov.w	r3, #0
 800519a:	4620      	mov	r0, r4
 800519c:	4629      	mov	r1, r5
 800519e:	f7fb f815 	bl	80001cc <__aeabi_uldivmod>
 80051a2:	4602      	mov	r2, r0
 80051a4:	460b      	mov	r3, r1
 80051a6:	4613      	mov	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051b0:	d308      	bcc.n	80051c4 <UART_SetConfig+0x280>
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051b8:	d204      	bcs.n	80051c4 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	e0bd      	b.n	8005340 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	76bb      	strb	r3, [r7, #26]
 80051c8:	e0ba      	b.n	8005340 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051d2:	d168      	bne.n	80052a6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 80051d4:	7efb      	ldrb	r3, [r7, #27]
 80051d6:	2b08      	cmp	r3, #8
 80051d8:	d834      	bhi.n	8005244 <UART_SetConfig+0x300>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <UART_SetConfig+0x29c>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	08005205 	.word	0x08005205
 80051e4:	0800520d 	.word	0x0800520d
 80051e8:	08005215 	.word	0x08005215
 80051ec:	08005245 	.word	0x08005245
 80051f0:	0800521b 	.word	0x0800521b
 80051f4:	08005245 	.word	0x08005245
 80051f8:	08005245 	.word	0x08005245
 80051fc:	08005245 	.word	0x08005245
 8005200:	08005223 	.word	0x08005223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005204:	f7fe f810 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8005208:	6178      	str	r0, [r7, #20]
        break;
 800520a:	e020      	b.n	800524e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7fe f822 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 8005210:	6178      	str	r0, [r7, #20]
        break;
 8005212:	e01c      	b.n	800524e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005214:	4b0a      	ldr	r3, [pc, #40]	; (8005240 <UART_SetConfig+0x2fc>)
 8005216:	617b      	str	r3, [r7, #20]
        break;
 8005218:	e019      	b.n	800524e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800521a:	f7fd ff6d 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 800521e:	6178      	str	r0, [r7, #20]
        break;
 8005220:	e015      	b.n	800524e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005226:	617b      	str	r3, [r7, #20]
        break;
 8005228:	e011      	b.n	800524e <UART_SetConfig+0x30a>
 800522a:	bf00      	nop
 800522c:	efff69f3 	.word	0xefff69f3
 8005230:	40008000 	.word	0x40008000
 8005234:	40013800 	.word	0x40013800
 8005238:	40021000 	.word	0x40021000
 800523c:	40004400 	.word	0x40004400
 8005240:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	76bb      	strb	r3, [r7, #26]
        break;
 800524c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d075      	beq.n	8005340 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	005a      	lsls	r2, r3, #1
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	441a      	add	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	b29b      	uxth	r3, r3
 800526a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b0f      	cmp	r3, #15
 8005270:	d916      	bls.n	80052a0 <UART_SetConfig+0x35c>
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005278:	d212      	bcs.n	80052a0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	b29b      	uxth	r3, r3
 800527e:	f023 030f 	bic.w	r3, r3, #15
 8005282:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	085b      	lsrs	r3, r3, #1
 8005288:	b29b      	uxth	r3, r3
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	b29a      	uxth	r2, r3
 8005290:	89fb      	ldrh	r3, [r7, #14]
 8005292:	4313      	orrs	r3, r2
 8005294:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	89fa      	ldrh	r2, [r7, #14]
 800529c:	60da      	str	r2, [r3, #12]
 800529e:	e04f      	b.n	8005340 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	76bb      	strb	r3, [r7, #26]
 80052a4:	e04c      	b.n	8005340 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052a6:	7efb      	ldrb	r3, [r7, #27]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d828      	bhi.n	80052fe <UART_SetConfig+0x3ba>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <UART_SetConfig+0x370>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	080052ff 	.word	0x080052ff
 80052c4:	080052ef 	.word	0x080052ef
 80052c8:	080052ff 	.word	0x080052ff
 80052cc:	080052ff 	.word	0x080052ff
 80052d0:	080052ff 	.word	0x080052ff
 80052d4:	080052f7 	.word	0x080052f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d8:	f7fd ffa6 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 80052dc:	6178      	str	r0, [r7, #20]
        break;
 80052de:	e013      	b.n	8005308 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e0:	f7fd ffb8 	bl	8003254 <HAL_RCC_GetPCLK2Freq>
 80052e4:	6178      	str	r0, [r7, #20]
        break;
 80052e6:	e00f      	b.n	8005308 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e8:	4b1b      	ldr	r3, [pc, #108]	; (8005358 <UART_SetConfig+0x414>)
 80052ea:	617b      	str	r3, [r7, #20]
        break;
 80052ec:	e00c      	b.n	8005308 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ee:	f7fd ff03 	bl	80030f8 <HAL_RCC_GetSysClockFreq>
 80052f2:	6178      	str	r0, [r7, #20]
        break;
 80052f4:	e008      	b.n	8005308 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052fa:	617b      	str	r3, [r7, #20]
        break;
 80052fc:	e004      	b.n	8005308 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	76bb      	strb	r3, [r7, #26]
        break;
 8005306:	bf00      	nop
    }

    if (pclk != 0U)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d018      	beq.n	8005340 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	085a      	lsrs	r2, r3, #1
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	441a      	add	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	b29b      	uxth	r3, r3
 8005322:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b0f      	cmp	r3, #15
 8005328:	d908      	bls.n	800533c <UART_SetConfig+0x3f8>
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005330:	d204      	bcs.n	800533c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	60da      	str	r2, [r3, #12]
 800533a:	e001      	b.n	8005340 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800534c:	7ebb      	ldrb	r3, [r7, #26]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bdb0      	pop	{r4, r5, r7, pc}
 8005356:	bf00      	nop
 8005358:	00f42400 	.word	0x00f42400

0800535c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00a      	beq.n	8005386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d00a      	beq.n	80053ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00a      	beq.n	800540e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	f003 0320 	and.w	r3, r3, #32
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00a      	beq.n	8005430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005438:	2b00      	cmp	r3, #0
 800543a:	d01a      	beq.n	8005472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800545a:	d10a      	bne.n	8005472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00a      	beq.n	8005494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]
  }
}
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr

080054a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af02      	add	r7, sp, #8
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054b0:	f7fb febe 	bl	8001230 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d10e      	bne.n	80054e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f82d 	bl	8005532 <UART_WaitOnFlagUntilTimeout>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e023      	b.n	800552a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d10e      	bne.n	800550e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f817 	bl	8005532 <UART_WaitOnFlagUntilTimeout>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e00d      	b.n	800552a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2220      	movs	r2, #32
 8005512:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2220      	movs	r2, #32
 8005518:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	60b9      	str	r1, [r7, #8]
 800553c:	603b      	str	r3, [r7, #0]
 800553e:	4613      	mov	r3, r2
 8005540:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005542:	e05e      	b.n	8005602 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800554a:	d05a      	beq.n	8005602 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800554c:	f7fb fe70 	bl	8001230 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	429a      	cmp	r2, r3
 800555a:	d302      	bcc.n	8005562 <UART_WaitOnFlagUntilTimeout+0x30>
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d11b      	bne.n	800559a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005570:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2220      	movs	r2, #32
 8005586:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2220      	movs	r2, #32
 800558c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e043      	b.n	8005622 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d02c      	beq.n	8005602 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b6:	d124      	bne.n	8005602 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055c0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055d0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0201 	bic.w	r2, r2, #1
 80055e0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2220      	movs	r2, #32
 80055e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e00f      	b.n	8005622 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69da      	ldr	r2, [r3, #28]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	429a      	cmp	r2, r3
 8005610:	bf0c      	ite	eq
 8005612:	2301      	moveq	r3, #1
 8005614:	2300      	movne	r3, #0
 8005616:	b2db      	uxtb	r3, r3
 8005618:	461a      	mov	r2, r3
 800561a:	79fb      	ldrb	r3, [r7, #7]
 800561c:	429a      	cmp	r2, r3
 800561e:	d091      	beq.n	8005544 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <__libc_init_array>:
 800562c:	b570      	push	{r4, r5, r6, lr}
 800562e:	4d0d      	ldr	r5, [pc, #52]	; (8005664 <__libc_init_array+0x38>)
 8005630:	4c0d      	ldr	r4, [pc, #52]	; (8005668 <__libc_init_array+0x3c>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	2600      	movs	r6, #0
 8005638:	42a6      	cmp	r6, r4
 800563a:	d109      	bne.n	8005650 <__libc_init_array+0x24>
 800563c:	4d0b      	ldr	r5, [pc, #44]	; (800566c <__libc_init_array+0x40>)
 800563e:	4c0c      	ldr	r4, [pc, #48]	; (8005670 <__libc_init_array+0x44>)
 8005640:	f000 f820 	bl	8005684 <_init>
 8005644:	1b64      	subs	r4, r4, r5
 8005646:	10a4      	asrs	r4, r4, #2
 8005648:	2600      	movs	r6, #0
 800564a:	42a6      	cmp	r6, r4
 800564c:	d105      	bne.n	800565a <__libc_init_array+0x2e>
 800564e:	bd70      	pop	{r4, r5, r6, pc}
 8005650:	f855 3b04 	ldr.w	r3, [r5], #4
 8005654:	4798      	blx	r3
 8005656:	3601      	adds	r6, #1
 8005658:	e7ee      	b.n	8005638 <__libc_init_array+0xc>
 800565a:	f855 3b04 	ldr.w	r3, [r5], #4
 800565e:	4798      	blx	r3
 8005660:	3601      	adds	r6, #1
 8005662:	e7f2      	b.n	800564a <__libc_init_array+0x1e>
 8005664:	080056ec 	.word	0x080056ec
 8005668:	080056ec 	.word	0x080056ec
 800566c:	080056ec 	.word	0x080056ec
 8005670:	080056f0 	.word	0x080056f0

08005674 <memset>:
 8005674:	4402      	add	r2, r0
 8005676:	4603      	mov	r3, r0
 8005678:	4293      	cmp	r3, r2
 800567a:	d100      	bne.n	800567e <memset+0xa>
 800567c:	4770      	bx	lr
 800567e:	f803 1b01 	strb.w	r1, [r3], #1
 8005682:	e7f9      	b.n	8005678 <memset+0x4>

08005684 <_init>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	bf00      	nop
 8005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568a:	bc08      	pop	{r3}
 800568c:	469e      	mov	lr, r3
 800568e:	4770      	bx	lr

08005690 <_fini>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	bf00      	nop
 8005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005696:	bc08      	pop	{r3}
 8005698:	469e      	mov	lr, r3
 800569a:	4770      	bx	lr
